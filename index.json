{
  "api/index.html": {
    "href": "api/index.html",
    "title": "nanoFramework APIs | nanoFramework Documentation",
    "keywords": "nanoFramework APIs Our APIs try to follow, as closely as possible, the ones from UWP. The main goal is to potentiate code reuse, existing code samples for Core IoT and even Desktop. This is a work in progress so do check back often for updates. If you find any bugs in documentation we appreciate if you let us know or even better submit a PR with the correction. Happy coding with nanoFramework !"
  },
  "api/nanoFramework.Devices.Can.CanController.html": {
    "href": "api/nanoFramework.Devices.Can.CanController.html",
    "title": "Class CanController | nanoFramework Documentation",
    "keywords": "Class CanController Represents a CAN controller on the system. Inheritance Object CanController Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public sealed class CanController : IDisposable Fields | Improve this Doc View Source ControllerId Controller ID for this CanController . Declaration public readonly string ControllerId Field Value Type Description String Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FromId(String, CanSettings) Opens a CAN bus with the settings provided. Declaration public static CanController FromId(string controllerId, CanSettings settings) Parameters Type Name Description String controllerId The id of the bus. CanSettings settings The bus settings. Returns Type Description CanController The CAN controller requested. GetMessage() Get next CanMessage available in the _ CanController internal buffer. If there are no more messages available null will be returned. Declaration public CanMessage GetMessage() Returns Type Description CanMessage A CanMessage or null if there are no more messages available. WriteMessage(CanMessage) Write message to CAN Bus. Declaration public void WriteMessage(CanMessage message) Parameters Type Name Description CanMessage message CAN mesage to write in CAN Bus. Events | Improve this Doc View Source MessageReceived Indicates that a message has been received through a CanController object. Declaration public event CanMessageReceivedEventHandler MessageReceived Event Type Type Description CanMessageReceivedEventHandler Implements IDisposable"
  },
  "api/nanoFramework.Devices.Can.CanEvent.html": {
    "href": "api/nanoFramework.Devices.Can.CanEvent.html",
    "title": "Enum CanEvent | nanoFramework Documentation",
    "keywords": "Enum CanEvent Describes the possible types of events for the CAN controller. Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public enum CanEvent Fields Name Description ErrorOccurred An error has occurred. MessageReceived A CAN message was received."
  },
  "api/nanoFramework.Devices.Can.CanMessage.html": {
    "href": "api/nanoFramework.Devices.Can.CanMessage.html",
    "title": "Class CanMessage | nanoFramework Documentation",
    "keywords": "Class CanMessage CAN message. Inheritance Object CanMessage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public class CanMessage Constructors | Improve this Doc View Source CanMessage(UInt32, CanMessageIdType, CanMessageFrameType, Byte[]) Creates a CAN message. Declaration public CanMessage(uint id, CanMessageIdType identifierType, CanMessageFrameType frameType, byte[] message) Parameters Type Name Description UInt32 id CanMessageIdType identifierType CanMessageFrameType frameType Byte [] message Properties | Improve this Doc View Source FrameType Message frame type. Declaration public CanMessageFrameType FrameType { get; set; } Property Value Type Description CanMessageFrameType | Improve this Doc View Source Id Message ID (SID or EID format, depending on IdentifierType ). Declaration public uint Id { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source IdentifierType Message identifier type. Declaration public CanMessageIdType IdentifierType { get; set; } Property Value Type Description CanMessageIdType | Improve this Doc View Source Message Message data. Declaration public byte[] Message { get; set; } Property Value Type Description Byte [] Remarks Maximum lenght of data buffer is 8. Exceptions Type Condition ArgumentOutOfRangeException If the message buffer exceeds the maximum allowed lenght."
  },
  "api/nanoFramework.Devices.Can.CanMessageFrameType.html": {
    "href": "api/nanoFramework.Devices.Can.CanMessageFrameType.html",
    "title": "Enum CanMessageFrameType | nanoFramework Documentation",
    "keywords": "Enum CanMessageFrameType CAN message frame type. Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public enum CanMessageFrameType Fields Name Description Data Data frame. RemoteRequest Remote request frame."
  },
  "api/nanoFramework.Devices.Can.CanMessageIdType.html": {
    "href": "api/nanoFramework.Devices.Can.CanMessageIdType.html",
    "title": "Enum CanMessageIdType | nanoFramework Documentation",
    "keywords": "Enum CanMessageIdType CAN message identifier type. Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public enum CanMessageIdType Fields Name Description EID Extended Identifier. SID Standard Identifier."
  },
  "api/nanoFramework.Devices.Can.CanMessageReceivedEventArgs.html": {
    "href": "api/nanoFramework.Devices.Can.CanMessageReceivedEventArgs.html",
    "title": "Class CanMessageReceivedEventArgs | nanoFramework Documentation",
    "keywords": "Class CanMessageReceivedEventArgs Provides data for the MessageReceived event. Inheritance Object CanMessageReceivedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public class CanMessageReceivedEventArgs"
  },
  "api/nanoFramework.Devices.Can.CanMessageReceivedEventHandler.html": {
    "href": "api/nanoFramework.Devices.Can.CanMessageReceivedEventHandler.html",
    "title": "Delegate CanMessageReceivedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate CanMessageReceivedEventHandler Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public delegate void CanMessageReceivedEventHandler(object sender, CanMessageReceivedEventArgs e); Parameters Type Name Description Object sender CanMessageReceivedEventArgs e"
  },
  "api/nanoFramework.Devices.Can.CanSettings.html": {
    "href": "api/nanoFramework.Devices.Can.CanSettings.html",
    "title": "Class CanSettings | nanoFramework Documentation",
    "keywords": "Class CanSettings Represents the settings for CAN bus. Inheritance Object CanSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public sealed class CanSettings Constructors | Improve this Doc View Source CanSettings(Byte, Byte, Byte, Byte) Initializes a new instance of CanSettings . Declaration public CanSettings(byte baudRatePrescaler, byte phaseSegment1, byte phaseSegment2, byte syncJumpWidth) Parameters Type Name Description Byte baudRatePrescaler Bus baud rate prescaler. Byte phaseSegment1 Phase segment 1. Byte phaseSegment2 Phase segment 2. Byte syncJumpWidth Synchronization jump width. Properties | Improve this Doc View Source BaudRatePrescaler Gets or sets the baud rate prescaler. Declaration public byte BaudRatePrescaler { get; set; } Property Value Type Description Byte | Improve this Doc View Source PhaseSegment1 Gets or sets the value for phase segment 1. Declaration public byte PhaseSegment1 { get; set; } Property Value Type Description Byte | Improve this Doc View Source PhaseSegment2 Gets or sets the value for phase segment 2. Declaration public byte PhaseSegment2 { get; set; } Property Value Type Description Byte | Improve this Doc View Source SyncJumpWidth Gets or sets the value for the synchronization jump width. Declaration public byte SyncJumpWidth { get; set; } Property Value Type Description Byte"
  },
  "api/nanoFramework.Devices.Can.html": {
    "href": "api/nanoFramework.Devices.Can.html",
    "title": "Namespace nanoFramework.Devices.Can | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Devices.Can Classes CanController Represents a CAN controller on the system. CanMessage CAN message. CanMessageReceivedEventArgs Provides data for the MessageReceived event. CanSettings Represents the settings for CAN bus. Enums CanEvent Describes the possible types of events for the CAN controller. CanMessageFrameType CAN message frame type. CanMessageIdType CAN message identifier type. Delegates CanMessageReceivedEventHandler"
  },
  "api/nanoFramework.Devices.OneWire.html": {
    "href": "api/nanoFramework.Devices.OneWire.html",
    "title": "Namespace nanoFramework.Devices.OneWire | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Devices.OneWire Classes OneWireController Represents a 1-Wire bus controller. The class provides methods and properties that an app can use to interact with the bus."
  },
  "api/nanoFramework.Devices.OneWire.OneWireController.html": {
    "href": "api/nanoFramework.Devices.OneWire.OneWireController.html",
    "title": "Class OneWireController | nanoFramework Documentation",
    "keywords": "Class OneWireController Represents a 1-Wire bus controller. The class provides methods and properties that an app can use to interact with the bus. Inheritance Object OneWireController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Devices.OneWire Assembly : nanoFramework.Devices.OneWire.dll Syntax public class OneWireController Properties | Improve this Doc View Source SerialNumber SerialNum buffer that is used in the search methods FindFirstDevice(Boolean, Boolean) and FindNextDevice(Boolean, Boolean) . Declaration public byte[] SerialNumber { get; set; } Property Value Type Description Byte [] Methods | Improve this Doc View Source FindAllDevices() Find all devices present in 1-Wire Net Declaration public ArrayList FindAllDevices() Returns Type Description ArrayList ArrayList with the serial numbers of all devices found. FindFirstDevice(Boolean, Boolean) Finds the first device on the 1-Wire Net Declaration public bool FindFirstDevice(bool performResetBeforeSearch, bool searchWithAlarmCommand) Parameters Type Name Description Boolean performResetBeforeSearch TRUE perform reset before search, FALSE do not perform reset before search. Boolean searchWithAlarmCommand TRUE the find alarm command 0xEC is sent instead of the normal search command 0xF0. Returns Type Description Boolean TRUE: when a 1-Wire device was found and it's Serial Number placed in SerialNumber . FALSE: There are no devices on the 1-Wire Net. FindNextDevice(Boolean, Boolean) The function does a general search. This function continues from the previous search state. The search state can be reset by using the 'FindFirstDevice' function. Declaration public bool FindNextDevice(bool performResetBeforeSearch, bool searchWithAlarmCommand) Parameters Type Name Description Boolean performResetBeforeSearch TRUE perform reset before search, FALSE do not perform reset before search. Boolean searchWithAlarmCommand TRUE the find alarm command 0xEC is sent instead of the normal search command 0xF0. Returns Type Description Boolean TRUE: when a 1-Wire device was found and it's Serial Number placed in SerialNumber . FALSE: when no new device was found. Either the last search was the last device or there are no devices on the 1-Wire Net. ReadByte() Sends 8 bits of read communication to the 1-Wire Net. Declaration public byte ReadByte() Returns Type Description Byte 8 bit read from 1-Wire Net. TouchBit(Boolean) Send 1 bit of communication to the 1-Wire Net and return the result 1 bit read from the 1-Wire Net. The parameter value least significant bit is used and the least significant bit of the result is the return bit. Declaration public bool TouchBit(bool value) Parameters Type Name Description Boolean value The least significant bit is the bit to send. Returns Type Description Boolean A 0 or 1 read from value . TouchByte(Byte) Send 8 bits of communication to the 1-Wire Net and return the result 8 bits read from the 1-Wire Net. The value least significant 8 bits are used and the least significant 8 bits of the result is the return byte. Declaration public byte TouchByte(byte value) Parameters Type Name Description Byte value 8 bits to send (least significant byte). Returns Type Description Byte 8 bits read from value TouchReset() Reset all of the devices on the 1-Wire Net and return the result. Declaration public bool TouchReset() Returns Type Description Boolean TRUE: presence pulse(s) detected, device(s) reset. FALSE: no presence pulses detected. WriteByte(Byte) Send 8 bits of communication to the 1-Wire Net and verify that the 8 bits read from the 1-Wire Net is the same (write operation). Declaration public byte WriteByte(byte value) Parameters Type Name Description Byte value 8 bits to send (least significant byte). Returns Type Description Byte TRUE: bytes written and echo was the same FALSE: echo was not the same"
  },
  "api/nanoFramework.Hardware.Esp32.Configuration.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Configuration.html",
    "title": "Class Configuration | nanoFramework Documentation",
    "keywords": "Class Configuration Change Configuration Inheritance Object Configuration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public class Configuration Methods | Improve this Doc View Source GetFunctionPin(DeviceFunction) Returns the current pin number used by a device function. Declaration public static int GetFunctionPin(DeviceFunction function) Parameters Type Name Description DeviceFunction function Returns Type Description Int32 The pin number used by device function. If value is -1 then pins is not assigned. | Improve this Doc View Source SetPinFunction(Int32, DeviceFunction) Set the default function for a GPIO pin. Declaration public static void SetPinFunction(int pin, DeviceFunction value) Parameters Type Name Description Int32 pin The pin number to set against function. DeviceFunction value The device function to be assigned the pin. Remarks Allows gpio pins to be assigned a device function. For example setting the I2C1 data pin to use GPIO pin 17."
  },
  "api/nanoFramework.Hardware.Esp32.DeviceFunction.html": {
    "href": "api/nanoFramework.Hardware.Esp32.DeviceFunction.html",
    "title": "Enum DeviceFunction | nanoFramework Documentation",
    "keywords": "Enum DeviceFunction Defines values used to change pin configuration via the GPIO alternate drivemode interface. Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum DeviceFunction Fields Name Description ADC1_CH0 ADC1 channel 0 ADC1_CH1 ADC1 channel 1 ADC1_CH10 ADC1 channel 10 Internally ESP32 Adc2 channel 10 ADC1_CH11 ADC1 channel 11 Internally ESP32 Adc2 channel 11 ADC1_CH12 ADC1 channel 12 Internally ESP32 Adc2 channel 12 ADC1_CH13 ADC1 channel 13 Internally ESP32 Adc2 channel 13 ADC1_CH14 ADC1 channel 14 Internally ESP32 Adc2 channel 14 ADC1_CH15 ADC1 channel 15 Internally ESP32 Adc2 channel 15 ADC1_CH16 ADC1 channel 16 Internally ESP32 Adc2 channel 16 ADC1_CH17 ADC1 channel 17 Internally ESP32 Adc2 channel 17 ADC1_CH18 ADC1 channel 18 Internally ESP32 Adc2 channel 18 ADC1_CH19 ADC1 channel 19 Internally ESP32 Adc2 channel 19 ADC1_CH2 ADC1 channel 2 ADC1_CH3 ADC1 channel 3 ADC1_CH4 ADC1 channel 4 ADC1_CH5 ADC1 channel 5 ADC1_CH6 ADC1 channel 6 ADC1_CH7 ADC1 channel 7 ADC1_CH8 ADC1 channel 8 Internal Temperture sensor (VP) ADC1_CH9 ADC1 channel 9 Internal Hall Sensor (VN) COM1_CTS Device function Clear to Send(CTS) for COM1 COM1_RTS Device function Request to Send(RTS) for COM1 COM1_RX Device function RX data for COM1 COM1_TX Device function TX data for COM1 COM2_CTS Device function Clear to Send(CTS) for COM2 COM2_RTS Device function Request to Send(RTS) for COM2 COM2_RX Device function RX data for COM2 COM2_TX Device function TX data for COM2 COM3_CTS Device function Clear to Send(CTS) for COM3 COM3_RTS Device function Request to Send(RTS) for COM3 COM3_RX Device function RX data for COM3 COM3_TX Device function TX data for COM3 I2C1_CLOCK Device function CLOCK for I2C1 I2C1_DATA Device function DATA for I2C1 I2C2_CLOCK Device function CLOCK for I2C2 I2C2_DATA Device function DATA for I2C2 PWM1 Device function PWM1 PWM10 Device function PWM10 PWM11 Device function PWM11 PWM12 Device function PWM12 PWM13 Device function PWM13 PWM14 Device function PWM14 PWM15 Device function PWM15 PWM16 Device function PWM16 PWM2 Device function PWM2 PWM3 Device function PWM3 PWM4 Device function PWM4 PWM5 Device function PWM5 PWM6 Device function PWM6 PWM7 Device function PWM7 PWM8 Device function PWM8 PWM9 Device function PWM9 SPI1_CLOCK Device function CLOCK for SPI1 SPI1_MISO Device function MISO for SPI1 SPI1_MOSI Device function MOSI for SPI1 SPI2_CLOCK Device function CLOCK for SPI2 SPI2_MISO Device function MISO for SPI2 SPI2_MOSI Device function MOSI for SPI2"
  },
  "api/nanoFramework.Hardware.Esp32.DeviceTypes.html": {
    "href": "api/nanoFramework.Hardware.Esp32.DeviceTypes.html",
    "title": "Enum DeviceTypes | nanoFramework Documentation",
    "keywords": "Enum DeviceTypes Device Types Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum DeviceTypes Fields Name Description ADC ADC Device type GPIO GPIO Device type I2C I2C Device type PWM PWM Device type SERIAL SERIAL Device type SPI SPI Device type"
  },
  "api/nanoFramework.Hardware.Esp32.EspNativeError.html": {
    "href": "api/nanoFramework.Hardware.Esp32.EspNativeError.html",
    "title": "Enum EspNativeError | nanoFramework Documentation",
    "keywords": "Enum EspNativeError Encapsulates the ESP32 native errors Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum EspNativeError Fields Name Description FAIL The function failed INVALID_ARG Invalid argument error INVALID_CRC CRC error INVALID_MAC Invalid MAC address INVALID_RESPONSE Invalid response INVALID_SIZE Invalid size error INVALID_STATE Invalid state error INVALID_VERSION Invalid version NO_MEM Memory allocation failed error NOT_FOUND The function failed NOT_SUPPORTED Function not supported error OK No error TIMEOUT Timeout error WIFI_BASE Base of WiFi errors"
  },
  "api/nanoFramework.Hardware.Esp32.Gpio.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Gpio.html",
    "title": "Class Gpio | nanoFramework Documentation",
    "keywords": "Class Gpio ESP32 GPIO pins Inheritance Object Gpio Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public static class Gpio Fields | Improve this Doc View Source IO00 Gpio IO00 Declaration public const int IO00 = 0 Field Value Type Description Int32 | Improve this Doc View Source IO01 Gpio IO01 (UART0 TXD) Declaration public const int IO01 = 1 Field Value Type Description Int32 | Improve this Doc View Source IO02 Gpio IO02 Declaration public const int IO02 = 2 Field Value Type Description Int32 | Improve this Doc View Source IO03 Gpio IO03 (UART0 RXD) Declaration public const int IO03 = 3 Field Value Type Description Int32 | Improve this Doc View Source IO04 Gpio IO04 Declaration public const int IO04 = 4 Field Value Type Description Int32 | Improve this Doc View Source IO05 Gpio IO05 Declaration public const int IO05 = 5 Field Value Type Description Int32 | Improve this Doc View Source IO06 Gpio IO06 (Reserved for SPI flash) Declaration public const int IO06 = 6 Field Value Type Description Int32 | Improve this Doc View Source IO07 Gpio IO07 (Reserved for SPI flash) Declaration public const int IO07 = 7 Field Value Type Description Int32 | Improve this Doc View Source IO08 Gpio IO08 (Reserved for SPI flash) Declaration public const int IO08 = 8 Field Value Type Description Int32 | Improve this Doc View Source IO09 Gpio IO09 (Reserved for SPI flash) Declaration public const int IO09 = 9 Field Value Type Description Int32 | Improve this Doc View Source IO10 Gpio IO10 (Reserved for SPI flash) Declaration public const int IO10 = 10 Field Value Type Description Int32 | Improve this Doc View Source IO11 Gpio IO11 (Reserved for SPI flash) Declaration public const int IO11 = 11 Field Value Type Description Int32 | Improve this Doc View Source IO12 Gpio IO12 (also used for JTAG TDI) Declaration public const int IO12 = 12 Field Value Type Description Int32 | Improve this Doc View Source IO13 Gpio IO13 (also used for JTAG TCK) Declaration public const int IO13 = 13 Field Value Type Description Int32 | Improve this Doc View Source IO14 Gpio IO14 (also used for JTAG TMS) Declaration public const int IO14 = 14 Field Value Type Description Int32 | Improve this Doc View Source IO15 Gpio IO15 (also used for JTAG TDO) Declaration public const int IO15 = 15 Field Value Type Description Int32 | Improve this Doc View Source IO16 Gpio IO16 Declaration public const int IO16 = 16 Field Value Type Description Int32 | Improve this Doc View Source IO17 Gpio IO17 Declaration public const int IO17 = 17 Field Value Type Description Int32 | Improve this Doc View Source IO18 Gpio IO18 Declaration public const int IO18 = 18 Field Value Type Description Int32 | Improve this Doc View Source IO19 Gpio IO19 Declaration public const int IO19 = 19 Field Value Type Description Int32 | Improve this Doc View Source IO20 Gpio IO20, No Physical pin for IO20 Declaration public const int IO20 = 20 Field Value Type Description Int32 | Improve this Doc View Source IO21 Gpio IO21 Declaration public const int IO21 = 21 Field Value Type Description Int32 | Improve this Doc View Source IO22 Gpio IO22 Declaration public const int IO22 = 22 Field Value Type Description Int32 | Improve this Doc View Source IO23 Gpio IO23 Declaration public const int IO23 = 23 Field Value Type Description Int32 | Improve this Doc View Source IO24 Gpio IO24, No Physical pin for IO24 Declaration public const int IO24 = 24 Field Value Type Description Int32 | Improve this Doc View Source IO25 Gpio IO25 Declaration public const int IO25 = 25 Field Value Type Description Int32 | Improve this Doc View Source IO26 Gpio IO26 Declaration public const int IO26 = 26 Field Value Type Description Int32 | Improve this Doc View Source IO27 Gpio IO27 Declaration public const int IO27 = 27 Field Value Type Description Int32 | Improve this Doc View Source IO28 Gpio IO28, No Physical pin for IO28 Declaration public const int IO28 = 28 Field Value Type Description Int32 | Improve this Doc View Source IO29 Gpio IO29, No Physical pin for IO29 Declaration public const int IO29 = 29 Field Value Type Description Int32 | Improve this Doc View Source IO30 Gpio IO30, No Physical pin for IO30 Declaration public const int IO30 = 30 Field Value Type Description Int32 | Improve this Doc View Source IO31 Gpio IO31, No Physical pin for IO31 Declaration public const int IO31 = 31 Field Value Type Description Int32 | Improve this Doc View Source IO32 Gpio IO32 Declaration public const int IO32 = 32 Field Value Type Description Int32 | Improve this Doc View Source IO33 Gpio IO33 Declaration public const int IO33 = 33 Field Value Type Description Int32 | Improve this Doc View Source IO34 Gpio IO34 (Input Only, no software pullup/pulldown functions) Declaration public const int IO34 = 34 Field Value Type Description Int32 | Improve this Doc View Source IO35 Gpio IO35 (Input Only, no software pullup/pulldown functions) Declaration public const int IO35 = 35 Field Value Type Description Int32 | Improve this Doc View Source IO36 Gpio IO36 SENSOR_VP (Input Only, no software pullup/pulldown functions) Declaration public const int IO36 = 36 Field Value Type Description Int32 | Improve this Doc View Source IO37 Gpio IO37 (Input Only, no software pullup/pulldown functions) Declaration public const int IO37 = 37 Field Value Type Description Int32 | Improve this Doc View Source IO38 Gpio IO38 (Input Only, no software pullup/pulldown functions) Declaration public const int IO38 = 38 Field Value Type Description Int32 | Improve this Doc View Source IO39 Gpio IO39 SENSOR_VN (Input Only, no software pullup/pulldown functions) Declaration public const int IO39 = 39 Field Value Type Description Int32"
  },
  "api/nanoFramework.Hardware.Esp32.HighResTimer.html": {
    "href": "api/nanoFramework.Hardware.Esp32.HighResTimer.html",
    "title": "Class HighResTimer | nanoFramework Documentation",
    "keywords": "Class HighResTimer The class encapsulates the ESP32 High Resolution Timer API. Inheritance Object HighResTimer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public class HighResTimer : IDisposable Constructors | Improve this Doc View Source HighResTimer() Create a High Resolution Timer. A maximum of 10 timers can be created. Declaration public HighResTimer() Methods | Improve this Doc View Source Dispose() Dispose HighResTimer Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Dispose(bool disposing) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Finalizer Declaration protected void Finalize() | Improve this Doc View Source GetCurrent() Returns the number of micro seconds since boot Declaration public static ulong GetCurrent() Returns Type Description UInt64 | Improve this Doc View Source StartOnePeriodic(UInt64) Start a periodic timer. Declaration public void StartOnePeriodic(ulong period_us) Parameters Type Name Description UInt64 period_us Period between firing timer events. | Improve this Doc View Source StartOneShot(UInt64) Start a one shot timer. Once the timer has expired the timer event will be fired. Declaration public void StartOneShot(ulong timeout_us) Parameters Type Name Description UInt64 timeout_us Timeout in mirco seconds | Improve this Doc View Source Stop() Stop the Timer. Declaration public void Stop() Events | Improve this Doc View Source OnHighResTimerExpired Event raised when a HighRes timer expires. Declaration public event HighResTimerExpiredEventHandler OnHighResTimerExpired Event Type Type Description HighResTimerExpiredEventHandler Implements IDisposable"
  },
  "api/nanoFramework.Hardware.Esp32.HighResTimerExpiredEventHandler.html": {
    "href": "api/nanoFramework.Hardware.Esp32.HighResTimerExpiredEventHandler.html",
    "title": "Delegate HighResTimerExpiredEventHandler | nanoFramework Documentation",
    "keywords": "Delegate HighResTimerExpiredEventHandler Event raised when a High res timer expires. Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public delegate void HighResTimerExpiredEventHandler(HighResTimer sender, object e); Parameters Type Name Description HighResTimer sender Object e"
  },
  "api/nanoFramework.Hardware.Esp32.html": {
    "href": "api/nanoFramework.Hardware.Esp32.html",
    "title": "Namespace nanoFramework.Hardware.Esp32 | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Hardware.Esp32 Classes Configuration Change Configuration Gpio ESP32 GPIO pins HighResTimer The class encapsulates the ESP32 High Resolution Timer API. Sleep Encapsulates ESP32 sleep functions Enums DeviceFunction Defines values used to change pin configuration via the GPIO alternate drivemode interface. DeviceTypes Device Types EspNativeError Encapsulates the ESP32 native errors Sleep.TouchPad Enumeration of Touch pad numbers Sleep.WakeupCause Sleep wakeup cause Sleep.WakeupGpioPin Gpio pins that can be used for wakeup Sleep.WakeupMode Wakeup mode used by EnableWakeupByMultiPins Delegates HighResTimerExpiredEventHandler Event raised when a High res timer expires."
  },
  "api/nanoFramework.Hardware.Esp32.Rmt.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Rmt.html",
    "title": "Namespace nanoFramework.Hardware.Esp32.Rmt | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Hardware.Esp32.Rmt Classes RmtCommand TransmitterChannel A class that can be used to create nad transmit RMT commands on ESP32 Enums SourceClock Enum for source Clock types"
  },
  "api/nanoFramework.Hardware.Esp32.Rmt.RmtCommand.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Rmt.RmtCommand.html",
    "title": "Class RmtCommand | nanoFramework Documentation",
    "keywords": "Class RmtCommand Inheritance Object RmtCommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32.Rmt Assembly : nanoFramework.Hardware.Esp32.Rmt.dll Syntax public class RmtCommand Constructors | Improve this Doc View Source RmtCommand(UInt16, Boolean, UInt16, Boolean) Create new rmt command Declaration public RmtCommand(ushort duration1, bool level1, ushort duration2, bool level2) Parameters Type Name Description UInt16 duration1 Boolean level1 UInt16 duration2 Boolean level2 Properties | Improve this Doc View Source Duration0 Level1 duration in RMT chanel ticks Declaration public ushort Duration0 { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Duration1 Level2 duration in RMT chanel ticks Declaration public ushort Duration1 { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Level0 Level 0 value high/low Declaration public bool Level0 { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Level1 Level 1 value high/low Declaration public bool Level1 { get; set; } Property Value Type Description Boolean"
  },
  "api/nanoFramework.Hardware.Esp32.Rmt.SourceClock.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Rmt.SourceClock.html",
    "title": "Enum SourceClock | nanoFramework Documentation",
    "keywords": "Enum SourceClock Enum for source Clock types Namespace : nanoFramework.Hardware.Esp32.Rmt Assembly : nanoFramework.Hardware.Esp32.Rmt.dll Syntax public enum SourceClock Fields Name Description APB 80MHz clock source. REF Not supported"
  },
  "api/nanoFramework.Hardware.Esp32.Rmt.TransmitterChannel.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Rmt.TransmitterChannel.html",
    "title": "Class TransmitterChannel | nanoFramework Documentation",
    "keywords": "Class TransmitterChannel A class that can be used to create nad transmit RMT commands on ESP32 Inheritance Object TransmitterChannel Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32.Rmt Assembly : nanoFramework.Hardware.Esp32.Rmt.dll Syntax public class TransmitterChannel : IDisposable Constructors | Improve this Doc View Source TransmitterChannel(Int32) Public constructor to create Transmitter object Declaration public TransmitterChannel(int gpio) Parameters Type Name Description Int32 gpio The gpio pin number that we want to use for transmitting Properties | Improve this Doc View Source CarrierEnabled Is the carrier wave enabled? Declaration public bool CarrierEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CarrierHighDuration The duration of the carrier wave's high pulse, in source clock ticks. Declaration public ushort CarrierHighDuration { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source CarrierLevel The level of the carrier wave's. Declaration public bool CarrierLevel { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CarrierLowDuration The duration of the carrier wave's low pulse, in source clock ticks. Declaration public ushort CarrierLowDuration { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Channel The channel number we are using Declaration public int Channel { get; } Property Value Type Description Int32 | Improve this Doc View Source ClockDivider The value can be between 1 and 255 Declaration public byte ClockDivider { get; set; } Property Value Type Description Byte | Improve this Doc View Source IdleLevel The level of the channel when in an idle state. Declaration public bool IdleLevel { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsChannelIdle Is the channel idle? Declaration public bool IsChannelIdle { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Access any of the commands from the list that will be send Declaration public RmtCommand this[int i] { get; set; } Parameters Type Name Description Int32 i Property Value Type Description RmtCommand | Improve this Doc View Source SourceClock The source clock. Only the 80MHz APB clock is currently supported. Declaration public SourceClock SourceClock { get; set; } Property Value Type Description SourceClock Methods | Improve this Doc View Source AddCommand(RmtCommand) Add new rmt command to the list of commands that will be send Declaration public void AddCommand(RmtCommand cmd) Parameters Type Name Description RmtCommand cmd RmtCommand | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Send(Boolean) Send the filled rmt commands to the transmitter Declaration public void Send(bool waitTxDone) Parameters Type Name Description Boolean waitTxDone If true wait the tx process to end, false function returns without waiting, but if another comand is send before the end of the previouse process an an error will ocure. | Improve this Doc View Source SendData(Byte[], Boolean) Send a RAW data to RMT module Declaration public void SendData(byte[] data, bool waitTxDone) Parameters Type Name Description Byte [] data byte array of data for tx module ready for native function Boolean waitTxDone Implements IDisposable"
  },
  "api/nanoFramework.Hardware.Esp32.Sleep.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Sleep.html",
    "title": "Class Sleep | nanoFramework Documentation",
    "keywords": "Class Sleep Encapsulates ESP32 sleep functions Inheritance Object Sleep Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public class Sleep Methods | Improve this Doc View Source EnableWakeupByMultiPins(Sleep.WakeupGpioPin, Sleep.WakeupMode) Enable Wkaup using multiple pins. Declaration public static EspNativeError EnableWakeupByMultiPins(Sleep.WakeupGpioPin pins, Sleep.WakeupMode mode) Parameters Type Name Description Sleep.WakeupGpioPin pins Sleep.WakeupMode mode Returns Type Description EspNativeError Remarks Only pins that are RTC connected. | Improve this Doc View Source EnableWakeupByPin(Sleep.WakeupGpioPin, Int32) Enable wakeup using a gpio pin Declaration public static EspNativeError EnableWakeupByPin(Sleep.WakeupGpioPin pin, int level) Parameters Type Name Description Sleep.WakeupGpioPin pin GPIO number used as wakeup source. Only pins that have RTC functionality can be used. 0,2,4,12->15,25->27,32->39 Int32 level Returns Type Description EspNativeError | Improve this Doc View Source EnableWakeupByTimer(TimeSpan) Enable Wakeup by Timer Declaration public static EspNativeError EnableWakeupByTimer(TimeSpan time) Parameters Type Name Description TimeSpan time Returns Type Description EspNativeError | Improve this Doc View Source EnableWakeupByTouchPad() Enable wakeup by Touchpad Declaration public static EspNativeError EnableWakeupByTouchPad() Returns Type Description EspNativeError | Improve this Doc View Source GetWakeupCause() Get the cause for waking up Declaration public static Sleep.WakeupCause GetWakeupCause() Returns Type Description Sleep.WakeupCause Return the Wakeup cause. | Improve this Doc View Source GetWakeupGpioPin() Returns a bit mask of pins taht caused the wakeup Declaration public static Sleep.WakeupGpioPin GetWakeupGpioPin() Returns Type Description Sleep.WakeupGpioPin | Improve this Doc View Source GetWakeupTouchpad() Get the touch pad which caused wakeup. Declaration public static Sleep.TouchPad GetWakeupTouchpad() Returns Type Description Sleep.TouchPad Return TouchPad number or None | Improve this Doc View Source StartDeepSleep() Enter deep sleep using configured wakeup sources. Declaration public static void StartDeepSleep() Remarks If no wakeup sources configured then it will be a indefinite sleep. This call never returns. After the device enters deep sleep a wakeup source will wake the device and the execution will start as if it was a reset. Keep in mind that the execution WILL NOT continue after the call to this method. | Improve this Doc View Source StartLightSleep() Enter light sleep with the configured wakeup options. Declaration public static EspNativeError StartLightSleep() Returns Type Description EspNativeError Return ESP_ERR_INVALID_STATE if Wifi or BT not stopped."
  },
  "api/nanoFramework.Hardware.Esp32.Sleep.TouchPad.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Sleep.TouchPad.html",
    "title": "Enum Sleep.TouchPad | nanoFramework Documentation",
    "keywords": "Enum Sleep.TouchPad Enumeration of Touch pad numbers Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum TouchPad Fields Name Description None Number returned when no touch pad used on wakeup Num0 Touch pad channel 0 is GPIO4 Num1 Touch pad channel 1 is GPIO0 Num2 Touch pad channel 2 is GPIO2 Num3 Touch pad channel 3 is GPIO15 Num4 Touch pad channel 4 is GPIO13 Num5 Touch pad channel 5 is GPIO12 Num6 Touch pad channel 6 is GPIO14 Num7 Touch pad channel 7 is GPIO27 Num8 Touch pad channel 8 is GPIO33 Num9 Touch pad channel 9 is GPIO32"
  },
  "api/nanoFramework.Hardware.Esp32.Sleep.WakeupCause.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Sleep.WakeupCause.html",
    "title": "Enum Sleep.WakeupCause | nanoFramework Documentation",
    "keywords": "Enum Sleep.WakeupCause Sleep wakeup cause Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum WakeupCause Fields Name Description Ext0 Wakeup caused by external signal using RTC_IO Ext1 Wakeup caused by external signal using RTC_CNTL Gpio Wakeup caused by GPIO (light sleep only) Timer Wakeup caused by timer TouchPad Wakeup caused by touchpad Uart Wakeup caused by UART (light sleep only) Ulp Wakeup caused by ULP program Undefined In case of deep sleep, reset was not caused by exit from deep sleep"
  },
  "api/nanoFramework.Hardware.Esp32.Sleep.WakeupGpioPin.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Sleep.WakeupGpioPin.html",
    "title": "Enum Sleep.WakeupGpioPin | nanoFramework Documentation",
    "keywords": "Enum Sleep.WakeupGpioPin Gpio pins that can be used for wakeup Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax [Flags] public enum WakeupGpioPin : ulong Fields Name Description None No wake up pin Pin0 Gpio Pin 1 used for wakeup Pin12 Gpio Pin 12 used for wakeup Pin13 Gpio Pin 13 used for wakeup Pin14 Gpio Pin 14 used for wakeup Pin15 Gpio Pin 15 used for wakeup Pin2 Gpio Pin 2 used for wakeup Pin25 Gpio Pin 25 used for wakeup Pin26 Gpio Pin 26 used for wakeup Pin27 Gpio Pin 27 used for wakeup Pin32 Gpio Pin 32 used for wakeup Pin33 Gpio Pin 33 used for wakeup Pin34 Gpio Pin 34 used for wakeup Pin35 Gpio Pin 35 used for wakeup Pin36 Gpio Pin 36 used for wakeup Pin37 Gpio Pin 37 used for wakeup Pin38 Gpio Pin 38 used for wakeup Pin39 Gpio Pin 39 used for wakeup Pin4 Gpio Pin 4 used for wakeup"
  },
  "api/nanoFramework.Hardware.Esp32.Sleep.WakeupMode.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Sleep.WakeupMode.html",
    "title": "Enum Sleep.WakeupMode | nanoFramework Documentation",
    "keywords": "Enum Sleep.WakeupMode Wakeup mode used by EnableWakeupByMultiPins Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum WakeupMode Fields Name Description AllLow Wakeup when all pins are low AnyHigh Wakeup when any pin is high"
  },
  "api/nanoFramework.Hardware.Stm32.BackupMemory.html": {
    "href": "api/nanoFramework.Hardware.Stm32.BackupMemory.html",
    "title": "Class BackupMemory | nanoFramework Documentation",
    "keywords": "Class BackupMemory Provides access to STM32 backup registers. Inheritance Object BackupMemory Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public static class BackupMemory Properties | Improve this Doc View Source Size Gets the size of the backup memory on the current target. Declaration public static int Size { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ReadBoolean(UInt32) Reads a Boolean value from the backup memory. Declaration public static bool ReadBoolean(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Boolean The value. | Improve this Doc View Source ReadByte(UInt32) Reads a byte value from the backup memory. Declaration public static byte ReadByte(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Byte The value. ReadBytes(UInt32, Byte[]) Reads an array of byte values from the backup memory. Declaration public static void ReadBytes(uint position, byte[] value) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Byte [] value The array of values. | Improve this Doc View Source ReadDateTime(UInt32) Reads a date and time value from the backup memory. Declaration public static DateTime ReadDateTime(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description DateTime The value. | Improve this Doc View Source ReadInt16(UInt32) Reads a 16-bit integer value from the backup memory. Declaration public static short ReadInt16(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Int16 The value. | Improve this Doc View Source ReadInt32(UInt32) Reads a 32-bit integer value from the backup memory. Declaration public static int ReadInt32(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Int32 The value. | Improve this Doc View Source ReadInt64(UInt32) Reads a 64-bit integer value from the backup memory. Declaration public static long ReadInt64(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Int64 The value. | Improve this Doc View Source ReadSingle(UInt32) Reads a floating-point value from the backup memory. Declaration public static float ReadSingle(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Single The value. | Improve this Doc View Source ReadString(UInt32, UInt32) Reads a string value from the backup memory. Declaration public static string ReadString(uint position, uint lenght) Parameters Type Name Description UInt32 position Position on the backup memory to read from. UInt32 lenght The length of the string. Returns Type Description String The value. | Improve this Doc View Source ReadTimeSpan(UInt32) Reads a time interval from the backup memory. Declaration public static TimeSpan ReadTimeSpan(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description TimeSpan The value. | Improve this Doc View Source ReadUInt16(UInt32) Reads a 16-bit unsigned integer from the backup memory. Declaration public static ushort ReadUInt16(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description UInt16 The value. | Improve this Doc View Source ReadUInt32(UInt32) Reads a 32-bit unsigned integer from the backup memory. Declaration public static uint ReadUInt32(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description UInt32 The value. | Improve this Doc View Source ReadUInt64(UInt32) Reads a 64-bit unsigned integer from the backup memory. Declaration public static ulong ReadUInt64(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description UInt64 The value. | Improve this Doc View Source WriteBoolean(UInt32, Boolean) Writes a Boolean value to the backup memory. Declaration public static void WriteBoolean(uint position, bool value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Boolean value The value to write. | Improve this Doc View Source WriteByte(UInt32, Byte) Writes a byte value to the backup memory. Declaration public static void WriteByte(uint position, byte value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Byte value The value to write. WriteBytes(UInt32, Byte[]) Writes an array of byte values to the backup memory. Declaration public static void WriteBytes(uint position, byte[] value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Byte [] value The value to write. | Improve this Doc View Source WriteDateTime(UInt32, DateTime) Writes a date and time value to the backup memory. Declaration public static void WriteDateTime(uint position, DateTime value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . DateTime value The value to write. | Improve this Doc View Source WriteInt16(UInt32, Int16) Writes a 16-bit integer value to the backup memory. Declaration public static void WriteInt16(uint position, short value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Int16 value The value to write. | Improve this Doc View Source WriteInt32(UInt32, Int32) Writes a 32-bit integer value to the backup memory. Declaration public static void WriteInt32(uint position, int value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Int32 value The value to write. | Improve this Doc View Source WriteInt64(UInt32, Int64) Writes a 64-bit integer value to the backup memory. Declaration public static void WriteInt64(uint position, long value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Int64 value The value to write. | Improve this Doc View Source WriteSingle(UInt32, Single) Write a floating-point value to the backup memory. Declaration public static void WriteSingle(uint position, float value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Single value The value to write. | Improve this Doc View Source WriteString(UInt32, String) Writes a string value to the backup memory. Declaration public static void WriteString(uint position, string value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . String value The value to write. | Improve this Doc View Source WriteTimeSpan(UInt32, TimeSpan) Writes a time interval value to the output stream. Declaration public static void WriteTimeSpan(uint position, TimeSpan value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . TimeSpan value The value to write. | Improve this Doc View Source WriteUInt16(UInt32, UInt16) Writes a 16-bit unsigned integer value to the backup memory. Declaration public static void WriteUInt16(uint position, ushort value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . UInt16 value The value to write. | Improve this Doc View Source WriteUInt32(UInt32, UInt32) Writes a 32-bit unsigned integer value to the backup memory. Declaration public static void WriteUInt32(uint position, uint value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . UInt32 value The value to write. | Improve this Doc View Source WriteUInt64(UInt32, UInt64) Writes a 64-bit unsigned integer value to the backup memory. Declaration public static void WriteUInt64(uint position, ulong value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . UInt64 value The value to write."
  },
  "api/nanoFramework.Hardware.Stm32.html": {
    "href": "api/nanoFramework.Hardware.Stm32.html",
    "title": "Namespace nanoFramework.Hardware.Stm32 | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Hardware.Stm32 Classes BackupMemory Provides access to STM32 backup registers. Power Provides methods to control power mode of the target CPU. RTC Provides access to RTC (real time clock) features. Utilities Utilities for managing and handling STM32 target devices. Enums Power.WakeupPin Wake-up pin enumeration. Power.WakeupReasonType Wakeup reason enumeration."
  },
  "api/nanoFramework.Hardware.Stm32.Power.html": {
    "href": "api/nanoFramework.Hardware.Stm32.Power.html",
    "title": "Class Power | nanoFramework Documentation",
    "keywords": "Class Power Provides methods to control power mode of the target CPU. Inheritance Object Power Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public static class Power Remarks This API is available only for SMT32 targets. Properties WakeupReason Gets the reason for device wakeup. Declaration public static Power.WakeupReasonType WakeupReason { get; } Property Value Type Description Power.WakeupReasonType Methods DisableWakeupPin(Power.WakeupPin) Disables the specified pin as wake-up source. Declaration public static void DisableWakeupPin(Power.WakeupPin pin = Power.WakeupPin.Pin1) Parameters Type Name Description Power.WakeupPin pin Remarks The wake-up pin availability is target dependent. Check the target device data-sheet for details. If the specified pin is not available an ArgumentException is thrown. EnableWakeupPin(Power.WakeupPin) Enables the specified pin as wake-up source. Declaration public static void EnableWakeupPin(Power.WakeupPin pin = Power.WakeupPin.Pin1) Parameters Type Name Description Power.WakeupPin pin Remarks The wake-up pin availability is target dependent. Check the target device data-sheet for details. If the specified pin is not available an ArgumentException is thrown. | Improve this Doc View Source EnterStandbyMode() Sets the target device to enter STM32 \"standby\" mode. Declaration public static void EnterStandbyMode() Remarks If no wakeup sources configured then it will be a indefinite sleep. This call never returns. After the device enters standby a wakeup source will wake the device and the execution will start as if it was a reset. Keep in mind that the execution WILL NOT continue after the call to this method."
  },
  "api/nanoFramework.Hardware.Stm32.Power.WakeupPin.html": {
    "href": "api/nanoFramework.Hardware.Stm32.Power.WakeupPin.html",
    "title": "Enum Power.WakeupPin | nanoFramework Documentation",
    "keywords": "Enum Power.WakeupPin Wake-up pin enumeration. Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public enum WakeupPin Fields Name Description Pin1 Wake-up pin 1. Pin2 Wake-up pin 2. Pin3 Wake-up pin 3."
  },
  "api/nanoFramework.Hardware.Stm32.Power.WakeupReasonType.html": {
    "href": "api/nanoFramework.Hardware.Stm32.Power.WakeupReasonType.html",
    "title": "Enum Power.WakeupReasonType | nanoFramework Documentation",
    "keywords": "Enum Power.WakeupReasonType Wakeup reason enumeration. Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public enum WakeupReasonType Fields Name Description FromPin Wakeup from pin. FromStandby Wakeup from standby mode. Undetermined Undetermined wakeup reason."
  },
  "api/nanoFramework.Hardware.Stm32.RTC.html": {
    "href": "api/nanoFramework.Hardware.Stm32.RTC.html",
    "title": "Class RTC | nanoFramework Documentation",
    "keywords": "Class RTC Provides access to RTC (real time clock) features. Inheritance Object RTC Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public static class RTC Methods GetAlarm() Gets the DateTime set for the alarm. Declaration public static DateTime GetAlarm() Returns Type Description DateTime Return the current DateTime set for the alarm. Remarks If target device has more than one alarm. This is the value of Alarm A. | Improve this Doc View Source SetAlarm(DateTime) Sets the DateTime for the alarm. This will wake-up the target device if it's in sleep or power down mode. Declaration public static void SetAlarm(DateTime time) Parameters Type Name Description DateTime time Time to set. Remarks If target device has more than one alarm. This will set Alarm A."
  },
  "api/nanoFramework.Hardware.Stm32.Utilities.html": {
    "href": "api/nanoFramework.Hardware.Stm32.Utilities.html",
    "title": "Class Utilities | nanoFramework Documentation",
    "keywords": "Class Utilities Utilities for managing and handling STM32 target devices. Inheritance Object Utilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public static class Utilities Properties | Improve this Doc View Source DeviceId Gets the device identifier. Declaration public static uint DeviceId { get; } Property Value Type Description UInt32 | Improve this Doc View Source DeviceRevisionId Gets the device revision identifier. Declaration public static uint DeviceRevisionId { get; } Property Value Type Description UInt32 | Improve this Doc View Source UniqueDeviceId Gets the 96 bits unique device ID. Declaration public static byte[] UniqueDeviceId { get; } Property Value Type Description Byte []"
  },
  "api/nanoFramework.Json.html": {
    "href": "api/nanoFramework.Json.html",
    "title": "Namespace nanoFramework.Json | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Json Classes JsonConvert Provides methods for converting between .NET types and JSON types."
  },
  "api/nanoFramework.Json.JsonConvert.html": {
    "href": "api/nanoFramework.Json.JsonConvert.html",
    "title": "Class JsonConvert | nanoFramework Documentation",
    "keywords": "Class JsonConvert Provides methods for converting between .NET types and JSON types. Inheritance Object JsonConvert Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Json Assembly : nanoFramework.Json.dll Syntax public static class JsonConvert Methods | Improve this Doc View Source DeserializeObject(Stream, Type) Deserializes a Json string into an object. Declaration public static object DeserializeObject(Stream stream, Type type) Parameters Type Name Description Stream stream Type type The object type to convert to Returns Type Description Object | Improve this Doc View Source DeserializeObject(String, Type) Deserializes a Json string into an object. Declaration public static object DeserializeObject(string sourceString, Type type) Parameters Type Name Description String sourceString Type type The object type to convert to Returns Type Description Object | Improve this Doc View Source DeserializeObject(DataReader, Type) Deserializes a Json string into an object. Declaration public static object DeserializeObject(DataReader dr, Type type) Parameters Type Name Description DataReader dr Type type The object type to convert to Returns Type Description Object | Improve this Doc View Source SerializeObject(Object) Convert an object to a JSON string. Declaration public static string SerializeObject(object oSource) Parameters Type Name Description Object oSource The value to convert. Supported types are: Boolean, String, Byte, (U)Int16, (U)Int32, Float, Double, Decimal, Array, IDictionary, IEnumerable, Guid, Datetime, DictionaryEntry, Object and null. Returns Type Description String The JSON object as a string or null when the value type is not supported. Remarks For objects, only public properties with getters are converted."
  },
  "api/nanoFramework.Networking.html": {
    "href": "api/nanoFramework.Networking.html",
    "title": "Namespace nanoFramework.Networking | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Networking Classes Sntp Provides a set of methods that help developers to manage the SNTP (Simple Network Time Protocol) client on the target device."
  },
  "api/nanoFramework.Networking.Sntp.html": {
    "href": "api/nanoFramework.Networking.Sntp.html",
    "title": "Class Sntp | nanoFramework Documentation",
    "keywords": "Class Sntp Provides a set of methods that help developers to manage the SNTP (Simple Network Time Protocol) client on the target device. Inheritance Object Sntp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Networking Assembly : nanoFramework.Networking.Sntp.dll Syntax public class Sntp Remarks For a list of some public NTP servers, see this link : http://support.ntp.org/bin/view/Servers/NTPPoolServers Properties IsStarted Get status of SNTP client. Declaration public static bool IsStarted { get; } Property Value Type Description Boolean Server1 Gets, sets the address of the SNTP server 1. Declaration public static string Server1 { get; set; } Property Value Type Description String Server2 Gets, sets the address of the SNTP server 2. Declaration public static string Server2 { get; set; } Property Value Type Description String Methods Start() Starts the SNTP client. After this method returns a periodic call to the set SNTP servers is performed providing time synchronization. The system time is updated immediately after each successful execution. The time synchronization occurs on a hourly rate. Declaration public static void Start() Remarks This method is specific to nanoFramework. Stop() Stops the SNTP client. The time synchronization will stop. Declaration public static void Stop() UpdateNow() Performs an immediate request to synchronize time. Declaration public static void UpdateNow() Remarks This performs a restart of the internal service."
  },
  "api/nanoFramework.Runtime.Events.BaseEvent.html": {
    "href": "api/nanoFramework.Runtime.Events.BaseEvent.html",
    "title": "Class BaseEvent | nanoFramework Documentation",
    "keywords": "Class BaseEvent This is a base class from which other nanoFramework event classes derive. Inheritance Object BaseEvent GenericEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class BaseEvent Fields | Improve this Doc View Source Message A byte characterizing the event message. Declaration public byte Message Field Value Type Description Byte | Improve this Doc View Source Source Specifies the source of the event. Declaration public ushort Source Field Value Type Description UInt16"
  },
  "api/nanoFramework.Runtime.Events.CustomEvent.html": {
    "href": "api/nanoFramework.Runtime.Events.CustomEvent.html",
    "title": "Class CustomEvent | nanoFramework Documentation",
    "keywords": "Class CustomEvent Provides handling for custom native events. Inheritance Object CustomEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public static class CustomEvent Events | Improve this Doc View Source CustomEventPosted Event occurs when a custom event is posted. Declaration public static event CustomEventPostedEventHandler CustomEventPosted Event Type Type Description CustomEventPostedEventHandler Remarks The CustomEvent class raises CustomEventPosted event when a custom event is posted. To have a CustomEvent object call an event-handling method when a CustomEventPosted event occurs, you must associate the method with a CustomEventPostedEventHandler delegate, and add this delegate to this event."
  },
  "api/nanoFramework.Runtime.Events.CustomEventArgs.html": {
    "href": "api/nanoFramework.Runtime.Events.CustomEventArgs.html",
    "title": "Class CustomEventArgs | nanoFramework Documentation",
    "keywords": "Class CustomEventArgs Contains argument values for custom events. Inheritance Object EventArgs CustomEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class CustomEventArgs : EventArgs Properties | Improve this Doc View Source Data1 Value of 1st field in event. Declaration public ushort Data1 { get; } Property Value Type Description UInt16 | Improve this Doc View Source Data2 Value of 1st field in event. Declaration public uint Data2 { get; } Property Value Type Description UInt32"
  },
  "api/nanoFramework.Runtime.Events.CustomEventPostedEventHandler.html": {
    "href": "api/nanoFramework.Runtime.Events.CustomEventPostedEventHandler.html",
    "title": "Delegate CustomEventPostedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate CustomEventPostedEventHandler Provides an event handler that is called when a custom event is posted. Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public delegate void CustomEventPostedEventHandler(object sender, CustomEventArgs e); Parameters Type Name Description Object sender Specifies the object that sent the custom event. CustomEventArgs e Contains the custom event arguments."
  },
  "api/nanoFramework.Runtime.Events.EventArgs.html": {
    "href": "api/nanoFramework.Runtime.Events.EventArgs.html",
    "title": "Class EventArgs | nanoFramework Documentation",
    "keywords": "Class EventArgs Constitutes the base class for classes that contain event data. Inheritance Object EventArgs CustomEventArgs NetworkAPStationEventArgs NetworkAvailabilityEventArgs RemovableDeviceEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class EventArgs Remarks This class contains no event data; it is used by events that do not pass state information to an event handler when an event is raised. If the event handler requires state information, the application must derive a class from this class to hold the data. Fields | Improve this Doc View Source Empty Gets an empty, read-only EventArgs object. Declaration public static readonly EventArgs Empty Field Value Type Description EventArgs"
  },
  "api/nanoFramework.Runtime.Events.EventCategory.html": {
    "href": "api/nanoFramework.Runtime.Events.EventCategory.html",
    "title": "Enum EventCategory | nanoFramework Documentation",
    "keywords": "Enum EventCategory Defines the categories events are classified into. Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public enum EventCategory Fields Name Description Can Specifies a CAN event. Custom Specifies a programmer-defined event. Gpio Specifies a GPIO event. Network Specifies a Network event. Radio Specifies a Radio event. SerialDevice Specifies a SerialDevice event. Storage Specifies a Storage event. Unknown Specifies an unknown event type. WiFi Specifies a WiFi event."
  },
  "api/nanoFramework.Runtime.Events.EventSink.html": {
    "href": "api/nanoFramework.Runtime.Events.EventSink.html",
    "title": "Class EventSink | nanoFramework Documentation",
    "keywords": "Class EventSink Provides a dispatcher for handling events. Inheritance Object NativeEventDispatcher EventSink Implements IDisposable Inherited Members NativeEventDispatcher.threadSpawn NativeEventDispatcher.callbacks NativeEventDispatcher.disposed NativeEventDispatcher.EnableInterrupt() NativeEventDispatcher.DisableInterrupt() NativeEventDispatcher.Dispose(Boolean) NativeEventDispatcher.Dispose() NativeEventDispatcher.OnInterrupt Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class EventSink : NativeEventDispatcher, IDisposable Methods | Improve this Doc View Source AddEventFilter(EventCategory, IEventListener) Adds an event filter to the dispatcher. Declaration public static void AddEventFilter(EventCategory eventCategory, IEventListener eventFilter) Parameters Type Name Description EventCategory eventCategory Selects the event category. IEventListener eventFilter Specifies the event filter. | Improve this Doc View Source AddEventListener(EventCategory, IEventListener) Adds a listener for particular types of events. Declaration public static void AddEventListener(EventCategory eventCategory, IEventListener eventListener) Parameters Type Name Description EventCategory eventCategory Selects the event category. IEventListener eventListener Specifies the event listener. | Improve this Doc View Source AddEventProcessor(EventCategory, IEventProcessor) Adds an event processing routine. Declaration public static void AddEventProcessor(EventCategory eventCategory, IEventProcessor eventProcessor) Parameters Type Name Description EventCategory eventCategory Selects the event category. IEventProcessor eventProcessor Specifies the event processor. | Improve this Doc View Source PostManagedEvent(Byte, Byte, UInt16, UInt32) Processes event information. Declaration public static void PostManagedEvent(byte category, byte subCategory, ushort data1, uint data2) Parameters Type Name Description Byte category The event category. Byte subCategory The event subcategory. UInt16 data1 Data related to the event. UInt32 data2 Data related to the event. | Improve this Doc View Source RemoveEventFilter(EventCategory, IEventListener) Removes an event filter. Declaration public static void RemoveEventFilter(EventCategory eventCategory, IEventListener eventFilter) Parameters Type Name Description EventCategory eventCategory Selects an event category. IEventListener eventFilter Specifies the event filter to be removed. | Improve this Doc View Source RemoveEventListener(EventCategory, IEventListener) Removes an event listener. Declaration public static void RemoveEventListener(EventCategory eventCategory, IEventListener eventListener) Parameters Type Name Description EventCategory eventCategory Selects an event category. IEventListener eventListener Specifies the event listener to be removed. | Improve this Doc View Source RemoveEventProcessor(EventCategory, IEventProcessor) Removes an event processor. Declaration public static void RemoveEventProcessor(EventCategory eventCategory, IEventProcessor eventProcessor) Parameters Type Name Description EventCategory eventCategory Selects an event category. IEventProcessor eventProcessor Specifies the event processor to be removed. Implements IDisposable"
  },
  "api/nanoFramework.Runtime.Events.GenericEvent.html": {
    "href": "api/nanoFramework.Runtime.Events.GenericEvent.html",
    "title": "Class GenericEvent | nanoFramework Documentation",
    "keywords": "Class GenericEvent Creates an instance of the GenericEvent class. Inheritance Object BaseEvent GenericEvent Inherited Members BaseEvent.Source BaseEvent.Message Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class GenericEvent : BaseEvent Fields | Improve this Doc View Source Category Specifies the event category. Declaration public byte Category Field Value Type Description Byte | Improve this Doc View Source Data Contains the data associated with the event. Declaration public uint Data Field Value Type Description UInt32 | Improve this Doc View Source Time Holds the event's time stamp. Declaration public DateTime Time Field Value Type Description DateTime"
  },
  "api/nanoFramework.Runtime.Events.html": {
    "href": "api/nanoFramework.Runtime.Events.html",
    "title": "Namespace nanoFramework.Runtime.Events | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Runtime.Events Classes BaseEvent This is a base class from which other nanoFramework event classes derive. CustomEvent Provides handling for custom native events. CustomEventArgs Contains argument values for custom events. EventArgs Constitutes the base class for classes that contain event data. EventSink Provides a dispatcher for handling events. GenericEvent Creates an instance of the GenericEvent class. NativeEventDispatcher Initializes a new instance of the NativeEventDispatcher class. WeakDelegate Provides methods for combining and removing \"weak\" delegates. Interfaces IEventListener Provides an interface to use as the basis of event listeners. IEventProcessor Provides an interface to use as the basis of event processors. Enums EventCategory Defines the categories events are classified into. Delegates CustomEventPostedEventHandler Provides an event handler that is called when a custom event is posted. NativeEventHandler A multicast (combinable) delegate that defines the event handler for a native event."
  },
  "api/nanoFramework.Runtime.Events.IEventListener.html": {
    "href": "api/nanoFramework.Runtime.Events.IEventListener.html",
    "title": "Interface IEventListener | nanoFramework Documentation",
    "keywords": "Interface IEventListener Provides an interface to use as the basis of event listeners. Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public interface IEventListener Methods | Improve this Doc View Source InitializeForEventSource() Initializes an event listener so that it listens to events from a particular source. Declaration void InitializeForEventSource() | Improve this Doc View Source OnEvent(BaseEvent) Reacts to an event. Declaration bool OnEvent(BaseEvent ev) Parameters Type Name Description BaseEvent ev Holds the event that occurred. Returns Type Description Boolean true if the event was processed, or false if not."
  },
  "api/nanoFramework.Runtime.Events.IEventProcessor.html": {
    "href": "api/nanoFramework.Runtime.Events.IEventProcessor.html",
    "title": "Interface IEventProcessor | nanoFramework Documentation",
    "keywords": "Interface IEventProcessor Provides an interface to use as the basis of event processors. Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public interface IEventProcessor Methods | Improve this Doc View Source ProcessEvent(UInt32, UInt32, DateTime) Processes an event IEventProcessor should return null if it cannot process an event, in that case next processor will be given an opportunity. Declaration BaseEvent ProcessEvent(uint data1, uint data2, DateTime time) Parameters Type Name Description UInt32 data1 Holds event-specific data. UInt32 data2 Holds event-specific data. DateTime time Contains the time stamp for the event. Returns Type Description BaseEvent The event that was processed, or null if the event can't be processed. Remarks In the event that the processor cannot process an event, IEventProcessor should return null. In that case next processor will be given an opportunity."
  },
  "api/nanoFramework.Runtime.Events.NativeEventDispatcher.html": {
    "href": "api/nanoFramework.Runtime.Events.NativeEventDispatcher.html",
    "title": "Class NativeEventDispatcher | nanoFramework Documentation",
    "keywords": "Class NativeEventDispatcher Initializes a new instance of the NativeEventDispatcher class. Inheritance Object NativeEventDispatcher EventSink Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class NativeEventDispatcher : IDisposable Constructors NativeEventDispatcher(String, UInt64) Initializes a new instance of the NativeEventDispatcher class. Declaration public NativeEventDispatcher(string driverName, ulong driverData) Parameters Type Name Description String driverName The name of a registered driver. UInt64 driverData Driver data to be used when initializing the driver. Fields | Improve this Doc View Source callbacks The event handler for this NativeEventDispatcher object (a multicast combinable delegate). Declaration protected NativeEventHandler callbacks Field Value Type Description NativeEventHandler | Improve this Doc View Source disposed Set to true if this NativeEventDispatcher object has been disposed, or false if not. Declaration protected bool disposed Field Value Type Description Boolean | Improve this Doc View Source threadSpawn The event handler for this NativeEventDispatcher object (a multicast combinable delegate). Declaration protected NativeEventHandler threadSpawn Field Value Type Description NativeEventHandler Methods DisableInterrupt() Disables the interrupt for this NativeEventDispatcher object. Declaration public virtual void DisableInterrupt() | Improve this Doc View Source Dispose() Releases resources used by this NativeEventDispatcher object. Declaration public void Dispose() Dispose(Boolean) Releases resources used by this NativeEventDispatcher object. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if in the process of disposing, or false otherwise. EnableInterrupt() Enables the interrupt for this NativeEventDispatcher object. Declaration public virtual void EnableInterrupt() | Improve this Doc View Source Finalize() Declaration protected void Finalize() Events | Improve this Doc View Source OnInterrupt Adds or removes callback methods for native events. Declaration public event NativeEventHandler OnInterrupt Event Type Type Description NativeEventHandler Remarks Applications can subscribe to this event to be notified when an interrupt event occurs. Implements IDisposable"
  },
  "api/nanoFramework.Runtime.Events.NativeEventHandler.html": {
    "href": "api/nanoFramework.Runtime.Events.NativeEventHandler.html",
    "title": "Delegate NativeEventHandler | nanoFramework Documentation",
    "keywords": "Delegate NativeEventHandler A multicast (combinable) delegate that defines the event handler for a native event. Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public delegate void NativeEventHandler(uint data1, uint data2, DateTime time); Parameters Type Name Description UInt32 data1 First parameter (can be the port). UInt32 data2 First parameter (can be the port). DateTime time Time of the event."
  },
  "api/nanoFramework.Runtime.Events.WeakDelegate.html": {
    "href": "api/nanoFramework.Runtime.Events.WeakDelegate.html",
    "title": "Class WeakDelegate | nanoFramework Documentation",
    "keywords": "Class WeakDelegate Provides methods for combining and removing \"weak\" delegates. Inheritance Object WeakDelegate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public static class WeakDelegate Remarks When instances of the WeakDelegate class are created, the object references in the delegate list are treated like WeakReference objects. This means that these object references are prone to garbage collection even if they are still targets in the list of delegates. When such object references are collected as garbage, they are automatically removed from the list of delegates. Methods Combine(Delegate, Delegate) Concatenates the invocation lists of two multicast (combinable) delegates. Declaration public static Delegate Combine(Delegate a, Delegate b) Parameters Type Name Description Delegate a The combinable delegate whose invocation list comes first. Delegate b The combinable delegate whose invocation list comes second. Returns Type Description Delegate A new combinable delegate with an invocation list that concatenates the invocation lists of the a and b parameters, in that order. If b is a null reference, this method returns a. If a is a null reference, this method returns b. If both a and b are null references, this method returns null. Remove(Delegate, Delegate) Removes the invocation list of a specified delegate from the invocation list of another specified delegate. Declaration public static Delegate Remove(Delegate a, Delegate b) Parameters Type Name Description Delegate a The delegate from which the invocation list is to be removed. Delegate b The delegate that supplies the invocation list to be removed from the delegate specified in a. Returns Type Description Delegate A new delegate with an invocation list formed by taking the invocation list of the a parameter and removing the invocation list of the b parameter, if b's invocation list is found in a's invocation list. If b is a null reference, or if b's invocation list is not found in a's invocation list, this method returns a. If b's invocation list is equal to a's invocation list, or if b is a null reference, this method returns null."
  },
  "api/nanoFramework.Runtime.Native.ConstraintException.html": {
    "href": "api/nanoFramework.Runtime.Native.ConstraintException.html",
    "title": "Class ConstraintException | nanoFramework Documentation",
    "keywords": "Class ConstraintException The exception that is thrown when an action is attempted that violates a constraint. Inheritance Object Exception ConstraintException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public class ConstraintException : Exception Remarks When a ConstraintException exception is caught, if the ExecutionConstraint object that caused this exception has not been uninstalled, the catch block implementation has a small additional amount of time during which to handle the exception. If this takes too long, the exception is re-thrown automatically."
  },
  "api/nanoFramework.Runtime.Native.ExecutionConstraint.html": {
    "href": "api/nanoFramework.Runtime.Native.ExecutionConstraint.html",
    "title": "Class ExecutionConstraint | nanoFramework Documentation",
    "keywords": "Class ExecutionConstraint Provides a method to require a thread to complete an operation within specific constraints. Inheritance Object ExecutionConstraint Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public static class ExecutionConstraint Methods Install(Int32, Int32) Creates a sub-thread within the calling thread, containing a constraint that requires the calling thread to complete an operation within a specified time period and at a specified priority level. Declaration public static void Install(int timeoutMilliseconds, int priority) Parameters Type Name Description Int32 timeoutMilliseconds The number of milliseconds before a ConstraintException exception is thrown. Note that the value -1 in this parameter indicates that the current constraint exception is to be uninstalled. Int32 priority The priority level of the calling thread. Remarks If the specified timeout expires before the thread has completed the operation, a ConstraintException exception is thrown. Note that the time that was set in the timeout parameter is standard clock time, not thread execution time. The priority level can only be raised for threads that already have a priority level higher than 0 (zero). Exceptions Type Condition Exception The timeout parameter is less than -1. Exception The system is unable to identify the thread that is installing this constraint. Exception The thread installing this constraint does not own the sub-thread that the constraint applies to."
  },
  "api/nanoFramework.Runtime.Native.GC.html": {
    "href": "api/nanoFramework.Runtime.Native.GC.html",
    "title": "Class GC | nanoFramework Documentation",
    "keywords": "Class GC Provides a set of methods and properties to control GC (garbage collection), a service that automatically reclaims unused computer memory. Inheritance Object GC Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public static class GC Methods EnableGCMessages(Boolean) Specifies whether GC (garbage collection) messages are enabled. Declaration public static void EnableGCMessages(bool enable) Parameters Type Name Description Boolean enable true to enable output of messages; otherwise, false. Remarks Despite this method enabling the GC messages there is the possibility of those never being outputted depending on the target build options. RTM builds (which remove all non essential features) are one of those situations. Run(Boolean) Runs GC (garbage collection), a service that automatically reclaims unused computer memory. Declaration public static uint Run(bool compactHeap) Parameters Type Name Description Boolean compactHeap true to force heap compaction; otherwise, false . Returns Type Description UInt32 The amount of free (unused) memory, in bytes."
  },
  "api/nanoFramework.Runtime.Native.html": {
    "href": "api/nanoFramework.Runtime.Native.html",
    "title": "Namespace nanoFramework.Runtime.Native | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Runtime.Native Classes ConstraintException The exception that is thrown when an action is attempted that violates a constraint. ExecutionConstraint Provides a method to require a thread to complete an operation within specific constraints. GC Provides a set of methods and properties to control GC (garbage collection), a service that automatically reclaims unused computer memory. Power Provides access to power management functionalities on target device. ResourceUtility Helper class to access nanoFramework application managed resources. Rtc Provides a set of methods that help developers to manage the RTC (Real Time Clock) on the target device. SystemInfo Provides information about the system. Enums SystemInfo.FloatingPoint Floating point options. Delegates RebootEventHandler The event handler delegate for the OnRebootEvent event."
  },
  "api/nanoFramework.Runtime.Native.Power.html": {
    "href": "api/nanoFramework.Runtime.Native.Power.html",
    "title": "Class Power | nanoFramework Documentation",
    "keywords": "Class Power Provides access to power management functionalities on target device. Inheritance Object Power Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public class Power Remarks This API is a general one common to all devices. There could be available target specific APIs providing other methods. Methods | Improve this Doc View Source RebootDevice() The RebootDevice method enables the caller to force a reboot of the device. This method raises the OnRebootEvent. Declaration public static void RebootDevice() Remarks If there are any handlers subscribing OnRebootEvent the reboot will happen only after all handlers complete their execution, no matter the time that takes. In case the developer want's to set a timeout for those to complete, use the alternative RebootDevice(Int32) call and set an execution constrain. | Improve this Doc View Source RebootDevice(Int32) The RebootDevice method enables the caller to force a reboot of the device. This method raises the OnRebootEvent. Declaration public static void RebootDevice(int exeConstraintTimeout) Parameters Type Name Description Int32 exeConstraintTimeout Execution constraint timeout (in milliseconds) for the event handlers. If the event handlers take longer than the given value, then the handlers will be aborted and the reboot will be executed. Events | Improve this Doc View Source OnRebootEvent This event notifies listeners prior to a device reboot. The event handlers may have an execution constraint placed on them by the caller of the Reboot method. Therefore, it is recommended that the event handlers be short atomic operations. Declaration public static event RebootEventHandler OnRebootEvent Event Type Type Description RebootEventHandler"
  },
  "api/nanoFramework.Runtime.Native.RebootEventHandler.html": {
    "href": "api/nanoFramework.Runtime.Native.RebootEventHandler.html",
    "title": "Delegate RebootEventHandler | nanoFramework Documentation",
    "keywords": "Delegate RebootEventHandler The event handler delegate for the OnRebootEvent event. Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public delegate void RebootEventHandler();"
  },
  "api/nanoFramework.Runtime.Native.ResourceUtility.html": {
    "href": "api/nanoFramework.Runtime.Native.ResourceUtility.html",
    "title": "Class ResourceUtility | nanoFramework Documentation",
    "keywords": "Class ResourceUtility Helper class to access nanoFramework application managed resources. Inheritance Object ResourceUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.ResourceManager.dll Syntax public static class ResourceUtility Methods | Improve this Doc View Source GetDelimitedStringResource(ResourceManager, Enum, Int32) Retrieves the string representation of a specified resource. Declaration public static string GetDelimitedStringResource(ResourceManager rm, Enum resource, int i) Parameters Type Name Description ResourceManager rm The ResourceManager that contains the specified resources. Enum resource An enumerated value that specifies the type of the resources for which you want to get the string representations. Int32 i The index number of the resource (in the resource manager's resource collection) for which you want to get the string representation. Returns Type Description String The string representations of the specified resource. | Improve this Doc View Source GetDelimitedStringResources(ResourceManager, Enum) Retrieves the string representations of the specified resources. Declaration public static string[] GetDelimitedStringResources(ResourceManager rm, Enum resource) Parameters Type Name Description ResourceManager rm The ResourceManager that contains the specified resources. Enum resource An enumerated value that specifies the type of the resources for which you want to get the string representations. Returns Type Description String [] The string representations of the specified resources. GetObject(ResourceManager, Enum) Gets the value of a specified Object resource for the current system culture. Declaration public static object GetObject(ResourceManager rm, Enum id) Parameters Type Name Description ResourceManager rm The ResourceManager that contains the specified resources. Enum id The integer identifier for the specified resource. Returns Type Description Object The value of the specified resource for the current system culture. GetObject(ResourceManager, Enum, Int32, Int32) Gets the value of a specified Object resource for the current system culture. Declaration public static object GetObject(ResourceManager rm, Enum id, int offset, int length) Parameters Type Name Description ResourceManager rm The ResourceManager that contains the specified resources. Enum id The integer identifier for the specified resource. Int32 offset The offset for retrieving the value. Int32 length The length of the value to retrieve. Returns Type Description Object The value of the specified resource for the current system culture."
  },
  "api/nanoFramework.Runtime.Native.Rtc.html": {
    "href": "api/nanoFramework.Runtime.Native.Rtc.html",
    "title": "Class Rtc | nanoFramework Documentation",
    "keywords": "Class Rtc Provides a set of methods that help developers to manage the RTC (Real Time Clock) on the target device. Inheritance Object Rtc Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public static class Rtc Methods | Improve this Doc View Source SetSystemTime(DateTime) Sets the current system time and date. Declaration public static bool SetSystemTime(DateTime time) Parameters Type Name Description DateTime time DateTime structure that contains the new system date and time. Returns Type Description Boolean If the function succeeds, the return value is true. Remarks This method is specific to nanoFramework. The actual availability of the resulting feature depends on the availability on target platform that's running the nanoCLR."
  },
  "api/nanoFramework.Runtime.Native.SystemInfo.FloatingPoint.html": {
    "href": "api/nanoFramework.Runtime.Native.SystemInfo.FloatingPoint.html",
    "title": "Enum SystemInfo.FloatingPoint | nanoFramework Documentation",
    "keywords": "Enum SystemInfo.FloatingPoint Floating point options. Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public enum FloatingPoint Fields Name Description DoublePrecisionHardware Double precision floating point calculation supported by hardware unit. DoublePrecisionSoftware Double precision floating point software emulated. None None SinglePrecisionHardware Single precision floating point calculation supported by hardware unit. SinglePrecisionSoftware Single precision floating point software emulated."
  },
  "api/nanoFramework.Runtime.Native.SystemInfo.html": {
    "href": "api/nanoFramework.Runtime.Native.SystemInfo.html",
    "title": "Class SystemInfo | nanoFramework Documentation",
    "keywords": "Class SystemInfo Provides information about the system. Inheritance Object SystemInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public static class SystemInfo Properties | Improve this Doc View Source FloatingPointSupport Gets a SystemInfo.FloatingPoint value with the information regarding the floating point support available in the target platform. Declaration public static SystemInfo.FloatingPoint FloatingPointSupport { get; } Property Value Type Description SystemInfo.FloatingPoint Model Gets a value that represents a product model. Declaration public static byte Model { get; } Property Value Type Description Byte OEM Gets a value that represents an original equipment manufacturer (OEM). Declaration public static byte OEM { get; } Property Value Type Description Byte OEMString Gets a string that contains information provided by the equipment manufacturer (OEM) about this system. Declaration public static string OEMString { get; } Property Value Type Description String Platform Gets a string that contains the platform designation. Declaration public static string Platform { get; } Property Value Type Description String SKU Gets a value that represents a product's stock-keeping unit (SKU). Declaration public static ushort SKU { get; } Property Value Type Description UInt16 TargetName Gets a string that contains the target name. Declaration public static string TargetName { get; } Property Value Type Description String | Improve this Doc View Source Version Gets a string containing version information about this system. Declaration public static Version Version { get; } Property Value Type Description Version"
  },
  "api/nanoFramework.Test.ChildClass.html": {
    "href": "api/nanoFramework.Test.ChildClass.html",
    "title": "Class ChildClass | nanoFramework Documentation",
    "keywords": "Class ChildClass Inheritance Object ChildClass Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Test Assembly : nanoFramework.Test.dll Syntax public class ChildClass Fields | Improve this Doc View Source four Declaration public int four Field Value Type Description Int32 Properties | Improve this Doc View Source one Declaration public int one { get; set; } Property Value Type Description Int32 | Improve this Doc View Source three Declaration public int three { get; set; } Property Value Type Description Int32 | Improve this Doc View Source two Declaration public int two { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/nanoFramework.Test.html": {
    "href": "api/nanoFramework.Test.html",
    "title": "Namespace nanoFramework.Test | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Test Classes ChildClass Program TestClass TestClassNaN"
  },
  "api/nanoFramework.Test.Program.html": {
    "href": "api/nanoFramework.Test.Program.html",
    "title": "Class Program | nanoFramework Documentation",
    "keywords": "Class Program Inheritance Object Program Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Test Assembly : nanoFramework.Test.dll Syntax public class Program Methods | Improve this Doc View Source Main() Declaration public static void Main()"
  },
  "api/nanoFramework.Test.TestClass.html": {
    "href": "api/nanoFramework.Test.TestClass.html",
    "title": "Class TestClass | nanoFramework Documentation",
    "keywords": "Class TestClass Inheritance Object TestClass Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Test Assembly : nanoFramework.Test.dll Syntax public class TestClass Fields | Improve this Doc View Source child1 Declaration public ChildClass child1 Field Value Type Description ChildClass Properties | Improve this Doc View Source aBoolean Declaration public bool aBoolean { get; set; } Property Value Type Description Boolean | Improve this Doc View Source aByte Declaration public byte aByte { get; set; } Property Value Type Description Byte | Improve this Doc View Source aFloat Declaration public float aFloat { get; set; } Property Value Type Description Single | Improve this Doc View Source aInteger Declaration public int aInteger { get; set; } Property Value Type Description Int32 | Improve this Doc View Source aShort Declaration public short aShort { get; set; } Property Value Type Description Int16 | Improve this Doc View Source aString Declaration public string aString { get; set; } Property Value Type Description String | Improve this Doc View Source byteArray Declaration public byte[] byteArray { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source Child Declaration public ChildClass Child { get; set; } Property Value Type Description ChildClass | Improve this Doc View Source FixedTimestamp Declaration public DateTime FixedTimestamp { get; set; } Property Value Type Description DateTime | Improve this Doc View Source floatArray Declaration public float[] floatArray { get; set; } Property Value Type Description Single [] | Improve this Doc View Source intArray Declaration public int[] intArray { get; set; } Property Value Type Description Int32 [] | Improve this Doc View Source nullObject Declaration public object nullObject { get; set; } Property Value Type Description Object | Improve this Doc View Source shortArray Declaration public short[] shortArray { get; set; } Property Value Type Description Int16 [] | Improve this Doc View Source stringArray Declaration public string[] stringArray { get; set; } Property Value Type Description String [] | Improve this Doc View Source Timestamp Declaration public DateTime Timestamp { get; set; } Property Value Type Description DateTime"
  },
  "api/nanoFramework.Test.TestClassNaN.html": {
    "href": "api/nanoFramework.Test.TestClassNaN.html",
    "title": "Class TestClassNaN | nanoFramework Documentation",
    "keywords": "Class TestClassNaN Inheritance Object TestClassNaN Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Test Assembly : nanoFramework.Test.dll Syntax public class TestClassNaN Properties | Improve this Doc View Source nF Declaration public float nF { get; set; } Property Value Type Description Single"
  },
  "api/nanoFramework.TI.EasyLink.ControlOption.html": {
    "href": "api/nanoFramework.TI.EasyLink.ControlOption.html",
    "title": "Enum ControlOption | nanoFramework Documentation",
    "keywords": "Enum ControlOption EasyLink Status and error codes. Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public enum ControlOption : byte Fields Name Description AddressSize Set the number of bytes in Address for both address filter and Tx/Rx operations. AsyncRxTimeout Relative time in ticks from asynchronous Rx start to TimeOut. A value of 0 means no timeout. IdleTimeout Set a timeout value for inactivity on the radio. MultiClientMode Set Multi-client mode for applications that will use multiple RF clients. RxTestTone Enable/Disable Rx Test mode for Tone. TestSignal Enable/Disable Test mode for Signal. TestTone Enable/Disable Test mode for Tone."
  },
  "api/nanoFramework.TI.EasyLink.EasyLinkController.html": {
    "href": "api/nanoFramework.TI.EasyLink.EasyLinkController.html",
    "title": "Class EasyLinkController | nanoFramework Documentation",
    "keywords": "Class EasyLinkController The CC13xx/CC26xx EasyLink API is a simple abstraction layer on top of the CC13xx/CC26xx RF Driver and is intended as a starting point for developers creating a proprietor Sub1G protocol. Inheritance Object EasyLinkController Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public sealed class EasyLinkController : IDisposable Remarks The EasyLink layer does not support any regional RF conformance such as 'Listen Before Talk' required for the license free frequency band. Customers need to add support for the regional conformance that their product requires under the EasyLink API. Constructors | Improve this Doc View Source EasyLinkController(PhyType) Initializes the radio with specified Phy settings. Declaration public EasyLinkController(PhyType phyTYpe = PhyType._50kbps2gfsk) Parameters Type Name Description PhyType phyTYpe Properties AbsoluteTime Absolute radio time. This can be used for monitoring or Tx and Rx events using the AbsoluteTime field from TransmitPacket or ReceivedPacket . Declaration public uint AbsoluteTime { get; } Property Value Type Description UInt32 Absolute radio time. Frequency Gets the radio frequency in units of kHz. The returned frequency is value set in the Frequency Synthesizer and may not be exactly the same that was set. Declaration public uint Frequency { get; } Property Value Type Description UInt32 Remarks This value does not include any offsets for deviations due to factors such as temperature and hence this API should not be used to get an accurate measure of frequency. IeeeAddress Gets the IEEE address. Declaration public byte[] IeeeAddress { get; } Property Value Type Description Byte [] | Improve this Doc View Source IsInitialized Provides information if the EasyLink layer has been successfully initialized by calling Initialize() . Declaration public bool IsInitialized { get; } Property Value Type Description Boolean true if the EasyLink has been successfully initialized. | Improve this Doc View Source PhyType Declaration public PhyType PhyType { get; } Property Value Type Description PhyType RfPower Gets the Tx Power in dBm. Declaration public sbyte RfPower { get; } Property Value Type Description SByte Remarks This value does not include any offsets for deviations due to factors such as temperature and hence this API should not be used to get an accurate measure of frequency. Rssi RSSI value of an ongoing radio operation. It is useful in receiver test modes to detect the presence of both modulated and unmodulated carrier waves. Declaration public sbyte Rssi { get; } Property Value Type Description SByte Signed RSSI value (dBm)e. Remarks If no RSSI is available the return value is -128. Methods | Improve this Doc View Source AddAddressToFilter(Byte[]) Add an address to the receive address filter. Any packet received for an address that is not in the filter will be discarded. Addresses are entered as Byte array. Declaration public void AddAddressToFilter(byte[] address) Parameters Type Name Description Byte [] address Remarks If the address is already on the list it won't be added. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() GetConfiguration(ControlOption) Gets the current value of an advanced configuration option. Declaration public uint GetConfiguration(ControlOption option) Parameters Type Name Description ControlOption option The control option to get. Returns Type Description UInt32 The control option value. | Improve this Doc View Source Initialize() Initializes the EsayLink layer. Declaration public Status Initialize() Returns Type Description Status The operation result. | Improve this Doc View Source Receive(out ReceivedPacket) Waits for packet to be received. This method blocks execution of the current thread until a packet is received. Declaration public Status Receive(out ReceivedPacket packet) Parameters Type Name Description ReceivedPacket packet The received packet. Returns Type Description Status The operation result. | Improve this Doc View Source Receive(out ReceivedPacket, Int32) Waits for packet to be received. This method blocks execution of the current thread until a packet is received. If no packet is receive before the timeout expires an Exception is thrown. Declaration public Status Receive(out ReceivedPacket packet, int timeout) Parameters Type Name Description ReceivedPacket packet The received packet. Int32 timeout The timeout value for the reception operation to complete successfully. Returns Type Description Status The operation result. | Improve this Doc View Source RemoveAddressFromFilter(Byte[]) Removes an address from the receive address filter. Declaration public void RemoveAddressFromFilter(byte[] address) Parameters Type Name Description Byte [] address Remarks If the address is not on the filter list no error will be returned. | Improve this Doc View Source SetConfiguration(ControlOption, UInt32) Sets advanced configuration options. Declaration public Status SetConfiguration(ControlOption option, uint value) Parameters Type Name Description ControlOption option The control option to be set. UInt32 value The value to set the control option to. Returns Type Description Status The operation result. | Improve this Doc View Source SetFrequency(UInt32) Sets the radio frequency in units of kHz. When setting the radio frequency the value will be rounded to the nearest frequency supported by the frequency synthesizer. Declaration public Status SetFrequency(uint frequency) Parameters Type Name Description UInt32 frequency Returns Type Description Status Remarks In order to set the frequency the EasyLink layer has to have been previously initialized with Initialize() . | Improve this Doc View Source SetRfPower(SByte) Sets the Tx Power in dBm. Accepted values range from -20 to 20 dBm, depending on the platform. All platforms other than the CC1352P: Value of -10 dBm or values in the range of 0-14 dBm are accepted. Values above 14 are set to 14 dBm while those below 0 are set to -10 dBm. CC1352P Default PA: -20 to 14 dBm. Values above 14 dBm will be set to 14 dBm, while values below -20 dBm will cause a configuration error. CC1352P High PA: 14 to 20 dBm. Values above 20 dBm will be set to 20 dBm, while values below 14 dBm will cause a configuration error. Declaration public Status SetRfPower(sbyte rfPower) Parameters Type Name Description SByte rfPower Returns Type Description Status Remarks In order to set the Tx Power the EasyLink layer has to have been previously initialized with Initialize() . The PA mode is chosen at build time, run-time switching from high PA to default PA (or vice versa) is not supported. | Improve this Doc View Source Transmit(TransmitPacket) Sends a Packet with blocking call. This method blocks execution of the current thread until the packet transmission in complete. Declaration public Status Transmit(TransmitPacket packet) Parameters Type Name Description TransmitPacket packet The TransmitPacket to be transmitted. Returns Type Description Status The operation result. | Improve this Doc View Source Transmit(TransmitPacket, Int32, Int32) Sends a Packet. This method blocks execution of the current thread until the packet transmission in complete. Declaration public Status Transmit(TransmitPacket packet, int timeout, int dueTime = 0) Parameters Type Name Description TransmitPacket packet The TransmitPacket to be transmitted. Int32 timeout The timeout value (in milliseconds) for the transmission operation to complete successfully. Int32 dueTime The amount of time to delay before starting the transmission, in milliseconds. Specify zero (0) to start the timer immediately. Returns Type Description Status The operation result. Implements IDisposable"
  },
  "api/nanoFramework.TI.EasyLink.html": {
    "href": "api/nanoFramework.TI.EasyLink.html",
    "title": "Namespace nanoFramework.TI.EasyLink | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.TI.EasyLink Classes EasyLinkController The CC13xx/CC26xx EasyLink API is a simple abstraction layer on top of the CC13xx/CC26xx RF Driver and is intended as a starting point for developers creating a proprietor Sub1G protocol. ReceivedPacket Class with definitions and data of a received packet. TransmitPacket Class with definitions and data of a packet to be transmited. Enums ControlOption EasyLink Status and error codes. PhyType Phy settings to initialize the radio. Status EasyLink Status and error codes."
  },
  "api/nanoFramework.TI.EasyLink.PhyType.html": {
    "href": "api/nanoFramework.TI.EasyLink.PhyType.html",
    "title": "Enum PhyType | nanoFramework Documentation",
    "keywords": "Enum PhyType Phy settings to initialize the radio. Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public enum PhyType : byte Remarks The support for a particular Phy configuration is target dependent. If the request type is not available an NotSupportedException will be thrown. Fields Name Description _2_4_100kbps2gfs 2.4Ghz 100kbps data rate, IEEE 802.15.4g GFSK. _2_4_200kbps2gfsk 2.4Ghz 200kbps data rate, IEEE 802.15.4g GFSK. _2_4_250kbps2gfsk 2.4Ghz 250kbps data rate, IEEE 802.15.4g GFSK. _200kbps2gfsk 200kbps data rate, IEEE 802.15.4g GFSK. _50kbps2gfsk Sub1G 50kbps data rate, IEEE 802.15.4g GFSK _5kbpsSlLr SimpleLink Long Range (5 kbps). Custom Customer Phy specific settings."
  },
  "api/nanoFramework.TI.EasyLink.ReceivedPacket.html": {
    "href": "api/nanoFramework.TI.EasyLink.ReceivedPacket.html",
    "title": "Class ReceivedPacket | nanoFramework Documentation",
    "keywords": "Class ReceivedPacket Class with definitions and data of a received packet. Inheritance Object ReceivedPacket Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public class ReceivedPacket Properties | Improve this Doc View Source AbsoluteTime Absolute radio time that the packet was received. Declaration public uint AbsoluteTime { get; } Property Value Type Description UInt32 | Improve this Doc View Source DestinationAddress Destination address. Declaration public byte[] DestinationAddress { get; } Property Value Type Description Byte [] | Improve this Doc View Source Payload Payload data. Declaration public byte[] Payload { get; } Property Value Type Description Byte [] | Improve this Doc View Source Rssi RSSI of received packet. Declaration public sbyte Rssi { get; } Property Value Type Description SByte | Improve this Doc View Source RxTimeout Relative radio time from Rx start to Rx Timeout, or absolute time that packet was Rx'ed when returned. A value of 0 means no timeout. Declaration public uint RxTimeout { get; } Property Value Type Description UInt32"
  },
  "api/nanoFramework.TI.EasyLink.Status.html": {
    "href": "api/nanoFramework.TI.EasyLink.Status.html",
    "title": "Enum Status | nanoFramework Documentation",
    "keywords": "Enum Status EasyLink Status and error codes. Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public enum Status : byte Fields Name Description Aborted Command stopped or aborted. Busy Busy error. CommandError Command error. ConfigurationError Configuration error. MemoryError Memory error ParameterError Parameter error. RxBufferError Receive buffer error. RxError Receive error. RxTimeout Receive timeout. Success Operation successful. TxError Transmit error."
  },
  "api/nanoFramework.TI.EasyLink.TransmitPacket.html": {
    "href": "api/nanoFramework.TI.EasyLink.TransmitPacket.html",
    "title": "Class TransmitPacket | nanoFramework Documentation",
    "keywords": "Class TransmitPacket Class with definitions and data of a packet to be transmited. Inheritance Object TransmitPacket Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public class TransmitPacket Constructors | Improve this Doc View Source TransmitPacket(Byte[], Byte[]) Declaration public TransmitPacket(byte[] address, byte[] data) Parameters Type Name Description Byte [] address Byte [] data Properties | Improve this Doc View Source DestinationAddress Destination address. Declaration public byte[] DestinationAddress { get; } Property Value Type Description Byte [] | Improve this Doc View Source Payload Payload data. Declaration public byte[] Payload { get; } Property Value Type Description Byte []"
  },
  "api/System.AppDomainUnloadedException.html": {
    "href": "api/System.AppDomainUnloadedException.html",
    "title": "Class AppDomainUnloadedException | nanoFramework Documentation",
    "keywords": "Class AppDomainUnloadedException The exception that is thrown when an attempt is made to access an unloaded application domain. Inheritance Object Exception SystemException AppDomainUnloadedException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class AppDomainUnloadedException : SystemException Constructors | Improve this Doc View Source AppDomainUnloadedException() Initializes a new instance of the AppDomainUnloadedException class. Declaration public AppDomainUnloadedException() | Improve this Doc View Source AppDomainUnloadedException(String) Initializes a new instance of the AppDomainUnloadedException class with a specified error message. Declaration public AppDomainUnloadedException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source AppDomainUnloadedException(String, Exception) Initializes a new instance of the AppDomainUnloadedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public AppDomainUnloadedException(string message, Exception innerException) Parameters Type Name Description String message The message that describes the error. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.ApplicationException.html": {
    "href": "api/System.ApplicationException.html",
    "title": "Class ApplicationException | nanoFramework Documentation",
    "keywords": "Class ApplicationException Serves as the base class for application-defined exceptions. Inheritance Object Exception ApplicationException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class ApplicationException : Exception Constructors | Improve this Doc View Source ApplicationException() Initializes a new instance of the ApplicationException class. Declaration public ApplicationException() | Improve this Doc View Source ApplicationException(String) Initializes a new instance of the ApplicationException class with a specified error message. Declaration public ApplicationException(string message) Parameters Type Name Description String message A message that describes the error. | Improve this Doc View Source ApplicationException(String, Exception) Initializes a new instance of the ApplicationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ApplicationException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.ArgumentException.html": {
    "href": "api/System.ArgumentException.html",
    "title": "Class ArgumentException | nanoFramework Documentation",
    "keywords": "Class ArgumentException The exception that is thrown when one of the arguments provided to a method is not valid. Inheritance Object Exception SystemException ArgumentException ArgumentNullException ArgumentOutOfRangeException Inherited Members Exception.HResult Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class ArgumentException : SystemException Constructors | Improve this Doc View Source ArgumentException() Initializes a new instance of the ArgumentException class. Declaration public ArgumentException() | Improve this Doc View Source ArgumentException(String) Initializes a new instance of the ArgumentException class with a specified error message. Declaration public ArgumentException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source ArgumentException(String, Exception) Initializes a new instance of the ArgumentException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ArgumentException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. | Improve this Doc View Source ArgumentException(String, String) Initializes a new instance of the ArgumentException class with a specified error message and the name of the parameter that causes this exception. Declaration public ArgumentException(string message, string paramName) Parameters Type Name Description String message The error message that explains the reason for the exception. String paramName The name of the parameter that caused the current exception. | Improve this Doc View Source ArgumentException(String, String, Exception) Initializes a new instance of the ArgumentException class with a specified error message, the parameter name, and a reference to the inner exception that is the cause of this exception. Declaration public ArgumentException(string message, string paramName, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. String paramName The name of the parameter that caused the current exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Properties | Improve this Doc View Source Message Gets the error message and the parameter name, or only the error message if no parameter name is set. Declaration public override string Message { get; } Property Value Type Description String A text string describing the details of the exception. Overrides Exception.Message | Improve this Doc View Source ParamName Gets the name of the parameter that causes this exception. Declaration public virtual string ParamName { get; } Property Value Type Description String The parameter name."
  },
  "api/System.ArgumentNullException.html": {
    "href": "api/System.ArgumentNullException.html",
    "title": "Class ArgumentNullException | nanoFramework Documentation",
    "keywords": "Class ArgumentNullException The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument. Inheritance Object Exception SystemException ArgumentException ArgumentNullException Inherited Members ArgumentException.Message ArgumentException.ParamName Exception.HResult Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class ArgumentNullException : ArgumentException Constructors | Improve this Doc View Source ArgumentNullException() Initializes a new instance of the ArgumentNullException class. Declaration public ArgumentNullException() | Improve this Doc View Source ArgumentNullException(String) Initializes a new instance of the ArgumentNullException class with the name of the parameter that causes this exception. Declaration public ArgumentNullException(string argument) Parameters Type Name Description String argument The name of the parameter that caused the exception. | Improve this Doc View Source ArgumentNullException(String, String) Initializes an instance of the ArgumentNullException class with a specified error message and the name of the parameter that causes this exception. Declaration public ArgumentNullException(string paramName, string message) Parameters Type Name Description String paramName The name of the parameter that caused the exception. String message A message that describes the error."
  },
  "api/System.ArgumentOutOfRangeException.html": {
    "href": "api/System.ArgumentOutOfRangeException.html",
    "title": "Class ArgumentOutOfRangeException | nanoFramework Documentation",
    "keywords": "Class ArgumentOutOfRangeException The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method. Inheritance Object Exception SystemException ArgumentException ArgumentOutOfRangeException Inherited Members ArgumentException.Message ArgumentException.ParamName Exception.HResult Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class ArgumentOutOfRangeException : ArgumentException Constructors | Improve this Doc View Source ArgumentOutOfRangeException() Initializes a new instance of the ArgumentOutOfRangeException class. Declaration public ArgumentOutOfRangeException() | Improve this Doc View Source ArgumentOutOfRangeException(String) Initializes a new instance of the ArgumentOutOfRangeException class with the name of the parameter that causes this exception. Declaration public ArgumentOutOfRangeException(string paramName) Parameters Type Name Description String paramName The name of the parameter that causes this exception. | Improve this Doc View Source ArgumentOutOfRangeException(String, String) Initializes a new instance of the ArgumentOutOfRangeException class with the name of the parameter that causes this exception and a specified error message. Declaration public ArgumentOutOfRangeException(string paramName, string message) Parameters Type Name Description String paramName The name of the parameter that caused the exception. String message The message that describes the error."
  },
  "api/System.Array.html": {
    "href": "api/System.Array.html",
    "title": "Class Array | nanoFramework Documentation",
    "keywords": "Class Array Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime. Inheritance Object Array Implements ICloneable IList ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class Array : ICloneable, IList, ICollection, IEnumerable Properties | Improve this Doc View Source IsFixedSize Gets a value indicating whether the Array has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description Boolean This property is always true for all arrays. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the Array is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean This property is always false for all arrays. | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the Array is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean This property is always false for all arrays. Length Gets a 32-bit integer that represents the total number of elements in all the dimensions of the Array. Declaration public int Length { get; } Property Value Type Description Int32 A 32-bit integer that represents the total number of elements in all the dimensions of the Array; zero if there are no elements in the array. | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the Array. Declaration public object SyncRoot { get; } Property Value Type Description Object An object that can be used to synchronize access to the Array. Methods | Improve this Doc View Source BinarySearch(Array, Int32, Int32, Object, IComparer) Searches a range of elements in a one-dimensional sorted Array for a value, using the specified IComparer interface. Declaration public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer) Parameters Type Name Description Array array The sorted one-dimensional Array to search. Int32 index The starting index of the range to search. Int32 length The length of the range to search. Object value The object to search for. IComparer comparer The IComparer implementation to use when comparing elements. -or- nullNothingnullptrunit a null reference(Nothing in Visual Basic) to use the IComparable implementation of each element. Returns Type Description Int32 The index of the specified value in the specified array, if value is found. If value is not found and value is less than one or more elements in array, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of (the index of the last element plus 1). Exceptions Type Condition InvalidOperationException comparer is null reference (Nothing in Visual Basic), value does not implement the IComparable interface, and the search encounters an element that does not implement the IComparable interface. | Improve this Doc View Source BinarySearch(Array, Object, IComparer) Searches an entire one-dimensional sorted Array for a value using the specified IComparer interface. Declaration public static int BinarySearch(Array array, object value, IComparer comparer) Parameters Type Name Description Array array The sorted one-dimensional Array to search. Object value The object to search for. IComparer comparer The IComparer implementation to use when comparing elements. -or- nullNothingnullptrunit a null reference(Nothing in Visual Basic) to use the IComparable implementation of each element. Returns Type Description Int32 The index of the specified value in the specified array, if value is found. If value is not found and value is less than one or more elements in array, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of (the index of the last element plus 1). Clear(Array, Int32, Int32) Sets a range of elements in the Array to zero, to false, or to null reference (Nothing in Visual Basic), depending on the element type. Declaration public static void Clear(Array array, int index, int length) Parameters Type Name Description Array array The Array whose elements need to be cleared. Int32 index The starting index of the range of elements to clear. Int32 length The number of elements to clear. | Improve this Doc View Source Clone() Creates a shallow copy of the Array . Declaration public object Clone() Returns Type Description Object A shallow copy of the Array . Remarks Available only in mscorlib build with support for System.Reflection. | Improve this Doc View Source Copy(Array, Array, Int32) Copies a range of elements from an Array starting at the first element and pastes them into another Array starting at the first element. The length is specified as a 32-bit integer. Declaration public static void Copy(Array sourceArray, Array destinationArray, int length) Parameters Type Name Description Array sourceArray The Array that contains the data to copy. Array destinationArray The Array that receives the data. Int32 length A 32-bit integer that represents the number of elements to copy. Copy(Array, Int32, Array, Int32, Int32) Copies a range of elements from an Array starting at the specified source index and pastes them to another Array starting at the specified destination index. The length and the indexes are specified as 32-bit integers. Declaration public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length) Parameters Type Name Description Array sourceArray The Array that contains the data to copy. Int32 sourceIndex A 32-bit integer that represents the index in the sourceArray at which copying begins. Array destinationArray The Array that receives the data. Int32 destinationIndex A 32-bit integer that represents the index in the destinationArray at which storing begins. Int32 length A 32-bit integer that represents the number of elements to copy. | Improve this Doc View Source CopyTo(Array, Int32) Copies all the elements of the current one-dimensional Array to the specified one-dimensional Array starting at the specified destination Array index. The index is specified as a 32-bit integer. Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from the current Array. Int32 index A 32-bit integer that represents the index in array at which copying begins. CreateInstance(Type, Int32) Creates a one-dimensional Array of the specified Type and length, with zero-based indexing. Declaration public static Array CreateInstance(Type elementType, int length) Parameters Type Name Description Type elementType The Type of the Array to create. Int32 length The size of the Array to create. Returns Type Description Array A new one-dimensional Array of the specified Type with the specified length, using zero-based indexing. Remarks Unlike most classes, Array provides the CreateInstance method, instead of public constructors, to allow for late bound access. Reference-type elements are initialized to nullNothingnullptrunit a null reference(Nothing in Visual Basic). Value-type elements are initialized to zero. This method is an O(n) operation, where n is length. Available only in mscorlib build with support for System.Reflection. | Improve this Doc View Source GetEnumerator() Returns an IEnumerator for the Array. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator for the Array. | Improve this Doc View Source GetValue(Int32) Gets the value at the specified position in the one-dimensional Array. The index is specified as a 32-bit integer. Declaration public object GetValue(int index) Parameters Type Name Description Int32 index A 32-bit integer that represents the position of the Array element to get. Returns Type Description Object The value at the specified position in the one-dimensional Array. | Improve this Doc View Source IndexOf(Array, Object) Searches for the specified object and returns the index of the first occurrence within the entire one-dimensional Array. Declaration public static int IndexOf(Array array, object value) Parameters Type Name Description Array array The one-dimensional Array to search. Object value The object to locate in array. Returns Type Description Int32 The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array minus 1. | Improve this Doc View Source IndexOf(Array, Object, Int32) Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional Array that extends from the specified index to the last element. Declaration public static int IndexOf(Array array, object value, int startIndex) Parameters Type Name Description Array array The one-dimensional Array to search. Object value The object to locate in array. Int32 startIndex The starting index of the search. 0 (zero) is valid in an empty array. Returns Type Description Int32 The index of the first occurrence of value within the range of elements in array that extends from startIndex to the last element, if found; otherwise, the lower bound of the array minus 1. | Improve this Doc View Source IndexOf(Array, Object, Int32, Int32) Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional Array that starts at the specified index and contains the specified number of elements. Declaration public static int IndexOf(Array array, object value, int startIndex, int count) Parameters Type Name Description Array array The one-dimensional Array to search. Object value The object to locate in array. Int32 startIndex The starting index of the search. 0 (zero) is valid in an empty array. Int32 count The number of elements in the section to search. Returns Type Description Int32 The index of the first occurrence of value within the range of elements in array that starts at startIndex and contains the number of elements specified in count, if found; otherwise, the lower bound of the array minus 1. Explicit Interface Implementations | Improve this Doc View Source ICollection.Count Declaration int ICollection.Count { get; } Returns Type Description Int32 | Improve this Doc View Source IList.Add(Object) Declaration int IList.Add(object value) Parameters Type Name Description Object value Returns Type Description Int32 | Improve this Doc View Source IList.Clear() Declaration void IList.Clear() | Improve this Doc View Source IList.Contains(Object) Declaration bool IList.Contains(object value) Parameters Type Name Description Object value Returns Type Description Boolean | Improve this Doc View Source IList.IndexOf(Object) Declaration int IList.IndexOf(object value) Parameters Type Name Description Object value Returns Type Description Int32 | Improve this Doc View Source IList.Insert(Int32, Object) Declaration void IList.Insert(int index, object value) Parameters Type Name Description Int32 index Object value IList.Item[Int32] Declaration object IList.this[int index] { get; set; } Parameters Type Name Description Int32 index Returns Type Description Object | Improve this Doc View Source IList.Remove(Object) Declaration void IList.Remove(object value) Parameters Type Name Description Object value | Improve this Doc View Source IList.RemoveAt(Int32) Declaration void IList.RemoveAt(int index) Parameters Type Name Description Int32 index Implements ICloneable IList ICollection IEnumerable"
  },
  "api/System.AsyncCallback.html": {
    "href": "api/System.AsyncCallback.html",
    "title": "Delegate AsyncCallback | nanoFramework Documentation",
    "keywords": "Delegate AsyncCallback References a method to be called when a corresponding asynchronous operation completes. Namespace : System Assembly : mscorlib.dll Syntax public delegate void AsyncCallback(IAsyncResult ar); Parameters Type Name Description IAsyncResult ar The result of the asynchronous operation."
  },
  "api/System.Attribute.html": {
    "href": "api/System.Attribute.html",
    "title": "Class Attribute | nanoFramework Documentation",
    "keywords": "Class Attribute Represents the base class for custom attributes. Inheritance Object Attribute AttributeUsageAttribute CLSCompliantAttribute EditorBrowsableAttribute ConditionalAttribute DebuggableAttribute DebuggerBrowsableAttribute DebuggerDisplayAttribute DebuggerHiddenAttribute DebuggerNonUserCodeAttribute DebuggerStepperBoundaryAttribute DebuggerStepThroughAttribute DebuggerTypeProxyAttribute FlagsAttribute MTAThreadAttribute NonSerializedAttribute ObsoleteAttribute ParamArrayAttribute AssemblyCompanyAttribute AssemblyConfigurationAttribute AssemblyCopyrightAttribute AssemblyCultureAttribute AssemblyDefaultAliasAttribute AssemblyDelaySignAttribute AssemblyDescriptionAttribute AssemblyFileVersionAttribute AssemblyFlagsAttribute AssemblyInformationalVersionAttribute AssemblyKeyFileAttribute AssemblyKeyNameAttribute AssemblyNativeVersionAttribute AssemblyProductAttribute AssemblyTitleAttribute AssemblyTrademarkAttribute AssemblyVersionAttribute DefaultMemberAttribute AccessedThroughPropertyAttribute ExtensionAttribute IndexerNameAttribute InternalsVisibleToAttribute MethodImplAttribute ComVisibleAttribute GuidAttribute OutAttribute StructLayoutAttribute TargetFrameworkAttribute SerializableAttribute STAThreadAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Parameter | AttributeTargets.Delegate | AttributeTargets.ReturnValue | AttributeTargets.All)] public abstract class Attribute Constructors | Improve this Doc View Source Attribute() Initializes a new instance of the Attribute class. Declaration protected Attribute()"
  },
  "api/System.AttributeTargets.html": {
    "href": "api/System.AttributeTargets.html",
    "title": "Enum AttributeTargets | nanoFramework Documentation",
    "keywords": "Enum AttributeTargets Specifies the application elements on which it is valid to apply an attribute. Namespace : System Assembly : mscorlib.dll Syntax public enum AttributeTargets Fields Name Description All Attribute can be applied to any application element. Assembly Attribute can be applied to an assembly. Class Attribute can be applied to a class. Constructor Attribute can be applied to a constructor. Delegate Attribute can be applied to a delegate. Enum Attribute can be applied to an enumeration. Event Attribute can be applied to an event. Field Attribute can be applied to a field. Interface Attribute can be applied to an interface. Method Attribute can be applied to a method. Module Attribute can be applied to a module. Parameter Attribute can be applied to a parameter. Property Attribute can be applied to a property. ReturnValue Attribute can be applied to a return value. Struct Attribute can be applied to a structure; that is, a value type."
  },
  "api/System.AttributeUsageAttribute.html": {
    "href": "api/System.AttributeUsageAttribute.html",
    "title": "Class AttributeUsageAttribute | nanoFramework Documentation",
    "keywords": "Class AttributeUsageAttribute Specifies the usage of another attribute class. This class cannot be inherited. Inheritance Object Attribute AttributeUsageAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class AttributeUsageAttribute : Attribute Constructors | Improve this Doc View Source AttributeUsageAttribute(AttributeTargets) Initializes a new instance of the AttributeUsageAttribute class with the specified list of AttributeTargets, the AllowMultiple value, and the Inherited value. Declaration public AttributeUsageAttribute(AttributeTargets validOn) Parameters Type Name Description AttributeTargets validOn The set of values combined using a bitwise OR operation to indicate which program elements are valid. Properties | Improve this Doc View Source AllowMultiple Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element. Declaration public bool AllowMultiple { get; set; } Property Value Type Description Boolean true if more than one instance is allowed to be specified; otherwise, false. The default is false. | Improve this Doc View Source Inherited Gets or sets a Boolean value that determines whether the indicated attribute is inherited by derived classes and overriding members. Declaration public bool Inherited { get; set; } Property Value Type Description Boolean true if the attribute can be inherited by derived classes and overriding members; otherwise, false. The default is true. | Improve this Doc View Source ValidOn Gets a set of values identifying which program elements that the indicated attribute can be applied to. Declaration public AttributeTargets ValidOn { get; } Property Value Type Description AttributeTargets One or several AttributeTargets values. The default is All."
  },
  "api/System.Base64FormattingOptions.html": {
    "href": "api/System.Base64FormattingOptions.html",
    "title": "Enum Base64FormattingOptions | nanoFramework Documentation",
    "keywords": "Enum Base64FormattingOptions Specifies whether relevant Convert.ToBase64CharArray and Convert.ToBase64String methods insert line breaks in their output. Namespace : System Assembly : mscorlib.dll Syntax public enum Base64FormattingOptions Fields Name Description InsertLineBreaks Inserts line breaks after every 76 characters in the string representation. None Does not insert line breaks after every 76 characters in the string representation."
  },
  "api/System.BitConverter.html": {
    "href": "api/System.BitConverter.html",
    "title": "Class BitConverter | nanoFramework Documentation",
    "keywords": "Class BitConverter Converts base data types to an array of bytes, and an array of bytes to base data types. Inheritance Object BitConverter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public static class BitConverter Properties IsLittleEndian Indicates the byte order (\"endianess\") in which data is stored in this computer architecture. Declaration public static bool IsLittleEndian { get; } Property Value Type Description Boolean Methods DoubleToInt64Bits(Double) Converts the specified double-precision floating point number to a 64-bit signed integer. Declaration public static long DoubleToInt64Bits(double value) Parameters Type Name Description Double value The number to convert. Returns Type Description Int64 GetBytes(Boolean) Returns the specified Boolean value as an array of bytes. Declaration public static byte[] GetBytes(bool value) Parameters Type Name Description Boolean value A Boolean value. Returns Type Description Byte [] An array of bytes with length 1. GetBytes(Char) Returns the specified Unicode character value as an array of bytes. Declaration public static byte[] GetBytes(char value) Parameters Type Name Description Char value A character to convert. Returns Type Description Byte [] An array of bytes with length 2. GetBytes(Double) Returns the specified double-precision floating point value as an array of bytes. Declaration public static byte[] GetBytes(double value) Parameters Type Name Description Double value The number to convert. Returns Type Description Byte [] An array of bytes with length 8. GetBytes(Int16) Returns the specified 16-bit signed integer value as an array of bytes. Declaration public static byte[] GetBytes(short value) Parameters Type Name Description Int16 value The number to convert. Returns Type Description Byte [] An array of bytes with length 2. GetBytes(Int32) Returns the specified 32-bit signed integer value as an array of bytes. Declaration public static byte[] GetBytes(int value) Parameters Type Name Description Int32 value The number to convert. Returns Type Description Byte [] An array of bytes with length 4. GetBytes(Int64) Returns the specified 64-bit signed integer value as an array of bytes. Declaration public static byte[] GetBytes(long value) Parameters Type Name Description Int64 value The number to convert. Returns Type Description Byte [] An array of bytes with length 8. GetBytes(Single) Returns the specified single-precision floating point value as an array of bytes. Declaration public static byte[] GetBytes(float value) Parameters Type Name Description Single value The number to convert. Returns Type Description Byte [] An array of bytes with length 4. GetBytes(UInt16) Returns the specified 16-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(ushort value) Parameters Type Name Description UInt16 value The number to convert. Returns Type Description Byte [] An array of bytes with length 2. GetBytes(UInt32) Returns the specified 32-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(uint value) Parameters Type Name Description UInt32 value The number to convert. Returns Type Description Byte [] An array of bytes with length 4. GetBytes(UInt64) Returns the specified 64-bit unsigned integer value as an array of bytes. Declaration public static byte[] GetBytes(ulong value) Parameters Type Name Description UInt64 value The number to convert. Returns Type Description Byte [] An array of bytes with length 8. Int64BitsToDouble(Int64) Converts the specified 64-bit signed integer to a double-precision floating point number. Declaration public static double Int64BitsToDouble(long value) Parameters Type Name Description Int64 value The number to convert. Returns Type Description Double A double-precision floating point number whose value is equivalent to value. ToBoolean(Byte[], Int32) Returns a Boolean value converted from one byte at a specified position in a byte array. Declaration public static bool ToBoolean(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Boolean true if the byte at startIndex in value is nonzero; otherwise, false. ToChar(Byte[], Int32) Returns a Unicode character converted from two bytes at a specified position in a byte array. Declaration public static char ToChar(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Char A character formed by two bytes beginning at startIndex. ToDouble(Byte[], Int32) Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array. Declaration public static double ToDouble(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Double A double precision floating point number formed by eight bytes beginning at startIndex. ToInt16(Byte[], Int32) Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array. Declaration public static short ToInt16(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Int16 A 16-bit signed integer formed by two bytes beginning at startIndex. ToInt32(Byte[], Int32) Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array. Declaration public static int ToInt32(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Int32 A 32-bit signed integer formed by four bytes beginning at startIndex. ToInt64(Byte[], Int32) Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array. Declaration public static long ToInt64(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Int64 A 64-bit signed integer formed by eight bytes beginning at startIndex. ToSingle(Byte[], Int32) Returns a single-precision floating point number converted from four bytes at a specified position in a byte array. Declaration public static float ToSingle(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Single A single-precision floating point number formed by four bytes beginning at startIndex. ToString(Byte[]) Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation. Declaration public static string ToString(byte[] value) Parameters Type Name Description Byte [] value An array of bytes. Returns Type Description String A String of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in value; for example, \"7F-2C-4A\". ToString(Byte[], Int32) Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation. Declaration public static string ToString(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description String A String of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of value; for example, \"7F-2C-4A\". ToString(Byte[], Int32, Int32) Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation. Declaration public static string ToString(byte[] value, int startIndex, int length) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Int32 length The number of array elements in value to convert. Returns Type Description String A String of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of value; for example, \"7F-2C-4A\". ToUInt16(Byte[], Int32) Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array. Declaration [CLSCompliant(false)] public static ushort ToUInt16(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description UInt16 A 16-bit unsigned integer formed by two bytes beginning at startIndex. ToUInt32(Byte[], Int32) Returns a 32-bit unsigned integer converted from two bytes at a specified position in a byte array. Declaration [CLSCompliant(false)] public static uint ToUInt32(byte[] value, int startIndex) Parameters Type Name Description Byte [] value The array of bytes. Int32 startIndex The starting position within value. Returns Type Description UInt32 A 32-bit unsigned integer formed by two bytes beginning at startIndex. ToUInt64(Byte[], Int32) Returns a 64-bit unsigned integer converted from two bytes at a specified position in a byte array. Declaration [CLSCompliant(false)] public static ulong ToUInt64(byte[] value, int startIndex) Parameters Type Name Description Byte [] value The array of bytes. Int32 startIndex The starting position within value. Returns Type Description UInt64 A 64-bit unsigned integer formed by two bytes beginning at startIndex."
  },
  "api/System.Boolean.html": {
    "href": "api/System.Boolean.html",
    "title": "Struct Boolean | nanoFramework Documentation",
    "keywords": "Struct Boolean Represents a Boolean value. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Boolean Fields | Improve this Doc View Source FalseString Represents the Boolean value false as a string. This field is read-only. Declaration public static readonly string FalseString Field Value Type Description String | Improve this Doc View Source TrueString Represents the Boolean value true as a string. This field is read-only. Declaration public static readonly string TrueString Field Value Type Description String Methods | Improve this Doc View Source ToString() Converts the value of this instance to its equivalent string representation (either \"True\" or \"False\"). Declaration public override string ToString() Returns Type Description String TrueString if the value of this instance is true, or FalseString if the value of this instance is false. Overrides Object.ToString()"
  },
  "api/System.Byte.html": {
    "href": "api/System.Byte.html",
    "title": "Struct Byte | nanoFramework Documentation",
    "keywords": "Struct Byte Represents an 8-bit unsigned integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Byte Fields | Improve this Doc View Source MaxValue Represents the largest possible value of a Byte. This field is constant. Declaration public const byte MaxValue = 255 Field Value Type Description Byte | Improve this Doc View Source MinValue Represents the smallest possible value of a Byte. This field is constant. Declaration public const byte MinValue = 0 Field Value Type Description Byte Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its Byte equivalent. Declaration [CLSCompliant(false)] public static byte Parse(string s) Parameters Type Name Description String s A string that contains a number to convert. The string is interpreted using the Integer style. Returns Type Description Byte A byte value that is equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException s is null reference (Nothing in Visual Basic). | Improve this Doc View Source ToString() Converts the value of the current Byte object to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this object, which consists of a sequence of digits that range from 0 to 9 with no leading zeroes. Overrides Object.ToString() Remarks The return value is formatted with the general numeric format specifier (\"G\") and the NumberFormatInfo object for the thread current culture. | Improve this Doc View Source ToString(String) Converts the value of the current Byte object to its equivalent string representation using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the current Byte object, formatted as specified by the format parameter."
  },
  "api/System.Char.html": {
    "href": "api/System.Char.html",
    "title": "Struct Char | nanoFramework Documentation",
    "keywords": "Struct Char Represents a character as a UTF-16 code unit. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Char Fields | Improve this Doc View Source MaxValue Represents the largest possible value of a Char. This field is constant. Declaration public const char MaxValue = '\\uffff' Field Value Type Description Char | Improve this Doc View Source MinValue Represents the smallest possible value of a Char. This field is constant. Declaration public const char MinValue = '\\0' Field Value Type Description Char Methods | Improve this Doc View Source ToLower() Returns the lower case character. Declaration public char ToLower() Returns Type Description Char The lower case character. | Improve this Doc View Source ToString() Converts the value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance. Overrides Object.ToString() | Improve this Doc View Source ToUpper() Returns the upper case character. Declaration public char ToUpper() Returns Type Description Char The upper case character."
  },
  "api/System.CLSCompliantAttribute.html": {
    "href": "api/System.CLSCompliantAttribute.html",
    "title": "Class CLSCompliantAttribute | nanoFramework Documentation",
    "keywords": "Class CLSCompliantAttribute Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited. Inheritance Object Attribute CLSCompliantAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Parameter | AttributeTargets.Delegate | AttributeTargets.ReturnValue | AttributeTargets.All)] public sealed class CLSCompliantAttribute : Attribute Constructors | Improve this Doc View Source CLSCompliantAttribute(Boolean) Initializes an instance of the CLSCompliantAttribute class with a Boolean value indicating whether the indicated program element is CLS-compliant. Declaration public CLSCompliantAttribute(bool isCompliant) Parameters Type Name Description Boolean isCompliant true if CLS-compliant; otherwise, false. Properties | Improve this Doc View Source IsCompliant GGets the Boolean value indicating whether the indicated program element is CLS-compliant. Declaration public bool IsCompliant { get; } Property Value Type Description Boolean true if the program element is CLS-compliant; otherwise, false."
  },
  "api/System.Collections.ArrayList.html": {
    "href": "api/System.Collections.ArrayList.html",
    "title": "Class ArrayList | nanoFramework Documentation",
    "keywords": "Class ArrayList Implements the IList interface using an array whose size is dynamically increased as required. Inheritance Object ArrayList Implements IList ICollection IEnumerable ICloneable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections Assembly : mscorlib.dll Syntax public class ArrayList : IList, ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source ArrayList() Initializes a new instance of the ArrayList class that is empty and has the default initial capacity. Declaration public ArrayList() Properties | Improve this Doc View Source Capacity Gets or sets the number of elements that the ArrayList can contain. Declaration public virtual int Capacity { get; set; } Property Value Type Description Int32 The number of elements that the ArrayList can contain. | Improve this Doc View Source Count Gets the number of elements actually contained in the ArrayList . Declaration public virtual int Count { get; } Property Value Type Description Int32 The number of elements actually contained in the ArrayList . | Improve this Doc View Source IsFixedSize Gets a value indicating whether the ArrayList has a fixed size. Declaration public virtual bool IsFixedSize { get; } Property Value Type Description Boolean true if the ArrayList has a fixed size; otherwise, false. The default is false. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the ArrayList is read-only. Declaration public virtual bool IsReadOnly { get; } Property Value Type Description Boolean true if the ArrayList is read-only; otherwise, false. The default is false. | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the ArrayList is synchronized (thread safe). Declaration public virtual bool IsSynchronized { get; } Property Value Type Description Boolean true if access to the ArrayList is synchronized (thread safe); otherwise, false. The default is false. Item[Int32] Gets or sets the element at the specified index. Declaration public virtual object this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description Object | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the ArrayList . Declaration public virtual object SyncRoot { get; } Property Value Type Description Object An object that can be used to synchronize access to the ArrayList . Methods Add(Object) Adds an object to the end of the ArrayList . Declaration public virtual int Add(object value) Parameters Type Name Description Object value Returns Type Description Int32 The Object to be added to the end of the ArrayList . The value can be null . | Improve this Doc View Source BinarySearch(Object, IComparer) Searches the entire sorted ArrayList for an element using the specified comparer and returns the zero-based index of the element. Declaration public virtual int BinarySearch(object value, IComparer comparer) Parameters Type Name Description Object value The Object to locate. The value can be null reference (Nothing in Visual Basic). IComparer comparer The IComparer implementation to use when comparing elements. -or- nullNothingnullptrunit a null reference(Nothing in Visual Basic) to use the IComparable implementation of each element. Returns Type Description Int32 The zero-based index of value in the sorted ArrayList , if value is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than value or, if there is no larger element, the bitwise complement of Count. Clear() Removes all elements from the ArrayList . Declaration public virtual void Clear() | Improve this Doc View Source Clone() Creates a shallow copy of the ArrayList . Declaration public virtual object Clone() Returns Type Description Object A shallow copy of the ArrayList . | Improve this Doc View Source Contains(Object) Determines whether an element is in the ArrayList . Declaration public virtual bool Contains(object value) Parameters Type Name Description Object value Returns Type Description Boolean The Object to locate in the ArrayList .The value can be null . | Improve this Doc View Source CopyTo(Array) Copies the entire ArrayList to a compatible one-dimensional Array, starting at the beginning of the target array. Declaration public virtual void CopyTo(Array array) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ArrayList . The Array must have zero-based indexing. | Improve this Doc View Source CopyTo(Array, Int32) Copies the entire ArrayList to a compatible one-dimensional Array, starting at the specified index of the target array. Declaration public virtual void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ArrayList . The Array must have zero-based indexing. Int32 index The zero-based index in array at which copying begins. | Improve this Doc View Source GetEnumerator() Returns an enumerator for the entire ArrayList . Declaration public virtual IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator for the entire ArrayList . | Improve this Doc View Source IndexOf(Object) Searches for the specified Object and returns the zero-based index of the first occurrence within the entire ArrayList . Declaration public virtual int IndexOf(object value) Parameters Type Name Description Object value The Object to locate in the ArrayList . The value can be null reference (Nothing in Visual Basic). Returns Type Description Int32 The zero-based index of the first occurrence of value within the entire ArrayList , if found; otherwise, -1. | Improve this Doc View Source IndexOf(Object, Int32) Searches for the specified Object and returns the zero-based index of the first occurrence within the range of elements in the ArrayList that extends from the specified index to the last element. Declaration public virtual int IndexOf(object value, int startIndex) Parameters Type Name Description Object value The Object to locate in the ArrayList . The value can be null reference (Nothing in Visual Basic). Int32 startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description Int32 The zero-based index of the first occurrence of value within the range of elements in the ArrayList that extends from startIndex to the last element, if found; otherwise, -1. | Improve this Doc View Source IndexOf(Object, Int32, Int32) Searches for the specified Object and returns the zero-based index of the first occurrence within the range of elements in the ArrayList that starts at the specified index and contains the specified number of elements. Declaration public virtual int IndexOf(object value, int startIndex, int count) Parameters Type Name Description Object value The Object to locate in the ArrayList . The value can be null reference (Nothing in Visual Basic). Int32 startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty list. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the first occurrence of value within the range of elements in the ArrayList that starts at startIndex and contains count number of elements, if found; otherwise, -1. Insert(Int32, Object) Inserts an element into the ArrayList at the specified index. Declaration public virtual void Insert(int index, object value) Parameters Type Name Description Int32 index The zero-based index at which value should be inserted. Object value The Object to insert. The value can be null . | Improve this Doc View Source Remove(Object) Removes the first occurrence of a specific object from the ArrayList . Declaration public virtual void Remove(object value) Parameters Type Name Description Object value The Object to remove from the ArrayList . The value can be null . RemoveAt(Int32) Removes the element at the specified index of the ArrayList . Declaration public virtual void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. | Improve this Doc View Source ToArray() Copies the elements of the ArrayList to a new Object array. Declaration public virtual object[] ToArray() Returns Type Description Object [] An Object array containing copies of the elements of the ArrayList . Remarks Available only in mscorlib build with support for System.Reflection. | Improve this Doc View Source ToArray(Type) Copies the elements of the ArrayList to a new array of the specified element type. Declaration public virtual Array ToArray(Type type) Parameters Type Name Description Type type The element Type of the destination array to create and copy elements to. Returns Type Description Array An array of the specified element type containing copies of the elements of the ArrayList . Implements IList ICollection IEnumerable ICloneable"
  },
  "api/System.Collections.DictionaryEntry.html": {
    "href": "api/System.Collections.DictionaryEntry.html",
    "title": "Class DictionaryEntry | nanoFramework Documentation",
    "keywords": "Class DictionaryEntry Defines a dictionary key/value pair that can be set or retrieved. Inheritance Object DictionaryEntry Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections Assembly : nanoFramework.System.Collections.dll Syntax public class DictionaryEntry Constructors | Improve this Doc View Source DictionaryEntry(Object, Object) Initializes an instance of the DictionaryEntry type with the specified key and value. Declaration public DictionaryEntry(object key, object value) Parameters Type Name Description Object key The object defined in each key/value pair. Object value The definition associated with key. Fields | Improve this Doc View Source Key Gets or sets the key in the key/value pair. Declaration public object Key Field Value Type Description Object The key in the key/value pair. | Improve this Doc View Source Value Gets or sets the value in the key/value pair. Declaration public object Value Field Value Type Description Object The value in the key/value pair."
  },
  "api/System.Collections.Hashtable.html": {
    "href": "api/System.Collections.Hashtable.html",
    "title": "Class Hashtable | nanoFramework Documentation",
    "keywords": "Class Hashtable HashTable is an Associative Container. Created in March 2010. by Eric Harlow. Inheritance Object Hashtable Implements ICloneable IDictionary ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections Assembly : nanoFramework.System.Collections.dll Syntax public class Hashtable : ICloneable, IDictionary, ICollection, IEnumerable Constructors | Improve this Doc View Source Hashtable() Initializes a new, empty instance of the Hashtable class using the default initial capacity and load factor. Declaration public Hashtable() | Improve this Doc View Source Hashtable(Int32) Initializes a new, empty instance of the Hashtable class using the specified initial capacity, and the default load factor. Declaration public Hashtable(int capacity) Parameters Type Name Description Int32 capacity The initial capacity of the HashTable | Improve this Doc View Source Hashtable(Int32, Int32) Initializes a new, empty instance of the Hashtable class using the specified initial capacity, load factor. Declaration public Hashtable(int capacity, int maxLoadFactor) Parameters Type Name Description Int32 capacity The initial capacity of the HashTable Int32 maxLoadFactor The load factor to cause a rehash Properties | Improve this Doc View Source Count Gets the number of elements contained in the ICollection. Declaration public int Count { get; } Property Value Type Description Int32 The number of elements contained in the ICollection. | Improve this Doc View Source GrowthFactor GrowthFactor Property is a multiplier to increase the HashTable size by during a rehash. Default value is 2. Declaration public double GrowthFactor { get; set; } Property Value Type Description Double | Improve this Doc View Source IsFixedSize Gets a value indicating whether the IDictionary object has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description Boolean true if the IDictionary object has a fixed size; otherwise, false. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the IDictionary object is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean true if the IDictionary object is read-only; otherwise, false. | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean true if access to the ICollection is synchronized (thread safe); otherwise, false. | Improve this Doc View Source Item[Object] Gets or sets the element with the specified key. Declaration public object this[object key] { get; set; } Parameters Type Name Description Object key The key of the element to get or set. Property Value Type Description Object The element with the specified key, or null if the key does not exist. | Improve this Doc View Source Keys Gets an ICollection object containing the keys of the IDictionary object. Declaration public ICollection Keys { get; } Property Value Type Description ICollection An ICollection object containing the keys of the IDictionary object. | Improve this Doc View Source MaxLoadFactor MaxLoadFactor Property is the value used to trigger a rehash. Default value is 2. A higher number can decrease lookup performance for large collections. While a value of 1 maintains a constant time complexity at the cost of increased memory requirements. Declaration public int MaxLoadFactor { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public object SyncRoot { get; } Property Value Type Description Object An object that can be used to synchronize access to the ICollection. | Improve this Doc View Source Values Gets an ICollection object containing the values in the IDictionary object. Declaration public ICollection Values { get; } Property Value Type Description ICollection An ICollection object containing the values in the IDictionary object. Methods | Improve this Doc View Source Add(Object, Object) Adds an element with the provided key and value to the IDictionary object. Declaration public void Add(object key, object value) Parameters Type Name Description Object key The Object to use as the key of the element to add. Object value The Object to use as the value of the element to add. | Improve this Doc View Source Clear() Removes all elements from the IDictionary object. Declaration public void Clear() | Improve this Doc View Source Clone() Make a new object which is a copy of the object instanced. Declaration public object Clone() Returns Type Description Object A new object that represents a clone of the object. | Improve this Doc View Source Contains(Object) Determines whether the IDictionary object contains an element with the specified key. Declaration public bool Contains(object key) Parameters Type Name Description Object key The key to locate in the IDictionary object. Returns Type Description Boolean true if the IDictionary contains an element with the key; otherwise, false. | Improve this Doc View Source CopyTo(Array, Int32) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. Int32 index The zero-based index in array at which copying begins. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. | Improve this Doc View Source Remove(Object) Removes the element with the specified key from the IDictionary object. Declaration public void Remove(object key) Parameters Type Name Description Object key The key of the element to remove. Implements ICloneable IDictionary ICollection IEnumerable"
  },
  "api/System.Collections.html": {
    "href": "api/System.Collections.html",
    "title": "Namespace System.Collections | nanoFramework Documentation",
    "keywords": "Namespace System.Collections Classes ArrayList Implements the IList interface using an array whose size is dynamically increased as required. DictionaryEntry Defines a dictionary key/value pair that can be set or retrieved. Hashtable HashTable is an Associative Container. Created in March 2010. by Eric Harlow. Queue A circular-array implementation of a queue. Enqueue can be O(n). Dequeue is O(1). Stack An array implementation of a stack. Push can be O(n). Pop is O(1). Interfaces ICollection Defines size, enumerators, and synchronization methods for all nongeneric collections. IComparer Exposes a method that compares two objects. IDictionary Represents a nongeneric collection of key/value pairs. IEnumerable Exposes an enumerator, which supports a simple iteration over a non-generic collection. IEnumerator Supports a simple iteration over a non-generic collection. IEqualityComparer Defines methods to support the comparison of objects for equality. IList Represents a non-generic collection of objects that can be individually accessed by index."
  },
  "api/System.Collections.ICollection.html": {
    "href": "api/System.Collections.ICollection.html",
    "title": "Interface ICollection | nanoFramework Documentation",
    "keywords": "Interface ICollection Defines size, enumerators, and synchronization methods for all nongeneric collections. Inherited Members IEnumerable.GetEnumerator() Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface ICollection : IEnumerable Properties | Improve this Doc View Source Count Gets the number of elements contained in the ICollection. Declaration int Count { get; } Property Value Type Description Int32 The number of elements contained in the ICollection. | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration bool IsSynchronized { get; } Property Value Type Description Boolean true if access to the ICollection is synchronized (thread safe); otherwise, false. | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration object SyncRoot { get; } Property Value Type Description Object An object that can be used to synchronize access to the ICollection. Methods | Improve this Doc View Source CopyTo(Array, Int32) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. Int32 index The zero-based index in array at which copying begins."
  },
  "api/System.Collections.IComparer.html": {
    "href": "api/System.Collections.IComparer.html",
    "title": "Interface IComparer | nanoFramework Documentation",
    "keywords": "Interface IComparer Exposes a method that compares two objects. Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface IComparer Methods | Improve this Doc View Source Compare(Object, Object) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration int Compare(object x, object y) Parameters Type Name Description Object x The first object to compare. Object y The second object to compare. Returns Type Description Int32 A signed integer that indicates the relative values of x and y, as shown in the following table. Less than zero : x is less than y. Zero : x equals y. Greater than zero : x is greater than y."
  },
  "api/System.Collections.IDictionary.html": {
    "href": "api/System.Collections.IDictionary.html",
    "title": "Interface IDictionary | nanoFramework Documentation",
    "keywords": "Interface IDictionary Represents a nongeneric collection of key/value pairs. Inherited Members ICollection.CopyTo(Array, Int32) ICollection.Count ICollection.SyncRoot ICollection.IsSynchronized IEnumerable.GetEnumerator() Namespace : System.Collections Assembly : nanoFramework.System.Collections.dll Syntax public interface IDictionary : ICollection, IEnumerable Properties | Improve this Doc View Source IsFixedSize Gets a value indicating whether the IDictionary object has a fixed size. Declaration bool IsFixedSize { get; } Property Value Type Description Boolean true if the IDictionary object has a fixed size; otherwise, false. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the IDictionary object is read-only. Declaration bool IsReadOnly { get; } Property Value Type Description Boolean true if the IDictionary object is read-only; otherwise, false. | Improve this Doc View Source Item[Object] Gets or sets the element with the specified key. Declaration object this[object key] { get; set; } Parameters Type Name Description Object key The key of the element to get or set. Property Value Type Description Object The element with the specified key, or null if the key does not exist. | Improve this Doc View Source Keys Gets an ICollection object containing the keys of the IDictionary object. Declaration ICollection Keys { get; } Property Value Type Description ICollection An ICollection object containing the keys of the IDictionary object. | Improve this Doc View Source Values Gets an ICollection object containing the values in the IDictionary object. Declaration ICollection Values { get; } Property Value Type Description ICollection An ICollection object containing the values in the IDictionary object. Methods | Improve this Doc View Source Add(Object, Object) Adds an element with the provided key and value to the IDictionary object. Declaration void Add(object key, object value) Parameters Type Name Description Object key The Object to use as the key of the element to add. Object value The Object to use as the value of the element to add. | Improve this Doc View Source Clear() Removes all elements from the IDictionary object. Declaration void Clear() | Improve this Doc View Source Contains(Object) Determines whether the IDictionary object contains an element with the specified key. Declaration bool Contains(object key) Parameters Type Name Description Object key The key to locate in the IDictionary object. Returns Type Description Boolean true if the IDictionary contains an element with the key; otherwise, false. | Improve this Doc View Source Remove(Object) Removes the element with the specified key from the IDictionary object. Declaration void Remove(object key) Parameters Type Name Description Object key The key of the element to remove."
  },
  "api/System.Collections.IEnumerable.html": {
    "href": "api/System.Collections.IEnumerable.html",
    "title": "Interface IEnumerable | nanoFramework Documentation",
    "keywords": "Interface IEnumerable Exposes an enumerator, which supports a simple iteration over a non-generic collection. Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface IEnumerable Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection."
  },
  "api/System.Collections.IEnumerator.html": {
    "href": "api/System.Collections.IEnumerator.html",
    "title": "Interface IEnumerator | nanoFramework Documentation",
    "keywords": "Interface IEnumerator Supports a simple iteration over a non-generic collection. Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface IEnumerator Properties | Improve this Doc View Source Current Gets the element in the collection at the current position of the enumerator. Declaration object Current { get; } Property Value Type Description Object The element in the collection at the current position of the enumerator. Methods | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the collection. Declaration bool MoveNext() Returns Type Description Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. | Improve this Doc View Source Reset() Sets the enumerator to its initial position, which is before the first element in the collection. Declaration void Reset()"
  },
  "api/System.Collections.IEqualityComparer.html": {
    "href": "api/System.Collections.IEqualityComparer.html",
    "title": "Interface IEqualityComparer | nanoFramework Documentation",
    "keywords": "Interface IEqualityComparer Defines methods to support the comparison of objects for equality. Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface IEqualityComparer Methods | Improve this Doc View Source Equals(Object, Object) Determines whether the specified objects are equal. Declaration bool Equals(object x, object y) Parameters Type Name Description Object x The first object to compare. Object y The second object to compare. Returns Type Description Boolean true if the specified objects are equal; otherwise, false. | Improve this Doc View Source GetHashCode(Object) Returns a hash code for the specified object. Declaration int GetHashCode(object obj) Parameters Type Name Description Object obj The Object for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified object."
  },
  "api/System.Collections.IList.html": {
    "href": "api/System.Collections.IList.html",
    "title": "Interface IList | nanoFramework Documentation",
    "keywords": "Interface IList Represents a non-generic collection of objects that can be individually accessed by index. Inherited Members ICollection.CopyTo(Array, Int32) ICollection.Count ICollection.SyncRoot ICollection.IsSynchronized IEnumerable.GetEnumerator() Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface IList : ICollection, IEnumerable Properties | Improve this Doc View Source IsFixedSize Gets a value indicating whether the IList has a fixed size. Declaration bool IsFixedSize { get; } Property Value Type Description Boolean true if the IList has a fixed size; otherwise, false. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the IList is read-only. Declaration bool IsReadOnly { get; } Property Value Type Description Boolean true if the IList is read-only; otherwise, false. | Improve this Doc View Source Item[Int32] Gets or sets the element at the specified index. Declaration object this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description Object The element at the specified index. Methods | Improve this Doc View Source Add(Object) Adds an item to the IList. Declaration int Add(object value) Parameters Type Name Description Object value The object to add to the IList. Returns Type Description Int32 The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection. | Improve this Doc View Source Clear() Removes all items from the IList. Declaration void Clear() | Improve this Doc View Source Contains(Object) Determines whether the IList contains a specific value. Declaration bool Contains(object value) Parameters Type Name Description Object value The object to locate in the IList. Returns Type Description Boolean true if the Object is found in the IList; otherwise, false. | Improve this Doc View Source IndexOf(Object) Determines the index of a specific item in the IList. Declaration int IndexOf(object value) Parameters Type Name Description Object value The object to locate in the IList. Returns Type Description Int32 The index of value if found in the list; otherwise, -1. | Improve this Doc View Source Insert(Int32, Object) Inserts an item to the IList at the specified index. Declaration void Insert(int index, object value) Parameters Type Name Description Int32 index The zero-based index at which value should be inserted. Object value The object to insert into the IList. | Improve this Doc View Source Remove(Object) Removes the first occurrence of a specific object from the IList. Declaration void Remove(object value) Parameters Type Name Description Object value The object to remove from the IList. | Improve this Doc View Source RemoveAt(Int32) Removes the IList item at the specified index. Declaration void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the item to remove."
  },
  "api/System.Collections.Queue.html": {
    "href": "api/System.Collections.Queue.html",
    "title": "Class Queue | nanoFramework Documentation",
    "keywords": "Class Queue A circular-array implementation of a queue. Enqueue can be O(n). Dequeue is O(1). Inheritance Object Queue Implements ICollection IEnumerable ICloneable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections Assembly : nanoFramework.System.Collections.dll Syntax [Serializable] public class Queue : ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source Queue() Initializes a new instance of the Queue class that is empty, has the default initial capacity, and uses the default growth factor (2x). Declaration public Queue() Properties | Improve this Doc View Source Count Gets the number of elements contained in the Queue. Declaration public virtual int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the Queue is synchronized (thread safe). Always return false. Declaration public virtual bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the Queue. Declaration public virtual object SyncRoot { get; } Property Value Type Description Object Methods Clear() Removes all objects from the Queue. Declaration public virtual void Clear() | Improve this Doc View Source Clone() Creates a shallow copy of the Queue. Declaration public virtual object Clone() Returns Type Description Object A shallow copy of the Queue. | Improve this Doc View Source Contains(Object) Determines whether an element is in the Queue. Declaration public virtual bool Contains(object obj) Parameters Type Name Description Object obj The Object to locate in the Queue. Returns Type Description Boolean true if obj is found in the Queue; otherwise, false. CopyTo(Array, Int32) Copies the Queue elements to an existing one-dimensional Array, starting at the specified array index. Declaration public virtual void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from Queue. Int32 index The zero-based index in array at which copying begins. Dequeue() Removes and returns the object at the beginning of the Queue. Declaration public virtual object Dequeue() Returns Type Description Object The object that is removed from the beginning of the Queue. Enqueue(Object) Adds an object to the end of the Queue. Declaration public virtual void Enqueue(object obj) Parameters Type Name Description Object obj The object to add to the Queue. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the Queue. Declaration public virtual IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator for the Queue. Peek() Returns the object at the beginning of the Queue without removing it. Declaration public virtual object Peek() Returns Type Description Object The object at the beginning of the Queue. | Improve this Doc View Source ToArray() Copies the Queue elements to a new array. The order of the elements in the new array is the same as the order of the elements from the beginning of the Queue to its end. Declaration public virtual object[] ToArray() Returns Type Description Object [] A new array containing elements copied from the Queue. Implements ICollection IEnumerable ICloneable"
  },
  "api/System.Collections.Stack.html": {
    "href": "api/System.Collections.Stack.html",
    "title": "Class Stack | nanoFramework Documentation",
    "keywords": "Class Stack An array implementation of a stack. Push can be O(n). Pop is O(1). Inheritance Object Stack Implements ICollection IEnumerable ICloneable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections Assembly : nanoFramework.System.Collections.dll Syntax [Serializable] public class Stack : ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source Stack() Initializes a new instance of the Stack class that is empty and has the default initial capacity. Declaration public Stack() Properties | Improve this Doc View Source Count Size of the stack Declaration public virtual int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsSynchronized Returns whether the current stack is synchornized. Always return false. Declaration public virtual bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the Stack. Declaration public virtual object SyncRoot { get; } Property Value Type Description Object Methods Clear() Removes all Objects from the Stack. Declaration public virtual void Clear() | Improve this Doc View Source Clone() Creates a shallow copy of the Stack. Declaration public virtual object Clone() Returns Type Description Object A shallow copy of the Stack. | Improve this Doc View Source Contains(Object) Determines whether an element is in the Stack. Declaration public virtual bool Contains(object obj) Parameters Type Name Description Object obj The Object to locate in the Stack. Returns Type Description Boolean true, if obj is found in the Stack; otherwise, false | Improve this Doc View Source CopyTo(Array, Int32) Copies the Stack to an existing one-dimensional Array, starting at the specified array index. Declaration public virtual void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from Stack. Int32 index The zero-based index in array at which copying begins. | Improve this Doc View Source GetEnumerator() Returns an IEnumerator for this Stack. Declaration public virtual IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator for the Stack. Peek() Returns the object at the top of the Stack without removing it. Declaration public virtual object Peek() Returns Type Description Object The Object at the top of the Stack. Pop() Removes and returns the object at the top of the Stack. Declaration public virtual object Pop() Returns Type Description Object The Object removed from the top of the Stack. Push(Object) Inserts an object at the top of the Stack. Declaration public virtual void Push(object obj) Parameters Type Name Description Object obj The Object to push onto the Stack. | Improve this Doc View Source ToArray() Copies the Stack to a new array, in the same order Pop would return the items. Declaration public virtual object[] ToArray() Returns Type Description Object [] A new array containing copies of the elements of the Stack. Implements ICollection IEnumerable ICloneable"
  },
  "api/System.ComponentModel.EditorBrowsableAttribute.html": {
    "href": "api/System.ComponentModel.EditorBrowsableAttribute.html",
    "title": "Class EditorBrowsableAttribute | nanoFramework Documentation",
    "keywords": "Class EditorBrowsableAttribute Specifies that a property or method is viewable in an editor. This class cannot be inherited. Inheritance Object Attribute EditorBrowsableAttribute Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.ComponentModel Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)] public sealed class EditorBrowsableAttribute : Attribute Constructors | Improve this Doc View Source EditorBrowsableAttribute() Initializes a new instance of the EditorBrowsableAttribute class with State set to the default state. Declaration public EditorBrowsableAttribute() | Improve this Doc View Source EditorBrowsableAttribute(EditorBrowsableState) Initializes a new instance of the EditorBrowsableAttribute class with an EditorBrowsableState. Declaration public EditorBrowsableAttribute(EditorBrowsableState state) Parameters Type Name Description EditorBrowsableState state The EditorBrowsableState to set State to. Properties | Improve this Doc View Source State Gets the browsable state of the property or method. Declaration public EditorBrowsableState State { get; } Property Value Type Description EditorBrowsableState An EditorBrowsableState that is the browsable state of the property or method. Methods | Improve this Doc View Source Equals(Object) Returns whether the value of the given object is equal to the current EditorBrowsableAttribute. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to test the value equality of. Returns Type Description Boolean true if the value of the given object is equal to that of the current; otherwise, false. Overrides Object.Equals(Object)"
  },
  "api/System.ComponentModel.EditorBrowsableState.html": {
    "href": "api/System.ComponentModel.EditorBrowsableState.html",
    "title": "Enum EditorBrowsableState | nanoFramework Documentation",
    "keywords": "Enum EditorBrowsableState Specifies the browsable state of a property or method from within an editor. Namespace : System.ComponentModel Assembly : mscorlib.dll Syntax public enum EditorBrowsableState Fields Name Description Advanced The property or method is a feature that only advanced users should see. An editor can either show or hide such properties. Always The property or method is always browsable from within an editor. Never The property or method is never browsable from within an editor."
  },
  "api/System.ComponentModel.html": {
    "href": "api/System.ComponentModel.html",
    "title": "Namespace System.ComponentModel | nanoFramework Documentation",
    "keywords": "Namespace System.ComponentModel Classes EditorBrowsableAttribute Specifies that a property or method is viewable in an editor. This class cannot be inherited. Enums EditorBrowsableState Specifies the browsable state of a property or method from within an editor."
  },
  "api/System.Console.html": {
    "href": "api/System.Console.html",
    "title": "Class Console | nanoFramework Documentation",
    "keywords": "Class Console Represents the standard input, output, and error streams for console applications. This class cannot be inherited. Inheritance Object Console Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public static class Console Methods | Improve this Doc View Source Write(String) Writes the specified string value to the standard output stream. Declaration [Obsolete(\"This method is going to be removed in a future version. Call Debug.Write instead.\")] public static void Write(string value) Parameters Type Name Description String value The value to write. | Improve this Doc View Source WriteLine(String) Writes the specified string value, followed by the current line terminator, to the standard output stream. Declaration [Obsolete(\"This method is going to be removed in a future version. Call Debug.Write instead.\")] public static void WriteLine(string value) Parameters Type Name Description String value The value to write."
  },
  "api/System.Convert.html": {
    "href": "api/System.Convert.html",
    "title": "Class Convert | nanoFramework Documentation",
    "keywords": "Class Convert Converts a base data type to another base data type. Inheritance Object Convert Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public static class Convert Methods | Improve this Doc View Source FromBase64CharArray(Char[], Int32, Int32) Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert. Declaration public static byte[] FromBase64CharArray(char[] inArray, int offset, int length) Parameters Type Name Description Char [] inArray A Unicode character array. Int32 offset A position within inArray . Int32 length The number of elements in inArray to convert. Returns Type Description Byte [] An array of 8-bit unsigned integers equivalent to length elements at position offset in inArray . | Improve this Doc View Source FromBase64String(String) Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Declaration public static byte[] FromBase64String(string inString) Parameters Type Name Description String inString The string to convert. Returns Type Description Byte [] An array of 8-bit unsigned integers that is equivalent to inString Remarks s is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The white-space characters, and their Unicode names and hexadecimal code points, are tab(CHARACTER TABULATION, U+0009), newline(LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank(SPACE, U+0020). An arbitrary number of white-space characters can appear in s because all white-space characters are ignored. The valueless character, \"=\", is used for trailing padding. The end of s can consist of zero, one, or two padding characters. | Improve this Doc View Source ToBase64String(Byte[]) Converts an array of 8-bit unsigned integers to its equivalent String representation encoded with base 64 digits. Declaration public static string ToBase64String(byte[] inArray) Parameters Type Name Description Byte [] inArray An array of 8-bit unsigned integers. Returns Type Description String The String representation, in base 64, of the contents of inArray . | Improve this Doc View Source ToBase64String(Byte[], Base64FormattingOptions) Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value. Declaration public static string ToBase64String(byte[] inArray, Base64FormattingOptions options) Parameters Type Name Description Byte [] inArray An array of 8-bit unsigned integers. Base64FormattingOptions options InsertLineBreaks to insert a line break every 76 characters, or None to not insert line breaks. Returns Type Description String The string representation in base 64 of the elements in inArray . | Improve this Doc View Source ToBase64String(Byte[], Int32, Int32) Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert. Declaration public static string ToBase64String(byte[] inArray, int offset, int length) Parameters Type Name Description Byte [] inArray An array of 8-bit unsigned integers. Int32 offset An offset in inArray . Int32 length The number of elements of inArray to convert. Returns Type Description String The string representation in base 64 of length elements of inArray , starting at position offset . | Improve this Doc View Source ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions) Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value. Declaration public static string ToBase64String(byte[] inArray, int offset, int length, Base64FormattingOptions options) Parameters Type Name Description Byte [] inArray An array of 8-bit unsigned integers. Int32 offset An offset in inArray . Int32 length The number of elements of inArray to convert. Base64FormattingOptions options cref=\"System.InsertLineBreaks\" to insert a line break every 76 characters, or None to not insert line breaks. Returns Type Description String The string representation in base 64 of length elements of inArray , starting at position offset . | Improve this Doc View Source ToByte(String, Int32) Converts the specified string representation of a number to an equivalent 8-bit unsigned integer. Declaration public static byte ToByte(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description Byte An 8-bit unsigned integer that is equivalent to value, or zero if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToChar(UInt16) Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character. Declaration [CLSCompliant(false)] public static char ToChar(ushort value) Parameters Type Name Description UInt16 value The 16-bit unsigned integer to convert. Returns Type Description Char A Unicode character that is equivalent to value. | Improve this Doc View Source ToDouble(String) Converts the specified string representation of a number to an equivalent double-precision floating-point number. Declaration public static double ToDouble(string value) Parameters Type Name Description String value A string that contains the number to convert. Returns Type Description Double A double-precision floating-point number that is equivalent to the number in value, or 0 (zero) if value is null . | Improve this Doc View Source ToInt16(String, Int32) Converts the specified string representation of a number to an equivalent 16-bit signed integer. Declaration public static short ToInt16(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description Int16 A 16-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToInt32(String, Int32) Converts the specified string representation of a number to an equivalent 32-bit signed integer. Declaration public static int ToInt32(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description Int32 A 32-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToInt64(String, Int32) Converts the specified string representation of a number to an equivalent 64-bit signed integer. Declaration public static long ToInt64(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains a number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description Int64 A 64-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToSByte(String, Int32) Converts the specified string representation of a number to an equivalent 8-bit signed integer. Declaration [CLSCompliant(false)] public static sbyte ToSByte(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description SByte An 8-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToSingle(String) Converts the specified string representation of a number to an equivalent single-precision floating-point number. Declaration public static float ToSingle(string value) Parameters Type Name Description String value A string that contains the number to convert. Returns Type Description Single A single-precision floating-point number that is equivalent to the number in value, or 0 (zero) if value is null . | Improve this Doc View Source ToUInt16(String, Int32) Converts the specified string representation of a number to an equivalent 16-bit unsigned integer. Declaration [CLSCompliant(false)] public static ushort ToUInt16(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description UInt16 A 16-bit unsigned integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToUInt32(String, Int32) Converts the specified string representation of a number to an equivalent 32-bit unsigned integer. Declaration [CLSCompliant(false)] public static uint ToUInt32(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description UInt32 A 32-bit unsigned integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToUInt64(String, Int32) Converts the specified string representation of a number to an equivalent 64-bit unsigned integer. Declaration [CLSCompliant(false)] public static ulong ToUInt64(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description UInt64 A 64-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values."
  },
  "api/System.DateTime.html": {
    "href": "api/System.DateTime.html",
    "title": "Struct DateTime | nanoFramework Documentation",
    "keywords": "Struct DateTime Represents an instant in time, typically expressed as a date and time of day. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct DateTime Constructors | Improve this Doc View Source DateTime(Int32, Int32, Int32) Initializes a new instance of the DateTime structure to the specified year, month, and day. Declaration public DateTime(int year, int month, int day) Parameters Type Name Description Int32 year The year (1601 through 3000). Int32 month The month (1 through 12). Int32 day The day (1 through the number of days in month). | Improve this Doc View Source DateTime(Int32, Int32, Int32, Int32, Int32, Int32) Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, and second. Declaration public DateTime(int year, int month, int day, int hour, int minute, int second) Parameters Type Name Description Int32 year The year (1601 through 3000). Int32 month The month (1 through 12). Int32 day The day (1 through the number of days in month). Int32 hour The hours (0 through 23). Int32 minute The minutes (0 through 59). Int32 second The seconds (0 through 59). DateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32) Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, second, and millisecond. Declaration public DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond) Parameters Type Name Description Int32 year The year (1601 through 3000). Int32 month The month (1 through 12). Int32 day The day (1 through the number of days in month). Int32 hour The hours (0 through 23). Int32 minute The minutes (0 through 59). Int32 second The seconds (0 through 59). Int32 millisecond The milliseconds (0 through 999). Exceptions Type Condition ArgumentOutOfRangeException Any parameter out of the accepted ranges | Improve this Doc View Source DateTime(Int64) Initializes a new instance of the DateTime structure to a specified number of ticks. Declaration public DateTime(long ticks) Parameters Type Name Description Int64 ticks A date and time expressed in the number of 100-nanosecond intervals. Exceptions Type Condition ArgumentOutOfRangeException ticks - Ticks must be between MinValue and MaxValue . | Improve this Doc View Source DateTime(Int64, DateTimeKind) Initializes a new instance of the DateTime structure to a specified number of ticks and to Coordinated Universal Time (UTC). Declaration public DateTime(long ticks, DateTimeKind kind) Parameters Type Name Description Int64 ticks A date and time expressed in the number of 100-nanosecond intervals. DateTimeKind kind One of the enumeration values that indicates whether ticks specifies a local time, Coordinated Universal Time (UTC), or neither. Remarks nanoFramework doesn't support local time, only UTC, so it's not possible to specify Local . Fields | Improve this Doc View Source MaxValue Represents the largest possible value of DateTime . This field is read-only. Declaration public static readonly DateTime MaxValue Field Value Type Description DateTime Remarks The value of this constant is equivalent to 23:59:59.9999999, December 31, 3000. This value is specific to nanoFramework. .NET equivalent is 23:59:59.9999999 UTC, December 31, 9999 in the Gregorian calendar. | Improve this Doc View Source MinValue Represents the smallest possible value of DateTime . This field is read-only. Declaration public static readonly DateTime MinValue Field Value Type Description DateTime Remarks The value of this constant is equivalent to 00:00:00.0000000, January 1, 1601. This value is specific to nanoFramework. .NET equivalent is 00:00:00.0000000 UTC, January 1, 0001, in the Gregorian calendar. | Improve this Doc View Source UnixEpoch Represents the Unix Epoch value. This field is read-only. Declaration public static readonly DateTime UnixEpoch Field Value Type Description DateTime Remarks The value of this constant is equivalent to the DateTime corresponding to 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). This value is specific to nanoFramework. Properties | Improve this Doc View Source Date Gets the date component of this instance. Declaration public DateTime Date { get; } Property Value Type Description DateTime A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00). | Improve this Doc View Source Day Gets the day of the month represented by this instance. Declaration public int Day { get; } Property Value Type Description Int32 The day component, expressed as a value between 1 and 31. | Improve this Doc View Source DayOfWeek Gets the day of the week represented by this instance. Declaration public DayOfWeek DayOfWeek { get; } Property Value Type Description DayOfWeek An enumerated constant that indicates the day of the week of this DateTime value. | Improve this Doc View Source DayOfYear Gets the day of the year represented by this instance. Declaration public int DayOfYear { get; } Property Value Type Description Int32 The day of the year, expressed as a value between 1 and 366. | Improve this Doc View Source Hour Gets the hour component of the date represented by this instance. Declaration public int Hour { get; } Property Value Type Description Int32 The hour component, expressed as a value between 0 and 23. | Improve this Doc View Source Kind Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither. Declaration public DateTimeKind Kind { get; } Property Value Type Description DateTimeKind One of the enumeration values that indicates what the current time represents. Remarks Despite the default in the full .NET Framework is Local this won't never happen because nanoFramework only supports UTC time. | Improve this Doc View Source Millisecond Gets the milliseconds component of the date represented by this instance. Declaration public int Millisecond { get; } Property Value Type Description Int32 The milliseconds component, expressed as a value between 0 and 999. | Improve this Doc View Source Minute Gets the minute component of the date represented by this instance. Declaration public int Minute { get; } Property Value Type Description Int32 The minute component, expressed as a value between 0 and 59. | Improve this Doc View Source Month Gets the month component of the date represented by this instance. Declaration public int Month { get; } Property Value Type Description Int32 The month component, expressed as a value between 1 and 12. | Improve this Doc View Source Second Gets the seconds component of the date represented by this instance. Declaration public int Second { get; } Property Value Type Description Int32 The seconds component, expressed as a value between 0 and 59. | Improve this Doc View Source Ticks Gets the number of ticks that represent the date and time of this instance. Declaration public long Ticks { get; } Property Value Type Description Int64 The number of ticks that represent the date and time of this instance. The value is between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks | Improve this Doc View Source TimeOfDay Gets the time of day for this instance. Declaration public TimeSpan TimeOfDay { get; } Property Value Type Description TimeSpan A time interval that represents the fraction of the day that has elapsed since midnight. | Improve this Doc View Source Today Gets the current date. Declaration public static DateTime Today { get; } Property Value Type Description DateTime An object that is set to today's date, with the time component set to 00:00:00. | Improve this Doc View Source UtcNow Gets a DateTime object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC). Declaration public static DateTime UtcNow { get; } Property Value Type Description DateTime An object whose value is the current UTC date and time. | Improve this Doc View Source Year Gets the year component of the date represented by this instance. Declaration public int Year { get; } Property Value Type Description Int32 The year, between 1 and 9999. Methods | Improve this Doc View Source Add(TimeSpan) Returns a new DateTime that adds the value of the specified TimeSpan to the value of this instance. Declaration public DateTime Add(TimeSpan val) Parameters Type Name Description TimeSpan val A positive or negative time interval. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the time interval represented by val . | Improve this Doc View Source AddDays(Double) Returns a new DateTime that adds the specified number of days to the value of this instance. Declaration public DateTime AddDays(double val) Parameters Type Name Description Double val A number of whole and fractional days. The val parameter can be negative or positive. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the number of days represented by val . | Improve this Doc View Source AddHours(Double) Returns a new DateTime that adds the specified number of hours to the value of this instance. Declaration public DateTime AddHours(double val) Parameters Type Name Description Double val A number of whole and fractional hours. The val parameter can be negative or positive. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the number of hours represented by val . | Improve this Doc View Source AddMilliseconds(Double) Returns a new DateTime that adds the specified number of milliseconds to the value of this instance. Declaration public DateTime AddMilliseconds(double val) Parameters Type Name Description Double val A number of whole and fractional milliseconds. The val parameter can be negative or positive. Note that this value is rounded to the nearest integer. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by val . | Improve this Doc View Source AddMinutes(Double) Returns a new DateTime that adds the specified number of minutes to the value of this instance. Declaration public DateTime AddMinutes(double val) Parameters Type Name Description Double val A number of whole and fractional minutes. The val parameter can be negative or positive. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by val . | Improve this Doc View Source AddSeconds(Double) Returns a new DateTime that adds the specified number of seconds to the value of this instance. Declaration public DateTime AddSeconds(double val) Parameters Type Name Description Double val A number of whole and fractional seconds. The val parameter can be negative or positive. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by val . | Improve this Doc View Source AddTicks(Int64) Returns a new DateTime that adds the specified number of ticks to the value of this instance. Declaration public DateTime AddTicks(long val) Parameters Type Name Description Int64 val A number of 100-nanosecond ticks. The val parameter can be positive or negative. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the time represented by val . | Improve this Doc View Source Compare(DateTime, DateTime) Compares two instances of DateTime and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance. Declaration public static int Compare(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Int32 A signed number indicating the relative values of t1 and t2 . | Improve this Doc View Source CompareTo(Object) Compares the value of this instance to a specified object that contains a specified DateTime value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified DateTime value. Declaration public int CompareTo(object val) Parameters Type Name Description Object val A boxed object to compare, or null reference (Nothing in Visual Basic). Returns Type Description Int32 A signed number indicating the relative values of this instance and value. DaysInMonth(Int32, Int32) Returns the number of days in the specified month and year. Declaration public static int DaysInMonth(int year, int month) Parameters Type Name Description Int32 year The year. Int32 month The month (a number ranging from 1 to 12). Returns Type Description Int32 The number of days in month for the specified year. For example, if month equals 2 for February, the return value is 28 or 29 depending upon whether year is a leap year. | Improve this Doc View Source Equals(DateTime, DateTime) Returns a value indicating whether two DateTime instances have the same date and time value. Declaration public static bool Equals(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if the two values are equal; otherwise, false. | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to this instance. Returns Type Description Boolean true if obj is an instance of DateTime and equals the value of this instance; otherwise, false. Overrides ValueType.Equals(Object) | Improve this Doc View Source FromUnixTimeSeconds(Int64) Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a DateTime value. Declaration public static DateTime FromUnixTimeSeconds(long seconds) Parameters Type Name Description Int64 seconds A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTime A date and time value that represents the same moment in time as the Unix time. Remarks This method is exclusive of nanoFramework. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source Subtract(DateTime) Subtracts the specified date and time from this instance. Declaration public TimeSpan Subtract(DateTime val) Parameters Type Name Description DateTime val The date and time value to subtract. Returns Type Description TimeSpan A time interval that is equal to the date and time represented by this instance minus the date and time represented by val . | Improve this Doc View Source Subtract(TimeSpan) Subtracts the specified duration from this instance. Declaration public DateTime Subtract(TimeSpan val) Parameters Type Name Description TimeSpan val The time interval to subtract. Returns Type Description DateTime An object that is equal to the date and time represented by this instance minus the time interval represented by val . | Improve this Doc View Source ToString() Converts the value of the current DateTime object to its equivalent string representation. Declaration public override string ToString() Returns Type Description String A string representation of the value of the current DateTime object. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the value of the current DateTime object to its equivalent string representation using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A standard or custom date and time format string (see Remarks). Returns Type Description String A string representation of value of the current DateTime object as specified by format. | Improve this Doc View Source ToUnixTimeSeconds() Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z. Declaration public long ToUnixTimeSeconds() Returns Type Description Int64 The number of seconds that have elapsed since 1970-01-01T00:00:00Z. Remarks Unix time represents the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). It does not take leap seconds into account. This method is exclusive of nanoFramework. Operators | Improve this Doc View Source Addition(DateTime, TimeSpan) Adds a specified time interval to a specified date and time, yielding a new date and time. Declaration public static DateTime operator +(DateTime d, TimeSpan t) Parameters Type Name Description DateTime d The date and time value to add. TimeSpan t The time interval to add. Returns Type Description DateTime An object that is the sum of the values of d and t . | Improve this Doc View Source Equality(DateTime, DateTime) Determines whether two specified instances of DateTime are equal. Declaration public static bool operator ==(DateTime d1, DateTime d2) Parameters Type Name Description DateTime d1 The first object to compare. DateTime d2 The second object to compare. Returns Type Description Boolean true if d1 and d2 represent the same date and time; otherwise, false. | Improve this Doc View Source GreaterThan(DateTime, DateTime) Determines whether one specified DateTime is greater than another specified DateTime. Declaration public static bool operator>(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if t1 is greater than t2 ; otherwise, false. | Improve this Doc View Source GreaterThanOrEqual(DateTime, DateTime) Determines whether one specified DateTime is greater than or equal to another specified DateTime. Declaration public static bool operator >=(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if t1 is greater than or equal to t2 ; otherwise, false. | Improve this Doc View Source Inequality(DateTime, DateTime) Determines whether two specified instances of DateTime are not equal. Declaration public static bool operator !=(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if t1 and t2 do not represent the same date and time; otherwise, false. | Improve this Doc View Source LessThan(DateTime, DateTime) Determines whether one specified DateTime is less than another specified DateTime . Declaration public static bool operator <(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if t1 is less than t2 ; otherwise, false. | Improve this Doc View Source LessThanOrEqual(DateTime, DateTime) Determines whether one specified DateTime is less than or equal to another specified DateTime. Declaration public static bool operator <=(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if t1 is less than or equal to t2 ; otherwise, false. | Improve this Doc View Source Subtraction(DateTime, DateTime) Subtracts a specified date and time from another specified date and time and returns a time interval. Declaration public static TimeSpan operator -(DateTime d1, DateTime d2) Parameters Type Name Description DateTime d1 The date and time value to subtract from (the minuend). DateTime d2 The date and time value to subtract (the subtrahend). Returns Type Description TimeSpan The time interval between d1 and d2 ; that is, d1 minus d2 . | Improve this Doc View Source Subtraction(DateTime, TimeSpan) Subtracts a specified time interval from a specified date and time and returns a new date and time. Declaration public static DateTime operator -(DateTime d, TimeSpan t) Parameters Type Name Description DateTime d The date and time value to subtract from. TimeSpan t The time interval to subtract. Returns Type Description DateTime An object whose value is the value of d minus the value of t ."
  },
  "api/System.DateTimeKind.html": {
    "href": "api/System.DateTimeKind.html",
    "title": "Enum DateTimeKind | nanoFramework Documentation",
    "keywords": "Enum DateTimeKind Specifies whether a DateTime object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC. Namespace : System Assembly : mscorlib.dll Syntax public enum DateTimeKind Remarks nanoFramework doesn't support local time, only UTC, so it's not possible to specify Local . Fields Name Description Local The time represented is local time. Utc The time represented is UTC."
  },
  "api/System.DayOfWeek.html": {
    "href": "api/System.DayOfWeek.html",
    "title": "Enum DayOfWeek | nanoFramework Documentation",
    "keywords": "Enum DayOfWeek Specifies the day of the week. Namespace : System Assembly : mscorlib.dll Syntax public enum DayOfWeek Fields Name Description Friday Indicates Friday Monday Indicates Monday Saturday Indicates Saturday Sunday Indicates Sunday Thursday Indicates Thursday Tuesday Indicates Tuesday Wednesday Indicates Wednesday"
  },
  "api/System.DBNull.html": {
    "href": "api/System.DBNull.html",
    "title": "Class DBNull | nanoFramework Documentation",
    "keywords": "Class DBNull Represents a nonexistent value. This class cannot be inherited. Inheritance Object DBNull Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public sealed class DBNull Fields | Improve this Doc View Source Value Represents the sole instance of the DBNull class. Declaration public static readonly DBNull Value Field Value Type Description DBNull Remarks DBNull is a singleton class, which means only this instance of this class can exist."
  },
  "api/System.Decimal.html": {
    "href": "api/System.Decimal.html",
    "title": "Struct Decimal | nanoFramework Documentation",
    "keywords": "Struct Decimal Represents a decimal number. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Decimal Constructors | Improve this Doc View Source Decimal(Double) Initializes a new instance of Decimal to the value of the specified double-precision floating-point number. Declaration public Decimal(double value) Parameters Type Name Description Double value The value to represent as a Decimal. | Improve this Doc View Source Decimal(Int32) Initializes a new instance of Decimal to the value of the specified 32-bit signed integer. Declaration public Decimal(int value) Parameters Type Name Description Int32 value The value to represent as a Decimal. | Improve this Doc View Source Decimal(Int32, Int32, Int32, Boolean, Byte) Initializes a new instance of Decimal from parameters specifying the instance's constituent parts. Declaration public Decimal(int lo, int mid, int hi, bool isNegative, byte scale) Parameters Type Name Description Int32 lo The low 32 bits of a 96-bit integer. Int32 mid The middle 32 bits of a 96-bit integer. Int32 hi The high 32 bits of a 96-bit integer. Boolean isNegative The sign of the number; true is negative, false is positive. Byte scale A power of 10 ranging from 0 to 28. | Improve this Doc View Source Decimal(Int32[]) Initializes a new instance of Decimal to a decimal value represented in binary and contained in a specified array. Declaration public Decimal(int[] bits) Parameters Type Name Description Int32 [] bits An array of 32-bit signed integers containing a representation of a decimal value. | Improve this Doc View Source Decimal(Int64) Initializes a new instance of Decimal to the value of the specified 64-bit signed integer. Declaration public Decimal(long value) Parameters Type Name Description Int64 value The value to represent as a Decimal. | Improve this Doc View Source Decimal(Single) Initializes a new instance of Decimal to the value of the specified single-precision floating-point number. Declaration public Decimal(float value) Parameters Type Name Description Single value The value to represent as a Decimal. | Improve this Doc View Source Decimal(UInt32) Initializes a new instance of Decimal to the value of the specified 32-bit unsigned integer. Declaration [CLSCompliant(false)] public Decimal(uint value) Parameters Type Name Description UInt32 value The value to represent as a Decimal. | Improve this Doc View Source Decimal(UInt64) Initializes a new instance of Decimal to the value of the specified 64-bit unsigned integer. Declaration [CLSCompliant(false)] public Decimal(ulong value) Parameters Type Name Description UInt64 value The value to represent as a Decimal."
  },
  "api/System.Delegate.html": {
    "href": "api/System.Delegate.html",
    "title": "Class Delegate | nanoFramework Documentation",
    "keywords": "Class Delegate Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class. Inheritance Object Delegate MulticastDelegate Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class Delegate Properties Method Gets the method represented by the delegate. Declaration public MethodInfo Method { get; } Property Value Type Description MethodInfo A MethodInfo describing the method represented by the delegate. Remarks Available only in mscorlib build with support for System.Reflection. Target Gets the class instance on which the current delegate invokes the instance method. Declaration public object Target { get; } Property Value Type Description Object The object on which the current delegate invokes the instance method, if the delegate represents an instance method; null reference (Nothing in Visual Basic) if the delegate represents a static method. Methods Combine(Delegate, Delegate) Concatenates the invocation lists of two delegates. Declaration public static Delegate Combine(Delegate a, Delegate b) Parameters Type Name Description Delegate a The delegate whose invocation list comes first. Delegate b The delegate whose invocation list comes last. Returns Type Description Delegate A new delegate with an invocation list that concatenates the invocation lists of a and b in that order. Returns a if b is null reference (Nothing in Visual Basic), returns b if a is a null reference, and returns a null reference if both a and b are null references. Equals(Object) Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current delegate. Returns Type Description Boolean true if obj and the current delegate have the same targets, methods, and invocation list; otherwise, false. Overrides Object.Equals(Object) GetInvocationList() Returns the invocation list of the delegate. Declaration public virtual Delegate[] GetInvocationList() Returns Type Description Delegate [] An array of delegates representing the invocation list of the current delegate. Remove(Delegate, Delegate) Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate. Declaration public static Delegate Remove(Delegate source, Delegate value) Parameters Type Name Description Delegate source The delegate from which to remove the invocation list of value. Delegate value The delegate that supplies the invocation list to remove from the invocation list of source. Returns Type Description Delegate A new delegate with an invocation list formed by taking the invocation list of source and removing the last occurrence of the invocation list of value, if the invocation list of value is found within the invocation list of source. Returns source if value is null reference (Nothing in Visual Basic) or if the invocation list of value is not found within the invocation list of source. Returns a null reference if the invocation list of value is equal to the invocation list of source or if source is a null reference. Operators Equality(Delegate, Delegate) Determines whether the specified delegates are equal. Declaration public static bool operator ==(Delegate d1, Delegate d2) Parameters Type Name Description Delegate d1 The first delegate to compare. Delegate d2 The second delegate to compare. Returns Type Description Boolean true if d1 is equal to d2; otherwise, false. Inequality(Delegate, Delegate) Determines whether the specified delegates are not equal. Declaration public static bool operator !=(Delegate d1, Delegate d2) Parameters Type Name Description Delegate d1 The first delegate to compare. Delegate d2 The second delegate to compare. Returns Type Description Boolean true if d1 is not equal to d2; otherwise, false."
  },
  "api/System.Devices.Dac.DacChannel.html": {
    "href": "api/System.Devices.Dac.DacChannel.html",
    "title": "Class DacChannel | nanoFramework Documentation",
    "keywords": "Class DacChannel Represents a single DAC channel. Inheritance Object DacChannel Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Devices.Dac Assembly : System.Devices.Dac.dll Syntax public sealed class DacChannel : IDacChannel, IDisposable Properties | Improve this Doc View Source Controller Gets the DAC controller for this channel. Declaration public DacController Controller { get; } Property Value Type Description DacController The DAC controller. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source WriteValue(UInt16) Writes the analogue representation of the digital value to the DAC. Declaration public void WriteValue(ushort value) Parameters Type Name Description UInt16 value Implements IDisposable"
  },
  "api/System.Devices.Dac.DacChannelAlreadyInUseException.html": {
    "href": "api/System.Devices.Dac.DacChannelAlreadyInUseException.html",
    "title": "Class DacChannelAlreadyInUseException | nanoFramework Documentation",
    "keywords": "Class DacChannelAlreadyInUseException Exception thrown when a check in DacChannel constructor finds that the channel is already in use. Inheritance Object Exception DacChannelAlreadyInUseException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Devices.Dac Assembly : System.Devices.Dac.dll Syntax [Serializable] public class DacChannelAlreadyInUseException : Exception Methods | Improve this Doc View Source ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Exception.ToString()"
  },
  "api/System.Devices.Dac.DacController.html": {
    "href": "api/System.Devices.Dac.DacController.html",
    "title": "Class DacController | nanoFramework Documentation",
    "keywords": "Class DacController Represents an DAC controller on the system Inheritance Object DacController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Devices.Dac Assembly : System.Devices.Dac.dll Syntax public sealed class DacController : IDacController Properties | Improve this Doc View Source ChannelCount The number of channels available on the ADC controller. Declaration public int ChannelCount { get; } Property Value Type Description Int32 Number of channels. | Improve this Doc View Source ResolutionInBits Gets the resolution of the controller as number of bits it has. For example, if we have a 10-bit DAC, that means it can detect 1024 (2^10) discrete levels. Declaration public int ResolutionInBits { get; } Property Value Type Description Int32 The number of bits the DAC controller has. Methods | Improve this Doc View Source GetDefault() Gets the default DAC controller on the system. Declaration public static DacController GetDefault() Returns Type Description DacController The default DAC controller on the system, or null if the system has no DAC controller. GetDeviceSelector() Retrieves an string of all the DAC controllers on the system. Declaration public static string GetDeviceSelector() Returns Type Description String | Improve this Doc View Source OpenChannel(Int32) Opens a connection to the specified DAC channel. Declaration public DacChannel OpenChannel(int channelNumber) Parameters Type Name Description Int32 channelNumber The channel to connect to. Returns Type Description DacChannel The DAC channel."
  },
  "api/System.Devices.Dac.html": {
    "href": "api/System.Devices.Dac.html",
    "title": "Namespace System.Devices.Dac | nanoFramework Documentation",
    "keywords": "Namespace System.Devices.Dac Classes DacChannel Represents a single DAC channel. DacChannelAlreadyInUseException Exception thrown when a check in DacChannel constructor finds that the channel is already in use. DacController Represents an DAC controller on the system"
  },
  "api/System.Diagnostics.ConditionalAttribute.html": {
    "href": "api/System.Diagnostics.ConditionalAttribute.html",
    "title": "Class ConditionalAttribute | nanoFramework Documentation",
    "keywords": "Class ConditionalAttribute Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined. Inheritance Object Attribute ConditionalAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public sealed class ConditionalAttribute : Attribute Constructors | Improve this Doc View Source ConditionalAttribute(String) Initializes a new instance of the ConditionalAttribute class. Declaration public ConditionalAttribute(string conditionString) Parameters Type Name Description String conditionString A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute. Properties | Improve this Doc View Source ConditionString Gets the conditional compilation symbol that is associated with the ConditionalAttribute attribute. Declaration public string ConditionString { get; } Property Value Type Description String A string that specifies the case-sensitive conditional compilation symbol that is associated with the ConditionalAttribute attribute."
  },
  "api/System.Diagnostics.Debug.html": {
    "href": "api/System.Diagnostics.Debug.html",
    "title": "Class Debug | nanoFramework Documentation",
    "keywords": "Class Debug Provides a set of methods and properties that help debug your code. Inheritance Object Debug Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax public static class Debug Methods | Improve this Doc View Source Assert(Boolean) Causes a break in execution if the specified assertion (condition) evaluates to false. Declaration [Conditional(\"DEBUG\")] public static void Assert(bool condition) Parameters Type Name Description Boolean condition The condition to be evaluated. If the value is false, program execution stops. | Improve this Doc View Source Assert(Boolean, String) Causes a break in execution if the specified assertion (condition) evaluates to false. Declaration [Conditional(\"DEBUG\")] public static void Assert(bool condition, string message) Parameters Type Name Description Boolean condition The condition to be evaluated. If the value is false, program execution stops. String message The text to be output if the assertion is false. | Improve this Doc View Source Assert(Boolean, String, String) Causes a break in execution if the specified assertion (condition) evaluates to false. Declaration [Conditional(\"DEBUG\")] public static void Assert(bool condition, string message, string detailedMessage) Parameters Type Name Description Boolean condition The condition to be evaluated. If the value is false, program execution stops. String message The text to be output if the assertion is false. String detailedMessage The detailed message to be displayed if the assertion is false. | Improve this Doc View Source Write(String) Writes a message to the trace listeners in the Listeners collection. Declaration [Conditional(\"DEBUG\")] public static void Write(string message) Parameters Type Name Description String message A message to write. Remarks In nanoFramework implementation the message is output to Visual Studio debugger window. | Improve this Doc View Source WriteLine(String) Writes a message followed by a line terminator to the trace listeners in the Listeners collection. Declaration [Conditional(\"DEBUG\")] public static void WriteLine(string message) Parameters Type Name Description String message A message to write. Remarks In nanoFramework implementation the message is output to Visual Studio debugger window."
  },
  "api/System.Diagnostics.DebuggableAttribute.DebuggingModes.html": {
    "href": "api/System.Diagnostics.DebuggableAttribute.DebuggingModes.html",
    "title": "Enum DebuggableAttribute.DebuggingModes | nanoFramework Documentation",
    "keywords": "Enum DebuggableAttribute.DebuggingModes Specifies the debugging mode for the just-in-time (JIT) compiler. Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax public enum DebuggingModes Fields Name Description Default Instructs the just-in-time (JIT) compiler to use its default behaviour, which includes enabling optimizations, disabling Edit and Continue support, and using symbol store sequence points if present. Starting with the .NET Framework version 2.0, JIT tracking information, the Microsoft intermediate language (MSIL) offset to the native-code offset within a method, is always generated. DisableOptimizations Disable optimizations performed by the compiler to make your output file smaller, faster, and more efficient. Optimizations result in code rearrangement in the output file, which can make debugging difficult. Typically optimization should be disabled while debugging. In versions 2.0 or later, combine this value with Default (Default | DisableOptimizations) to enable JIT tracking and disable optimizations. EnableEditAndContinue Enable edit and continue. Edit and continue enables you to make changes to your source code while your program is in break mode. The ability to edit and continue is compiler dependent. IgnoreSymbolStoreSequencePoints Use the implicit MSIL sequence points, not the program database (PDB) sequence points. The symbolic information normally includes at least one Microsoft intermediate language (MSIL) offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. These MSIL offsets are called sequence points. None Starting with the .NET Framework version 2.0, JIT tracking information is always generated, and this flag has the same effect as Default, except that it sets the DebuggableAttribute.IsJITTrackingEnabled property to false. However, because JIT tracking is always enabled, the property value is ignored in version 2.0 or later. Note that, unlike the None flag, the None flag cannot be used to disable JIT optimizations."
  },
  "api/System.Diagnostics.DebuggableAttribute.html": {
    "href": "api/System.Diagnostics.DebuggableAttribute.html",
    "title": "Class DebuggableAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggableAttribute Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited. Inheritance Object Attribute DebuggableAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module)] public sealed class DebuggableAttribute : Attribute Constructors | Improve this Doc View Source DebuggableAttribute(Boolean, Boolean) Initializes a new instance of the DebuggableAttribute class, using the specified tracking and optimization options for the just-in-time (JIT) compiler. Declaration public DebuggableAttribute(bool isJITTrackingEnabled, bool isJITOptimizerDisabled) Parameters Type Name Description Boolean isJITTrackingEnabled true to enable debugging; otherwise, false. Boolean isJITOptimizerDisabled true to disable the optimizer for execution; otherwise, false. | Improve this Doc View Source DebuggableAttribute(DebuggableAttribute.DebuggingModes) Initializes a new instance of the DebuggableAttribute class, using the specified debugging modes for the just-in-time (JIT) compiler. Declaration public DebuggableAttribute(DebuggableAttribute.DebuggingModes modes) Parameters Type Name Description DebuggableAttribute.DebuggingModes modes A bitwise combination of the DebuggableAttribute.DebuggingModes values specifying the debugging mode for the JIT compiler. Properties | Improve this Doc View Source DebuggingFlags Gets the debugging modes for the attribute. Declaration public DebuggableAttribute.DebuggingModes DebuggingFlags { get; } Property Value Type Description DebuggableAttribute.DebuggingModes A bitwise combination of the DebuggableAttribute.DebuggingModes values describing the debugging mode for the just-in-time (JIT) compiler. The default is Default. | Improve this Doc View Source IsJITOptimizerDisabled Gets a value that indicates whether the runtime optimizer is disabled. Declaration public bool IsJITOptimizerDisabled { get; } Property Value Type Description Boolean true if the runtime optimizer is disabled; otherwise, false. | Improve this Doc View Source IsJITTrackingEnabled Gets a value that indicates whether the runtime will track information during code generation for the debugger. Declaration public bool IsJITTrackingEnabled { get; } Property Value Type Description Boolean true if the runtime will track information during code generation for the debugger; otherwise, false."
  },
  "api/System.Diagnostics.Debugger.html": {
    "href": "api/System.Diagnostics.Debugger.html",
    "title": "Class Debugger | nanoFramework Documentation",
    "keywords": "Class Debugger Enables communication with a debugger. This class cannot be inherited. Inheritance Object Debugger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax public static class Debugger Properties IsAttached Gets a value that indicates whether a debugger is attached to the process. Declaration public static bool IsAttached { get; } Property Value Type Description Boolean true if a debugger is attached; otherwise, false. Methods Break() Signals a breakpoint to an attached debugger. Declaration public static void Break()"
  },
  "api/System.Diagnostics.DebuggerBrowsableAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerBrowsableAttribute.html",
    "title": "Class DebuggerBrowsableAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerBrowsableAttribute Determines if and how a member is displayed in the debugger variable windows. This class cannot be inherited. Inheritance Object Attribute DebuggerBrowsableAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public sealed class DebuggerBrowsableAttribute : Attribute Constructors | Improve this Doc View Source DebuggerBrowsableAttribute(DebuggerBrowsableState) Initializes a new instance of the DebuggerBrowsableAttribute class. Declaration public DebuggerBrowsableAttribute(DebuggerBrowsableState state) Parameters Type Name Description DebuggerBrowsableState state One of the DebuggerBrowsableState values that specifies how to display the member. Exceptions Type Condition ArgumentOutOfRangeException Properties | Improve this Doc View Source State Gets the display state for the attribute. Declaration public DebuggerBrowsableState State { get; } Property Value Type Description DebuggerBrowsableState One of the DebuggerBrowsableState values."
  },
  "api/System.Diagnostics.DebuggerBrowsableState.html": {
    "href": "api/System.Diagnostics.DebuggerBrowsableState.html",
    "title": "Enum DebuggerBrowsableState | nanoFramework Documentation",
    "keywords": "Enum DebuggerBrowsableState Provides display instructions for the debugger. Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax public enum DebuggerBrowsableState Fields Name Description Collapsed Show the element as collapsed. Never Never show the element. RootHidden Do not display the root element; display the child elements if the element is a collection or array of items."
  },
  "api/System.Diagnostics.DebuggerDisplayAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerDisplayAttribute.html",
    "title": "Class DebuggerDisplayAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerDisplayAttribute Determines how a class or field is displayed in the debugger variable windows. Inheritance Object Attribute DebuggerDisplayAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Delegate, AllowMultiple = true)] public sealed class DebuggerDisplayAttribute : Attribute Constructors | Improve this Doc View Source DebuggerDisplayAttribute(String) Initializes a new instance of the DebuggerDisplayAttribute class. Declaration public DebuggerDisplayAttribute(string value) Parameters Type Name Description String value The string to be displayed in the value column for instances of the type; an empty string (\"\") causes the value column to be hidden. Properties | Improve this Doc View Source Name Gets or sets the name to display in the debugger variable windows. Declaration public string Name { get; set; } Property Value Type Description String The name to display in the debugger variable windows. | Improve this Doc View Source Target Gets or sets the type of the attribute's target. Declaration public Type Target { get; set; } Property Value Type Description Type The attribute's target type. Exceptions Type Condition ArgumentNullException value | Improve this Doc View Source TargetTypeName Gets or sets the type name of the attribute's target. Declaration public string TargetTypeName { get; set; } Property Value Type Description String The name of the attribute's target type. | Improve this Doc View Source Type Gets or sets the string to display in the type column of the debugger variable windows. Declaration public string Type { get; set; } Property Value Type Description String The string to display in the type column of the debugger variable windows. | Improve this Doc View Source Value Gets the string to display in the value column of the debugger variable windows. Declaration public string Value { get; } Property Value Type Description String The string to display in the value column of the debugger variable."
  },
  "api/System.Diagnostics.DebuggerHiddenAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerHiddenAttribute.html",
    "title": "Class DebuggerHiddenAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerHiddenAttribute Specifies the DebuggerHiddenAttribute. This class cannot be inherited. Inheritance Object Attribute DebuggerHiddenAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property, Inherited = false)] public sealed class DebuggerHiddenAttribute : Attribute Remarks The common language runtime attaches no semantics to this attribute. It is provided for use by source code debuggers. For example, the Visual Studio 2005 debugger does not stop in a method marked with this attribute and does not allow a breakpoint to be set in the method. Other debugger attributes recognized by the Visual Studio 2005 debugger are the DebuggerNonUserCodeAttribute and the DebuggerStepThroughAttribute . Constructors | Improve this Doc View Source DebuggerHiddenAttribute() Initializes a new instance of the DebuggerHiddenAttribute class. Declaration public DebuggerHiddenAttribute()"
  },
  "api/System.Diagnostics.DebuggerNonUserCodeAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerNonUserCodeAttribute.html",
    "title": "Class DebuggerNonUserCodeAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerNonUserCodeAttribute Identifies a type or member that is not part of the user code for an application. Inheritance Object Attribute DebuggerNonUserCodeAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property, Inherited = false)] public sealed class DebuggerNonUserCodeAttribute : Attribute Remarks Designer provided types and members that are not part of the code specifically created by the user can complicate the debugging experience. This attribute suppresses the display of these adjunct types and members in the debugger window and automatically steps through, rather than into, designer provided code. When the debugger encounters this attribute when stepping through user code, the user experience is to not see the designer provided code and to step to the next user-supplied code statement. The debugger behaviour when the DebuggerNonUserCodeAttribute is present is similar to using a combination of the DebuggerHiddenAttribute attribute, which hides the code from the debugger, and the DebuggerStepThroughAttribute attribute, which tells the debugger to step through, rather than into, the code it is applied to. Constructors | Improve this Doc View Source DebuggerNonUserCodeAttribute() Initializes a new instance of the DebuggerNonUserCodeAttribute class. Declaration public DebuggerNonUserCodeAttribute()"
  },
  "api/System.Diagnostics.DebuggerStepperBoundaryAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerStepperBoundaryAttribute.html",
    "title": "Class DebuggerStepperBoundaryAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerStepperBoundaryAttribute Indicates the code following the attribute is to be executed in run, not step, mode. Inheritance Object Attribute DebuggerStepperBoundaryAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)] public sealed class DebuggerStepperBoundaryAttribute : Attribute Remarks The DebuggerStepperBoundaryAttribute attribute is used as an escape from the effect of a DebuggerNonUserCodeAttribute . When executing within the boundaries of the DebuggerNonUserCodeAttribute , designer-provided code is executed as a step-through until the next user supplied code is encountered. When context switches are made on a thread, the next user-supplied code module stepped into may not relate to the code that was in the process of being debugged. To avoid this debugging experience, use the DebuggerStepperBoundaryAttribute to escape from stepping through code to running code. For example, in Visual Studio 2005, encountering a DebuggerStepperBoundaryAttribute while stepping through code using the F10 key (or Step Over command) has the same effect as pressing the F5 key or using the Start Debugging command. Constructors | Improve this Doc View Source DebuggerStepperBoundaryAttribute() Initializes a new instance of the DebuggerStepperBoundaryAttribute class. Declaration public DebuggerStepperBoundaryAttribute()"
  },
  "api/System.Diagnostics.DebuggerStepThroughAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerStepThroughAttribute.html",
    "title": "Class DebuggerStepThroughAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerStepThroughAttribute Identifies a type or member that is not part of the user code for an application. Inheritance Object Attribute DebuggerStepThroughAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)] public sealed class DebuggerStepThroughAttribute : Attribute Remarks Designer provided types and members that are not part of the code specifically created by the user can complicate the debugging experience. This attribute suppresses the display of these adjunct types and members in the debugger window and automatically steps through, rather than into, designer provided code. When the debugger encounters this attribute when stepping through user code, the user experience is to not see the designer provided code and to step to the next user-supplied code statement. The debugger behaviour when the DebuggerNonUserCodeAttribute is present is similar to using a combination of the DebuggerHiddenAttribute attribute, which hides the code from the debugger, and the DebuggerStepThroughAttribute attribute, which tells the debugger to step through, rather than into, the code it is applied to. Constructors | Improve this Doc View Source DebuggerStepThroughAttribute() Initializes a new instance of the DebuggerNonUserCodeAttribute class. Declaration public DebuggerStepThroughAttribute()"
  },
  "api/System.Diagnostics.DebuggerTypeProxyAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerTypeProxyAttribute.html",
    "title": "Class DebuggerTypeProxyAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerTypeProxyAttribute Specifies the display proxy for a type. Inheritance Object Attribute DebuggerTypeProxyAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)] public sealed class DebuggerTypeProxyAttribute : Attribute Remarks Available only in mscorlib build with support for System.Reflection. Constructors | Improve this Doc View Source DebuggerTypeProxyAttribute(String) Initializes a new instance of the DebuggerTypeProxyAttribute class using the type name of the proxy. Declaration public DebuggerTypeProxyAttribute(string typeName) Parameters Type Name Description String typeName The type name of the proxy type. | Improve this Doc View Source DebuggerTypeProxyAttribute(Type) Initializes a new instance of the DebuggerTypeProxyAttribute class using the type of the proxy. Declaration public DebuggerTypeProxyAttribute(Type type) Parameters Type Name Description Type type The proxy type. Exceptions Type Condition ArgumentNullException Properties | Improve this Doc View Source ProxyTypeName Gets the type name of the proxy type. Declaration public string ProxyTypeName { get; } Property Value Type Description String The type name of the proxy type. | Improve this Doc View Source Target Gets or sets the target type for the attribute. Declaration public Type Target { get; set; } Property Value Type Description Type The target type for the attribute. Exceptions Type Condition ArgumentNullException Target is set to null. | Improve this Doc View Source TargetTypeName Gets or sets the name of the target type. Declaration public string TargetTypeName { get; set; } Property Value Type Description String The name of the target type."
  },
  "api/System.Diagnostics.html": {
    "href": "api/System.Diagnostics.html",
    "title": "Namespace System.Diagnostics | nanoFramework Documentation",
    "keywords": "Namespace System.Diagnostics Classes ConditionalAttribute Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined. Debug Provides a set of methods and properties that help debug your code. DebuggableAttribute Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited. Debugger Enables communication with a debugger. This class cannot be inherited. DebuggerBrowsableAttribute Determines if and how a member is displayed in the debugger variable windows. This class cannot be inherited. DebuggerDisplayAttribute Determines how a class or field is displayed in the debugger variable windows. DebuggerHiddenAttribute Specifies the DebuggerHiddenAttribute. This class cannot be inherited. DebuggerNonUserCodeAttribute Identifies a type or member that is not part of the user code for an application. DebuggerStepperBoundaryAttribute Indicates the code following the attribute is to be executed in run, not step, mode. DebuggerStepThroughAttribute Identifies a type or member that is not part of the user code for an application. DebuggerTypeProxyAttribute Specifies the display proxy for a type. Enums DebuggableAttribute.DebuggingModes Specifies the debugging mode for the just-in-time (JIT) compiler. DebuggerBrowsableState Provides display instructions for the debugger."
  },
  "api/System.Double.html": {
    "href": "api/System.Double.html",
    "title": "Struct Double | nanoFramework Documentation",
    "keywords": "Struct Double Represents a double-precision floating-point number. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Double Fields | Improve this Doc View Source Epsilon Represents the smallest positive Double value that is greater than zero. This field is constant. Declaration public const double Epsilon = 4.94065645841247E-324 Field Value Type Description Double Remarks The value of this constant is 4.94065645841247e-324. | Improve this Doc View Source MaxValue Represents the largest possible value of a Double. This field is constant. Declaration public const double MaxValue = 1.7976931348623157E+308 Field Value Type Description Double Remarks The value of this constant is positive 1.7976931348623157E+308. | Improve this Doc View Source MinValue Represents the smallest possible value of a Double. This field is constant. Declaration public const double MinValue = -1.7976931348623157E+308 Field Value Type Description Double Remarks The value of this constant is negative 1.7976931348623157E+308. | Improve this Doc View Source NaN Represents a value that is not a number (NaN). This field is constant. Declaration public const double NaN = NaN Field Value Type Description Double | Improve this Doc View Source NegativeInfinity Represents negative infinity. This field is constant. Declaration public const double NegativeInfinity = -Infinity Field Value Type Description Double | Improve this Doc View Source PositiveInfinity Represents positive infinity. This field is constant. Declaration public const double PositiveInfinity = Infinity Field Value Type Description Double Methods | Improve this Doc View Source CompareTo(Double) Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number. Declaration public int CompareTo(double value) Parameters Type Name Description Double value A double-precision floating-point number to compare. Returns Type Description Int32 A signed number indicating the relative values of this instance and value. Less than zero: This instance is less than value. -or- This instance is not a number ( NaN ) and value is a number. Zero: This instance is equal to value. -or- Both this instance and value are not a number ( NaN ), PositiveInfinity , or NegativeInfinity . Greater than zero: This instance is greater than value. -or- This instance is a number and value is not a number ( NaN ). IsInfinity(Double) Returns a value indicating whether the specified number evaluates to negative or positive infinity Declaration public static bool IsInfinity(double d) Parameters Type Name Description Double d A double-precision floating-point number. Returns Type Description Boolean true if d evaluates to PositiveInfinity or NegativeInfinity; otherwise, false. IsNaN(Double) Returns a value that indicates whether the specified value is not a number (NaN). Declaration public static bool IsNaN(double d) Parameters Type Name Description Double d A double-precision floating-point number. Returns Type Description Boolean true if d evaluates to NaN; otherwise, false. IsNegativeInfinity(Double) Returns a value indicating whether the specified number evaluates to negative infinity. Declaration public static bool IsNegativeInfinity(double d) Parameters Type Name Description Double d A double-precision floating-point number. Returns Type Description Boolean true if d evaluates to NegativeInfinity; otherwise, false. IsPositiveInfinity(Double) Returns a value indicating whether the specified number evaluates to positive infinity. Declaration public static bool IsPositiveInfinity(double d) Parameters Type Name Description Double d A double-precision floating-point number. Returns Type Description Boolean true if d evaluates to PositiveInfinity; otherwise, false. | Improve this Doc View Source Parse(String) Converts the string representation of a number to its double-precision floating-point number equivalent. Declaration public static double Parse(string s) Parameters Type Name Description String s A string that contains a number to convert. Returns Type Description Double A double-precision floating-point number that is equivalent to the numeric value or symbol specified in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format. | Improve this Doc View Source TryParse(String, out Double) Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed. Declaration public static bool TryParse(string s, out double result) Parameters Type Name Description String s A string containing a number to convert. Double result When this method returns, contains the double-precision floating-point number equivalent to the s parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null reference (Nothing in Visual Basic), is not a number in a valid format, or represents a number less than MinValue or greater than MaxValue. This parameter is passed uninitialized. Returns Type Description Boolean true if s was converted successfully; otherwise, false."
  },
  "api/System.Enum.html": {
    "href": "api/System.Enum.html",
    "title": "Class Enum | nanoFramework Documentation",
    "keywords": "Class Enum Provides the base class for enumerations. Inheritance Object ValueType Enum Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class Enum : ValueType Methods | Improve this Doc View Source ToString() Converts the value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance. Overrides Object.ToString() Remarks Available only in mscorlib build with support for System.Reflection."
  },
  "api/System.Exception.html": {
    "href": "api/System.Exception.html",
    "title": "Class Exception | nanoFramework Documentation",
    "keywords": "Class Exception Represents errors that occur during application execution. Inheritance Object Exception ConstraintException ApplicationException DacChannelAlreadyInUseException SocketException SystemException I2cDeviceAlreadyInUseException SpiDeviceAlreadyInUseException Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class Exception Constructors | Improve this Doc View Source Exception() Initializes a new instance of the Exception class. Declaration public Exception() | Improve this Doc View Source Exception(String) Initializes a new instance of the Exception class with a specified error message. Declaration public Exception(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source Exception(String, Exception) Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public Exception(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Fields | Improve this Doc View Source HResult Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception. Declaration protected int HResult Field Value Type Description Int32 The HRESULT value./// Properties | Improve this Doc View Source InnerException Gets the Exception instance that caused the current exception. Declaration public Exception InnerException { get; } Property Value Type Description Exception An instance of Exception that describes the error that caused the current exception. The InnerException property returns the same value as was passed into the constructor, or a null reference (Nothing in Visual Basic) if the inner exception value was not supplied to the constructor. This property is read-only. | Improve this Doc View Source Message Gets a message that describes the current exception. Declaration public virtual string Message { get; } Property Value Type Description String The error message that explains the reason for the exception, or an empty string(\"\"). StackTrace Gets a string representation of the immediate frames on the call stack. Declaration public virtual string StackTrace { get; } Property Value Type Description String A string that describes the immediate frames of the call stack. Methods | Improve this Doc View Source ToString() Creates and returns a string representation of the current exception. Declaration public override string ToString() Returns Type Description String A string representation of the current exception. Overrides Object.ToString()"
  },
  "api/System.FlagsAttribute.html": {
    "href": "api/System.FlagsAttribute.html",
    "title": "Class FlagsAttribute | nanoFramework Documentation",
    "keywords": "Class FlagsAttribute Indicates that an enumeration can be treated as a bit field; that is, a set of flags. Inheritance Object Attribute FlagsAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Enum)] public class FlagsAttribute : Attribute"
  },
  "api/System.GC.html": {
    "href": "api/System.GC.html",
    "title": "Class GC | nanoFramework Documentation",
    "keywords": "Class GC Controls the system garbage collector, a service that automatically reclaims unused memory. Inheritance Object GC Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public static class GC Methods ReRegisterForFinalize(Object) Requests that the system call the finalizer for the specified object for which SuppressFinalize has previously been called. Declaration public static void ReRegisterForFinalize(object obj) Parameters Type Name Description Object obj The object that a finalizer must be called for. SuppressFinalize(Object) Requests that the system not call the finalizer for the specified object. Declaration public static void SuppressFinalize(object obj) Parameters Type Name Description Object obj The object that a finalizer must not be called for. | Improve this Doc View Source WaitForPendingFinalizers() Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue. Declaration public static void WaitForPendingFinalizers()"
  },
  "api/System.Globalization.CultureInfo.html": {
    "href": "api/System.Globalization.CultureInfo.html",
    "title": "Class CultureInfo | nanoFramework Documentation",
    "keywords": "Class CultureInfo Provides information about a specific culture (called a locale for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers. Inheritance Object CultureInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Globalization Assembly : mscorlib.dll Syntax public class CultureInfo Constructors | Improve this Doc View Source CultureInfo(String) Initializes a new instance of the CultureInfo class based on the culture specified by name. Declaration public CultureInfo(string name) Parameters Type Name Description String name A predefined CultureInfo name, Name of an existing CultureInfo, or Windows-only culture name. Name is not case-sensitive. Properties | Improve this Doc View Source CurrentUICulture Gets the CultureInfo object that represents the current user interface culture used by the Resource Manager to look up culture-specific resources at run time. Declaration public static CultureInfo CurrentUICulture { get; } Property Value Type Description CultureInfo The culture used by the Resource Manager to look up culture-specific resources at run time. | Improve this Doc View Source DateTimeFormat Gets a DateTimeFormatInfo that defines the culturally appropriate format of displaying dates and times. Declaration public virtual DateTimeFormatInfo DateTimeFormat { get; } Property Value Type Description DateTimeFormatInfo A DateTimeFormatInfo that defines the culturally appropriate format of displaying dates and times. | Improve this Doc View Source Name Gets the culture name in the format languagecode2-country/regioncode2. Declaration public virtual string Name { get; } Property Value Type Description String The culture name in the format languagecode2-country/regioncode2. languagecode2 is a lowercase two-letter code derived from ISO 639-1. country/regioncode2 is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag. | Improve this Doc View Source NumberFormat Gets a NumberFormatInfo that defines the culturally appropriate format of displaying numbers, currency, and percentage. Declaration public virtual NumberFormatInfo NumberFormat { get; } Property Value Type Description NumberFormatInfo A NumberFormatInfo that defines the culturally appropriate format of displaying numbers, currency, and percentage. | Improve this Doc View Source Parent Gets the CultureInfo that represents the parent culture of the current CultureInfo. Declaration public virtual CultureInfo Parent { get; } Property Value Type Description CultureInfo The CultureInfo that represents the parent culture of the current CultureInfo. Methods | Improve this Doc View Source ToString() Returns a string containing the name of the current CultureInfo in the format languagecode2-country/regioncode2. Declaration public override string ToString() Returns Type Description String A string containing the name of the current CultureInfo. Overrides Object.ToString()"
  },
  "api/System.Globalization.DateTimeFormatInfo.html": {
    "href": "api/System.Globalization.DateTimeFormatInfo.html",
    "title": "Class DateTimeFormatInfo | nanoFramework Documentation",
    "keywords": "Class DateTimeFormatInfo Provides culture-specific information about the format of date and time values. Inheritance Object DateTimeFormatInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Globalization Assembly : mscorlib.dll Syntax public sealed class DateTimeFormatInfo Properties | Improve this Doc View Source AbbreviatedDayNames Gets a one-dimensional array of type String containing the culture-specific abbreviated names of the days of the week. Declaration public string[] AbbreviatedDayNames { get; } Property Value Type Description String [] A one-dimensional array of type String containing the culture-specific abbreviated names of the days of the week. The array for InvariantInfo contains \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", and \"Sat\". | Improve this Doc View Source AbbreviatedMonthNames Gets or sets a one-dimensional string array that contains the culture-specific abbreviated names of the months. Declaration public string[] AbbreviatedMonthNames { get; } Property Value Type Description String [] A one-dimensional string array with 13 elements that contains the culture-specific abbreviated names of the months. For 12-month calendars, the 13th element of the array is an empty string. The array for InvariantInfo contains \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", and \"\". | Improve this Doc View Source AMDesignator Gets the string designator for hours that are \"ante meridiem\" (before noon). Declaration public string AMDesignator { get; } Property Value Type Description String The string designator for hours that are ante meridiem. The default for InvariantInfo is \"AM\". | Improve this Doc View Source CurrentInfo Gets a read-only DateTimeFormatInfo object that formats values based on the current culture. Declaration public static DateTimeFormatInfo CurrentInfo { get; } Property Value Type Description DateTimeFormatInfo A read-only DateTimeFormatInfo object based on the CultureInfo object for the current thread. | Improve this Doc View Source DateSeparator Gets the string that separates the components of a date, that is, the year, month, and day. Declaration public string DateSeparator { get; } Property Value Type Description String The string that separates the components of a date, that is, the year, month, and day. The default for InvariantInfo is \"/\". | Improve this Doc View Source DayNames Gets a one-dimensional string array that contains the culture-specific full names of the days of the week. Declaration public string[] DayNames { get; } Property Value Type Description String [] A one-dimensional string array that contains the culture-specific full names of the days of the week. The array for InvariantInfo contains \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", and \"Saturday\". | Improve this Doc View Source FullDateTimePattern Gets the custom format string for a long date and long time value. Declaration public string FullDateTimePattern { get; } Property Value Type Description String The custom format string for a long date and long time value. | Improve this Doc View Source LongDatePattern Gets the custom format string for a long date value. Declaration public string LongDatePattern { get; } Property Value Type Description String The custom format string for a long date value. | Improve this Doc View Source LongTimePattern Gets the custom format string for a long time value. Declaration public string LongTimePattern { get; } Property Value Type Description String The format pattern for a long time value. | Improve this Doc View Source MonthDayPattern Gets the custom format string for a month and day value. Declaration public string MonthDayPattern { get; } Property Value Type Description String The custom format string for a month and day value. | Improve this Doc View Source MonthNames Gets or sets a one-dimensional array of type String containing the culture-specific full names of the months. Declaration public string[] MonthNames { get; } Property Value Type Description String [] A one-dimensional array of type String containing the culture-specific full names of the months. In a 12-month calendar, the 13th element of the array is an empty string. The array for InvariantInfo contains \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", and \"\". | Improve this Doc View Source PMDesignator Gets the string designator for hours that are \"post meridiem\" (after noon). Declaration public string PMDesignator { get; } Property Value Type Description String The string designator for hours that are \"post meridiem\" (after noon). The default for InvariantInfo is \"PM\". | Improve this Doc View Source RFC1123Pattern Gets the custom format string for a time value that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification. Declaration public string RFC1123Pattern { get; } Property Value Type Description String The custom format string for a time value that is based on the IETF RFC 1123 specification. | Improve this Doc View Source ShortDatePattern Gets the custom format string for a short date value. Declaration public string ShortDatePattern { get; } Property Value Type Description String The custom format string for a short date value. | Improve this Doc View Source ShortTimePattern Gets the custom format string for a short time value. Declaration public string ShortTimePattern { get; } Property Value Type Description String The custom format string for a short time value. | Improve this Doc View Source SortableDateTimePattern Gets the custom format string for a sortable date and time value. Declaration public string SortableDateTimePattern { get; } Property Value Type Description String The custom format string for a sortable date and time value. | Improve this Doc View Source TimeSeparator Gets the string that separates the components of time, that is, the hour, minutes, and seconds. Declaration public string TimeSeparator { get; } Property Value Type Description String The string that separates the components of time. The default for InvariantInfo is \":\". | Improve this Doc View Source UniversalSortableDateTimePattern Gets the custom format string for a universal, sortable date and time string. Declaration public string UniversalSortableDateTimePattern { get; } Property Value Type Description String The custom format string for a universal, sortable date and time string. | Improve this Doc View Source YearMonthPattern Gets the custom format string for a year and month value. Declaration public string YearMonthPattern { get; } Property Value Type Description String The custom format string for a year and month value."
  },
  "api/System.Globalization.html": {
    "href": "api/System.Globalization.html",
    "title": "Namespace System.Globalization | nanoFramework Documentation",
    "keywords": "Namespace System.Globalization Classes CultureInfo Provides information about a specific culture (called a locale for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers. DateTimeFormatInfo Provides culture-specific information about the format of date and time values. NumberFormatInfo Provides culture-specific information for formatting and parsing numeric values."
  },
  "api/System.Globalization.NumberFormatInfo.html": {
    "href": "api/System.Globalization.NumberFormatInfo.html",
    "title": "Class NumberFormatInfo | nanoFramework Documentation",
    "keywords": "Class NumberFormatInfo Provides culture-specific information for formatting and parsing numeric values. Inheritance Object NumberFormatInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Globalization Assembly : mscorlib.dll Syntax public sealed class NumberFormatInfo Properties | Improve this Doc View Source CurrentInfo Gets a read-only NumberFormatInfo that formats values based on the current culture. Declaration public static NumberFormatInfo CurrentInfo { get; } Property Value Type Description NumberFormatInfo A read-only NumberFormatInfo based on the culture of the current thread. | Improve this Doc View Source NegativeSign Gets the string that denotes that the associated number is negative. Declaration public string NegativeSign { get; } Property Value Type Description String The string that denotes that the associated number is negative. The default for InvariantInfo is \"-\". | Improve this Doc View Source NumberDecimalSeparator Gets the string to use as the decimal separator in numeric values. Declaration public string NumberDecimalSeparator { get; } Property Value Type Description String The string to use as the decimal separator in numeric values. The default for InvariantInfo is \".\". | Improve this Doc View Source NumberGroupSeparator Gets the string that separates groups of digits to the left of the decimal in numeric values. Declaration public string NumberGroupSeparator { get; } Property Value Type Description String The string that separates groups of digits to the left of the decimal in numeric values. The default for InvariantInfo is \",\". | Improve this Doc View Source NumberGroupSizes Gets the number of digits in each group to the left of the decimal in numeric values. Declaration public int[] NumberGroupSizes { get; } Property Value Type Description Int32 [] The number of digits in each group to the left of the decimal in numeric values. The default for InvariantInfo is a one-dimensional array with only one element, which is set to 3. Exceptions Type Condition InvalidOperationException | Improve this Doc View Source PositiveSign Gets the string that denotes that the associated number is positive. Declaration public string PositiveSign { get; } Property Value Type Description String The string that denotes that the associated number is positive. The default for InvariantInfo is \"+\"."
  },
  "api/System.Guid.html": {
    "href": "api/System.Guid.html",
    "title": "Struct Guid | nanoFramework Documentation",
    "keywords": "Struct Guid Represents a globally unique identifier (GUID). Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Guid Constructors | Improve this Doc View Source Guid(Byte[]) Initializes a new instance of the Guid structure by using the specified array of bytes. Declaration public Guid(byte[] b) Parameters Type Name Description Byte [] b A 16-element byte array containing values with which to initialize the GUID. | Improve this Doc View Source Guid(Int32, Int16, Int16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte) Initializes a new instance of the Guid structure by using the specified integers and bytes. Declaration public Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k) Parameters Type Name Description Int32 a The first 4 bytes of the GUID. Int16 b The next 2 bytes of the GUID. Int16 c The next 2 bytes of the GUID. Byte d The next byte of the GUID. Byte e The next byte of the GUID. Byte f The next byte of the GUID. Byte g The next byte of the GUID. Byte h The next byte of the GUID. Byte i The next byte of the GUID. Byte j The next byte of the GUID. Byte k The next byte of the GUID. Remarks Specifying individual bytes in this manner can be used to circumvent byte order restrictions (big-endian or little-endian byte order) on particular types of computers. | Improve this Doc View Source Guid(String) Creates a new Guid based on the value in the string. The value is made up of hex digits speared by the dash (\"-\"). The string may begin and end with brackets (\"{\", \"}\"). The string must be of the form dddddddd-dddd-dddd-dddd-dddddddddddd. where d is a hex digit. (That is 8 hex digits, followed by 4, then 4, then 4, then 12) such as: \"CA761232-ED42-11CE-BACD-00AA0057B223\" Declaration public Guid(string g) Parameters Type Name Description String g String representation of new Guid . Exceptions Type Condition ArgumentException | Improve this Doc View Source Guid(UInt32, UInt16, UInt16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte) Initializes a new instance of the Guid structure by using the specified integers and bytes. Declaration [CLSCompliant(false)] public Guid(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k) Parameters Type Name Description UInt32 a The first 4 bytes of the GUID. UInt16 b The next 2 bytes of the GUID. UInt16 c The next 2 bytes of the GUID. Byte d The next byte of the GUID. Byte e The next byte of the GUID. Byte f The next byte of the GUID. Byte g The next byte of the GUID. Byte h The next byte of the GUID. Byte i The next byte of the GUID. Byte j The next byte of the GUID. Byte k The next byte of the GUID. Remarks Specifying the bytes in this manner avoids endianness issues. Fields | Improve this Doc View Source Empty A read-only instance of the Guid class which consists of all zeros. Declaration public static readonly Guid Empty Field Value Type Description Guid Methods | Improve this Doc View Source CompareTo(Object) Compares this instance to a specified object and returns an indication of their relative values. Declaration public int CompareTo(object value) Parameters Type Name Description Object value Guid instance to compare, or null. Returns Type Description Int32 Indication of the relative values (0 = equal, -1 = this instance less, +1 = this instance greater) | Improve this Doc View Source Equals(Object) Returns a value that indicates whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code for this instance. Overrides Object.GetHashCode() | Improve this Doc View Source NewGuid() Initializes a new instance of the Guid structure. Declaration public static Guid NewGuid() Returns Type Description Guid A new GUID object. | Improve this Doc View Source ToByteArray() Returns a 16-element byte array that contains the value of this instance. Declaration public byte[] ToByteArray() Returns Type Description Byte [] A 16-element byte array. | Improve this Doc View Source ToString() Returns a string representation of the value of this instance of the Guid structure. Declaration public override string ToString() Returns Type Description String The value of this Guid, formatted by using the \"D\" format specifier as follows: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is \"382c74c3-721d-4f34-80e5-57657b6cbc27\". To convert the hexadecimal digits from a through f to uppercase, call the ToUpper() method on the returned string. Overrides Object.ToString() | Improve this Doc View Source TryParseGuidWithDashes(String, out Guid) Creates a new Guid based on the value in the string. The value is made up of hex digits speared by the dash (\"-\"). The string may begin and end with brackets (\"{\", \"}\"). The string must be of the form dddddddd-dddd-dddd-dddd-dddddddddddd. where d is a hex digit. (That is 8 hex digits, followed by 4, then 4, then 4, then 12) such as: \"CA761232-ED42-11CE-BACD-00AA0057B223\" Declaration public static bool TryParseGuidWithDashes(string guidString, out Guid result) Parameters Type Name Description String guidString Guid string to parse. Guid result Resulting Guid. Returns Type Description Boolean"
  },
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System | nanoFramework Documentation",
    "keywords": "Namespace System Classes AppDomainUnloadedException The exception that is thrown when an attempt is made to access an unloaded application domain. ApplicationException Serves as the base class for application-defined exceptions. ArgumentException The exception that is thrown when one of the arguments provided to a method is not valid. ArgumentNullException The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument. ArgumentOutOfRangeException The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method. Array Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime. Attribute Represents the base class for custom attributes. AttributeUsageAttribute Specifies the usage of another attribute class. This class cannot be inherited. BitConverter Converts base data types to an array of bytes, and an array of bytes to base data types. CLSCompliantAttribute Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited. Console Represents the standard input, output, and error streams for console applications. This class cannot be inherited. Convert Converts a base data type to another base data type. DBNull Represents a nonexistent value. This class cannot be inherited. Delegate Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class. Enum Provides the base class for enumerations. Exception Represents errors that occur during application execution. FlagsAttribute Indicates that an enumeration can be treated as a bit field; that is, a set of flags. GC Controls the system garbage collector, a service that automatically reclaims unused memory. IndexOutOfRangeException The exception that is thrown when an attempt is made to access an element of an array with an index that is outside the bounds of the array. This class cannot be inherited. InvalidCastException The exception that is thrown for invalid casting or explicit conversion. InvalidOperationException The exception that is thrown when a method call is invalid for the object's current state. MarshalByRefObject Enables access to objects across application domain boundaries in applications that support remoting. MTAThreadAttribute Indicates that the COM threading model for an application is multithreaded apartment (MTA). MulticastDelegate Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list. NonSerializedAttribute Indicates that a field of a serializable class should not be serialized. This class cannot be inherited. NotImplementedException The exception that is thrown when a requested method or operation is not implemented. NotSupportedException The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. NullReferenceException The exception that is thrown when there is an attempt to dereference a null object reference. Object Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy. ObjectDisposedException The exception that is thrown when an operation is performed on a disposed object. ObsoleteAttribute Marks the program elements that are no longer in use. This class cannot be inherited. OutOfMemoryException The exception that is thrown when there is not enough memory to continue the execution of a program. ParamArrayAttribute Indicates that a method will allow a variable number of arguments in its invocation. This class cannot be inherited. Random Represents a random number generator, a device that produces a sequence of numbers that meet certain statistical requirements for randomness. SerializableAttribute Indicates that a class can be serialized. This class cannot be inherited. STAThreadAttribute Indicates that the COM threading model for an application is single-threaded apartment (STA). String Represents text as a sequence of UTF-16 code units. SystemException Serves as the base class for system exceptions namespace. Type Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types. Uri Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI. ValueType Provides the base class for value types. Version Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited. WeakReference Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection. Structs Boolean Represents a Boolean value. Byte Represents an 8-bit unsigned integer. Char Represents a character as a UTF-16 code unit. DateTime Represents an instant in time, typically expressed as a date and time of day. Decimal Represents a decimal number. Double Represents a double-precision floating-point number. Guid Represents a globally unique identifier (GUID). Int16 Represents a 16-bit signed integer. Int32 Represents a 32-bit signed integer. Int64 Represents a 64-bit signed integer. IntPtr A platform-specific type that is used to represent a pointer or a handle. RuntimeArgumentHandle This value type is used for constructing System.ArgIterator. RuntimeFieldHandle Represents a field using an internal metadata token. RuntimeMethodHandle RuntimeMethodHandle is a handle to the internal metadata representation of a method. RuntimeTypeHandle Represents a type using an internal metadata token. SByte Represents an 8-bit signed integer. Single Represents a single-precision floating-point number. TimeSpan Represents a time interval. TypedReference Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location. UInt16 Represents a 16-bit unsigned integer. UInt32 Represents a 32-bit unsigned integer. UInt64 Represents a 64-bit unsigned integer. UIntPtr A platform-specific type that is used to represent a pointer or a handle. Void Specifies a return value type for a method that does not return a value. Interfaces IAsyncResult Represents the status of an asynchronous operation. ICloneable Defines an interface indicating that an object may be cloned. IComparable Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances. ICustomFormatter Defines a method that supports custom formatting of the value of an object. IDisposable Defines a method to release allocated resources. IFormatProvider Provides a mechanism for retrieving an object to control formatting. IFormattable Provides functionality to format the value of an object into a string representation. Enums AttributeTargets Specifies the application elements on which it is valid to apply an attribute. Base64FormattingOptions Specifies whether relevant Convert.ToBase64CharArray and Convert.ToBase64String methods insert line breaks in their output. DateTimeKind Specifies whether a DateTime object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC. DayOfWeek Specifies the day of the week. TypeCode Specifies the type of an object. Uri.Flags Defines flags kept in m_Flags variable. UriHostNameType Defines host name types for the http and https protocols. method. UriKind Defines the kinds of Uri s for the IsWellFormedUriString(String, UriKind) method and several Uri methods. Delegates AsyncCallback References a method to be called when a corresponding asynchronous operation completes."
  },
  "api/System.IAsyncResult.html": {
    "href": "api/System.IAsyncResult.html",
    "title": "Interface IAsyncResult | nanoFramework Documentation",
    "keywords": "Interface IAsyncResult Represents the status of an asynchronous operation. Namespace : System Assembly : mscorlib.dll Syntax public interface IAsyncResult"
  },
  "api/System.ICloneable.html": {
    "href": "api/System.ICloneable.html",
    "title": "Interface ICloneable | nanoFramework Documentation",
    "keywords": "Interface ICloneable Defines an interface indicating that an object may be cloned. Namespace : System Assembly : mscorlib.dll Syntax public interface ICloneable Methods | Improve this Doc View Source Clone() Make a new object which is a copy of the object instanced. Declaration object Clone() Returns Type Description Object A new object that represents a clone of the object."
  },
  "api/System.IComparable.html": {
    "href": "api/System.IComparable.html",
    "title": "Interface IComparable | nanoFramework Documentation",
    "keywords": "Interface IComparable Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances. Namespace : System Assembly : mscorlib.dll Syntax public interface IComparable Methods | Improve this Doc View Source CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration int CompareTo(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. Less than zero : This instance precedes obj in the sort order. Zero : This instance occurs in the same position in the sort order as obj. Greater than zero : This instance follows obj in the sort order."
  },
  "api/System.ICustomFormatter.html": {
    "href": "api/System.ICustomFormatter.html",
    "title": "Interface ICustomFormatter | nanoFramework Documentation",
    "keywords": "Interface ICustomFormatter Defines a method that supports custom formatting of the value of an object. Namespace : System Assembly : mscorlib.dll Syntax public interface ICustomFormatter Remarks Available only in mscorlib build with support for System.Reflection. Methods | Improve this Doc View Source Format(String, Object, IFormatProvider) Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information. Declaration string Format(string format, object arg, IFormatProvider formatProvider) Parameters Type Name Description String format A format string containing formatting specifications. Object arg An object to format. IFormatProvider formatProvider An object that supplies format information about the current instance. Returns Type Description String The string representation of the value of arg, formatted as specified by format and formatProvider."
  },
  "api/System.IDisposable.html": {
    "href": "api/System.IDisposable.html",
    "title": "Interface IDisposable | nanoFramework Documentation",
    "keywords": "Interface IDisposable Defines a method to release allocated resources. Namespace : System Assembly : mscorlib.dll Syntax public interface IDisposable Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration void Dispose()"
  },
  "api/System.IFormatProvider.html": {
    "href": "api/System.IFormatProvider.html",
    "title": "Interface IFormatProvider | nanoFramework Documentation",
    "keywords": "Interface IFormatProvider Provides a mechanism for retrieving an object to control formatting. Namespace : System Assembly : mscorlib.dll Syntax public interface IFormatProvider Remarks Available only in mscorlib build with support for System.Reflection. Methods | Improve this Doc View Source GetFormat(Type) Returns an object that provides formatting services for the specified type. Declaration object GetFormat(Type formatType) Parameters Type Name Description Type formatType An object that specifies the type of format object to return. Returns Type Description Object An instance of the object specified by formatType, if the IFormatProvider implementation can supply that type of object; otherwise, null reference (Nothing in Visual Basic)."
  },
  "api/System.IFormattable.html": {
    "href": "api/System.IFormattable.html",
    "title": "Interface IFormattable | nanoFramework Documentation",
    "keywords": "Interface IFormattable Provides functionality to format the value of an object into a string representation. Namespace : System Assembly : mscorlib.dll Syntax public interface IFormattable Remarks Available only in mscorlib build with support for System.Reflection. Methods | Improve this Doc View Source ToString(String, IFormatProvider) Formats the value of the current instance using the specified format. Declaration string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description String format The format to use -or- A null reference(Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. IFormatProvider formatProvider The provider to use to format the value -or- A null reference(Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns Type Description String The value of the current instance in the specified format."
  },
  "api/System.IndexOutOfRangeException.html": {
    "href": "api/System.IndexOutOfRangeException.html",
    "title": "Class IndexOutOfRangeException | nanoFramework Documentation",
    "keywords": "Class IndexOutOfRangeException The exception that is thrown when an attempt is made to access an element of an array with an index that is outside the bounds of the array. This class cannot be inherited. Inheritance Object Exception SystemException IndexOutOfRangeException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class IndexOutOfRangeException : SystemException Constructors | Improve this Doc View Source IndexOutOfRangeException() Initializes a new instance of the IndexOutOfRangeException class. Declaration public IndexOutOfRangeException() | Improve this Doc View Source IndexOutOfRangeException(String) Initializes a new instance of the IndexOutOfRangeException class with a specified error message. Declaration public IndexOutOfRangeException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source IndexOutOfRangeException(String, Exception) Initializes a new instance of the IndexOutOfRangeException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IndexOutOfRangeException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.Int16.html": {
    "href": "api/System.Int16.html",
    "title": "Struct Int16 | nanoFramework Documentation",
    "keywords": "Struct Int16 Represents a 16-bit signed integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Int16 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of an Int16. This field is constant. Declaration public const short MaxValue = 32767 Field Value Type Description Int16 Remarks The value of this constant is 32767; that is, hexadecimal 0x7FFF. | Improve this Doc View Source MinValue Represents the smallest possible value of Int16. This field is constant. Declaration public const short MinValue = -32768 Field Value Type Description Int16 Remarks The value of this constant is -32768; that is, hexadecimal 0x8000. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 16-bit signed integer equivalent. Declaration public static short Parse(string s) Parameters Type Name Description String s A string containing a number to convert. Returns Type Description Int16 A 16-bit signed integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.Int32.html": {
    "href": "api/System.Int32.html",
    "title": "Struct Int32 | nanoFramework Documentation",
    "keywords": "Struct Int32 Represents a 32-bit signed integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Int32 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of an Int32. This field is constant. Declaration public const int MaxValue = 2147483647 Field Value Type Description Int32 Remarks The value of this constant is 2,147,483,647; that is, hexadecimal 0x7FFFFFFF. | Improve this Doc View Source MinValue Represents the smallest possible value of Int32. This field is constant. Declaration public const int MinValue = -2147483648 Field Value Type Description Int32 Remarks The value of this constant is -2,147,483,648; that is, hexadecimal 0x80000000. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 32-bit signed integer equivalent. Declaration public static int Parse(string s) Parameters Type Name Description String s A string containing a number to convert. Returns Type Description Int32 A 32-bit signed integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A standard or custom numeric format string Returns Type Description String he string representation of the value of this instance as specified by format."
  },
  "api/System.Int64.html": {
    "href": "api/System.Int64.html",
    "title": "Struct Int64 | nanoFramework Documentation",
    "keywords": "Struct Int64 Represents a 64-bit signed integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Int64 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of an Int64. This field is constant. Declaration public const long MaxValue = 9223372036854775807L Field Value Type Description Int64 Remarks The value of this constant is 9,223,372,036,854,775,807; that is, hexadecimal 0x7FFFFFFFFFFFFFFF. | Improve this Doc View Source MinValue Represents the smallest possible value of an Int64. This field is constant. Declaration public const long MinValue = -9223372036854775808L Field Value Type Description Int64 Remarks The value of this constant is negative 9,223,372,036,854,775,808; that is, hexadecimal 0x8000000000000000. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 64-bit signed integer equivalent. Declaration public static long Parse(string s) Parameters Type Name Description String s A string containing a number to convert. Returns Type Description Int64 A 64-bit signed integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.IntPtr.html": {
    "href": "api/System.IntPtr.html",
    "title": "Struct IntPtr | nanoFramework Documentation",
    "keywords": "Struct IntPtr A platform-specific type that is used to represent a pointer or a handle. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct IntPtr"
  },
  "api/System.InvalidCastException.html": {
    "href": "api/System.InvalidCastException.html",
    "title": "Class InvalidCastException | nanoFramework Documentation",
    "keywords": "Class InvalidCastException The exception that is thrown for invalid casting or explicit conversion. Inheritance Object Exception SystemException InvalidCastException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class InvalidCastException : SystemException Constructors | Improve this Doc View Source InvalidCastException() Initializes a new instance of the InvalidCastException class. Declaration public InvalidCastException() | Improve this Doc View Source InvalidCastException(String) Initializes a new instance of the InvalidCastException class with a specified error message. Declaration public InvalidCastException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source InvalidCastException(String, Exception) Initializes a new instance of the InvalidCastException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public InvalidCastException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.InvalidOperationException.html": {
    "href": "api/System.InvalidOperationException.html",
    "title": "Class InvalidOperationException | nanoFramework Documentation",
    "keywords": "Class InvalidOperationException The exception that is thrown when a method call is invalid for the object's current state. Inheritance Object Exception SystemException InvalidOperationException ProtocolViolationException WebException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class InvalidOperationException : SystemException Constructors | Improve this Doc View Source InvalidOperationException() Initializes a new instance of the InvalidOperationException class. Declaration public InvalidOperationException() | Improve this Doc View Source InvalidOperationException(String) Initializes a new instance of the InvalidOperationException class with a specified error message. Declaration public InvalidOperationException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source InvalidOperationException(String, Exception) Initializes a new instance of the InvalidOperationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public InvalidOperationException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.IO.html": {
    "href": "api/System.IO.html",
    "title": "Namespace System.IO | nanoFramework Documentation",
    "keywords": "Namespace System.IO Classes IOException The exception that is thrown when an I/O error occurs. Stream Provides a generic view of a sequence of bytes. This is an abstract class. Enums IOException.IOExceptionErrorCode Provides values for error codes. SeekOrigin Specifies the position in a stream to use for seeking."
  },
  "api/System.IO.IOException.html": {
    "href": "api/System.IO.IOException.html",
    "title": "Class IOException | nanoFramework Documentation",
    "keywords": "Class IOException The exception that is thrown when an I/O error occurs. Inheritance Object Exception SystemException IOException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO Assembly : mscorlib.dll Syntax public class IOException : SystemException Constructors | Improve this Doc View Source IOException() Initializes a new instance of the IOException class with its message string set to the empty string (\"\"), its HRESULT set to COR_E_IO, and its inner exception set to a null reference. Declaration public IOException() | Improve this Doc View Source IOException(String) Initializes a new instance of the IOException class with its message string set to message, its HRESULT set to COR_E_IO, and its inner exception set to null reference (Nothing in Visual Basic). Declaration public IOException(string message) Parameters Type Name Description String message A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. | Improve this Doc View Source IOException(String, Exception) Initializes a new instance of the IOException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IOException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. | Improve this Doc View Source IOException(String, Int32) Initializes a new instance of the IOException class with its message string set to message and its HRESULT user-defined. Declaration public IOException(string message, int hresult) Parameters Type Name Description String message A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. Int32 hresult An integer identifying the error that has occurred. Properties | Improve this Doc View Source ErrorCode The error code associated with this IOException object. Declaration public IOException.IOExceptionErrorCode ErrorCode { get; } Property Value Type Description IOException.IOExceptionErrorCode The error code."
  },
  "api/System.IO.IOException.IOExceptionErrorCode.html": {
    "href": "api/System.IO.IOException.IOExceptionErrorCode.html",
    "title": "Enum IOException.IOExceptionErrorCode | nanoFramework Documentation",
    "keywords": "Enum IOException.IOExceptionErrorCode Provides values for error codes. Namespace : System.IO Assembly : mscorlib.dll Syntax public enum IOExceptionErrorCode Fields Name Description DirectoryNotEmpty Directory not empty DirectoryNotFound Directory not found FileNotFound File not found InvalidDriver Invalid driver Others Others PathAlreadyExists Path already exists PathTooLong Path too long TooManyOpenHandles Too many open handles UnauthorizedAccess Unauthorized access VolumeNotFound Volume not found"
  },
  "api/System.IO.SeekOrigin.html": {
    "href": "api/System.IO.SeekOrigin.html",
    "title": "Enum SeekOrigin | nanoFramework Documentation",
    "keywords": "Enum SeekOrigin Specifies the position in a stream to use for seeking. Namespace : System.IO Assembly : mscorlib.dll Syntax public enum SeekOrigin Remarks These constants match Win32's FILE_BEGIN, FILE_CURRENT, and FILE_END Fields Name Description Begin Specifies the beginning of a stream. Current Specifies the current position within a stream. End Specifies the end of a stream."
  },
  "api/System.IO.Stream.html": {
    "href": "api/System.IO.Stream.html",
    "title": "Class Stream | nanoFramework Documentation",
    "keywords": "Class Stream Provides a generic view of a sequence of bytes. This is an abstract class. Inheritance Object MarshalByRefObject Stream NetworkStream Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO Assembly : mscorlib.dll Syntax public abstract class Stream : MarshalByRefObject, IDisposable Properties | Improve this Doc View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public abstract bool CanRead { get; } Property Value Type Description Boolean true if the stream supports reading; otherwise, false. | Improve this Doc View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public abstract bool CanSeek { get; } Property Value Type Description Boolean true if the stream supports seeking; otherwise, false. | Improve this Doc View Source CanTimeout Gets a value that determines whether the current stream can time out. Declaration public virtual bool CanTimeout { get; } Property Value Type Description Boolean A value that determines whether the current stream can time out. | Improve this Doc View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public abstract bool CanWrite { get; } Property Value Type Description Boolean true if the stream supports writing; otherwise, false. | Improve this Doc View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public abstract long Length { get; } Property Value Type Description Int64 A long value representing the length of the stream in bytes. | Improve this Doc View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public abstract long Position { get; set; } Property Value Type Description Int64 The current position within the stream. | Improve this Doc View Source ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. Declaration public virtual int ReadTimeout { get; set; } Property Value Type Description Int32 A value, in milliseconds, that determines how long the stream will attempt to read before timing out. Exceptions Type Condition InvalidOperationException | Improve this Doc View Source WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. Declaration public virtual int WriteTimeout { get; set; } Property Value Type Description Int32 A value, in milliseconds, that determines how long the stream will attempt to write before timing out. Exceptions Type Condition InvalidOperationException Methods | Improve this Doc View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public virtual void Close() Remarks Stream used to require that all cleanup logic went into Close(), which was thought up before we invented IDisposable. However, we need to follow the IDisposable pattern so that users can write sensible subclasses without needing to inspect all their base classes, and without worrying about version brittleness, from a base class switching to the Dispose pattern. We're moving Stream to the Dispose(bool) pattern - that's where all subclasses should put their cleanup starting in V2. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public abstract void Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public abstract int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. Int32 offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. Int32 count The maximum number of bytes to be read from the current stream. Returns Type Description Int32 The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. | Improve this Doc View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public virtual int ReadByte() Returns Type Description Int32 The unsigned byte cast to an Int32, or -1 if at the end of the stream. | Improve this Doc View Source Seek(Int64, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public abstract long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description Int64 The new position within the current stream. | Improve this Doc View Source SetLength(Int64) When overridden in a derived class, sets the length of the current stream. Declaration public abstract void SetLength(long value) Parameters Type Name Description Int64 value The desired length of the current stream in bytes. | Improve this Doc View Source Write(Byte[], Int32, Int32) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public abstract void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. This method copies count bytes from buffer to the current stream. Int32 offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. Int32 count The number of bytes to be written to the current stream. | Improve this Doc View Source WriteByte(Byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public virtual void WriteByte(byte value) Parameters Type Name Description Byte value The byte to write to the stream. Implements IDisposable"
  },
  "api/System.MarshalByRefObject.html": {
    "href": "api/System.MarshalByRefObject.html",
    "title": "Class MarshalByRefObject | nanoFramework Documentation",
    "keywords": "Class MarshalByRefObject Enables access to objects across application domain boundaries in applications that support remoting. Inheritance Object MarshalByRefObject Stream WebRequest WebResponse Timer WaitHandle DataReader DataWriter InMemoryRandomAccessStream Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class MarshalByRefObject"
  },
  "api/System.MTAThreadAttribute.html": {
    "href": "api/System.MTAThreadAttribute.html",
    "title": "Class MTAThreadAttribute | nanoFramework Documentation",
    "keywords": "Class MTAThreadAttribute Indicates that the COM threading model for an application is multithreaded apartment (MTA). Inheritance Object Attribute MTAThreadAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Method)] public sealed class MTAThreadAttribute : Attribute Constructors | Improve this Doc View Source MTAThreadAttribute() Initializes a new instance of the MTAThreadAttribute class. Declaration public MTAThreadAttribute()"
  },
  "api/System.MulticastDelegate.html": {
    "href": "api/System.MulticastDelegate.html",
    "title": "Class MulticastDelegate | nanoFramework Documentation",
    "keywords": "Class MulticastDelegate Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list. Inheritance Object Delegate MulticastDelegate Inherited Members Delegate.Combine(Delegate, Delegate) Delegate.Method Delegate.GetInvocationList() Delegate.Target Delegate.Remove(Delegate, Delegate) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class MulticastDelegate : Delegate Methods | Improve this Doc View Source Equals(Object) Returns the hash code for this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj A 32-bit signed integer hash code. Returns Type Description Boolean Overrides Delegate.Equals(Object) Operators Equality(MulticastDelegate, MulticastDelegate) Determines whether two MulticastDelegate objects are equal. Declaration public static bool operator ==(MulticastDelegate d1, MulticastDelegate d2) Parameters Type Name Description MulticastDelegate d1 The left operand. MulticastDelegate d2 The right operand. Returns Type Description Boolean true if d1 and d2 have the same invocation lists; otherwise, false. Inequality(MulticastDelegate, MulticastDelegate) Determines whether two MulticastDelegate objects are not equal. Declaration public static bool operator !=(MulticastDelegate d1, MulticastDelegate d2) Parameters Type Name Description MulticastDelegate d1 The left operand. MulticastDelegate d2 The right operand. Returns Type Description Boolean rue if d1 and d2 do not have the same invocation lists; otherwise, false."
  },
  "api/System.Net.AuthenticationType.html": {
    "href": "api/System.Net.AuthenticationType.html",
    "title": "Enum AuthenticationType | nanoFramework Documentation",
    "keywords": "Enum AuthenticationType Network authentication type. Currently supports: Basic Authentication Microsoft Live Id Delegate Authentication Namespace : System.Net Assembly : System.Net.Http.dll Syntax public enum AuthenticationType Fields Name Description Basic WindowsLive"
  },
  "api/System.Net.Dns.html": {
    "href": "api/System.Net.Dns.html",
    "title": "Class Dns | nanoFramework Documentation",
    "keywords": "Class Dns Provides simple domain name resolution functionality. Inheritance Object Dns Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax public static class Dns Methods | Improve this Doc View Source GetHostEntry(String) Resolves a host name or IP address to an IPHostEntry instance. Declaration public static IPHostEntry GetHostEntry(string hostNameOrAddress) Parameters Type Name Description String hostNameOrAddress The host name or IP address to resolve. Returns Type Description IPHostEntry An IPHostEntry instance that contains address information about the host specified in hostNameOrAddress. Remarks The GetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address. When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host."
  },
  "api/System.Net.EndPoint.html": {
    "href": "api/System.Net.EndPoint.html",
    "title": "Class EndPoint | nanoFramework Documentation",
    "keywords": "Class EndPoint Identifies a network address. This is an abstract class. Inheritance Object EndPoint IPEndPoint Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax [Serializable] public abstract class EndPoint Remarks The EndPoint class provides an abstract base class that represents a network resource or service. Descendant classes combine network connection information to form a connection point to a service. Methods | Improve this Doc View Source Create(SocketAddress) Creates an EndPoint instance from a SocketAddress instance. Declaration public abstract EndPoint Create(SocketAddress socketAddress) Parameters Type Name Description SocketAddress socketAddress The socket address that serves as the endpoint for a connection. Returns Type Description EndPoint A new EndPoint instance that is initialized from the specified SocketAddress instance. | Improve this Doc View Source Serialize() Serializes endpoint information into a SocketAddress instance. Declaration public abstract SocketAddress Serialize() Returns Type Description SocketAddress A SocketAddress instance that contains the endpoint information."
  },
  "api/System.Net.html": {
    "href": "api/System.Net.html",
    "title": "Namespace System.Net | nanoFramework Documentation",
    "keywords": "Namespace System.Net Classes Dns Provides simple domain name resolution functionality. EndPoint Identifies a network address. This is an abstract class. HttpKnownHeaderNames Contains known HTTP header names. HttpListener Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited. HttpListenerContext Provides access to the request and response objects used by the HttpListener class. This class cannot be inherited. HttpListenerRequest Describes an incoming HTTP request to an HttpListener object. HttpListenerResponse Represents a response to a request being handled by an HttpListener object. HttpVersion Defines the HTTP version numbers that are supported by the HttpWebRequest and HttpWebResponse classes. HttpWebRequest Provides an HTTP-specific implementation of the WebRequest class. HttpWebResponse Handles retrieval of HTTP Response headers, and handles data reads. IPAddress Provides an internet protocol (IP) address. IPEndPoint Represents a network endpoint as an IP address and a port number. IPHostEntry Provides a container class for Internet host address information. NetworkCredential Class that keeps user name and password. ProtocolViolationException The exception that is thrown when an error is made while using a network protocol. SocketAddress Stores serialized information from EndPoint derived classes. WebException Defines the exception that is thrown by WebRequest instances when an error occurs. WebHeaderCollection Contains protocol headers associated with a request or response. Manages name-value pairs for HTTP headers. WebProxy Contains HTTP proxy settings for the WebRequest class. WebRequest Makes a request to a Uniform Resource Identifier (URI). This is an abstract class. WebResponse Provides a response from a Uniform Resource Identifier (URI). This is an abstract class. Interfaces IWebProxy Provides the base interface for implementing proxy access for the WebRequest class. IWebRequestCreate The interface for creating WebRequest class objects. Enums AuthenticationType Network authentication type. Currently supports: Basic Authentication Microsoft Live Id Delegate Authentication HttpStatusCode Contains the values of status codes defined for HTTP. WebExceptionStatus Defines status codes for the WebException class. Delegates HttpContinueDelegate Represents the method that notifies callers when a continue response is received by the client."
  },
  "api/System.Net.HttpContinueDelegate.html": {
    "href": "api/System.Net.HttpContinueDelegate.html",
    "title": "Delegate HttpContinueDelegate | nanoFramework Documentation",
    "keywords": "Delegate HttpContinueDelegate Represents the method that notifies callers when a continue response is received by the client. Namespace : System.Net Assembly : System.Net.Http.dll Syntax public delegate void HttpContinueDelegate(int StatusCode, WebHeaderCollection httpHeaders); Parameters Type Name Description Int32 StatusCode The numeric value of the HTTP status from the server. WebHeaderCollection httpHeaders The headers returned with the 100-continue response from the server."
  },
  "api/System.Net.HttpKnownHeaderNames.html": {
    "href": "api/System.Net.HttpKnownHeaderNames.html",
    "title": "Class HttpKnownHeaderNames | nanoFramework Documentation",
    "keywords": "Class HttpKnownHeaderNames Contains known HTTP header names. Inheritance Object HttpKnownHeaderNames Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpKnownHeaderNames Fields | Improve this Doc View Source Accept The Accept HTTP header. Declaration public const string Accept = \"Accept\" Field Value Type Description String | Improve this Doc View Source AcceptCharset The Accept-Charset HTTP header. Declaration public const string AcceptCharset = \"Accept-Charset\" Field Value Type Description String | Improve this Doc View Source AcceptEncoding The Accept-Encoding HTTP header. Declaration public const string AcceptEncoding = \"Accept-Encoding\" Field Value Type Description String | Improve this Doc View Source AcceptLanguage The Accept-Language HTTP header. Declaration public const string AcceptLanguage = \"Accept-Language\" Field Value Type Description String | Improve this Doc View Source AcceptRanges The Accept-Ranges HTTP header. Declaration public const string AcceptRanges = \"Accept-Ranges\" Field Value Type Description String | Improve this Doc View Source Age The Age HTTP header. Declaration public const string Age = \"Age\" Field Value Type Description String | Improve this Doc View Source Allow The Allow HTTP header. Declaration public const string Allow = \"Allow\" Field Value Type Description String | Improve this Doc View Source Authorization The Authorization HTTP header. Declaration public const string Authorization = \"Authorization\" Field Value Type Description String | Improve this Doc View Source CacheControl The Cache-Control HTTP header. Declaration public const string CacheControl = \"Cache-Control\" Field Value Type Description String | Improve this Doc View Source Connection The Connection HTTP header. Declaration public const string Connection = \"Connection\" Field Value Type Description String | Improve this Doc View Source ContentEncoding The Content-Encoding HTTP header. Declaration public const string ContentEncoding = \"Content-Encoding\" Field Value Type Description String | Improve this Doc View Source ContentID The Content-ID HTTP header. Declaration public const string ContentID = \"Content-ID\" Field Value Type Description String | Improve this Doc View Source ContentLanguage The Content-Language HTTP header. Declaration public const string ContentLanguage = \"Content-Language\" Field Value Type Description String | Improve this Doc View Source ContentLength The Content-Length HTTP header. Declaration public const string ContentLength = \"Content-Length\" Field Value Type Description String | Improve this Doc View Source ContentLocation The Content-Location HTTP header. Declaration public const string ContentLocation = \"Content-Location\" Field Value Type Description String | Improve this Doc View Source ContentMD5 The Content-MD5 HTTP header. Declaration public const string ContentMD5 = \"Content-MD5\" Field Value Type Description String | Improve this Doc View Source ContentRange The Content-Range HTTP header. Declaration public const string ContentRange = \"Content-Range\" Field Value Type Description String | Improve this Doc View Source ContentTransferEncoding The Content-Transfer-Encoding HTTP header. Declaration public const string ContentTransferEncoding = \"Content-Transfer-Encoding\" Field Value Type Description String | Improve this Doc View Source ContentType The Content-Type HTTP header. Declaration public const string ContentType = \"Content-Type\" Field Value Type Description String | Improve this Doc View Source Cookie The Cookie HTTP header. Declaration public const string Cookie = \"Cookie\" Field Value Type Description String | Improve this Doc View Source Cookie2 The Cookie2 HTTP header. Declaration public const string Cookie2 = \"Cookie2\" Field Value Type Description String | Improve this Doc View Source Date The Date HTTP header. Declaration public const string Date = \"Date\" Field Value Type Description String | Improve this Doc View Source ETag The ETag HTTP header. Declaration public const string ETag = \"ETag\" Field Value Type Description String | Improve this Doc View Source Expect The Expect HTTP header. Declaration public const string Expect = \"Expect\" Field Value Type Description String | Improve this Doc View Source Expires The Expires HTTP header. Declaration public const string Expires = \"Expires\" Field Value Type Description String | Improve this Doc View Source From The From HTTP header. Declaration public const string From = \"From\" Field Value Type Description String | Improve this Doc View Source Host The Host HTTP header. Declaration public const string Host = \"Host\" Field Value Type Description String | Improve this Doc View Source IfMatch The If-Match HTTP header. Declaration public const string IfMatch = \"If-Match\" Field Value Type Description String | Improve this Doc View Source IfModifiedSince The If-Modified-Since HTTP header. Declaration public const string IfModifiedSince = \"If-Modified-Since\" Field Value Type Description String | Improve this Doc View Source IfNoneMatch The If-None-Match HTTP header. Declaration public const string IfNoneMatch = \"If-None-Match\" Field Value Type Description String | Improve this Doc View Source IfRange The If-Range HTTP header. Declaration public const string IfRange = \"If-Range\" Field Value Type Description String | Improve this Doc View Source IfUnmodifiedSince The If-Unmodified-Since HTTP header. Declaration public const string IfUnmodifiedSince = \"If-Unmodified-Since\" Field Value Type Description String | Improve this Doc View Source KeepAlive The Keep-Alive HTTP header. Declaration public const string KeepAlive = \"Keep-Alive\" Field Value Type Description String | Improve this Doc View Source LastModified The Last-Modified HTTP header. Declaration public const string LastModified = \"Last-Modified\" Field Value Type Description String | Improve this Doc View Source Location The Location HTTP header. Declaration public const string Location = \"Location\" Field Value Type Description String | Improve this Doc View Source MaxForwards The Max-Forwards HTTP header. Declaration public const string MaxForwards = \"Max-Forwards\" Field Value Type Description String | Improve this Doc View Source MimeVersion The MIME-Version HTTP header. Declaration public const string MimeVersion = \"MIME-Version\" Field Value Type Description String | Improve this Doc View Source Pragma The Pragma HTTP header. Declaration public const string Pragma = \"Pragma\" Field Value Type Description String | Improve this Doc View Source ProxyAuthenticate The Proxy-Authenticate HTTP header. Declaration public const string ProxyAuthenticate = \"Proxy-Authenticate\" Field Value Type Description String | Improve this Doc View Source ProxyAuthorization The Proxy-Authorization HTTP header. Declaration public const string ProxyAuthorization = \"Proxy-Authorization\" Field Value Type Description String | Improve this Doc View Source ProxyConnection The Proxy-Connection HTTP header. Declaration public const string ProxyConnection = \"Proxy-Connection\" Field Value Type Description String | Improve this Doc View Source Range The Range HTTP header. Declaration public const string Range = \"Range\" Field Value Type Description String | Improve this Doc View Source Referer The Referer HTTP header. Declaration public const string Referer = \"Referer\" Field Value Type Description String | Improve this Doc View Source RetryAfter The Retry-After HTTP header. Declaration public const string RetryAfter = \"Retry-After\" Field Value Type Description String | Improve this Doc View Source Server The Server HTTP header. Declaration public const string Server = \"Server\" Field Value Type Description String | Improve this Doc View Source SetCookie The Set-Cookie HTTP header. Declaration public const string SetCookie = \"Set-Cookie\" Field Value Type Description String | Improve this Doc View Source SetCookie2 The Set-Cookie2 HTTP header. Declaration public const string SetCookie2 = \"Set-Cookie2\" Field Value Type Description String | Improve this Doc View Source TE The TE HTTP header. Declaration public const string TE = \"TE\" Field Value Type Description String | Improve this Doc View Source Trailer The Trailer HTTP header. Declaration public const string Trailer = \"Trailer\" Field Value Type Description String | Improve this Doc View Source TransferEncoding The Transfer-Encoding HTTP header. Declaration public const string TransferEncoding = \"Transfer-Encoding\" Field Value Type Description String | Improve this Doc View Source Upgrade The Upgrade HTTP header. Declaration public const string Upgrade = \"Upgrade\" Field Value Type Description String | Improve this Doc View Source UserAgent The User-Agent HTTP header. Declaration public const string UserAgent = \"User-Agent\" Field Value Type Description String | Improve this Doc View Source Vary The Vary HTTP header. Declaration public const string Vary = \"Vary\" Field Value Type Description String | Improve this Doc View Source Via The Via HTTP header. Declaration public const string Via = \"Via\" Field Value Type Description String | Improve this Doc View Source Warning The Warning HTTP header. Declaration public const string Warning = \"Warning\" Field Value Type Description String | Improve this Doc View Source WWWAuthenticate The WWW-Authenticate HTTP header. Declaration public const string WWWAuthenticate = \"WWW-Authenticate\" Field Value Type Description String"
  },
  "api/System.Net.HttpListener.html": {
    "href": "api/System.Net.HttpListener.html",
    "title": "Class HttpListener | nanoFramework Documentation",
    "keywords": "Class HttpListener Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited. Inheritance Object HttpListener Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpListener Remarks This class enables using a socket to receive data that uses the HTTP protocol. Constructors | Improve this Doc View Source HttpListener(String) Creates an HTTP or HTTPS listener on the standard ports. Declaration public HttpListener(string prefix) Parameters Type Name Description String prefix Prefix ( http or https ) to start listen Remarks In the desktop version of .NET, the constructor for this class has no arguments. | Improve this Doc View Source HttpListener(String, Int32) Creates an HTTP or HTTPS listener on the specified port. Declaration public HttpListener(string prefix, int port) Parameters Type Name Description String prefix The prefix for the service, either \"http\" or \"https\". Int32 port The port to start listening on. If -1, the default port is used (port 80 for http, or port 443 for https). Remarks In the desktop version of .NET, the constructor for this class has no arguments. Properties | Improve this Doc View Source HttpsCert The certificate used if HttpListener implements an https server. Declaration public X509Certificate HttpsCert { get; set; } Property Value Type Description X509Certificate | Improve this Doc View Source IsListening Gets whether the HttpListener service was started and is waiting for client connections. Declaration public bool IsListening { get; } Property Value Type Description Boolean true if the HttpListener was started; otherwise, false . | Improve this Doc View Source MaximumResponseHeadersLength Gets or sets the maximum allowed length of the response headers, in KB. Declaration public int MaximumResponseHeadersLength { get; set; } Property Value Type Description Int32 The length, in kilobytes (1024 bytes), of the response headers. Remarks The length of the response header includes the response status line and any extra control characters that are received as part of the HTTP protocol. A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail. If this property is not explicitly set, it defaults to 4 (KB). | Improve this Doc View Source SslProtocols Gets or sets the TLS/SSL protocol used by the HttpListener class. Declaration public SslProtocols SslProtocols { get; set; } Property Value Type Description SslProtocols One of the values defined in the SslProtocols enumeration. Remarks This property is specific to nanoFramework. There is no equivalent in the .NET API. Methods | Improve this Doc View Source Abort() Shuts down the HttpListener object immediately, discarding all currently queued requests. Declaration public void Abort() Remarks This method disposes of all resources held by this listener. Any pending requests are unable to complete. To shut down the HttpListener object after processing currently queued requests, use the Close() method. After calling this method, you will receive an ObjectDisposedException if you attempt to use this HttpListener . | Improve this Doc View Source Close() Shuts down the HttpListener after processing all currently queued requests. Declaration public void Close() Remarks After calling this method, you can no longer use the HttpListener object. To temporarily pause an HttpListener object, use the Stop() method. | Improve this Doc View Source GetContext() Waits for an incoming request and returns when one is received. Declaration public HttpListenerContext GetContext() Returns Type Description HttpListenerContext An HttpListenerContext object that represents a client request. Examples This example shows how to call the GetContext method. HttpListener myListener = new HttpListener(\"http\", -1); myListener.Start(); while (true) { HttpListenerResponse response = null; try { Debug.Print(\"Waiting for requests\"); HttpListenerContext context = myListener.GetContext(); Exceptions Type Condition SocketException A socket call failed. Check the exception's ErrorCode property to determine the cause of the exception. InvalidOperationException This object has not been started or is currently stopped or The HttpListener does not have any Uniform Resource Identifier (URI) prefixes to respond to. ObjectDisposedException This object is closed. | Improve this Doc View Source Start() Allows this instance to receive incoming requests. Declaration public void Start() Remarks This method must be called before you call the GetContext() method. If the service was already started, the call has no effect. After you have started an HttpListener object, you can use the Stop() method to stop it. | Improve this Doc View Source Stop() Causes this instance to stop receiving incoming requests. Declaration public void Stop() Remarks If this instance is already stopped, calling this method has no effect. After you have stopped an HttpListener object, you can use the Start() method to restart it."
  },
  "api/System.Net.HttpListenerContext.html": {
    "href": "api/System.Net.HttpListenerContext.html",
    "title": "Class HttpListenerContext | nanoFramework Documentation",
    "keywords": "Class HttpListenerContext Provides access to the request and response objects used by the HttpListener class. This class cannot be inherited. Inheritance Object HttpListenerContext Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpListenerContext Properties | Improve this Doc View Source Request Gets the HttpListenerRequest that represents a client's request for a resource. Declaration public HttpListenerRequest Request { get; } Property Value Type Description HttpListenerRequest An HttpListenerRequest object that represents the client request. | Improve this Doc View Source Response Gets the HttpListenerResponse object that will be sent to the client in response to the client's request. Declaration public HttpListenerResponse Response { get; } Property Value Type Description HttpListenerResponse An HttpListenerResponse object used to send a response back to the client. Methods | Improve this Doc View Source Close() Declaration public void Close() | Improve this Doc View Source Close(Int32) Closes the stream attached to this listener context. Declaration public void Close(int lingerValue) Parameters Type Name Description Int32 lingerValue | Improve this Doc View Source Reset() Declaration public void Reset()"
  },
  "api/System.Net.HttpListenerRequest.html": {
    "href": "api/System.Net.HttpListenerRequest.html",
    "title": "Class HttpListenerRequest | nanoFramework Documentation",
    "keywords": "Class HttpListenerRequest Describes an incoming HTTP request to an HttpListener object. Inheritance Object HttpListenerRequest Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpListenerRequest Remarks When a client makes a request to a Uniform Resource Identifier (URI) handled by an HttpListener object, the HttpListener provides an HttpListenerContext object that contains information about the sender, the request, and the response that is sent to the client. The Request property returns the HttpListenerRequest object that describes the request. The HttpListenerRequest object contains information about the request, such as the request HttpMethod string, UserAgent string, and request body data (see the InputStream property). To reply to the request, you must get the associated response using the Response property. Properties | Improve this Doc View Source AcceptTypes Gets the MIME types accepted by the client. Declaration public string[] AcceptTypes { get; } Property Value Type Description String [] A String array that contains the type names specified in the request's Accept header, or a null reference if the client request did not include an Accept header. | Improve this Doc View Source ContentLength64 Gets the length of the body data included in the request. Declaration public long ContentLength64 { get; } Property Value Type Description Int64 The value from the request's Content-Length header. This value is -1 if the content length is not known. Remarks The Content-Length header expresses the length, in bytes, of the body data that accompanies the request. enumeration. | Improve this Doc View Source ContentType Gets the MIME type of the body data included in the request. Declaration public string ContentType { get; } Property Value Type Description String A String that contains the text of the request's Content-Type header. | Improve this Doc View Source Credentials Return NetworkCredential if user have send user name and password. Declaration public NetworkCredential Credentials { get; } Property Value Type Description NetworkCredential | Improve this Doc View Source Headers Gets the collection of header name/value pairs sent in the request. Declaration public WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection A WebHeaderCollection that contains the HTTP headers included in the request. | Improve this Doc View Source HttpMethod Gets the HTTP method specified by the client. Declaration public string HttpMethod { get; } Property Value Type Description String A String that contains the method used in the request. | Improve this Doc View Source InputStream Gets a stream that contains the body data sent by the client. Declaration public Stream InputStream { get; } Property Value Type Description Stream A readable Stream object that contains the bytes sent by the client in the body of the request. This property returns Null if no data is sent with the request. | Improve this Doc View Source IsAuthenticated Gets a Boolean value that indicates whether the client sending this request is authenticated. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean Because authentication is not supported, returns false . Remarks Because authentication is not supported, returns false . | Improve this Doc View Source KeepAlive Gets a Boolean value that indicates whether the client requests a persistent connection. Declaration public bool KeepAlive { get; } Property Value Type Description Boolean true if the connection should be kept open; otherwise, false . Remarks This property is set during parsing of HTTP header. | Improve this Doc View Source LocalEndPoint Gets the server IP address and port number to which the request is directed. Not currently supported. Declaration public IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint An IPEndPoint that represents the IP address that the request is sent to. | Improve this Doc View Source ProtocolVersion Gets the HTTP version used by the requesting client. Declaration public Version ProtocolVersion { get; } Property Value Type Description Version A Version that identifies the client's version of HTTP. Remarks The capabilities of different HTTP versions are specified in the documents available at http://www.rfc-editor.org . | Improve this Doc View Source RawUrl Gets the URL information (without the host and port) requested by the client. Declaration public string RawUrl { get; } Property Value Type Description String A String that contains the raw URL for this request. Remarks This URL information is the URL requested in the first request line. | Improve this Doc View Source RemoteEndPoint Gets the client IP address and port number from which the request originated. Declaration public IPEndPoint RemoteEndPoint { get; } Property Value Type Description IPEndPoint An IPEndPoint that represents the IP address and port number from which the request originated. | Improve this Doc View Source Url Gets the Uri object requested by the client. Not currently supported. Declaration public Uri Url { get; } Property Value Type Description Uri | Improve this Doc View Source UserAgent Gets the user agent presented by the client. Declaration public string UserAgent { get; } Property Value Type Description String A String object that contains the text of the request's User-Agent header. | Improve this Doc View Source UserHostAddress Gets the server IP address and port number to which the request is directed. Declaration public string UserHostAddress { get; } Property Value Type Description String A String that contains the host address information. | Improve this Doc View Source UserHostName Gets the DNS name and, if provided, the port number specified by the client. Declaration public string UserHostName { get; } Property Value Type Description String A String value that contains the text of the request's Host header. | Improve this Doc View Source UserLanguages Gets the natural languages that are preferred for the response. Declaration public string[] UserLanguages { get; } Property Value Type Description String [] A String array that contains the languages specified in the request's AcceptLanguage header, or null if the client request did not include an AcceptLanguage header. Methods | Improve this Doc View Source Reset() Declaration public void Reset()"
  },
  "api/System.Net.HttpListenerResponse.html": {
    "href": "api/System.Net.HttpListenerResponse.html",
    "title": "Class HttpListenerResponse | nanoFramework Documentation",
    "keywords": "Class HttpListenerResponse Represents a response to a request being handled by an HttpListener object. Inheritance Object HttpListenerResponse Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public sealed class HttpListenerResponse : IDisposable Properties | Improve this Doc View Source ContentEncoding Gets or sets the encoding for this response's OutputStream . Declaration public Encoding ContentEncoding { get; set; } Property Value Type Description Encoding An Encoding object suitable for use with the data in the OutputStream property, or null reference if no encoding is specified. Remarks Only UTF8 encoding is supported. | Improve this Doc View Source ContentLength64 Gets or sets the number of bytes in the body data included in the response. Declaration public long ContentLength64 { get; set; } Property Value Type Description Int64 The value of the response's Content-Length header. | Improve this Doc View Source ContentType Gets or sets the MIME type of the returned content. Declaration public string ContentType { get; set; } Property Value Type Description String A String instance that contains the text of the response's Content-Type header. | Improve this Doc View Source Headers Gets or sets the collection of header name/value pairs that is returned by the server. Declaration public WebHeaderCollection Headers { get; set; } Property Value Type Description WebHeaderCollection A WebHeaderCollection instance that contains all the explicitly set HTTP headers to be included in the response. | Improve this Doc View Source KeepAlive Gets or sets whether the server requests a persistent connection. Declaration public bool KeepAlive { get; set; } Property Value Type Description Boolean true if the server requests a persistent connection; otherwise, false . The default is true . | Improve this Doc View Source OutputStream Gets a Stream object to which a response can be written. Declaration public Stream OutputStream { get; } Property Value Type Description Stream A Stream object to which a response can be written. Remarks The first write to the output stream sends a response to the client. | Improve this Doc View Source ProtocolVersion Gets or sets the HTTP version that is used for the response. Declaration public Version ProtocolVersion { get; set; } Property Value Type Description Version A Version object indicating the version of HTTP used when responding to the client. This property is obsolete. | Improve this Doc View Source RedirectLocation Gets or sets the value of the HTTP Location header in this response. Declaration public string RedirectLocation { get; set; } Property Value Type Description String A String that contains the absolute URL to be sent to the client in the Location header. | Improve this Doc View Source SendChunked Gets or sets whether the response uses chunked transfer encoding. Declaration public bool SendChunked { get; set; } Property Value Type Description Boolean true if the response is set to use chunked transfer encoding; otherwise, false . The default is false . | Improve this Doc View Source StatusCode Gets or sets the HTTP status code to be returned to the client. Declaration public int StatusCode { get; set; } Property Value Type Description Int32 An Int32 value that specifies the HttpStatusCode for the requested resource. The default is OK , indicating that the server successfully processed the client's request and included the requested resource in the response body. | Improve this Doc View Source StatusDescription Gets or sets a text description of the HTTP status code that is returned to the client. Declaration public string StatusDescription { get; set; } Property Value Type Description String The text description of the HTTP status code returned to the client. Methods | Improve this Doc View Source Close() Sends the response to the client and releases the resources held by this HttpListenerResponse instance. Declaration public void Close() Remarks This method flushes data to the client and closes the network connection. | Improve this Doc View Source Detach() Declaration public void Detach() | Improve this Doc View Source Finalize() Called to close the socket if necessary. Declaration protected void Finalize() Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Closes the socket and sends the response if it was not done earlier and the socket is present. Declaration void IDisposable.Dispose() Implements IDisposable"
  },
  "api/System.Net.HttpStatusCode.html": {
    "href": "api/System.Net.HttpStatusCode.html",
    "title": "Enum HttpStatusCode | nanoFramework Documentation",
    "keywords": "Enum HttpStatusCode Contains the values of status codes defined for HTTP. Namespace : System.Net Assembly : System.Net.Http.dll Syntax public enum HttpStatusCode Remarks Status codes indicate categories, as follows: 1xx -- Informational. 2xx -- Successful. 3xx -- Redirection. 4xx -- Client Error. 5xx -- Server Error. Fields Name Description Accepted Equivalent to HTTP status 202. Indicates that the request has been accepted for further processing. Ambiguous Equivalent to HTTP status 300. Indicates that the requested information has multiple representations. The default action is to treat this status as a redirect and follow the contents of the Location header associated with this response. If the AllowAutoRedirect property is false , Ambiguous will cause an exception to be thrown. Ambiguous is a synonym for MultipleChoices . BadGateway Equivalent to HTTP status 502. Indicates that an intermediate proxy server received a bad response from another proxy or the origin server. BadRequest Equivalent to HTTP status 400. Indicates that the request could not be understood by the server. BadRequest is sent when no other error is applicable, or if the exact error is unknown or does not have its own error code. Conflict Equivalent to HTTP status 409. Indicates that the request could not be carried out because of a conflict on the server. Continue Equivalent to HTTP status 100. Indicates that the client can continue with its request. Created Equivalent to HTTP status 201. Indicates that the request resulted in a new resource created before the response was sent. ExpectationFailed Equivalent to HTTP status 417. Indicates that an expectation given in an Expect header could not be met by the server. Forbidden Equivalent to HTTP status 403. Indicates that the server refuses to fulfill the request. Found Equivalent to HTTP status 302. Indicates that the requested information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method. If the AllowAutoRedirect property is false , Found will cause an exception to be thrown. Found is a synonym for Redirect . GatewayTimeout Equivalent to HTTP status 504. Indicates that an intermediate proxy server timed out while waiting for a response from another proxy or the origin server. Gone Equivalent to HTTP status 410. Indicates that the requested resource is no longer available. HttpVersionNotSupported Equivalent to HTTP status 505. Indicates that the requested HTTP version is not supported by the server. InternalServerError Equivalent to HTTP status 500. Indicates that a generic error has occurred on the server. LengthRequired Equivalent to HTTP status 411. Indicates that the required Content-length header is missing. MethodNotAllowed Equivalent to HTTP status 405. Indicates that the request method (POST or GET) is not allowed on the requested resource. Moved Equivalent to HTTP status 301. Indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method. Moved is a synonym for MovedPermanently . MovedPermanently Equivalent to HTTP status 301. Indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. MovedPermanently is a synonym for Moved . MultipleChoices Equivalent to HTTP status 300. Indicates that the requested information has multiple representations. The default action is to treat this status as a redirect and follow the contents of the Location header associated with this response. If the AllowAutoRedirect property is false , MultipleChoices will cause an exception to be thrown. MultipleChoices is a synonym for Ambiguous . NoContent Equivalent to HTTP status 204. Indicates that the request has been successfully processed and that the response is intentionally blank. NonAuthoritativeInformation Equivalent to HTTP status 203. Indicates that the returned metainformation is from a cached copy instead of the origin server and therefore may be incorrect. NotAcceptable Equivalent to HTTP status 406. Indicates that the client has indicated with Accept headers that it will not accept any of the available representations of the resource. NotFound Equivalent to HTTP status 404. Indicates that the requested resource does not exist on the server. NotImplemented Equivalent to HTTP status 501. Indicates that the server does not support the requested function. NotModified Equivalent to HTTP status 304. Indicates that the client's cached copy is up-to-date. The contents of the resource are not transferred. OK Equivalent to HTTP status 200. Indicates that the request succeeded and that the requested information is in the response. This is the most common status code to receive. PartialContent Equivalent to HTTP status 206. Indicates that the response is a partial response as requested by a GET request that includes a byte range. PaymentRequired Equivalent to HTTP status 402. Reserved for future use. PreconditionFailed Equivalent to HTTP status 412. Indicates that a condition set for this request failed, and the request cannot be carried out. Conditions are set with conditional request headers like If-Match, If-None-Match, or If-Unmodified-Since. ProxyAuthenticationRequired Equivalent to HTTP status 407. Indicates that the requested proxy requires authentication. The Proxy-authenticate header contains the details of how to perform the authentication. Redirect Equivalent to HTTP status 302. Indicates that the requested information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method. If the AllowAutoRedirect property is false , Redirect will cause an exception to be thrown. Redirect is a synonym for Found . RedirectKeepVerb Equivalent to HTTP status 307. Indicates that the request information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will also use the POST method. If the AllowAutoRedirect property is false , RedirectKeepVerb will cause an exception to be thrown. RedirectKeepVerb is a synonym for TemporaryRedirect . RedirectMethod Equivalent to HTTP status 303. Automatically redirects the client to the URI specified in the Location header as the result of a POST. The request to the resource specified by the Location header will be made with a GET. If the AllowAutoRedirect property is false , RedirectMethod will cause an exception to be thrown. RedirectMethod is a synonym for SeeOther . RequestedRangeNotSatisfiable Equivalent to HTTP status 416. Indicates that the range of data requested from the resource cannot be returned, either because the beginning of the range is before the beginning of the resource, or the end of the range is after the end of the resource. RequestEntityTooLarge Equivalent to HTTP status 413. Indicates that the request is too large for the server to process. RequestTimeout Equivalent to HTTP status 408. Indicates that the client did not send a request within the time the server was expecting the request. RequestUriTooLong Equivalent to HTTP status 414. Indicates that the URI is too long. ResetContent Equivalent to HTTP status 205. Indicates that the client should reset (not reload) the current resource. SeeOther Equivalent to HTTP status 303. Automatically redirects the client to the URI specified in the Location header as the result of a POST. The request to the resource specified by the Location header will be made with a GET. If the AllowAutoRedirect property is false , SeeOther will cause an exception to be thrown. SeeOther is a synonym for RedirectMethod . ServiceUnavailable Equivalent to HTTP status 503. Indicates that the server is temporarily unavailable, usually due to high load or maintenance. SwitchingProtocols Equivalent to HTTP status 101. Indicates that the protocol version or protocol is being changed. TemporaryRedirect Equivalent to HTTP status 307. Indicates that the request information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will also use the POST method. If the AllowAutoRedirect property is false , TemporaryRedirect will cause an exception to be thrown. TemporaryRedirect is a synonym for RedirectKeepVerb . Unauthorized Equivalent to HTTP status 401. Indicates that the requested resource requires authentication. The WWW-Authenticate header contains the details of how to perform the authentication. UnsupportedMediaType Equivalent to HTTP status 415. Indicates that the request is an unsupported type. Unused Equivalent to HTTP status 306. This value is a proposed extension to the HTTP/1.1 specification that is not fully specified. UseProxy Equivalent to HTTP status 305. Indicates that the request should use the proxy server at the URI specified in the Location header."
  },
  "api/System.Net.HttpVersion.html": {
    "href": "api/System.Net.HttpVersion.html",
    "title": "Class HttpVersion | nanoFramework Documentation",
    "keywords": "Class HttpVersion Defines the HTTP version numbers that are supported by the HttpWebRequest and HttpWebResponse classes. Inheritance Object HttpVersion Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpVersion Fields | Improve this Doc View Source Version10 Defines a Version instance for HTTP 1.0. Declaration public static readonly Version Version10 Field Value Type Description Version | Improve this Doc View Source Version11 Defines a Version instance for HTTP 1.1. Declaration public static readonly Version Version11 Field Value Type Description Version"
  },
  "api/System.Net.HttpWebRequest.html": {
    "href": "api/System.Net.HttpWebRequest.html",
    "title": "Class HttpWebRequest | nanoFramework Documentation",
    "keywords": "Class HttpWebRequest Provides an HTTP-specific implementation of the WebRequest class. Inheritance Object MarshalByRefObject WebRequest HttpWebRequest Implements IDisposable Inherited Members WebRequest.Initialize() WebRequest.Dispose() WebRequest.ConnectionGroupName WebRequest.DefaultWebProxy WebRequest.Create(String) WebRequest.Create(Uri) WebRequest.RegisterPrefix(String, IWebRequestCreate) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpWebRequest : WebRequest, IDisposable Remarks This class does the main work of the request: it collects the header information from the user, exposes the Stream for outgoing entity data, and processes the incoming request. Properties | Improve this Doc View Source Accept Gets or sets the value of the Accept HTTP header. Declaration public string Accept { get; set; } Property Value Type Description String The value of the Accept HTTP header. The default value is null . | Improve this Doc View Source Address Gets the URI for this request. Declaration public Uri Address { get; } Property Value Type Description Uri A Uri that identifies the Internet resource that actually responds to the request. The default is the URI used by the WebRequest. Create(Uri) method to initialize the request. Remarks This value is always the same as the RequestUri property, because automatic re-direction isn't supported. | Improve this Doc View Source AllowAutoRedirect Gets a value that indicates whether the request should follow redirection responses. This value is always false , because Autodirect isn't supported. Declaration public bool AllowAutoRedirect { get; } Property Value Type Description Boolean This value is always false , because Autodirect isn't supported. | Improve this Doc View Source AllowWriteStreamBuffering Gets or sets a value that indicates whether to buffer the data sent to the Internet resource. Declaration public bool AllowWriteStreamBuffering { get; set; } Property Value Type Description Boolean true to enable buffering of the data sent to the Internet resource; false to disable buffering. The default is true . | Improve this Doc View Source ContentLength Gets or sets the Content-Length of the request entity body. Declaration public override long ContentLength { get; set; } Property Value Type Description Int64 The number of bytes of data to send to the Internet resource. The default is -1, which indicates the property has not been set and that there is no request data to send. Overrides WebRequest.ContentLength Remarks Getting this property returns the last value set, or -1 if no value has been set. Setting it sets the content length, and the application must write that much data to the stream. This property interacts with HttpWebRequest . SendChunked . | Improve this Doc View Source ContentType Gets or sets the type of the entity body (the value of the content type). Declaration public override string ContentType { get; set; } Property Value Type Description String The value of the Content-type HTTP header. The default value is null . Overrides WebRequest.ContentType Remarks Setting to null clears the content-type. | Improve this Doc View Source ContinueDelegate Gets or sets the delegate used to signal on Continue callback. Declaration public HttpContinueDelegate ContinueDelegate { get; set; } Property Value Type Description HttpContinueDelegate A delegate that implements the callback method that executes when an HTTP Continue response is returned from the Internet resource. The default value is null . Remarks This property gets or sets the delegate method called when an HTTP 100-continue response is received from the Internet resource. | Improve this Doc View Source Credentials Set or Get NetworkCredential if user have send user name and password. Declaration public NetworkCredential Credentials { get; set; } Property Value Type Description NetworkCredential | Improve this Doc View Source DefaultMaximumResponseHeadersLength Gets or sets the default maximum allowed length of the response headers. Declaration public static int DefaultMaximumResponseHeadersLength { get; set; } Property Value Type Description Int32 The default maximum allowed length of the response headers. Remarks On creation of an HttpWebRequest instance, this value is used for the MaximumResponseHeadersLength property. | Improve this Doc View Source Expect Gets or sets the value of the Expect HTTP header. Declaration public string Expect { get; set; } Property Value Type Description String The contents of the Expect HTTP header. The default value is null . Remarks When setting this property, null clears the Expect (except for the 100-continue value). | Improve this Doc View Source HaveResponse Gets whether a response has been received from an Internet resource. Declaration public bool HaveResponse { get; } Property Value Type Description Boolean true if a response has been received; otherwise, false . | Improve this Doc View Source Headers A collection of HTTP headers stored as name/value pairs. Declaration public override WebHeaderCollection Headers { get; set; } Property Value Type Description WebHeaderCollection A WebHeaderCollection that contains the name/value pairs that make up the headers for the HTTP request. Overrides WebRequest.Headers Remarks The following header values are set through properties on the HttpWebRequest class: Accept, Connection, Content-Length, Content-Type, Expect, Range, Referer, Transfer-Encoding, and User-Agent. Trying to set these header values by using WebHeaderCollection. Add(String, String) () will raise an exception. Date and Host are set internally. | Improve this Doc View Source HttpsAuthentCert Gets or sets the root CA certificate used to authenticate with https servers. This certificate is used only for https connections; http connections do not require this. Declaration public X509Certificate HttpsAuthentCert { get; set; } Property Value Type Description X509Certificate | Improve this Doc View Source IfModifiedSince Gets the IfModifiedSince value of HttpKnownHeaderNames . Declaration public DateTime IfModifiedSince { get; } Property Value Type Description DateTime A DateTime that contains the contents of the If-Modified-Since HTTP header. The default value is the current date and time. Remarks The setter for this property isn't supported, because a function that formats the time isn't implemented. null clears the IfModifiedSince header. | Improve this Doc View Source KeepAlive Gets or sets whether to use a persistent connection, if available. Declaration public bool KeepAlive { get; set; } Property Value Type Description Boolean true if the request to the Internet resource should contain a Connection HTTP header with the value Keep-alive; otherwise, false . The default is true . | Improve this Doc View Source MaximumAutomaticRedirections Gets the maximum number of automatic redirections. This value is always zero, because auto-redirection isn't supported. Declaration public int MaximumAutomaticRedirections { get; } Property Value Type Description Int32 This value is always zero, because auto-redirection isn't supported. | Improve this Doc View Source MaximumResponseHeadersLength Gets or sets the maximum allowed length of the response headers. Declaration public int MaximumResponseHeadersLength { get; set; } Property Value Type Description Int32 The length, in kilobytes (1024 bytes), of the response headers. Remarks The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol. A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail. If this property is not explicitly set, it defaults to the value of the DefaultMaximumResponseHeadersLength property. | Improve this Doc View Source Method Gets or sets the HTTP method of this request. Declaration public override string Method { get; set; } Property Value Type Description String The request method to use to contact the Internet resource. The default value is GET. Overrides WebRequest.Method Remarks This method represents the initial origin verb, which is unchanged and unaffected by redirects. | Improve this Doc View Source ProtocolVersion Gets or sets the HTTP protocol version for this request. Declaration public Version ProtocolVersion { get; set; } Property Value Type Description Version The HTTP version to use for the request. The default is Version11 . | Improve this Doc View Source Proxy Gets or sets the proxy for the request. Declaration public override IWebProxy Proxy { get; set; } Property Value Type Description IWebProxy The IWebProxy object to use to proxy the request. null indicates that no proxy will be used. Overrides WebRequest.Proxy | Improve this Doc View Source ReadWriteTimeout Gets or sets a timeout in milliseconds when writing to or reading from a stream. Declaration public int ReadWriteTimeout { get; set; } Property Value Type Description Int32 The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes). Remarks This property is used to control the timeout when calling Read(Byte[], Int32, Int32) and Write(Byte[], Int32, Int32) . This property affects Stream s returned from GetResponse(). GetResponseStream() () and GetResponse(). GetRequestStream() (). | Improve this Doc View Source Referer Gets or sets the value of the Referer HTTP header. Declaration public string Referer { get; set; } Property Value Type Description String The value of the Referer HTTP header. The default value is null . Remarks This header value is misspelled intentionally. | Improve this Doc View Source RequestUri Gets the original Uniform Resource Identifier (URI) of the request. Declaration public override Uri RequestUri { get; } Property Value Type Description Uri A Uri that contains the URI of the Internet resource passed to the WebRequest. Create(Uri) method. Overrides WebRequest.RequestUri Remarks The URI object was created by the constructor and is always non-null. The URI object will always be the base URI, because automatic re-directs aren't supported. | Improve this Doc View Source SendChunked Gets or sets the state of chunk transfer send mode. Declaration public bool SendChunked { get; set; } Property Value Type Description Boolean true to send data to the Internet resource in segments; otherwise, false . The default value is false . Remarks If true , bits are uploaded and written using the Chunked property of HttpWriteMode . | Improve this Doc View Source SslProtocols Gets or sets the TLS/SSL protocol used by the HttpWebRequest class. Declaration public SslProtocols SslProtocols { get; set; } Property Value Type Description SslProtocols One of the values defined in the SslProtocols enumeration. Remarks Setting this property is mandatory when performing HTTPS requests, otherwise the authentication will fail. This property is specific to nanoFramework. There is no equivalent in the .NET API. | Improve this Doc View Source Timeout Gets or sets the timeout value in milliseconds for the GetResponse() and GetRequestStream() methods. Declaration public override int Timeout { get; set; } Property Value Type Description Int32 The number of milliseconds to wait before the request times out. The default is 100,000 milliseconds (100 seconds). Overrides WebRequest.Timeout Remarks Overrides the Timeout property of WebRequest . | Improve this Doc View Source TransferEncoding Gets or sets the TransferEncoding HTTP header. Declaration public string TransferEncoding { get; set; } Property Value Type Description String The value of the Transfer-encoding HTTP header. The default value is null . Remarks null clears the transfer encoding except for the Chunked setting. | Improve this Doc View Source UserAgent Gets or sets the value of the User-Agent HTTP header. Declaration public string UserAgent { get; set; } Property Value Type Description String The value of the User-agent HTTP header. The default value is null . Methods | Improve this Doc View Source AddRange(Int32) Adds a range header to a request for a specific range from the beginning or end of the requested data. Declaration public void AddRange(int range) Parameters Type Name Description Int32 range Start of the range. The end of the range is the end of the existing data. | Improve this Doc View Source AddRange(Int32, Int32) Adds a byte range header to the request for a specified range. Declaration public void AddRange(int from, int to) Parameters Type Name Description Int32 from The start of the range. Int32 to The end of the range. | Improve this Doc View Source AddRange(String, Int32) Adds a range header to a request for a specific range from the beginning or end of the requested data. Declaration public void AddRange(string rangeSpecifier, int range) Parameters Type Name Description String rangeSpecifier The description of the range, such as \"bytes\". Int32 range The range value. | Improve this Doc View Source AddRange(String, Int32, Int32) Adds a range header to a request for a specified range. Declaration public void AddRange(string rangeSpecifier, int from, int to) Parameters Type Name Description String rangeSpecifier The description of the range, such as \"bytes\". Int32 from The start of the range. Int32 to The end of the range. Remarks rangeSpecifier would normally be specified as \"bytes\", since this is the only range specifier recognized by most HTTP servers. Setting rangeSpecifier to some other string allows support for custom range specifiers other than bytes. The byte-range specifier is defined in RFC 2616 by the IETF. | Improve this Doc View Source Dispose(Boolean) Closes a response stream, if present. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Not used. Overrides WebRequest.Dispose(Boolean) | Improve this Doc View Source GetRequestStream() Submits a request with HTTP headers to the server, and returns a Stream object to use to write request data. Declaration public override Stream GetRequestStream() Returns Type Description Stream A Stream to use to write request data. Overrides WebRequest.GetRequestStream() Remarks Used for POST of PUT requests. | Improve this Doc View Source GetResponse() Returns a response from an Internet resource. Overrides the WebRequest . GetResponse() method. Declaration public override WebResponse GetResponse() Returns Type Description WebResponse The response from the Internet resource. Overrides WebRequest.GetResponse() | Improve this Doc View Source Reset() Reset Declaration public void Reset() Implements IDisposable"
  },
  "api/System.Net.HttpWebResponse.html": {
    "href": "api/System.Net.HttpWebResponse.html",
    "title": "Class HttpWebResponse | nanoFramework Documentation",
    "keywords": "Class HttpWebResponse Handles retrieval of HTTP Response headers, and handles data reads. Inheritance Object MarshalByRefObject WebResponse HttpWebResponse Implements IDisposable Inherited Members WebResponse.Close() WebResponse.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpWebResponse : WebResponse, IDisposable Remarks This class should never be created directly, but rather should be created by the HttpWebRequest . GetResponse() method. Properties | Improve this Doc View Source ContentEncoding Gets the method that is used to encode the body of the response. Declaration public string ContentEncoding { get; } Property Value Type Description String A string that describes the method that is used to encode the body of the response. Remarks This property contains the value of the Content-Encoding header returned with the response; that is, the encoding used for the response. | Improve this Doc View Source ContentLength Gets the length of the content returned by the request. Declaration public override long ContentLength { get; } Property Value Type Description Int64 The number of bytes returned by the request. Content length does not include header information. Overrides WebResponse.ContentLength Remarks This property contains the value of the Content-Length header that is returned with the response. If the Content-Length header is not set in the response, this property is set to -1. | Improve this Doc View Source ContentType Gets the content type of the response. Declaration public override string ContentType { get; } Property Value Type Description String A string that contains the content type of the response. Overrides WebResponse.ContentType Remarks This property contains the value of the Content-Type header returned with the response. | Improve this Doc View Source Headers Retrieves a response header object. Declaration public override WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection A WebHeaderCollection that contains the header information returned with the response. Overrides WebResponse.Headers | Improve this Doc View Source LastModified Gets the value of the Last-Modified header, which indicates the last time the document was modified. Declaration public DateTime LastModified { get; } Property Value Type Description DateTime A DateTime that contains the date and time that the contents of the response were modified. | Improve this Doc View Source Method Gets the method that is used to return the response. Declaration public string Method { get; } Property Value Type Description String A string that contains the HTTP method that is used to return the response. | Improve this Doc View Source ProtocolVersion Gets the version of the HTTP protocol that is used in the response. Declaration public Version ProtocolVersion { get; } Property Value Type Description Version A Version that contains the HTTP protocol version of the response. | Improve this Doc View Source ResponseUri Gets the final Response URI, that includes any changes that may have transpired from the orginal Request. Declaration public override Uri ResponseUri { get; } Property Value Type Description Uri A Uri that contains the URI of the Internet resource that responded to the request. Overrides WebResponse.ResponseUri | Improve this Doc View Source Server Gets the name of the server that sent the response. Declaration public string Server { get; } Property Value Type Description String A string that contains the name of the server that sent the response. | Improve this Doc View Source StatusCode Gets the status of the HTTP response, as a number. Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode One of the HttpStatusCode values. Remarks For status code values, see HttpStatusCode . | Improve this Doc View Source StatusDescription Gets the status description returned with the response. Declaration public string StatusDescription { get; } Property Value Type Description String A string that describes the status of the response. Methods | Improve this Doc View Source Dispose(Boolean) Closes a response stream, if present. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Not used. Overrides WebResponse.Dispose(Boolean) | Improve this Doc View Source GetResponseHeader(String) Gets the contents of a header that was returned with the response. Declaration public string GetResponseHeader(string headerName) Parameters Type Name Description String headerName HTTP header to search for matching header on. Returns Type Description String The matched entry, if found. | Improve this Doc View Source GetResponseStream() Gets the stream used for reading the body of the response from the server. Declaration public override Stream GetResponseStream() Returns Type Description Stream A network stream to read body of the message. Overrides WebResponse.GetResponseStream() Implements IDisposable"
  },
  "api/System.Net.IPAddress.html": {
    "href": "api/System.Net.IPAddress.html",
    "title": "Class IPAddress | nanoFramework Documentation",
    "keywords": "Class IPAddress Provides an internet protocol (IP) address. Inheritance Object IPAddress Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax [Serializable] public class IPAddress Constructors | Improve this Doc View Source IPAddress(Byte[]) Initializes a new instance of the IPAddress class with the address specified as a Byte array. Declaration public IPAddress(byte[] address) Parameters Type Name Description Byte [] address | Improve this Doc View Source IPAddress(Int64) Initializes a new instance of the IPAddress class with the address specified as an Int64. Declaration public IPAddress(long newAddress) Parameters Type Name Description Int64 newAddress Fields | Improve this Doc View Source Any Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only. Declaration public static readonly IPAddress Any Field Value Type Description IPAddress | Improve this Doc View Source Loopback Provides the IP loopback address. This field is read-only. Declaration public static readonly IPAddress Loopback Field Value Type Description IPAddress Properties | Improve this Doc View Source AddressFamily Gets the address family of the IP address. Declaration public AddressFamily AddressFamily { get; } Property Value Type Description AddressFamily Returns InterNetwork for IPv4 or InterNetworkV6 for IPv6. Methods | Improve this Doc View Source Equals(Object) Compares two IP addresses. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An IPAddress instance to compare to the current instance. Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetAddressBytes() Provides a copy of the IPAddress as an array of bytes. Declaration public byte[] GetAddressBytes() Returns Type Description Byte [] A Byte array. | Improve this Doc View Source GetDefaultLocalAddress() Retrieves an IP address that is the local default address. Declaration public static IPAddress GetDefaultLocalAddress() Returns Type Description IPAddress The default IP address. | Improve this Doc View Source Parse(String) Converts an IP address string to an IPAddress instance. Declaration public static IPAddress Parse(string ipString) Parameters Type Name Description String ipString A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6. Returns Type Description IPAddress An IPAddress instance. | Improve this Doc View Source ToString() Converts an Internet address to its standard notation. Declaration public override string ToString() Returns Type Description String A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation. Overrides Object.ToString() Remarks The ToString method converts the IP address that is stored in the Address property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation."
  },
  "api/System.Net.IPEndPoint.html": {
    "href": "api/System.Net.IPEndPoint.html",
    "title": "Class IPEndPoint | nanoFramework Documentation",
    "keywords": "Class IPEndPoint Represents a network endpoint as an IP address and a port number. Inheritance Object EndPoint IPEndPoint Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax [Serializable] public class IPEndPoint : EndPoint Constructors | Improve this Doc View Source IPEndPoint(Int64, Int32) Initializes a new instance of the IPEndPoint class with the specified address and port number. Declaration public IPEndPoint(long address, int port) Parameters Type Name Description Int64 address The IP address of the Internet host. Int32 port The port number associated with the address, or 0 to specify any available port. port is in host order. | Improve this Doc View Source IPEndPoint(IPAddress, Int32) Initializes a new instance of the IPEndPoint class with the specified address and port number. Declaration public IPEndPoint(IPAddress address, int port) Parameters Type Name Description IPAddress address Int32 port Fields | Improve this Doc View Source MaxPort Specifies the maximum value that can be assigned to the Port property. The MaxPort value is set to 0x0000FFFF. This field is read-only. Declaration public const int MaxPort = 65535 Field Value Type Description Int32 | Improve this Doc View Source MinPort Specifies the minimum value that can be assigned to the Port property. This field is read-only. Declaration public const int MinPort = 0 Field Value Type Description Int32 Properties | Improve this Doc View Source Address Gets or sets the IP address of the endpoint. Declaration public IPAddress Address { get; } Property Value Type Description IPAddress An IPAddress instance containing the IP address of the endpoint. | Improve this Doc View Source AddressFamily Gets the Internet Protocol (IP) address family. Declaration public AddressFamily AddressFamily { get; } Property Value Type Description AddressFamily Returns InterNetwork . | Improve this Doc View Source Port Gets or sets the port number of the endpoint. Declaration public int Port { get; } Property Value Type Description Int32 An integer value in the range MinPort to MaxPort indicating the port number of the endpoint. Methods | Improve this Doc View Source Create(SocketAddress) Creates an endpoint from a socket address. Declaration public override EndPoint Create(SocketAddress socketAddress) Parameters Type Name Description SocketAddress socketAddress The SocketAddress to use for the endpoint. Returns Type Description EndPoint An EndPoint instance using the specified socket address. Overrides EndPoint.Create(SocketAddress) | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to the current IPEndPoint instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The specified Object to compare with the current IPEndPoint instance. Returns Type Description Boolean true if the objects are equal. Overrides Object.Equals(Object) | Improve this Doc View Source Serialize() Serializes endpoint information into a SocketAddress instance. Declaration public override SocketAddress Serialize() Returns Type Description SocketAddress A SocketAddress instance containing the socket address for the endpoint. Overrides EndPoint.Serialize() | Improve this Doc View Source ToString() Returns the IP address and port number of the specified endpoint. Declaration public override string ToString() Returns Type Description String A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80). Overrides Object.ToString()"
  },
  "api/System.Net.IPHostEntry.html": {
    "href": "api/System.Net.IPHostEntry.html",
    "title": "Class IPHostEntry | nanoFramework Documentation",
    "keywords": "Class IPHostEntry Provides a container class for Internet host address information. Inheritance Object IPHostEntry Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax public class IPHostEntry Remarks The IPHostEntry class associates a Domain Name System (DNS) host name with an array of aliases and an array of matching IP addresses. The IPHostEntry class is used as a helper class with the Dns class. Properties | Improve this Doc View Source AddressList Gets or sets a list of IP addresses that are associated with a host. Declaration public IPAddress[] AddressList { get; } Property Value Type Description IPAddress [] An array of type IPAddress that contains IP addresses that resolve to the host names that are contained in the Aliases property. | Improve this Doc View Source HostName Gets or sets the DNS name of the host. Declaration public string HostName { get; } Property Value Type Description String A string that contains the primary host name for the server. Remarks The HostName property contains the primary host name for a server. If the DNS entry for the server defines additional aliases, they will be available in the Aliases property."
  },
  "api/System.Net.IWebProxy.html": {
    "href": "api/System.Net.IWebProxy.html",
    "title": "Interface IWebProxy | nanoFramework Documentation",
    "keywords": "Interface IWebProxy Provides the base interface for implementing proxy access for the WebRequest class. Namespace : System.Net Assembly : System.Net.Http.dll Syntax public interface IWebProxy Methods | Improve this Doc View Source GetProxy(Uri) Returns the URI of a proxy. Declaration Uri GetProxy(Uri destination) Parameters Type Name Description Uri destination The destination URI. Returns Type Description Uri A Uri instance that contains the URI of the proxy used to contact destination . | Improve this Doc View Source IsBypassed(Uri) Indicates whether the proxy should not be used for the specified host. Declaration bool IsBypassed(Uri host) Parameters Type Name Description Uri host The host to check, to determine whether the proxy is needed to access it. Returns Type Description Boolean Whether the proxy should not be used for the specified host."
  },
  "api/System.Net.IWebRequestCreate.html": {
    "href": "api/System.Net.IWebRequestCreate.html",
    "title": "Interface IWebRequestCreate | nanoFramework Documentation",
    "keywords": "Interface IWebRequestCreate The interface for creating WebRequest class objects. Namespace : System.Net Assembly : System.Net.Http.dll Syntax public interface IWebRequestCreate Methods | Improve this Doc View Source Create(Uri) Creates an instance of a class derived from WebRequest . Declaration WebRequest Create(Uri uri) Parameters Type Name Description Uri uri The URI for initialization of the class that is derived from WebRequest . Returns Type Description WebRequest An instance of the class that is derived from WebRequest ."
  },
  "api/System.Net.NetworkCredential.html": {
    "href": "api/System.Net.NetworkCredential.html",
    "title": "Class NetworkCredential | nanoFramework Documentation",
    "keywords": "Class NetworkCredential Class that keeps user name and password. Inheritance Object NetworkCredential Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class NetworkCredential Constructors | Improve this Doc View Source NetworkCredential() Construct class with empty user name and password Declaration public NetworkCredential() | Improve this Doc View Source NetworkCredential(String, String) Constructs credientials and initializes them by provided user name and pssword Declaration public NetworkCredential(string userName, string password) Parameters Type Name Description String userName String password | Improve this Doc View Source NetworkCredential(String, String, AuthenticationType) Initializes a new instance of the NetworkCredential class. Declaration public NetworkCredential(string userName, string password, AuthenticationType authenticationType) Parameters Type Name Description String userName Name of the user. String password The password. AuthenticationType authenticationType Type of the authentication. Properties | Improve this Doc View Source AuthenticationType Gets or sets the type of the authentication. Declaration public AuthenticationType AuthenticationType { get; set; } Property Value Type Description AuthenticationType The type of the authentication. | Improve this Doc View Source Password Set or get password. Declaration public string Password { get; set; } Property Value Type Description String | Improve this Doc View Source UserName Set or get user name. Declaration public string UserName { get; set; } Property Value Type Description String"
  },
  "api/System.Net.NetworkInformation.AddressMode.html": {
    "href": "api/System.Net.NetworkInformation.AddressMode.html",
    "title": "Enum AddressMode | nanoFramework Documentation",
    "keywords": "Enum AddressMode Start up network IP address assigning modes Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public enum AddressMode : byte Remarks This Enum is exclusive of nanoFramework and it does not exist on the UWP API. Fields Name Description AutoIP Auto IP. DHCP IP address from DHCP. Invalid Invalid state. Static Static IP address."
  },
  "api/System.Net.NetworkInformation.AuthenticationType.html": {
    "href": "api/System.Net.NetworkInformation.AuthenticationType.html",
    "title": "Enum AuthenticationType | nanoFramework Documentation",
    "keywords": "Enum AuthenticationType Specifies the authentication used in a wireless network. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public enum AuthenticationType : byte Fields Name Description EAP Extensible Authentication Protocol. None No protocol. Open Open System authentication, for use with WEP encryption type. PEAP Protected Extensible Authentication Protocol. Shared Shared Key authentication, for use with WEP encryption type. WCN Microsoft Windows Connect Now protocol. WEP Wired Equivalent Privacy protocol. WPA Wi-Fi Protected Access protocol. WPA2 Wi-Fi Protected Access 2 protocol."
  },
  "api/System.Net.NetworkInformation.EncryptionType.html": {
    "href": "api/System.Net.NetworkInformation.EncryptionType.html",
    "title": "Enum EncryptionType | nanoFramework Documentation",
    "keywords": "Enum EncryptionType Defines the available types of encryption for wireless networks. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public enum EncryptionType : byte Fields Name Description Certificate Certificate encryption. None No encryption. WEP Wired Equivalent Privacy encryption. WPA Wireless Protected Access encryption. WPA_PSK Wireless Protected Access Pre-Shared Key encryption. WPA2 Wireless Protected Access 2 encryption. WPA2_PSK Wireless Protected Access 2 Pre-Shared Key encryption."
  },
  "api/System.Net.NetworkInformation.html": {
    "href": "api/System.Net.NetworkInformation.html",
    "title": "Namespace System.Net.NetworkInformation | nanoFramework Documentation",
    "keywords": "Namespace System.Net.NetworkInformation Classes NetworkAPStationEventArgs Contains argument values for network availability events. NetworkAvailabilityEventArgs Contains argument values for network availability events. NetworkChange Contains information about changes in the availability and address of the network. NetworkInterface Provides information about network interfaces and enables applications to control them. Wireless80211Configuration Configuration of wireless network based on the 802.11 standard. WirelessAPConfiguration Configuration of wireless network SOft AP based on the 802.11 standard. WirelessAPStation Class that encapsulates the details of a connected client. Enums AddressMode Start up network IP address assigning modes AuthenticationType Specifies the authentication used in a wireless network. EncryptionType Defines the available types of encryption for wireless networks. NetworkInterfaceType Specifies the type of network interface used by the device. PhyProtocols Enum of Phy protocols used for connection. RadioType Specifies the type of radio that the wireless network uses. Wireless80211Configuration.ConfigurationOptions Configuration flags used for Wireless configuration. WirelessAPConfiguration.ConfigurationOptions Configuration flags used for Wireless Soft AP configuration. Delegates NetworkAddressChangedEventHandler Indicates a change in the availability of the network. NetworkAPStationChangedEventHandler Indicates a change in the connected clients to Access Point. NetworkAvailabilityChangedEventHandler Provides an event handler that is called when the network address changes."
  },
  "api/System.Net.NetworkInformation.NetworkAddressChangedEventHandler.html": {
    "href": "api/System.Net.NetworkInformation.NetworkAddressChangedEventHandler.html",
    "title": "Delegate NetworkAddressChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate NetworkAddressChangedEventHandler Indicates a change in the availability of the network. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public delegate void NetworkAddressChangedEventHandler(object sender, EventArgs e); Parameters Type Name Description Object sender Specifies the object that sent the network availability changed event. EventArgs e Contains the network availability changed event arguments."
  },
  "api/System.Net.NetworkInformation.NetworkAPStationChangedEventHandler.html": {
    "href": "api/System.Net.NetworkInformation.NetworkAPStationChangedEventHandler.html",
    "title": "Delegate NetworkAPStationChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate NetworkAPStationChangedEventHandler Indicates a change in the connected clients to Access Point. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public delegate void NetworkAPStationChangedEventHandler(int NetworkIndex, NetworkAPStationEventArgs e); Parameters Type Name Description Int32 NetworkIndex Specifies the index of network interface that sent the event. NetworkAPStationEventArgs e Contains the network AP client changed event arguments."
  },
  "api/System.Net.NetworkInformation.NetworkAPStationEventArgs.html": {
    "href": "api/System.Net.NetworkInformation.NetworkAPStationEventArgs.html",
    "title": "Class NetworkAPStationEventArgs | nanoFramework Documentation",
    "keywords": "Class NetworkAPStationEventArgs Contains argument values for network availability events. Inheritance Object EventArgs NetworkAPStationEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class NetworkAPStationEventArgs : EventArgs Properties | Improve this Doc View Source IsConnected Indicates whether the client has connected or disconnected. Declaration public bool IsConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source StationIndex Returns the Index of the connected Station. Declaration public int StationIndex { get; } Property Value Type Description Int32"
  },
  "api/System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler.html": {
    "href": "api/System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler.html",
    "title": "Delegate NetworkAvailabilityChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate NetworkAvailabilityChangedEventHandler Provides an event handler that is called when the network address changes. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public delegate void NetworkAvailabilityChangedEventHandler(object sender, NetworkAvailabilityEventArgs e); Parameters Type Name Description Object sender Specifies the object that sent the network address changed event. NetworkAvailabilityEventArgs e Contains the network address changed event arguments."
  },
  "api/System.Net.NetworkInformation.NetworkAvailabilityEventArgs.html": {
    "href": "api/System.Net.NetworkInformation.NetworkAvailabilityEventArgs.html",
    "title": "Class NetworkAvailabilityEventArgs | nanoFramework Documentation",
    "keywords": "Class NetworkAvailabilityEventArgs Contains argument values for network availability events. Inheritance Object EventArgs NetworkAvailabilityEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class NetworkAvailabilityEventArgs : EventArgs Properties | Improve this Doc View Source IsAvailable Indicates whether the network is currently available. Declaration public bool IsAvailable { get; } Property Value Type Description Boolean"
  },
  "api/System.Net.NetworkInformation.NetworkChange.html": {
    "href": "api/System.Net.NetworkInformation.NetworkChange.html",
    "title": "Class NetworkChange | nanoFramework Documentation",
    "keywords": "Class NetworkChange Contains information about changes in the availability and address of the network. Inheritance Object NetworkChange Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public static class NetworkChange Events | Improve this Doc View Source NetworkAddressChanged Event occurs when the IP address of a network interface changes. Declaration public static event NetworkAddressChangedEventHandler NetworkAddressChanged Event Type Type Description NetworkAddressChangedEventHandler Remarks The NetworkChange class raises NetworkAddressChanged events when the address of a network interface, also called a network card or adapter, changes. To have a NetworkChange object call an event-handling method when a NetworkAddressChanged event occurs, you must associate the method with a NetworkAddressChangedEventHandler delegate, and add this delegate to this event. | Improve this Doc View Source NetworkAPStationChanged Event occurs when a station connects or disconnects from Soft Access Point. Declaration public static event NetworkAPStationChangedEventHandler NetworkAPStationChanged Event Type Type Description NetworkAPStationChangedEventHandler Remarks The NetworkChange class raises the NetworkAPStationChanged events when a client connects or disconnects from the Soft AP. To have a NetworkChange object call an event-handling method when a NetworkAPStationChanged event occurs, you must associate the method with a NetworkAPStationChangedEventHandler delegate, and add this delegate to this event. | Improve this Doc View Source NetworkAvailabilityChanged Event occurs when the availability of the network changes. Declaration public static event NetworkAvailabilityChangedEventHandler NetworkAvailabilityChanged Event Type Type Description NetworkAvailabilityChangedEventHandler Remarks The NetworkChange class raises NetworkAvailabilityChanged events when the availability of the network changes. The network is available when at least one network interface is marked \"up\" and is not a tunnel or loopback interface. To have a NetworkChange object call an event-handling method when a NetworkAvailabilityChanged event occurs, you must associate the method with a NetworkAvailabilityChangedEventHandler delegate, and add this delegate to this event."
  },
  "api/System.Net.NetworkInformation.NetworkInterface.html": {
    "href": "api/System.Net.NetworkInformation.NetworkInterface.html",
    "title": "Class NetworkInterface | nanoFramework Documentation",
    "keywords": "Class NetworkInterface Provides information about network interfaces and enables applications to control them. Inheritance Object NetworkInterface Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class NetworkInterface Remarks This class is exclusive of nanoFramework and it does not exist on the UWP API. Constructors | Improve this Doc View Source NetworkInterface(Int32) Initializes a new instance of the NetworkInterface class. Declaration protected NetworkInterface(int interfaceIndex) Parameters Type Name Description Int32 interfaceIndex Properties | Improve this Doc View Source IPv4Address Holds the IP v4 address of the network interface. Declaration public string IPv4Address { get; } Property Value Type Description String | Improve this Doc View Source IPv4DnsAddresses Holds the IPv4 DNS server address. Declaration public string[] IPv4DnsAddresses { get; } Property Value Type Description String [] | Improve this Doc View Source IPv4GatewayAddress Contains the gateway IPv4 address. Declaration public string IPv4GatewayAddress { get; } Property Value Type Description String | Improve this Doc View Source IPv4SubnetMask Retrieves the network interface's IPv4 subnet mask. Declaration public string IPv4SubnetMask { get; } Property Value Type Description String | Improve this Doc View Source IsAutomaticDnsEnabled Retrieves a value indicating whether a network interface can obtain a DNS server address automatically. true if dynamic DNS is enabled, or false if not. Declaration public bool IsAutomaticDnsEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDhcpEnabled Gets a value specifying whether DHCP is enabled for this network interfaces. true if DHCP is enabled, or false if not. Declaration public bool IsDhcpEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source NetworkInterfaceType Retrieves a value specifying the type of network interface being used by the device. Declaration public NetworkInterfaceType NetworkInterfaceType { get; } Property Value Type Description NetworkInterfaceType | Improve this Doc View Source PhysicalAddress Gets or sets the Media Access Control (MAC) address for a network interface. Declaration public byte[] PhysicalAddress { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source SpecificConfigId The ID of the associated configuration, if any. To be used as the foreign key of that configuration. Declaration public uint SpecificConfigId { get; set; } Property Value Type Description UInt32 Remarks If there is no configuration associated it reads as MaxValue . Methods | Improve this Doc View Source EnableAutomaticDns() Enables a network interface to obtain a DNS server address automatically. Declaration public void EnableAutomaticDns() | Improve this Doc View Source EnableDhcp() Enables the Dynamic Host Configuration Protocol (DHCP) for service with this network interface. Declaration public void EnableDhcp() | Improve this Doc View Source EnableStaticIP(String, String, String, String, String, String) Enables an application to set and use a static IPv4 and IPv6 address. Declaration public void EnableStaticIP(string ipv4Address, string ipv4subnetMask, string ipv4gatewayAddress, string ipv6Address, string ipv6SubnetMask, string ipv6GatewayAddress) Parameters Type Name Description String ipv4Address Holds the IPv4 address to use. String ipv4subnetMask Contains the IPv4 address's subnet mask. String ipv4gatewayAddress Specifies the IPv4 address of the gateway. String ipv6Address Holds the IPv6 address to use. String ipv6SubnetMask Contains the IPv6 address's subnet mask. String ipv6GatewayAddress Specifies the IPv6 address of the gateway. | Improve this Doc View Source EnableStaticIPv4(String, String, String) Enables an application to set and use a static IPv4 address. Declaration public void EnableStaticIPv4(string ipv4Address, string ipv4SubnetMask, string ipv4GatewayAddress) Parameters Type Name Description String ipv4Address Holds the IPv4 address to use. String ipv4SubnetMask Contains the IPv4 address's subnet mask. String ipv4GatewayAddress Specifies the IPv4 address of the gateway. | Improve this Doc View Source EnableStaticIPv4Dns(String[]) Enables a network interface to use a specific DNS server IPv4 address. Declaration public void EnableStaticIPv4Dns(string[] dnsAddresses) Parameters Type Name Description String [] dnsAddresses Holds the DNS server address. | Improve this Doc View Source EnableStaticIPv6(String, String, String) Enables an application to set and use a static IPv6 address. Declaration public void EnableStaticIPv6(string ipv6Address, string ipv6SubnetMask, string ipv6GatewayAddress) Parameters Type Name Description String ipv6Address Holds the IPv6 address to use. String ipv6SubnetMask Contains the IPv6 address's subnet mask. String ipv6GatewayAddress Specifies the IPv6 address of the gateway. | Improve this Doc View Source EnableStaticIPv6Dns(String[]) Enables a network interface to use a specific DNS server IPv6 address. Declaration public void EnableStaticIPv6Dns(string[] dnsAddresses) Parameters Type Name Description String [] dnsAddresses Holds the DNS server address. | Improve this Doc View Source GetAllNetworkInterfaces() Retrieves an array of all of the device's network interfaces. Declaration public static NetworkInterface[] GetAllNetworkInterfaces() Returns Type Description NetworkInterface [] An array containing all of the device's network interfaces. | Improve this Doc View Source ReleaseDhcpLease() Releases the DHCP lease, which releases the IP address bound to a DHCP-enabled network interface. Declaration public void ReleaseDhcpLease() | Improve this Doc View Source RenewDhcpLease() Renews a DHCP lease, which renews the IP address on a DHCP-enabled network interface. Declaration public void RenewDhcpLease()"
  },
  "api/System.Net.NetworkInformation.NetworkInterfaceType.html": {
    "href": "api/System.Net.NetworkInformation.NetworkInterfaceType.html",
    "title": "Enum NetworkInterfaceType | nanoFramework Documentation",
    "keywords": "Enum NetworkInterfaceType Specifies the type of network interface used by the device. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public enum NetworkInterfaceType Remarks This Enum is exclusive of nanoFramework and it does not exist on the UWP API. Fields Name Description Ethernet The network interface uses an Ethernet connection. Ethernet is defined in IEEE standard 802.3. Unknown The network interface type is unknown or not specified. Wireless80211 The network interface uses a wireless LAN connection (IEEE 802.11 standard). WirelessAP The network interface uses a wireless Soft AP connection (IEEE 802.11 standard)."
  },
  "api/System.Net.NetworkInformation.PhyProtocols.html": {
    "href": "api/System.Net.NetworkInformation.PhyProtocols.html",
    "title": "Enum PhyProtocols | nanoFramework Documentation",
    "keywords": "Enum PhyProtocols Enum of Phy protocols used for connection. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax [Flags] public enum PhyProtocols Fields Name Description PHY802_11b IEEE 802.11b max 11 Mbit/s PHY802_11g IEEE 802.11g max 54 Mbit/s PHY802_11lr Low rate enabled. PHY802_11n IEEE 802.11n max 288.8 Mbit/s for 20mhz channel or 600 for 40Mhz"
  },
  "api/System.Net.NetworkInformation.RadioType.html": {
    "href": "api/System.Net.NetworkInformation.RadioType.html",
    "title": "Enum RadioType | nanoFramework Documentation",
    "keywords": "Enum RadioType Specifies the type of radio that the wireless network uses. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public enum RadioType : byte Fields Name Description _802_11a 802.11a-compatible radio. _802_11b 802.11b-compatible radio. _802_11g 802.11g-compatible radio. _802_11n 802.11n-compatible radio. NotSpecified Not specified."
  },
  "api/System.Net.NetworkInformation.Wireless80211Configuration.ConfigurationOptions.html": {
    "href": "api/System.Net.NetworkInformation.Wireless80211Configuration.ConfigurationOptions.html",
    "title": "Enum Wireless80211Configuration.ConfigurationOptions | nanoFramework Documentation",
    "keywords": "Enum Wireless80211Configuration.ConfigurationOptions Configuration flags used for Wireless configuration. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax [Flags] public enum ConfigurationOptions : byte Fields Name Description AutoConnect Will auto connect when AP is available or after being disconnected. This option forces enabling the Wireless station. Disable Disables the Wireless station. Enable Enables the Wireless station. If not set the wireless station is disabled. None No option set. SmartConfig Enables SmartConfig (if available) for this Wireless station. This option forces enabling the Wireless station."
  },
  "api/System.Net.NetworkInformation.Wireless80211Configuration.html": {
    "href": "api/System.Net.NetworkInformation.Wireless80211Configuration.html",
    "title": "Class Wireless80211Configuration | nanoFramework Documentation",
    "keywords": "Class Wireless80211Configuration Configuration of wireless network based on the 802.11 standard. Inheritance Object Wireless80211Configuration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class Wireless80211Configuration Remarks This class is exclusive of nanoFramework and does not exist on the UWP API. Constructors | Improve this Doc View Source Wireless80211Configuration(UInt32) Initializes a new instance of the Wireless80211Configuration class. Declaration public Wireless80211Configuration(uint id) Parameters Type Name Description UInt32 id The ID of the wireless configuration. Properties | Improve this Doc View Source Authentication Specifies the type of authentication used on the wireless network. Declaration public AuthenticationType Authentication { get; set; } Property Value Type Description AuthenticationType | Improve this Doc View Source Encryption Specifies the type of encryption used on the wireless network. Declaration public EncryptionType Encryption { get; set; } Property Value Type Description EncryptionType | Improve this Doc View Source Id Contains the ID of the wireless configuration. Declaration public uint Id { get; } Property Value Type Description UInt32 | Improve this Doc View Source Options Contains flags for the Wireless connection Declaration public Wireless80211Configuration.ConfigurationOptions Options { get; set; } Property Value Type Description Wireless80211Configuration.ConfigurationOptions | Improve this Doc View Source Password Contains the network passphrase. Declaration public string Password { get; set; } Property Value Type Description String | Improve this Doc View Source Radio Specifies the type of radio used by the wireless network adapter. Declaration public RadioType Radio { get; set; } Property Value Type Description RadioType | Improve this Doc View Source Ssid Contains the network's SSID. Declaration public string Ssid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source GetAllWireless80211Configurations() Retrieves an array of all of the wireless 802.11 network configurations. Declaration public static Wireless80211Configuration[] GetAllWireless80211Configurations() Returns Type Description Wireless80211Configuration [] An array containing all of the wireless 802.11 network configuration stored in the device. | Improve this Doc View Source SaveConfiguration() Saves the wireless 802.11 configuration information. Declaration public void SaveConfiguration()"
  },
  "api/System.Net.NetworkInformation.WirelessAPConfiguration.ConfigurationOptions.html": {
    "href": "api/System.Net.NetworkInformation.WirelessAPConfiguration.ConfigurationOptions.html",
    "title": "Enum WirelessAPConfiguration.ConfigurationOptions | nanoFramework Documentation",
    "keywords": "Enum WirelessAPConfiguration.ConfigurationOptions Configuration flags used for Wireless Soft AP configuration. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax [Flags] public enum ConfigurationOptions : byte Fields Name Description AutoStart Will automatically start the Soft AP when CLR starts. This option forces enabling the Wireless Soft AP. Disable Disables the Wireless Soft AP. Enable Enables the Wireless Soft AP. If not set the Wireless Soft AP is disabled. HiddenSSID The SSID for the Soft AP will be hidden. None No option set."
  },
  "api/System.Net.NetworkInformation.WirelessAPConfiguration.html": {
    "href": "api/System.Net.NetworkInformation.WirelessAPConfiguration.html",
    "title": "Class WirelessAPConfiguration | nanoFramework Documentation",
    "keywords": "Class WirelessAPConfiguration Configuration of wireless network SOft AP based on the 802.11 standard. Inheritance Object WirelessAPConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class WirelessAPConfiguration Remarks This class is exclusive of nanoFramework and does not exist on the UWP API. Constructors | Improve this Doc View Source WirelessAPConfiguration(UInt32) Initializes a new instance of the WirelessAPConfiguration class. Declaration public WirelessAPConfiguration(uint id) Parameters Type Name Description UInt32 id The ID of the wireless configuration. Properties | Improve this Doc View Source Authentication Specifies the type of authentication used for the wireless AP. Declaration public AuthenticationType Authentication { get; set; } Property Value Type Description AuthenticationType | Improve this Doc View Source Channel Channel to use for AP. Declaration public byte Channel { get; set; } Property Value Type Description Byte | Improve this Doc View Source Encryption Specifies the type of encryption used for the wireless AP. Declaration public EncryptionType Encryption { get; set; } Property Value Type Description EncryptionType | Improve this Doc View Source Id Contains the ID of the wireless AP configuration. Declaration public uint Id { get; } Property Value Type Description UInt32 | Improve this Doc View Source MaxConnections Maximum number of client connections Declaration public byte MaxConnections { get; set; } Property Value Type Description Byte | Improve this Doc View Source Options Contains flags for the Soft AP Declaration public WirelessAPConfiguration.ConfigurationOptions Options { get; set; } Property Value Type Description WirelessAPConfiguration.ConfigurationOptions | Improve this Doc View Source Password Contains the network passphrase used for clients to connect to Soft AP Declaration public string Password { get; set; } Property Value Type Description String | Improve this Doc View Source Radio Specifies the type of radio used by the wireless network adapter. Declaration public RadioType Radio { get; set; } Property Value Type Description RadioType | Improve this Doc View Source Ssid Contains the Soft AP SSID. Declaration public string Ssid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source DeAuthStation(Int32) DeAuthorise a connected station Declaration public void DeAuthStation(int stationIndex) Parameters Type Name Description Int32 stationIndex The index of station to De-Auth or 0 to De-Auth all stations. | Improve this Doc View Source GetAllWirelessAPConfigurations() Retrieves an array of all of the wireless Soft AP network configurations. Declaration public static WirelessAPConfiguration[] GetAllWirelessAPConfigurations() Returns Type Description WirelessAPConfiguration [] An array containing all of the wireless 802.11 AP network configuration stored in the device. | Improve this Doc View Source GetConnectedStations() Returns an array of information about the connected stations. Declaration public WirelessAPStation[] GetConnectedStations() Returns Type Description WirelessAPStation [] A WirelessAPStation | Improve this Doc View Source GetConnectedStations(Int32) Returns information about the a connected station. Declaration public WirelessAPStation GetConnectedStations(int stationIndex) Parameters Type Name Description Int32 stationIndex The index of station to get information about. Returns Type Description WirelessAPStation An WirelessAPStation . | Improve this Doc View Source SaveConfiguration() Validate and save the wireless Soft AP configuration information. Declaration public void SaveConfiguration() Remarks Checks the length of SSID is 32 or less. Password length is between 8 and 64 if not an open Authentication."
  },
  "api/System.Net.NetworkInformation.WirelessAPStation.html": {
    "href": "api/System.Net.NetworkInformation.WirelessAPStation.html",
    "title": "Class WirelessAPStation | nanoFramework Documentation",
    "keywords": "Class WirelessAPStation Class that encapsulates the details of a connected client. Inheritance Object WirelessAPStation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class WirelessAPStation Properties | Improve this Doc View Source MacAddres Returns the MAc address of the connected Client. Declaration public byte[] MacAddres { get; } Property Value Type Description Byte [] | Improve this Doc View Source PhyModes Returns the PHY protocol used for connection. Declaration public PhyProtocols PhyModes { get; } Property Value Type Description PhyProtocols | Improve this Doc View Source Rssi Returns the Received signal strength indication(RSSI) of connected Client. RSSI is a value from 0 to 127 where the higher the number the stronger the signal. Declaration public sbyte Rssi { get; } Property Value Type Description SByte"
  },
  "api/System.Net.ProtocolViolationException.html": {
    "href": "api/System.Net.ProtocolViolationException.html",
    "title": "Class ProtocolViolationException | nanoFramework Documentation",
    "keywords": "Class ProtocolViolationException The exception that is thrown when an error is made while using a network protocol. Inheritance Object Exception SystemException InvalidOperationException ProtocolViolationException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class ProtocolViolationException : InvalidOperationException Constructors | Improve this Doc View Source ProtocolViolationException() Initializes a new instance of the ProtocolViolationException class. Declaration public ProtocolViolationException() | Improve this Doc View Source ProtocolViolationException(String) Initializes a new instance of the ProtocolViolationException class with the specified message. Declaration public ProtocolViolationException(string message) Parameters Type Name Description String message The error message string."
  },
  "api/System.Net.Security.CertificateManager.html": {
    "href": "api/System.Net.Security.CertificateManager.html",
    "title": "Class CertificateManager | nanoFramework Documentation",
    "keywords": "Class CertificateManager Provides an interface to the device certificate store to manage X509Certificate . Inheritance Object CertificateManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.Security Assembly : System.Net.dll Syntax public static class CertificateManager Methods AddCaCertificateBundle(Byte[]) Adds a Certificate Authority Root bundle X509Certificate to the store. If there is already a CA Root bundle it will be replaced with this one. Declaration public static bool AddCaCertificateBundle(byte[] ca) Parameters Type Name Description Byte [] ca The Certificate Authority certificate bundle to be added store. Returns Type Description Boolean True if the certificate bundle was correctly added to the device certificate store. Remarks This method is exclusive of nanoFramework. There is no equivalent in .NET framework. | Improve this Doc View Source AddCaCertificateBundle(X509Certificate[]) Adds a Certificate Authority Root bundle X509Certificate to the store. If there is already a CA Root bundle it will be replaced with this one. Declaration public static bool AddCaCertificateBundle(X509Certificate[] ca) Parameters Type Name Description X509Certificate [] ca The Certificate Authority certificate bundle to be added store. Returns Type Description Boolean True if the certificate bundle was correctly added to the device certificate store. Remarks This method is exclusive of nanoFramework. There is no equivalent in .NET framework. | Improve this Doc View Source AddCaCertificateBundle(String) Adds a Certificate Authority Root bundle X509Certificate to the store. If there is already a CA Root bundle it will be replaced with this one. Declaration public static bool AddCaCertificateBundle(string ca) Parameters Type Name Description String ca The Certificate Authority certificate bundle to be added store. Returns Type Description Boolean True if the certificate bundle was correctly added to the device certificate store. Remarks This method is exclusive of nanoFramework. There is no equivalent in .NET framework."
  },
  "api/System.Net.Security.html": {
    "href": "api/System.Net.Security.html",
    "title": "Namespace System.Net.Security | nanoFramework Documentation",
    "keywords": "Namespace System.Net.Security Classes CertificateManager Provides an interface to the device certificate store to manage X509Certificate . SslStream Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client. Enums SslProtocols Defines the possible versions of Secure Sockets Layer (SSL). SslVerification The verification scheme to use for authentication."
  },
  "api/System.Net.Security.SslProtocols.html": {
    "href": "api/System.Net.Security.SslProtocols.html",
    "title": "Enum SslProtocols | nanoFramework Documentation",
    "keywords": "Enum SslProtocols Defines the possible versions of Secure Sockets Layer (SSL). Namespace : System.Net.Security Assembly : System.Net.dll Syntax [Flags] public enum SslProtocols Remarks Note: Following the recommendation of the .NET documentation, nanoFramework implementation does not have SSL3 nor Default because those are deprecated and unsecure. Fields Name Description None Allows the operating system to choose the best protocol to use, and to block protocols that are not secure. Unless your app has a specific reason not to, you should use this field. Tls Specifies the TLS 1.0 security protocol. The TLS protocol is defined in IETF RFC 2246. Tls11 Specifies the TLS 1.1 security protocol. The TLS protocol is defined in IETF RFC 4346. Tls12 Specifies the TLS 1.2 security protocol. The TLS protocol is defined in IETF RFC 5246."
  },
  "api/System.Net.Security.SslStream.html": {
    "href": "api/System.Net.Security.SslStream.html",
    "title": "Class SslStream | nanoFramework Documentation",
    "keywords": "Class SslStream Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client. Inheritance Object MarshalByRefObject Stream NetworkStream SslStream Implements IDisposable Inherited Members NetworkStream._socketType NetworkStream._remoteEndPoint NetworkStream._disposed NetworkStream.CanRead NetworkStream.CanSeek NetworkStream.CanTimeout NetworkStream.CanWrite NetworkStream.ReadTimeout NetworkStream.WriteTimeout NetworkStream.Position NetworkStream.Close(Int32) NetworkStream.Flush() NetworkStream.Seek(Int64, SeekOrigin) NetworkStream.SetLength(Int64) Stream.Close() Stream.Dispose() Stream.Finalize() Stream.ReadByte() Stream.WriteByte(Byte) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.Security Assembly : System.Net.dll Syntax public class SslStream : NetworkStream, IDisposable Constructors | Improve this Doc View Source SslStream(Socket) Initializes a new instance of the SslStream class using the specified Socket. Declaration public SslStream(Socket socket) Parameters Type Name Description Socket socket A valid socket that currently has a TCP connection. Remarks The SslStream maintains the lifetime of the socket. When the SslStream object is disposed, the underlying TCP socket will be closed. Properties | Improve this Doc View Source DataAvailable Gets a value the indicates whether data is available in the stream. (Overrides NetworkStream. . :: . .DataAvailable.) Declaration public override bool DataAvailable { get; } Property Value Type Description Boolean Overrides NetworkStream.DataAvailable | Improve this Doc View Source IsServer Gets a value that indicates whether the local side of the connection used by this SslStream was authenticated as the server. Declaration public bool IsServer { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets the length of the stream. (Overrides NetworkStream. . :: . .Length.) Declaration public override long Length { get; } Property Value Type Description Int64 Overrides NetworkStream.Length | Improve this Doc View Source SslVerification Option for SSL verification. The default behaviour is CertificateRequired . Declaration public SslVerification SslVerification { get; set; } Property Value Type Description SslVerification Methods | Improve this Doc View Source AuthenticateAsClient(String, SslProtocols) Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified SSL protocols. Declaration public void AuthenticateAsClient(string targetHost, SslProtocols enabledSslProtocols) Parameters Type Name Description String targetHost The name of the server that will share this SslStream. SslProtocols enabledSslProtocols The SslProtocols value that represents the protocol used for authentication. | Improve this Doc View Source AuthenticateAsClient(String, X509Certificate, SslProtocols) Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collections and SSL protocols. Declaration public void AuthenticateAsClient(string targetHost, X509Certificate clientCertificate, SslProtocols enabledSslProtocols) Parameters Type Name Description String targetHost The name of the server that will share this SslStream. X509Certificate clientCertificate The client certificate. SslProtocols enabledSslProtocols The SslProtocols value that represents the protocol used for authentication. | Improve this Doc View Source AuthenticateAsClient(String, X509Certificate, X509Certificate, SslProtocols) Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collections and SSL protocols. Declaration public void AuthenticateAsClient(string targetHost, X509Certificate clientCertificate, X509Certificate ca, SslProtocols enabledSslProtocols) Parameters Type Name Description String targetHost The name of the server that will share this SslStream. X509Certificate clientCertificate The client certificate. X509Certificate ca Certificate Authority certificate to use for authentication with the server. SslProtocols enabledSslProtocols The SslProtocols value that represents the protocol used for authentication. | Improve this Doc View Source AuthenticateAsServer(X509Certificate, Boolean, SslProtocols) Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol. Declaration public void AuthenticateAsServer(X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols enabledSslProtocols) Parameters Type Name Description X509Certificate serverCertificate The X509Certificate used to authenticate the server. Boolean clientCertificateRequired A Boolean value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request, if no certificate is provided, the server still accepts the connection request. SslProtocols enabledSslProtocols The protocols that may be used for authentication. | Improve this Doc View Source AuthenticateAsServer(X509Certificate, SslProtocols) Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate, verification requirements and security protocol. Declaration public void AuthenticateAsServer(X509Certificate serverCertificate, SslProtocols enabledSslProtocols) Parameters Type Name Description X509Certificate serverCertificate The certificate used to authenticate the server. SslProtocols enabledSslProtocols The protocols that may be used for authentication. | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the SslStream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides NetworkStream.Dispose(Boolean) | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads data from this stream and stores it in the specified array. Declaration public override int Read(byte[] buffer, int offset, int size) Parameters Type Name Description Byte [] buffer An array that receives the bytes read from this stream. Int32 offset An integer that contains the zero-based location in buffer at which to begin storing the data read from this stream. Int32 size The maximum number of bytes to read from this stream. Returns Type Description Int32 Overrides NetworkStream.Read(Byte[], Int32, Int32) | Improve this Doc View Source Write(Byte[], Int32, Int32) Write the specified number of bytes to the underlying stream using the specified buffer and offset. Declaration public override void Write(byte[] buffer, int offset, int size) Parameters Type Name Description Byte [] buffer An array that supplies the bytes written to the stream. Int32 offset he zero-based location in buffer at which to begin reading bytes to be written to the stream. Int32 size The number of bytes to read from buffer. Overrides NetworkStream.Write(Byte[], Int32, Int32) Implements IDisposable"
  },
  "api/System.Net.Security.SslVerification.html": {
    "href": "api/System.Net.Security.SslVerification.html",
    "title": "Enum SslVerification | nanoFramework Documentation",
    "keywords": "Enum SslVerification The verification scheme to use for authentication. Namespace : System.Net.Security Assembly : System.Net.dll Syntax public enum SslVerification Fields Name Description CertificateRequired A certificate is required for authentication. If authenticating as a client, the server certificate is required. If authenticating as a server, the client certificate is required. NoVerification No verification of certificates is required for authentication. VerifyClientOnce Verify the client certificate only once. Applies only to authenticating as a server. VerifyPeer If authenticating as a client, verifies the peer certificate and fails if no certificate is sent. If authenticating as a server, it verifies the peer certificate only if a certificate is sent."
  },
  "api/System.Net.SocketAddress.html": {
    "href": "api/System.Net.SocketAddress.html",
    "title": "Class SocketAddress | nanoFramework Documentation",
    "keywords": "Class SocketAddress Stores serialized information from EndPoint derived classes. Inheritance Object SocketAddress Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax public class SocketAddress Constructors | Improve this Doc View Source SocketAddress(AddressFamily, Int32) Creates a new instance of the SocketAddress class using the specified address family and buffer size. Declaration public SocketAddress(AddressFamily family, int size) Parameters Type Name Description AddressFamily family An AddressFamily enumerated value. Int32 size The number of bytes to allocate for the underlying buffer. Remarks Use this overload to create a new instance of the SocketAddress class with a particular underlying buffer size. Properties | Improve this Doc View Source Family Gets the address family for the current address. Declaration public AddressFamily Family { get; } Property Value Type Description AddressFamily A value specifying the addressing scheme that is used to resolve the current address. | Improve this Doc View Source Item[Int32] Gets or sets the specified index element in the underlying buffer. Declaration public byte this[int offset] { get; set; } Parameters Type Name Description Int32 offset The array index element of the desired information. Property Value Type Description Byte The value of the specified index element in the underlying buffer. Remarks This property gets or sets the specified byte position in the underlying buffer. | Improve this Doc View Source Size Gets the underlying buffer size of the SocketAddress . Declaration public int Size { get; } Property Value Type Description Int32 The underlying buffer size of the SocketAddress . Remarks This property gets the underlying buffer size of the SocketAddress in bytes."
  },
  "api/System.Net.Sockets.AddressFamily.html": {
    "href": "api/System.Net.Sockets.AddressFamily.html",
    "title": "Enum AddressFamily | nanoFramework Documentation",
    "keywords": "Enum AddressFamily Specifies the address families that an instance of the Socket Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum AddressFamily Remarks An AddressFamily member specifies the addressing scheme that a Socket will use to resolve an address. For example, InterNetwork indicates that an IP version 4 address is expected when a Socket connects to an endpoint. Fields Name Description AppleTalk AppleTalk address. Atm Native ATM services address. Banyan Banyan address. Ccitt Addresses for CCITT protocols, such as X.25. Chaos Address for MIT CHAOS protocols. Cluster Address for Microsoft cluster products. DataKit Address for Datakit protocols. DataLink Direct data-link interface address. DecNet DECnet address. Ecma European Computer Manufacturers Association (ECMA) address. FireFox FireFox address. HyperChannel NSC Hyperchannel address. Ieee12844 IEEE 1284.4 workgroup address. ImpLink ARPANET IMP address. InterNetwork Address for IP version 4. InterNetworkV6 Internetwork Version 6. Ipx IPX or SPX address. Irda IrDA address. Iso Address for ISO protocols. Lat LAT address. Max MAX address. NetBios NetBios address. NetworkDesigners Address for Network Designers OSI gateway-enabled protocols. NS Address for Xerox NS protocols. Osi Address for OSI protocols. Pup Address for PUP protocols. Sna IBM SNA address. Unix Unix local to host address. Unknown Unknown address family. Unspecified Unspecified address family. VoiceView VoiceView address."
  },
  "api/System.Net.Sockets.html": {
    "href": "api/System.Net.Sockets.html",
    "title": "Namespace System.Net.Sockets | nanoFramework Documentation",
    "keywords": "Namespace System.Net.Sockets Classes NetworkStream Provides the underlying stream of data for network access. Socket Implements the Berkeley sockets interface. SocketException The exception that is thrown when a socket error occurs. Enums AddressFamily Specifies the address families that an instance of the Socket ProtocolFamily Specifies the type of protocol that an instance of the Socket ProtocolType Specifies the protocols that the Socket class supports. SelectMode Specifies the mode for polling the status of a socket. SocketError Defines socket error constants. SocketFlags This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. SocketOptionLevel Defines socket option levels for the Socket class. SocketOptionName Defines socket option names for the Socket class. SocketType Specifies the type of socket an instance of the Socket class represents."
  },
  "api/System.Net.Sockets.NetworkStream.html": {
    "href": "api/System.Net.Sockets.NetworkStream.html",
    "title": "Class NetworkStream | nanoFramework Documentation",
    "keywords": "Class NetworkStream Provides the underlying stream of data for network access. Inheritance Object MarshalByRefObject Stream NetworkStream SslStream Implements IDisposable Inherited Members Stream.Close() Stream.Dispose() Stream.Finalize() Stream.ReadByte() Stream.WriteByte(Byte) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public class NetworkStream : Stream, IDisposable Constructors | Improve this Doc View Source NetworkStream(Socket) Creates a new instance of the System.Net.Sockets.NetworkStream class for the specified System.Net.Sockets.Socket. Declaration public NetworkStream(Socket socket) Parameters Type Name Description Socket socket The System.Net.Sockets.Socket that the System.Net.Sockets.NetworkStream will use to send and receive data. | Improve this Doc View Source NetworkStream(Socket, Boolean) Initializes a new instance of the System.Net.Sockets.NetworkStream class for the specified System.Net.Sockets.Socket with the specified System.Net.Sockets.Socket ownership. Declaration public NetworkStream(Socket socket, bool ownsSocket) Parameters Type Name Description Socket socket true to indicate that the System.Net.Sockets.NetworkStream will take ownership of the System.Net.Sockets.Socket; otherwise, false. Boolean ownsSocket The System.Net.Sockets.Socket that the System.Net.Sockets.NetworkStream will use to send and receive data. Fields | Improve this Doc View Source _disposed Internal disposed flag Declaration protected bool _disposed Field Value Type Description Boolean | Improve this Doc View Source _remoteEndPoint Internal endpoint ref used for dgram sockets Declaration protected EndPoint _remoteEndPoint Field Value Type Description EndPoint | Improve this Doc View Source _socketType Internal property used to store the socket type Declaration protected int _socketType Field Value Type Description Int32 Properties | Improve this Doc View Source CanRead Gets a value that indicates whether the System.Net.Sockets.NetworkStream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description Boolean true if data can be read from the stream; otherwise, false. The default value is true. Overrides Stream.CanRead Remarks If CanRead is true, NetworkStream allows calls to the Read(Byte[], Int32, Int32) method. Provide the appropriate FileAccess enumerated value in the constructor to set the readability and writability of the NetworkStream . The CanRead property is set when the NetworkStream is initialized. | Improve this Doc View Source CanSeek Gets a value that indicates whether the stream supports seeking. This property is not currently supported.This property always returns false. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean false in all cases to indicate that System.Net.Sockets.NetworkStream cannot seek a specific location in the stream. Overrides Stream.CanSeek | Improve this Doc View Source CanTimeout Indicates whether timeout properties are usable for System.Net.Sockets.NetworkStream. Declaration public override bool CanTimeout { get; } Property Value Type Description Boolean true in all cases. Overrides Stream.CanTimeout | Improve this Doc View Source CanWrite Gets a value that indicates whether the System.Net.Sockets.NetworkStream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean true if data can be written to the System.Net.Sockets.NetworkStream; otherwise, false. The default value is true. Overrides Stream.CanWrite | Improve this Doc View Source DataAvailable Gets a value that indicates whether data is available on the NetworkStream to be read. Declaration public virtual bool DataAvailable { get; } Property Value Type Description Boolean true if data is available on the stream to be read; otherwise, false. | Improve this Doc View Source Length Gets the length of the data available on the stream. This property is not currently supported and always throws a NotSupportedException. Declaration public override long Length { get; } Property Value Type Description Int64 The length of the data available on the stream. Overrides Stream.Length | Improve this Doc View Source Position Gets or sets the current position in the stream. This property is not currently supported and always throws a NotSupportedException. Declaration public override long Position { get; set; } Property Value Type Description Int64 The current position in the stream. Overrides Stream.Position | Improve this Doc View Source ReadTimeout Gets or sets the amount of time that a read operation blocks waiting for data. Declaration public override int ReadTimeout { get; set; } Property Value Type Description Int32 A Int32 that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, Infinite, specifies that the read operation does not time out. Overrides Stream.ReadTimeout | Improve this Doc View Source WriteTimeout Gets or sets the amount of time that a write operation blocks waiting for data. Declaration public override int WriteTimeout { get; set; } Property Value Type Description Int32 A Int32 that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, Infinite, specifies that the write operation does not time out. Overrides Stream.WriteTimeout Methods | Improve this Doc View Source Close(Int32) Closes the NetworkStream after waiting the specified time to allow data to be sent. Declaration public void Close(int timeout) Parameters Type Name Description Int32 timeout A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing. Remarks The Close(Int32) method frees both unmanaged and managed resources associated with the NetworkStream . If the NetworkStream owns the underlying Socket, it is closed as well. | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the NetworkStream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Stream.Dispose(Boolean) Remarks This method is called by the public Dispose method and the Finalize method. Dispose invokes the protected Dispose(Boolean) method with the disposing parameter set to true. Finalize invokes Dispose with disposing set to false. When the disposing parameter is true, this method releases all resources held by any managed objects that this NetworkStream references. This method invokes the Dispose method of each referenced object. | Improve this Doc View Source Flush() Flushes data from the stream. This method is reserved for future use. Declaration public override void Flush() Overrides Stream.Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads data from the NetworkStream. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of type Byte that is the location in memory to store data read from the NetworkStream. Int32 offset The location in buffer to begin storing the data to. Int32 count The number of bytes to read from the NetworkStream. Returns Type Description Int32 The number of bytes read from the NetworkStream. Overrides Stream.Read(Byte[], Int32, Int32) Remarks This method reads data into the buffer parameter and returns the number of bytes successfully read. If no data is available for reading, the Read method returns 0. The Read operation reads as much data as is available, up to the number of bytes specified by the count parameter. If the remote host shuts down the connection, and all available data has been received, the Read method completes immediately and return zero bytes. important Check to see if the NetworkStream is readable by calling the CanRead property. If you attempt to read from a NetworkStream that is not readable, you will get an IOException. | Improve this Doc View Source Seek(Int64, SeekOrigin) Sets the current position of the stream to the given value. This method is not currently supported and always throws a System.NotSupportedException. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset This parameter is not used. SeekOrigin origin This parameter is not used. Returns Type Description Int64 The position in the stream. Overrides Stream.Seek(Int64, SeekOrigin) | Improve this Doc View Source SetLength(Int64) Sets the length of the stream. This method always throws a System.NotSupportedException. Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value This parameter is not used. Overrides Stream.SetLength(Int64) | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes data to the NetworkStream . Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to write to the NetworkStream. Int32 offset The location in buffer from which to start writing data. Int32 count The number of bytes to write to the NetworkStream. Overrides Stream.Write(Byte[], Int32, Int32) Remarks The Write method starts at the specified offset and sends count bytes from the contents of buffer to the network. The Write method blocks until the requested number of bytes is sent or a SocketException is thrown. If you receive a SocketException , use the ErrorCode property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Implements IDisposable"
  },
  "api/System.Net.Sockets.ProtocolFamily.html": {
    "href": "api/System.Net.Sockets.ProtocolFamily.html",
    "title": "Enum ProtocolFamily | nanoFramework Documentation",
    "keywords": "Enum ProtocolFamily Specifies the type of protocol that an instance of the Socket Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum ProtocolFamily Fields Name Description AppleTalk AppleTalk protocol. Atm Native ATM services protocol. Banyan Banyan protocol. Ccitt CCITT protocol, such as X.25. Chaos MIT CHAOS protocol. Cluster Microsoft Cluster products protocol. DataKit DataKit protocol. DataLink Direct data link protocol. DecNet DECNet protocol. Ecma European Computer Manufacturers Association (ECMA) protocol. FireFox FireFox protocol. HyperChannel NSC HyperChannel protocol. Ieee12844 IEEE 1284.4 workgroup protocol. ImpLink ARPANET IMP protocol. InterNetwork IP version 4 protocol. InterNetworkV6 IP version 6 protocol. Ipx IPX or SPX protocol. Irda IrDA protocol. Iso ISO protocol. Lat LAT protocol. Max MAX protocol. NetBios NetBIOS protocol. NetworkDesigners Network Designers OSI gateway enabled protocol. NS Xerox NS protocol. Osi OSI protocol. Pup PUP protocol. Sna IBM SNA protocol. Unix Unix local to host protocol. Unknown Unknown protocol. Unspecified Unspecified protocol. VoiceView VoiceView protocol."
  },
  "api/System.Net.Sockets.ProtocolType.html": {
    "href": "api/System.Net.Sockets.ProtocolType.html",
    "title": "Enum ProtocolType | nanoFramework Documentation",
    "keywords": "Enum ProtocolType Specifies the protocols that the Socket class supports. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum ProtocolType Fields Name Description Ggp Gateway To Gateway Protocol. Icmp Internet Control Message Protocol. IcmpV6 Internet Control Message Protocol for IPv6. Idp Internet Datagram Protocol. Igmp Internet Group Management Protocol. IP Internet Protocol. IPSecAuthenticationHeader IPv6 Authentication header. For details, see RFC 2292 section 2.2.1, available at http://www.ietf.org . IPSecEncapsulatingSecurityPayload IPv6 Encapsulating Security Payload header. IPv4 Internet Protocol version 4. IPv6 Internet Protocol version 6 (IPv6). IPv6DestinationOptions IPv6 Destination Options header. IPv6FragmentHeader IPv6 Fragment header. IPv6HopByHopOptions Pv6 Hop by Hop Options header. IPv6NoNextHeader IPv6 No next header. IPv6RoutingHeader IPv6 Routing header. Ipx Internet Packet Exchange Protocol. ND Net Disk Protocol (unofficial). Pup PARC Universal Packet Protocol. Raw Raw IP packet protocol. Spx Sequenced Packet Exchange protocol. SpxII Sequenced Packet Exchange version 2 protocol. Tcp Transmission Control Protocol. Udp User Datagram Protocol. Unknown Unknown protocol. Unspecified Unspecified protocol."
  },
  "api/System.Net.Sockets.SelectMode.html": {
    "href": "api/System.Net.Sockets.SelectMode.html",
    "title": "Enum SelectMode | nanoFramework Documentation",
    "keywords": "Enum SelectMode Specifies the mode for polling the status of a socket. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum SelectMode Fields Name Description SelectError Poll the error status of a socket. SelectRead Poll the read status of a socket. SelectWrite Poll the write status of a socket."
  },
  "api/System.Net.Sockets.Socket.html": {
    "href": "api/System.Net.Sockets.Socket.html",
    "title": "Class Socket | nanoFramework Documentation",
    "keywords": "Class Socket Implements the Berkeley sockets interface. Inheritance Object Socket Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public class Socket : IDisposable Constructors | Improve this Doc View Source Socket(AddressFamily, SocketType, ProtocolType) Initializes a new instance of the Socket class using the specified address family, socket type and protocol. Declaration public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType) Parameters Type Name Description AddressFamily addressFamily One of the AddressFamily values. SocketType socketType One of the SocketType values. ProtocolType protocolType One of the ProtocolType values. Remarks The addressFamily parameter specifies the addressing scheme that the Socket class uses, the socketType parameter specifies the type of the Socket class, and the protocolType parameter specifies the protocol used by Socket . The three parameters are not independent. Some address families restrict which protocols can be used with them, and often the Socket type is implicit in the protocol. If the combination of address family, Socket type, and protocol type esults in an invalid Socket, this constructor throws a SocketException. Properties | Improve this Doc View Source Available Gets the amount of data that has been received from the network and is available to be read. Declaration public int Available { get; } Property Value Type Description Int32 An integer error code that is associated with this exception. Remarks If you are using a non-blocking Socket , Available is a good way to determine whether data is queued for reading, before calling Receive(Byte[]) . The available data is the total amount of data queued in the network buffer for reading. If no data is queued in the network buffer, Available returns 0. If the remote host shuts down or closes the connection, Available can throw a SocketException . If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. | Improve this Doc View Source LocalEndPoint Gets the local endpoint. Declaration public EndPoint LocalEndPoint { get; } Property Value Type Description EndPoint The EndPoint that the Socket is using for communications. Remarks The LocalEndPoint property gets an EndPoint that contains the local IP address and port number to which your Socket is bound. You must cast this EndPoint to an IPEndPoint before retrieving any information. You can then call the Address method to retrieve the local IPAddress , and the Port method to retrieve the local port number. The LocalEndPoint property is usually set after you make a call to the Bind(EndPoint) method. If you allow the system to assign your socket's local IP address and port number, the LocalEndPoint property will be set after the first I/O operation. For connection-oriented protocols, the first I/O operation would be a call to the Connect or Accept() method. For connectionless protocols, the first I/O operation would be any of the send or receive calls. | Improve this Doc View Source ReceiveTimeout Gets or sets a value that specifies the amount of time after which a synchronous Receive(Byte[]) call will time out. Declaration public int ReceiveTimeout { get; set; } Property Value Type Description Int32 The time-out value, in milliseconds. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period. Remarks This option applies to synchronous Receive(Byte[]) calls only. If the time-out period is exceeded, the Receive(Byte[]) method will throw a SocketException . | Improve this Doc View Source RemoteEndPoint Gets the remote endpoint. Declaration public EndPoint RemoteEndPoint { get; } Property Value Type Description EndPoint The EndPoint with which the Socket is communicating. Remarks If you are using a connection-oriented protocol, the RemoteEndPoint property gets the EndPoint that contains the remote IP address and port number to which the Socket is connected. If you are using a connectionless protocol, RemoteEndPoint contains the default remote IP address and port number with which the Socket will communicate. You must cast this EndPoint to an IPEndPoint before retrieving any information. You can then call the Address method to retrieve the remote IPAddress , and the Port method to retrieve the remote port number. The RemoteEndPoint is set after a call to either Accept() or Connect(EndPoint) . If you try to access this property earlier, RemoteEndPoint will throw a SocketException . If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. | Improve this Doc View Source SendTimeout Gets or sets a value that specifies the amount of time after which a synchronous Send(Byte[]) call will time out. Declaration public int SendTimeout { get; set; } Property Value Type Description Int32 The time-out value, in milliseconds. If you set the property with a value between 1 and 499, the value will be changed to 500. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period. Remarks This option applies to synchronous Send(Byte[]) calls only. If the time-out period is exceeded, the Send(Byte[]) method will throw a SocketException . | Improve this Doc View Source SocketType Gets the type of the Socket . Declaration public SocketType SocketType { get; } Property Value Type Description SocketType One of the SocketType values. Remarks SocketType is read-only and is set when the Socket is created. Methods | Improve this Doc View Source Accept() Creates a new Socket for a newly created connection. Declaration public Socket Accept() Returns Type Description Socket A Socket for a newly created connection. Remarks Accept synchronously extracts the first pending connection request from the connection request queue of the listening socket, and then creates and returns a new Socket . You cannot use this returned Socket to accept any additional connections from the connection queue. However, you can call the RemoteEndPoint method of the returned Socket to identify the remote host's network address and port number. Before calling the Accept method, you must first call the Listen method to listen for and queue incoming connection requests. | Improve this Doc View Source Bind(EndPoint) Associates a Socket with a local endpoint. Declaration public void Bind(EndPoint localEP) Parameters Type Name Description EndPoint localEP The local EndPoint to associate with the Socket . Remarks Use the Bind method if you need to use a specific local endpoint. You must call Bind before you can call the Listen(Int32) method. You do not need to call Bind before using the Connect(EndPoint) method unless you need to use a specific local endpoint. You can use the Bind method on both connectionless and connection-oriented protocols. Before calling Bind, you must first create the local IPEndPoint from which you intend to communicate data. If you do not care which local address is assigned, you can create an IPEndPoint using Any as the address parameter, and the underlying service provider will assign the most appropriate network address. This might help simplify your application if you have multiple network interfaces. If you do not care which local port is used, you can create an IPEndPoint using 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use the above approach, you can discover what local network address and port number has been assigned by calling the LocalEndPoint . If you are using a connection-oriented protocol, LocalEndPoint will not return the locally assigned network address until after you have made a call to the Connect(EndPoint) method. If you are using a connectionless protocol, you will not have access to this information until you have completed a send or receive. If you intend to receive multicast datagrams, you must call the Bind method with a multicast port number. You must call the Bind method if you intend to receive connectionless datagrams using the ReceiveFrom method. | Improve this Doc View Source Close() Closes the Socket connection and releases all associated resources. Declaration public void Close() Remarks The Close method closes the remote host connection and releases all managed and unmanaged resources associated with the Socket. Upon closing, the Connected property is set to false. | Improve this Doc View Source Connect(EndPoint) Establishes a connection to a remote host. Declaration public void Connect(EndPoint remoteEP) Parameters Type Name Description EndPoint remoteEP An EndPoint that represents the remote device. Remarks If you are using a connection-oriented protocol such as TCP, the Connect method synchronously establishes a network connection between LocalEndPoint and the specified remote endpoint. If you are using a connectionless protocol, Connect establishes a default remote host. After you call Connect, you can send data to the remote device with the Send(Byte[]) method, or receive data from the remote device with the Receive(Byte[]) method. If you are using a connectionless protocol such as UDP, you do not have to call Connect before sending and receiving data. You can use SendTo(Byte[], EndPoint) and ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) to synchronously communicate with a remote host. If you do call Connect, any datagrams that arrive from an address other than the specified default will be discarded. If you want to set your default remote host to a broadcast address, you must first call the SetSocketOption(SocketOptionLevel, SocketOptionName, Boolean) method and set the socket option to Broadcast , or Connect will throw a SocketException. If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. If you are using a connection-oriented protocol and did not call Bind before calling Connect, the underlying service provider will assign the local network address and port number. If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation. If you want to change the default remote host, call Connect again with the desired endpoint. | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the Socket , and optionally disposes of the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to releases only unmanaged resources. Remarks This method is called by the public Dispose() method and the Finalize() method. Dispose() invokes the protected Dispose(Boolean) method with the disposing parameter set to true. Finalize() invokes Dispose with disposing set to false. When the disposing parameter is true, this method releases all resources held by any managed objects that this Socket references. This method invokes the Dispose() method of each referenced object. | Improve this Doc View Source Finalize() Deconstructor Declaration protected void Finalize() | Improve this Doc View Source GetSocketOption(SocketOptionLevel, SocketOptionName) Returns the value of a Socket option. Declaration public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName) Parameters Type Name Description SocketOptionLevel optionLevel One of the SocketOptionLevel values. SocketOptionName optionName One of the SocketOptionName values. Returns Type Description Object An object that represents the value of the option. When the optionName parameter is set to Linger the return value is an instance of the LingerOption class. When optionName is set to AddMembership or DropMembership , the return value is an instance of the MulticastOption class. When optionName is any other value, the return value is an integer. Remarks Socket options determine the behavior of the current Socket . Use this overload to get the Linger , AddMembership , and DropMembership options. For the Linger option, use Socket for the optionLevel parameter. For AddMembership and DropMembership , use IP . If you want to set the value of any of the options listed above, use the SetSocketOption(SocketOptionLevel, SocketOptionName, Int32) method. | Improve this Doc View Source GetSocketOption(SocketOptionLevel, SocketOptionName, Byte[]) Returns the specified Socket option setting, represented as a byte array. Declaration public void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] val) Parameters Type Name Description SocketOptionLevel optionLevel One of the SocketOptionLevel values. SocketOptionName optionName One of the SocketOptionName values. Byte [] val An array of type Byte that is to receive the option setting. Remarks Socket options determine the behavior of the current Socket . Upon successful completion of this method, the array specified by the val parameter contains the value of the specified Socket option. When the length of the val array is smaller than the number of bytes required to store the value of the specified Socket option, GetSocketOption(SocketOptionLevel, SocketOptionName) will throw a SocketException. If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. Use this overload for any sockets that are represented by Boolean values or integers. | Improve this Doc View Source Listen(Int32) Places a Socket in a listening state. Declaration public void Listen(int backlog) Parameters Type Name Description Int32 backlog The maximum length of the pending connections queue. Remarks Listen causes a connection-oriented Socket to listen for incoming connection attempts. The backlog parameter specifies the number of incoming connections that can be queued for acceptance. To determine the maximum number of connections you can specify, retrieve the MaxConnections value. Listen does not block. If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. Use Accept() or BeginAccept to accept a connection from the queue. You must call the Bind(EndPoint) method before calling Listen, or Listen will throw a SocketException . | Improve this Doc View Source Poll(Int32, SelectMode) Determines the status of the Socket . Declaration public bool Poll(int microSeconds, SelectMode mode) Parameters Type Name Description Int32 microSeconds The time to wait for a response, in microseconds. SelectMode mode One of the SelectMode values. Returns Type Description Boolean The status of the Socket based on the polling mode value passed in the mode parameter. SelectRead SelectWrite SelectError true if Listen has been called and a connection is pending; -or- true if data is available for reading; -or- true if the connection has been closed, reset, or terminated; otherwise, returns false. true , if processing a Connect, and the connection has succeeded; -or- true if data can be sent; otherwise, returns false. true if processing a Connect(EndPoint) that does not block, and the connection has failed; -or- true if OutOfBandInline is not set and out-of-band data is available; otherwise, returns false. Remarks The Poll method will check the state of the Socket . Specify SelectRead for the selectMode parameter to determine if the Socket is readable. Specify SelectWrite to determine if the Socket is writable. Use SelectError to detect an error condition. Poll will block execution until the specified time period, measured in microseconds, elapses. Set the microSeconds parameter to a negative integer if you would like to wait indefinitely for a response. If you want to check the status of multiple sockets, you might prefer to use the Select method. If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. | Improve this Doc View Source Receive(Byte[]) Receives data from a bound Socket into a receive buffer. Declaration public int Receive(byte[] buffer) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for the received data. Returns Type Description Int32 The number of bytes received. Remarks The Receive(Byte[]) method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive(Byte[]) from both connection-oriented and connectionless sockets. This overload only requires you to provide a receive buffer. The buffer offset defaults to 0, the size defaults to the length of the buffer parameter, and the SocketFlags value defaults to None . If no data is available for reading, the Receive(Byte[]) method will block until data is available, unless a time-out value was set by using ReceiveTimeout . If the time-out value was exceeded, the Receive(Byte[]) call will throw a SocketException . If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the Receive(Byte[]) method will complete immediately and throw a SocketException . You can use the Available property to determine if data is available for reading. When Available is non-zero, retry the receive operation. If you are using a connectionless Socket , Receive(Byte[]) will read the first queued datagram from the destination address you specify in the Connect method. If the datagram you receive is larger than the size of the buffer parameter, buffer gets filled with the first part of the message, the excess data is lost and a SocketException is thrown. | Improve this Doc View Source Receive(Byte[], Int32, Int32, SocketFlags) Receives the specified number of bytes from a bound Socket into the specified offset position of the receive buffer, using the specified SocketFlags . Declaration public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for the received data. Int32 offset The location in buffer to store the received data. Int32 size The number of bytes to receive. SocketFlags socketFlags A bitwise combination of the SocketFlags values. Returns Type Description Int32 The number of bytes received. Remarks The Receive(Byte[]) method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive(Byte[]) from both connection- oriented and connectionless sockets. | Improve this Doc View Source Receive(Byte[], Int32, SocketFlags) Receives the specified number of bytes of data from a bound Socket into a receive buffer, using the specified SocketFlags . Declaration public int Receive(byte[] buffer, int size, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for the received data. Int32 size The number of bytes to receive. SocketFlags socketFlags A bitwise combination of the SocketFlags values. Returns Type Description Int32 The number of bytes received. Remarks The Receive(Byte[]) method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive from both connection-oriented and connectionless sockets. This overload only requires you to provide a receive buffer, the number of bytes you want to receive, and the necessary SocketFlags . If no data is available for reading, the Receive method will block until data is available, unless a time-out value was set by using ReceiveTimeout . If the time-out value was exceeded, the Receive(Byte[]) call will throw a SocketException . If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, The Receive(Byte[]) method will complete immediately and throw a SocketException . You can use the Available property to determine if data is available for reading. When Available is non-zero, retry your receive operation. | Improve this Doc View Source Receive(Byte[], SocketFlags) Receives data from a bound Socket into a receive buffer, using the specified SocketFlags . Declaration public int Receive(byte[] buffer, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for the received data. SocketFlags socketFlags A bitwise combination of the SocketFlags values. Returns Type Description Int32 The number of bytes received. Remarks The Receive(Byte[]) method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive(Byte[]) from both connection-oriented and connectionless sockets. This overload only requires you to provide a receive buffer and the necessary SocketFlags . The buffer offset defaults to 0, and the size defaults to the length of the byte parameter. | Improve this Doc View Source ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) Receives the specified number of bytes of data into the specified location of the data buffer, using the specified SocketFlags , and stores the endpoint. Declaration public int ReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for received data. Int32 offset The position in the buffer parameter to store the received data. Int32 size The number of bytes to receive. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP An EndPoint , passed by reference, that represents the remote server. Returns Type Description Int32 The number of bytes received. Remarks The ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method reads data into the buffer parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent. This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts. With connectionless protocols, ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) will read the first enqueued datagram received into the local network buffer.If the datagram you receive is larger than the size of buffer, the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method will fill buffer with as much of the message as is possible, and throw a SocketException .If you are using an unreliable protocol, the excess data will be lost.If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method with a large enough buffer. If no data is available for reading, the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method will block until data is available.If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method will complete immediately and throw a SocketException . You can use the Available property to determine if data is available for reading. When Available is non-zero, retry the receive operation. Although ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) is intended for connectionless protocols, you can use a connection-oriented protocol as well.If you choose to do so, you must first either establish a remote host connection by calling the Connect method or accept an incoming remote host connection by calling the Accept() method. If you do not establish or accept a connection before calling the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method, you will get a SocketException .You can also establish a default remote host for a connectionless protocol prior to calling the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method.In either of these cases, the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method will ignore the remoteEP parameter and only receive data from the connected or default remote host. With connection-oriented sockets, ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) will read as much data as is available up to the amount of bytes specified by the size parameter. If the remote host shuts down the Socket connection with the Shutdown method, and all available data has been Received, the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method will complete immediately and return zero bytes. | Improve this Doc View Source ReceiveFrom(Byte[], Int32, SocketFlags, ref EndPoint) Receives the specified number of bytes into the data buffer, using the specified SocketFlags , and stores the endpoint. Declaration public int ReceiveFrom(byte[] buffer, int size, SocketFlags socketFlags, ref EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for received data. Int32 size The number of bytes to receive. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP An EndPoint , passed by reference, that represents the remote server. Returns Type Description Int32 The number of bytes received. | Improve this Doc View Source ReceiveFrom(Byte[], ref EndPoint) Receives a datagram into the data buffer and stores the endpoint. Declaration public int ReceiveFrom(byte[] buffer, ref EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for received data. EndPoint remoteEP An EndPoint , passed by reference, that represents the remote server. Returns Type Description Int32 The number of bytes received. Remarks The method reads data into the buffer parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent. This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts. This overload only requires you to provide a receive buffer, and an EndPoint that represents the remote host. The buffer offset defaults to 0. The size defaults to the length of the buffer parameter and the socketFlags value defaults to None. important Before calling , you must explicitly Bind(EndPoint) the Socket to a local endpoint using the Bind(EndPoint) method. If you do not, will throw a SocketException . important The AddressFamily of the EndPoint used in needs to match the AddressFamily of the EndPoint used in . | Improve this Doc View Source ReceiveFrom(Byte[], SocketFlags, ref EndPoint) Receives a datagram into the data buffer, using the specified SocketFlags , and stores the endpoint. Declaration public int ReceiveFrom(byte[] buffer, SocketFlags socketFlags, ref EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for received data. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP An EndPoint , passed by reference, that represents the remote server. Returns Type Description Int32 The number of bytes received. | Improve this Doc View Source Send(Byte[]) Sends data to a connected Socket . Declaration public int Send(byte[] buffer) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent Returns Type Description Int32 The number of bytes sent to the Socket . Remarks Send(Byte[]) synchronously sends data to the remote host specified in the Connect(EndPoint) or Accept() method and returns the number of bytes successfully sent. Send(Byte[]) can be used for both connection-oriented and connectionless protocols. This overload requires a buffer that contains the data you want to send. The SocketFlags value defaults to 0, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer. If you are using a connectionless protocol, you must call Connect(EndPoint) before calling this method, or will throw a SocketException . If you are using a connection-oriented protocol, you must either use Connect(EndPoint) to establish a remote host connection, or use Accept() to accept an incoming connection. If you are using a connectionless protocol and plan to send data to several different hosts, you should use the SendTo(Byte[], EndPoint) method. If you do not use the SendTo method, you will have to call Connect before each call to Send. You can use SendTo even after you have established a default remote host with Connect. You can also change the default remote host prior to calling Send by making another call to Connect. If you are using a connection-oriented protocol, will block until all of the bytes in the buffer are sent, unless a time-out was set by using SendTimeout . If the time-out value was exceeded, the call will throw a SocketException . In nonblocking mode, Send may complete successfully even if it sends less than the number of bytes in the buffer. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the Send(Byte[]) method means that the underlying system has had room to buffer your data for a network send. important If you receive a SocketException, use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. important The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode. See Also Socket System.Net.Sockets | Improve this Doc View Source Send(Byte[], Int32, Int32, SocketFlags) Sends the specified number of bytes of data to a connected Socket , starting at the specified offset, and using the specified SocketFlags . Declaration public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent Int32 offset Int32 size SocketFlags socketFlags Returns Type Description Int32 The number of bytes sent to the Socket . Remarks synchronously sends data to the remote host specified in the Connect(EndPoint) or Accept() method and returns the number of bytes successfully sent. can be used for both connection-oriented and connectionless protocols. In this overload, if you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. important The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode. See Also Socket System.Net.Sockets | Improve this Doc View Source Send(Byte[], Int32, SocketFlags) Sends the specified number of bytes of data to a connected Socket , using the specified SocketFlags . Declaration public int Send(byte[] buffer, int size, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent Int32 size SocketFlags socketFlags Returns Type Description Int32 The number of bytes sent to the Socket . Remarks synchronously sends data to the remote host specified in the Connect(EndPoint) or Accept() method and returns the number of bytes successfully sent. can be used for both connection-oriented and connectionless protocols. This overload requires a buffer that contains the data you want to send, the number of bytes you want to send, and a bitwise combination of any SocketFlags . If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. important You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and will throw a SocketException . If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. important The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode. See Also Socket System.Net.Sockets | Improve this Doc View Source Send(Byte[], SocketFlags) Sends data to a connected Socket using the specified SocketFlags . Declaration public int Send(byte[] buffer, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent SocketFlags socketFlags Returns Type Description Int32 The number of bytes sent to the Socket . Remarks synchronously sends data to the remote host specified in the Connect(EndPoint) or Accept() method and returns the number of bytes successfully sent. can be used for both connection-oriented and connectionless protocols. his overload requires a buffer that contains the data you want to send and a bitwise combination of SocketFlags. The buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer. If you specify the DontRoute flag as the socketflags parameter value, the data you are sending will not be routed. important You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and will throw a SocketException . If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. important The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode. See Also Socket System.Net.Sockets | Improve this Doc View Source SendTo(Byte[], Int32, Int32, SocketFlags, EndPoint) Sends data to the specified endpoint. Declaration public int SendTo(byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent. Int32 offset The EndPoint that represents the destination for the data. Int32 size The number of bytes to send. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP The EndPoint that represents the destination location for the data. Returns Type Description Int32 The number of bytes sent. | Improve this Doc View Source SendTo(Byte[], Int32, SocketFlags, EndPoint) Sends the specified number of bytes of data to the specified endpoint using the specified SocketFlags. Declaration public int SendTo(byte[] buffer, int size, SocketFlags socketFlags, EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent. Int32 size The number of bytes to send. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP The EndPoint that represents the destination location for the data. Returns Type Description Int32 The number of bytes sent. | Improve this Doc View Source SendTo(Byte[], EndPoint) Sends data to the specified endpoint. Declaration public int SendTo(byte[] buffer, EndPoint remoteEP) Parameters Type Name Description Byte [] buffer n array of type Byte that contains the data to be sent. EndPoint remoteEP The EndPoint that represents the destination location for the data. Returns Type Description Int32 The number of bytes sent. Remarks In this overload, the buffer offset defaults to 0, the number of bytes to send defaults to the size of the buffer parameter, and the SocketFlags value defaults to 0. | Improve this Doc View Source SendTo(Byte[], SocketFlags, EndPoint) Sends data to a specific endpoint using the specified SocketFlags . Declaration public int SendTo(byte[] buffer, SocketFlags socketFlags, EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP The EndPoint that represents the destination location for the data. Returns Type Description Int32 The number of bytes sent. Remarks In this overload, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer. If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. | Improve this Doc View Source SetSocketOption(SocketOptionLevel, SocketOptionName, Boolean) Sets the specified Socket option to the specified Boolean value. Declaration public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue) Parameters Type Name Description SocketOptionLevel optionLevel One of the SocketOptionLevel values. SocketOptionName optionName One of the SocketOptionName values. Boolean optionValue The value of the option, represented as a Boolean. | Improve this Doc View Source SetSocketOption(SocketOptionLevel, SocketOptionName, Byte[]) Sets the specified Socket option to the specified value, represented as a byte array. Declaration public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue) Parameters Type Name Description SocketOptionLevel optionLevel One of the SocketOptionLevel values. SocketOptionName optionName One of the SocketOptionName values. Byte [] optionValue An array of type Byte that represents the value of the option. Remarks Socket options determine the behavior of the current Socket . Use this overload to set those Socket options that require a byte array as an option value. | Improve this Doc View Source SetSocketOption(SocketOptionLevel, SocketOptionName, Int32) Sets the specified Socket option to the specified integer value. Declaration public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue) Parameters Type Name Description SocketOptionLevel optionLevel One of the SocketOptionLevel values. SocketOptionName optionName One of the SocketOptionName values. Int32 optionValue A value of the option. Remarks Socket options determine the behavior of the current Socket . For an option with a Boolean data type, specify a nonzero value to enable the option, and a zero value to disable the option. For an option with an integer data type, specify the appropriate value. Socket options are grouped by level of protocol support. Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements IDisposable"
  },
  "api/System.Net.Sockets.SocketError.html": {
    "href": "api/System.Net.Sockets.SocketError.html",
    "title": "Enum SocketError | nanoFramework Documentation",
    "keywords": "Enum SocketError Defines socket error constants. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum SocketError Fields Name Description AccessDenied An attempt was made to access a Socket in a way that is forbidden by its access permissions. AddressAlreadyInUse Only one use of an address is normally permitted. AddressFamilyNotSupported The address family specified is not supported. This error is returned if the IPv6 address family was specified and the IPv6 stack is not installed on the local machine. This error is returned if the IPv4 address family was specified and the IPv4 stack is not installed on the local machine. AddressNotAvailable The selected IP address is not valid in this context. AlreadyInProgress The non-blocking Socket already has an operation in progress. ConnectionAborted The connection was aborted by the .NET Framework or the underlying socket provider. ConnectionRefused The remote host is actively refusing a connection. ConnectionReset The connection was reset by the remote peer. DestinationAddressRequired A required address was omitted from an operation on a Socket. Disconnecting A graceful shutdown is in progress. Fault An invalid pointer address was detected by the underlying socket provider. HostDown The operation failed because the remote host is down. HostNotFound No such host is known. The name is not an official host name or alias. HostUnreachable There is no network route to the specified host. InProgress A blocking operation is in progress. Interrupted A blocking Socket call was cancelled. InvalidArgument An invalid argument was supplied to a Socket member. IsConnected The Socket is already connected. MessageSize The datagram is too long. NetworkDown The network is not available. NetworkReset The application tried to set KeepAlive on a connection that has already timed out NetworkUnreachable No route to the remote host exists. NoBufferSpaceAvailable No free buffer space is available for a Socket operation. NoData The requested name or IP address was not found on the name server. NoRecovery The error is unrecoverable or the requested database cannot be located. NotConnected The application tried to send or receive data, and the Socket is not connected. NotInitialized The underlying socket provider has not been initialized. NotSocket A Socket operation was attempted on a non-socket. OperationNotSupported The address family is not supported by the protocol family. ProcessLimit Too many processes are using the underlying socket provider. ProtocolFamilyNotSupported The protocol family is not implemented or has not been configured. ProtocolNotSupported The protocol is not implemented or has not been configured. ProtocolOption An unknown, invalid, or unsupported option or level was used with a Socket. ProtocolType The protocol type is incorrect for this Socket. Shutdown A request to send or receive data was disallowed because the Socket has already been closed. SocketError An unspecified Socket error has occurred. SocketNotSupported The support for the specified socket type does not exist in this address family. Success The operation completed successfully. SystemNotReady The network subsystem is unavailable. TimedOut The connection attempt timed out, or the connected host has failed to respond. TooManyOpenSockets There are too many open sockets in the underlying socket provider. TryAgain The name of the host could not be resolved. Try again later. TypeNotFound The specified class was not found. VersionNotSupported The version of the underlying socket provider is out of range. WouldBlock An operation on a non-blocking socket cannot be completed immediately."
  },
  "api/System.Net.Sockets.SocketException.html": {
    "href": "api/System.Net.Sockets.SocketException.html",
    "title": "Class SocketException | nanoFramework Documentation",
    "keywords": "Class SocketException The exception that is thrown when a socket error occurs. Inheritance Object Exception SocketException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax [Serializable] public class SocketException : Exception Constructors | Improve this Doc View Source SocketException(SocketError) Initializes a new instance of the SocketException class. Declaration public SocketException(SocketError errorCode) Parameters Type Name Description SocketError errorCode The error code. Properties | Improve this Doc View Source ErrorCode Gets the error code that is associated with this exception. Declaration public int ErrorCode { get; } Property Value Type Description Int32 Remarks The ErrorCode property contains the error code that is associated with the error that caused the exception. The default constructor for SocketException sets the ErrorCode property to the last operating system error that occurred. For more information about socket error codes, see the Windows Sockets version 2 API error code documentation in MSDN."
  },
  "api/System.Net.Sockets.SocketFlags.html": {
    "href": "api/System.Net.Sockets.SocketFlags.html",
    "title": "Enum SocketFlags | nanoFramework Documentation",
    "keywords": "Enum SocketFlags This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax [Flags] public enum SocketFlags Fields Name Description Broadcast Indicates that the control data did not fit into an internal 64-KB buffer and was truncated. ControlDataTruncated Indicates that the control data did not fit into an internal 64-KB buffer and was truncated. DontRoute Send without using routing tables. MaxIOVectorLength Provides a standard value for the number of WSABUF structures that are used to send and receive data. Multicast Indicates a multicast packet. None Use no flags for this call. OutOfBand Process out-of-band data. Partial Partial send or receive for message. Peek Peek at incoming message. Truncated The message was too large to fit into the specified buffer and was truncated."
  },
  "api/System.Net.Sockets.SocketOptionLevel.html": {
    "href": "api/System.Net.Sockets.SocketOptionLevel.html",
    "title": "Enum SocketOptionLevel | nanoFramework Documentation",
    "keywords": "Enum SocketOptionLevel Defines socket option levels for the Socket class. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum SocketOptionLevel Fields Name Description IP Indicates socket options apply to IP sockets. IPv6 Indicates socket options apply to IPv6 sockets. Socket Indicates socket options apply to the socket itself. Tcp Indicates socket options apply to TCP sockets. Udp Indicates socket options apply to UDP sockets."
  },
  "api/System.Net.Sockets.SocketOptionName.html": {
    "href": "api/System.Net.Sockets.SocketOptionName.html",
    "title": "Enum SocketOptionName | nanoFramework Documentation",
    "keywords": "Enum SocketOptionName Defines socket option names for the Socket class. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum SocketOptionName Remarks The SocketOptionName enumeration defines the name of each Socket configuration option. Sockets can be configured with the SetSocketOption(SocketOptionLevel, SocketOptionName, Boolean) method. Fields Name Description AcceptConnection Socket is listening. AddMembership Add an IP group membership. AddSourceMembership Join IP group/source. BlockSource Block IP group/source. Broadcast Permit sending broadcast messages on the socket. BsdUrgent Use urgent data as defined in RFC-1222. This option can be set only once; after it is set, it cannot be turned off. ChecksumCoverage Set or get the UDP checksum coverage. Debug Record debugging information. DontFragment Don't fragment IP datagrams. DontLinger Close socket gracefully without lingering. DontRoute Do not route, send directly to interface addresses. DropMembership Drop an IP group membership. DropSourceMembership Leave IP group/source. Error Get error status and clear. ExclusiveAddressUse Enables a socket to be bound for exclusive access. Expedited Use expedited data as defined in RFC-1222. This option can be set only once; after it is set, it cannot be turned off. HeaderIncluded Header is included with data. HopLimit Specifies the maximum number of router hops for an Internet Protocol version 6 (IPv6) packet. This is similar to Time to Live (TTL) for Internet Protocol version 4. IPOptions IP options. IpTimeToLive IP time to live. KeepAlive Send keep-alives. Linger Linger on close if unsent data is present. MaxConnections Maximum queue length that can be specified by Listen(Int32) . MulticastInterface IP multicast interface. - Additional comments by mbolien: multicast interface You provide it with an SOCKADDR_IN, and that tells the system that it should receive multicast messages on that interface (if you have more than one interface). Binding the socket is not sufficient, since if the Ethernet hardware isnt set up to grab the multicast packets, it wont do good to bind the socket. Kinda like raw sockets. Unless you put the Ethernet card in promiscuous mode, youll only get stuff sent to and from your machine. MulticastLoopback IP Multicast loopback. MulticastTimeToLive IP multicast time to live. NoChecksum Send UDP datagrams with checksum set to zero. NoDelay Disables the Nagle algorithm for send coalescing. OutOfBandInline Receives out-of-band data in the normal data stream. PacketInformation Receive packet information for ipv4. ReceiveBuffer Send low water mark. ReceiveLowWater Receive low water mark. ReceiveTimeout Receive timeout. ReuseAddress Allows the socket to be bound to an address that is already in use. SendBuffer Specifies the total per-socket buffer space reserved for sends. This is unrelated to the maximum message size or the size of a TCP window. SendLowWater Specifies the total per-socket buffer space reserved for receives. This is unrelated to the maximum message size or the size of a TCP window. SendTimeout Send timeout. Type Get socket type. TypeOfService IP type of service and preced. UnblockSource Unblock IP group/source. UpdateAcceptContext Updates an accepted socket's properties by using those of an existing socket. This is equivalent to using the Winsock2 SO_UPDATE_ACCEPT_CONTEXT socket option and is supported only on connection-oriented sockets. UpdateConnectContext Updates a connected socket's properties by using those of an existing socket. This is equivalent to using the Winsock2 SO_UPDATE_CONNECT_CONTEXT socket option and is supported only on connection-oriented sockets. UseLoopback Bypass hardware when possible."
  },
  "api/System.Net.Sockets.SocketType.html": {
    "href": "api/System.Net.Sockets.SocketType.html",
    "title": "Enum SocketType | nanoFramework Documentation",
    "keywords": "Enum SocketType Specifies the type of socket an instance of the Socket class represents. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum SocketType Remarks Before a Socket can send and receive data, it must first be created using an AddressFamily , a SocketType, and a ProtocolType. The SocketType enumeration provides several options for defining the type of Socket that you intend to open. Fields Name Description Dgram Supports datagrams, which are connectionless, unreliable messages of a fixed (typically small) maximum length. Messages might be lost or duplicated and might arrive out of order. A Socket of type Dgram requires no connection prior to sending and receiving data, and can communicate with multiple peers. Dgram uses the Datagram Protocol (Udp) and the InterNetworkAddressFamily. Raw Supports access to the underlying transport protocol. Using the SocketTypeRaw, you can communicate using protocols like Internet Control Message Protocol (Icmp) and Internet Group Management Protocol (Igmp). Your application must provide a complete IP header when sending. Received datagrams return with the IP header and options intact. Rdm Supports connectionless, message-oriented, reliably delivered messages, and preserves message boundaries in data. Rdm (Reliably Delivered Messages) messages arrive unduplicated and in order. Furthermore, the sender is notified if messages are lost. If you initialize a Socket using Rdm, you do not require a remote host connection before sending and receiving data. With Rdm, you can communicate with multiple peers. Seqpacket Provides connection-oriented and reliable two-way transfer of ordered byte streams across a network. Seqpacket does not duplicate data, and it preserves boundaries within the data stream. A Socket of type Seqpacket communicates with a single peer and requires a remote host connection before communication can begin. Stream Supports reliable, two-way, connection-based byte streams without the duplication of data and without preservation of boundaries. A Socket of this type communicates with a single peer and requires a remote host connection before communication can begin. Stream uses the Transmission Control Protocol (Tcp) ProtocolType and the InterNetworkAddressFamily. Unknown Specifies an unknown Socket type."
  },
  "api/System.Net.WebException.html": {
    "href": "api/System.Net.WebException.html",
    "title": "Class WebException | nanoFramework Documentation",
    "keywords": "Class WebException Defines the exception that is thrown by WebRequest instances when an error occurs. Inheritance Object Exception SystemException InvalidOperationException WebException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class WebException : InvalidOperationException Remarks This class is a subclass of InvalidOperationException that contains a WebExceptionStatus and possibly a reference to a WebResponse . The WebResponse is only present if there is a response from the remote server. Constructors | Improve this Doc View Source WebException() The default constructor. Declaration public WebException() | Improve this Doc View Source WebException(String) Constructs a WebException based on the specified message string. Declaration public WebException(string message) Parameters Type Name Description String message The message string for the exception. | Improve this Doc View Source WebException(String, Exception) Constructs a WebException based on the specified message string and inner exception. Declaration public WebException(string message, Exception innerException) Parameters Type Name Description String message The message string for the exception. Exception innerException The exception that caused this exception. | Improve this Doc View Source WebException(String, Exception, WebExceptionStatus, WebResponse) Constructs a WebException based on the specified message string, inner exception, WebExceptionStatus , and WebResponse . Declaration public WebException(string message, Exception inner, WebExceptionStatus status, WebResponse response) Parameters Type Name Description String message Message string for exception. Exception inner The exception that caused this exception. WebExceptionStatus status The network status of the exception. WebResponse response The WebResponse we have. | Improve this Doc View Source WebException(String, WebExceptionStatus) Constructs a WebException based on the specified message string and WebExceptionStatus . Declaration public WebException(string message, WebExceptionStatus status) Parameters Type Name Description String message The message string for the exception. WebExceptionStatus status The network status of the exception. Properties | Improve this Doc View Source Response Gets the response that the remote host returned. Declaration public WebResponse Response { get; } Property Value Type Description WebResponse If a response is available from the Internet resource, a WebResponse instance that contains the error response from an Internet resource; otherwise, null . | Improve this Doc View Source Status Gets the WebExceptionStatus code. Declaration public WebExceptionStatus Status { get; } Property Value Type Description WebExceptionStatus One of the WebExceptionStatus values."
  },
  "api/System.Net.WebExceptionStatus.html": {
    "href": "api/System.Net.WebExceptionStatus.html",
    "title": "Enum WebExceptionStatus | nanoFramework Documentation",
    "keywords": "Enum WebExceptionStatus Defines status codes for the WebException class. Namespace : System.Net Assembly : System.Net.Http.dll Syntax public enum WebExceptionStatus Fields Name Description ConnectFailure The remote service point could not be contacted at the transport level. ConnectionClosed The connection was prematurely closed. KeepAliveFailure The connection for a request that specifies the Keep-alive header was closed unexpectedly. NameResolutionFailure The name resolver service could not resolve the host name. Pending An internal asynchronous request is pending. PipelineFailure The request was a piplined request and the connection was closed before the response was received. ProtocolError The response received from the server was complete but indicated a protocol-level error. For example, an HTTP protocol error such as 401 Access Denied would use this status. ProxyNameResolutionFailure The name resolver service could not resolve the proxy host name. ReceiveFailure A complete response was not received from the remote server. RequestCanceled The request was canceled or an unclassifiable error occurred. This is the default value for Status . SecureChannelFailure An error occurred while establishing a connection using SSL. SendFailure A complete request could not be sent to the remote server. ServerProtocolViolation The server response was not a valid HTTP response. Success No error was encountered. Timeout No response was received during the time-out period for a request. TrustFailure A server certificate could not be validated."
  },
  "api/System.Net.WebHeaderCollection.html": {
    "href": "api/System.Net.WebHeaderCollection.html",
    "title": "Class WebHeaderCollection | nanoFramework Documentation",
    "keywords": "Class WebHeaderCollection Contains protocol headers associated with a request or response. Manages name-value pairs for HTTP headers. Inheritance Object WebHeaderCollection Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class WebHeaderCollection Remarks This class includes additional methods, including HTTP parsing of a collection into a buffer that can be sent. Headers are validated when attempting to add them. Constructors | Improve this Doc View Source WebHeaderCollection() Creates an empty collection of WEB headers. Declaration public WebHeaderCollection() Properties | Improve this Doc View Source AllKeys Gets all header names (keys) in the collection. Declaration public string[] AllKeys { get; } Property Value Type Description String [] An array of type String containing all header names in a Web request. | Improve this Doc View Source Count Gets the number of headers in the collection. Declaration public int Count { get; } Property Value Type Description Int32 An Int32 indicating the number of headers in a request. | Improve this Doc View Source Item[String] Returns the string value for the header. Declaration public string this[string header] { get; } Parameters Type Name Description String header The name of the header. Property Value Type Description String A string containing the value. If no value is present, returns null . Methods | Improve this Doc View Source Add(String) Inserts a new header into the collection. Declaration public void Add(string header) Parameters Type Name Description String header A header name/value pair, in the format \"myHeaderName:myValue\". Remarks This method expects a string with the format \"myName:myValue\", and parses the two parts out. If a header with the specified name already exists, the header that is being added is concatenated onto the existing header. Throws an exception if the specified header name is the name of a special header. | Improve this Doc View Source Add(String, String) Inserts a header with the specified name and value into the collection. Declaration public void Add(string name, string value) Parameters Type Name Description String name The name of the header that is being added to the collection. String value The content of the header that is being added (its header-value). If a header with the specified name already exists, this value is concatenated onto the existing header. Remarks If a header with the specified name already exists, the header that is being added is concatenated onto the existing header. Throws an exception if the specified header name is the name of a special header. | Improve this Doc View Source GetValues(String) Returns the values for the specified header name. Declaration public string[] GetValues(string header) Parameters Type Name Description String header The name of the header. Returns Type Description String [] An array of parsed string objects. Remarks Takes a header name and returns a string array representing the individual values for that header. For example, if the headers contain the following line: Accept: text/plain, text/html then GetValues(\"Accept\") returns an array of two strings: \"text/plain\" and \"text/html\". | Improve this Doc View Source IsRestricted(String) Tests whether the specified HTTP header can be set. Declaration public static bool IsRestricted(string headerName) Parameters Type Name Description String headerName Name for the header. Returns Type Description Boolean Remarks Throws an exception if the header name is blank, contains illegal characters, or contains characters that are reserved by the HTTP protocol. | Improve this Doc View Source Remove(String) Removes the specified header from the collection. Declaration public void Remove(string name) Parameters Type Name Description String name The name of the header to remove. Remarks Throws an exception if the specified header name is the name of a special header. | Improve this Doc View Source Set(String, String) Sets the specified header to the specified value. Declaration public void Set(string name, string value) Parameters Type Name Description String name The header to set. String value The content of the header to set. Remarks Includes validation. Throws an exception if the specified header name is the name of a special header. | Improve this Doc View Source ToByteArray() Generates a byte array representation of the headers, that is ready to be sent. Declaration public byte[] ToByteArray() Returns Type Description Byte [] An array of bytes. Remarks This method serializes the headers into a byte array that can be sent over the network. The format looks like: Header-Name1: Header-Value1\\r\\n Header-Name2: Header-Value2\\r\\n ... Header-NameN: Header-ValueN\\r\\n \\r\\n | Improve this Doc View Source ToString() Generates a string representation of the headers, that is ready to be sent except for it being in String format. Declaration public override string ToString() Returns Type Description String A string representation of the headers. Overrides Object.ToString() Remarks The format looks like the following: Header-Name: Header-Value\\r\\n Header-Name2: Header-Value2\\r\\n ... Header-NameN: Header-ValueN\\r\\n \\r\\n"
  },
  "api/System.Net.WebProxy.html": {
    "href": "api/System.Net.WebProxy.html",
    "title": "Class WebProxy | nanoFramework Documentation",
    "keywords": "Class WebProxy Contains HTTP proxy settings for the WebRequest class. Inheritance Object WebProxy Implements IWebProxy Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class WebProxy : IWebProxy Constructors | Improve this Doc View Source WebProxy() Initializes an empty instance of the WebProxy class. Declaration public WebProxy() Remarks The URI of the proxy can be set later, using the Address property. | Improve this Doc View Source WebProxy(String) Initializes a new instance of the WebProxy class with the specified URI. Declaration public WebProxy(string Address) Parameters Type Name Description String Address The URI address of the proxy server. Remarks The WebProxy instance is initialized with the Address property set to a Uri instance containing the Address string. For the new instance of the WebProxy class, \"Bypass on local addresses\" is set to false . | Improve this Doc View Source WebProxy(String, Boolean) Initializes a new instance of the WebProxy class with the specified URI and bypass setting. Declaration public WebProxy(string Address, bool BypassOnLocal) Parameters Type Name Description String Address The URI of the proxy server. Boolean BypassOnLocal Indicates whether to bypass the proxy when accessing local addresses. | Improve this Doc View Source WebProxy(String, Int32) Initializes a new instance of the WebProxy class with the specified host and port number. Declaration public WebProxy(string Host, int Port) Parameters Type Name Description String Host The name of the proxy host, such as: contoso Int32 Port The port number on the host to use, such as: 80 Remarks The WebProxy instance is initialized with the Address property set to a Uri instance of the form: http://Host:Port | Improve this Doc View Source WebProxy(Uri) Initializes a new instance of the WebProxy class from the specified Uri instance. Declaration public WebProxy(Uri Address) Parameters Type Name Description Uri Address A Uri instance that contains the address of the proxy server. | Improve this Doc View Source WebProxy(Uri, Boolean) Initializes a new instance of the WebProxy class with the specified Uri instance and bypass setting. Declaration public WebProxy(Uri Address, bool BypassOnLocal) Parameters Type Name Description Uri Address A Uri instance that contains the address of the proxy server. Boolean BypassOnLocal Indicates whether to bypass the WebProxy on local network addresses. Properties | Improve this Doc View Source Address Gets or sets the address of the proxy server. Declaration public Uri Address { get; set; } Property Value Type Description Uri A Uri instance that contains the address of the proxy server. | Improve this Doc View Source BypassProxyOnLocal Gets or sets whether to bypass the proxy server for local addresses. Declaration public bool BypassProxyOnLocal { get; set; } Property Value Type Description Boolean true to bypass the proxy server for local addresses; otherwise, false . Methods | Improve this Doc View Source GetProxy(Uri) Returns the proxied URI for a request. Declaration public Uri GetProxy(Uri destination) Parameters Type Name Description Uri destination The Uri instance of the requested Internet resource. Returns Type Description Uri The Uri instance of the Internet resource, if the resource is on the bypass list; otherwise, the Uri instance of the proxy. | Improve this Doc View Source IsBypassed(Uri) Indicates whether to use the proxy server for the specified host. Declaration public bool IsBypassed(Uri host) Parameters Type Name Description Uri host The Uri instance of the host to check for proxy use. Returns Type Description Boolean true if the proxy server should not be used for the host; otherwise, false . Implements IWebProxy"
  },
  "api/System.Net.WebRequest.html": {
    "href": "api/System.Net.WebRequest.html",
    "title": "Class WebRequest | nanoFramework Documentation",
    "keywords": "Class WebRequest Makes a request to a Uniform Resource Identifier (URI). This is an abstract class. Inheritance Object MarshalByRefObject WebRequest HttpWebRequest Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public abstract class WebRequest : MarshalByRefObject, IDisposable Remarks This is the base class of all Web resource/protocol objects. This class provides common methods, data and proprties for making the top-level request. Constructors | Improve this Doc View Source WebRequest() Initializes a new instance of the WebRequest class. Declaration protected WebRequest() Properties | Improve this Doc View Source ConnectionGroupName When overridden in a descendant class, gets or sets the name of the connection group for the request. Declaration public virtual string ConnectionGroupName { get; set; } Property Value Type Description String The name of the connection group for the request. Remarks This property serves as a way of grouping connections. | Improve this Doc View Source ContentLength When overridden in a descendant class, gets or sets the content length of the request data being sent. Declaration public virtual long ContentLength { get; set; } Property Value Type Description Int64 The number of bytes of request data being sent. Remarks The content length is the length of the message with the verb. It is useful only with verbs that actually support a message, such as POST; it is not used for the GET verb. | Improve this Doc View Source ContentType When overridden in a descendant class, gets or sets the content type of the request data being sent. Declaration public virtual string ContentType { get; set; } Property Value Type Description String The content type of the request data. Remarks The content length is the length of the message with the verb. It is useful only with verbs that actually support a message, such as POST; it is not used for the GET verb. | Improve this Doc View Source DefaultWebProxy Gets or sets the global HTTP proxy. The DefaultWebProxy property determines the default proxy that all WebRequest instances use if the request supports proxies and no proxy is set explicitly using the Proxy property. Proxies are currently supported by HttpWebRequest. Declaration public static IWebProxy DefaultWebProxy { get; set; } Property Value Type Description IWebProxy | Improve this Doc View Source Headers When overridden in a descendant class, gets or sets the collection of header name/value pairs associated with the request. Declaration public virtual WebHeaderCollection Headers { get; set; } Property Value Type Description WebHeaderCollection A WebHeaderCollection containing the header name/value pairs associated with this request. | Improve this Doc View Source Method When overridden in a descendant class, gets or sets the protocol method to use in this request. Declaration public virtual string Method { get; set; } Property Value Type Description String The protocol method to use in this request. Remarks This property gets or sets the verb to this request, such as GET or POST for HTTP. | Improve this Doc View Source Proxy When overridden in a descendant class, gets or sets the network proxy to use to access this Internet resource. Declaration public virtual IWebProxy Proxy { get; set; } Property Value Type Description IWebProxy The IWebProxy to use to access the Internet resource. | Improve this Doc View Source RequestUri When overridden in a descendant class, gets the URI of the Internet resource associated with the request. Declaration public virtual Uri RequestUri { get; } Property Value Type Description Uri A Uri representing the resource associated with the request. Remarks This property is read-only, since the Uri can be specified only on creation. | Improve this Doc View Source Timeout Gets or sets the length of time, in milliseconds, before the request times out. Declaration public virtual int Timeout { get; set; } Property Value Type Description Int32 The length of time, in milliseconds, until the request times out, or the value Timeout.Infinite to indicate that the request does not time out. The default value is defined by the descendant class. Methods | Improve this Doc View Source Create(String) Initializes a new WebRequest instance for the specified URI scheme, such as http://, https://, or file://. Declaration public static WebRequest Create(string requestUriString) Parameters Type Name Description String requestUriString The URI that identifies the Internet resource. Returns Type Description WebRequest Remarks This is the main creation routine. The specified Uri is looked up in the prefix match table, and the appropriate handler is invoked to create the object. | Improve this Doc View Source Create(Uri) Creates a WebRequest . Declaration public static WebRequest Create(Uri requestUri) Parameters Type Name Description Uri requestUri A Uri containing the URI of the requested resource. Returns Type Description WebRequest Remarks This is the main creation routine. The specified Uri is looked up in the prefix match table, and the appropriate handler is invoked to create the object. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetRequestStream() When overridden in a descendant class, returns a Stream for writing data to the Internet resource. Declaration public virtual Stream GetRequestStream() Returns Type Description Stream A Stream for writing data to the Internet resource. | Improve this Doc View Source GetResponse() When overridden in a descendant class, returns a response to an Internet request. Declaration public virtual WebResponse GetResponse() Returns Type Description WebResponse A WebResponse containing the response to the Internet request. | Improve this Doc View Source Initialize() Initialize has to be called before the class is used. Normally should be called by the constructor above. Declaration public static void Initialize() | Improve this Doc View Source RegisterPrefix(String, IWebRequestCreate) Registers a WebRequest descendant for the specified URI. Declaration public static bool RegisterPrefix(string prefix, IWebRequestCreate creator) Parameters Type Name Description String prefix The complete URI or URI prefix that the WebRequest descendant services. IWebRequestCreate creator The create method that the WebRequest calls to create the WebRequest descendant. Returns Type Description Boolean true . Implements IDisposable"
  },
  "api/System.Net.WebResponse.html": {
    "href": "api/System.Net.WebResponse.html",
    "title": "Class WebResponse | nanoFramework Documentation",
    "keywords": "Class WebResponse Provides a response from a Uniform Resource Identifier (URI). This is an abstract class. Inheritance Object MarshalByRefObject WebResponse HttpWebResponse Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public abstract class WebResponse : MarshalByRefObject, IDisposable Remarks This is the abstract base class for all WebResponse objects. Constructors | Improve this Doc View Source WebResponse() Initializes a new instance of the WebResponse class. Declaration protected WebResponse() Properties | Improve this Doc View Source ContentLength When overridden in a descendant class, gets or sets the content length of data being received. Declaration public virtual long ContentLength { get; set; } Property Value Type Description Int64 The number of bytes returned from the Internet resource. | Improve this Doc View Source ContentType When overridden in a derived class, gets or sets the content type of the data being received. Declaration public virtual string ContentType { get; set; } Property Value Type Description String A string that contains the content type of the response. | Improve this Doc View Source Headers When overridden in a derived class, gets a collection of header name-value pairs associated with this request. Declaration public virtual WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection An instance of the WebHeaderCollection class that contains header values associated with this response. | Improve this Doc View Source ResponseUri When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request. Declaration public virtual Uri ResponseUri { get; } Property Value Type Description Uri An instance of the Uri class that contains the URI of the Internet resource that actually responded to the request. Remarks This property gets the final Response URI, that includes any changes that may have transpired from the orginal request. Methods | Improve this Doc View Source Close() When overridden by a descendant class, closes the response stream. Declaration public virtual void Close() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetResponseStream() When overridden in a descendant class, returns the data stream from the Internet resource. Declaration public virtual Stream GetResponseStream() Returns Type Description Stream An instance of the Stream class for reading data from the Internet resource. Implements IDisposable"
  },
  "api/System.NonSerializedAttribute.html": {
    "href": "api/System.NonSerializedAttribute.html",
    "title": "Class NonSerializedAttribute | nanoFramework Documentation",
    "keywords": "Class NonSerializedAttribute Indicates that a field of a serializable class should not be serialized. This class cannot be inherited. Inheritance Object Attribute NonSerializedAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class NonSerializedAttribute : Attribute Constructors | Improve this Doc View Source NonSerializedAttribute() Initializes a new instance of the NonSerializedAttribute class. Declaration public NonSerializedAttribute()"
  },
  "api/System.NotImplementedException.html": {
    "href": "api/System.NotImplementedException.html",
    "title": "Class NotImplementedException | nanoFramework Documentation",
    "keywords": "Class NotImplementedException The exception that is thrown when a requested method or operation is not implemented. Inheritance Object Exception SystemException NotImplementedException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class NotImplementedException : SystemException Constructors | Improve this Doc View Source NotImplementedException() Initializes a new instance of the NotImplementedException class with default properties. Declaration public NotImplementedException() | Improve this Doc View Source NotImplementedException(String) Initializes a new instance of the NotImplementedException class with a specified error message. Declaration public NotImplementedException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source NotImplementedException(String, Exception) Initializes a new instance of the NotImplementedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public NotImplementedException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.NotSupportedException.html": {
    "href": "api/System.NotSupportedException.html",
    "title": "Class NotSupportedException | nanoFramework Documentation",
    "keywords": "Class NotSupportedException The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. Inheritance Object Exception SystemException NotSupportedException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class NotSupportedException : SystemException Constructors | Improve this Doc View Source NotSupportedException() Initializes a new instance of the NotSupportedException class, setting the Message property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture. Declaration public NotSupportedException() | Improve this Doc View Source NotSupportedException(String) Initializes a new instance of the NotSupportedException class with a specified error message. Declaration public NotSupportedException(string message) Parameters Type Name Description String message A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. | Improve this Doc View Source NotSupportedException(String, Exception) Initializes a new instance of the NotSupportedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public NotSupportedException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.NullReferenceException.html": {
    "href": "api/System.NullReferenceException.html",
    "title": "Class NullReferenceException | nanoFramework Documentation",
    "keywords": "Class NullReferenceException The exception that is thrown when there is an attempt to dereference a null object reference. Inheritance Object Exception SystemException NullReferenceException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class NullReferenceException : SystemException Constructors | Improve this Doc View Source NullReferenceException() Initializes a new instance of the NullReferenceException class, setting the Message property of the new instance to a system-supplied message that describes the error, such as \"The value 'null' was found where an instance of an object was required.\" This message takes into account the current system culture. Declaration public NullReferenceException() | Improve this Doc View Source NullReferenceException(String) Initializes a new instance of the NullReferenceException class with a specified error message. Declaration public NullReferenceException(string message) Parameters Type Name Description String message A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. | Improve this Doc View Source NullReferenceException(String, Exception) Initializes a new instance of the NullReferenceException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public NullReferenceException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.Object.html": {
    "href": "api/System.Object.html",
    "title": "Class Object | nanoFramework Documentation",
    "keywords": "Class Object Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy. Inheritance Object Namespace : System Assembly : mscorlib.dll Syntax public class Object Constructors | Improve this Doc View Source Object() Initializes a new instance of the Object class. Declaration public Object() Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public virtual bool Equals(object obj) Parameters Type Name Description Object obj he object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source Equals(Object, Object) Determines whether the specified object instances are considered equal. Declaration public static bool Equals(object objA, object objB) Parameters Type Name Description Object objA The first object to compare. Object objB The second object to compare. Returns Type Description Boolean true if the objects are considered equal; otherwise, false. If both objA and objB are null, the method returns true. GetHashCode() Serves as the default hash function. Declaration public virtual int GetHashCode() Returns Type Description Int32 A hash code for the current object. GetType() Gets the Type of the current instance. Declaration public Type GetType() Returns Type Description Type The exact runtime type of the current instance. Remarks Available only in mscorlib build with support for System.Reflection. MemberwiseClone() Creates a shallow copy of the current Object. Declaration protected object MemberwiseClone() Returns Type Description Object A shallow copy of the current Object. ReferenceEquals(Object, Object) Determines whether the specified Object instances are the same instance. Declaration public static bool ReferenceEquals(object objA, object objB) Parameters Type Name Description Object objA The first object to compare. Object objB The second object to compare. Returns Type Description Boolean true if objA is the same instance as objB or if both are null; otherwise, false. | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public virtual string ToString() Returns Type Description String A string that represents the current object. Remarks Available only in mscorlib build with support for System.Reflection."
  },
  "api/System.ObjectDisposedException.html": {
    "href": "api/System.ObjectDisposedException.html",
    "title": "Class ObjectDisposedException | nanoFramework Documentation",
    "keywords": "Class ObjectDisposedException The exception that is thrown when an operation is performed on a disposed object. Inheritance Object Exception SystemException ObjectDisposedException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class ObjectDisposedException : SystemException Constructors | Improve this Doc View Source ObjectDisposedException() Initializes a new instance of the ObjectDisposedException class. Declaration public ObjectDisposedException() | Improve this Doc View Source ObjectDisposedException(String) Initializes a new instance of the ObjectDisposedException class with a string containing the name of the disposed object. Declaration public ObjectDisposedException(string message) Parameters Type Name Description String message A string containing the name of the disposed object. | Improve this Doc View Source ObjectDisposedException(String, Exception) Initializes a new instance of the ObjectDisposedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ObjectDisposedException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If innerException is not null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.ObsoleteAttribute.html": {
    "href": "api/System.ObsoleteAttribute.html",
    "title": "Class ObsoleteAttribute | nanoFramework Documentation",
    "keywords": "Class ObsoleteAttribute Marks the program elements that are no longer in use. This class cannot be inherited. Inheritance Object Attribute ObsoleteAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)] public sealed class ObsoleteAttribute : Attribute Constructors | Improve this Doc View Source ObsoleteAttribute() Initializes a new instance of the ObsoleteAttribute class with default properties. Declaration public ObsoleteAttribute() | Improve this Doc View Source ObsoleteAttribute(String) Initializes a new instance of the ObsoleteAttribute class with a specified workaround message. Declaration public ObsoleteAttribute(string message) Parameters Type Name Description String message The text string that describes alternative workarounds. | Improve this Doc View Source ObsoleteAttribute(String, Boolean) Initializes a new instance of the ObsoleteAttribute class with a workaround message and a Boolean value indicating whether the obsolete element usage is considered an error. Declaration public ObsoleteAttribute(string message, bool error) Parameters Type Name Description String message The text string that describes alternative workarounds. Boolean error true if the obsolete element usage generates a compiler error; false if it generates a compiler warning. Properties | Improve this Doc View Source IsError Gets a Boolean value indicating whether the compiler will treat usage of the obsolete program element as an error. Declaration public bool IsError { get; } Property Value Type Description Boolean true if the obsolete element usage is considered an error; otherwise, false. The default is false. | Improve this Doc View Source Message Gets the workaround message, including a description of the alternative program elements. Declaration public string Message { get; } Property Value Type Description String The workaround text string."
  },
  "api/System.OutOfMemoryException.html": {
    "href": "api/System.OutOfMemoryException.html",
    "title": "Class OutOfMemoryException | nanoFramework Documentation",
    "keywords": "Class OutOfMemoryException The exception that is thrown when there is not enough memory to continue the execution of a program. Inheritance Object Exception SystemException OutOfMemoryException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class OutOfMemoryException : SystemException Constructors | Improve this Doc View Source OutOfMemoryException() Initializes a new instance of the OutOfMemoryException class. Declaration public OutOfMemoryException() | Improve this Doc View Source OutOfMemoryException(String) Initializes a new instance of the OutOfMemoryException class with a specified error message. Declaration public OutOfMemoryException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source OutOfMemoryException(String, Exception) Initializes a new instance of the OutOfMemoryException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public OutOfMemoryException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.ParamArrayAttribute.html": {
    "href": "api/System.ParamArrayAttribute.html",
    "title": "Class ParamArrayAttribute | nanoFramework Documentation",
    "keywords": "Class ParamArrayAttribute Indicates that a method will allow a variable number of arguments in its invocation. This class cannot be inherited. Inheritance Object Attribute ParamArrayAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public sealed class ParamArrayAttribute : Attribute Constructors | Improve this Doc View Source ParamArrayAttribute() Initializes a new instance of the ParamArrayAttribute class with default properties. Declaration public ParamArrayAttribute()"
  },
  "api/System.Random.html": {
    "href": "api/System.Random.html",
    "title": "Class Random | nanoFramework Documentation",
    "keywords": "Class Random Represents a random number generator, a device that produces a sequence of numbers that meet certain statistical requirements for randomness. Inheritance Object Random Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class Random Remarks Depending on the platform it can be a software dependent pseudo-random generator algorithm or a hardware random generator providing true random numbers. Constructors Random() Initializes a new instance of the Random class. If the provider is algorithm based the initialisation is performed using a time- dependent default seed value. Declaration public Random() Random(Int32) Initializes a new instance of the Random class, using the specified seed value. Declaration public Random(int seed) Parameters Type Name Description Int32 seed A number used to calculate a starting value for the pseudo-random number sequence. Methods Next() Returns a nonnegative random number. Declaration public virtual int Next() Returns Type Description Int32 A 32-bit signed integer greater than or equal to zero and less than MaxValue. Next(Int32) Returns a nonnegative random number less than the specified maximum. Declaration public virtual int Next(int maxValue) Parameters Type Name Description Int32 maxValue The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero. Returns Type Description Int32 A 32-bit signed integer greater than or equal to zero, and less than maxValue. NextBytes(Byte[]) Fills the elements of a specified array of bytes with random numbers. Declaration public virtual void NextBytes(byte[] buffer) Parameters Type Name Description Byte [] buffer An array of bytes to contain random numbers. NextDouble() Returns a random number between 0.0 and 1.0. Declaration public virtual double NextDouble() Returns Type Description Double A double-precision floating point number greater than or equal to 0.0, and less than 1.0."
  },
  "api/System.Reflection.Assembly.html": {
    "href": "api/System.Reflection.Assembly.html",
    "title": "Class Assembly | nanoFramework Documentation",
    "keywords": "Class Assembly Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application. Inheritance Object Assembly Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public class Assembly Properties FullName Gets the display name of the assembly. Declaration public virtual string FullName { get; } Property Value Type Description String The display name of the assembly. Methods | Improve this Doc View Source GetAssembly(Type) Gets the currently loaded assembly in which the specified type is defined. Declaration public static Assembly GetAssembly(Type type) Parameters Type Name Description Type type An object representing a type in the assembly that will be returned. Returns Type Description Assembly The assembly in which the specified type is defined. GetExecutingAssembly() Gets the assembly that contains the code that is currently executing. Declaration public static Assembly GetExecutingAssembly() Returns Type Description Assembly The assembly that contains the code that is currently executing. | Improve this Doc View Source GetName() Gets an AssemblyName for this assembly. Declaration public AssemblyName GetName() Returns Type Description AssemblyName An object that contains the fully parsed display name for this assembly. | Improve this Doc View Source GetSatelliteAssembly(CultureInfo) Gets the satellite assembly for the specified culture. Declaration public Assembly GetSatelliteAssembly(CultureInfo culture) Parameters Type Name Description CultureInfo culture The specified culture. Returns Type Description Assembly The specified satellite assembly. Exceptions Type Condition ArgumentNullException culture is null. ArgumentException GetType(String) Gets the Type object with the specified name in the assembly instance. Declaration public virtual Type GetType(string name) Parameters Type Name Description String name The full name of the type. Returns Type Description Type An object that represents the specified class, or null if the class is not found. | Improve this Doc View Source GetType(String, Boolean) Gets the Type object with the specified name in the assembly instance and optionally throws an exception if the type is not found. Declaration public virtual Type GetType(string name, bool throwOnError) Parameters Type Name Description String name The full name of the type. Boolean throwOnError true to throw an exception if the type is not found; false to return null. Returns Type Description Type An object that represents the specified class. Exceptions Type Condition ArgumentException GetTypes() Gets the types defined in this assembly. Declaration public virtual Type[] GetTypes() Returns Type Description Type [] An array that contains all the types that are defined in this assembly. Load(Byte[]) Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller. Declaration public static Assembly Load(byte[] rawAssembly) Parameters Type Name Description Byte [] rawAssembly A byte array that is a COFF-based image containing an emitted assembly. Returns Type Description Assembly The loaded assembly. | Improve this Doc View Source Load(String) Loads an assembly given the long form of its name. Declaration public static Assembly Load(string assemblyString) Parameters Type Name Description String assemblyString The long form of the assembly name. Returns Type Description Assembly The loaded assembly. Exceptions Type Condition ArgumentNullException assemblyString is null."
  },
  "api/System.Reflection.AssemblyCompanyAttribute.html": {
    "href": "api/System.Reflection.AssemblyCompanyAttribute.html",
    "title": "Class AssemblyCompanyAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyCompanyAttribute Defines a company name custom attribute for an assembly manifest. Inheritance Object Attribute AssemblyCompanyAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyCompanyAttribute : Attribute Constructors | Improve this Doc View Source AssemblyCompanyAttribute(String) Initializes a new instance of the AssemblyCompanyAttribute class. Declaration public AssemblyCompanyAttribute(string company) Parameters Type Name Description String company The company name information. Properties | Improve this Doc View Source Company Gets company name information. Declaration public string Company { get; } Property Value Type Description String A string containing the company name."
  },
  "api/System.Reflection.AssemblyConfigurationAttribute.html": {
    "href": "api/System.Reflection.AssemblyConfigurationAttribute.html",
    "title": "Class AssemblyConfigurationAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyConfigurationAttribute Specifies the build configuration, such as retail or debug, for an assembly. Inheritance Object Attribute AssemblyConfigurationAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyConfigurationAttribute : Attribute Constructors | Improve this Doc View Source AssemblyConfigurationAttribute(String) Initializes a new instance of the AssemblyConfigurationAttribute class. Declaration public AssemblyConfigurationAttribute(string configuration) Parameters Type Name Description String configuration The assembly configuration. Properties | Improve this Doc View Source Configuration Gets assembly configuration information. Declaration public string Configuration { get; } Property Value Type Description String A string containing the assembly configuration information."
  },
  "api/System.Reflection.AssemblyCopyrightAttribute.html": {
    "href": "api/System.Reflection.AssemblyCopyrightAttribute.html",
    "title": "Class AssemblyCopyrightAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyCopyrightAttribute Defines a copyright custom attribute for an assembly manifest. Inheritance Object Attribute AssemblyCopyrightAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyCopyrightAttribute : Attribute Constructors | Improve this Doc View Source AssemblyCopyrightAttribute(String) Initializes a new instance of the AssemblyCopyrightAttribute class. Declaration public AssemblyCopyrightAttribute(string copyright) Parameters Type Name Description String copyright The copyright information. Properties | Improve this Doc View Source Copyright Gets copyright information. Declaration public string Copyright { get; } Property Value Type Description String A string containing the copyright information."
  },
  "api/System.Reflection.AssemblyCultureAttribute.html": {
    "href": "api/System.Reflection.AssemblyCultureAttribute.html",
    "title": "Class AssemblyCultureAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyCultureAttribute Specifies which culture the assembly supports. Inheritance Object Attribute AssemblyCultureAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyCultureAttribute : Attribute Constructors | Improve this Doc View Source AssemblyCultureAttribute(String) Initializes a new instance of the AssemblyCultureAttribute class with the culture supported by the assembly being attributed. Declaration public AssemblyCultureAttribute(string culture) Parameters Type Name Description String culture The culture supported by the attributed assembly. Properties | Improve this Doc View Source Culture Gets the supported culture of the attributed assembly. Declaration public string Culture { get; } Property Value Type Description String A string containing the name of the supported culture."
  },
  "api/System.Reflection.AssemblyDefaultAliasAttribute.html": {
    "href": "api/System.Reflection.AssemblyDefaultAliasAttribute.html",
    "title": "Class AssemblyDefaultAliasAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyDefaultAliasAttribute Defines a friendly default alias for an assembly manifest. Inheritance Object Attribute AssemblyDefaultAliasAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyDefaultAliasAttribute : Attribute Constructors | Improve this Doc View Source AssemblyDefaultAliasAttribute(String) Initializes a new instance of the AssemblyDefaultAliasAttribute class. Declaration public AssemblyDefaultAliasAttribute(string defaultAlias) Parameters Type Name Description String defaultAlias The assembly default alias information. Properties | Improve this Doc View Source DefaultAlias Gets default alias information. Declaration public string DefaultAlias { get; } Property Value Type Description String A string containing the default alias information."
  },
  "api/System.Reflection.AssemblyDelaySignAttribute.html": {
    "href": "api/System.Reflection.AssemblyDelaySignAttribute.html",
    "title": "Class AssemblyDelaySignAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyDelaySignAttribute Specifies that the assembly is not fully signed when created. Inheritance Object Attribute AssemblyDelaySignAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyDelaySignAttribute : Attribute Constructors | Improve this Doc View Source AssemblyDelaySignAttribute(Boolean) Initializes a new instance of the AssemblyDelaySignAttribute class. Declaration public AssemblyDelaySignAttribute(bool delaySign) Parameters Type Name Description Boolean delaySign true if the feature this attribute represents is activated; otherwise, false. Properties | Improve this Doc View Source DelaySign Gets a value indicating the state of the attribute. Declaration public bool DelaySign { get; } Property Value Type Description Boolean true if this assembly has been built as delay-signed; otherwise, false."
  },
  "api/System.Reflection.AssemblyDescriptionAttribute.html": {
    "href": "api/System.Reflection.AssemblyDescriptionAttribute.html",
    "title": "Class AssemblyDescriptionAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyDescriptionAttribute Provides a text description for an assembly. Inheritance Object Attribute AssemblyDescriptionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyDescriptionAttribute : Attribute Constructors | Improve this Doc View Source AssemblyDescriptionAttribute(String) Initializes a new instance of the AssemblyDescriptionAttribute class. Declaration public AssemblyDescriptionAttribute(string description) Parameters Type Name Description String description The assembly description. Properties | Improve this Doc View Source Description Gets assembly description information. Declaration public string Description { get; } Property Value Type Description String A string containing the assembly description."
  },
  "api/System.Reflection.AssemblyFileVersionAttribute.html": {
    "href": "api/System.Reflection.AssemblyFileVersionAttribute.html",
    "title": "Class AssemblyFileVersionAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyFileVersionAttribute Instructs a compiler to use a specific version number for the Win32 file version resource. The Win32 file version is not required to be the same as the assembly's version number. Inheritance Object Attribute AssemblyFileVersionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyFileVersionAttribute : Attribute Constructors | Improve this Doc View Source AssemblyFileVersionAttribute(String) Initializes a new instance of the AssemblyFileVersionAttribute class, specifying the file version. Declaration public AssemblyFileVersionAttribute(string version) Parameters Type Name Description String version The file version. Exceptions Type Condition ArgumentNullException version is null Properties | Improve this Doc View Source Version Gets the Win32 file version resource name. Declaration public string Version { get; } Property Value Type Description String A string containing the file version resource name."
  },
  "api/System.Reflection.AssemblyFlagsAttribute.html": {
    "href": "api/System.Reflection.AssemblyFlagsAttribute.html",
    "title": "Class AssemblyFlagsAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyFlagsAttribute Specifies a bitwise combination of AssemblyNameFlags flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited. Inheritance Object Attribute AssemblyFlagsAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyFlagsAttribute : Attribute Remarks Available only in mscorlib build with support for System.Reflection. Constructors | Improve this Doc View Source AssemblyFlagsAttribute(AssemblyNameFlags) Initializes a new instance of the AssemblyFlagsAttribute class with the specified combination of AssemblyNameFlags flags. Declaration public AssemblyFlagsAttribute(AssemblyNameFlags assemblyFlags) Parameters Type Name Description AssemblyNameFlags assemblyFlags A bitwise combination of AssemblyNameFlags flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key. | Improve this Doc View Source AssemblyFlagsAttribute(UInt32) Note: This API is now obsolete. Initializes a new instance of the AssemblyFlagsAttribute class with the specified combination of AssemblyNameFlags flags, cast as an unsigned integer value. Declaration [CLSCompliant(false)] public AssemblyFlagsAttribute(uint flags) Parameters Type Name Description UInt32 flags A bitwise combination of AssemblyNameFlags flags, cast as an unsigned integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key. Properties | Improve this Doc View Source Flags Note: This API is now obsolete. Gets an unsigned integer value representing the combination of AssemblyNameFlags flags specified when this attribute instance was created. Declaration [CLSCompliant(false)] public uint Flags { get; } Property Value Type Description UInt32 An unsigned integer value representing a bitwise combination of AssemblyNameFlags flags."
  },
  "api/System.Reflection.AssemblyInformationalVersionAttribute.html": {
    "href": "api/System.Reflection.AssemblyInformationalVersionAttribute.html",
    "title": "Class AssemblyInformationalVersionAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyInformationalVersionAttribute Defines additional version information for an assembly manifest. Inheritance Object Attribute AssemblyInformationalVersionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyInformationalVersionAttribute : Attribute Constructors | Improve this Doc View Source AssemblyInformationalVersionAttribute(String) Initializes a new instance of the AssemblyInformationalVersionAttribute class. Declaration public AssemblyInformationalVersionAttribute(string informationalVersion) Parameters Type Name Description String informationalVersion The assembly version information. Properties | Improve this Doc View Source InformationalVersion Gets version information. Declaration public string InformationalVersion { get; } Property Value Type Description String A string containing the version information."
  },
  "api/System.Reflection.AssemblyKeyFileAttribute.html": {
    "href": "api/System.Reflection.AssemblyKeyFileAttribute.html",
    "title": "Class AssemblyKeyFileAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyKeyFileAttribute Specifies the name of a file containing the key pair used to generate a strong name. Inheritance Object Attribute AssemblyKeyFileAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyKeyFileAttribute : Attribute Constructors | Improve this Doc View Source AssemblyKeyFileAttribute(String) Initializes a new instance of the AssemblyKeyFileAttribute class with the name of the file containing the key pair to generate a strong name for the assembly being attributed. Declaration public AssemblyKeyFileAttribute(string keyFile) Parameters Type Name Description String keyFile The name of the file containing the key pair. Properties | Improve this Doc View Source KeyFile Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly. Declaration public string KeyFile { get; } Property Value Type Description String A string containing the name of the file that contains the key pair."
  },
  "api/System.Reflection.AssemblyKeyNameAttribute.html": {
    "href": "api/System.Reflection.AssemblyKeyNameAttribute.html",
    "title": "Class AssemblyKeyNameAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyKeyNameAttribute Specifies the name of a key container within the CSP containing the key pair used to generate a strong name. Inheritance Object Attribute AssemblyKeyNameAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyKeyNameAttribute : Attribute Constructors | Improve this Doc View Source AssemblyKeyNameAttribute(String) Initializes a new instance of the AssemblyKeyNameAttribute class with the name of the container holding the key pair used to generate a strong name for the assembly being attributed. Declaration public AssemblyKeyNameAttribute(string keyName) Parameters Type Name Description String keyName The name of the container containing the key pair. Properties | Improve this Doc View Source KeyName Gets the name of the container having the key pair that is used to generate a strong name for the attributed assembly. Declaration public string KeyName { get; } Property Value Type Description String A string containing the name of the container that has the relevant key pair."
  },
  "api/System.Reflection.AssemblyName.html": {
    "href": "api/System.Reflection.AssemblyName.html",
    "title": "Class AssemblyName | nanoFramework Documentation",
    "keywords": "Class AssemblyName Describes an assembly's unique identity in full. Inheritance Object AssemblyName Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public sealed class AssemblyName Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source FullName Gets the full name of the assembly, also known as the display name. Declaration public string FullName { get; } Property Value Type Description String A string that is the full name of the assembly, also known as the display name. | Improve this Doc View Source Name Gets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension. Declaration public string Name { get; } Property Value Type Description String The simple name of the assembly. | Improve this Doc View Source Version Gets or sets the major, minor, build, and revision numbers of the assembly. Declaration public Version Version { get; } Property Value Type Description Version An object that represents the major, minor, build, and revision numbers of the assembly."
  },
  "api/System.Reflection.AssemblyNameFlags.html": {
    "href": "api/System.Reflection.AssemblyNameFlags.html",
    "title": "Enum AssemblyNameFlags | nanoFramework Documentation",
    "keywords": "Enum AssemblyNameFlags Provides information about an Assembly reference. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public enum AssemblyNameFlags Remarks Available only in mscorlib build with support for System.Reflection. Fields Name Description EnableJITcompileOptimizer Specifies that just-in-time (JIT) compiler optimization is disabled for the assembly. This is the exact opposite of the meaning that is suggested by the member name. EnableJITcompileTracking Specifies that just-in-time (JIT) compiler tracking is enabled for the assembly. None Specifies that no flags are in effect. PublicKey Specifies that a public key is formed from the full public key rather than the public key token. Retargetable Specifies that the assembly can be retargeted at runtime to an assembly from a different publisher. This value supports the .NET Framework infrastructure and is not intended to be used directly from your code."
  },
  "api/System.Reflection.AssemblyNativeVersionAttribute.html": {
    "href": "api/System.Reflection.AssemblyNativeVersionAttribute.html",
    "title": "Class AssemblyNativeVersionAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyNativeVersionAttribute Defines the required native version required for an assembly. At deploy time this is used to check if the target device has the correct native version to support this assembly. Inheritance Object Attribute AssemblyNativeVersionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = false)] public sealed class AssemblyNativeVersionAttribute : Attribute Remarks This attribute is specific of nanoFramework. Constructors | Improve this Doc View Source AssemblyNativeVersionAttribute(String) Initializes a new instance of the AssemblyNativeVersionAttribute class. Declaration public AssemblyNativeVersionAttribute(string version) Parameters Type Name Description String version The native version required for the assembly. Properties | Improve this Doc View Source NativeVersion Gets the native version required for the assembly. Declaration public string NativeVersion { get; } Property Value Type Description String A string containing the native version."
  },
  "api/System.Reflection.AssemblyProductAttribute.html": {
    "href": "api/System.Reflection.AssemblyProductAttribute.html",
    "title": "Class AssemblyProductAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyProductAttribute Defines a product name custom attribute for an assembly manifest. Inheritance Object Attribute AssemblyProductAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyProductAttribute : Attribute Constructors | Improve this Doc View Source AssemblyProductAttribute(String) Initializes a new instance of the AssemblyProductAttribute class. Declaration public AssemblyProductAttribute(string product) Parameters Type Name Description String product The product name information. Properties | Improve this Doc View Source Product Gets product name information. Declaration public string Product { get; } Property Value Type Description String A string containing the product name."
  },
  "api/System.Reflection.AssemblyTitleAttribute.html": {
    "href": "api/System.Reflection.AssemblyTitleAttribute.html",
    "title": "Class AssemblyTitleAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyTitleAttribute Specifies a description for an assembly. Inheritance Object Attribute AssemblyTitleAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyTitleAttribute : Attribute Constructors | Improve this Doc View Source AssemblyTitleAttribute(String) Initializes a new instance of the AssemblyTitleAttribute class. Declaration public AssemblyTitleAttribute(string title) Parameters Type Name Description String title The assembly title. Properties | Improve this Doc View Source Title Gets assembly title information. Declaration public string Title { get; } Property Value Type Description String The assembly title."
  },
  "api/System.Reflection.AssemblyTrademarkAttribute.html": {
    "href": "api/System.Reflection.AssemblyTrademarkAttribute.html",
    "title": "Class AssemblyTrademarkAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyTrademarkAttribute Defines a trademark custom attribute for an assembly manifest. Inheritance Object Attribute AssemblyTrademarkAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyTrademarkAttribute : Attribute Constructors | Improve this Doc View Source AssemblyTrademarkAttribute(String) Initializes a new instance of the AssemblyTrademarkAttribute class. Declaration public AssemblyTrademarkAttribute(string trademark) Parameters Type Name Description String trademark The trademark information. Properties | Improve this Doc View Source Trademark Gets trademark information. Declaration public string Trademark { get; } Property Value Type Description String A String containing trademark information."
  },
  "api/System.Reflection.AssemblyVersionAttribute.html": {
    "href": "api/System.Reflection.AssemblyVersionAttribute.html",
    "title": "Class AssemblyVersionAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyVersionAttribute Specifies the version of the assembly being attributed. Inheritance Object Attribute AssemblyVersionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyVersionAttribute : Attribute Constructors | Improve this Doc View Source AssemblyVersionAttribute(String) Initializes a new instance of the AssemblyVersionAttribute class with the version number of the assembly being attributed. Declaration public AssemblyVersionAttribute(string version) Parameters Type Name Description String version The version number of the attributed assembly. Properties | Improve this Doc View Source Version Gets the version number of the attributed assembly. Declaration public string Version { get; } Property Value Type Description String A string containing the assembly version number."
  },
  "api/System.Reflection.Binder.html": {
    "href": "api/System.Reflection.Binder.html",
    "title": "Class Binder | nanoFramework Documentation",
    "keywords": "Class Binder Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type. Inheritance Object Binder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class Binder Remarks Available only in mscorlib build with support for System.Reflection."
  },
  "api/System.Reflection.BindingFlags.html": {
    "href": "api/System.Reflection.BindingFlags.html",
    "title": "Enum BindingFlags | nanoFramework Documentation",
    "keywords": "Enum BindingFlags Specifies flags that control binding and the way in which the search for members and types is conducted by reflection. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public enum BindingFlags Remarks Available only in mscorlib build with support for System.Reflection. Fields Name Description CreateInstance Specifies that reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer. This flag is passed to an InvokeMember method to invoke a constructor. DeclaredOnly Specifies that only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered. Default Specifies that no binding flags are defined. ExactBinding Specifies that types of the supplied arguments must exactly match the types of the corresponding formal parameters. Reflection throws an exception if the caller supplies a non-null Binder object, since that implies that the caller is supplying BindToXXX implementations that will pick the appropriate method. FlattenHierarchy Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned. GetField Specifies that the value of the specified field should be returned. This flag is passed to an InvokeMember method to get a field value. GetProperty Specifies that the value of the specified property should be returned. This flag is passed to an InvokeMember method to invoke a property getter. IgnoreCase Specifies that the case of the member name should not be considered when binding. IgnoreReturn Used in COM interop to specify that the return value of the member can be ignored. Instance Specifies that instance members are to be included in the search. InvokeMethod Specifies that a method is to be invoked. This must not be a constructor or a type initializer. This flag is passed to an InvokeMember method to invoke a method. NonPublic Specifies that non-public members are to be included in the search. OptionalParamBinding Returns the set of members whose parameter count matches the number of supplied arguments. This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs). This flag should only be used with Type.InvokeMember. Public Specifies that public members are to be included in the search. PutDispProperty Specifies that the PROPPUT member on a COM object should be invoked. PROPPUT specifies a property-setting function that uses a value. Use PutDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called. PutRefDispProperty Specifies that the PROPPUTREF member on a COM object should be invoked. PROPPUTREF specifies a property-setting function that uses a reference instead of a value. Use PutRefDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called. SetField Specifies that the value of the specified field should be set. This flag is passed to an InvokeMember method to set a field value. SetProperty Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying PutDispProperty and PutRefDispProperty. This flag is passed to an InvokeMember method to invoke a property setter. Static Specifies that static members are to be included in the search. SuppressChangeType Not implemented."
  },
  "api/System.Reflection.ConstructorInfo.html": {
    "href": "api/System.Reflection.ConstructorInfo.html",
    "title": "Class ConstructorInfo | nanoFramework Documentation",
    "keywords": "Class ConstructorInfo Discovers the attributes of a class constructor and provides access to constructor metadata. Inheritance Object MemberInfo MethodBase ConstructorInfo Inherited Members MethodBase.IsPublic MethodBase.IsStatic MethodBase.IsFinal MethodBase.IsVirtual MethodBase.IsAbstract MethodBase.Invoke(Object, Object[]) MethodBase.Name MethodBase.DeclaringType Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class ConstructorInfo : MethodBase Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source MemberType Gets a MemberTypes value indicating that this member is a constructor. Declaration public override MemberTypes MemberType { get; } Property Value Type Description MemberTypes A MemberTypes value indicating that this member is a constructor. Overrides MemberInfo.MemberType Methods GetCustomAttributes(Boolean) When overridden in a derived class, returns an array of all custom attributes applied to this member. Declaration public override object[] GetCustomAttributes(bool inherit) Parameters Type Name Description Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events. Returns Type Description Object [] An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. Overrides MemberInfo.GetCustomAttributes(Boolean) Remarks This method is not implemented in nanoFramework. Exceptions Type Condition NotImplementedException Invoke(Object[]) Invokes the constructor reflected by the instance that has the specified parameters, providing default values for the parameters not commonly used. Declaration public object Invoke(object[] parameters) Parameters Type Name Description Object [] parameters An array of values that matches the number, order and type (under the constraints of the default binder) of the parameters for this constructor. If this constructor takes no parameters, then use either an array with zero elements or null, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. Returns Type Description Object An instance of the class associated with the constructor."
  },
  "api/System.Reflection.DefaultMemberAttribute.html": {
    "href": "api/System.Reflection.DefaultMemberAttribute.html",
    "title": "Class DefaultMemberAttribute | nanoFramework Documentation",
    "keywords": "Class DefaultMemberAttribute Defines the member of a type that is the default member used by InvokeMember. Inheritance Object Attribute DefaultMemberAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface)] public sealed class DefaultMemberAttribute : Attribute Remarks Available only in mscorlib build with support for System.Reflection. Constructors | Improve this Doc View Source DefaultMemberAttribute(String) Initializes a new instance of the DefaultMemberAttribute class. Declaration public DefaultMemberAttribute(string memberName) Parameters Type Name Description String memberName A String containing the name of the member to invoke. This may be a constructor, method, property, or field. A suitable invocation attribute must be specified when the member is invoked. The default member of a class can be specified by passing an empty String as the name of the member. Properties | Improve this Doc View Source MemberName Gets the name from the attribute. Declaration public string MemberName { get; } Property Value Type Description String A string representing the member name."
  },
  "api/System.Reflection.FieldInfo.html": {
    "href": "api/System.Reflection.FieldInfo.html",
    "title": "Class FieldInfo | nanoFramework Documentation",
    "keywords": "Class FieldInfo Discovers the attributes of a field and provides access to field metadata. Inheritance Object MemberInfo FieldInfo Inherited Members MemberInfo.Name MemberInfo.DeclaringType Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class FieldInfo : MemberInfo Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source FieldType Gets the type of this field object. Declaration public abstract Type FieldType { get; } Property Value Type Description Type The type of this field object. | Improve this Doc View Source MemberType Gets a MemberTypes value indicating that this member is a field. Declaration public override MemberTypes MemberType { get; } Property Value Type Description MemberTypes A MemberTypes value indicating that this member is a field. Overrides MemberInfo.MemberType Methods | Improve this Doc View Source GetCustomAttributes(Boolean) When overridden in a derived class, returns an array of all custom attributes applied to this member. Declaration public override object[] GetCustomAttributes(bool inherit) Parameters Type Name Description Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . This parameter is ignored for properties and events. Returns Type Description Object [] An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. Overrides MemberInfo.GetCustomAttributes(Boolean) Remarks This method ignores the inherit parameter for properties and events. | Improve this Doc View Source GetValue(Object) When overridden in a derived class, returns the value of a field supported by a given object. Declaration public abstract object GetValue(object obj) Parameters Type Name Description Object obj The object whose field value will be returned. Returns Type Description Object An object containing the value of the field reflected by this instance. SetValue(Object, Object) Sets the value of the field supported by the given object. Declaration public virtual void SetValue(object obj, object value) Parameters Type Name Description Object obj The object whose field value will be set. Object value The value to assign to the field."
  },
  "api/System.Reflection.html": {
    "href": "api/System.Reflection.html",
    "title": "Namespace System.Reflection | nanoFramework Documentation",
    "keywords": "Namespace System.Reflection Classes Assembly Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application. AssemblyCompanyAttribute Defines a company name custom attribute for an assembly manifest. AssemblyConfigurationAttribute Specifies the build configuration, such as retail or debug, for an assembly. AssemblyCopyrightAttribute Defines a copyright custom attribute for an assembly manifest. AssemblyCultureAttribute Specifies which culture the assembly supports. AssemblyDefaultAliasAttribute Defines a friendly default alias for an assembly manifest. AssemblyDelaySignAttribute Specifies that the assembly is not fully signed when created. AssemblyDescriptionAttribute Provides a text description for an assembly. AssemblyFileVersionAttribute Instructs a compiler to use a specific version number for the Win32 file version resource. The Win32 file version is not required to be the same as the assembly's version number. AssemblyFlagsAttribute Specifies a bitwise combination of AssemblyNameFlags flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited. AssemblyInformationalVersionAttribute Defines additional version information for an assembly manifest. AssemblyKeyFileAttribute Specifies the name of a file containing the key pair used to generate a strong name. AssemblyKeyNameAttribute Specifies the name of a key container within the CSP containing the key pair used to generate a strong name. AssemblyName Describes an assembly's unique identity in full. AssemblyNativeVersionAttribute Defines the required native version required for an assembly. At deploy time this is used to check if the target device has the correct native version to support this assembly. AssemblyProductAttribute Defines a product name custom attribute for an assembly manifest. AssemblyTitleAttribute Specifies a description for an assembly. AssemblyTrademarkAttribute Defines a trademark custom attribute for an assembly manifest. AssemblyVersionAttribute Specifies the version of the assembly being attributed. Binder Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type. ConstructorInfo Discovers the attributes of a class constructor and provides access to constructor metadata. DefaultMemberAttribute Defines the member of a type that is the default member used by InvokeMember. FieldInfo Discovers the attributes of a field and provides access to field metadata. MemberInfo Obtains information about the attributes of a member and provides access to member metadata. MethodBase Provides information about methods and constructors. MethodInfo Discovers the attributes of a method and provides access to method metadata. PropertyInfo Discovers the attributes of a property and provides access to property metadata. Interfaces IReflect Interoperates with the IDispatch interface. Enums AssemblyNameFlags Provides information about an Assembly reference. BindingFlags Specifies flags that control binding and the way in which the search for members and types is conducted by reflection. MemberTypes Marks each type of member that is defined as a derived class of MemberInfo. MethodImplAttributes Specifies flags for the attributes of a method implementation. ProcessorArchitecture Identifies the processor and bits-per-word of the platform targeted by an executable."
  },
  "api/System.Reflection.IReflect.html": {
    "href": "api/System.Reflection.IReflect.html",
    "title": "Interface IReflect | nanoFramework Documentation",
    "keywords": "Interface IReflect Interoperates with the IDispatch interface. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public interface IReflect Remarks Available only in mscorlib build with support for System.Reflection. Methods | Improve this Doc View Source GetField(String, BindingFlags) Returns the FieldInfo object that corresponds to the specified field and binding flag. Declaration FieldInfo GetField(string name, BindingFlags bindingAttr) Parameters Type Name Description String name The name of the field to find. BindingFlags bindingAttr The binding attributes used to control the search. Returns Type Description FieldInfo A FieldInfo object containing the field information for the named object that meets the search constraints specified in bindingAttr. | Improve this Doc View Source GetMethod(String, BindingFlags) Retrieves a MethodInfo object that corresponds to a specified method under specified search constraints. Declaration MethodInfo GetMethod(string name, BindingFlags bindingAttr) Parameters Type Name Description String name The name of the member to find. BindingFlags bindingAttr The binding attributes used to control the search. Returns Type Description MethodInfo A MethodInfo object containing the method information, with the match being based on the method name and search constraints specified in bindingAttr."
  },
  "api/System.Reflection.MemberInfo.html": {
    "href": "api/System.Reflection.MemberInfo.html",
    "title": "Class MemberInfo | nanoFramework Documentation",
    "keywords": "Class MemberInfo Obtains information about the attributes of a member and provides access to member metadata. Inheritance Object MemberInfo FieldInfo MethodBase PropertyInfo Type Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class MemberInfo Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source DeclaringType Gets the class that declares this member. Declaration public abstract Type DeclaringType { get; } Property Value Type Description Type The Type object for the class that declares this member. | Improve this Doc View Source MemberType When overridden in a derived class, gets a MemberTypes value indicating the type of the member — method, constructor, event, and so on. Declaration public abstract MemberTypes MemberType { get; } Property Value Type Description MemberTypes A MemberTypes value indicating the type of member. | Improve this Doc View Source Name Gets the name of the current member. Declaration public abstract string Name { get; } Property Value Type Description String A String containing the name of this member. Methods | Improve this Doc View Source GetCustomAttributes(Boolean) When overridden in a derived class, returns an array of all custom attributes applied to this member. Declaration public abstract object[] GetCustomAttributes(bool inherit) Parameters Type Name Description Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events. Returns Type Description Object [] An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined."
  },
  "api/System.Reflection.MemberTypes.html": {
    "href": "api/System.Reflection.MemberTypes.html",
    "title": "Enum MemberTypes | nanoFramework Documentation",
    "keywords": "Enum MemberTypes Marks each type of member that is defined as a derived class of MemberInfo. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public enum MemberTypes Remarks Available only in mscorlib build with support for System.Reflection. Fields Name Description All Specifies all member types. Constructor Specifies that the member is a constructor Custom Specifies that the member is a custom member type Event Specifies that the member is an event Field Specifies that the member is a field Method Specifies that the member is a method NestedType Specifies that the member is a nested type Property Specifies that the member is a property TypeInfo Specifies that the member is a type"
  },
  "api/System.Reflection.MethodBase.html": {
    "href": "api/System.Reflection.MethodBase.html",
    "title": "Class MethodBase | nanoFramework Documentation",
    "keywords": "Class MethodBase Provides information about methods and constructors. Inheritance Object MemberInfo MethodBase ConstructorInfo MethodInfo Inherited Members MemberInfo.MemberType MemberInfo.GetCustomAttributes(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class MethodBase : MemberInfo Remarks Available only in mscorlib build with support for System.Reflection. Properties DeclaringType Gets the class that declares this member. Declaration public override Type DeclaringType { get; } Property Value Type Description Type The Type object for the class that declares this member. Overrides MemberInfo.DeclaringType IsAbstract Gets a value indicating whether the method is abstract Declaration public bool IsAbstract { get; } Property Value Type Description Boolean true if this method is abstract; otherwise, false. IsFinal GGets a value indicating whether the method is final. Declaration public bool IsFinal { get; } Property Value Type Description Boolean true if this method is final; otherwise, false. IsPublic Gets a value indicating whether this is a public method. Declaration public bool IsPublic { get; } Property Value Type Description Boolean true if this method is public; otherwise, false. IsStatic Gets a value indicating whether the method is static. Declaration public bool IsStatic { get; } Property Value Type Description Boolean true if this method is static; otherwise, false. IsVirtual Gets a value indicating whether the method is virtual Declaration public bool IsVirtual { get; } Property Value Type Description Boolean true if this method is virtual; otherwise, false. Name Gets the name of the current member. Declaration public override string Name { get; } Property Value Type Description String A String containing the name of this member. Overrides MemberInfo.Name Methods Invoke(Object, Object[]) Invokes the method or constructor represented by the current instance, using the specified parameters. Declaration public object Invoke(object obj, object[] parameters) Parameters Type Name Description Object obj The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor. Object [] parameters An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, parameters should be null. Returns Type Description Object An object containing the return value of the invoked method, or null in the case of a constructor."
  },
  "api/System.Reflection.MethodImplAttributes.html": {
    "href": "api/System.Reflection.MethodImplAttributes.html",
    "title": "Enum MethodImplAttributes | nanoFramework Documentation",
    "keywords": "Enum MethodImplAttributes Specifies flags for the attributes of a method implementation. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public enum MethodImplAttributes Fields Name Description CodeTypeMask This API supports the product infrastructure and is not intended to be used directly from your code. Specifies flags about code type. ForwardRef This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is not defined. IL This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in Microsoft intermediate language (MSIL). InternalCall This API supports the product infrastructure and is not intended to be used directly from your code. Specifies an internal call. Managed This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is implemented in managed code. ManagedMask This API supports the product infrastructure and is not intended to be used directly from your code. Specifies whether the method is implemented in managed or unmanaged code. MaxMethodImplVal This API supports the product infrastructure and is not intended to be used directly from your code. Specifies a range check value. Native This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is native. NoInlining This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method cannot be inlined. OPTIL This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in Optimized Intermediate Language (OPTIL). PreserveSig This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method signature is exported exactly as declared. Runtime This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is provided by the runtime. Synchronized This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is single-threaded through the body. Static methods (Shared in Visual Basic) lock on the type, whereas instance methods lock on the instance. You can also use the C# lock statement or the Visual Basic SyncLock statement for this purpose. Unmanaged This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is implemented in unmanaged code."
  },
  "api/System.Reflection.MethodInfo.html": {
    "href": "api/System.Reflection.MethodInfo.html",
    "title": "Class MethodInfo | nanoFramework Documentation",
    "keywords": "Class MethodInfo Discovers the attributes of a method and provides access to method metadata. Inheritance Object MemberInfo MethodBase MethodInfo Inherited Members MethodBase.IsPublic MethodBase.IsStatic MethodBase.IsFinal MethodBase.IsVirtual MethodBase.IsAbstract MethodBase.Invoke(Object, Object[]) MethodBase.Name MethodBase.DeclaringType MemberInfo.GetCustomAttributes(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class MethodInfo : MethodBase Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source MemberType Gets a MemberTypes value indicating that this member is a method. Declaration public override MemberTypes MemberType { get; } Property Value Type Description MemberTypes A MemberTypes value indicating that this member is a method. Overrides MemberInfo.MemberType | Improve this Doc View Source ReturnType Gets the return type of this method. Declaration public abstract Type ReturnType { get; } Property Value Type Description Type The return type of this method. Remarks To get the return type property, first get the class Type. From the Type, get the MethodInfo. From the MethodInfo, get the ReturnType."
  },
  "api/System.Reflection.ProcessorArchitecture.html": {
    "href": "api/System.Reflection.ProcessorArchitecture.html",
    "title": "Enum ProcessorArchitecture | nanoFramework Documentation",
    "keywords": "Enum ProcessorArchitecture Identifies the processor and bits-per-word of the platform targeted by an executable. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public enum ProcessorArchitecture Fields Name Description Amd64 A 64-bit AMD processor only. IA64 A 64-bit Intel processor only. MSIL Neutral with respect to processor and bits-per-word. None An unknown or unspecified combination of processor and bits-per-word. X86 A 32-bit Intel processor, either native or in the Windows on Windows environment on a 64-bit platform (WOW64)."
  },
  "api/System.Reflection.PropertyInfo.html": {
    "href": "api/System.Reflection.PropertyInfo.html",
    "title": "Class PropertyInfo | nanoFramework Documentation",
    "keywords": "Class PropertyInfo Discovers the attributes of a property and provides access to property metadata. Inheritance Object MemberInfo PropertyInfo Inherited Members MemberInfo.MemberType MemberInfo.Name MemberInfo.DeclaringType MemberInfo.GetCustomAttributes(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class PropertyInfo : MemberInfo Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source PropertyType Gets the type of this property. Declaration public abstract Type PropertyType { get; } Property Value Type Description Type The type of this property. Methods GetValue(Object, Object[]) Returns the property value of a specified object with optional index values for indexed properties. Declaration public virtual object GetValue(object obj, object[] index) Parameters Type Name Description Object obj The object whose property value will be returned. Object [] index Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be null for non-indexed properties. Returns Type Description Object The property value of the specified object. SetValue(Object, Object, Object[]) Sets the property value of a specified object with optional index values for index properties. Declaration public virtual void SetValue(object obj, object value, object[] index) Parameters Type Name Description Object obj The object whose property value will be set. Object value The new property value. Object [] index Optional index values for indexed properties. This value should be null for non-indexed properties."
  },
  "api/System.Resources.html": {
    "href": "api/System.Resources.html",
    "title": "Namespace System.Resources | nanoFramework Documentation",
    "keywords": "Namespace System.Resources Classes ResourceManager Represents a resource manager that provides convenient access to culture-specific resources at run time."
  },
  "api/System.Resources.ResourceManager.html": {
    "href": "api/System.Resources.ResourceManager.html",
    "title": "Class ResourceManager | nanoFramework Documentation",
    "keywords": "Class ResourceManager Represents a resource manager that provides convenient access to culture-specific resources at run time. Inheritance Object ResourceManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Resources Assembly : nanoFramework.ResourceManager.dll Syntax public class ResourceManager Constructors | Improve this Doc View Source ResourceManager(String, Assembly) Initializes a new instance of the ResourceManager class that looks up resources contained in files with the specified root name in the given assembly. Declaration public ResourceManager(string baseName, Assembly assembly) Parameters Type Name Description String baseName The root name of the resource file without its extension but including any fully qualified namespace name. For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource. Assembly assembly The main assembly for the resources."
  },
  "api/System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.html",
    "title": "Class AccessedThroughPropertyAttribute | nanoFramework Documentation",
    "keywords": "Class AccessedThroughPropertyAttribute Specifies the name of the property that accesses the attributed field. Inheritance Object Attribute AccessedThroughPropertyAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class AccessedThroughPropertyAttribute : Attribute Constructors | Improve this Doc View Source AccessedThroughPropertyAttribute(String) Initializes a new instance of the AccessedThroughPropertyAttribute class with the name of the property used to access the attributed field. Declaration public AccessedThroughPropertyAttribute(string propertyName) Parameters Type Name Description String propertyName The name of the property used to access the attributed field. Properties | Improve this Doc View Source PropertyName Gets the name of the property used to access the attributed field. Declaration public string PropertyName { get; } Property Value Type Description String The name of the property used to access the attributed field."
  },
  "api/System.Runtime.CompilerServices.ExtensionAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.ExtensionAttribute.html",
    "title": "Class ExtensionAttribute | nanoFramework Documentation",
    "keywords": "Class ExtensionAttribute Indicates that a method is an extension method, or that a class or assembly contains extension methods. Inheritance Object Attribute ExtensionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method)] public sealed class ExtensionAttribute : Attribute"
  },
  "api/System.Runtime.CompilerServices.html": {
    "href": "api/System.Runtime.CompilerServices.html",
    "title": "Namespace System.Runtime.CompilerServices | nanoFramework Documentation",
    "keywords": "Namespace System.Runtime.CompilerServices Classes AccessedThroughPropertyAttribute Specifies the name of the property that accesses the attributed field. ExtensionAttribute Indicates that a method is an extension method, or that a class or assembly contains extension methods. IndexerNameAttribute Indicates the name by which an indexer is known in programming languages that do not support indexers directly. InternalsVisibleToAttribute Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly. MethodImplAttribute Specifies the details of how a method is implemented. This class cannot be inherited. RuntimeHelpers Provides a set of static methods and properties that provide support for compilers. This class cannot be inherited. Enums MethodCodeType Defines how a method is implemented. MethodImplOptions Defines the details of how a method is implemented."
  },
  "api/System.Runtime.CompilerServices.IndexerNameAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.IndexerNameAttribute.html",
    "title": "Class IndexerNameAttribute | nanoFramework Documentation",
    "keywords": "Class IndexerNameAttribute Indicates the name by which an indexer is known in programming languages that do not support indexers directly. Inheritance Object Attribute IndexerNameAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class IndexerNameAttribute : Attribute Constructors | Improve this Doc View Source IndexerNameAttribute(String) Initializes a new instance of the IndexerNameAttribute class. Declaration public IndexerNameAttribute(string indexerName) Parameters Type Name Description String indexerName The name of the indexer, as shown to other languages."
  },
  "api/System.Runtime.CompilerServices.InternalsVisibleToAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.InternalsVisibleToAttribute.html",
    "title": "Class InternalsVisibleToAttribute | nanoFramework Documentation",
    "keywords": "Class InternalsVisibleToAttribute Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly. Inheritance Object Attribute InternalsVisibleToAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class InternalsVisibleToAttribute : Attribute Constructors | Improve this Doc View Source InternalsVisibleToAttribute(String) Initializes a new instance of the InternalsVisibleToAttribute class with the name of the specified friend assembly. Declaration public InternalsVisibleToAttribute(string assemblyName) Parameters Type Name Description String assemblyName The name of a friend assembly. Properties | Improve this Doc View Source AssemblyName Gets the name of the friend assembly to which all types and type members that are marked with the internal keyword are to be made visible. Declaration public string AssemblyName { get; } Property Value Type Description String A string that represents the name of the friend assembly."
  },
  "api/System.Runtime.CompilerServices.MethodCodeType.html": {
    "href": "api/System.Runtime.CompilerServices.MethodCodeType.html",
    "title": "Enum MethodCodeType | nanoFramework Documentation",
    "keywords": "Enum MethodCodeType Defines how a method is implemented. Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax public enum MethodCodeType Fields Name Description IL This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in Microsoft intermediate language (MSIL). Native This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is implemented in native code. OPTIL This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in optimized intermediate language (OPTIL). Runtime This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is provided by the runtime."
  },
  "api/System.Runtime.CompilerServices.MethodImplAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.MethodImplAttribute.html",
    "title": "Class MethodImplAttribute | nanoFramework Documentation",
    "keywords": "Class MethodImplAttribute Specifies the details of how a method is implemented. This class cannot be inherited. Inheritance Object Attribute MethodImplAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)] public sealed class MethodImplAttribute : Attribute Constructors | Improve this Doc View Source MethodImplAttribute() Initializes a new instance of the MethodImplAttribute class. Declaration public MethodImplAttribute() | Improve this Doc View Source MethodImplAttribute(Int16) Initializes a new instance of the MethodImplAttribute class with the specified MethodImplOptions _value. Declaration public MethodImplAttribute(short _value) Parameters Type Name Description Int16 _value A bitmask representing the desired MethodImplOptions _value which specifies properties of the attributed method. | Improve this Doc View Source MethodImplAttribute(MethodImplOptions) Initializes a new instance of the MethodImplAttribute class with the specified MethodImplOptions _value. Declaration public MethodImplAttribute(MethodImplOptions methodImplOptions) Parameters Type Name Description MethodImplOptions methodImplOptions A MethodImplOptions _value specifying properties of the attributed method. Fields | Improve this Doc View Source MethodCodeType A MethodCodeType _value indicating what kind of implementation is provided for this method. Declaration public MethodCodeType MethodCodeType Field Value Type Description MethodCodeType Properties | Improve this Doc View Source Value Gets the MethodImplOptions _value describing the attributed method. Declaration public MethodImplOptions Value { get; } Property Value Type Description MethodImplOptions"
  },
  "api/System.Runtime.CompilerServices.MethodImplOptions.html": {
    "href": "api/System.Runtime.CompilerServices.MethodImplOptions.html",
    "title": "Enum MethodImplOptions | nanoFramework Documentation",
    "keywords": "Enum MethodImplOptions Defines the details of how a method is implemented. Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax public enum MethodImplOptions Fields Name Description ForwardRef The method is declared, but its implementation is provided elsewhere. InternalCall The call is internal, that is, it calls a method that is implemented within the common language runtime. NoInlining The method cannot be inlined. Inlining is an optimization by which a method call is replaced with the method body. PreserveSig The method signature is exported exactly as declared. Synchronized The method can be executed by only one thread at a time. Static methods lock on the type, whereas instance methods lock on the instance. Only one thread can execute in any of the instance functions, and only one thread can execute in any of a class's static functions. Unmanaged The method is implemented in unmanaged code."
  },
  "api/System.Runtime.CompilerServices.RuntimeHelpers.html": {
    "href": "api/System.Runtime.CompilerServices.RuntimeHelpers.html",
    "title": "Class RuntimeHelpers | nanoFramework Documentation",
    "keywords": "Class RuntimeHelpers Provides a set of static methods and properties that provide support for compilers. This class cannot be inherited. Inheritance Object RuntimeHelpers Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax public static class RuntimeHelpers Properties OffsetToStringData Gets the offset, in bytes, to the data in the given string. Declaration public static int OffsetToStringData { get; } Property Value Type Description Int32 The byte offset, from the start of the String object to the first character in the string. Methods GetObjectValue(Object) Boxes a value type. Declaration public static object GetObjectValue(object obj) Parameters Type Name Description Object obj The value type to be boxed. Returns Type Description Object A boxed copy of obj if it is a value class; otherwise, obj itself. InitializeArray(Array, RuntimeFieldHandle) Provides a fast way to initialize an array from data that is stored in a module. Declaration public static void InitializeArray(Array array, RuntimeFieldHandle fldHandle) Parameters Type Name Description Array array The array to be initialized. RuntimeFieldHandle fldHandle A field handle that specifies the location of the data used to initialize the array. RunClassConstructor(RuntimeTypeHandle) Runs a specified class constructor method. Declaration public static void RunClassConstructor(RuntimeTypeHandle type) Parameters Type Name Description RuntimeTypeHandle type A type handle that specifies the class constructor method to run."
  },
  "api/System.Runtime.InteropServices.CharSet.html": {
    "href": "api/System.Runtime.InteropServices.CharSet.html",
    "title": "Enum CharSet | nanoFramework Documentation",
    "keywords": "Enum CharSet Dictates which character set marshaled strings should use. Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax public enum CharSet Fields Name Description Ansi Marshal strings as multiple-byte character strings. Auto Automatically marshal strings appropriately for the target operating system. The default is Unicode on Windows NT, Windows 2000, Windows XP, and the Windows Server 2003 family; the default is Ansi on Windows 98 and Windows Me. Although the common language runtime default is Auto, languages may override this default. For example, by default C# marks all methods and types as Ansi. None This value is obsolete and has the same behavior as CharSet.Ansi. Unicode Marshal strings as Unicode 2-byte characters."
  },
  "api/System.Runtime.InteropServices.ComVisibleAttribute.html": {
    "href": "api/System.Runtime.InteropServices.ComVisibleAttribute.html",
    "title": "Class ComVisibleAttribute | nanoFramework Documentation",
    "keywords": "Class ComVisibleAttribute Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM. Inheritance Object Attribute ComVisibleAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)] public sealed class ComVisibleAttribute : Attribute Constructors | Improve this Doc View Source ComVisibleAttribute(Boolean) Initializes a new instance of the ComVisibleAttribute class. Declaration public ComVisibleAttribute(bool visibility) Parameters Type Name Description Boolean visibility true to indicate that the type is visible to COM; otherwise, false. The default is true. Properties | Improve this Doc View Source Value Gets a value that indicates whether the COM type is visible. Declaration public bool Value { get; } Property Value Type Description Boolean true if the type is visible; otherwise, false. The default value is true."
  },
  "api/System.Runtime.InteropServices.GuidAttribute.html": {
    "href": "api/System.Runtime.InteropServices.GuidAttribute.html",
    "title": "Class GuidAttribute | nanoFramework Documentation",
    "keywords": "Class GuidAttribute Supplies an explicit System.Guid when an automatic GUID is undesirable. Inheritance Object Attribute GuidAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)] public sealed class GuidAttribute : Attribute Constructors | Improve this Doc View Source GuidAttribute(String) Initializes a new instance of the GuidAttribute class with the specified GUID. Declaration public GuidAttribute(string guid) Parameters Type Name Description String guid The Guid to be assigned. Properties | Improve this Doc View Source Value Gets the Guid of the class. Declaration public string Value { get; } Property Value Type Description String The Guid of the class."
  },
  "api/System.Runtime.InteropServices.html": {
    "href": "api/System.Runtime.InteropServices.html",
    "title": "Namespace System.Runtime.InteropServices | nanoFramework Documentation",
    "keywords": "Namespace System.Runtime.InteropServices Classes ComVisibleAttribute Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM. GuidAttribute Supplies an explicit System.Guid when an automatic GUID is undesirable. OutAttribute Indicates that data should be marshaled from callee back to caller. StructLayoutAttribute Lets you control the physical layout of the data fields of a class or structure in memory. Enums CharSet Dictates which character set marshaled strings should use. LayoutKind Controls the layout of an object when exported to unmanaged code."
  },
  "api/System.Runtime.InteropServices.LayoutKind.html": {
    "href": "api/System.Runtime.InteropServices.LayoutKind.html",
    "title": "Enum LayoutKind | nanoFramework Documentation",
    "keywords": "Enum LayoutKind Controls the layout of an object when exported to unmanaged code. Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax public enum LayoutKind Fields Name Description Auto The runtime automatically chooses an appropriate layout for the members of an object in unmanaged memory. Objects defined with this enumeration member cannot be exposed outside of managed code. Attempting to do so generates an exception. Explicit The precise position of each member of an object in unmanaged memory is explicitly controlled, subject to the setting of the StructLayoutAttribute.Pack field. Each member must use the FieldOffsetAttribute to indicate the position of that field within the type. Sequential The members of the object are laid out sequentially, in the order in which they appear when exported to unmanaged memory. The members are laid out according to the packing specified in StructLayoutAttribute.Pack, and can be noncontiguous."
  },
  "api/System.Runtime.InteropServices.OutAttribute.html": {
    "href": "api/System.Runtime.InteropServices.OutAttribute.html",
    "title": "Class OutAttribute | nanoFramework Documentation",
    "keywords": "Class OutAttribute Indicates that data should be marshaled from callee back to caller. Inheritance Object Attribute OutAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public sealed class OutAttribute : Attribute"
  },
  "api/System.Runtime.InteropServices.StructLayoutAttribute.html": {
    "href": "api/System.Runtime.InteropServices.StructLayoutAttribute.html",
    "title": "Class StructLayoutAttribute | nanoFramework Documentation",
    "keywords": "Class StructLayoutAttribute Lets you control the physical layout of the data fields of a class or structure in memory. Inheritance Object Attribute StructLayoutAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false)] public sealed class StructLayoutAttribute : Attribute Constructors | Improve this Doc View Source StructLayoutAttribute(Int16) Initalizes a new instance of the StructLayoutAttribute class with the specified System.Runtime.InteropServices.LayoutKind enumeration member. Declaration public StructLayoutAttribute(short layoutKind) Parameters Type Name Description Int16 layoutKind A 16-bit integer that represents one of the LayoutKind values that specifes how the class or structure should be arranged. | Improve this Doc View Source StructLayoutAttribute(LayoutKind) Initalizes a new instance of the StructLayoutAttribute class with the specified System.Runtime.InteropServices.LayoutKind enumeration member. Declaration public StructLayoutAttribute(LayoutKind layoutKind) Parameters Type Name Description LayoutKind layoutKind One of the enumeration values that specifes how the class or structure should be arranged. Fields | Improve this Doc View Source CharSet Indicates whether string data fields within the class should be marshaled as LPWSTR or LPSTR by default. Declaration public CharSet CharSet Field Value Type Description CharSet | Improve this Doc View Source Pack Controls the alignment of data fields of a class or structure in memory. Declaration public int Pack Field Value Type Description Int32 | Improve this Doc View Source Size Indicates the absolute size of the class or structure. Declaration public int Size Field Value Type Description Int32 Properties | Improve this Doc View Source Value Gets the LayoutKind value that specifies how the class or structure is arranged. Declaration public LayoutKind Value { get; } Property Value Type Description LayoutKind One of the enumeration values that specifies how the class or structure is arranged."
  },
  "api/System.Runtime.Remoting.html": {
    "href": "api/System.Runtime.Remoting.html",
    "title": "Namespace System.Runtime.Remoting | nanoFramework Documentation",
    "keywords": "Namespace System.Runtime.Remoting Classes RemotingServices Provides several methods for using and publishing remoted objects and proxies. This class cannot be inherited."
  },
  "api/System.Runtime.Remoting.RemotingServices.html": {
    "href": "api/System.Runtime.Remoting.RemotingServices.html",
    "title": "Class RemotingServices | nanoFramework Documentation",
    "keywords": "Class RemotingServices Provides several methods for using and publishing remoted objects and proxies. This class cannot be inherited. Inheritance Object RemotingServices Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.Remoting Assembly : mscorlib.dll Syntax public static class RemotingServices Methods IsTransparentProxy(Object) Returns a Boolean value that indicates whether the given object is a transparent proxy or a real object. Declaration public static bool IsTransparentProxy(object proxy) Parameters Type Name Description Object proxy The reference to the object to check. Returns Type Description Boolean A Boolean value that indicates whether the object specified in the proxy parameter is a transparent proxy or a real object."
  },
  "api/System.Runtime.Versioning.html": {
    "href": "api/System.Runtime.Versioning.html",
    "title": "Namespace System.Runtime.Versioning | nanoFramework Documentation",
    "keywords": "Namespace System.Runtime.Versioning Classes TargetFrameworkAttribute Identifies the version of the .NET Framework that a particular assembly was compiled against."
  },
  "api/System.Runtime.Versioning.TargetFrameworkAttribute.html": {
    "href": "api/System.Runtime.Versioning.TargetFrameworkAttribute.html",
    "title": "Class TargetFrameworkAttribute | nanoFramework Documentation",
    "keywords": "Class TargetFrameworkAttribute Identifies the version of the .NET Framework that a particular assembly was compiled against. Inheritance Object Attribute TargetFrameworkAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.Versioning Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class TargetFrameworkAttribute : Attribute Constructors | Improve this Doc View Source TargetFrameworkAttribute(String) Initializes an instance of the TargetFrameworkAttribute class by specifying the .NET Framework version against which an assembly was built. Declaration public TargetFrameworkAttribute(string frameworkName) Parameters Type Name Description String frameworkName The version of the .NET Framework against which the assembly was built. Exceptions Type Condition ArgumentNullException Properties | Improve this Doc View Source FrameworkDisplayName Gets the display name of the .NET Framework version against which an assembly was built. Declaration public string FrameworkDisplayName { get; set; } Property Value Type Description String The display name of the .NET Framework version. | Improve this Doc View Source FrameworkName Gets the name of the .NET Framework version against which a particular assembly was compiled. Declaration public string FrameworkName { get; } Property Value Type Description String The name of the .NET Framework version with which the assembly was compiled."
  },
  "api/System.RuntimeArgumentHandle.html": {
    "href": "api/System.RuntimeArgumentHandle.html",
    "title": "Struct RuntimeArgumentHandle | nanoFramework Documentation",
    "keywords": "Struct RuntimeArgumentHandle This value type is used for constructing System.ArgIterator. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct RuntimeArgumentHandle"
  },
  "api/System.RuntimeFieldHandle.html": {
    "href": "api/System.RuntimeFieldHandle.html",
    "title": "Struct RuntimeFieldHandle | nanoFramework Documentation",
    "keywords": "Struct RuntimeFieldHandle Represents a field using an internal metadata token. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct RuntimeFieldHandle"
  },
  "api/System.RuntimeMethodHandle.html": {
    "href": "api/System.RuntimeMethodHandle.html",
    "title": "Struct RuntimeMethodHandle | nanoFramework Documentation",
    "keywords": "Struct RuntimeMethodHandle RuntimeMethodHandle is a handle to the internal metadata representation of a method. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct RuntimeMethodHandle"
  },
  "api/System.RuntimeTypeHandle.html": {
    "href": "api/System.RuntimeTypeHandle.html",
    "title": "Struct RuntimeTypeHandle | nanoFramework Documentation",
    "keywords": "Struct RuntimeTypeHandle Represents a type using an internal metadata token. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct RuntimeTypeHandle"
  },
  "api/System.SByte.html": {
    "href": "api/System.SByte.html",
    "title": "Struct SByte | nanoFramework Documentation",
    "keywords": "Struct SByte Represents an 8-bit signed integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax [CLSCompliant(false)] public struct SByte Fields | Improve this Doc View Source MaxValue Represents the largest possible value of SByte. This field is constant. Declaration public const sbyte MaxValue = 127 Field Value Type Description SByte Remarks The value of this constant is 127; that is, hexadecimal 0x7F. | Improve this Doc View Source MinValue Represents the smallest possible value of SByte. This field is constant. Declaration public const sbyte MinValue = -128 Field Value Type Description SByte Remarks The value of this constant is -128; that is, hexadecimal 0x80. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 8-bit signed integer equivalent. Declaration [CLSCompliant(false)] public static sbyte Parse(string s) Parameters Type Name Description String s A string that represents a number to convert. The string is interpreted using the NumberStyles.Integer style. Returns Type Description SByte An 8-bit signed integer that is equivalent to the number contained in the s parameter. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A standard or custom numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.Security.Cryptography.X509Certificates.html": {
    "href": "api/System.Security.Cryptography.X509Certificates.html",
    "title": "Namespace System.Security.Cryptography.X509Certificates | nanoFramework Documentation",
    "keywords": "Namespace System.Security.Cryptography.X509Certificates Classes X509Certificate Provides methods that help you use X.509 v.3 certificates. X509Certificate2 Represents an X.509 certificate."
  },
  "api/System.Security.Cryptography.X509Certificates.X509Certificate.html": {
    "href": "api/System.Security.Cryptography.X509Certificates.X509Certificate.html",
    "title": "Class X509Certificate | nanoFramework Documentation",
    "keywords": "Class X509Certificate Provides methods that help you use X.509 v.3 certificates. Inheritance Object X509Certificate X509Certificate2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Security.Cryptography.X509Certificates Assembly : System.Net.dll Syntax public class X509Certificate Remarks ASN.1 DER is the only certificate format supported by this class. Constructors | Improve this Doc View Source X509Certificate() Initializes a new instance of the X509Certificate class. Declaration public X509Certificate() | Improve this Doc View Source X509Certificate(Byte[]) Initializes a new instance of the X509Certificate class defined from a sequence of bytes representing an X.509v3 certificate. Declaration public X509Certificate(byte[] certificate) Parameters Type Name Description Byte [] certificate A byte array containing data from an X.509 certificate. Remarks ASN.1 DER is the only certificate format supported by this class. | Improve this Doc View Source X509Certificate(Byte[], String) Initializes a new instance of the X509Certificate class using a byte array and a password. Declaration public X509Certificate(byte[] certificate, string password) Parameters Type Name Description Byte [] certificate A byte array containing data from an X.509 certificate. String password The password required to access the X.509 certificate data. Remarks ASN.1 DER is the only certificate format supported by this class. | Improve this Doc View Source X509Certificate(String) Initializes a new instance of the X509Certificate class defined from a string with the content of an X.509v3 certificate. Declaration public X509Certificate(string certificate) Parameters Type Name Description String certificate A string containing a X.509 certificate. Remarks ASN.1 DER is the only certificate format supported by this class. This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter. | Improve this Doc View Source X509Certificate(String, String) Initializes a new instance of the X509Certificate class defined from a string with the content of an X.509v3 certificate. Declaration public X509Certificate(string certificate, string password) Parameters Type Name Description String certificate A string containing a X.509 certificate. String password The password required to access the X.509 certificate data. Remarks ASN.1 DER is the only certificate format supported by this class. This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter. Fields | Improve this Doc View Source _effectiveDate Contains the effective date of the certificate. Declaration protected DateTime _effectiveDate Field Value Type Description DateTime | Improve this Doc View Source _expirationDate Contains the expiration date of the certificate. Declaration protected DateTime _expirationDate Field Value Type Description DateTime | Improve this Doc View Source _handle Contains the handle. Declaration protected byte[] _handle Field Value Type Description Byte [] | Improve this Doc View Source _issuer Contains the certificate issuer. Declaration protected string _issuer Field Value Type Description String | Improve this Doc View Source _sessionHandle Contains the session handle. Declaration protected byte[] _sessionHandle Field Value Type Description Byte [] | Improve this Doc View Source _subject Contains the subject. Declaration protected string _subject Field Value Type Description String Properties | Improve this Doc View Source Issuer Gets the name of the certificate authority that issued the X.509v3 certificate. Declaration public virtual string Issuer { get; } Property Value Type Description String The name of the certificate authority that issued the X.509v3 certificate. | Improve this Doc View Source Subject Gets the subject distinguished name from the certificate. Declaration public virtual string Subject { get; } Property Value Type Description String The subject distinguished name from the certificate. Methods | Improve this Doc View Source GetEffectiveDate() Returns the effective date of this X.509v3 certificate. Declaration public virtual DateTime GetEffectiveDate() Returns Type Description DateTime The effective date for this X.509 certificate. Remarks This methods is exclusive of nanoFramework. The equivalent .NET method is GetEffectiveDateString(). | Improve this Doc View Source GetExpirationDate() Returns the expiration date of this X.509v3 certificate. Declaration public virtual DateTime GetExpirationDate() Returns Type Description DateTime The expiration date for this X.509 certificate. Remarks This methods is exclusive of nanoFramework. The equivalent .NET method is GetExpirationDateString(). | Improve this Doc View Source GetRawCertData() Returns the raw data for the entire X.509v3 certificate as an array of bytes. Declaration public virtual byte[] GetRawCertData() Returns Type Description Byte [] A byte array containing the X.509 certificate data."
  },
  "api/System.Security.Cryptography.X509Certificates.X509Certificate2.html": {
    "href": "api/System.Security.Cryptography.X509Certificates.X509Certificate2.html",
    "title": "Class X509Certificate2 | nanoFramework Documentation",
    "keywords": "Class X509Certificate2 Represents an X.509 certificate. Inheritance Object X509Certificate X509Certificate2 Inherited Members X509Certificate._issuer X509Certificate._subject X509Certificate._effectiveDate X509Certificate._expirationDate X509Certificate._handle X509Certificate._sessionHandle X509Certificate.Issuer X509Certificate.Subject X509Certificate.GetEffectiveDate() X509Certificate.GetExpirationDate() X509Certificate.GetRawCertData() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Security.Cryptography.X509Certificates Assembly : System.Net.dll Syntax public class X509Certificate2 : X509Certificate Constructors | Improve this Doc View Source X509Certificate2() Initializes a new instance of the X509Certificate2 class. Declaration public X509Certificate2() | Improve this Doc View Source X509Certificate2(Byte[]) Initializes a new instance of the X509Certificate2 class using information from a byte array. Declaration public X509Certificate2(byte[] rawData) Parameters Type Name Description Byte [] rawData A byte array containing data from an X.509 certificate. | Improve this Doc View Source X509Certificate2(Byte[], Byte[], String) Initializes a new instance of the X509Certificate2 class using a string with the content of an X.509 public certificate, the private key and a password used to access the certificate. Declaration public X509Certificate2(byte[] rawData, byte[] key, string password) Parameters Type Name Description Byte [] rawData A byte array containing data from an X.509 certificate. Byte [] key A byte array containing a PEM private key. String password The password required to access the X.509 certificate data. Remarks This methods is exclusive of nanoFramework. There is no equivalent in .NET framework. | Improve this Doc View Source X509Certificate2(Byte[], String) Initializes a new instance of the X509Certificate2 class using a byte array and a password. Declaration public X509Certificate2(byte[] rawData, string password) Parameters Type Name Description Byte [] rawData A byte array containing data from an X.509 certificate. String password The password required to access the X.509 certificate data. | Improve this Doc View Source X509Certificate2(Byte[], String, String) Initializes a new instance of the X509Certificate2 class using a string with the content of an X.509 public certificate, the private key and a password used to access the certificate. Declaration public X509Certificate2(byte[] rawData, string key, string password) Parameters Type Name Description Byte [] rawData A byte array containing data from an X.509 certificate. String key A string containing a PEM private key. String password The password required to access the X.509 certificate data. Remarks This methods is exclusive of nanoFramework. There is no equivalent in .NET framework. | Improve this Doc View Source X509Certificate2(String) Initializes a new instance of the X509Certificate2 class using a string with the content of an X.509 certificate. Declaration public X509Certificate2(string certificate) Parameters Type Name Description String certificate A string containing a X.509 certificate. Remarks This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter. | Improve this Doc View Source X509Certificate2(String, String) Initializes a new instance of the X509Certificate2 class using a string with the content of an X.509 certificate and a password used to access the certificate. Declaration public X509Certificate2(string certificate, string password) Parameters Type Name Description String certificate A string containing a X.509 certificate. String password The password required to access the X.509 certificate data. Remarks This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter. | Improve this Doc View Source X509Certificate2(String, String, String) Initializes a new instance of the X509Certificate2 class using a string with the content of an X.509 public certificate, the private key and a password used to access the certificate. Declaration public X509Certificate2(string certificate, string key, string password) Parameters Type Name Description String certificate A string containing a X.509 certificate. String key A string containing a PEM private key. String password The password required to access the X.509 certificate data. Remarks This methods is exclusive of nanoFramework. There is no equivalent in .NET framework. Properties | Improve this Doc View Source HasPrivateKey Gets a value that indicates whether an X509Certificate2 object contains a private key. Declaration public bool HasPrivateKey { get; } Property Value Type Description Boolean true if the X509Certificate2 object contains a private key; otherwise, false . | Improve this Doc View Source NotAfter Gets the date in local time after which a certificate is no longer valid. Declaration public DateTime NotAfter { get; } Property Value Type Description DateTime A DateTime object that represents the expiration date for the certificate. | Improve this Doc View Source NotBefore Gets the date in local time on which a certificate becomes valid. Declaration public DateTime NotBefore { get; } Property Value Type Description DateTime A DateTime object that represents the effective date of the certificate. | Improve this Doc View Source RawData Gets the raw data of a certificate. Declaration public byte[] RawData { get; } Property Value Type Description Byte [] The raw data of the certificate as a byte array."
  },
  "api/System.SerializableAttribute.html": {
    "href": "api/System.SerializableAttribute.html",
    "title": "Class SerializableAttribute | nanoFramework Documentation",
    "keywords": "Class SerializableAttribute Indicates that a class can be serialized. This class cannot be inherited. Inheritance Object Attribute SerializableAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Delegate, Inherited = false)] public sealed class SerializableAttribute : Attribute"
  },
  "api/System.Single.html": {
    "href": "api/System.Single.html",
    "title": "Struct Single | nanoFramework Documentation",
    "keywords": "Struct Single Represents a single-precision floating-point number. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Single Fields | Improve this Doc View Source Epsilon Represents the smallest positive Single value that is greater than zero. This field is constant. Declaration public const float Epsilon = 1.401298E-45F Field Value Type Description Single | Improve this Doc View Source MaxValue Represents the largest possible value of Single. This field is constant. Declaration public const float MaxValue = 3.40282347E+38F Field Value Type Description Single Remarks The value of this constant is positive 3.40282347E+38. | Improve this Doc View Source MinValue Represents the smallest possible value of Single. This field is constant. Declaration public const float MinValue = -3.40282347E+38F Field Value Type Description Single Remarks The value of this constant is negative 3.402823e38. | Improve this Doc View Source NaN Represents a value that is not a number (NaN). This field is constant. Declaration public const float NaN = NaNF Field Value Type Description Single | Improve this Doc View Source NegativeInfinity Represents negative infinity. This field is constant. Declaration public const float NegativeInfinity = -InfinityF Field Value Type Description Single | Improve this Doc View Source PositiveInfinity Represents positive infinity. This field is constant. Declaration public const float PositiveInfinity = InfinityF Field Value Type Description Single Methods | Improve this Doc View Source CompareTo(Single) Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number. Declaration public int CompareTo(float value) Parameters Type Name Description Single value A single-precision floating-point number to compare. Returns Type Description Int32 A signed number indicating the relative values of this instance and value. Less than zero: This instance is less than value. -or- This instance is not a number ( NaN ) and value is a number. Zero: This instance is equal to value. -or- Both this instance and value are not a number ( NaN ), PositiveInfinity , or NegativeInfinity . Greater than zero: This instance is greater than value. -or- This instance is a number and value is not a number ( NaN ). | Improve this Doc View Source IsInfinity(Single) Returns a value indicating whether the specified number evaluates to negative or positive infinity. Declaration public static bool IsInfinity(float f) Parameters Type Name Description Single f A single-precision floating-point number. Returns Type Description Boolean true if f evaluates to PositiveInfinity or NegativeInfinity ; otherwise, false . | Improve this Doc View Source IsNaN(Single) Returns a value that indicates whether the specified value is not a number ( NaN ). Declaration public static bool IsNaN(float f) Parameters Type Name Description Single f A single-precision floating-point number. Returns Type Description Boolean true if f evaluates to NaN ; otherwise, false . | Improve this Doc View Source IsNegativeInfinity(Single) Returns a value indicating whether the specified number evaluates to negative infinity. Declaration public static bool IsNegativeInfinity(float f) Parameters Type Name Description Single f A single-precision floating-point number. Returns Type Description Boolean true if f evaluates to NegativeInfinity ; otherwise, false . | Improve this Doc View Source IsPositiveInfinity(Single) Returns a value indicating whether the specified number evaluates to positive infinity. Declaration public static bool IsPositiveInfinity(float f) Parameters Type Name Description Single f A single-precision floating-point number. Returns Type Description Boolean true if d evaluates to PositiveInfinity ; otherwise, false . | Improve this Doc View Source Parse(String) Converts the string representation of a number to its single-precision floating-point number equivalent. Declaration public static float Parse(string s) Parameters Type Name Description String s A string that contains a number to convert. Returns Type Description Single A single-precision floating-point number equivalent to the numeric value or symbol specified in s . Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format. | Improve this Doc View Source TryParse(String, out Single) Converts the string representation of a number to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed. Declaration public static bool TryParse(string s, out float result) Parameters Type Name Description String s A string containing a number to convert. Single result When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in s, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null or Empty, is not a number in a valid format, or represents a number less than MinValue or greater than MaxValue . This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if s was converted successfully; otherwise, false ."
  },
  "api/System.STAThreadAttribute.html": {
    "href": "api/System.STAThreadAttribute.html",
    "title": "Class STAThreadAttribute | nanoFramework Documentation",
    "keywords": "Class STAThreadAttribute Indicates that the COM threading model for an application is single-threaded apartment (STA). Inheritance Object Attribute STAThreadAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Method)] public sealed class STAThreadAttribute : Attribute Constructors | Improve this Doc View Source STAThreadAttribute() Initializes a new instance of the STAThreadAttribute class. Declaration public STAThreadAttribute()"
  },
  "api/System.String.html": {
    "href": "api/System.String.html",
    "title": "Class String | nanoFramework Documentation",
    "keywords": "Class String Represents text as a sequence of UTF-16 code units. Inheritance Object String Implements IComparable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public sealed class String : IComparable Constructors String(Char, Int32) Initializes a new instance of the String class to the value indicated by a specified Unicode character repeated a specified number of times. Declaration public String(char c, int count) Parameters Type Name Description Char c A Unicode character. Int32 count The number of times c occurs. String(Char[]) Initializes a new instance of the String class to the value indicated by an array of Unicode characters. Declaration public String(char[] value) Parameters Type Name Description Char [] value An array of Unicode characters. String(Char[], Int32, Int32) Initializes a new instance of the String class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length. Declaration public String(char[] value, int startIndex, int length) Parameters Type Name Description Char [] value An array of Unicode characters. Int32 startIndex The starting position within value. Int32 length The number of characters within value to use. Fields | Improve this Doc View Source Empty Represents the empty string. This field is read-only. Declaration public static readonly string Empty Field Value Type Description String Properties Chars[Int32] Gets the Char object at a specified position in the current String object. Declaration public char this[int index] { get; } Parameters Type Name Description Int32 index A position in the current string. Property Value Type Description Char The object at position index. Length Gets the number of characters in the current String object. Declaration public int Length { get; } Property Value Type Description Int32 The number of characters in the current string. Methods Compare(String, String) Compares two specified String objects and returns an integer that indicates their relative position in the sort order. Declaration public static int Compare(string strA, string strB) Parameters Type Name Description String strA The first string to compare. String strB The second string to compare. Returns Type Description Int32 A 32-bit signed integer that indicates the lexical relationship between the two comparands. CompareTo(Object) Compares this instance with a specified Object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified Object. Declaration public int CompareTo(object value) Parameters Type Name Description Object value An object that evaluates to a String. Returns Type Description Int32 A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter. CompareTo(String) Compares this instance with a specified String object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string. Declaration public int CompareTo(string strB) Parameters Type Name Description String strB The string to compare with this instance. Returns Type Description Int32 A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the strB parameter. | Improve this Doc View Source Concat(Object) Creates the string representation of a specified object. Declaration public static string Concat(object arg0) Parameters Type Name Description Object arg0 The object to represent, or null. Returns Type Description String The string representation of the value of arg0, or String.Empty if arg0 is null. | Improve this Doc View Source Concat(Object, Object) Concatenates the string representations of two specified objects. Declaration public static string Concat(object arg0, object arg1) Parameters Type Name Description Object arg0 The first object to concatenate. Object arg1 The second object to concatenate. Returns Type Description String The concatenated string representations of the values of arg0 and arg1. | Improve this Doc View Source Concat(Object, Object, Object) Concatenates the string representations of three specified objects. Declaration public static string Concat(object arg0, object arg1, object arg2) Parameters Type Name Description Object arg0 The first object to concatenate. Object arg1 The second object to concatenate. Object arg2 The third object to concatenate. Returns Type Description String The concatenated string representations of the values of arg0, arg1 and arg2. | Improve this Doc View Source Concat(Object[]) Concatenates the string representations of the elements in a specified Object array. Declaration public static string Concat(params object[] args) Parameters Type Name Description Object [] args An object array that contains the elements to concatenate. Returns Type Description String The concatenated string representations of the values of the elements in args. Exceptions Type Condition ArgumentNullException Concat(String, String) Concatenates two specified instances of String. Declaration public static string Concat(string str0, string str1) Parameters Type Name Description String str0 The first string to concatenate. String str1 The second string to concatenate. Returns Type Description String The concatenation of str0 and str1. Concat(String, String, String) Concatenates three specified instances of String. Declaration public static string Concat(string str0, string str1, string str2) Parameters Type Name Description String str0 The first string to concatenate. String str1 The second string to concatenate. String str2 The third string to concatenate. Returns Type Description String The concatenation of str0, str1 and str2. Concat(String, String, String, String) Concatenates four specified instances of String. Declaration public static string Concat(string str0, string str1, string str2, string str3) Parameters Type Name Description String str0 The first string to concatenate. String str1 The second string to concatenate. String str2 The third string to concatenate. String str3 The fourth string to concatenate. Returns Type Description String The concatenation of str0, str1, str2 and str3. Concat(String[]) Concatenates the elements of a specified String array. Declaration public static string Concat(params string[] values) Parameters Type Name Description String [] values An array of string instances. Returns Type Description String The concatenated elements of values. | Improve this Doc View Source Equals(Object) Determines whether this instance and a specified object, which must also be a String object, have the same value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The string to compare to this instance. Returns Type Description Boolean true if obj is a String and its value is the same as this instance; otherwise, false. If obj is null, the method returns false. Overrides Object.Equals(Object) Equals(String, String) Determines whether two specified String objects have the same value. Declaration public static bool Equals(string a, string b) Parameters Type Name Description String a The first string to compare, or null. String b The second string to compare, or null. Returns Type Description Boolean true if the value of a is the same as the value of b; otherwise, false. If both a and b are null, the method returns true. | Improve this Doc View Source Format(String, Object[]) Replaces the format items in a string with the string representations of corresponding objects in a specified array. Declaration public static string Format(string format, params object[] args) Parameters Type Name Description String format A composite format string Object [] args An object array that contains zero or more objects to format. Returns Type Description String A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args. IndexOf(Char) Reports the zero-based index of the first occurrence of the specified Unicode character in this string. Declaration public int IndexOf(char value) Parameters Type Name Description Char value A Unicode character to seek. Returns Type Description Int32 The zero-based index position of value if that character is found, or -1 if it is not. IndexOf(Char, Int32) Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position. Declaration public int IndexOf(char value, int startIndex) Parameters Type Name Description Char value A Unicode character to seek. Int32 startIndex The search starting position. Returns Type Description Int32 The zero-based index position of value from the start of the string if that character is found, or -1 if it is not. IndexOf(Char, Int32, Int32) Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions. Declaration public int IndexOf(char value, int startIndex, int count) Parameters Type Name Description Char value A Unicode character to seek. Int32 startIndex The search starting position. Int32 count The number of character positions to examine. Returns Type Description Int32 The zero-based index position of value if that character is found, or -1 if it is not. IndexOf(String) Reports the zero-based index of the first occurrence of the specified string in this instance. Declaration public int IndexOf(string value) Parameters Type Name Description String value The string to seek. Returns Type Description Int32 The zero-based index position of value if that string is found, or -1 if it is not. If value is String.Empty, the return value is 0. IndexOf(String, Int32) Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position. Declaration public int IndexOf(string value, int startIndex) Parameters Type Name Description String value The string to seek. Int32 startIndex The search starting position. Returns Type Description Int32 The zero-based index position of value from the start of the current instance if that string is found, or -1 if it is not. If value is String.Empty, the return value is startIndex. IndexOf(String, Int32, Int32) Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions. Declaration public int IndexOf(string value, int startIndex, int count) Parameters Type Name Description String value The string to seek. Int32 startIndex The search starting position. Int32 count The number of character positions to examine. Returns Type Description Int32 The zero-based index position of value from the start of the current instance if that string is found, or -1 if it is not. If value is String.Empty, the return value is startIndex. IndexOfAny(Char[]) Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. Declaration public int IndexOfAny(char[] anyOf) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Returns Type Description Int32 The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found. IndexOfAny(Char[], Int32) Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position. Declaration public int IndexOfAny(char[] anyOf, int startIndex) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Int32 startIndex The search starting position. Returns Type Description Int32 The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found. IndexOfAny(Char[], Int32, Int32) Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions. Declaration public int IndexOfAny(char[] anyOf, int startIndex, int count) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Int32 startIndex The search starting position. Int32 count The number of character positions to examine. Returns Type Description Int32 The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found. | Improve this Doc View Source Intern(String) Retrieves the system's reference to the specified String. Declaration public static string Intern(string str) Parameters Type Name Description String str A string to search for in the intern pool. Returns Type Description String The system's reference to str, if it is interned; otherwise, a new reference to a string with the value of str. | Improve this Doc View Source IsInterned(String) Retrieves a reference to a specified String. Declaration public static string IsInterned(string str) Parameters Type Name Description String str The string to search for in the intern pool. Returns Type Description String A reference to str if it is in the common language runtime intern pool; otherwise, null. LastIndexOf(Char) Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. Declaration public int LastIndexOf(char value) Parameters Type Name Description Char value The Unicode character to seek. Returns Type Description Int32 The zero-based index position of value if that character is found, or -1 if it is not. LastIndexOf(Char, Int32) Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string. Declaration public int LastIndexOf(char value, int startIndex) Parameters Type Name Description Char value The Unicode character to seek. Int32 startIndex The starting position of the search. The search proceeds from startIndex toward the beginning of this instance. Returns Type Description Int32 The zero-based index position of value if that character is found, or -1 if it is not found or if the current instance equals String.Empty. LastIndexOf(Char, Int32, Int32) Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions. Declaration public int LastIndexOf(char value, int startIndex, int count) Parameters Type Name Description Char value The Unicode character to seek. Int32 startIndex The starting position of the search. The search proceeds from startIndex toward the beginning of this instance. Int32 count The number of character positions to examine. Returns Type Description Int32 The zero-based index position of value if that character is found, or -1 if it is not found or if the current instance equals String.Empty. LastIndexOf(String) Reports the zero-based index position of the last occurrence of a specified string within this instance. Declaration public int LastIndexOf(string value) Parameters Type Name Description String value The string to seek. Returns Type Description Int32 The zero-based starting index position of value if that string is found, or -1 if it is not. If value is String.Empty, the return value is the last index position in this instance. LastIndexOf(String, Int32) Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string. Declaration public int LastIndexOf(string value, int startIndex) Parameters Type Name Description String value The string to seek. Int32 startIndex The search starting position. The search proceeds from startIndex toward the beginning of this instance. Returns Type Description Int32 The zero-based starting index position of value if that string is found, or -1 if it is not found or if the current instance equals String.Empty. If value is String.Empty, the return value is the smaller of startIndex and the last index position in this instance. LastIndexOf(String, Int32, Int32) Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions. Declaration public int LastIndexOf(string value, int startIndex, int count) Parameters Type Name Description String value The string to seek. Int32 startIndex The search starting position. The search proceeds from startIndex toward the beginning of this instance. Int32 count The number of character positions to examine. Returns Type Description Int32 The zero-based starting index position of value if that string is found, or -1 if it is not found or if the current instance equals String.Empty. If value is Empty, the return value is the smaller of startIndex and the last index position in this instance. LastIndexOfAny(Char[]) Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. Declaration public int LastIndexOfAny(char[] anyOf) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Returns Type Description Int32 The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found. LastIndexOfAny(Char[], Int32) Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string. Declaration public int LastIndexOfAny(char[] anyOf, int startIndex) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Int32 startIndex The search starting position. The search proceeds from startIndex toward the beginning of this instance. Returns Type Description Int32 The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found or if the current instance equals String.Empty. LastIndexOfAny(Char[], Int32, Int32) Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions. Declaration public int LastIndexOfAny(char[] anyOf, int startIndex, int count) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Int32 startIndex The search starting position. The search proceeds from startIndex toward the beginning of this instance. Int32 count The number of character positions to examine. Returns Type Description Int32 The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found or if the current instance equals String.Empty. | Improve this Doc View Source PadLeft(Int32, Char) Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length. Declaration public string PadLeft(int totalWidth, char paddingChar = ' ') Parameters Type Name Description Int32 totalWidth The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. Char paddingChar A Unicode padding character. Returns Type Description String | Improve this Doc View Source PadRight(Int32, Char) Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length. Declaration public string PadRight(int totalWidth, char paddingChar = ' ') Parameters Type Name Description Int32 totalWidth The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. Char paddingChar A Unicode padding character. Returns Type Description String Split(Char[]) Splits a string into substrings that are based on the characters in an array. Declaration public string[] Split(params char[] separator) Parameters Type Name Description Char [] separator A character array that delimits the substrings in this string, an empty array that contains no delimiters, or null. Returns Type Description String [] An array whose elements contain the substrings from this instance that are delimited by one or more characters in separator. For more information, see the Remarks section. Split(Char[], Int32) Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return. Declaration public string[] Split(char[] separator, int count) Parameters Type Name Description Char [] separator A character array that delimits the substrings in this string, an empty array that contains no delimiters, or null. Int32 count The maximum number of substrings to return. Returns Type Description String [] An array whose elements contain the substrings in this instance that are delimited by one or more characters in separator. For more information, see the Remarks section. Substring(Int32) Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string. Declaration public string Substring(int startIndex) Parameters Type Name Description Int32 startIndex The zero-based starting character position of a substring in this instance. Returns Type Description String A string that is equivalent to the substring that begins at startIndex in this instance, or Empty if startIndex is equal to the length of this instance. Substring(Int32, Int32) Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length. Declaration public string Substring(int startIndex, int length) Parameters Type Name Description Int32 startIndex The zero-based starting character position of a substring in this instance. Int32 length The number of characters in the substring. Returns Type Description String A string that is equivalent to the substring of length length that begins at startIndex in this instance, or Empty if startIndex is equal to the length of this instance and length is zero. ToCharArray() Copies the characters in this instance to a Unicode character array. Declaration public char[] ToCharArray() Returns Type Description Char [] A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length. ToCharArray(Int32, Int32) Copies the characters in a specified substring in this instance to a Unicode character array. Declaration public char[] ToCharArray(int startIndex, int length) Parameters Type Name Description Int32 startIndex The starting position of a substring in this instance. Int32 length The length of the substring in this instance. Returns Type Description Char [] A Unicode character array whose elements are the length number of characters in this instance starting from character position startIndex. ToLower() Returns a copy of this string converted to lowercase. Declaration public string ToLower() Returns Type Description String A string in lowercase. | Improve this Doc View Source ToString() Returns this instance of String; no actual conversion is performed. Declaration public override string ToString() Returns Type Description String The current string. Overrides Object.ToString() ToUpper() Returns a copy of this string converted to uppercase. Declaration public string ToUpper() Returns Type Description String The uppercase equivalent of the current string. Trim() Removes all leading and trailing white-space characters from the current String object. Declaration public string Trim() Returns Type Description String The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. Trim(Char[]) Removes all leading and trailing occurrences of a set of characters specified in an array from the current String object. Declaration public string Trim(params char[] trimChars) Parameters Type Name Description Char [] trimChars An array of Unicode characters to remove, or null. Returns Type Description String The string that remains after all occurrences of the characters in the trimChars parameter are removed from the start and end of the current string. If trimChars is null or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. TrimEnd(Char[]) Removes all trailing occurrences of a set of characters specified in an array from the current String object. Declaration public string TrimEnd(params char[] trimChars) Parameters Type Name Description Char [] trimChars An array of Unicode characters to remove, or null. Returns Type Description String The string that remains after all occurrences of the characters in the trimChars parameter are removed from the end of the current string. If trimChars is null or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. TrimStart(Char[]) Removes all leading occurrences of a set of characters specified in an array from the current String object. Declaration public string TrimStart(params char[] trimChars) Parameters Type Name Description Char [] trimChars An array of Unicode characters to remove, or null. Returns Type Description String The string that remains after all occurrences of characters in the trimChars parameter are removed from the start of the current string. If trimChars is null or an empty array, white-space characters are removed instead. Operators Equality(String, String) Determines whether two specified strings have the same value. Declaration public static bool operator ==(string a, string b) Parameters Type Name Description String a The first string to compare, or null. String b The second string to compare, or null. Returns Type Description Boolean true if the value of a is the same as the value of b; otherwise, false. Inequality(String, String) Determines whether two specified strings have different values. Declaration public static bool operator !=(string a, string b) Parameters Type Name Description String a The first string to compare, or null. String b The second string to compare, or null. Returns Type Description Boolean true if the value of a is different from the value of b; otherwise, false. Implements IComparable"
  },
  "api/System.SystemException.html": {
    "href": "api/System.SystemException.html",
    "title": "Class SystemException | nanoFramework Documentation",
    "keywords": "Class SystemException Serves as the base class for system exceptions namespace. Inheritance Object Exception SystemException AppDomainUnloadedException ArgumentException IndexOutOfRangeException InvalidCastException InvalidOperationException IOException NotImplementedException NotSupportedException NullReferenceException ObjectDisposedException OutOfMemoryException ThreadAbortException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class SystemException : Exception Constructors | Improve this Doc View Source SystemException() Initializes a new instance of the SystemException class. Declaration public SystemException() | Improve this Doc View Source SystemException(String) Initializes a new instance of the SystemException class with a specified error message. Declaration public SystemException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source SystemException(String, Exception) Initializes a new instance of the SystemException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public SystemException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception."
  },
  "api/System.Text.Decoder.html": {
    "href": "api/System.Text.Decoder.html",
    "title": "Class Decoder | nanoFramework Documentation",
    "keywords": "Class Decoder Converts a sequence of encoded bytes into a set of characters. Inheritance Object Decoder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text Assembly : nanoFramework.System.Text.dll Syntax public abstract class Decoder Methods | Improve this Doc View Source Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean) Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array. Declaration public abstract void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed) Parameters Type Name Description Byte [] bytes A byte array to convert. Int32 byteIndex The first element of bytes to convert. Int32 byteCount The number of elements of bytes to convert. Char [] chars An array to store the converted characters. Int32 charIndex The first element of chars in which data is stored. Int32 charCount The maximum number of elements of chars to use in the conversion. Boolean flush true to indicate that no further data is to be converted; otherwise, false. Int32 bytesUsed When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized. Int32 charsUsed When this method returns, contains the number of characters from chars that were produced by the conversion. This parameter is passed uninitialized. Boolean completed When this method returns, contains true if all the characters specified by byteCount were converted; otherwise, false. This parameter is passed uninitialized."
  },
  "api/System.Text.Encoding.html": {
    "href": "api/System.Text.Encoding.html",
    "title": "Class Encoding | nanoFramework Documentation",
    "keywords": "Class Encoding Represents a character encoding. Inheritance Object Encoding UTF8Encoding Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text Assembly : nanoFramework.System.Text.dll Syntax [Serializable] public abstract class Encoding Properties | Improve this Doc View Source UTF8 Gets an encoding for the UTF-8 format. Declaration public static Encoding UTF8 { get; } Property Value Type Description Encoding An encoding for the UTF-8 format. Methods | Improve this Doc View Source GetBytes(String) When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes. Declaration public virtual byte[] GetBytes(string s) Parameters Type Name Description String s The string containing the characters to encode. Returns Type Description Byte [] A byte array containing the results of encoding the specified set of characters. | Improve this Doc View Source GetBytes(String, Int32, Int32, Byte[], Int32) When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array. Declaration public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) Parameters Type Name Description String s The string containing the set of characters to encode. Int32 charIndex The index of the first character to encode. Int32 charCount The number of characters to encode. Byte [] bytes The byte array to contain the resulting sequence of bytes. Int32 byteIndex The index at which to start writing the resulting sequence of bytes. Returns Type Description Int32 The actual number of bytes written into bytes. Exceptions Type Condition NotImplementedException | Improve this Doc View Source GetChars(Byte[]) When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters. Declaration public virtual char[] GetChars(byte[] bytes) Parameters Type Name Description Byte [] bytes The byte array containing the sequence of bytes to decode. Returns Type Description Char [] A character array containing the results of decoding the specified sequence of bytes. Exceptions Type Condition NotImplementedException | Improve this Doc View Source GetChars(Byte[], Int32, Int32) When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters. Declaration public virtual char[] GetChars(byte[] bytes, int byteIndex, int byteCount) Parameters Type Name Description Byte [] bytes The byte array containing the sequence of bytes to decode. Int32 byteIndex The index of the first byte to decode. Int32 byteCount The number of bytes to decode. Returns Type Description Char [] A character array containing the results of decoding the specified sequence of bytes. Exceptions Type Condition NotImplementedException | Improve this Doc View Source GetDecoder() When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters. Declaration public abstract Decoder GetDecoder() Returns Type Description Decoder A Decoder that converts an encoded sequence of bytes into a sequence of characters. | Improve this Doc View Source GetString(Byte[], Int32, Int32) When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a String . Declaration public virtual string GetString(byte[] bytes, int index, int count) Parameters Type Name Description Byte [] bytes The byte array containing the sequence of bytes to decode. Int32 index The index of the first byte to decode. Int32 count The number of bytes to decode. Returns Type Description String A String that contains the results of decoding the specified sequence of bytes."
  },
  "api/System.Text.html": {
    "href": "api/System.Text.html",
    "title": "Namespace System.Text | nanoFramework Documentation",
    "keywords": "Namespace System.Text Classes Decoder Converts a sequence of encoded bytes into a set of characters. Encoding Represents a character encoding. StringBuilder A Micro Framework port of the Full Framework StringBuilder. Contributed by Julius Friedman. Represents a mutable string of characters. This class cannot be inherited. UTF8Encoding Represents a UTF-8 encoding of Unicode characters."
  },
  "api/System.Text.StringBuilder.html": {
    "href": "api/System.Text.StringBuilder.html",
    "title": "Class StringBuilder | nanoFramework Documentation",
    "keywords": "Class StringBuilder A Micro Framework port of the Full Framework StringBuilder. Contributed by Julius Friedman. Represents a mutable string of characters. This class cannot be inherited. Inheritance Object StringBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text Assembly : nanoFramework.System.Text.dll Syntax public sealed class StringBuilder Constructors | Improve this Doc View Source StringBuilder() Initializes a new instance of the StringBuilder class. Declaration public StringBuilder() | Improve this Doc View Source StringBuilder(Int32) Initializes a new instance of the StringBuilder class using the specified capacity. Declaration public StringBuilder(int capacity) Parameters Type Name Description Int32 capacity The suggested starting size of this instance. | Improve this Doc View Source StringBuilder(Int32, Int32) Initializes a new instance of the StringBuilder class that starts with a specified capacity and can grow to a specified maximum. Declaration public StringBuilder(int capacity, int maxCapacity) Parameters Type Name Description Int32 capacity The suggested starting size of the StringBuilder. Int32 maxCapacity The maximum number of characters the current string can contain. | Improve this Doc View Source StringBuilder(String) Initializes a new instance of the StringBuilder class using the specified string. Declaration public StringBuilder(string value) Parameters Type Name Description String value The string used to initialize the value of the instance. If value is null, the new StringBuilder will contain the empty string (that is, it contains Empty). | Improve this Doc View Source StringBuilder(String, Int32) Initializes a new instance of the StringBuilder class using the specified string and capacity. Declaration public StringBuilder(string value, int capacity) Parameters Type Name Description String value The string used to initialize the value of the instance. If value is null, the new StringBuilder will contain the empty string (that is, it contains Empty). Int32 capacity The suggested starting size of the StringBuilder. | Improve this Doc View Source StringBuilder(String, Int32, Int32, Int32) Initializes a new instance of the StringBuilder class from the specified substring and capacity. Declaration public StringBuilder(string value, int startIndex, int length, int capacity) Parameters Type Name Description String value The string that contains the substring used to initialize the value of this instance. If value is null, the new StringBuilder will contain the empty string (that is, it contains Empty). Int32 startIndex The position within value where the substring begins. Int32 length The number of characters in the substring. Int32 capacity The suggested starting size of the StringBuilder. Properties | Improve this Doc View Source Capacity Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance. Declaration public int Capacity { get; set; } Property Value Type Description Int32 The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from Length to MaxCapacity. Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source Item[Int32] Gets or sets the character at the specified character position in this instance. Declaration public char this[int index] { get; set; } Parameters Type Name Description Int32 index The position of the character. Property Value Type Description Char The Unicode character at position index. | Improve this Doc View Source Length Gets or sets the length of the current StringBuilder object. Declaration public int Length { get; set; } Property Value Type Description Int32 The length of this instance. Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source MaxCapacity Gets the maximum capacity of this instance. Declaration public int MaxCapacity { get; } Property Value Type Description Int32 The maximum number of characters this instance can hold. Methods | Improve this Doc View Source Append(Boolean) Appends the string representation of a specified Boolean value to this instance. Declaration public StringBuilder Append(bool value) Parameters Type Name Description Boolean value The Boolean value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Byte) Appends the string representation of a specified 8-bit unsigned integer to this instance. Declaration public StringBuilder Append(byte value) Parameters Type Name Description Byte value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Char) Appends the string representation of a specified Unicode character to this instance. Declaration public StringBuilder Append(char value) Parameters Type Name Description Char value The UTF-16-encoded code unit to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Char, Int32) Appends a specified number of copies of the string representation of a Unicode character to this instance. Declaration public StringBuilder Append(char value, int repeatCount) Parameters Type Name Description Char value The character to append. Int32 repeatCount The number of times to append value. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Char[]) Appends the string representation of the Unicode characters in a specified array to this instance. Declaration public StringBuilder Append(char[] value) Parameters Type Name Description Char [] value The array of characters to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Char[], Int32, Int32) Appends the string representation of a specified subarray of Unicode characters to this instance Declaration public StringBuilder Append(char[] value, int startIndex, int charCount) Parameters Type Name Description Char [] value A character array. Int32 startIndex The starting position in value. Int32 charCount The number of characters to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Double) Appends the string representation of a specified double-precision floating-point number to this instance. Declaration public StringBuilder Append(double value) Parameters Type Name Description Double value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Int16) Appends the string representation of a specified 16-bit signed integer to this instance. Declaration public StringBuilder Append(short value) Parameters Type Name Description Int16 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Int32) Appends the string representation of a specified 32-bit signed integer to this instance. Declaration public StringBuilder Append(int value) Parameters Type Name Description Int32 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Int64) Appends the string representation of a specified 64-bit unsigned integer to this instance. Declaration public StringBuilder Append(long value) Parameters Type Name Description Int64 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Object) Appends the string representation of a specified object to this instance. Declaration public StringBuilder Append(object value) Parameters Type Name Description Object value The object to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(SByte) Appends the string representation of a specified 8-bit signed integer to this instance. Declaration public StringBuilder Append(sbyte value) Parameters Type Name Description SByte value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Single) Appends the string representation of a specified double-precision floating-point number to this instance. Declaration public StringBuilder Append(float value) Parameters Type Name Description Single value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(String) Appends a copy of the specified string to this instance. Declaration public StringBuilder Append(string value) Parameters Type Name Description String value The string to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(String, Int32, Int32) Appends a copy of a specified substring to this instance. Declaration public StringBuilder Append(string value, int startIndex, int count) Parameters Type Name Description String value The string that contains the substring to append. Int32 startIndex The starting position of the substring within value. Int32 count The number of characters in value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(UInt16) Appends the string representation of a specified 16-bit unsigned integer to this instance. Declaration public StringBuilder Append(ushort value) Parameters Type Name Description UInt16 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(UInt32) Appends the string representation of a specified 32-bit unsigned integer to this instance. Declaration public StringBuilder Append(uint value) Parameters Type Name Description UInt32 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(UInt64) Appends the string representation of a specified 64-bit unsigned integer to this instance. Declaration public StringBuilder Append(ulong value) Parameters Type Name Description UInt64 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source AppendLine() Appends the default line terminator to the end of the current StringBuilder object. Declaration public StringBuilder AppendLine() Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source AppendLine(String) Appends a copy of the specified string followed by the default line terminator to the end of the current StringBuilder object. Declaration public StringBuilder AppendLine(string str) Parameters Type Name Description String str A reference to this instance after the append operation has completed. Returns Type Description StringBuilder | Improve this Doc View Source Clear() Removes all characters from the current StringBuilder instance. Declaration public StringBuilder Clear() Returns Type Description StringBuilder An object whose Length is 0 (zero). | Improve this Doc View Source Insert(Int32, Char[], Int32, Int32) Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position. Declaration public StringBuilder Insert(int index, char[] value, int startIndex, int charCount) Parameters Type Name Description Int32 index The position in this instance where insertion begins. Char [] value A character array. Int32 startIndex The starting index within value. Int32 charCount The number of characters to insert. Returns Type Description StringBuilder A reference to this instance after the insert operation has completed. | Improve this Doc View Source Insert(Int32, String, Int32) Inserts one or more copies of a specified string into this instance at the specified character position. Declaration public StringBuilder Insert(int index, string value, int count) Parameters Type Name Description Int32 index The position in this instance where insertion begins. String value The string to insert. Int32 count The number of times to insert value. Returns Type Description StringBuilder A reference to this instance after insertion has completed. | Improve this Doc View Source Remove(Int32, Int32) Removes the specified range of characters from this instance. Declaration public StringBuilder Remove(int startIndex, int length) Parameters Type Name Description Int32 startIndex The zero-based position in this instance where removal begins. Int32 length The number of characters to remove. Returns Type Description StringBuilder A reference to this instance after the excise operation has completed. | Improve this Doc View Source Replace(Char, Char) Replaces all occurrences of a specified character in this instance with another specified character. Declaration public StringBuilder Replace(char oldChar, char newChar) Parameters Type Name Description Char oldChar The character to replace. Char newChar The character that replaces oldChar. Returns Type Description StringBuilder A reference to this instance with oldChar replaced by newChar. | Improve this Doc View Source Replace(Char, Char, Int32, Int32) Replaces, within a substring of this instance, all occurrences of a specified character with another specified character. Declaration public StringBuilder Replace(char oldChar, char newChar, int startIndex, int count) Parameters Type Name Description Char oldChar The character to replace. Char newChar The character that replaces oldChar. Int32 startIndex The position in this instance where the substring begins. Int32 count The length of the substring. Returns Type Description StringBuilder A reference to this instance with oldChar replaced by newChar in the range from startIndex to startIndex + count -1. | Improve this Doc View Source Replace(String, String) Replaces all occurrences of a specified string in this instance with another specified string. Declaration public StringBuilder Replace(string oldValue, string newValue) Parameters Type Name Description String oldValue The string to replace. String newValue The string that replaces oldValue, or null. Returns Type Description StringBuilder A reference to this instance with all instances of oldValue replaced by newValue. | Improve this Doc View Source Replace(String, String, Int32, Int32) Replaces, within a substring of this instance, all occurrences of a specified string with another specified string. Declaration public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count) Parameters Type Name Description String oldValue The string to replace. String newValue The string that replaces oldValue, or null. Int32 startIndex The position in this instance where the substring begins. Int32 count The length of the substring. Returns Type Description StringBuilder A reference to this instance with all instances of oldValue replaced by newValue in the range from startIndex to startIndex + count - 1. | Improve this Doc View Source ToString() Converts the value of this instance to a String. (Overrides Object.ToString().) Declaration public override string ToString() Returns Type Description String A string whose value is the same as this instance. Overrides Object.ToString() | Improve this Doc View Source ToString(Int32, Int32) Converts the value of a substring of this instance to a String. Declaration public string ToString(int startIndex, int length) Parameters Type Name Description Int32 startIndex The starting position of the substring in this instance. Int32 length The length of the substring. Returns Type Description String A string whose value is the same as the specified substring of this instance."
  },
  "api/System.Text.UTF8Encoding.html": {
    "href": "api/System.Text.UTF8Encoding.html",
    "title": "Class UTF8Encoding | nanoFramework Documentation",
    "keywords": "Class UTF8Encoding Represents a UTF-8 encoding of Unicode characters. Inheritance Object Encoding UTF8Encoding Inherited Members Encoding.GetString(Byte[], Int32, Int32) Encoding.UTF8 Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text Assembly : nanoFramework.System.Text.dll Syntax public class UTF8Encoding : Encoding Constructors | Improve this Doc View Source UTF8Encoding() Represents a UTF-8 encoding of Unicode characters. Declaration public UTF8Encoding() Methods GetBytes(String) Declaration public override byte[] GetBytes(string s) Parameters Type Name Description String s Returns Type Description Byte [] Overrides Encoding.GetBytes(String) GetBytes(String, Int32, Int32, Byte[], Int32) Encodes a set of characters from the specified String into the specified byte array. Declaration public override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) Parameters Type Name Description String s The String containing the set of characters to encode. Int32 charIndex The index of the first character to encode. Int32 charCount The number of characters to encode. Byte [] bytes The byte array to contain the resulting sequence of bytes. Int32 byteIndex The index at which to start writing the resulting sequence of bytes. Returns Type Description Int32 The actual number of bytes written into bytes . Overrides Encoding.GetBytes(String, Int32, Int32, Byte[], Int32) GetChars(Byte[]) Decodes a sequence of bytes from the specified byte array into a set of characters. Declaration public override char[] GetChars(byte[] bytes) Parameters Type Name Description Byte [] bytes The byte array containing the sequence of bytes to decode. Returns Type Description Char [] The actual number of characters returned. Overrides Encoding.GetChars(Byte[]) GetChars(Byte[], Int32, Int32) Decodes a sequence of bytes from the specified byte array into a set of characters. Declaration public override char[] GetChars(byte[] bytes, int byteIndex, int byteCount) Parameters Type Name Description Byte [] bytes The byte array containing the sequence of bytes to decode. Int32 byteIndex The index of the first byte to decode. Int32 byteCount The number of bytes to decode. Returns Type Description Char [] The actual number of characters returned. Overrides Encoding.GetChars(Byte[], Int32, Int32) | Improve this Doc View Source GetDecoder() Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters. Declaration public override Decoder GetDecoder() Returns Type Description Decoder A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters. Overrides Encoding.GetDecoder()"
  },
  "api/System.Threading.AutoResetEvent.html": {
    "href": "api/System.Threading.AutoResetEvent.html",
    "title": "Class AutoResetEvent | nanoFramework Documentation",
    "keywords": "Class AutoResetEvent Notifies a waiting thread that an event has occurred. This class cannot be inherited. Inheritance Object MarshalByRefObject WaitHandle AutoResetEvent Inherited Members WaitHandle.WaitTimeout WaitHandle.WaitOne(Int32, Boolean) WaitHandle.WaitOne() WaitHandle.WaitAll(WaitHandle[], Int32, Boolean) WaitHandle.WaitAll(WaitHandle[]) WaitHandle.WaitAny(WaitHandle[], Int32, Boolean) WaitHandle.WaitAny(WaitHandle[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public sealed class AutoResetEvent : WaitHandle Constructors AutoResetEvent(Boolean) Initializes a new instance of the AutoResetEvent class with a Boolean value indicating whether to set the initial state to signaled. Declaration public AutoResetEvent(bool initialState) Parameters Type Name Description Boolean initialState true to set the initial state to signaled; false to set the initial state to non-signaled. Methods Reset() Sets the state of the event to nonsignaled, causing threads to block. Declaration public bool Reset() Returns Type Description Boolean true if the operation succeeds; otherwise, false. Set() Sets the state of the event to signaled, allowing one or more waiting threads to proceed. Declaration public bool Set() Returns Type Description Boolean true if the operation succeeds; otherwise, false."
  },
  "api/System.Threading.html": {
    "href": "api/System.Threading.html",
    "title": "Namespace System.Threading | nanoFramework Documentation",
    "keywords": "Namespace System.Threading Classes AutoResetEvent Notifies a waiting thread that an event has occurred. This class cannot be inherited. Interlocked Provides atomic operations for variables that are shared by multiple threads. ManualResetEvent Notifies one or more waiting threads that an event has occurred. This class cannot be inherited. Monitor Provides a mechanism that synchronizes access to objects. Thread Creates and controls a thread, sets its priority, and gets its status. ThreadAbortException The exception that is thrown when a call is made to the Abort method. This class cannot be inherited. Timeout Contains constants that specify infinite time-out intervals. This class cannot be inherited. Timer Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited. WaitHandle Encapsulates operating system–specific objects that wait for exclusive access to shared resources. Enums ThreadPriority Specifies the scheduling priority of a Thread. ThreadState Specifies the execution states of a Thread. Delegates ThreadStart Represents the method that executes on a Thread. TimerCallback Represents the method that handles calls from a Timer."
  },
  "api/System.Threading.Interlocked.html": {
    "href": "api/System.Threading.Interlocked.html",
    "title": "Class Interlocked | nanoFramework Documentation",
    "keywords": "Class Interlocked Provides atomic operations for variables that are shared by multiple threads. Inheritance Object Interlocked Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public static class Interlocked Methods CompareExchange(ref Int32, Int32, Int32) Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value. Declaration public static int CompareExchange(ref int location1, int value, int comparand) Parameters Type Name Description Int32 location1 The destination, whose value is compared with comparand and possibly replaced. Int32 value The value that replaces the destination value if the comparison results in equality. Int32 comparand The value that is compared to the value at location1. Returns Type Description Int32 The original value in location1. Decrement(ref Int32) Decrements a specified variable and stores the result, as an atomic operation. Declaration public static int Decrement(ref int location) Parameters Type Name Description Int32 location The variable whose value is to be decremented. Returns Type Description Int32 The decremented value. Exchange(ref Int32, Int32) Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation. Declaration public static int Exchange(ref int location1, int value) Parameters Type Name Description Int32 location1 The variable to set to the specified value. Int32 value The value to which the location1 parameter is set. Returns Type Description Int32 The original value of location1. Increment(ref Int32) Increments a specified variable and stores the result, as an atomic operation. Declaration public static int Increment(ref int location) Parameters Type Name Description Int32 location The variable whose value is to be incremented. Returns Type Description Int32 The incremented value."
  },
  "api/System.Threading.ManualResetEvent.html": {
    "href": "api/System.Threading.ManualResetEvent.html",
    "title": "Class ManualResetEvent | nanoFramework Documentation",
    "keywords": "Class ManualResetEvent Notifies one or more waiting threads that an event has occurred. This class cannot be inherited. Inheritance Object MarshalByRefObject WaitHandle ManualResetEvent Inherited Members WaitHandle.WaitTimeout WaitHandle.WaitOne(Int32, Boolean) WaitHandle.WaitOne() WaitHandle.WaitAll(WaitHandle[], Int32, Boolean) WaitHandle.WaitAll(WaitHandle[]) WaitHandle.WaitAny(WaitHandle[], Int32, Boolean) WaitHandle.WaitAny(WaitHandle[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public sealed class ManualResetEvent : WaitHandle Constructors ManualResetEvent(Boolean) Initializes a new instance of the ManualResetEvent class with a Boolean value indicating whether to set the initial state to signaled. Declaration public ManualResetEvent(bool initialState) Parameters Type Name Description Boolean initialState true to set the initial state signaled; false to set the initial state to nonsignaled. Methods Reset() Sets the state of the event to nonsignaled, causing threads to block. Declaration public bool Reset() Returns Type Description Boolean true if the operation succeeds; otherwise, false. Set() Sets the state of the event to signaled, allowing one or more waiting threads to proceed. Declaration public bool Set() Returns Type Description Boolean true if the operation succeeds; otherwise, false."
  },
  "api/System.Threading.Monitor.html": {
    "href": "api/System.Threading.Monitor.html",
    "title": "Class Monitor | nanoFramework Documentation",
    "keywords": "Class Monitor Provides a mechanism that synchronizes access to objects. Inheritance Object Monitor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public static class Monitor Methods Enter(Object) Acquires an exclusive lock on the specified object. Declaration public static void Enter(object obj) Parameters Type Name Description Object obj The object on which to acquire the monitor lock. Exit(Object) Releases an exclusive lock on the specified object. Declaration public static void Exit(object obj) Parameters Type Name Description Object obj The object on which to release the lock."
  },
  "api/System.Threading.Thread.html": {
    "href": "api/System.Threading.Thread.html",
    "title": "Class Thread | nanoFramework Documentation",
    "keywords": "Class Thread Creates and controls a thread, sets its priority, and gets its status. Inheritance Object Thread Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public sealed class Thread Constructors Thread(ThreadStart) Initializes a new instance of the Thread class. Declaration public Thread(ThreadStart start) Parameters Type Name Description ThreadStart start A ThreadStart delegate that represents the methods to be invoked when this thread begins executing. Properties CurrentThread Gets the currently running thread. Declaration public static Thread CurrentThread { get; } Property Value Type Description Thread A Thread that is the representation of the currently running thread. IsAlive Gets a value indicating the execution status of the current thread. Declaration public bool IsAlive { get; } Property Value Type Description Boolean true if this thread has been started and has not terminated normally or aborted; otherwise, false. ManagedThreadId Gets a unique identifier for the current managed thread. Declaration public int ManagedThreadId { get; } Property Value Type Description Int32 An integer that represents a unique identifier for this managed thread. Priority Gets or sets a value indicating the scheduling priority of a thread. Declaration public ThreadPriority Priority { get; set; } Property Value Type Description ThreadPriority One of the ThreadPriority values. The default value is ThreadPriority.Normal. ThreadState Gets a value containing the states of the current thread. Declaration public ThreadState ThreadState { get; } Property Value Type Description ThreadState One of the ThreadState values indicating the state of the current thread. The initial value is Unstarted. Methods Abort() Raises a ThreadAbortException in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread. Declaration public void Abort() Join() Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and SendMessage pumping. Declaration public void Join() Join(Int32) Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping. Declaration public bool Join(int millisecondsTimeout) Parameters Type Name Description Int32 millisecondsTimeout The number of milliseconds to wait for the thread to terminate. Returns Type Description Boolean true if the thread has terminated; false if the thread has not terminated after the amount of time specified by the millisecondsTimeout parameter has elapsed. Join(TimeSpan) Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping. Declaration public bool Join(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout A TimeSpan set to the amount of time to wait for the thread to terminate. Returns Type Description Boolean true if the thread terminated; false if the thread has not terminated after the amount of time specified by the timeout parameter has elapsed. Resume() Obsolete : Resumes a thread that has been suspended. Declaration public void Resume() Sleep(Int32) Suspends the current thread for the specified number of milliseconds. Declaration public static void Sleep(int millisecondsTimeout) Parameters Type Name Description Int32 millisecondsTimeout The number of milliseconds for which the thread is suspended. If the value of the millisecondsTimeout argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended. Remarks The thread will not be scheduled for execution by the operating system for the amount of time specified. You can specify Timeout.Infinite for the millisecondsTimeout parameter to suspend the thread indefinitely. However, we recommend that you use other System.Threading classes such as AutoResetEvent , ManualResetEvent , Monitor or WaitHandle instead to synchronize threads or manage resources. The system clock ticks at a specific rate called the clock resolution. The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks. | Improve this Doc View Source Sleep(TimeSpan) Suspends the current thread for the specified amount of time. Declaration public static void Sleep(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout The amount of time for which the thread is suspended. If the value of the timeout argument is Zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended. Remarks The thread will not be scheduled for execution by the operating system for the amount of time specified. You can specify Infinite for the timeout parameter to suspend the thread indefinitely. However, we recommend that you use other System.Threading classes such as AutoResetEvent , ManualResetEvent , Monitor or WaitHandle instead to synchronize threads or manage resources. The system clock ticks at a specific rate called the clock resolution. The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks. Start() Causes the operating system to change the state of the current instance to ThreadState.Running. Declaration public void Start() Suspend() Either suspends the thread, or if the thread is already suspended, has no effect. Declaration public void Suspend()"
  },
  "api/System.Threading.ThreadAbortException.html": {
    "href": "api/System.Threading.ThreadAbortException.html",
    "title": "Class ThreadAbortException | nanoFramework Documentation",
    "keywords": "Class ThreadAbortException The exception that is thrown when a call is made to the Abort method. This class cannot be inherited. Inheritance Object Exception SystemException ThreadAbortException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public sealed class ThreadAbortException : SystemException"
  },
  "api/System.Threading.ThreadPriority.html": {
    "href": "api/System.Threading.ThreadPriority.html",
    "title": "Enum ThreadPriority | nanoFramework Documentation",
    "keywords": "Enum ThreadPriority Specifies the scheduling priority of a Thread. Namespace : System.Threading Assembly : mscorlib.dll Syntax public enum ThreadPriority Fields Name Description AboveNormal The Thread can be scheduled after threads with Highest priority and before those with Normal priority. BelowNormal The Thread can be scheduled after threads with Normal priority and before those with Lowest priority. Highest The Thread can be scheduled before threads with any other priority. Lowest The Thread can be scheduled after threads with any other priority. Normal The Thread can be scheduled after threads with AboveNormal priority and before those with BelowNormal priority. Threads have Normal priority by default."
  },
  "api/System.Threading.ThreadStart.html": {
    "href": "api/System.Threading.ThreadStart.html",
    "title": "Delegate ThreadStart | nanoFramework Documentation",
    "keywords": "Delegate ThreadStart Represents the method that executes on a Thread. Namespace : System.Threading Assembly : mscorlib.dll Syntax public delegate void ThreadStart();"
  },
  "api/System.Threading.ThreadState.html": {
    "href": "api/System.Threading.ThreadState.html",
    "title": "Enum ThreadState | nanoFramework Documentation",
    "keywords": "Enum ThreadState Specifies the execution states of a Thread. Namespace : System.Threading Assembly : mscorlib.dll Syntax public enum ThreadState Fields Name Description Aborted The thread state includes AbortRequested and the thread is now dead, but its state has not yet changed to Stopped. AbortRequested The Thread.Abort method has been invoked on the thread, but the thread has not yet received the pending System.Threading.ThreadAbortException that will attempt to terminate it. Background The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the Thread.IsBackground property. Running The thread has been started, it is not blocked, and there is no pending ThreadAbortException. Stopped The thread has stopped. StopRequested The thread is being requested to stop. This is for internal use only. Suspended The thread has been suspended. SuspendRequested The thread is being requested to suspend. Unstarted The Thread.Start method has not been invoked on the thread. WaitSleepJoin The thread is blocked. This could be the result of calling Thread.Sleep or Thread.Join, of requesting a lock — for example, by calling Monitor.Enter or Monitor.Wait — or of waiting on a thread synchronization object such as ManualResetEvent."
  },
  "api/System.Threading.Timeout.html": {
    "href": "api/System.Threading.Timeout.html",
    "title": "Class Timeout | nanoFramework Documentation",
    "keywords": "Class Timeout Contains constants that specify infinite time-out intervals. This class cannot be inherited. Inheritance Object Timeout Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public static class Timeout Fields | Improve this Doc View Source Infinite A constant used to specify an infinite waiting period, for threading methods that accept an Int32 parameter. Declaration public const int Infinite = -1 Field Value Type Description Int32 Remarks The value of this field is -1 (0xFFFFFFFF). | Improve this Doc View Source InfiniteTimeSpan A constant used to specify an infinite waiting period, for methods that accept a TimeSpan parameter. Declaration public static readonly TimeSpan InfiniteTimeSpan Field Value Type Description TimeSpan Remarks For threading methods that accept a timeout parameter of type TimeSpan , such as Sleep(TimeSpan) and Join(TimeSpan) , this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other System.Threading classes such as AutoResetEvent , ManualResetEvent , Monitor or WaitHandle instead to synchronize threads or manage resources. The value of this field is -00:00:00.0010000, or -1 millisecond."
  },
  "api/System.Threading.Timer.html": {
    "href": "api/System.Threading.Timer.html",
    "title": "Class Timer | nanoFramework Documentation",
    "keywords": "Class Timer Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited. Inheritance Object MarshalByRefObject Timer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public sealed class Timer : MarshalByRefObject, IDisposable Constructors Timer(TimerCallback, Object, Int32, Int32) Initializes a new instance of the Timer class, using a 32-bit signed integer to specify the time interval. Declaration public Timer(TimerCallback callback, object state, int dueTime, int period) Parameters Type Name Description TimerCallback callback A TimerCallback delegate representing a method to be executed. Object state An object containing information to be used by the callback method, or null. Int32 dueTime The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately. Int32 period The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling. Timer(TimerCallback, Object, TimeSpan, TimeSpan) Initializes a new instance of the Timer class, using TimeSpan values to measure time intervals. Declaration public Timer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period) Parameters Type Name Description TimerCallback callback A delegate representing a method to be executed. Object state An object containing information to be used by the callback method, or null. TimeSpan dueTime The amount of time to delay before the callback parameter invokes its methods. Specify negative one (-1) milliseconds to prevent the timer from starting. Specify zero (0) to start the timer immediately. TimeSpan period The time interval between invocations of the methods referenced by callback. Specify negative one (-1) milliseconds to disable periodic signaling. Methods Change(Int32, Int32) Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals. Declaration public bool Change(int dueTime, int period) Parameters Type Name Description Int32 dueTime The amount of time to delay before the invoking the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. Int32 period The time interval between invocations of the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to disable periodic signaling. Returns Type Description Boolean true if the timer was successfully updated; otherwise, false. Change(TimeSpan, TimeSpan) Changes the start time and the interval between method invocations for a timer, using TimeSpan values to measure time intervals. Declaration public bool Change(TimeSpan dueTime, TimeSpan period) Parameters Type Name Description TimeSpan dueTime A TimeSpan representing the amount of time to delay before invoking the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. TimeSpan period The time interval between invocations of the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to disable periodic signaling. Returns Type Description Boolean true if the timer was successfully updated; otherwise, false. Dispose() Releases all resources used by the current instance of Timer. Declaration public void Dispose() Implements IDisposable"
  },
  "api/System.Threading.TimerCallback.html": {
    "href": "api/System.Threading.TimerCallback.html",
    "title": "Delegate TimerCallback | nanoFramework Documentation",
    "keywords": "Delegate TimerCallback Represents the method that handles calls from a Timer. Namespace : System.Threading Assembly : mscorlib.dll Syntax public delegate void TimerCallback(object state); Parameters Type Name Description Object state"
  },
  "api/System.Threading.WaitHandle.html": {
    "href": "api/System.Threading.WaitHandle.html",
    "title": "Class WaitHandle | nanoFramework Documentation",
    "keywords": "Class WaitHandle Encapsulates operating system–specific objects that wait for exclusive access to shared resources. Inheritance Object MarshalByRefObject WaitHandle AutoResetEvent ManualResetEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public abstract class WaitHandle : MarshalByRefObject Fields | Improve this Doc View Source WaitTimeout Indicates that a WaitAny operation timed out before any of the wait handles were signaled. This field is constant. Declaration public const int WaitTimeout = 258 Field Value Type Description Int32 Methods | Improve this Doc View Source WaitAll(WaitHandle[]) Waits for all the elements in the specified array to receive a signal. Declaration public static bool WaitAll(WaitHandle[] waitHandles) Parameters Type Name Description WaitHandle [] waitHandles A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object. Returns Type Description Boolean true when every element in waitHandles has received a signal; otherwise the method never returns. | Improve this Doc View Source WaitAll(WaitHandle[], Int32, Boolean) Waits for all the elements in the specified array to receive a signal, using an Int32 value to specify the time interval and specifying whether to exit the synchronization domain before the wait. Declaration public static bool WaitAll(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext) Parameters Type Name Description WaitHandle [] waitHandles A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates). Int32 millisecondsTimeout The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely. Boolean exitContext true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. Returns Type Description Boolean true when every element in waitHandles has received a signal; otherwise, false. | Improve this Doc View Source WaitAny(WaitHandle[]) Waits for any of the elements in the specified array to receive a signal. Declaration public static int WaitAny(WaitHandle[] waitHandles) Parameters Type Name Description WaitHandle [] waitHandles A WaitHandle array containing the objects for which the current instance will wait. Returns Type Description Int32 The array index of the object that satisfied the wait. | Improve this Doc View Source WaitAny(WaitHandle[], Int32, Boolean) Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait. Declaration public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext) Parameters Type Name Description WaitHandle [] waitHandles A WaitHandle array containing the objects for which the current instance will wait. Int32 millisecondsTimeout The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely. Boolean exitContext true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. Returns Type Description Int32 The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to millisecondsTimeout has passed. | Improve this Doc View Source WaitOne() Blocks the current thread until the current WaitHandle receives a signal. Declaration public virtual bool WaitOne() Returns Type Description Boolean true if the current instance receives a signal. If the current instance is never signaled, WaitOne never returns. WaitOne(Int32, Boolean) Blocks the current thread until the current WaitHandle receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait. Declaration public virtual bool WaitOne(int millisecondsTimeout, bool exitContext) Parameters Type Name Description Int32 millisecondsTimeout The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely. Boolean exitContext true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. Returns Type Description Boolean true if the current instance receives a signal; otherwise, false."
  },
  "api/System.TimeSpan.html": {
    "href": "api/System.TimeSpan.html",
    "title": "Struct TimeSpan | nanoFramework Documentation",
    "keywords": "Struct TimeSpan Represents a time interval. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct TimeSpan Remarks A TimeSpan object represents a time interval (duration of time or elapsed time) that is measured as a positive or negative number of days, hours, minutes, seconds, and fractions of a second. The TimeSpan structure can also be used to represent the time of day, but only if the time is unrelated to a particular date. Otherwise, the DateTime structure should be used instead. The value of a TimeSpan object is the number of ticks that equal the represented time interval. A tick is equal to 100 nanoseconds, or one ten-millionth of a second. The value of a TimeSpan object can range from MinValue to MaxValue . Constructors TimeSpan(Int32, Int32, Int32) Initializes a new instance of the TimeSpan structure to a specified number of hours, minutes, and seconds. Declaration public TimeSpan(int hours, int minutes, int seconds) Parameters Type Name Description Int32 hours Number of hours. Int32 minutes Number of minutes. Int32 seconds Number of seconds. TimeSpan(Int32, Int32, Int32, Int32) Initializes a new instance of the TimeSpan structure to a specified number of days, hours, minutes, and seconds. Declaration public TimeSpan(int days, int hours, int minutes, int seconds) Parameters Type Name Description Int32 days Number of days. Int32 hours Number of hours. Int32 minutes Number of minutes. Int32 seconds Number of seconds. TimeSpan(Int32, Int32, Int32, Int32, Int32) Initializes a new instance of the TimeSpan structure to a specified number of days, hours, minutes, seconds and milliseconds. Declaration public TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description Int32 days Number of days. Int32 hours Number of hours. Int32 minutes Number of minutes. Int32 seconds Number of seconds. Int32 milliseconds Number of milliseconds. | Improve this Doc View Source TimeSpan(Int64) Initializes a new instance of the TimeSpan structure to the specified number of ticks. Declaration public TimeSpan(long ticks) Parameters Type Name Description Int64 ticks A time period expressed in 100-nanosecond units. Fields | Improve this Doc View Source MaxValue Represents the maximum TimeSpan value. This field is read-only. Declaration public static readonly TimeSpan MaxValue Field Value Type Description TimeSpan | Improve this Doc View Source MinValue Represents the minimum TimeSpan value. This field is read-only. Declaration public static readonly TimeSpan MinValue Field Value Type Description TimeSpan | Improve this Doc View Source TicksPerDay Represents the number of ticks in 1 day. This field is constant. Declaration public const long TicksPerDay = 864000000000L Field Value Type Description Int64 | Improve this Doc View Source TicksPerHour Represents the number of ticks in 1 hour. This field is constant. Declaration public const long TicksPerHour = 36000000000L Field Value Type Description Int64 | Improve this Doc View Source TicksPerMillisecond Represents the number of ticks in 1 millisecond. This field is constant. Declaration public const long TicksPerMillisecond = 10000L Field Value Type Description Int64 | Improve this Doc View Source TicksPerMinute Represents the number of ticks in 1 minute. This field is constant. Declaration public const long TicksPerMinute = 600000000L Field Value Type Description Int64 | Improve this Doc View Source TicksPerSecond Represents the number of ticks in 1 second. Declaration public const long TicksPerSecond = 10000000L Field Value Type Description Int64 | Improve this Doc View Source Zero Represents the zero TimeSpan value. This field is read-only. Declaration public static readonly TimeSpan Zero Field Value Type Description TimeSpan Properties | Improve this Doc View Source Days Gets the days component of the time interval represented by the current TimeSpan structure. Declaration public int Days { get; } Property Value Type Description Int32 The day component of this instance. The return value can be positive or negative. | Improve this Doc View Source Hours Gets the hours component of the time interval represented by the current TimeSpan structure. Declaration public int Hours { get; } Property Value Type Description Int32 The hour component of this instance. The return value ranges from -23 through 23. | Improve this Doc View Source Milliseconds Gets the milliseconds component of the time interval represented by the current TimeSpan structure. Declaration public int Milliseconds { get; } Property Value Type Description Int32 The millisecond component of this instance. The return value ranges from -999 through 999. | Improve this Doc View Source Minutes Gets the minutes component of the time interval represented by the current TimeSpan structure. Declaration public int Minutes { get; } Property Value Type Description Int32 The minute component of this instance. The return value ranges from -59 through 59. | Improve this Doc View Source Seconds Gets the seconds component of the time interval represented by the current TimeSpan structure. Declaration public int Seconds { get; } Property Value Type Description Int32 The second component of this instance. The return value ranges from -59 through 59. | Improve this Doc View Source Ticks Gets the number of ticks that represent the value of the current TimeSpan structure. Declaration public long Ticks { get; } Property Value Type Description Int64 The number of ticks contained in this instance. | Improve this Doc View Source TotalDays Gets the value of the current TimeSpan structure expressed in whole and fractional days. Declaration public double TotalDays { get; } Property Value Type Description Double The total number of days represented by this instance. | Improve this Doc View Source TotalHours Gets the value of the current TimeSpan structure expressed in whole and fractional hours. Declaration public double TotalHours { get; } Property Value Type Description Double The total number of hours represented by this instance. | Improve this Doc View Source TotalMilliseconds Gets the value of the current TimeSpan structure expressed in whole and fractional milliseconds. Declaration public double TotalMilliseconds { get; } Property Value Type Description Double The total number of milliseconds represented by this instance. | Improve this Doc View Source TotalMinutes Gets the value of the current TimeSpan structure expressed in whole and fractional minutes. Declaration public double TotalMinutes { get; } Property Value Type Description Double The total number of minutes represented by this instance. | Improve this Doc View Source TotalSeconds Gets the value of the current TimeSpan structure expressed in whole and fractional seconds. Declaration public double TotalSeconds { get; } Property Value Type Description Double The total number of seconds represented by this instance. Methods | Improve this Doc View Source Add(TimeSpan) Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance. Declaration public TimeSpan Add(TimeSpan ts) Parameters Type Name Description TimeSpan ts The time interval to add. Returns Type Description TimeSpan A new object that represents the value of this instance plus the value of ts. Compare(TimeSpan, TimeSpan) Compares two TimeSpan values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value. Declaration public static int Compare(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Int32 One of the following values : -1 if t1 is shorter than t2. 0 if t1 is equal to t2. 1 if t1 is longer than t2. CompareTo(Object) Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object. Declaration public int CompareTo(object value) Parameters Type Name Description Object value An object to compare, or null. Returns Type Description Int32 One of the following values : -1 if This instance is shorter than value. 0 if This instance is equal to value. 1 if This instance is longer than value or value is null. | Improve this Doc View Source Duration() Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object. Declaration public TimeSpan Duration() Returns Type Description TimeSpan A new object whose value is the absolute value of the current TimeSpan object. Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object value) Parameters Type Name Description Object value An object to compare with this instance. Returns Type Description Boolean true if value is a TimeSpan object that represents the same time interval as the current TimeSpan structure; otherwise, false. Overrides ValueType.Equals(Object) Equals(TimeSpan, TimeSpan) Returns a value that indicates whether two specified instances of TimeSpan are equal. Declaration public static bool Equals(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the values of t1 and t2 are equal; otherwise, false. | Improve this Doc View Source FromDays(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of days. Declaration public static TimeSpan FromDays(long value) Parameters Type Name Description Int64 value A number of days that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source FromHours(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of hours. Declaration public static TimeSpan FromHours(long value) Parameters Type Name Description Int64 value A number of hours that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source FromMilliseconds(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of milliseconds. Declaration public static TimeSpan FromMilliseconds(long value) Parameters Type Name Description Int64 value A number of milliseconds that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source FromMinutes(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of minute. Declaration public static TimeSpan FromMinutes(long value) Parameters Type Name Description Int64 value A number of minute that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source FromSeconds(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of seconds. Declaration public static TimeSpan FromSeconds(long value) Parameters Type Name Description Int64 value A number of seconds that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source FromTicks(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of ticks. Declaration public static TimeSpan FromTicks(long value) Parameters Type Name Description Int64 value A number of ticks that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source Negate() Returns a new TimeSpan object whose value is the negated value of this instance. Declaration public TimeSpan Negate() Returns Type Description TimeSpan A new object with the same numeric value as this instance, but with the opposite sign. | Improve this Doc View Source Subtract(TimeSpan) Returns a new TimeSpan object whose value is the difference between the specified TimeSpan object and this instance. Declaration public TimeSpan Subtract(TimeSpan ts) Parameters Type Name Description TimeSpan ts The time interval to be subtracted. Returns Type Description TimeSpan A new time interval whose value is the result of the value of this instance minus the value of ts. ToString() Converts the value of the current TimeSpan object to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the current TimeSpan value. Overrides Object.ToString() Remarks The returned string is formatted with the \"c\" format specifier and has the following format: [-][d.]hh:mm:ss[.fffffff] Operators | Improve this Doc View Source Addition(TimeSpan, TimeSpan) Adds two specified TimeSpan instances. Declaration public static TimeSpan operator +(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to add. TimeSpan t2 The second time interval to add. Returns Type Description TimeSpan An object whose value is the sum of the values of t1 and t2. | Improve this Doc View Source Equality(TimeSpan, TimeSpan) Indicates whether two TimeSpan instances are equal Declaration public static bool operator ==(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the values of t1 and t2 are equal; otherwise, false. | Improve this Doc View Source GreaterThan(TimeSpan, TimeSpan) Indicates whether a specified TimeSpan is greater than another specified TimeSpan. Declaration public static bool operator>(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the value of t1 is greater than the value of t2; otherwise, false. | Improve this Doc View Source GreaterThanOrEqual(TimeSpan, TimeSpan) Indicates whether a specified TimeSpan is greater than or equal to another specified TimeSpan. Declaration public static bool operator >=(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the value of t1 is greater than or equal to the value of t2; otherwise, false. | Improve this Doc View Source Inequality(TimeSpan, TimeSpan) Indicates whether two TimeSpan instances are not equal. Declaration public static bool operator !=(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the values of t1 and t2 are not equal; otherwise, false. | Improve this Doc View Source LessThan(TimeSpan, TimeSpan) Indicates whether a specified TimeSpan is less than another specified TimeSpan. Declaration public static bool operator <(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the value of t1 is less than the value of t2; otherwise, false. | Improve this Doc View Source LessThanOrEqual(TimeSpan, TimeSpan) Indicates whether a specified TimeSpan is less than or equal to another specified TimeSpan. Declaration public static bool operator <=(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the value of t1 is less than or equal to the value of t2; otherwise, false. | Improve this Doc View Source Subtraction(TimeSpan, TimeSpan) Subtracts a specified TimeSpan from another specified TimeSpan. Declaration public static TimeSpan operator -(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The minuend. TimeSpan t2 The subtrahend. Returns Type Description TimeSpan An object whose value is the result of the value of t1 minus the value of t2. | Improve this Doc View Source UnaryNegation(TimeSpan) Returns a TimeSpan whose value is the negated value of the specified instance. Declaration public static TimeSpan operator -(TimeSpan t) Parameters Type Name Description TimeSpan t The time interval to be negated. Returns Type Description TimeSpan An object that has the same numeric value as this instance, but the opposite sign. | Improve this Doc View Source UnaryPlus(TimeSpan) Returns the specified instance of TimeSpan. Declaration public static TimeSpan operator +(TimeSpan t) Parameters Type Name Description TimeSpan t The time interval to return. Returns Type Description TimeSpan The time interval specified by t."
  },
  "api/System.Type.html": {
    "href": "api/System.Type.html",
    "title": "Class Type | nanoFramework Documentation",
    "keywords": "Class Type Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types. Inheritance Object MemberInfo Type Implements IReflect Inherited Members MemberInfo.MemberType MemberInfo.Name MemberInfo.GetCustomAttributes(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class Type : MemberInfo, IReflect Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source Assembly Gets the Assembly in which the type is declared. For generic types, gets the Assembly in which the generic type is defined. Declaration public abstract Assembly Assembly { get; } Property Value Type Description Assembly An Assembly instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type. | Improve this Doc View Source AssemblyQualifiedName Gets the assembly-qualified name of the type, which includes the name of the assembly from which this Type object was loaded. Declaration public abstract string AssemblyQualifiedName { get; } Property Value Type Description String The assembly-qualified name of the Type, which includes the name of the assembly from which the Type was loaded, or null if the current instance represents a generic type parameter. | Improve this Doc View Source BaseType Gets the type from which the current Type directly inherits. Declaration public abstract Type BaseType { get; } Property Value Type Description Type The Type from which the current Type directly inherits, or null if the current Type represents the Object class or an interface. DeclaringType Gets the type that declares the current nested type or generic type parameter. Declaration public override Type DeclaringType { get; } Property Value Type Description Type A Type object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, null. Overrides MemberInfo.DeclaringType | Improve this Doc View Source FullName Gets the fully qualified name of the type, including its namespace but not its assembly. Declaration public abstract string FullName { get; } Property Value Type Description String The fully qualified name of the type, including its namespace but not its assembly; or null if the current instance represents a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters. IsAbstract Gets a value indicating whether the Type is abstract and must be overridden. Declaration public bool IsAbstract { get; } Property Value Type Description Boolean true if the Type is abstract; otherwise, false. IsArray Gets a value that indicates whether the type is an array. Declaration public bool IsArray { get; } Property Value Type Description Boolean true if the current type is an array; otherwise, false. IsClass Gets a value indicating whether the Type is a class or a delegate; that is, not a value type or interface. Declaration public bool IsClass { get; } Property Value Type Description Boolean true if the Type is a class; otherwise, false. IsEnum Gets a value indicating whether the current Type represents an enumeration. Declaration public bool IsEnum { get; } Property Value Type Description Boolean true if the current Type represents an enumeration; otherwise, false. IsInterface Gets a value indicating whether the Type is an interface; that is, not a class or a value type. Declaration public bool IsInterface { get; } Property Value Type Description Boolean true if the Type is an interface; otherwise, false. IsNotPublic Gets a value indicating whether the Type is not declared public. Declaration public bool IsNotPublic { get; } Property Value Type Description Boolean true if the Type is not declared public and is not a nested type; otherwise, false. IsPublic Gets a value indicating whether the Type is declared public. Declaration public bool IsPublic { get; } Property Value Type Description Boolean true if the Type is declared public and is not a nested type; otherwise, false. IsSerializable Gets a value indicating whether the Type is serializable. Declaration public bool IsSerializable { get; } Property Value Type Description Boolean true if the Type is serializable; otherwise, false. IsValueType Gets a value indicating whether the Type is a value type. Declaration public bool IsValueType { get; } Property Value Type Description Boolean true if the Type is a value type; otherwise, false. Methods GetConstructor(Type[]) Searches for a public instance constructor whose parameters match the types in the specified array. Declaration public ConstructorInfo GetConstructor(Type[] types) Parameters Type Name Description Type [] types An array of Type objects representing the number, order, and type of the parameters for the desired constructor. -or- An empty array of Type objects, to get a constructor that takes no parameters.Such an empty array is provided by the static field Type.EmptyTypes. Returns Type Description ConstructorInfo An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null. | Improve this Doc View Source GetElementType() When overridden in a derived class, returns the Type of the object encompassed or referred to by the current array, pointer or reference type. Declaration public abstract Type GetElementType() Returns Type Description Type The Type of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current Type is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method. | Improve this Doc View Source GetField(String) Searches for the public field with the specified name. Declaration public FieldInfo GetField(string name) Parameters Type Name Description String name The string containing the name of the data field to get. Returns Type Description FieldInfo An object representing the public field with the specified name, if found; otherwise, null. | Improve this Doc View Source GetField(String, BindingFlags) Searches for the specified field, using the specified binding constraints. Declaration public abstract FieldInfo GetField(string name, BindingFlags bindingAttr) Parameters Type Name Description String name The string containing the name of the data field to get. BindingFlags bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null. Returns Type Description FieldInfo An object representing the field that matches the specified requirements, if found; otherwise, null. | Improve this Doc View Source GetFields() Returns all the public fields of the current Type. Declaration public FieldInfo[] GetFields() Returns Type Description FieldInfo [] An array of FieldInfo objects representing all the public fields defined for the current Type. -or- An empty array of type FieldInfo, if no public fields are defined for the current Type. | Improve this Doc View Source GetFields(BindingFlags) When overridden in a derived class, searches for the fields defined for the current Type, using the specified binding constraints. Declaration public abstract FieldInfo[] GetFields(BindingFlags bindingAttr) Parameters Type Name Description BindingFlags bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null. Returns Type Description FieldInfo [] An array of FieldInfo objects representing all the public fields defined for the current Type. -or- An empty array of type FieldInfo, if no public fields are defined for the current Type. | Improve this Doc View Source GetInterfaces() When overridden in a derived class, gets all the interfaces implemented or inherited by the current Type. Declaration public abstract Type[] GetInterfaces() Returns Type Description Type [] An array of Type objects representing all the interfaces implemented or inherited by the current Type. -or- An empty array of type Type, if no interfaces are implemented or inherited by the current Type. GetMethod(String) Searches for the public method with the specified name. Declaration public MethodInfo GetMethod(string name) Parameters Type Name Description String name The string containing the name of the public method to get. Returns Type Description MethodInfo An object that represents the public method with the specified name, if found; otherwise, null. GetMethod(String, BindingFlags) Searches for the specified method, using the specified binding constraints. Declaration public MethodInfo GetMethod(string name, BindingFlags bindingAttr) Parameters Type Name Description String name The string containing the name of the method to get. BindingFlags bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null. Returns Type Description MethodInfo An object representing the method that matches the specified requirements, if found; otherwise, null. GetMethod(String, Type[]) Searches for the specified public method whose parameters match the specified argument types. Declaration public MethodInfo GetMethod(string name, Type[] types) Parameters Type Name Description String name The string containing the name of the public method to get. Type [] types An array of Type objects representing the number, order, and type of the parameters for the desired constructor. -or- An empty array of Type objects, to get a constructor that takes no parameters.Such an empty array is provided by the static field Type.EmptyTypes. Returns Type Description MethodInfo An object representing the public method whose parameters match the specified argument types, if found; otherwise, null. | Improve this Doc View Source GetMethods() Returns all the public methods of the current Type. Declaration public MethodInfo[] GetMethods() Returns Type Description MethodInfo [] An array of MethodInfo objects representing all the public methods defined for the current Type. -or- An empty array of type MethodInfo, if no public methods are defined for the current Type. | Improve this Doc View Source GetMethods(BindingFlags) When overridden in a derived class, searches for the methods defined for the current Type, using the specified binding constraints. Declaration public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr) Parameters Type Name Description BindingFlags bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null. Returns Type Description MethodInfo [] An array of MethodInfo objects representing all the public methods defined for the current Type. -or- An empty array of type MethodInfo, if no public methods are defined for the current Type. | Improve this Doc View Source GetType(String) Gets the Type with the specified name, performing a case-sensitive search. Declaration public static Type GetType(string typeName) Parameters Type Name Description String typeName The assembly-qualified name of the type to get. See AssemblyQualifiedName. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace. Returns Type Description Type The type with the specified name, if found; otherwise, null. GetTypeFromHandle(RuntimeTypeHandle) Gets the type referenced by the specified type handle. Declaration public static Type GetTypeFromHandle(RuntimeTypeHandle handle) Parameters Type Name Description RuntimeTypeHandle handle The object that refers to the type. Returns Type Description Type The type referenced by the specified RuntimeTypeHandle, or null if the Value property of handle is null. InvokeMember(String, BindingFlags, Binder, Object, Object[]) Invokes the specified member, using the specified binding constraints and matching the specified argument list. Declaration public object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args) Parameters Type Name Description String name The string containing the name of the constructor, method, property, or field member to invoke. -or- An empty string (\"\") to invoke the default member. -or- For IDispatch members, a string representing the DispID, for example \"[DispID=3]\". BindingFlags invokeAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. Binder binder An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection. -or- A null reference(Nothing in Visual Basic), to use the DefaultBinder.Note that explicitly defining a Binder object may be required for successfully invoking method overloads with variable arguments. Object target The object on which to invoke the specified member. Object [] args An array containing the arguments to pass to the member to invoke. Returns Type Description Object An object representing the return value of the invoked member. IsInstanceOfType(Object) Determines whether the specified object is an instance of the current Type. Declaration public virtual bool IsInstanceOfType(object o) Parameters Type Name Description Object o The object to compare with the current type. Returns Type Description Boolean true if the current Type is in the inheritance hierarchy of the object represented by o, or if the current Type is an interface that o implements. false if neither of these conditions is the case, if o is null, or if the current Type is an open generic type (that is, ContainsGenericParameters returns true). | Improve this Doc View Source IsSubclassOf(Type) Determines whether the current Type derives from the specified Type. Declaration public virtual bool IsSubclassOf(Type c) Parameters Type Name Description Type c The type to compare with the current type. Returns Type Description Boolean true if the current Type derives from c; otherwise, false. This method also returns false if c and the current Type are equal. | Improve this Doc View Source ToString() Returns a String representing the name of the current Type. Declaration public override string ToString() Returns Type Description String A String representing the name of the current Type. Overrides Object.ToString() Implements IReflect"
  },
  "api/System.TypeCode.html": {
    "href": "api/System.TypeCode.html",
    "title": "Enum TypeCode | nanoFramework Documentation",
    "keywords": "Enum TypeCode Specifies the type of an object. Namespace : System Assembly : mscorlib.dll Syntax public enum TypeCode Fields Name Description Boolean A simple type representing Boolean values of true or false. Byte An integral type representing unsigned 8-bit integers with values between 0 and 255. Char An integral type representing unsigned 16-bit integers with values between 0 and 65535. The set of possible values for the Char type corresponds to the Unicode character set. DateTime A type representing a date and time value. DBNull A database null (column) value. Decimal A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits. Double A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits. Empty A null reference. Int16 An integral type representing signed 16-bit integers with values between -32768 and 32767. Int32 An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647. Int64 An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807. Object A general type representing any reference or value type not explicitly represented by another TypeCode. SByte An integral type representing signed 8-bit integers with values between -128 and 127. Single A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits. String A sealed class type representing Unicode character strings. UInt16 An integral type representing unsigned 16-bit integers with values between 0 and 65535. UInt32 An integral type representing unsigned 32-bit integers with values between 0 and 4294967295. UInt64 An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615."
  },
  "api/System.TypedReference.html": {
    "href": "api/System.TypedReference.html",
    "title": "Struct TypedReference | nanoFramework Documentation",
    "keywords": "Struct TypedReference Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct TypedReference"
  },
  "api/System.UInt16.html": {
    "href": "api/System.UInt16.html",
    "title": "Struct UInt16 | nanoFramework Documentation",
    "keywords": "Struct UInt16 Represents a 16-bit unsigned integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax [CLSCompliant(false)] public struct UInt16 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of UInt16. This field is constant. Declaration public const ushort MaxValue = 65535 Field Value Type Description UInt16 Remarks The value of this constant is 65535; that is, hexadecimal 0xFFFF. | Improve this Doc View Source MinValue Represents the smallest possible value of UInt16. This field is constant. Declaration public const ushort MinValue = 0 Field Value Type Description UInt16 Remarks The value of this constant is 0. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 16-bit unsigned integer equivalent. Declaration [CLSCompliant(false)] public static ushort Parse(string s) Parameters Type Name Description String s A string that represents the number to convert. Returns Type Description UInt16 A 16-bit unsigned integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.UInt32.html": {
    "href": "api/System.UInt32.html",
    "title": "Struct UInt32 | nanoFramework Documentation",
    "keywords": "Struct UInt32 Represents a 32-bit unsigned integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax [CLSCompliant(false)] public struct UInt32 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of UInt32. This field is constant. Declaration public const uint MaxValue = 4294967295U Field Value Type Description UInt32 Remarks The value of this constant is 4,294,967,295; that is, hexadecimal 0xFFFFFFFF. | Improve this Doc View Source MinValue Represents the smallest possible value of UInt32. This field is constant. Declaration public const uint MinValue = 0U Field Value Type Description UInt32 Remarks The value of this constant is 0. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 32-bit unsigned integer equivalent. Declaration [CLSCompliant(false)] public static uint Parse(string s) Parameters Type Name Description String s A string representing the number to convert. Returns Type Description UInt32 A 32-bit unsigned integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.UInt64.html": {
    "href": "api/System.UInt64.html",
    "title": "Struct UInt64 | nanoFramework Documentation",
    "keywords": "Struct UInt64 Represents a 64-bit unsigned integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax [CLSCompliant(false)] public struct UInt64 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of UInt64. This field is constant. Declaration public const ulong MaxValue = 18446744073709551615UL Field Value Type Description UInt64 Remarks The value of this constant is 18,446,744,073,709,551,615; that is, hexadecimal 0xFFFFFFFFFFFFFFFF. | Improve this Doc View Source MinValue Represents the smallest possible value of UInt64. This field is constant. Declaration public const ulong MinValue = 0UL Field Value Type Description UInt64 Remarks The value of this constant is 0. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 64-bit unsigned integer equivalent. Declaration [CLSCompliant(false)] public static ulong Parse(string s) Parameters Type Name Description String s A string that represents the number to convert. Returns Type Description UInt64 A 64-bit unsigned integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.UIntPtr.html": {
    "href": "api/System.UIntPtr.html",
    "title": "Struct UIntPtr | nanoFramework Documentation",
    "keywords": "Struct UIntPtr A platform-specific type that is used to represent a pointer or a handle. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct UIntPtr"
  },
  "api/System.Uri.Flags.html": {
    "href": "api/System.Uri.Flags.html",
    "title": "Enum Uri.Flags | nanoFramework Documentation",
    "keywords": "Enum Uri.Flags Defines flags kept in m_Flags variable. Namespace : System Assembly : System.Net.Http.dll Syntax protected enum Flags Fields Name Description LoopbackHost Flag value for loopback host"
  },
  "api/System.Uri.html": {
    "href": "api/System.Uri.html",
    "title": "Class Uri | nanoFramework Documentation",
    "keywords": "Class Uri Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI. Inheritance Object Uri Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : System.Net.Http.dll Syntax public class Uri Constructors | Improve this Doc View Source Uri(String) Initializes a new instance of the Uri class with the specified URI. Declaration public Uri(string uriString) Parameters Type Name Description String uriString A URI. Remarks This constructor parses the URI string, therefore it can be used to validate a URI. Exceptions Type Condition Exception The uriString is null. ArgumentNullException The uriString is empty. -or- The scheme specified in uriString is not correctly formed. -or- uriString contains too many slashes. -or- The password specified in uriString is not valid. -or- The host name specified in uriString is not valid. -or- The file name specified in uriString is not valid. -or- The user name specified in uriString is not valid. -or- The host or authority name specified in uriString cannot be terminated by backslashes. -or- The port number specified in uriString is not valid or cannot be parsed. -or- The length of uriString exceeds 65534 characters. -or- The length of the scheme specified in uriString exceeds 1023 characters. -or- There is an invalid character sequence in uriString . -or- The MS-DOS path specified in uriString must start with c:\\\\. | Improve this Doc View Source Uri(String, UriKind) Constructs Uri from string and enumeration that tell what is the type of Uri. Declaration public Uri(string uriString, UriKind kind) Parameters Type Name Description String uriString String to construct Uri from UriKind kind Type of Uri to construct Fields | Improve this Doc View Source HttpDefaultPort Default port for http protocol - 80 Declaration public const int HttpDefaultPort = 80 Field Value Type Description Int32 | Improve this Doc View Source HttpsDefaultPort Default port for https protocol - 443 Declaration public const int HttpsDefaultPort = 443 Field Value Type Description Int32 | Improve this Doc View Source m_AbsolutePath Member varialbe that keeps absolute path. Declaration protected string m_AbsolutePath Field Value Type Description String | Improve this Doc View Source m_absoluteUri Member variable that keeps absolute uri (generated in method ParseUriString) Declaration protected string m_absoluteUri Field Value Type Description String | Improve this Doc View Source m_Flags Member variable that keeps internal flags/ Declaration protected int m_Flags Field Value Type Description Int32 | Improve this Doc View Source m_host Member varialbe that keeps host name ( http and https ). Declaration protected string m_host Field Value Type Description String | Improve this Doc View Source m_hostNameType Type of the host. Declaration protected UriHostNameType m_hostNameType Field Value Type Description UriHostNameType | Improve this Doc View Source m_isAbsoluteUri Member varialbe that keeps boolean if Uri is absolute. Declaration protected bool m_isAbsoluteUri Field Value Type Description Boolean | Improve this Doc View Source m_isUnc Member varialbe that tells if path is UNC ( Universal Naming Convention ) In this class it is always false, but can be changed in derived classes. Declaration protected bool m_isUnc Field Value Type Description Boolean | Improve this Doc View Source m_OriginalUriString Member varialbe that keeps original string passed to Uri constructor. Declaration protected string m_OriginalUriString Field Value Type Description String | Improve this Doc View Source m_port Member variable that keeps port used by this uri. Declaration protected int m_port Field Value Type Description Int32 | Improve this Doc View Source m_scheme Member varialbe that keeps scheme of Uri. Declaration protected string m_scheme Field Value Type Description String | Improve this Doc View Source UnknownPort Constant to indicate that port for this protocol is unknown Declaration protected const int UnknownPort = -1 Field Value Type Description Int32 Properties | Improve this Doc View Source AbsolutePath Gets a local operating-system representation of a file name. Declaration public string AbsolutePath { get; } Property Value Type Description String A String containing the local operating-system representation of a file name. Exceptions Type Condition InvalidOperationException This instance represents a relative URI, and this property is valid only for absolute URIs. | Improve this Doc View Source AbsoluteUri Gets a string containing the absolute uri or entire uri of this instance. Declaration public string AbsoluteUri { get; } Property Value Type Description String A String containing the entire URI. | Improve this Doc View Source Host Gets the host component of this instance. Declaration public string Host { get; } Property Value Type Description String A String containing the host name. This is usually the DNS host name or IP address of the server. | Improve this Doc View Source HostNameType Gets the type of the host name specified in the URI. Declaration public UriHostNameType HostNameType { get; } Property Value Type Description UriHostNameType A member of the UriHostNameType enumeration. | Improve this Doc View Source IsAbsoluteUri Gets whether the Uri instance is absolute. Declaration public bool IsAbsoluteUri { get; } Property Value Type Description Boolean true if the Uri instance is absolute; otherwise, false . | Improve this Doc View Source IsLoopback Gets whether the specified Uri refers to the local host. Declaration public bool IsLoopback { get; } Property Value Type Description Boolean true if the host specified in the Uri is the local computer; otherwise, false . | Improve this Doc View Source IsUnc Gets whether the specified Uri is a universal naming convention (UNC) path. Declaration public bool IsUnc { get; } Property Value Type Description Boolean true if the Uri is a UNC path; otherwise, false . Exceptions Type Condition InvalidOperationException This instance represents a relative URI, and this property is valid only for absolute URIs. | Improve this Doc View Source OriginalString Gets the original URI string that was passed to the Uri constructor. Declaration public string OriginalString { get; } Property Value Type Description String | Improve this Doc View Source Port Gets the port number of this URI. Declaration public int Port { get; } Property Value Type Description Int32 An Int32 value containing the port number for this URI. Exceptions Type Condition InvalidOperationException This instance represents a relative URI, and this property is valid only for absolute URIs. | Improve this Doc View Source Scheme Gets the scheme name for this URI. Declaration public string Scheme { get; } Property Value Type Description String A String containing the scheme for this URI, converted to lowercase. Exceptions Type Condition InvalidOperationException This instance represents a relative URI, and this property is valid only for absolute URIs. Methods | Improve this Doc View Source ConstructAbsoluteUri(String) Constructs an absolute Uri from a URI string. Declaration protected void ConstructAbsoluteUri(string uriString) Parameters Type Name Description String uriString A URI. Remarks See Uri(String) . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description Object o Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source IsAlpha(Char) Checks to see if the character value is an alpha character. Declaration protected bool IsAlpha(char testChar) Parameters Type Name Description Char testChar The character to evaluate. Returns Type Description Boolean true if the character is Alpha; otherwise, false . | Improve this Doc View Source IsAlphaNumeric(Char) Checks to see if the character value is an alpha or numeric. Declaration protected bool IsAlphaNumeric(char testChar) Parameters Type Name Description Char testChar The character to evaluate. Returns Type Description Boolean true if the character is Alpha or numeric; otherwise, false . | Improve this Doc View Source IsHex(Char) Checks to see if the character value is Hex. Declaration protected bool IsHex(char testChar) Parameters Type Name Description Char testChar The character to evaluate. Returns Type Description Boolean true if the character is a valid Hex character; otherwise, false . | Improve this Doc View Source IsIPv4(String) Returns if host name is IP adress 4 bytes. Like 192.1.1.1 Declaration protected bool IsIPv4(string host) Parameters Type Name Description String host string with host name Returns Type Description Boolean True if name is string with IPv4 address | Improve this Doc View Source IsIPv6(String) Declaration protected bool IsIPv6(string host) Parameters Type Name Description String host Returns Type Description Boolean | Improve this Doc View Source IsWellFormedUriString(String, UriKind) Indicates whether the string is well-formed by attempting to construct a URI with the string. Declaration public static bool IsWellFormedUriString(string uriString, UriKind uriKind) Parameters Type Name Description String uriString A URI. UriKind uriKind The type of the URI in uriString . Returns Type Description Boolean true if the string was well-formed in accordance with RFC 2396 and RFC 2732; otherwise false . | Improve this Doc View Source ParseSchemeSpecificPart(String, Int32) Parse Scheme-specific part of uri for host, port and absolute path Briefed syntax abstracted from .NET FX: Group 1 - http, https, ftp, file, gopher, nntp, telnet, ldap, net.tcp and net.pipe Must be rooted. The 1st segment is authority. Empty path should be replace as '/' Group 2 - file Reminder: Treat all '&apos; as '/' If it starts with only one '/', host should be empty Otherwise, all leading '/' should be ignored before searching for 1st segment. The 1st segment is host Group 3 - news and uuid Authority always be empty. Everything goes to path. Group 4 - mailto and all other shemes The 1st segment is authority iff it was not rooted. Group 5 - all other schemes The 1st segment is authority iff it was rooted. Empty path should be replace as '/' Declaration protected bool ParseSchemeSpecificPart(string sUri, int iStart) Parameters Type Name Description String sUri Scheme-specific part of uri Int32 iStart Returns Type Description Boolean | Improve this Doc View Source ParseUriString(String) Internal method parses a URI string into Uri variables Declaration protected void ParseUriString(string uriString) Parameters Type Name Description String uriString A Uri. Exceptions Type Condition ArgumentNullException The uriString is null. Exception See constructor description. | Improve this Doc View Source Split(String, Int32, out String, out String, Boolean) Declaration protected void Split(string sUri, int iStart, out string sAuthority, out string sPath, bool bReplaceEmptyPath) Parameters Type Name Description String sUri Int32 iStart String sAuthority String sPath Boolean bReplaceEmptyPath | Improve this Doc View Source ValidateRelativePath(String) Parses relative Uri into variables. Declaration protected void ValidateRelativePath(string uri) Parameters Type Name Description String uri A Uri. Exceptions Type Condition ArgumentNullException The uri is null. Exception See constructor description. | Improve this Doc View Source ValidateUriPart(String, Int32) Validates that part of Uri after sheme is valid for unknown Uri scheme Declaration protected void ValidateUriPart(string uriString, int startIndex) Parameters Type Name Description String uriString Uri string Int32 startIndex Index in the string where Uri part ( after scheme ) starts | Improve this Doc View Source ValidateUrn(String) Parses urn string into Uri variables. Parsing is restricted to basic urn:NamespaceID, urn:uuid formats only. Declaration protected void ValidateUrn(string uri) Parameters Type Name Description String uri A Uri. Exceptions Type Condition ArgumentNullException The uri is null. Exception See the constructor description. Operators | Improve this Doc View Source Equality(Uri, Uri) Declaration public static bool operator ==(Uri lhs, Uri rhs) Parameters Type Name Description Uri lhs Uri rhs Returns Type Description Boolean | Improve this Doc View Source Inequality(Uri, Uri) Declaration public static bool operator !=(Uri lhs, Uri rhs) Parameters Type Name Description Uri lhs Uri rhs Returns Type Description Boolean"
  },
  "api/System.UriHostNameType.html": {
    "href": "api/System.UriHostNameType.html",
    "title": "Enum UriHostNameType | nanoFramework Documentation",
    "keywords": "Enum UriHostNameType Defines host name types for the http and https protocols. method. Namespace : System Assembly : System.Net.Http.dll Syntax public enum UriHostNameType Fields Name Description Basic The host is set, but the type cannot be determined. Dns The host name is a domain name system (DNS) style host name. IPv4 The host name is an Internet Protocol (IP) version 4 host address. IPv6 The host name is an Internet Protocol (IP) version 6 host address. Unknown The type of the host name is not supplied."
  },
  "api/System.UriKind.html": {
    "href": "api/System.UriKind.html",
    "title": "Enum UriKind | nanoFramework Documentation",
    "keywords": "Enum UriKind Defines the kinds of Uri s for the IsWellFormedUriString(String, UriKind) method and several Uri methods. Namespace : System Assembly : System.Net.Http.dll Syntax public enum UriKind Fields Name Description Absolute The Uri is an absolute Uri. Relative The Uri is a relative Uri. RelativeOrAbsolute The kind of the Uri is indeterminate."
  },
  "api/System.ValueType.html": {
    "href": "api/System.ValueType.html",
    "title": "Class ValueType | nanoFramework Documentation",
    "keywords": "Class ValueType Provides the base class for value types. Inheritance Object ValueType Enum Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class ValueType Methods Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current instance. Returns Type Description Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides Object.Equals(Object)"
  },
  "api/System.Version.html": {
    "href": "api/System.Version.html",
    "title": "Class Version | nanoFramework Documentation",
    "keywords": "Class Version Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited. Inheritance Object Version Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public sealed class Version Constructors | Improve this Doc View Source Version(Int32, Int32) Initializes a new instance of the Version class using the specified major and minor values. Declaration public Version(int major, int minor) Parameters Type Name Description Int32 major The major version number. Int32 minor The minor version number. Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source Version(Int32, Int32, Int32, Int32) Initializes a new instance of the Version class with the specified major, minor, build, and revision numbers. Declaration public Version(int major, int minor, int build, int revision) Parameters Type Name Description Int32 major The major version number. Int32 minor The minor version number. Int32 build The build number. Int32 revision The revision number. Exceptions Type Condition ArgumentOutOfRangeException Properties | Improve this Doc View Source Build Gets the value of the build component of the version number for the current Version object. Declaration public int Build { get; } Property Value Type Description Int32 The build version number. | Improve this Doc View Source Major Gets the value of the major component of the version number for the current Version object. Declaration public int Major { get; } Property Value Type Description Int32 The major version number. | Improve this Doc View Source Minor Gets the value of the minor component of the version number for the current Version object. Declaration public int Minor { get; } Property Value Type Description Int32 The minor version number. | Improve this Doc View Source Revision Gets the value of the revision component of the version number for the current Version object. Declaration public int Revision { get; } Property Value Type Description Int32 The revision version number. Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether the current Version object is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An object to compare with the current Version object, or null. Returns Type Description Boolean true if the current Version object and obj are both Version objects, and every component of the current Version object matches the corresponding component of obj; otherwise, false. Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Converts the value of the current Version object to its equivalent String representation. Declaration public override string ToString() Returns Type Description String The String representation of the values of the major, minor, build, and revision components of the current Version object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined: major.minor[.build[.revision]] Overrides Object.ToString()"
  },
  "api/System.Void.html": {
    "href": "api/System.Void.html",
    "title": "Struct Void | nanoFramework Documentation",
    "keywords": "Struct Void Specifies a return value type for a method that does not return a value. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Void"
  },
  "api/System.WeakReference.html": {
    "href": "api/System.WeakReference.html",
    "title": "Class WeakReference | nanoFramework Documentation",
    "keywords": "Class WeakReference Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection. Inheritance Object WeakReference Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class WeakReference Constructors WeakReference(Object) Initializes a new instance of the WeakReference class, referencing the specified object. Declaration public WeakReference(object target) Parameters Type Name Description Object target The object to track or null. Properties IsAlive Gets an indication whether the object referenced by the current WeakReference object has been garbage collected. Declaration public virtual bool IsAlive { get; } Property Value Type Description Boolean true if the object referenced by the current WeakReference object has not been garbage collected and is still accessible; otherwise, false. Target Gets or sets the object (the target) referenced by the current WeakReference object. Declaration public virtual object Target { get; set; } Property Value Type Description Object null if the object referenced by the current WeakReference object has been garbage collected; otherwise, a reference to the object referenced by the current WeakReference object."
  },
  "api/Windows.Devices.Adc.AdcChannel.html": {
    "href": "api/Windows.Devices.Adc.AdcChannel.html",
    "title": "Class AdcChannel | nanoFramework Documentation",
    "keywords": "Class AdcChannel Represents a single ADC channel. Inheritance Object AdcChannel Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Adc Assembly : Windows.Devices.Adc.dll Syntax public sealed class AdcChannel : IAdcChannel, IDisposable Properties | Improve this Doc View Source Controller Gets the ADC controller for this channel. Declaration public AdcController Controller { get; } Property Value Type Description AdcController The ADC controller. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source ReadRatio() Reads the value as a percentage of the max value possible for this controller. Declaration public double ReadRatio() Returns Type Description Double The value as percentage of the max value. | Improve this Doc View Source ReadValue() Reads the digital representation of the analog value from the ADC. Declaration public int ReadValue() Returns Type Description Int32 The digital value. Implements IDisposable"
  },
  "api/Windows.Devices.Adc.AdcChannelMode.html": {
    "href": "api/Windows.Devices.Adc.AdcChannelMode.html",
    "title": "Enum AdcChannelMode | nanoFramework Documentation",
    "keywords": "Enum AdcChannelMode Describes the channel modes that the ADC controller can use for input. Namespace : Windows.Devices.Adc Assembly : Windows.Devices.Adc.dll Syntax public enum AdcChannelMode Fields Name Description Differential Difference between two pins. SingleEnded Simple value of a particular pin."
  },
  "api/Windows.Devices.Adc.AdcController.html": {
    "href": "api/Windows.Devices.Adc.AdcController.html",
    "title": "Class AdcController | nanoFramework Documentation",
    "keywords": "Class AdcController Represents an ADC controller on the system Inheritance Object AdcController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Adc Assembly : Windows.Devices.Adc.dll Syntax public sealed class AdcController : IAdcController Properties | Improve this Doc View Source ChannelCount The number of channels available on the ADC controller. Declaration public int ChannelCount { get; } Property Value Type Description Int32 Number of channels. | Improve this Doc View Source ChannelMode Gets or sets the channel mode for the ADC controller. Declaration public AdcChannelMode ChannelMode { get; set; } Property Value Type Description AdcChannelMode The ADC channel mode. | Improve this Doc View Source MaxValue Gets the maximum value that the controller can report. Declaration public int MaxValue { get; } Property Value Type Description Int32 The maximum value. | Improve this Doc View Source MinValue The minimum value the controller can report. Declaration public int MinValue { get; } Property Value Type Description Int32 The minimum value. | Improve this Doc View Source ResolutionInBits Gets the resolution of the controller as number of bits it has. For example, if we have a 10-bit ADC, that means it can detect 1024 (2^10) discrete levels. Declaration public int ResolutionInBits { get; } Property Value Type Description Int32 The number of bits the ADC controller has. Methods | Improve this Doc View Source GetDefault() Gets the default ADC controller on the system. Declaration public static AdcController GetDefault() Returns Type Description AdcController The default ADC controller on the system, or null if the system has no ADC controller. GetDeviceSelector() Retrieves an string of all the ADC controllers on the system. Declaration public static string GetDeviceSelector() Returns Type Description String | Improve this Doc View Source IsChannelModeSupported(AdcChannelMode) Verifies that the specified channel mode is supported by the controller. Declaration public bool IsChannelModeSupported(AdcChannelMode channelMode) Parameters Type Name Description AdcChannelMode channelMode The channel mode. Returns Type Description Boolean True if the specified channel mode is supported, otherwise false. | Improve this Doc View Source OpenChannel(Int32) Opens a connection to the specified ADC channel. Declaration public AdcChannel OpenChannel(int channelNumber) Parameters Type Name Description Int32 channelNumber The channel to connect to. Returns Type Description AdcChannel The ADC channel."
  },
  "api/Windows.Devices.Adc.html": {
    "href": "api/Windows.Devices.Adc.html",
    "title": "Namespace Windows.Devices.Adc | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.Adc Classes AdcChannel Represents a single ADC channel. AdcController Represents an ADC controller on the system Enums AdcChannelMode Describes the channel modes that the ADC controller can use for input."
  },
  "api/Windows.Devices.Gpio.GpioChangeCount.html": {
    "href": "api/Windows.Devices.Gpio.GpioChangeCount.html",
    "title": "Struct GpioChangeCount | nanoFramework Documentation",
    "keywords": "Struct GpioChangeCount Represents a near-simultaneous sampling of the number of times a pin has changed value, and the time at which this count was sampled. This structure can be used to determine the number of pin value changes over a period of time. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public struct GpioChangeCount Fields | Improve this Doc View Source Count The number of times the transition of polarity specified by GpioChangeCounter.Polarity occured on the pin. Declaration public ulong Count Field Value Type Description UInt64 | Improve this Doc View Source RelativeTime The time at which this count was sampled. The time is sampled close to (but not simultaneously with) the count. This timestamp can be used to determine the elapsed time between two GpioChangeCount records. It does not correspond to any absolute or system time. Declaration public TimeSpan RelativeTime Field Value Type Description TimeSpan"
  },
  "api/Windows.Devices.Gpio.GpioChangeCounter.html": {
    "href": "api/Windows.Devices.Gpio.GpioChangeCounter.html",
    "title": "Class GpioChangeCounter | nanoFramework Documentation",
    "keywords": "Class GpioChangeCounter Counts changes of a specified polarity on a general-purpose I/O (GPIO) pin. Inheritance Object GpioChangeCounter Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public sealed class GpioChangeCounter : IDisposable Remarks When the pin is an input, interrupts are used to detect pin changes unless the MCU supports a counter in hardware. Changes of the pin are enabled for the specified polarity, and the count is incremented when a change occurs. When the pin is an output, the count will increment whenever the specified transition occurs on the pin. For example, if the pin is configured as an output and counting is enabled for rising edges, writing a 0 and then a 1 will cause the count to be incremented. Constructors | Improve this Doc View Source GpioChangeCounter(GpioPin) Initializes a new instance of the GpioChangeCounter class associated with the specified pin. Only a single GpioChangeCounter may be associated with a pin at any given time. Declaration public GpioChangeCounter(GpioPin pin) Parameters Type Name Description GpioPin pin The pin on which to count changes. This pin must have been opened in Exclusive mode, and cannot be associated with another GpioChangeCounter. Remarks The following exceptions can be thrown by this method: E_INVALIDARG : TThe pin is already associated with a change counter.That change counter must be disposed before the pin can be associated with a new change counter. E_ACCESSDENIED : The pin is not opened in Exclusive mode. Properties | Improve this Doc View Source IsStarted Gets whether pin change counting is currently active. Declaration public bool IsStarted { get; } Property Value Type Description Boolean TRUE if this pin change counting is active and FALSE otherwise. | Improve this Doc View Source Polarity Gets or sets the polarity of transitions that will be counted. The polarity may only be changed when pin counting is not started. Declaration public GpioChangePolarity Polarity { get; set; } Property Value Type Description GpioChangePolarity Remarks The default polarity value is Falling. See GpioChangePolarity for more information on polarity values. Counting a single edge can be considerably more efficient than counting both edges. The following exceptions can be thrown when setting the polarity: E_INVALID_OPERATION :Change counting is currently active. Polarity can only be set before calling Start() or after calling Stop(). Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Read() Reads the current count of polarity changes. Before counting has been started, this will return 0. Declaration public GpioChangeCount Read() Returns Type Description GpioChangeCount A GpioChangeCount structure containing a count and an associated timestamp. Remarks The following exception can be thrown by this method: E_OBJECT_DISPOSED : The change counter or the associated pin has been disposed. | Improve this Doc View Source Reset() Resets the count to 0 and returns the previous count. Declaration public GpioChangeCount Reset() Returns Type Description GpioChangeCount A GpioChangeCount structure containing a count and an associated timestamp. Remarks The following exception can be thrown by this method: E_OBJECT_DISPOSED : The change counter or the associated pin has been disposed. | Improve this Doc View Source Start() Declaration public void Start() | Improve this Doc View Source Stop() Stop counting changes in pin polarity. This method may only be called when change counting is currently active. Declaration public void Stop() Remarks Calling Stop() may enable or reconfigure interrupts for the pin. The following exceptions can be thrown by this method: E_INVALID_OPERATION : Change counting has not been started. E_OBJECT_DISPOSED : The change counter or the associated pin has been disposed. Implements IDisposable"
  },
  "api/Windows.Devices.Gpio.GpioChangePolarity.html": {
    "href": "api/Windows.Devices.Gpio.GpioChangePolarity.html",
    "title": "Enum GpioChangePolarity | nanoFramework Documentation",
    "keywords": "Enum GpioChangePolarity Represents the polarity of changes that are relevant to the associated action. Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioChangePolarity Fields Name Description Both Transitions from both low to high and high to low should trigger the associated action. Falling Transitions from high to low should trigger the associated action. Rising Transitions from low to high should trigger the associated action."
  },
  "api/Windows.Devices.Gpio.GpioController.html": {
    "href": "api/Windows.Devices.Gpio.GpioController.html",
    "title": "Class GpioController | nanoFramework Documentation",
    "keywords": "Class GpioController Represents the default general-purpose I/O (GPIO) controller for the system. Inheritance Object GpioController Implements IGpioController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public sealed class GpioController : IGpioController Remarks To get a GpioController object, use the GetDefault() method. Properties PinCount Gets the number of pins on the general-purpose I/O (GPIO) controller. Declaration public int PinCount { get; } Property Value Type Description Int32 The number of pins on the GPIO controller. Some pins may not be available in user mode. For information about how the pin numbers correspond to physical pins, see the documentation for your circuit board. Methods | Improve this Doc View Source GetDefault() Gets the default general-purpose I/O (GPIO) controller for the system. Declaration public static GpioController GetDefault() Returns Type Description GpioController The default GPIO controller for the system, or null if the system has no GPIO controller. | Improve this Doc View Source OpenPin(Int32) Opens a connection to the specified general-purpose I/O (GPIO) pin in exclusive mode. Declaration public GpioPin OpenPin(int pinNumber) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. The pin number must be in range available to usermode applications Pin numbers start at 0, and increase to the maximum pin number, which is one less than the value returned by GpioController.PinCount. Which pins are available to usermode depends on the circuit board on which the code is running.For information about how pin numbers correspond to physical pins, see the documentation for your circuit board. Returns Type Description GpioPin The opened GPIO pin. Remarks The following exceptions can be thrown by this method: E_INVALIDARG (0x80070057)An invalid parameter was specified. This error will be returned if the pin number is out of range. Pin numbers start at 0 and increase to the maximum pin number, which is one less than the value returned by PinCount . HRESULT_FROM_WIN32(ERROR_NOT_FOUND) (0x80070490)The pin is not available to usermode applications; it is reserved by the system. See the documentation for your circuit board to find out which pins are available to usermode applications. HRESULT_FROM_WIN32(ERROR_SHARING_VIOLATION) (0x80070020)The pin is currently open in an incompatible sharing mode. For example: The pin is already open in GpioSharingMode.Exclusive mode. The pin is already open in GpioSharingMode.SharedReadOnly mode when you request to open it in GpioSharingMode.Exclusive mode. HRESULT_FROM_WIN32(ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE) (0x80073bde)The pin is currently muxed to a different function; for example I2C, SPI, or UART. Ensure the pin is not in use by another function. HRESULT_FROM_WIN32(ERROR_GEN_FAILURE) (0x8007001f)The GPIO driver returned an error. Ensure that the GPIO driver is running and configured correctly. | Improve this Doc View Source OpenPin(Int32, GpioSharingMode) Opens the specified general-purpose I/O (GPIO) pin in the specified mode. Declaration public GpioPin OpenPin(int pinNumber, GpioSharingMode sharingMode) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. The pin number must be in range available to usermode applications Pin numbers start at 0, and increase to the maximum pin number, which is one less than the value returned by GpioController.PinCount. Which pins are available to usermode depends on the circuit board on which the code is running.For information about how pin numbers correspond to physical pins, see the documentation for your circuit board. GpioSharingMode sharingMode The mode in which you want to open the GPIO pin, which determines whether other connections to the pin can be opened while you have the pin open. Returns Type Description GpioPin The opened GPIO pin. Remarks The following exceptions can be thrown by this method: E_INVALIDARG (0x80070057)An invalid parameter was specified. This error will be returned if the pin number is out of range. Pin numbers start at 0 and increase to the maximum pin number, which is one less than the value returned by PinCount . HRESULT_FROM_WIN32(ERROR_NOT_FOUND) (0x80070490)The pin is not available to usermode applications; it is reserved by the system. See the documentation for your circuit board to find out which pins are available to usermode applications. HRESULT_FROM_WIN32(ERROR_SHARING_VIOLATION) (0x80070020)The pin is currently open in an incompatible sharing mode. For example: The pin is already open in GpioSharingMode.Exclusive mode. The pin is already open in GpioSharingMode.SharedReadOnly mode when you request to open it in GpioSharingMode.Exclusive mode. HRESULT_FROM_WIN32(ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE) (0x80073bde)The pin is currently muxed to a different function; for example I2C, SPI, or UART. Ensure the pin is not in use by another function. HRESULT_FROM_WIN32(ERROR_GEN_FAILURE) (0x8007001f)The GPIO driver returned an error. Ensure that the GPIO driver is running and configured correctly. | Improve this Doc View Source TryOpenPin(Int32, GpioSharingMode, out GpioPin, out GpioOpenStatus) Opens the specified general-purpose I/O (GPIO) pin in the specified mode, and gets a status value that you can use to handle a failure to open the pin programmatically. Declaration public bool TryOpenPin(int pinNumber, GpioSharingMode sharingMode, out GpioPin pin, out GpioOpenStatus openStatus) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. Some pins may not be available in user mode. For information about how the pin numbers correspond to physical pins, see the documentation for your circuit board. GpioSharingMode sharingMode The mode in which you want to open the GPIO pin, which determines whether other connections to the pin can be opened while you have the pin open. GpioPin pin The opened GPIO pin if the return value is true; otherwise null. GpioOpenStatus openStatus An enumeration value that indicates either that the attempt to open the GPIO pin succeeded, or the reason that the attempt to open the GPIO pin failed. Returns Type Description Boolean True if the method successfully opened the pin; otherwise false. If the method returns true, the pin parameter receives an instance of a GpioPin, and the openStatus parameter receives GpioOpenStatus.PinOpened.If the method returns false, the pin parameter is null and the openStatus parameter receives the reason that the operation failed. Explicit Interface Implementations | Improve this Doc View Source IGpioController.OpenPin(Int32) Declaration IGpioPin IGpioController.OpenPin(int pinNumber) Parameters Type Name Description Int32 pinNumber Returns Type Description IGpioPin | Improve this Doc View Source IGpioController.OpenPin(Int32, GpioSharingMode) Declaration IGpioPin IGpioController.OpenPin(int pinNumber, GpioSharingMode sharingMode) Parameters Type Name Description Int32 pinNumber GpioSharingMode sharingMode Returns Type Description IGpioPin | Improve this Doc View Source IGpioController.TryOpenPin(Int32, GpioSharingMode, out IGpioPin, out GpioOpenStatus) Declaration bool IGpioController.TryOpenPin(int pinNumber, GpioSharingMode sharingMode, out IGpioPin pin, out GpioOpenStatus openStatus) Parameters Type Name Description Int32 pinNumber GpioSharingMode sharingMode IGpioPin pin GpioOpenStatus openStatus Returns Type Description Boolean Implements IGpioController"
  },
  "api/Windows.Devices.Gpio.GpioOpenStatus.html": {
    "href": "api/Windows.Devices.Gpio.GpioOpenStatus.html",
    "title": "Enum GpioOpenStatus | nanoFramework Documentation",
    "keywords": "Enum GpioOpenStatus Describes the possible results of opening a pin with the GpioPin.TryOpenPin method. Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioOpenStatus Fields Name Description MuxingConflict The pin is currently opened for a different function, such as I2C, SPI, or UART. Ensure the pin is not in use by another function. PinOpened The GPIO pin was successfully opened. PinUnavailable The pin is reserved by the system and is not available to apps that run in user mode. SharingViolation The pin is currently open in an incompatible sharing mode. For example: The pin is already open in GpioSharingMode.Exclusive mode. The pin is already open in GpioSharingMode.SharedReadOnly mode when you request to open it in GpioSharingMode.Exclusive mode. UnknownError The pin could not be opened."
  },
  "api/Windows.Devices.Gpio.GpioPin.html": {
    "href": "api/Windows.Devices.Gpio.GpioPin.html",
    "title": "Class GpioPin | nanoFramework Documentation",
    "keywords": "Class GpioPin Represents a general-purpose I/O (GPIO) pin. Inheritance Object GpioPin Implements IGpioPin IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public sealed class GpioPin : IGpioPin, IDisposable Properties | Improve this Doc View Source DebounceTimeout Gets or sets the debounce timeout for the general-purpose I/O (GPIO) pin, which is an interval during which changes to the value of the pin are filtered out and do not generate ValueChanged events. Declaration public TimeSpan DebounceTimeout { get; set; } Property Value Type Description TimeSpan The debounce timeout for the GPIO pin, which is an interval during which changes to the value of the pin are filtered out and do not generate ValueChanged events. If the length of this interval is 0, all changes to the value of the pin generate ValueChanged events. | Improve this Doc View Source PinNumber Gets the pin number of the general-purpose I/O (GPIO) pin. Declaration public int PinNumber { get; } Property Value Type Description Int32 The pin number of the GPIO pin. | Improve this Doc View Source SharingMode Gets the sharing mode in which the general-purpose I/O (GPIO) pin is open. Declaration public GpioSharingMode SharingMode { get; } Property Value Type Description GpioSharingMode The sharing mode in which the GPIO pin is open. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetDriveMode() Gets the current drive mode for the general-purpose I/O (GPIO) pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Declaration public GpioPinDriveMode GetDriveMode() Returns Type Description GpioPinDriveMode An enumeration value that indicates the current drive mode for the GPIO pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. | Improve this Doc View Source IsDriveModeSupported(GpioPinDriveMode) Gets whether the general-purpose I/O (GPIO) pin supports the specified drive mode. Declaration public bool IsDriveModeSupported(GpioPinDriveMode driveMode) Parameters Type Name Description GpioPinDriveMode driveMode The drive mode that you want to check for support. Returns Type Description Boolean True if the GPIO pin supports the drive mode that driveMode specifies; otherwise false. If you specify a drive mode for which this method returns false when you call SetDriveMode(GpioPinDriveMode) , SetDriveMode(GpioPinDriveMode) generates an exception. Read() Reads the current value of the general-purpose I/O (GPIO) pin. Declaration public GpioPinValue Read() Returns Type Description GpioPinValue The current value of the GPIO pin. If the pin is configured as an output, this value is the last value written to the pin. | Improve this Doc View Source SetDriveMode(GpioPinDriveMode) Sets the drive mode of the general-purpose I/O (GPIO) pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Declaration public void SetDriveMode(GpioPinDriveMode value) Parameters Type Name Description GpioPinDriveMode value An enumeration value that specifies drive mode to use for the GPIO pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Remarks The following exceptions can be thrown by this method: E_INVALIDARG : The GPIO pin does not support the specified drive mode. E_ACCESSDENIED : The pin is open in shared read-only mode.Close the pin and reopen it in exclusive mode to change the drive mode of the pin. Toggle() Toggles the output of the general purpose I/O (GPIO) pin if the pin is configured as an output. Declaration public void Toggle() Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. | Improve this Doc View Source Write(GpioPinValue) Drives the specified value onto the general purpose I/O (GPIO) pin according to the current drive mode for the pin if the pin is configured as an output, or updates the latched output value for the pin if the pin is configured as an input. Declaration public void Write(GpioPinValue value) Parameters Type Name Description GpioPinValue value The enumeration value to write to the GPIO pin. If the GPIO pin is configured as an output, the method drives the specified value onto the pin according to the current drive mode for the pin. If the GPIO pin is configured as an input, the method updates the latched output value for the pin. The latched output value is driven onto the pin when the configuration for the pin changes to output. Remarks The following exceptions can be thrown by this method: E_ACCESSDENIED : The GPIO pin is open in shared read-only mode. To write to the pin, close the pin and reopen the pin in exclusive mode. Events | Improve this Doc View Source ValueChanged Occurs when the value of the general-purpose I/O (GPIO) pin changes, either because of an external stimulus when the pin is configured as an input, or when a value is written to the pin when the pin in configured as an output. Declaration public event GpioPinValueChangedEventHandler ValueChanged Event Type Type Description GpioPinValueChangedEventHandler Implements IGpioPin IDisposable Extension Methods GpioPinExtensions.SetAlternateFunction(GpioPin, Int32)"
  },
  "api/Windows.Devices.Gpio.GpioPinDriveMode.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinDriveMode.html",
    "title": "Enum GpioPinDriveMode | nanoFramework Documentation",
    "keywords": "Enum GpioPinDriveMode Describes whether a general-purpose I/O (GPIO) pin is configured as an input or an output, and how values are driven onto the pin Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioPinDriveMode Fields Name Description Input Configures the GPIO pin in floating mode, with high impedance. InputPullDown Configures the GPIO pin as high impedance with a pull-down resistor to ground. InputPullUp Configures the GPIO pin as high impedance with a pull-up resistor to the voltage charge connection (VCC). Output Configures the GPIO pin in strong drive mode, with low impedance. OutputOpenDrain Configures the GPIO in open drain mode. OutputOpenDrainPullUp Configures the GPIO pin in open drain mode with resistive pull-up mode. OutputOpenSource Configures the GPIO pin in open collector mode. OutputOpenSourcePullDown Configures the GPIO pin in open collector mode with resistive pull-down mode."
  },
  "api/Windows.Devices.Gpio.GpioPinEdge.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinEdge.html",
    "title": "Enum GpioPinEdge | nanoFramework Documentation",
    "keywords": "Enum GpioPinEdge Describes the possible types of change that can occur to the value of the general-purpose I/O (GPIO) pin for the GpioPin.ValueChanged event. Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioPinEdge Fields Name Description FallingEdge The value of the GPIO pin changed from high to low. RisingEdge The value of the GPIO pin changed from low to high."
  },
  "api/Windows.Devices.Gpio.GpioPinExtensions.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinExtensions.html",
    "title": "Class GpioPinExtensions | nanoFramework Documentation",
    "keywords": "Class GpioPinExtensions nanoFramework extensions for GpioPin . Inheritance Object GpioPinExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public static class GpioPinExtensions Methods | Improve this Doc View Source SetAlternateFunction(GpioPin, Int32) Sets the pin to the specified alternate function. Declaration public static void SetAlternateFunction(this GpioPin pin, int alternateFunction) Parameters Type Name Description GpioPin pin Int32 alternateFunction The value of the alternate function. Remarks This extension is exclusive of nanoFramework and it may not be supported in all platforms. WARNING: Use with caution! There is no validation on the execution of this call and there is the potential for breaking things, so be sure to know what you are doing when using it. Platforms supporting this feature: Cortex-M and ESP32. Platforms not supporting this feature: none."
  },
  "api/Windows.Devices.Gpio.GpioPinValue.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinValue.html",
    "title": "Enum GpioPinValue | nanoFramework Documentation",
    "keywords": "Enum GpioPinValue Describes the possible values for a general-purpose I/O (GPIO) pin. Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioPinValue Fields Name Description High The value of the GPIO pin is high. Low The value of the GPIO pin is low."
  },
  "api/Windows.Devices.Gpio.GpioPinValueChangedEventArgs.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinValueChangedEventArgs.html",
    "title": "Class GpioPinValueChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class GpioPinValueChangedEventArgs Provides data about the ValueChanged event that occurs when the value of the general-purpose I/O (GPIO) pin changes, either because of an external stimulus when the pin is configured as an input, or when a value is written to the pin when the pin in configured as an output. Inheritance Object GpioPinValueChangedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public sealed class GpioPinValueChangedEventArgs Constructors | Improve this Doc View Source GpioPinValueChangedEventArgs(GpioPinEdge) Creats a new instance of the GpioPinValueChangedEventArgs class Declaration public GpioPinValueChangedEventArgs(GpioPinEdge edge) Parameters Type Name Description GpioPinEdge edge An enumeration value that indicates the type of change that occurred to the value of the GPIO pin for the GpioPin.ValueChanged event. Properties | Improve this Doc View Source Edge Gets the type of change that occurred to the value of the general-purpose I/O (GPIO) pin for the ValueChanged event. Declaration public GpioPinEdge Edge { get; } Property Value Type Description GpioPinEdge An enumeration value that indicates the type of change that occurred to the value of the GPIO pin for the GpioPin.ValueChanged event."
  },
  "api/Windows.Devices.Gpio.GpioPinValueChangedEventHandler.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinValueChangedEventHandler.html",
    "title": "Delegate GpioPinValueChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate GpioPinValueChangedEventHandler Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public delegate void GpioPinValueChangedEventHandler(object sender, GpioPinValueChangedEventArgs e); Parameters Type Name Description Object sender GpioPinValueChangedEventArgs e"
  },
  "api/Windows.Devices.Gpio.GpioSharingMode.html": {
    "href": "api/Windows.Devices.Gpio.GpioSharingMode.html",
    "title": "Enum GpioSharingMode | nanoFramework Documentation",
    "keywords": "Enum GpioSharingMode Describes the modes in which you can open a general-purpose I/O (GPIO) pin. These modes determine whether other connections to the GPIO pin can be opened while you have the pin open. Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioSharingMode Fields Name Description Exclusive Opens the GPIO pin exclusively, so that no other connection to the pin can be opened. SharedReadOnly Opens the GPIO pin as shared, so that other connections in SharedReadOnly mode to the pin can be opened. You can only perform operations that do not change the state of the GPIO pin in shared mode. Operations that you can perform on the GPIO pin in shared mode include: Calling the GpioPin.Read method. Calling the GpioPin.GetDriveMode method. Getting the values of properties, such as GpioPin.PinNumber and GpioPin.DebounceTimeout. Registering an event handler for the GpioPin.ValueChanged event."
  },
  "api/Windows.Devices.Gpio.html": {
    "href": "api/Windows.Devices.Gpio.html",
    "title": "Namespace Windows.Devices.Gpio | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.Gpio Classes GpioChangeCounter Counts changes of a specified polarity on a general-purpose I/O (GPIO) pin. GpioController Represents the default general-purpose I/O (GPIO) controller for the system. GpioPin Represents a general-purpose I/O (GPIO) pin. GpioPinExtensions nanoFramework extensions for GpioPin . GpioPinValueChangedEventArgs Provides data about the ValueChanged event that occurs when the value of the general-purpose I/O (GPIO) pin changes, either because of an external stimulus when the pin is configured as an input, or when a value is written to the pin when the pin in configured as an output. Structs GpioChangeCount Represents a near-simultaneous sampling of the number of times a pin has changed value, and the time at which this count was sampled. This structure can be used to determine the number of pin value changes over a period of time. Interfaces IGpioController IGpioPin Enums GpioChangePolarity Represents the polarity of changes that are relevant to the associated action. GpioOpenStatus Describes the possible results of opening a pin with the GpioPin.TryOpenPin method. GpioPinDriveMode Describes whether a general-purpose I/O (GPIO) pin is configured as an input or an output, and how values are driven onto the pin GpioPinEdge Describes the possible types of change that can occur to the value of the general-purpose I/O (GPIO) pin for the GpioPin.ValueChanged event. GpioPinValue Describes the possible values for a general-purpose I/O (GPIO) pin. GpioSharingMode Describes the modes in which you can open a general-purpose I/O (GPIO) pin. These modes determine whether other connections to the GPIO pin can be opened while you have the pin open. Delegates GpioPinValueChangedEventHandler"
  },
  "api/Windows.Devices.Gpio.IGpioController.html": {
    "href": "api/Windows.Devices.Gpio.IGpioController.html",
    "title": "Interface IGpioController | nanoFramework Documentation",
    "keywords": "Interface IGpioController Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public interface IGpioController Properties | Improve this Doc View Source PinCount Gets the number of pins on the general-purpose I/O (GPIO) controller. Declaration int PinCount { get; } Property Value Type Description Int32 The number of pins on the GPIO controller. Some pins may not be available in user mode. For information about how the pin numbers correspond to physical pins, see the documentation for your circuit board. Methods | Improve this Doc View Source OpenPin(Int32) Opens a connection to the specified general-purpose I/O (GPIO) pin in exclusive mode. Declaration IGpioPin OpenPin(int pinNumber) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. The pin number must be in range available to usermode applications Pin numbers start at 0, and increase to the maximum pin number, which is one less than the value returned by GpioController.PinCount. Which pins are available to usermode depends on the circuit board on which the code is running.For information about how pin numbers correspond to physical pins, see the documentation for your circuit board. Returns Type Description IGpioPin An interface to the opened GPIO pin. | Improve this Doc View Source OpenPin(Int32, GpioSharingMode) Opens a connection to the specified general-purpose I/O (GPIO) pin in exclusive mode. Declaration IGpioPin OpenPin(int pinNumber, GpioSharingMode sharingMode) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. The pin number must be in range available to usermode applications Pin numbers start at 0, and increase to the maximum pin number, which is one less than the value returned by GpioController.PinCount. Which pins are available to usermode depends on the circuit board on which the code is running.For information about how pin numbers correspond to physical pins, see the documentation for your circuit board. GpioSharingMode sharingMode The mode in which you want to open the GPIO pin, which determines whether other connections to the pin can be opened while you have the pin open. Returns Type Description IGpioPin An interface to the opened GPIO pin. | Improve this Doc View Source TryOpenPin(Int32, GpioSharingMode, out IGpioPin, out GpioOpenStatus) Opens the specified general-purpose I/O (GPIO) pin in the specified mode, and gets a status value that you can use to handle a failure to open the pin programmatically. Declaration bool TryOpenPin(int pinNumber, GpioSharingMode sharingMode, out IGpioPin pin, out GpioOpenStatus openStatus) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. Some pins may not be available in user mode. For information about how the pin numbers correspond to physical pins, see the documentation for your circuit board. GpioSharingMode sharingMode The mode in which you want to open the GPIO pin, which determines whether other connections to the pin can be opened while you have the pin open. IGpioPin pin The opened GPIO pin if the return value is true; otherwise null. GpioOpenStatus openStatus An enumeration value that indicates either that the attempt to open the GPIO pin succeeded, or the reason that the attempt to open the GPIO pin failed. Returns Type Description Boolean True if the method successfully opened the pin; otherwise false. If the method returns true, the pin parameter receives an instance of a GpioPin, and the openStatus parameter receives GpioOpenStatus.PinOpened.If the method returns false, the pin parameter is null and the openStatus parameter receives the reason that the operation failed."
  },
  "api/Windows.Devices.Gpio.IGpioPin.html": {
    "href": "api/Windows.Devices.Gpio.IGpioPin.html",
    "title": "Interface IGpioPin | nanoFramework Documentation",
    "keywords": "Interface IGpioPin Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public interface IGpioPin Properties | Improve this Doc View Source DebounceTimeout Gets or sets the debounce timeout for the general-purpose I/O (GPIO) pin, which is an interval during which changes to the value of the pin are filtered out and do not generate ValueChanged events. Declaration TimeSpan DebounceTimeout { get; set; } Property Value Type Description TimeSpan The debounce timeout for the GPIO pin, which is an interval during which changes to the value of the pin are filtered out and do not generate ValueChanged events. If the length of this interval is 0, all changes to the value of the pin generate ValueChanged events. | Improve this Doc View Source PinNumber Gets the pin number of the general-purpose I/O (GPIO) pin. Declaration int PinNumber { get; } Property Value Type Description Int32 The pin number of the GPIO pin. | Improve this Doc View Source SharingMode Gets the sharing mode in which the general-purpose I/O (GPIO) pin is open. Declaration GpioSharingMode SharingMode { get; } Property Value Type Description GpioSharingMode The sharing mode in which the GPIO pin is open. Methods | Improve this Doc View Source GetDriveMode() Gets the current drive mode for the general-purpose I/O (GPIO) pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Declaration GpioPinDriveMode GetDriveMode() Returns Type Description GpioPinDriveMode An enumeration value that indicates the current drive mode for the GPIO pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. | Improve this Doc View Source IsDriveModeSupported(GpioPinDriveMode) Gets whether the general-purpose I/O (GPIO) pin supports the specified drive mode. Declaration bool IsDriveModeSupported(GpioPinDriveMode driveMode) Parameters Type Name Description GpioPinDriveMode driveMode The drive mode that you want to check for support. Returns Type Description Boolean True if the GPIO pin supports the drive mode that driveMode specifies; otherwise false. If you specify a drive mode for which this method returns false when you call SetDriveMode(GpioPinDriveMode) , SetDriveMode(GpioPinDriveMode) generates an exception. | Improve this Doc View Source Read() Reads the current value of the general-purpose I/O (GPIO) pin. Declaration GpioPinValue Read() Returns Type Description GpioPinValue The current value of the GPIO pin. If the pin is configured as an output, this value is the last value written to the pin. | Improve this Doc View Source SetDriveMode(GpioPinDriveMode) Sets the drive mode of the general-purpose I/O (GPIO) pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Declaration void SetDriveMode(GpioPinDriveMode value) Parameters Type Name Description GpioPinDriveMode value An enumeration value that specifies drive mode to use for the GPIO pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Remarks The following exceptions can be thrown by this method: E_INVALIDARG : The GPIO pin does not support the specified drive mode. E_ACCESSDENIED : The pin is open in shared read-only mode. Close the pin and reopen it in exclusive mode to change the drive mode of the pin. | Improve this Doc View Source Write(GpioPinValue) Drives the specified value onto the general purpose I/O (GPIO) pin according to the current drive mode for the pin if the pin is configured as an output, or updates the latched output value for the pin if the pin is configured as an input. Declaration void Write(GpioPinValue value) Parameters Type Name Description GpioPinValue value The enumeration value to write to the GPIO pin. If the GPIO pin is configured as an output, the method drives the specified value onto the pin according to the current drive mode for the pin. If the GPIO pin is configured as an input, the method updates the latched output value for the pin. The latched output value is driven onto the pin when the configuration for the pin changes to output. Remarks The following exceptions can be thrown by this method: E_ACCESSDENIED : The GPIO pin is open in shared read-only mode. To write to the pin, close the pin and reopen the pin in exclusive mode. Events | Improve this Doc View Source ValueChanged Occurs when the value of the general-purpose I/O (GPIO) pin changes, either because of an external stimulus when the pin is configured as an input, or when a value is written to the pin when the pin in configured as an output. Declaration event GpioPinValueChangedEventHandler ValueChanged Event Type Type Description GpioPinValueChangedEventHandler"
  },
  "api/Windows.Devices.I2c.html": {
    "href": "api/Windows.Devices.I2c.html",
    "title": "Namespace Windows.Devices.I2c | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.I2c Classes I2cConnectionSettings Represents the connection settings you want to use for an inter-integrated circuit (I2C) device. I2cController Represents the I2C controller for the system. I2cDevice Represents a communications channel to a device on an inter-integrated circuit (I2C) bus. I2cDeviceAlreadyInUseException Exception thrown when a check in driver's constructor finds a device that already exists with the same settings (I2C bus AND slave address) Structs I2cTransferResult Provides information about whether the data transfers that the ReadPartial, WritePartial, or WriteReadPartial method performed succeeded, and the actual number of bytes the method transferred. Interfaces II2cDeviceStatics Provides ways to open a communications channel to a device on an inter-integrated circuit (I2C) bus. Enums I2cBusSpeed Describes the bus speeds that are available for connecting to an inter-integrated circuit (I2C) device. The bus speed is the frequency at which to clock the I2C bus when accessing the device. I2cSharingMode Describes the modes in which you can connect to an inter-integrated circuit (I2C) bus address. These modes determine whether other connections to the I2C bus address can be opened while you are connected to the I2C bus address. I2cTransferStatus Describes whether the data transfers that the ReadPartial, WritePartial, or WriteReadPartial method performed succeeded, or provides the reason that the transfers did not succeed."
  },
  "api/Windows.Devices.I2c.I2cBusSpeed.html": {
    "href": "api/Windows.Devices.I2c.I2cBusSpeed.html",
    "title": "Enum I2cBusSpeed | nanoFramework Documentation",
    "keywords": "Enum I2cBusSpeed Describes the bus speeds that are available for connecting to an inter-integrated circuit (I2C) device. The bus speed is the frequency at which to clock the I2C bus when accessing the device. Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public enum I2cBusSpeed Fields Name Description FastMode A fast speed of 400 kHz. StandardMode The standard speed of 100 kilohertz (kHz). This speed is the default."
  },
  "api/Windows.Devices.I2c.I2cConnectionSettings.html": {
    "href": "api/Windows.Devices.I2c.I2cConnectionSettings.html",
    "title": "Class I2cConnectionSettings | nanoFramework Documentation",
    "keywords": "Class I2cConnectionSettings Represents the connection settings you want to use for an inter-integrated circuit (I2C) device. Inheritance Object I2cConnectionSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public sealed class I2cConnectionSettings Constructors | Improve this Doc View Source I2cConnectionSettings(Int32) Creates and initializes a new instance of the I2cConnectionSettings class for inter-integrated circuit (I2C) device with specified bus address, using the default settings of the standard mode for the bus speed and exclusive sharing mode. Declaration public I2cConnectionSettings(int slaveAddress) Parameters Type Name Description Int32 slaveAddress The bus address of the inter-integrated circuit (I2C) device to which the settings of the I2cConnectionSettings should apply. Only 7-bit addressing is supported, so the range of values that are valid is from 8 to 119 (that's 0x08 and 0x77). Properties | Improve this Doc View Source BusSpeed Gets or sets the bus speed to use for connecting to an inter-integrated circuit (I2C) device. The bus speed is the frequency at which to clock the I2C bus when accessing the device. Declaration public I2cBusSpeed BusSpeed { get; set; } Property Value Type Description I2cBusSpeed The bus speed to use for connecting to anI2C device. | Improve this Doc View Source SharingMode Gets or sets the sharing mode to use to connect to the inter-integrated circuit (I2C) bus address. This mode determines whether other connections to the I2C bus address can be opened while you are connect to the I2C bus address. Declaration public I2cSharingMode SharingMode { get; set; } Property Value Type Description I2cSharingMode The sharing mode to use to connect to the I2C bus address. | Improve this Doc View Source SlaveAddress Gets or sets the bus address of the inter-integrated circuit (I2C) device. Declaration public int SlaveAddress { get; set; } Property Value Type Description Int32 The bus address of the I2C device. Only 7-bit addressing is supported, so the range of values that are valid is from 8 to 119 (that's 0x08 and 0x77)."
  },
  "api/Windows.Devices.I2c.I2cController.html": {
    "href": "api/Windows.Devices.I2c.I2cController.html",
    "title": "Class I2cController | nanoFramework Documentation",
    "keywords": "Class I2cController Represents the I2C controller for the system. Inheritance Object I2cController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public sealed class I2cController Methods | Improve this Doc View Source GetDefault() Gets the default I2C controller on the system. Declaration public static I2cController GetDefault() Returns Type Description I2cController The default I2C controller on the system, or null if the system has no I2C controller. | Improve this Doc View Source GetDevice(I2cConnectionSettings) Gets the I2C device with the specified settings. Declaration public I2cDevice GetDevice(I2cConnectionSettings settings) Parameters Type Name Description I2cConnectionSettings settings Returns Type Description I2cDevice The desired connection settings."
  },
  "api/Windows.Devices.I2c.I2cDevice.html": {
    "href": "api/Windows.Devices.I2c.I2cDevice.html",
    "title": "Class I2cDevice | nanoFramework Documentation",
    "keywords": "Class I2cDevice Represents a communications channel to a device on an inter-integrated circuit (I2C) bus. Inheritance Object I2cDevice Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public sealed class I2cDevice : IDisposable Properties | Improve this Doc View Source ConnectionSettings Gets the connection settings used for communication with the inter-integrated circuit (I2C) device. Declaration public I2cConnectionSettings ConnectionSettings { get; } Property Value Type Description I2cConnectionSettings The connection settings used for communication with the inter-integrated circuit (I2C) device. | Improve this Doc View Source DeviceId Gets the plug and play device identifier of the inter-integrated circuit (I2C) bus controller for the device. Declaration public string DeviceId { get; } Property Value Type Description String The plug and play device identifier of the inter-integrated circuit (I2C) bus controller for the device. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FromId(String, I2cConnectionSettings) Retrieves an I2cDevice object for the inter-integrated circuit (I2C) bus controller that has the specified plug and play device identifier, using the specified connection settings. Declaration public static I2cDevice FromId(string i2cBus, I2cConnectionSettings settings) Parameters Type Name Description String i2cBus The plug and play device identifier of the I2C bus controller for which you want to create an I2cDevice object. I2cConnectionSettings settings The connection settings to use for communication with the I2C bus controller that deviceId specifies. Returns Type Description I2cDevice An operation that returns the I2cDevice object. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: FromIdAsync. Exceptions Type Condition I2cDeviceAlreadyInUseException T | Improve this Doc View Source GetDeviceSelector() Retrieves an Advanced Query Syntax (AQS) string for all of the inter-integrated circuit (I2C) bus controllers on the system. You can use this string with the DeviceInformation.FindAll method to get DeviceInformation objects for those bus controllers. Declaration public static string GetDeviceSelector() Returns Type Description String An AQS string for all of the I2C bus controllers on the system, which you can use with the DeviceInformation.FindAllAsync method to get DeviceInformation objects for those bus controllers. | Improve this Doc View Source GetDeviceSelector(String) Retrieves an Advanced Query Syntax (AQS) string for the inter-integrated circuit (I2C) bus that has the specified friendly name. You can use this string with the DeviceInformation.FindAll method to get a DeviceInformation object for that bus. Declaration public static string GetDeviceSelector(string friendlyName) Parameters Type Name Description String friendlyName A friendly name for the particular I2C bus on a particular hardware platform for which you want to get the AQS string. Returns Type Description String An AQS string for the I2C bus that friendlyName specifies, which you can use with the DeviceInformation.FindAllAsync method to get a DeviceInformation object for that bus. | Improve this Doc View Source Read(Byte[]) Reads data from the inter-integrated circuit (I2C) bus on which the device is connected into the specified buffer. Declaration public void Read(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer to which you want to read the data from the I2C bus. The length of the buffer determines how much data to request from the device. | Improve this Doc View Source ReadPartial(Byte[]) Reads data from the inter-integrated circuit (I2C) bus on which the device is connected into the specified buffer, and returns information about the success of the operation that you can use for error handling. Declaration public I2cTransferResult ReadPartial(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer to which you want to read the data from the I2C bus. The length of the buffer determines how much data to request from the device. Returns Type Description I2cTransferResult A structure that contains information about the success of the read operation and the actual number of bytes that the operation read into the buffer. | Improve this Doc View Source Write(Byte[]) Writes data to the inter-integrated circuit (I2C) bus on which the device is connected, based on the bus address specified in the I2cConnectionSetting s object that you used to create the I2cDevice object. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer A buffer that contains the data that you want to write to the I2C device. This data should not include the bus address. | Improve this Doc View Source WritePartial(Byte[]) Writes data to the inter-integrated circuit (I2C) bus on which the device is connected, and returns information about the success of the operation that you can use for error handling. Declaration public I2cTransferResult WritePartial(byte[] buffer) Parameters Type Name Description Byte [] buffer A buffer that contains the data that you want to write to the I2C device. This data should not include the bus address. Returns Type Description I2cTransferResult A structure that contains information about the success of the write operation and the actual number of bytes that the operation wrote into the buffer. | Improve this Doc View Source WriteRead(Byte[], Byte[]) Performs an atomic operation to write data to and then read data from the inter-integrated circuit (I2C) bus on which the device is connected, and sends a restart condition between the write and read operations. Declaration public void WriteRead(byte[] writeBuffer, byte[] readBuffer) Parameters Type Name Description Byte [] writeBuffer A buffer that contains the data that you want to write to the I2C device. This data should not include the bus address. Byte [] readBuffer The buffer to which you want to read the data from the I2C bus. The length of the buffer determines how much data to request from the device. | Improve this Doc View Source WriteReadPartial(Byte[], Byte[]) Performs an atomic operation to write data to and then read data from the inter-integrated circuit (I2C) bus on which the device is connected, and returns information about the success of the operation that you can use for error handling. Declaration public I2cTransferResult WriteReadPartial(byte[] writeBuffer, byte[] readBuffer) Parameters Type Name Description Byte [] writeBuffer A buffer that contains the data that you want to write to the I2C device. This data should not include the bus address. Byte [] readBuffer The buffer to which you want to read the data from the I2C bus. The length of the buffer determines how much data to request from the device. Returns Type Description I2cTransferResult A structure that contains information about whether both the read and write parts of the operation succeeded and the sum of the actual number of bytes that the operation wrote and the actual number of bytes that the operation read. Implements IDisposable"
  },
  "api/Windows.Devices.I2c.I2cDeviceAlreadyInUseException.html": {
    "href": "api/Windows.Devices.I2c.I2cDeviceAlreadyInUseException.html",
    "title": "Class I2cDeviceAlreadyInUseException | nanoFramework Documentation",
    "keywords": "Class I2cDeviceAlreadyInUseException Exception thrown when a check in driver's constructor finds a device that already exists with the same settings (I2C bus AND slave address) Inheritance Object Exception I2cDeviceAlreadyInUseException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax [Serializable] public class I2cDeviceAlreadyInUseException : Exception Methods | Improve this Doc View Source ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Exception.ToString()"
  },
  "api/Windows.Devices.I2c.I2cSharingMode.html": {
    "href": "api/Windows.Devices.I2c.I2cSharingMode.html",
    "title": "Enum I2cSharingMode | nanoFramework Documentation",
    "keywords": "Enum I2cSharingMode Describes the modes in which you can connect to an inter-integrated circuit (I2C) bus address. These modes determine whether other connections to the I2C bus address can be opened while you are connected to the I2C bus address. Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public enum I2cSharingMode Fields Name Description Exclusive Connects to the I2C bus address exclusively, so that no other connection to the I2C bus address can be made while you remain connected. This mode is the default mode. Shared Connects to the I2C bus address in shared mode, so that other connections to the I2C bus address can be made while you remain connected. You can perform all operations on shared connections, but use such connections with care. When multiple client apps change the global state of the I2C device, race conditions can result. An example use case for using a shared connection is a sensor that obtains readings without changing the state of the device."
  },
  "api/Windows.Devices.I2c.I2cTransferResult.html": {
    "href": "api/Windows.Devices.I2c.I2cTransferResult.html",
    "title": "Struct I2cTransferResult | nanoFramework Documentation",
    "keywords": "Struct I2cTransferResult Provides information about whether the data transfers that the ReadPartial, WritePartial, or WriteReadPartial method performed succeeded, and the actual number of bytes the method transferred. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public struct I2cTransferResult Properties | Improve this Doc View Source BytesTransferred The actual number of bytes that the operation actually transferred. The following table describes what this value represents for each method. Declaration public uint BytesTransferred { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Status An enumeration value that indicates if the read or write operation transferred the full number of bytes that the method requested, or the reason that the full transfer did not succeed. For WriteReadPartial, the value indicates whether the data for both the write and the read operations was entirely transferred. Declaration public I2cTransferStatus Status { get; set; } Property Value Type Description I2cTransferStatus"
  },
  "api/Windows.Devices.I2c.I2cTransferStatus.html": {
    "href": "api/Windows.Devices.I2c.I2cTransferStatus.html",
    "title": "Enum I2cTransferStatus | nanoFramework Documentation",
    "keywords": "Enum I2cTransferStatus Describes whether the data transfers that the ReadPartial, WritePartial, or WriteReadPartial method performed succeeded, or provides the reason that the transfers did not succeed. Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public enum I2cTransferStatus Fields Name Description ClockStretchTimeout The transfer failed due to the clock being stretched for too long. Ensure the clock line is not being held low. FullTransfer The data was entirely transferred. For WriteReadPartial, the data for both the write and the read operations was entirely transferred. For this status code, the value of the I2cTransferResult.BytesTransferred member that the method returns is the same as the size of the buffer you specified when you called the method, or is equal to the sum of the sizes of two buffers that you specified for WriteReadPartial. PartialTransfer The I2C device negatively acknowledged the data transfer before all of the data was transferred. For this status code, the value of the I2cTransferResult.BytesTransferred member that the method returns is the number of bytes actually transferred. For WriteReadPartial, the value is the sum of the number of bytes that the operation wrote and the number of bytes that the operation read. SlaveAddressNotAcknowledged The bus address was not acknowledged. For this status code, the value of the I2cTransferResult.BytesTransferred member that the method returns of the method is 0. UnknownError The transfer failed for an unknown reason."
  },
  "api/Windows.Devices.I2c.II2cDeviceStatics.html": {
    "href": "api/Windows.Devices.I2c.II2cDeviceStatics.html",
    "title": "Interface II2cDeviceStatics | nanoFramework Documentation",
    "keywords": "Interface II2cDeviceStatics Provides ways to open a communications channel to a device on an inter-integrated circuit (I2C) bus. Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public interface II2cDeviceStatics Methods | Improve this Doc View Source FromId(String, I2cConnectionSettings) Retrieves an I2cDevice object asynchronously for the inter-integrated circuit (I2C) bus controller that has the specified plug and play device identifier, using the specified connection settings. Declaration I2cDevice FromId(string deviceId, I2cConnectionSettings settings) Parameters Type Name Description String deviceId The plug and play device identifier of the I2C bus controller for which you want to create an I2cDevice object. I2cConnectionSettings settings The connection settings to use for communication with the I2C bus controller that deviceId specifies. Returns Type Description I2cDevice An operation that returns the I2cDevice object. | Improve this Doc View Source GetDeviceSelector() Retrieves an Advanced Query Syntax (AQS) string for all of the inter-integrated circuit (I2C) bus controllers on the system. You can use this string with the DeviceInformation.FindAllAsync method to get DeviceInformation objects for those bus controllers. Declaration string GetDeviceSelector() Returns Type Description String An AQS string for all of the I2C bus controllers on the system, which you can use with the DeviceInformation.FindAll method to get DeviceInformation objects for those bus controllers. | Improve this Doc View Source GetDeviceSelector(String) Retrieves an Advanced Query Syntax (AQS) string for the inter-integrated circuit (I2C) bus that has the specified friendly name. You can use this string with the DeviceInformation.FindAll method to get a DeviceInformation object for that bus. Declaration string GetDeviceSelector(string friendlyName) Parameters Type Name Description String friendlyName A friendly name for the particular I2C bus on a particular hardware platform for which you want to get the AQS string. Returns Type Description String An AQS string for the I2C bus that friendlyName specifies, which you can use with the DeviceInformation.FindAll method to get a DeviceInformation object for that bus."
  },
  "api/Windows.Devices.Pwm.html": {
    "href": "api/Windows.Devices.Pwm.html",
    "title": "Namespace Windows.Devices.Pwm | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.Pwm Classes PwmController Represents a PWM controller connected to the system. PwmPin Represents a single PWM pin on the system. Enums PwmPulsePolarity Describes which polarity the PWM signal should start in."
  },
  "api/Windows.Devices.Pwm.PwmController.html": {
    "href": "api/Windows.Devices.Pwm.PwmController.html",
    "title": "Class PwmController | nanoFramework Documentation",
    "keywords": "Class PwmController Represents a PWM controller connected to the system. Inheritance Object PwmController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Pwm Assembly : Windows.Devices.Pwm.dll Syntax public sealed class PwmController : IPwmController Properties | Improve this Doc View Source ActualFrequency Gets the actual frequency of the PWM. Declaration public double ActualFrequency { get; } Property Value Type Description Double The frequency in Hz. MaxFrequency Gets the maximum frequency offered by the controller. Declaration public double MaxFrequency { get; } Property Value Type Description Double The maximum frequency in Hz. MinFrequency Gets the minimum frequency offered by the controller. Declaration public double MinFrequency { get; } Property Value Type Description Double The minimum frequency in Hz. PinCount Gets the number of pins available on the system. Declaration public int PinCount { get; } Property Value Type Description Int32 The number of pins. Methods | Improve this Doc View Source FromId(String) Initializes a PWM controller instance based on the given DeviceInformation ID. Declaration public static PwmController FromId(string deviceId) Parameters Type Name Description String deviceId The acquired DeviceInformation ID. Returns Type Description PwmController PwmController | Improve this Doc View Source GetDefault() Gets the default PWM controller on the system. Declaration public static PwmController GetDefault() Returns Type Description PwmController The default PWM controller on the system, or null if the system has no PWM controller. GetDeviceSelector() Retrieves an Advanced Query Syntax (AQS) string for all the PWM controllers on the system. You can use this string with the DeviceInformation.FindAllAsync method to get DeviceInformation objects for those controllers. Declaration public static string GetDeviceSelector() Returns Type Description String | Improve this Doc View Source OpenPin(Int32) Opens the pin for use. Declaration public PwmPin OpenPin(int pinNumber) Parameters Type Name Description Int32 pinNumber Which pin to open. Returns Type Description PwmPin The requested pin now available for use. | Improve this Doc View Source SetDesiredFrequency(Double) Sets the PWM frequency. Declaration public double SetDesiredFrequency(double desiredFrequency) Parameters Type Name Description Double desiredFrequency Then value of the desired frequency in Hz. Returns Type Description Double The actual frequency that was set. This will be the closest supported match as determined by the provider."
  },
  "api/Windows.Devices.Pwm.PwmPin.html": {
    "href": "api/Windows.Devices.Pwm.PwmPin.html",
    "title": "Class PwmPin | nanoFramework Documentation",
    "keywords": "Class PwmPin Represents a single PWM pin on the system. Inheritance Object PwmPin Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Pwm Assembly : Windows.Devices.Pwm.dll Syntax public sealed class PwmPin : IPwmPin, IDisposable Properties | Improve this Doc View Source Controller Gets the PWM controller in use by this pin. Declaration public PwmController Controller { get; } Property Value Type Description PwmController The controller. | Improve this Doc View Source IsStarted Gets the started state of the pin. Declaration public bool IsStarted { get; } Property Value Type Description Boolean True if the PWM has started on this pin, otherwise false. | Improve this Doc View Source Polarity Gets or sets the polarity of the pin. Declaration public PwmPulsePolarity Polarity { get; set; } Property Value Type Description PwmPulsePolarity The pin polarity. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetActiveDutyCyclePercentage() Retrieves the duty cycle percentage for this pin. Declaration public double GetActiveDutyCyclePercentage() Returns Type Description Double The duty cycle percentage, between 0.0 and 1.0. | Improve this Doc View Source SetActiveDutyCyclePercentage(Double) Sets the duty cycle percentage for this pin. Declaration public void SetActiveDutyCyclePercentage(double dutyCyclePercentage) Parameters Type Name Description Double dutyCyclePercentage The desired duty cycle percentage, represented as a value between 0.0 and 1.0. | Improve this Doc View Source Start() Starts the PWM on this pin. Declaration public void Start() | Improve this Doc View Source Stop() Stops the PWM on this pin. Declaration public void Stop() Implements IDisposable"
  },
  "api/Windows.Devices.Pwm.PwmPulsePolarity.html": {
    "href": "api/Windows.Devices.Pwm.PwmPulsePolarity.html",
    "title": "Enum PwmPulsePolarity | nanoFramework Documentation",
    "keywords": "Enum PwmPulsePolarity Describes which polarity the PWM signal should start in. Namespace : Windows.Devices.Pwm Assembly : Windows.Devices.Pwm.dll Syntax public enum PwmPulsePolarity Fields Name Description ActiveHigh Configures the PWM signal to start in the active high state. ActiveLow Configures the PWM signal to start in the active low state."
  },
  "api/Windows.Devices.SerialCommunication.ErrorReceivedEventArgs.html": {
    "href": "api/Windows.Devices.SerialCommunication.ErrorReceivedEventArgs.html",
    "title": "Class ErrorReceivedEventArgs | nanoFramework Documentation",
    "keywords": "Class ErrorReceivedEventArgs Represents the object that is passed as a parameter to the event handler that is invoked when error occurs on the serial port. Inheritance Object ErrorReceivedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public sealed class ErrorReceivedEventArgs Remarks ErrorReceivedEventArgs is used to determine the type of error condition. When error occurs on the port, the previously registered ErrorReceived event handler is invoked. That event handler's parameter is a ErrorReceivedEventArgs object. After the event handler is invoked, you can determine the error condition by using the Error property. Properties | Improve this Doc View Source Error Gets the character type received that caused the event on the serial port. Declaration public SerialError Error { get; } Property Value Type Description SerialError One of the values defined in the SerialError enumeration."
  },
  "api/Windows.Devices.SerialCommunication.html": {
    "href": "api/Windows.Devices.SerialCommunication.html",
    "title": "Namespace Windows.Devices.SerialCommunication | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.SerialCommunication Classes ErrorReceivedEventArgs Represents the object that is passed as a parameter to the event handler that is invoked when error occurs on the serial port. PinChangedEventArgs Represents the object that is passed as a parameter to the event handler that is invoked when the state of a signal line changes on the serial port. SerialDataReceivedEventArgs Provides data for the DataReceived event. SerialDevice Represents a serial port. The object provides methods and properties that an app can use to find the port (in the system). Enums SerialData Specifies the type of character that was received on the Windows.Devices.SerialCommunication.SerialDeviceInputStream serial port of a SerialDevice object. SerialError Defines values for error conditions that can occur on the serial port. SerialHandshake Defines values for hardware and software flow control protocols used in serial communication. The values are used by Handshake property on the SerialDevice object. SerialParity Defines values for the parity bit for the serial data transmission. The values are used by the Parity property on the SerialDevice object. SerialPinChange Defines values for types of signal state changes on the serial port. SerialStopBitCount Defines values that indicate the number of stop bits used in a transmission. The values are used by the StopBits property on the SerialDevice object. Delegates SerialDataReceivedEventHandler"
  },
  "api/Windows.Devices.SerialCommunication.PinChangedEventArgs.html": {
    "href": "api/Windows.Devices.SerialCommunication.PinChangedEventArgs.html",
    "title": "Class PinChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class PinChangedEventArgs Represents the object that is passed as a parameter to the event handler that is invoked when the state of a signal line changes on the serial port. Inheritance Object PinChangedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public sealed class PinChangedEventArgs Remarks At times, the state of a signal line can change on the serial port. For example, when the break state is enabled on the serial port causing data transmission to stop. The event is reported by invoking the app-implemented PinChanged event handler. That event handler's parameter is a PinChangedEventArgs object. Inspect the PinChange property to determine the type of signal line. Those values are defined in the SerialPinChange enumeration. Properties | Improve this Doc View Source PinChange Gets the type of signal change that caused the event on the serial port. Declaration public SerialPinChange PinChange { get; } Property Value Type Description SerialPinChange One of the values defined in SerialPinChange enumeration."
  },
  "api/Windows.Devices.SerialCommunication.SerialData.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialData.html",
    "title": "Enum SerialData | nanoFramework Documentation",
    "keywords": "Enum SerialData Specifies the type of character that was received on the Windows.Devices.SerialCommunication.SerialDeviceInputStream serial port of a SerialDevice object. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialData Remarks This enum is specific to nanoFramework. There is no equivalent in the UWP API. Fields Name Description Chars A character was received and placed in the input stream. WatchChar The character to watch was received and placed in the input stream."
  },
  "api/Windows.Devices.SerialCommunication.SerialDataReceivedEventArgs.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialDataReceivedEventArgs.html",
    "title": "Class SerialDataReceivedEventArgs | nanoFramework Documentation",
    "keywords": "Class SerialDataReceivedEventArgs Provides data for the DataReceived event. Inheritance Object SerialDataReceivedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public class SerialDataReceivedEventArgs Remarks This method is specific to nanoFramework. There is no equivalent method in the UWP API. Properties | Improve this Doc View Source EventType Gets or sets the event type. Declaration public SerialData EventType { get; } Property Value Type Description SerialData"
  },
  "api/Windows.Devices.SerialCommunication.SerialDataReceivedEventHandler.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialDataReceivedEventHandler.html",
    "title": "Delegate SerialDataReceivedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate SerialDataReceivedEventHandler Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public delegate void SerialDataReceivedEventHandler(object sender, SerialDataReceivedEventArgs e); Parameters Type Name Description Object sender SerialDataReceivedEventArgs e"
  },
  "api/Windows.Devices.SerialCommunication.SerialDevice.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialDevice.html",
    "title": "Class SerialDevice | nanoFramework Documentation",
    "keywords": "Class SerialDevice Represents a serial port. The object provides methods and properties that an app can use to find the port (in the system). Inheritance Object SerialDevice Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public sealed class SerialDevice : IDisposable Properties | Improve this Doc View Source BaudRate Gets or sets the baud rate. Declaration public uint BaudRate { get; set; } Property Value Type Description UInt32 The baud rate of the serial port. Remarks The property is set on the SerialDevice object that represents the serial port. The baud rate must be supported by the serial port. | Improve this Doc View Source BytesReceived Represents the number of bytes received by the last read operation of the input stream. Declaration public uint BytesReceived { get; } Property Value Type Description UInt32 The number of bytes received by the last read operation of the input stream. BytesToRead Gets the number of bytes of data available in the input stream. Declaration public uint BytesToRead { get; } Property Value Type Description UInt32 The number of bytes of data in the input stream. Remarks This property is specific to nanoFramework. There is no equivalent one in the UWP API. | Improve this Doc View Source DataBits The number of data bits in each character value that is transmitted or received, and does not include parity bits or stop bits. Declaration public ushort DataBits { get; set; } Property Value Type Description UInt16 The number of data bits in each character value that is transmitted or received. Remarks DataBits corresponds to the WordLength member of the SERIAL_LINE_CONTROL structure. | Improve this Doc View Source Handshake Gets or sets the handshaking protocol for flow control. Declaration public SerialHandshake Handshake { get; set; } Property Value Type Description SerialHandshake One of the values defined in SerialHandshake enumeration. | Improve this Doc View Source InputStream Input stream that contains the data received on the serial port. Declaration public IInputStream InputStream { get; } Property Value Type Description IInputStream Input stream that contains the data received. Remarks To access data received on the port, get the input stream from SerialDevice object, and then use the DataReader to read data. | Improve this Doc View Source OutputStream Gets an output stream to which the app can write data to transmit through the serial port. Declaration public IOutputStream OutputStream { get; } Property Value Type Description IOutputStream Remarks To write data, first get the output stream from the SerialDevice object by using OutputStream property and then use the DataWriter object to write the actual buffer. | Improve this Doc View Source Parity Gets or sets the parity bit for error-checking. Declaration public SerialParity Parity { get; set; } Property Value Type Description SerialParity One of the values defined in SerialParity enumeration. Remarks In serial communication, the parity bit is used as an error-checking procedure. In data transmission that uses parity checking, the bit format is 7 data bits-x-1 stop bit, where x is the parity bit. That bit indicates whether the number of 1s in the data byte is even or odd. The parity bit can be E (even), O (odd), M (mark), or S (space). Those values are defined in the SerialParity enumeration. For example, if the format is 7-E-1 and the data bits are 0001000, the parity bit is set to 1 to make sure there are even number of 1s. | Improve this Doc View Source PortName Gets the port name for serial communications. Declaration public string PortName { get; } Property Value Type Description String The communication port name. For example \"COM1\". | Improve this Doc View Source ReadTimeout Gets or sets the time-out value for a read operation. Declaration public TimeSpan ReadTimeout { get; set; } Property Value Type Description TimeSpan The span of time before a time-out occurs when a read operation does not finish. | Improve this Doc View Source StopBits Gets or sets the standard number of stop bits per byte. Declaration public SerialStopBitCount StopBits { get; set; } Property Value Type Description SerialStopBitCount One of the values defined in the SerialStopBitCount enumeration. Remarks In serial communication, a transmission begins with a start bit, followed by 8 bits of data, and ends with a stop bit. The purpose of the stop bit is to separate each unit of data or to indicate that no data is available for transmission. | Improve this Doc View Source WatchChar Sets a character to watch for in the incoming data stream. Declaration public char WatchChar { set; } Property Value Type Description Char Remarks This property is specific to nanoFramework. There is no equivalent in the UWP API. When calling Load(UInt32) in the InputStream the operation will return immediately if this character is received in the incoming data stream. No matter if the requested quantity of bytes hasn't been read. Also if this character is received in the incoming data stream, the DataReceived event is fired with it's SerialData parameter set to WatchChar . | Improve this Doc View Source WriteTimeout Gets or sets the time-out value for a write operation. Declaration public TimeSpan WriteTimeout { get; set; } Property Value Type Description TimeSpan The span of time before a time-out occurs when a write operation does not finish. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FromId(String) Creates a SerialDevice object. Declaration public static SerialDevice FromId(string deviceId) Parameters Type Name Description String deviceId The device instance path of the device. To obtain that value, get the DeviceInformation.Id property value. Returns Type Description SerialDevice Returns an SerialDevice object. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: FromIdAsync. GetDeviceSelector() Gets all the available Serial devices available on the system. Declaration public static string GetDeviceSelector() Returns Type Description String String containing all the serial devices available in the system. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API returns an Advanced Query Syntax (AQS) string. Events | Improve this Doc View Source DataReceived Indicates that data has been received through a SerialDevice object. Declaration public event SerialDataReceivedEventHandler DataReceived Event Type Type Description SerialDataReceivedEventHandler Remarks This event is specific to nanoFramework. There is no equivalent method in the UWP API. Data events can be caused by any of the items in the SerialData enumeration. Because the operating system determines whether to raise this event or not, not all parity errors may be reported. The DataReceived event is also raised if the WatchChar character is received, regardless of the number of bytes available in the InputStream . The DataReceived event is not guaranteed to be raised for every byte received. Use the BytesReceived property or the available bytes property of the InputStream to determine how much data is available to be read from the InputStream . Implements IDisposable"
  },
  "api/Windows.Devices.SerialCommunication.SerialError.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialError.html",
    "title": "Enum SerialError | nanoFramework Documentation",
    "keywords": "Enum SerialError Defines values for error conditions that can occur on the serial port. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialError Fields Name Description BufferOverrun A character-buffer overrun has occurred. The next character is lost. Frame The hardware detected a framing error. ReceiveFull An input buffer overflow has occurred. There is either no room in the input buffer, or a character was received after the end-of-file (EOF) character. ReceiveParity The hardware detected a parity error. TransmitFull The application tried to transmit a character, but the output buffer was full."
  },
  "api/Windows.Devices.SerialCommunication.SerialHandshake.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialHandshake.html",
    "title": "Enum SerialHandshake | nanoFramework Documentation",
    "keywords": "Enum SerialHandshake Defines values for hardware and software flow control protocols used in serial communication. The values are used by Handshake property on the SerialDevice object. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialHandshake Fields Name Description None No protocol is used for the handshake. RequestToSend When the port is receiving data and if the read buffer is full, the Request-to-Send (RTS) line is set to false. When buffer is available, the line is set to true. When the serial port is transmitting data, CTS line is set to false and the port does not send data until there is room in the write buffer. RequestToSendXOnXOff Both RequestToSend and XOnXOff controls are used for flow control. XOnXOff The serial port sends an Xoff control to inform the sender to stop sending data. When ready, the port sends an Xon control to inform he sender that the port is now ready to receive data."
  },
  "api/Windows.Devices.SerialCommunication.SerialParity.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialParity.html",
    "title": "Enum SerialParity | nanoFramework Documentation",
    "keywords": "Enum SerialParity Defines values for the parity bit for the serial data transmission. The values are used by the Parity property on the SerialDevice object. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialParity Fields Name Description Even Sets the parity bit so that the total count of data bits set is an even number. Mark Leaves the parity bit set to 1. None No parity check occurs. Odd Sets the parity bit so that the total count of data bits set is an odd number. Space Leaves the parity bit set to 0."
  },
  "api/Windows.Devices.SerialCommunication.SerialPinChange.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialPinChange.html",
    "title": "Enum SerialPinChange | nanoFramework Documentation",
    "keywords": "Enum SerialPinChange Defines values for types of signal state changes on the serial port. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialPinChange Fields Name Description BreakSignal Change in the break signal state. CarrierDetect Change in the Carrier Detect line for the port. ClearToSend Change in the Clear-to-Send line for the port. DataSetReady Change in the state of the Data Set Ready (DSR) signal. RingIndicator Change in the ring indicator state."
  },
  "api/Windows.Devices.SerialCommunication.SerialStopBitCount.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialStopBitCount.html",
    "title": "Enum SerialStopBitCount | nanoFramework Documentation",
    "keywords": "Enum SerialStopBitCount Defines values that indicate the number of stop bits used in a transmission. The values are used by the StopBits property on the SerialDevice object. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialStopBitCount Fields Name Description One One stop bit is used. OnePointFive 1.5 stop bits are used. Two Two stop bits are used."
  },
  "api/Windows.Devices.Spi.DataBitOrder.html": {
    "href": "api/Windows.Devices.Spi.DataBitOrder.html",
    "title": "Enum DataBitOrder | nanoFramework Documentation",
    "keywords": "Enum DataBitOrder Defines the bit order of the data in the buffer to be transmitted/received to/from the SPI bus. Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public enum DataBitOrder Remarks This enum is specific to nanoFramework. Doesn't have correspondence in the UWP API. Fields Name Description LSB Data is in LSB (least significant bit) order. MSB Data is in MSB (most significant bit) order."
  },
  "api/Windows.Devices.Spi.html": {
    "href": "api/Windows.Devices.Spi.html",
    "title": "Namespace Windows.Devices.Spi | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.Spi Classes SpiBusInfo Represents the info about a SPI bus. SpiConnectionSettings Represents the settings for the connection with a device. SpiController Represents the SPI controller on the system. SpiDevice Represents a device connected through the SPI bus. SpiDeviceAlreadyInUseException Exception thrown when a check in driver's constructor finds a device that already exists with the same settings (SPI bus AND chip select line) Interfaces ISpiDeviceStatics Represents SPI device statistics common to SPI devices. Enums DataBitOrder Defines the bit order of the data in the buffer to be transmitted/received to/from the SPI bus. SpiMode Defines the SPI communication mode. The communication mode defines the clock edge on which the master out line toggles, the master in line samples, and the signal clock's signal steady level (named SCLK). Each mode is defined with a pair of parameters called clock polarity (CPOL) and clock phase (CPHA). SpiSharingMode Defines the sharing mode for the SPI bus."
  },
  "api/Windows.Devices.Spi.ISpiDeviceStatics.html": {
    "href": "api/Windows.Devices.Spi.ISpiDeviceStatics.html",
    "title": "Interface ISpiDeviceStatics | nanoFramework Documentation",
    "keywords": "Interface ISpiDeviceStatics Represents SPI device statistics common to SPI devices. Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public interface ISpiDeviceStatics Methods | Improve this Doc View Source FromId(String, SpiConnectionSettings) Opens a device with the connection settings provided. Declaration SpiDevice FromId(string busId, SpiConnectionSettings settings) Parameters Type Name Description String busId The id of the bus. SpiConnectionSettings settings The connection settings. Returns Type Description SpiDevice The SPI device. | Improve this Doc View Source GetBusInfo(String) Retrieves the info about a certain bus. Declaration SpiBusInfo GetBusInfo(string busId) Parameters Type Name Description String busId The id of the bus. Returns Type Description SpiBusInfo The bus info requested. | Improve this Doc View Source GetDeviceSelector() Gets all the SPI buses found on the system. Declaration string GetDeviceSelector() Returns Type Description String String containing all the buses found on the system. | Improve this Doc View Source GetDeviceSelector(String) Gets all the SPI buses found on the system that match the input parameter. Declaration string GetDeviceSelector(string friendlyName) Parameters Type Name Description String friendlyName Input parameter specifying an identifying name for the desired bus. This usually corresponds to a name on the schematic. Returns Type Description String String containing all the buses that have the input in the name."
  },
  "api/Windows.Devices.Spi.SpiBusInfo.html": {
    "href": "api/Windows.Devices.Spi.SpiBusInfo.html",
    "title": "Class SpiBusInfo | nanoFramework Documentation",
    "keywords": "Class SpiBusInfo Represents the info about a SPI bus. Inheritance Object SpiBusInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public sealed class SpiBusInfo Properties | Improve this Doc View Source ChipSelectLineCount Gets the number of chip select lines available on the bus. Declaration public int ChipSelectLineCount { get; set; } Property Value Type Description Int32 Number of chip select lines. MaxClockFrequency Maximum clock cycle frequency of the bus. Declaration public int MaxClockFrequency { get; } Property Value Type Description Int32 The clock cycle in Hz. MinClockFrequency Minimum clock cycle frequency of the bus. Declaration public int MinClockFrequency { get; } Property Value Type Description Int32 The clock cycle in Hz. | Improve this Doc View Source SupportedDataBitLengths Gets the bit lengths that can be used on the bus for transmitting data. Declaration public int[] SupportedDataBitLengths { get; } Property Value Type Description Int32 [] The supported data lengths."
  },
  "api/Windows.Devices.Spi.SpiConnectionSettings.html": {
    "href": "api/Windows.Devices.Spi.SpiConnectionSettings.html",
    "title": "Class SpiConnectionSettings | nanoFramework Documentation",
    "keywords": "Class SpiConnectionSettings Represents the settings for the connection with a device. Inheritance Object SpiConnectionSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public sealed class SpiConnectionSettings Constructors | Improve this Doc View Source SpiConnectionSettings(Int32) Initializes new instance of SpiConnectionSettings. Declaration public SpiConnectionSettings(int chipSelectLine) Parameters Type Name Description Int32 chipSelectLine The chip select line on which the connection will be made. Properties | Improve this Doc View Source BitOrder Gets or sets the DataBitOrder for the data in the buffers. This setting is only used when the DataBitLength is set to 16. Declaration public DataBitOrder BitOrder { get; set; } Property Value Type Description DataBitOrder The bit order mode. Remarks This field is specific to nanoFramework. Doesn't have correspondence in the UWP API. | Improve this Doc View Source ChipSelectLine Gets or sets the chip select line for the connection to the SPI device. Declaration public int ChipSelectLine { get; set; } Property Value Type Description Int32 The chip select line. | Improve this Doc View Source ClockFrequency Gets or sets the clock frequency for the connection. Declaration public int ClockFrequency { get; set; } Property Value Type Description Int32 Value of the clock frequency in Hz. | Improve this Doc View Source DataBitLength Gets or sets the bit length for data on this connection. Declaration public int DataBitLength { get; set; } Property Value Type Description Int32 The data bit length. | Improve this Doc View Source Mode Gets or sets the SpiMode for this connection. Declaration public SpiMode Mode { get; set; } Property Value Type Description SpiMode The communication mode. | Improve this Doc View Source SharingMode Gets or sets the sharing mode for the SPI connection. Declaration public SpiSharingMode SharingMode { get; set; } Property Value Type Description SpiSharingMode The sharing mode."
  },
  "api/Windows.Devices.Spi.SpiController.html": {
    "href": "api/Windows.Devices.Spi.SpiController.html",
    "title": "Class SpiController | nanoFramework Documentation",
    "keywords": "Class SpiController Represents the SPI controller on the system. Inheritance Object SpiController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public sealed class SpiController Methods | Improve this Doc View Source GetDefault() Gets the default SPI controller on the system. Declaration public static SpiController GetDefault() Returns Type Description SpiController The default SPI controller on the system, or null if the system has no SPI controller. | Improve this Doc View Source GetDevice(SpiConnectionSettings) Gets the SPI device with the specified settings. Declaration public SpiDevice GetDevice(SpiConnectionSettings settings) Parameters Type Name Description SpiConnectionSettings settings The desired connection settings. Returns Type Description SpiDevice The SPI device."
  },
  "api/Windows.Devices.Spi.SpiDevice.html": {
    "href": "api/Windows.Devices.Spi.SpiDevice.html",
    "title": "Class SpiDevice | nanoFramework Documentation",
    "keywords": "Class SpiDevice Represents a device connected through the SPI bus. Inheritance Object SpiDevice Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public sealed class SpiDevice : IDisposable Properties | Improve this Doc View Source ConnectionSettings Gets the connection settings for the device. Declaration public SpiConnectionSettings ConnectionSettings { get; } Property Value Type Description SpiConnectionSettings The connection settings. | Improve this Doc View Source DeviceId Gets the unique ID associated with the device. Declaration public string DeviceId { get; } Property Value Type Description String The ID. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FromId(String, SpiConnectionSettings) Opens a device with the connection settings provided. Declaration public static SpiDevice FromId(string busId, SpiConnectionSettings settings) Parameters Type Name Description String busId The id of the bus. SpiConnectionSettings settings The connection settings. Returns Type Description SpiDevice The SPI device requested. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: FromIdAsync. | Improve this Doc View Source GetBusInfo(String) Retrieves the info about a certain bus. Declaration public static SpiBusInfo GetBusInfo(string busId) Parameters Type Name Description String busId The id of the bus. Returns Type Description SpiBusInfo The bus info requested. | Improve this Doc View Source GetDeviceSelector() Gets all the SPI buses found on the system. Declaration public static string GetDeviceSelector() Returns Type Description String String containing all the buses found on the system. | Improve this Doc View Source GetDeviceSelector(String) Gets all the SPI buses found on the system that match the input parameter. Declaration public static string GetDeviceSelector(string friendlyName) Parameters Type Name Description String friendlyName Input parameter specifying an identifying name for the desired bus. This usually corresponds to a name on the schematic. Returns Type Description String String containing all the buses that have the input in the name. | Improve this Doc View Source Read(Byte[]) Reads from the connected device. Declaration public void Read(byte[] buffer) Parameters Type Name Description Byte [] buffer Array containing data read from the device. | Improve this Doc View Source Read(UInt16[]) Reads from the connected device. Declaration public void Read(ushort[] buffer) Parameters Type Name Description UInt16 [] buffer Array containing data read from the device. | Improve this Doc View Source TransferFullDuplex(Byte[], Byte[]) Transfer data using a full duplex communication system. Full duplex allows both the master and the slave to communicate simultaneously. Declaration public void TransferFullDuplex(byte[] writeBuffer, byte[] readBuffer) Parameters Type Name Description Byte [] writeBuffer Array containing data to write to the device. Byte [] readBuffer Array containing data read from the device. | Improve this Doc View Source TransferFullDuplex(UInt16[], UInt16[]) Transfer data using a full duplex communication system. Full duplex allows both the master and the slave to communicate simultaneously. Declaration public void TransferFullDuplex(ushort[] writeBuffer, ushort[] readBuffer) Parameters Type Name Description UInt16 [] writeBuffer Array containing data to write to the device. UInt16 [] readBuffer Array containing data read from the device. | Improve this Doc View Source TransferSequential(Byte[], Byte[]) Transfer data sequentially to the device. Declaration public void TransferSequential(byte[] writeBuffer, byte[] readBuffer) Parameters Type Name Description Byte [] writeBuffer Array containing data to write to the device. Byte [] readBuffer Array containing data read from the device. | Improve this Doc View Source TransferSequential(UInt16[], UInt16[]) Transfer data sequentially to the device. Declaration public void TransferSequential(ushort[] writeBuffer, ushort[] readBuffer) Parameters Type Name Description UInt16 [] writeBuffer Array containing data to write to the device. UInt16 [] readBuffer Array containing data read from the device. | Improve this Doc View Source Write(Byte[]) Writes to the connected device. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer Array containing the data to write to the device. | Improve this Doc View Source Write(UInt16[]) Writes to the connected device. Declaration public void Write(ushort[] buffer) Parameters Type Name Description UInt16 [] buffer Array containing the data to write to the device. Implements IDisposable"
  },
  "api/Windows.Devices.Spi.SpiDeviceAlreadyInUseException.html": {
    "href": "api/Windows.Devices.Spi.SpiDeviceAlreadyInUseException.html",
    "title": "Class SpiDeviceAlreadyInUseException | nanoFramework Documentation",
    "keywords": "Class SpiDeviceAlreadyInUseException Exception thrown when a check in driver's constructor finds a device that already exists with the same settings (SPI bus AND chip select line) Inheritance Object Exception SpiDeviceAlreadyInUseException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax [Serializable] public class SpiDeviceAlreadyInUseException : Exception Methods | Improve this Doc View Source ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Exception.ToString()"
  },
  "api/Windows.Devices.Spi.SpiMode.html": {
    "href": "api/Windows.Devices.Spi.SpiMode.html",
    "title": "Enum SpiMode | nanoFramework Documentation",
    "keywords": "Enum SpiMode Defines the SPI communication mode. The communication mode defines the clock edge on which the master out line toggles, the master in line samples, and the signal clock's signal steady level (named SCLK). Each mode is defined with a pair of parameters called clock polarity (CPOL) and clock phase (CPHA). Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public enum SpiMode Fields Name Description Mode0 CPOL = 0, CPHA = 0. Mode1 CPOL = 0, CPHA = 1. Mode2 CPOL = 1, CPHA = 0. Mode3 CPOL = 1, CPHA = 1."
  },
  "api/Windows.Devices.Spi.SpiSharingMode.html": {
    "href": "api/Windows.Devices.Spi.SpiSharingMode.html",
    "title": "Enum SpiSharingMode | nanoFramework Documentation",
    "keywords": "Enum SpiSharingMode Defines the sharing mode for the SPI bus. Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public enum SpiSharingMode Fields Name Description Exclusive SPI bus segment is not shared. Shared SPI bus is shared."
  },
  "api/Windows.Devices.WiFi.AvailableNetworksChangedEventHandler.html": {
    "href": "api/Windows.Devices.WiFi.AvailableNetworksChangedEventHandler.html",
    "title": "Delegate AvailableNetworksChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate AvailableNetworksChangedEventHandler Event raised when a scan completes on this Wi-Fi adapter. Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public delegate void AvailableNetworksChangedEventHandler(WiFiAdapter sender, object e); Parameters Type Name Description WiFiAdapter sender Object e"
  },
  "api/Windows.Devices.WiFi.html": {
    "href": "api/Windows.Devices.WiFi.html",
    "title": "Namespace Windows.Devices.WiFi | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.WiFi Classes WiFiAdapter Provides a means to scan for nearby WiFi access points, enumerate those that are found, and connect to an access point. WiFiAvailableNetwork Describes an available Wi-Fi network. WiFiConnectionResult Describes the results of an attempt to connect to a Wi-Fi network. WiFiNetworkReport Contains the result of a network scan operation. Enums WiFiConnectionStatus Status of the connection attempt. WiFiNetworkKind Describes the kinds of Wi-Fi networks. WiFiReconnectionKind Describes whether to automatically reconnect to this network. Delegates AvailableNetworksChangedEventHandler Event raised when a scan completes on this Wi-Fi adapter."
  },
  "api/Windows.Devices.WiFi.WiFiAdapter.html": {
    "href": "api/Windows.Devices.WiFi.WiFiAdapter.html",
    "title": "Class WiFiAdapter | nanoFramework Documentation",
    "keywords": "Class WiFiAdapter Provides a means to scan for nearby WiFi access points, enumerate those that are found, and connect to an access point. Inheritance Object WiFiAdapter Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public sealed class WiFiAdapter : IDisposable Properties | Improve this Doc View Source NetworkInterface Gets the network interface number associatted with this Wi-Fi adapter Declaration public int NetworkInterface { get; } Property Value Type Description Int32 | Improve this Doc View Source NetworkReport Gets a list of available networks populated by the last Wi-Fi scan on this WiFiNetworkAdapter. Declaration public WiFiNetworkReport NetworkReport { get; } Property Value Type Description WiFiNetworkReport Methods | Improve this Doc View Source Connect(WiFiAvailableNetwork, WiFiReconnectionKind, String) Connect this Wi-Fi device to the specified network, with the specified passphrase and reconnection policy. Declaration public WiFiConnectionResult Connect(WiFiAvailableNetwork availableNetwork, WiFiReconnectionKind reconnectionKind, string passwordCredential) Parameters Type Name Description WiFiAvailableNetwork availableNetwork Describes the Wi-Fi network to be connected. WiFiReconnectionKind reconnectionKind Specifies how to reconnect if the connection is lost. String passwordCredential The passphrase to be used to connect to the access point. Returns Type Description WiFiConnectionResult On successful conclusion of the operation, returns an object that describes the result of the connect operation. | Improve this Doc View Source Disconnect() Disconnects any active Wi-Fi connection through this adapter. Declaration public void Disconnect() | Improve this Doc View Source Dispose() Dispose WiFiAdapter Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FindAllAdapters() A static method that enumerates all the Wi-Fi adapters in the system. Declaration public static WiFiAdapter[] FindAllAdapters() Returns Type Description WiFiAdapter [] On successful completion, returns an array of WiFiAdapter objects | Improve this Doc View Source ScanAsync() Directs this adapter to initiate an asynchronous network scan. Declaration public void ScanAsync() Remarks On successful completion, returns a list of networks scanned by this adapter signalled by the AvailableNetworksChanged event. Use NetworkReport to retrive the list of available Networks. Events | Improve this Doc View Source AvailableNetworksChanged Event raised when a scan completes on this Wi-Fi adapter. Declaration public event AvailableNetworksChangedEventHandler AvailableNetworksChanged Event Type Type Description AvailableNetworksChangedEventHandler Implements IDisposable"
  },
  "api/Windows.Devices.WiFi.WiFiAvailableNetwork.html": {
    "href": "api/Windows.Devices.WiFi.WiFiAvailableNetwork.html",
    "title": "Class WiFiAvailableNetwork | nanoFramework Documentation",
    "keywords": "Class WiFiAvailableNetwork Describes an available Wi-Fi network. Inheritance Object WiFiAvailableNetwork Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public class WiFiAvailableNetwork Properties | Improve this Doc View Source Bsid Gets the MAC address of the access point. Declaration public string Bsid { get; } Property Value Type Description String | Improve this Doc View Source NetworkKind Gets a value describing the kind of network being described. Declaration public WiFiNetworkKind NetworkKind { get; } Property Value Type Description WiFiNetworkKind | Improve this Doc View Source NetworkRssiInDecibelMilliwatts Gets the signal strength of the network in Ddm Declaration public double NetworkRssiInDecibelMilliwatts { get; } Property Value Type Description Double | Improve this Doc View Source SignalBars Gets the strength of the signal as a number of bars. Declaration public byte SignalBars { get; } Property Value Type Description Byte | Improve this Doc View Source Ssid Gets the SSID (name) of the network. Declaration public string Ssid { get; } Property Value Type Description String"
  },
  "api/Windows.Devices.WiFi.WiFiConnectionResult.html": {
    "href": "api/Windows.Devices.WiFi.WiFiConnectionResult.html",
    "title": "Class WiFiConnectionResult | nanoFramework Documentation",
    "keywords": "Class WiFiConnectionResult Describes the results of an attempt to connect to a Wi-Fi network. Inheritance Object WiFiConnectionResult Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public class WiFiConnectionResult Properties | Improve this Doc View Source ConnectionStatus Gets the connection result value. Declaration public WiFiConnectionStatus ConnectionStatus { get; } Property Value Type Description WiFiConnectionStatus"
  },
  "api/Windows.Devices.WiFi.WiFiConnectionStatus.html": {
    "href": "api/Windows.Devices.WiFi.WiFiConnectionStatus.html",
    "title": "Enum WiFiConnectionStatus | nanoFramework Documentation",
    "keywords": "Enum WiFiConnectionStatus Status of the connection attempt. Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public enum WiFiConnectionStatus Fields Name Description AccessRevoked Connection failed because access to the network has been revoked. InvalidCredential Connection failed because an invalid credential was presented. NetworkNotAvailable Connection failed because the network is not available. Success Connection succeeded. Timeout Connection failed because the connection attempt timed out. UnspecifiedFailure Connection failed for a reason other than those in this list. UnsupportedAuthenticationProtocol Connection failed because the authentication protocol is not supported."
  },
  "api/Windows.Devices.WiFi.WiFiNetworkKind.html": {
    "href": "api/Windows.Devices.WiFi.WiFiNetworkKind.html",
    "title": "Enum WiFiNetworkKind | nanoFramework Documentation",
    "keywords": "Enum WiFiNetworkKind Describes the kinds of Wi-Fi networks. Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public enum WiFiNetworkKind Fields Name Description Adhoc An independent (IBSS) network. Any Either an infrastructure or independent network. Infrastructure An infrastructure network."
  },
  "api/Windows.Devices.WiFi.WiFiNetworkReport.html": {
    "href": "api/Windows.Devices.WiFi.WiFiNetworkReport.html",
    "title": "Class WiFiNetworkReport | nanoFramework Documentation",
    "keywords": "Class WiFiNetworkReport Contains the result of a network scan operation. Inheritance Object WiFiNetworkReport Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public class WiFiNetworkReport Properties | Improve this Doc View Source AvailableNetworks A list of available networks. Declaration public WiFiAvailableNetwork[] AvailableNetworks { get; } Property Value Type Description WiFiAvailableNetwork []"
  },
  "api/Windows.Devices.WiFi.WiFiReconnectionKind.html": {
    "href": "api/Windows.Devices.WiFi.WiFiReconnectionKind.html",
    "title": "Enum WiFiReconnectionKind | nanoFramework Documentation",
    "keywords": "Enum WiFiReconnectionKind Describes whether to automatically reconnect to this network. Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public enum WiFiReconnectionKind Fields Name Description Automatic Reconnect automatically. Manual Allow user to reconnect manually."
  },
  "api/Windows.Storage.CreationCollisionOption.html": {
    "href": "api/Windows.Storage.CreationCollisionOption.html",
    "title": "Enum CreationCollisionOption | nanoFramework Documentation",
    "keywords": "Enum CreationCollisionOption Specifies what to do if a file or folder with the specified name already exists in the current folder when you create a new file or folder. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public enum CreationCollisionOption Fields Name Description FailIfExists Raise an exception of type System.Exception if the file or folder already exists. Methods that don't explicitly pass a value from the CreationCollisionOption enumeration use the FailIfExists value as the default when you try to create, rename, copy, or move a file or folder. GenerateUniqueName Automatically append a number to the base of the specified name if the file or folder already exists. For example, if MyFile.txt already exists, then the new file is named MyFile(2).txt.If MyFolder already exists, then the new folder is named MyFolder(2). OpenIfExists Return the existing item if the file or folder already exists. ReplaceExisting Replace the existing item if the file or folder already exists."
  },
  "api/Windows.Storage.Devices.html": {
    "href": "api/Windows.Storage.Devices.html",
    "title": "Namespace Windows.Storage.Devices | nanoFramework Documentation",
    "keywords": "Namespace Windows.Storage.Devices Classes SDCard Class to allow a single SDCard to be mounted on the system. Only allows for 1 device to be mounted, either via MMC or SPI"
  },
  "api/Windows.Storage.Devices.SDCard.html": {
    "href": "api/Windows.Storage.Devices.SDCard.html",
    "title": "Class SDCard | nanoFramework Documentation",
    "keywords": "Class SDCard Class to allow a single SDCard to be mounted on the system. Only allows for 1 device to be mounted, either via MMC or SPI Inheritance Object SDCard Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage.Devices Assembly : Windows.Storage.dll Syntax public static class SDCard Properties | Improve this Doc View Source IsMounted Indcates if the SDscard has been mounted Declaration public static bool IsMounted { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source MountMMC(Boolean) Mount the SDcard device on the MMC interface Declaration public static void MountMMC(bool Data1bit) Parameters Type Name Description Boolean Data1bit If true denotes 1 bit data path will be used otherwise it will be 4 bits. Remarks This will try to mount the SDCard on the specified interface. If the Card is not present or the card is unable to be read then an exception will be thrown. | Improve this Doc View Source MountSpi(String, Int32) Mount the SPI SDcard device on the specified SPI bus Declaration public static void MountSpi(string SpiController, int ChipSelect) Parameters Type Name Description String SpiController The name for the SPI device, i.e \"SPI1\" Int32 ChipSelect The GPIO pin used for chip select on SDcard. Remarks This will try to mount the SDCard on the specified interface. If the Card is not present or the card is unable to be read then an exception will be thrown. | Improve this Doc View Source Unmount() Unmount the mounted SDcard. Declaration public static void Unmount()"
  },
  "api/Windows.Storage.FileAttributes.html": {
    "href": "api/Windows.Storage.FileAttributes.html",
    "title": "Enum FileAttributes | nanoFramework Documentation",
    "keywords": "Enum FileAttributes Describes the attributes of a file or folder. This enumeration has a System.FlagsAttribute attribute that allows a bitwise combination of its member values. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public enum FileAttributes Fields Name Description Archive The item is archived. Directory The item is a directory. LocallyIncomplete The item is locally incomplete. Windows only. Normal The item is normal. That is, the item doesn't have any of the other values in the enumeration. ReadOnly The item is read-only. Temporary The item is a temporary file."
  },
  "api/Windows.Storage.FileIO.html": {
    "href": "api/Windows.Storage.FileIO.html",
    "title": "Class FileIO | nanoFramework Documentation",
    "keywords": "Class FileIO Provides helper methods for reading and writing files that are represented by objects of type IStorageFile. Inheritance Object FileIO Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public static class FileIO Methods | Improve this Doc View Source ReadBuffer(IStorageFile) Reads the contents of the specified file and returns a buffer. Declaration public static IBuffer ReadBuffer(IStorageFile file) Parameters Type Name Description IStorageFile file The file to read. Returns Type Description IBuffer When this method completes, it returns an object (type IBuffer ) that represents the contents of the file. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be ReadBufferAsync(IStorageFile). | Improve this Doc View Source ReadText(IStorageFile) Reads the contents of the specified file and returns text. Declaration public static string ReadText(IStorageFile file) Parameters Type Name Description IStorageFile file The file to read. Returns Type Description String When this method completes successfully, it returns the contents of the file as a text string. Remarks The encoding will always be Utf8 which is the only supported encoding in nanoFramework. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be ReadTextAsync(IStorageFile). | Improve this Doc View Source WriteBuffer(IStorageFile, IBuffer) Writes data from a buffer to the specified file. Declaration public static void WriteBuffer(IStorageFile file, IBuffer buffer) Parameters Type Name Description IStorageFile file The file that the buffer of data is written to. IBuffer buffer The buffer that contains the data to write. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be WriteBuffer(IStorageFile, IBuffer). WriteBytes(IStorageFile, Byte[]) Writes an array of bytes of data to the specified file. Declaration public static void WriteBytes(IStorageFile file, byte[] buffer) Parameters Type Name Description IStorageFile file The file that the byte is written to. Byte [] buffer The array of bytes to write. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be WriteBytesAsync(IStorageFile, Byte[]). WriteText(IStorageFile, String) Writes text to the specified file. Declaration public static void WriteText(IStorageFile file, string contents) Parameters Type Name Description IStorageFile file The file that the text is written to. String contents The text to write. Remarks The encoding will always be Utf8 which is the only supported encoding in nanoFramework. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be WriteTextAsync(IStorageFile, String)."
  },
  "api/Windows.Storage.html": {
    "href": "api/Windows.Storage.html",
    "title": "Namespace Windows.Storage | nanoFramework Documentation",
    "keywords": "Namespace Windows.Storage Classes FileIO Provides helper methods for reading and writing files that are represented by objects of type IStorageFile. KnownFolders Provides access to common locations that contain user content. This includes content from a user's local libraries (such as Documents, Pictures, Music, and Videos), HomeGroup, removable devices, and media server devices. RemovableDeviceEventArgs Contains argument values for Removable Devices events. StorageEventManager Event manager for Storage events. StorageFile Represents a file. Provides information about the file and its content, and ways to manipulate them. StorageFolder Manages folders and their contents and provides information about them. StorageProvider Contains info about the service that stores files and folders. Files and folders may be stored either by the local file system or by a remote service like Microsoft OneDrive. Interfaces IStorageFile Represents a file. Provides information about the file and its contents, and ways to manipulate them. IStorageFolder Manipulates folders and their contents, and provides information about them. IStorageItem Manipulates storage items (files and folders) and their contents, and provides information about them. IStorageProvider Enums CreationCollisionOption Specifies what to do if a file or folder with the specified name already exists in the current folder when you create a new file or folder. FileAttributes Describes the attributes of a file or folder. This enumeration has a System.FlagsAttribute attribute that allows a bitwise combination of its member values. KnownFolderId Provides values that identify storage folders. RemovableDeviceEventArgs.RemovableDeviceEvent Specifies the type of event occurred with the Removable Device specified. Delegates RemovableDeviceEventHandler Provides an event handler that is called when a Removable Device event occurs."
  },
  "api/Windows.Storage.IStorageFile.html": {
    "href": "api/Windows.Storage.IStorageFile.html",
    "title": "Interface IStorageFile | nanoFramework Documentation",
    "keywords": "Interface IStorageFile Represents a file. Provides information about the file and its contents, and ways to manipulate them. Inherited Members IStorageItem.Attributes IStorageItem.DateCreated IStorageItem.Name IStorageItem.Path IStorageItem.Rename(String) Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public interface IStorageFile : IStorageItem Properties | Improve this Doc View Source ContentType Gets the MIME type of the contents of the file. Declaration string ContentType { get; } Property Value Type Description String | Improve this Doc View Source FileType Gets the type (file name extension) of the file. Declaration string FileType { get; } Property Value Type Description String"
  },
  "api/Windows.Storage.IStorageFolder.html": {
    "href": "api/Windows.Storage.IStorageFolder.html",
    "title": "Interface IStorageFolder | nanoFramework Documentation",
    "keywords": "Interface IStorageFolder Manipulates folders and their contents, and provides information about them. Inherited Members IStorageItem.Attributes IStorageItem.DateCreated IStorageItem.Name IStorageItem.Path IStorageItem.Rename(String) Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public interface IStorageFolder : IStorageItem"
  },
  "api/Windows.Storage.IStorageItem.html": {
    "href": "api/Windows.Storage.IStorageItem.html",
    "title": "Interface IStorageItem | nanoFramework Documentation",
    "keywords": "Interface IStorageItem Manipulates storage items (files and folders) and their contents, and provides information about them. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public interface IStorageItem Properties | Improve this Doc View Source Attributes Gets the attributes of a file. Declaration FileAttributes Attributes { get; } Property Value Type Description FileAttributes The file attributes. | Improve this Doc View Source DateCreated Gets the date and time that the current folder was created. Declaration DateTime DateCreated { get; } Property Value Type Description DateTime Remarks This is the nanoFrameowrk equivalent of UWP DateCreated of type DateTimeOffset. | Improve this Doc View Source Name Gets the name of the item including the file name extension if there is one. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Path Gets the full file-system path of the item, if the item has a path. Declaration string Path { get; } Property Value Type Description String Methods | Improve this Doc View Source Rename(String) Renames the current item. Declaration void Rename(string desiredName) Parameters Type Name Description String desiredName The desired, new name of the item."
  },
  "api/Windows.Storage.IStorageProvider.html": {
    "href": "api/Windows.Storage.IStorageProvider.html",
    "title": "Interface IStorageProvider | nanoFramework Documentation",
    "keywords": "Interface IStorageProvider Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public interface IStorageProvider"
  },
  "api/Windows.Storage.KnownFolderId.html": {
    "href": "api/Windows.Storage.KnownFolderId.html",
    "title": "Enum KnownFolderId | nanoFramework Documentation",
    "keywords": "Enum KnownFolderId Provides values that identify storage folders. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public enum KnownFolderId Fields Name Description InternalDevices Internal devices. RemovableDevices Removable devices folder."
  },
  "api/Windows.Storage.KnownFolders.html": {
    "href": "api/Windows.Storage.KnownFolders.html",
    "title": "Class KnownFolders | nanoFramework Documentation",
    "keywords": "Class KnownFolders Provides access to common locations that contain user content. This includes content from a user's local libraries (such as Documents, Pictures, Music, and Videos), HomeGroup, removable devices, and media server devices. Inheritance Object KnownFolders Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public static class KnownFolders Properties | Improve this Doc View Source InternalDevices Gets the internal devices folder. Declaration public static StorageFolder InternalDevices { get; } Property Value Type Description StorageFolder | Improve this Doc View Source RemovableDevices Gets the removable devices folder. Declaration public static StorageFolder RemovableDevices { get; } Property Value Type Description StorageFolder"
  },
  "api/Windows.Storage.RemovableDeviceEventArgs.html": {
    "href": "api/Windows.Storage.RemovableDeviceEventArgs.html",
    "title": "Class RemovableDeviceEventArgs | nanoFramework Documentation",
    "keywords": "Class RemovableDeviceEventArgs Contains argument values for Removable Devices events. Inheritance Object EventArgs RemovableDeviceEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public class RemovableDeviceEventArgs : EventArgs Properties | Improve this Doc View Source Event The RemovableDeviceEventArgs.RemovableDeviceEvent occurred. Declaration public RemovableDeviceEventArgs.RemovableDeviceEvent Event { get; } Property Value Type Description RemovableDeviceEventArgs.RemovableDeviceEvent | Improve this Doc View Source Path The path of the Removable Device. Declaration public string Path { get; } Property Value Type Description String"
  },
  "api/Windows.Storage.RemovableDeviceEventArgs.RemovableDeviceEvent.html": {
    "href": "api/Windows.Storage.RemovableDeviceEventArgs.RemovableDeviceEvent.html",
    "title": "Enum RemovableDeviceEventArgs.RemovableDeviceEvent | nanoFramework Documentation",
    "keywords": "Enum RemovableDeviceEventArgs.RemovableDeviceEvent Specifies the type of event occurred with the Removable Device specified. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public enum RemovableDeviceEvent Remarks This enum is specific to nanoFramework. There is no equivalent in the UWP API. Fields Name Description Inserted A Removable Device has been inserted. Removed A Removable Device has been removed."
  },
  "api/Windows.Storage.RemovableDeviceEventHandler.html": {
    "href": "api/Windows.Storage.RemovableDeviceEventHandler.html",
    "title": "Delegate RemovableDeviceEventHandler | nanoFramework Documentation",
    "keywords": "Delegate RemovableDeviceEventHandler Provides an event handler that is called when a Removable Device event occurs. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public delegate void RemovableDeviceEventHandler(object sender, RemovableDeviceEventArgs e); Parameters Type Name Description Object sender Specifies the object that sent the Removable Device event. RemovableDeviceEventArgs e Contains the Removable Device event arguments."
  },
  "api/Windows.Storage.Search.CommonFileQuery.html": {
    "href": "api/Windows.Storage.Search.CommonFileQuery.html",
    "title": "Enum CommonFileQuery | nanoFramework Documentation",
    "keywords": "Enum CommonFileQuery Specifies how to sort the files in the query results and determines whether the query is shallow or deep. Query results for deep queries include all files in all of the subfolders of the current folder, sorted according to the specified option. Namespace : Windows.Storage.Search Assembly : Windows.Storage.dll Syntax public enum CommonFileQuery Fields Name Description DefaultQuery A shallow list of files in the current folder, similar to the list that File Explorer provides. You can use this option for any storage location. OrderByDate A deep, flat list of files in a folder and its subfolders, sorted by System.ItemDate. You can use this option only for folders in a library or the HomeGroup folder. OrderByMusicProperties A deep, flat list of files in a folder and its subfolders, sorted by music properties. You can use this option only for folders in a library or the HomeGroup folder. OrderByName A deep, flat list of files in a folder and its subfolders, sorted by System.ItemNameDisplay. You can use this option for any storage location. OrderBySearchRank A deep, flat list of files in a folder and its subfolders, sorted by System.Search.Rank followed by System.DateModified. You can use this option for any storage location. OrderByTitle A deep, flat list of files in a folder and its subfolders, sorted by System.Title. You can use this option only for folders in a library or the HomeGroup folder."
  },
  "api/Windows.Storage.Search.html": {
    "href": "api/Windows.Storage.Search.html",
    "title": "Namespace Windows.Storage.Search | nanoFramework Documentation",
    "keywords": "Namespace Windows.Storage.Search Enums CommonFileQuery Specifies how to sort the files in the query results and determines whether the query is shallow or deep. Query results for deep queries include all files in all of the subfolders of the current folder, sorted according to the specified option."
  },
  "api/Windows.Storage.StorageEventManager.html": {
    "href": "api/Windows.Storage.StorageEventManager.html",
    "title": "Class StorageEventManager | nanoFramework Documentation",
    "keywords": "Class StorageEventManager Event manager for Storage events. Inheritance Object StorageEventManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public static class StorageEventManager Events | Improve this Doc View Source RemovableDeviceInserted Event that occurs when a Removable Device is inserted. Declaration public static event RemovableDeviceEventHandler RemovableDeviceInserted Event Type Type Description RemovableDeviceEventHandler Remarks The StorageEventManager class raises RemovableDeviceEventArgs events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed. To have a StorageEventManager object call an event-handling method when a RemovableDeviceInserted event occurs, you must associate the method with a RemovableDeviceEventHandler delegate, and add this delegate to this event. | Improve this Doc View Source RemovableDeviceRemoved Event that occurs when a Removable Device is removed. Declaration public static event RemovableDeviceEventHandler RemovableDeviceRemoved Event Type Type Description RemovableDeviceEventHandler Remarks The StorageEventManager class raises RemovableDeviceEventArgs events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed. To have a StorageEventManager object call an event-handling method when a RemovableDeviceRemoved event occurs, you must associate the method with a RemovableDeviceEventHandler delegate, and add this delegate to this event."
  },
  "api/Windows.Storage.StorageFile.html": {
    "href": "api/Windows.Storage.StorageFile.html",
    "title": "Class StorageFile | nanoFramework Documentation",
    "keywords": "Class StorageFile Represents a file. Provides information about the file and its content, and ways to manipulate them. Inheritance Object StorageFile Implements IStorageFile IStorageItem Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public sealed class StorageFile : IStorageFile, IStorageItem Properties | Improve this Doc View Source Attributes Gets the attributes of a file. Declaration public FileAttributes Attributes { get; } Property Value Type Description FileAttributes The file attributes. | Improve this Doc View Source ContentType Gets the MIME type of the contents of the file. Declaration public string ContentType { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source DateCreated Gets the date and time that the current folder was created. Declaration public DateTime DateCreated { get; } Property Value Type Description DateTime Remarks This is the nanoFrameowrk equivalent of UWP DateCreated of type DateTimeOffset. | Improve this Doc View Source DisplayName Gets the user-friendly name of the current folder. Declaration public string DisplayName { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source DisplayType Gets the user-friendly description of the type of the folder; for example, JPEG image. Declaration public string DisplayType { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source FileType Gets the type (file name extension) of the file. Declaration public string FileType { get; } Property Value Type Description String | Improve this Doc View Source FolderRelativeId Gets an identifier for the file. This ID is unique for the query result or StorageFolder that contains the file and can be used to distinguish between items that have the same name. Declaration public string FolderRelativeId { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source IsAvailable Indicates if the file is local, is cached locally, or can be downloaded. Declaration public bool IsAvailable { get; } Property Value Type Description Boolean True if the file is local, is cached locally, or can be downloaded. Otherwise, false. Remarks This property is always true in nanoFramework. | Improve this Doc View Source Name Gets the name of the file including the file name extension. Declaration public string Name { get; } Property Value Type Description String The name of the file including the file name extension. | Improve this Doc View Source Path Gets the full file-system path of the current file, if the file has a path. Declaration public string Path { get; } Property Value Type Description String Methods | Improve this Doc View Source Delete() Delete the current file. Declaration public void Delete() Remarks If the file doesn't exist this method will throw an exception. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be DeleteAsync(). | Improve this Doc View Source GetFileFromPath(String) Gets a StorageFile object to represent the file at the specified path. Declaration public static StorageFile GetFileFromPath(string path) Parameters Type Name Description String path The path of the file to get a StorageFile to represent. Returns Type Description StorageFile Returns the file as a StorageFile. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFileFromPathAsync(String). | Improve this Doc View Source Rename(String) Renames the current file. Declaration public void Rename(string desiredName) Parameters Type Name Description String desiredName The desired new name of the current file. Remarks If the name you specify is invalid or already exists, this method throws an exception This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be RenameAsync(String desiredName). Implements IStorageFile IStorageItem"
  },
  "api/Windows.Storage.StorageFolder.html": {
    "href": "api/Windows.Storage.StorageFolder.html",
    "title": "Class StorageFolder | nanoFramework Documentation",
    "keywords": "Class StorageFolder Manages folders and their contents and provides information about them. Inheritance Object StorageFolder Implements IStorageFolder IStorageItem Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public sealed class StorageFolder : IStorageFolder, IStorageItem Properties | Improve this Doc View Source Attributes Gets the attributes of the current folder. Declaration public FileAttributes Attributes { get; } Property Value Type Description FileAttributes The attributes of the current folder. | Improve this Doc View Source DateCreated Gets the date and time that the current folder was created. Declaration public DateTime DateCreated { get; } Property Value Type Description DateTime Remarks This is the nanoFrameowrk equivalent of UWP DateCreated of type DateTimeOffset. | Improve this Doc View Source DisplayName Gets the user-friendly name of the current folder. Declaration public string DisplayName { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source DisplayType Gets the user-friendly description of the type of the folder. Declaration public string DisplayType { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source FolderRelativeId Gets an identifier for the current folder. This ID is unique for the query result or StorageFolder that contains the current folder or file group, and can be used to distinguish between items that have the same name. Declaration public string FolderRelativeId { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source Name Gets the name of the current folder. Declaration public string Name { get; } Property Value Type Description String The name of the current folder. | Improve this Doc View Source Path Gets the full path of the current folder in the file system, if the path is available. Declaration public string Path { get; } Property Value Type Description String Methods | Improve this Doc View Source CreateFile(String) Creates a new file with the specified name in the current folder. Declaration public StorageFile CreateFile(string desiredName) Parameters Type Name Description String desiredName The name of the new file to create in the current folder. Returns Type Description StorageFile When this method completes, it returns a StorageFile that represents the new file. Remarks This method uses the FailIfExists value from the CreationCollisionOption enumeration by default. That is, this method raises an exception if a subfolder with the same name already exists in the current folder. If you want to handle a folder name collision in a different way, call the CreateFile(String, CreationCollisionOption) method. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be CreateFileAsync(String). | Improve this Doc View Source CreateFile(String, CreationCollisionOption) Creates a new file with the specified name in the current folder. Declaration public StorageFile CreateFile(string desiredName, CreationCollisionOption options) Parameters Type Name Description String desiredName The name of the new file to create in the current folder. CreationCollisionOption options One of the enumeration values that determines how to handle the collision if a file with the specified desiredName already exists in the current folder. Returns Type Description StorageFile When this method completes, it returns a StorageFile that represents the new file. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be CreateFileAsync(String, CreationCollisionOption). | Improve this Doc View Source CreateFolder(String) Creates a new subfolder with the specified name in the current folder. Declaration public StorageFolder CreateFolder(string desiredName) Parameters Type Name Description String desiredName The name of the new subfolder to create in the current folder. Returns Type Description StorageFolder When this method completes, it returns a StorageFolder that represents the new subfolder. Remarks This method uses the FailIfExists value from the CreationCollisionOption enumeration by default. That is, this method raises an exception if a subfolder with the same name already exists in the current folder. If you want to handle a folder name collision in a different way, call the CreateFolder(String, CreationCollisionOption) method. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be CreateFolderAsync(String). | Improve this Doc View Source CreateFolder(String, CreationCollisionOption) Creates a new subfolder with the specified name in the current folder. This method also specifies what to do if a subfolder with the same name already exists in the current folder. Declaration public StorageFolder CreateFolder(string desiredName, CreationCollisionOption options) Parameters Type Name Description String desiredName The name of the new subfolder to create in the current folder. CreationCollisionOption options One of the enumeration values that determines how to handle the collision if a subfolder with the specified desiredName already exists in the current folder. Returns Type Description StorageFolder When this method completes, it returns a StorageFolder that represents the new subfolder. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be CreateFolderAsync(String, CreationCollisionOption). | Improve this Doc View Source Delete() Delete the current folder. Declaration public void Delete() Remarks If the folder doesn't exist then this method will throw an exception. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be DeleteAsync(). | Improve this Doc View Source GetFiles() Gets the files in the current folder. Declaration public StorageFile[] GetFiles() Returns Type Description StorageFile [] When this method completes successfully, it returns a list of the files in the current folder. The list is of type StorageFile . Each file in the list is represented by a StorageFile object. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFilesAsync(). | Improve this Doc View Source GetFiles(CommonFileQuery) Gets the files in the current folder. Also gets the files from the subfolders of the current folder when the value of the query argument is something other than DefaultQuery . Files are sorted based on the specified value from the CommonFileQuery enumeration. Declaration public StorageFile[] GetFiles(CommonFileQuery query) Parameters Type Name Description CommonFileQuery query One of the enumeration values that specifies how to sort the files and determines whether the query is shallow or deep. Returns Type Description StorageFile [] When this method completes successfully, it returns a flat list of files, sorted as specified by query. The list is of type StorageFile . Each file in the list is represented by a StorageFile object. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFilesAsync(CommonFileQuery). | Improve this Doc View Source GetFiles(CommonFileQuery, UInt32, UInt32) Gets an index-based range of files from the list of all files in the current folder. Also gets the files from the subfolders of the current folder when the value of the query argument is something other than DefaultQuery . Files are sorted based on the specified value from the CommonFileQuery enumeration. Declaration public StorageFile[] GetFiles(CommonFileQuery query, uint startIndex, uint maxItemsToRetrieve) Parameters Type Name Description CommonFileQuery query One of the enumeration values that specifies how to sort the files and determines whether the query is shallow or deep. UInt32 startIndex The zero-based index of the first file in the range to retrieve. UInt32 maxItemsToRetrieve The maximum number of files to retrieve. Returns Type Description StorageFile [] When this method completes successfully, it returns a flat list of files, sorted as specified by query. The list is of type StorageFile . Each file in the list is represented by a StorageFile object. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFilesAsync(CommonFileQuery, UInt32, UInt32). | Improve this Doc View Source GetFolder(String) Gets the subfolder with the specified name from the current folder. Declaration public StorageFolder GetFolder(string name) Parameters Type Name Description String name The name (or path relative to the current folder) of the subfolder to get. Returns Type Description StorageFolder When this method completes successfully, it returns a StorageFolder that represents the specified subfolder. Remarks If the folder doesn't exist it will throw an exception. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFolderAsync(String name). | Improve this Doc View Source GetFolders() Gets the subfolders in the current folder. Declaration public StorageFolder[] GetFolders() Returns Type Description StorageFolder [] When this method completes successfully, it returns a list of the subfolders in the current folder. The list is of type StorageFolder. Each folder in the list is represented by a StorageFolder object. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFoldersAsync(). | Improve this Doc View Source IsCommonFileQuerySupported(CommonFileQuery) Indicates whether the current folder supports the specified CommonFileQuery . Declaration public bool IsCommonFileQuerySupported(CommonFileQuery query) Parameters Type Name Description CommonFileQuery query The value to test. Returns Type Description Boolean True if the folder supports the specified CommonFileQuery otherwise, false. | Improve this Doc View Source Rename(String) Renames the current folder. Declaration public void Rename(string desiredName) Parameters Type Name Description String desiredName The desired, new name for the current folder. Remarks If the name you specify is invalid or a folder with the same name already exists, this method throws an exception. If the target device doesn't support folders then this will also throw an exception. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be RenameAsync(String desiredName). Implements IStorageFolder IStorageItem"
  },
  "api/Windows.Storage.StorageProvider.html": {
    "href": "api/Windows.Storage.StorageProvider.html",
    "title": "Class StorageProvider | nanoFramework Documentation",
    "keywords": "Class StorageProvider Contains info about the service that stores files and folders. Files and folders may be stored either by the local file system or by a remote service like Microsoft OneDrive. Inheritance Object StorageProvider Implements IStorageProvider Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public sealed class StorageProvider : IStorageProvider Properties | Improve this Doc View Source DisplayName Gets a user-friendly name for the current provider of files and folders. Declaration public string DisplayName { get; } Property Value Type Description String The user-friendly name for the provider. This name is localized to the current system locale. | Improve this Doc View Source Id Gets an identifier for the current provider of files and folders. Declaration public string Id { get; } Property Value Type Description String The identifier for the provider. Remarks The ID can be Local, Network, or OneDrive depending on your provider. Implements IStorageProvider"
  },
  "api/Windows.Storage.Streams.ByteOrder.html": {
    "href": "api/Windows.Storage.Streams.ByteOrder.html",
    "title": "Enum ByteOrder | nanoFramework Documentation",
    "keywords": "Enum ByteOrder Specifies the byte order of a stream. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public enum ByteOrder Remarks nanoFramework API only supports LittleEndian order. Fields Name Description LittleEndian The least significant byte (lowest address) is stored first."
  },
  "api/Windows.Storage.Streams.DataReader.html": {
    "href": "api/Windows.Storage.Streams.DataReader.html",
    "title": "Class DataReader | nanoFramework Documentation",
    "keywords": "Class DataReader Inheritance Object MarshalByRefObject DataReader Implements IDisposable IDataReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public sealed class DataReader : MarshalByRefObject, IDisposable, IDataReader Constructors | Improve this Doc View Source DataReader(IInputStream) Creates and initializes a new instance of the data reader. Declaration public DataReader(IInputStream inputStream) Parameters Type Name Description IInputStream inputStream The input stream. Properties | Improve this Doc View Source ByteOrder Gets or sets the byte order of the data in the input stream. Declaration public ByteOrder ByteOrder { get; } Property Value Type Description ByteOrder One of the enumeration values. Remarks nanoFramework doesn't this feature. ByteOrder is always LittleEndian . | Improve this Doc View Source InputStreamOptions Gets or sets the read options for the input stream. Declaration public InputStreamOptions InputStreamOptions { get; set; } Property Value Type Description InputStreamOptions One of the enumeration values. | Improve this Doc View Source UnconsumedBufferLength Gets the size of the buffer that has not been read. Declaration public uint UnconsumedBufferLength { get; } Property Value Type Description UInt32 The size of the buffer that has not been read, in bytes. | Improve this Doc View Source UnicodeEncoding Gets or sets the Unicode character encoding for the input stream. Declaration public UnicodeEncoding UnicodeEncoding { get; } Property Value Type Description UnicodeEncoding One of the enumeration values. Remarks nanoFramework doesn't this feature. UnicodeEncoding is always Utf8 . Methods | Improve this Doc View Source DetachStream() Detaches a stream that was previously attached to the reader. Declaration public IInputStream DetachStream() Returns Type Description IInputStream The detached stream. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source FromBuffer(IBuffer) Creates a new instance of the data reader with data from the specified buffer. Declaration public static DataReader FromBuffer(IBuffer buffer) Parameters Type Name Description IBuffer buffer The buffer. Returns Type Description DataReader The data reader. | Improve this Doc View Source Load(UInt32) Loads data from the input stream. Declaration public uint Load(uint count) Parameters Type Name Description UInt32 count The count of bytes to load into the intermediate buffer. Returns Type Description UInt32 The operation. | Improve this Doc View Source ReadBoolean() Reads a Boolean value from the input stream. Declaration public bool ReadBoolean() Returns Type Description Boolean The value. | Improve this Doc View Source ReadBuffer(UInt32) Reads a buffer from the input stream. Declaration public IBuffer ReadBuffer(uint length) Parameters Type Name Description UInt32 length The length of the buffer, in bytes. Returns Type Description IBuffer The buffer. | Improve this Doc View Source ReadByte() Reads a byte value from the input stream. Declaration public byte ReadByte() Returns Type Description Byte The value. | Improve this Doc View Source ReadBytes(Byte[]) Reads an array of byte values from the input stream. Declaration public void ReadBytes(byte[] value) Parameters Type Name Description Byte [] value The array of values. | Improve this Doc View Source ReadDateTime() Reads a date and time value from the input stream. Declaration public DateTime ReadDateTime() Returns Type Description DateTime The value. | Improve this Doc View Source ReadDouble() Reads a floating-point value from the input stream. Declaration public double ReadDouble() Returns Type Description Double The value. | Improve this Doc View Source ReadGuid() Reads a GUID value from the input stream. Declaration public Guid ReadGuid() Returns Type Description Guid The value. | Improve this Doc View Source ReadInt16() Reads a 16-bit integer value from the input stream. Declaration public short ReadInt16() Returns Type Description Int16 The value. | Improve this Doc View Source ReadInt32() Reads a 32-bit integer value from the input stream. Declaration public int ReadInt32() Returns Type Description Int32 The value. | Improve this Doc View Source ReadInt64() Reads a 64-bit integer value from the input stream. Declaration public long ReadInt64() Returns Type Description Int64 The value. | Improve this Doc View Source ReadSingle() Reads a floating-point value from the input stream. Declaration public float ReadSingle() Returns Type Description Single The value. | Improve this Doc View Source ReadString(UInt32) Reads a string value from the input stream. Declaration public string ReadString(uint codeUnitCount) Parameters Type Name Description UInt32 codeUnitCount The length of the string. Returns Type Description String The value. | Improve this Doc View Source ReadTimeSpan() Reads a time interval from the input stream. Declaration public TimeSpan ReadTimeSpan() Returns Type Description TimeSpan The value. | Improve this Doc View Source ReadUInt16() Reads a 16-bit unsigned integer from the input stream. Declaration public ushort ReadUInt16() Returns Type Description UInt16 The value. | Improve this Doc View Source ReadUInt32() Reads a 32-bit unsigned integer from the input stream. Declaration public uint ReadUInt32() Returns Type Description UInt32 The value. | Improve this Doc View Source ReadUInt64() Reads a 64-bit unsigned integer from the input stream. Declaration public ulong ReadUInt64() Returns Type Description UInt64 The value. Implements IDisposable IDataReader"
  },
  "api/Windows.Storage.Streams.DataWriter.html": {
    "href": "api/Windows.Storage.Streams.DataWriter.html",
    "title": "Class DataWriter | nanoFramework Documentation",
    "keywords": "Class DataWriter Writes data to an output stream. Inheritance Object MarshalByRefObject DataWriter Implements IDisposable IDataWriter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public sealed class DataWriter : MarshalByRefObject, IDisposable, IDataWriter Constructors | Improve this Doc View Source DataWriter() Creates and initializes a new instance of the data writer. Declaration public DataWriter() | Improve this Doc View Source DataWriter(IOutputStream) Creates and initializes a new instance of the data writer to an output stream. Declaration public DataWriter(IOutputStream outputStream) Parameters Type Name Description IOutputStream outputStream The new output stream instance. Properties | Improve this Doc View Source ByteOrder Gets or sets the byte order of the data in the output stream. Declaration public ByteOrder ByteOrder { get; } Property Value Type Description ByteOrder One of the enumeration values. Remarks nanoFramework doesn't this feature. ByteOrder is always LittleEndian . | Improve this Doc View Source UnicodeEncoding Gets or sets the Unicode character encoding for the output stream. Declaration public UnicodeEncoding UnicodeEncoding { get; } Property Value Type Description UnicodeEncoding One of the enumeration values. Remarks nanoFramework doesn't this feature. UnicodeEncoding is always Utf8 . | Improve this Doc View Source UnstoredBufferLength Gets the size of the buffer that has not been used. Declaration public uint UnstoredBufferLength { get; } Property Value Type Description UInt32 The available buffer length, in bytes. Methods | Improve this Doc View Source DetachBuffer() Detaches the buffer that is associated with the data writer. Declaration public IBuffer DetachBuffer() Returns Type Description IBuffer The detached buffer. | Improve this Doc View Source DetachStream() Detaches a stream that was previously attached to the data writer. Declaration public IOutputStream DetachStream() Returns Type Description IOutputStream The detached stream. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Flush() Flushes data. Declaration public bool Flush() Returns Type Description Boolean The stream flush operation. Remarks The Flush method ensures that the data has reached the target storage medium that the stream represents. For example, to improve application responsiveness and throughput, a file stream might respond to a write operation by copying the buffer into another temporary storage medium and returning immediately, while the target device begins writing the data concurrently. The Flush method doesn't complete until all data specified in previous write calls has reached the target storage medium. If the data can't be written, or an error occurred during a write operation, the method returns false. The Flush method may produce latencies and does not always guarantee durable and coherent storage of data.It's generally recommended to avoid this method if possible. This method is specific to nanoFramework. The equivalent method in the UWP API is: FlushAsync. | Improve this Doc View Source MeasureString(String) Gets the size of a string. Declaration public uint MeasureString(string value) Parameters Type Name Description String value The string. Returns Type Description UInt32 The size of the string, in bytes. | Improve this Doc View Source Store() Commits data in the buffer to a backing store. Declaration public uint Store() Returns Type Description UInt32 The store data operation. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: StoreAsync. | Improve this Doc View Source WriteBoolean(Boolean) Writes a Boolean value to the output stream. Declaration public void WriteBoolean(bool value) Parameters Type Name Description Boolean value The value to write. | Improve this Doc View Source WriteBuffer(IBuffer) Writes a number of bytes from a buffer to the output stream. Declaration public void WriteBuffer(IBuffer buffer) Parameters Type Name Description IBuffer buffer The value to write. | Improve this Doc View Source WriteBuffer(IBuffer, UInt32, UInt32) Writes a range of bytes from a buffer to the output stream. Declaration public void WriteBuffer(IBuffer buffer, uint start, uint count) Parameters Type Name Description IBuffer buffer The buffer. UInt32 start The starting byte to be written. UInt32 count The number of bytes to write. | Improve this Doc View Source WriteByte(Byte) Writes a byte value to the output stream. Declaration public void WriteByte(byte value) Parameters Type Name Description Byte value The value to write. | Improve this Doc View Source WriteBytes(Byte[]) Writes an array of byte values to the output stream. Declaration public void WriteBytes(byte[] value) Parameters Type Name Description Byte [] value The value to write. | Improve this Doc View Source WriteDateTime(DateTime) Writes a date and time value to the output stream. Declaration public void WriteDateTime(DateTime value) Parameters Type Name Description DateTime value The value to write. | Improve this Doc View Source WriteDouble(Double) Writes a floating-point value to the output stream. Declaration public void WriteDouble(double value) Parameters Type Name Description Double value The value to write. | Improve this Doc View Source WriteGuid(Guid) Writes a GUID value to the output stream. Declaration public void WriteGuid(Guid value) Parameters Type Name Description Guid value The value to write. | Improve this Doc View Source WriteInt16(Int16) Writes a 16-bit integer value to the output stream. Declaration public void WriteInt16(short value) Parameters Type Name Description Int16 value The value to write. | Improve this Doc View Source WriteInt32(Int32) Writes a 32-bit integer value to the output stream. Declaration public void WriteInt32(int value) Parameters Type Name Description Int32 value The value to write. | Improve this Doc View Source WriteInt64(Int64) Writes a 64-bit integer value to the output stream. Declaration public void WriteInt64(long value) Parameters Type Name Description Int64 value The value to write. | Improve this Doc View Source WriteSingle(Single) Write a floating-point value to the output stream. Declaration public void WriteSingle(float value) Parameters Type Name Description Single value The value to write. | Improve this Doc View Source WriteString(String) Writes a string value to the output stream. Declaration public uint WriteString(string value) Parameters Type Name Description String value The value to write. Returns Type Description UInt32 The length of the string. | Improve this Doc View Source WriteTimeSpan(TimeSpan) Writes a time interval value to the output stream. Declaration public void WriteTimeSpan(TimeSpan value) Parameters Type Name Description TimeSpan value The value to write. | Improve this Doc View Source WriteUInt16(UInt16) Writes a 16-bit unsigned integer value to the output stream. Declaration public void WriteUInt16(ushort value) Parameters Type Name Description UInt16 value The value to write. | Improve this Doc View Source WriteUInt32(UInt32) Writes a 32-bit unsigned integer value to the output stream. Declaration public void WriteUInt32(uint value) Parameters Type Name Description UInt32 value The value to write. | Improve this Doc View Source WriteUInt64(UInt64) Writes a 64-bit unsigned integer value to the output stream. Declaration public void WriteUInt64(ulong value) Parameters Type Name Description UInt64 value The value to write. Implements IDisposable IDataWriter"
  },
  "api/Windows.Storage.Streams.html": {
    "href": "api/Windows.Storage.Streams.html",
    "title": "Namespace Windows.Storage.Streams | nanoFramework Documentation",
    "keywords": "Namespace Windows.Storage.Streams Classes DataReader DataWriter Writes data to an output stream. InMemoryRandomAccessStream Provides random access of data in input and output streams that are stored in memory instead of on disk. Interfaces IBuffer Represents a referenced array of bytes used by byte stream read and write interfaces. Buffer is the class implementation of this interface. IDataReader Provides read access to an input stream. IDataWriter Provides write access to an output stream. IInputStream Represents a sequential stream of bytes to be read. IOutputStream Represents a sequential stream of bytes to be written. IRandomAccessStream Supports random access of data in input and output streams. Enums ByteOrder Specifies the byte order of a stream. InputStreamOptions Specifies the read options for an input stream. UnicodeEncoding Specifies the type of character encoding for a stream."
  },
  "api/Windows.Storage.Streams.IBuffer.html": {
    "href": "api/Windows.Storage.Streams.IBuffer.html",
    "title": "Interface IBuffer | nanoFramework Documentation",
    "keywords": "Interface IBuffer Represents a referenced array of bytes used by byte stream read and write interfaces. Buffer is the class implementation of this interface. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IBuffer Properties | Improve this Doc View Source Capacity Gets the maximum number of bytes that the buffer can hold. Declaration uint Capacity { get; } Property Value Type Description UInt32 The maximum number of bytes that the buffer can hold. | Improve this Doc View Source Length Gets the number of bytes currently in use in the buffer. Declaration uint Length { get; set; } Property Value Type Description UInt32 The number of bytes currently in use in the buffer which is less than or equal to the capacity of the buffer."
  },
  "api/Windows.Storage.Streams.IDataReader.html": {
    "href": "api/Windows.Storage.Streams.IDataReader.html",
    "title": "Interface IDataReader | nanoFramework Documentation",
    "keywords": "Interface IDataReader Provides read access to an input stream. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IDataReader Properties | Improve this Doc View Source ByteOrder Gets or sets the byte order of the data in the input stream. Declaration ByteOrder ByteOrder { get; } Property Value Type Description ByteOrder One of the enumeration values. Remarks nanoFramework doesn't this feature. ByteOrder is always LittleEndian . | Improve this Doc View Source InputStreamOptions Gets or sets the read options for the input stream. Declaration InputStreamOptions InputStreamOptions { get; set; } Property Value Type Description InputStreamOptions One of the enumeration values. | Improve this Doc View Source UnconsumedBufferLength Gets the size of the buffer that has not been read. Declaration uint UnconsumedBufferLength { get; } Property Value Type Description UInt32 The size of the buffer that has not been read, in bytes. | Improve this Doc View Source UnicodeEncoding Gets or sets the Unicode character encoding for the input stream. Declaration UnicodeEncoding UnicodeEncoding { get; } Property Value Type Description UnicodeEncoding One of the enumeration values. Remarks nanoFramework doesn't this feature. UnicodeEncoding is always Utf8 . Methods | Improve this Doc View Source DetachStream() Detaches a stream that was previously attached to the reader. Declaration IInputStream DetachStream() Returns Type Description IInputStream The detached stream. | Improve this Doc View Source Load(UInt32) Loads data from the input stream. Declaration uint Load(uint count) Parameters Type Name Description UInt32 count The count of bytes to load into the intermediate buffer. Returns Type Description UInt32 The asynchronous operation. | Improve this Doc View Source ReadBoolean() Reads a Boolean value from the input stream. Declaration bool ReadBoolean() Returns Type Description Boolean The value. | Improve this Doc View Source ReadBuffer(UInt32) Reads a buffer from the input stream. Declaration IBuffer ReadBuffer(uint length) Parameters Type Name Description UInt32 length The length of the buffer, in bytes. Returns Type Description IBuffer The buffer. | Improve this Doc View Source ReadByte() Reads a byte value from the input stream. Declaration byte ReadByte() Returns Type Description Byte The value. | Improve this Doc View Source ReadBytes(Byte[]) Reads an array of byte values from the input stream. Declaration void ReadBytes(byte[] value) Parameters Type Name Description Byte [] value The array of values. | Improve this Doc View Source ReadDateTime() Reads a date and time value from the input stream. Declaration DateTime ReadDateTime() Returns Type Description DateTime The value. | Improve this Doc View Source ReadDouble() Reads a floating-point value from the input stream. Declaration double ReadDouble() Returns Type Description Double The value. | Improve this Doc View Source ReadGuid() Reads a GUID value from the input stream. Declaration Guid ReadGuid() Returns Type Description Guid The value. | Improve this Doc View Source ReadInt16() Reads a 16-bit integer value from the input stream. Declaration short ReadInt16() Returns Type Description Int16 The value. | Improve this Doc View Source ReadInt32() Reads a 32-bit integer value from the input stream. Declaration int ReadInt32() Returns Type Description Int32 The value. | Improve this Doc View Source ReadInt64() Reads a 64-bit integer value from the input stream. Declaration long ReadInt64() Returns Type Description Int64 The value. | Improve this Doc View Source ReadSingle() Reads a floating-point value from the input stream. Declaration float ReadSingle() Returns Type Description Single The value. | Improve this Doc View Source ReadString(UInt32) Reads a string value from the input stream. Declaration string ReadString(uint codeUnitCount) Parameters Type Name Description UInt32 codeUnitCount The length of the string. Returns Type Description String The value. | Improve this Doc View Source ReadTimeSpan() Reads a time interval from the input stream. Declaration TimeSpan ReadTimeSpan() Returns Type Description TimeSpan The value. | Improve this Doc View Source ReadUInt16() Reads a 16-bit unsigned integer from the input stream. Declaration ushort ReadUInt16() Returns Type Description UInt16 The value. | Improve this Doc View Source ReadUInt32() Reads a 32-bit unsigned integer from the input stream. Declaration uint ReadUInt32() Returns Type Description UInt32 The value. | Improve this Doc View Source ReadUInt64() Reads a 64-bit unsigned integer from the input stream. Declaration ulong ReadUInt64() Returns Type Description UInt64 The value."
  },
  "api/Windows.Storage.Streams.IDataWriter.html": {
    "href": "api/Windows.Storage.Streams.IDataWriter.html",
    "title": "Interface IDataWriter | nanoFramework Documentation",
    "keywords": "Interface IDataWriter Provides write access to an output stream. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IDataWriter Properties | Improve this Doc View Source ByteOrder Gets or sets the byte order of the data in the output stream. Declaration ByteOrder ByteOrder { get; } Property Value Type Description ByteOrder One of the enumeration values. Remarks nanoFramework doesn't this feature. ByteOrder is always LittleEndian . | Improve this Doc View Source UnicodeEncoding Gets or sets the Unicode character encoding for the output stream. Declaration UnicodeEncoding UnicodeEncoding { get; } Property Value Type Description UnicodeEncoding One of the enumeration values. Remarks nanoFramework doesn't this feature. UnicodeEncoding is always Utf8 . | Improve this Doc View Source UnstoredBufferLength Gets the size of the buffer that has not been used. Declaration uint UnstoredBufferLength { get; } Property Value Type Description UInt32 The available buffer length, in bytes. Methods | Improve this Doc View Source DetachBuffer() Detaches the buffer that is associated with the data writer. Declaration IBuffer DetachBuffer() Returns Type Description IBuffer The detached buffer. | Improve this Doc View Source DetachStream() Detaches a stream that was previously attached to the writer. Declaration IOutputStream DetachStream() Returns Type Description IOutputStream The detached stream. | Improve this Doc View Source Flush() Flushes data. Declaration bool Flush() Returns Type Description Boolean The stream flush operation. Remarks The Flush method ensures that the data has reached the target storage medium that the stream represents. For example, to improve application responsiveness and throughput, a file stream might respond to a write operation by copying the buffer into another temporary storage medium and returning immediately, while the target device begins writing the data concurrently. The Flush method doesn't complete until all data specified in previous write calls has reached the target storage medium. If the data can't be written, or an error occurred during a write operation, the method returns false. The Flush method may produce latencies and does not always guarantee durable and coherent storage of data.It's generally recommended to avoid this method if possible. | Improve this Doc View Source MeasureString(String) Gets the size of a string. Declaration uint MeasureString(string value) Parameters Type Name Description String value The string. Returns Type Description UInt32 The size of the string, in bytes. | Improve this Doc View Source Store() Commits data in the buffer to a backing store. Declaration uint Store() Returns Type Description UInt32 The store data operation. | Improve this Doc View Source WriteBoolean(Boolean) Writes a Boolean value to the output stream. Declaration void WriteBoolean(bool value) Parameters Type Name Description Boolean value The value to write. | Improve this Doc View Source WriteBuffer(IBuffer) Writes a number of bytes from a buffer to the output stream. Declaration void WriteBuffer(IBuffer buffer) Parameters Type Name Description IBuffer buffer The value to write. | Improve this Doc View Source WriteBuffer(IBuffer, UInt32, UInt32) Writes a range of bytes from a buffer to the output stream. Declaration void WriteBuffer(IBuffer buffer, uint start, uint count) Parameters Type Name Description IBuffer buffer The buffer. UInt32 start The starting byte to be written. UInt32 count The number of bytes to write. | Improve this Doc View Source WriteByte(Byte) Writes a byte value to the output stream. Declaration void WriteByte(byte value) Parameters Type Name Description Byte value The value to write. | Improve this Doc View Source WriteBytes(Byte[]) Writes an array of byte values to the output stream. Declaration void WriteBytes(byte[] value) Parameters Type Name Description Byte [] value The value to write. | Improve this Doc View Source WriteDateTime(DateTime) Writes a date and time value to the output stream. Declaration void WriteDateTime(DateTime value) Parameters Type Name Description DateTime value The value to write. | Improve this Doc View Source WriteDouble(Double) Writes a floating-point value to the output stream. Declaration void WriteDouble(double value) Parameters Type Name Description Double value The value to write. | Improve this Doc View Source WriteGuid(Guid) Writes a GUID value to the output stream. Declaration void WriteGuid(Guid value) Parameters Type Name Description Guid value The value to write. | Improve this Doc View Source WriteInt16(Int16) Writes a 16-bit integer value to the output stream. Declaration void WriteInt16(short value) Parameters Type Name Description Int16 value The value to write. | Improve this Doc View Source WriteInt32(Int32) Writes a 32-bit integer value to the output stream. Declaration void WriteInt32(int value) Parameters Type Name Description Int32 value The value to write. | Improve this Doc View Source WriteInt64(Int64) Writes a 64-bit integer value to the output stream. Declaration void WriteInt64(long value) Parameters Type Name Description Int64 value The value to write. | Improve this Doc View Source WriteSingle(Single) Write a floating-point value to the output stream. Declaration void WriteSingle(float value) Parameters Type Name Description Single value The value to write. | Improve this Doc View Source WriteString(String) Writes a string value to the output stream. Declaration uint WriteString(string value) Parameters Type Name Description String value The value to write. Returns Type Description UInt32 The length of the string. | Improve this Doc View Source WriteTimeSpan(TimeSpan) Writes a time interval value to the output stream. Declaration void WriteTimeSpan(TimeSpan value) Parameters Type Name Description TimeSpan value The value to write. | Improve this Doc View Source WriteUInt16(UInt16) Writes a 16-bit unsigned integer value to the output stream. Declaration void WriteUInt16(ushort value) Parameters Type Name Description UInt16 value The value to write. | Improve this Doc View Source WriteUInt32(UInt32) Writes a 32-bit unsigned integer value to the output stream. Declaration void WriteUInt32(uint value) Parameters Type Name Description UInt32 value The value to write. | Improve this Doc View Source WriteUInt64(UInt64) Writes a 64-bit unsigned integer value to the output stream. Declaration void WriteUInt64(ulong value) Parameters Type Name Description UInt64 value The value to write."
  },
  "api/Windows.Storage.Streams.IInputStream.html": {
    "href": "api/Windows.Storage.Streams.IInputStream.html",
    "title": "Interface IInputStream | nanoFramework Documentation",
    "keywords": "Interface IInputStream Represents a sequential stream of bytes to be read. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IInputStream Methods | Improve this Doc View Source Read(IBuffer, UInt32, InputStreamOptions) Reads data from the stream. Declaration uint Read(IBuffer buffer, uint count, InputStreamOptions options) Parameters Type Name Description IBuffer buffer A buffer that is used to return the array of bytes that are read. The return value contains the buffer that holds the results. UInt32 count The number of bytes to read that is less than or equal to the Capacity value. InputStreamOptions options Specifies the type of the asynchronous read operation. Returns Type Description UInt32 The number of bytes that were actually read. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: ReadAsync(IBuffer buffer, UInt32 count, InputStreamOptions options)."
  },
  "api/Windows.Storage.Streams.InMemoryRandomAccessStream.html": {
    "href": "api/Windows.Storage.Streams.InMemoryRandomAccessStream.html",
    "title": "Class InMemoryRandomAccessStream | nanoFramework Documentation",
    "keywords": "Class InMemoryRandomAccessStream Provides random access of data in input and output streams that are stored in memory instead of on disk. Inheritance Object MarshalByRefObject InMemoryRandomAccessStream Implements IRandomAccessStream IDisposable IInputStream IOutputStream Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public sealed class InMemoryRandomAccessStream : MarshalByRefObject, IRandomAccessStream, IDisposable, IInputStream, IOutputStream Constructors | Improve this Doc View Source InMemoryRandomAccessStream() Creates a new instance of the InMemoryRandomAccessStream class. Declaration public InMemoryRandomAccessStream() Properties | Improve this Doc View Source CanRead Gets a value that indicates whether the stream can be read from. Declaration public bool CanRead { get; } Property Value Type Description Boolean True if the stream can be read from. Otherwise, false. | Improve this Doc View Source CanWrite Gets a value that indicates whether the stream can be written to. Declaration public bool CanWrite { get; } Property Value Type Description Boolean True if the stream can be written to. Otherwise, false. | Improve this Doc View Source Length Gets the number of bytes currently in use in the buffer. Declaration public ulong Length { get; } Property Value Type Description UInt64 he number of bytes currently in use in the buffer, which is less than or equal to the capacity of the buffer. | Improve this Doc View Source Position Gets the byte offset of the stream. Declaration public ulong Position { get; } Property Value Type Description UInt64 The number of bytes from the start of the stream. Remarks The initial offset of a IRandomAccessStream is 0. This offset is affected by both IInputStream and IOutputStream operations. | Improve this Doc View Source Size Gets or sets the size of the random access stream. Declaration public ulong Size { get; set; } Property Value Type Description UInt64 The size of the stream. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Flush() Flushes data in a sequential stream. Declaration public bool Flush() Returns Type Description Boolean The stream flush operation. Remarks The Flush method may produce latencies and does not always guarantee durable and coherent storage of data. It's generally recommended to avoid this method if possible. This method is specific to nanoFramework. The equivalent method in the UWP API is: FlushAsync. | Improve this Doc View Source Read(IBuffer, UInt32, InputStreamOptions) Reads data from the stream. Declaration public uint Read(IBuffer buffer, uint count, InputStreamOptions options) Parameters Type Name Description IBuffer buffer A buffer that is used to return the array of bytes that are read. The return value contains the buffer that holds the results. UInt32 count The number of bytes to read that is less than or equal to the Capacity value. InputStreamOptions options Specifies the type of the asynchronous read operation. Returns Type Description UInt32 The number of bytes that were actually read. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: ReadAsync(IBuffer buffer, UInt32 count, InputStreamOptions options). | Improve this Doc View Source Seek(UInt64) Sets the position of the stream to the specified value. Declaration public void Seek(ulong position) Parameters Type Name Description UInt64 position The new position of the stream. Remarks Warning! This method does not check the position to make sure the value is valid for the stream. If the position is invalid for the stream, the ReadAsync and WriteAsync methods will return an error if you call them. | Improve this Doc View Source Write(Byte[]) Writes data in a sequential stream. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer A buffer that contains the data to be written. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: WriteAsync. Implements IRandomAccessStream IDisposable IInputStream IOutputStream"
  },
  "api/Windows.Storage.Streams.InputStreamOptions.html": {
    "href": "api/Windows.Storage.Streams.InputStreamOptions.html",
    "title": "Enum InputStreamOptions | nanoFramework Documentation",
    "keywords": "Enum InputStreamOptions Specifies the read options for an input stream. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public enum InputStreamOptions Fields Name Description None No options are specified. Partial The asynchronous read operation completes when one or more bytes is available. ReadAhead The asynchronous read operation may optionally read ahead and prefetch additional bytes."
  },
  "api/Windows.Storage.Streams.IOutputStream.html": {
    "href": "api/Windows.Storage.Streams.IOutputStream.html",
    "title": "Interface IOutputStream | nanoFramework Documentation",
    "keywords": "Interface IOutputStream Represents a sequential stream of bytes to be written. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IOutputStream Methods | Improve this Doc View Source Flush() Flushes data in a sequential stream. Declaration bool Flush() Returns Type Description Boolean The stream flush operation. Remarks The Flush method may produce latencies and does not always guarantee durable and coherent storage of data. It's generally recommended to avoid this method if possible. This method is specific to nanoFramework. The equivalent method in the UWP API is: FlushAsync. | Improve this Doc View Source Write(Byte[]) Writes data in a sequential stream. Declaration void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer A byte array buffer that contains the data to be written. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: WriteAsync(IBuffer buffer)."
  },
  "api/Windows.Storage.Streams.IRandomAccessStream.html": {
    "href": "api/Windows.Storage.Streams.IRandomAccessStream.html",
    "title": "Interface IRandomAccessStream | nanoFramework Documentation",
    "keywords": "Interface IRandomAccessStream Supports random access of data in input and output streams. Inherited Members IDisposable.Dispose() IInputStream.Read(IBuffer, UInt32, InputStreamOptions) IOutputStream.Flush() IOutputStream.Write(Byte[]) Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IRandomAccessStream : IDisposable, IInputStream, IOutputStream Properties | Improve this Doc View Source CanRead Gets a value that indicates whether the stream can be read from. Declaration bool CanRead { get; } Property Value Type Description Boolean True if the stream can be read from. Otherwise, false. | Improve this Doc View Source CanWrite Gets a value that indicates whether the stream can be written to. Declaration bool CanWrite { get; } Property Value Type Description Boolean True if the stream can be written to. Otherwise, false. | Improve this Doc View Source Position Gets the byte offset of the stream. Declaration ulong Position { get; } Property Value Type Description UInt64 The number of bytes from the start of the stream. Remarks The initial offset of a IRandomAccessStream is 0. This offset is affected by both IInputStream and IOutputStream operations. | Improve this Doc View Source Size Gets or sets the size of the random access stream. Declaration ulong Size { get; set; } Property Value Type Description UInt64 The size of the stream. Methods | Improve this Doc View Source Seek(UInt64) Sets the position of the stream to the specified value. Declaration void Seek(ulong position) Parameters Type Name Description UInt64 position The new position of the stream. Remarks Warning! This method does not check the position to make sure the value is valid for the stream. If the position is invalid for the stream, the ReadAsync and WriteAsync methods will return an error if you call them."
  },
  "api/Windows.Storage.Streams.UnicodeEncoding.html": {
    "href": "api/Windows.Storage.Streams.UnicodeEncoding.html",
    "title": "Enum UnicodeEncoding | nanoFramework Documentation",
    "keywords": "Enum UnicodeEncoding Specifies the type of character encoding for a stream. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public enum UnicodeEncoding Remarks nanoFramework API only supports UTF8 encoding. Fields Name Description Utf8 The encoding is UTF-8."
  },
  "content/architecture/class-libraries.html": {
    "href": "content/architecture/class-libraries.html",
    "title": "Class Libraries | nanoFramework Documentation",
    "keywords": "Class Libraries About this document This document describes the design and organization of nanoFramework Class Libraries, offers some explanation on the choices that were made and how to add a new Class Library. The examples bellow are related with ChibiOS (which is the currently reference implementation for nanoFramework ). Libraries Follow the list of the existing libraries, respective Nuget package and CMake enable option: Class Library Nuget package name CMake option Base Class Library (also know as mscorlib) nanoFramework.CoreLibrary (always included) nanoFramework.Hardware.Esp32 nanoFramework.Hardware.Esp32 -DAPI_Hardware.Esp32=ON nanoFramework.Runtime.Events nanoFramework.Runtime.Events (always included) nanoFramework.Runtime.Native nanoFramework.Runtime.Native (always included) nanoFramework.Runtime.Sntp nanoFramework.Runtime.Sntp (included when network option is ON) Windows.Devices.Adc nanoFramework.Windows.Devices.Adc -DAPI_Windows.Devices.Adc=ON Windows.Devices.I2c nanoFramework.Windows.Devices.I2c -DAPI_Windows.Devices.I2c=ON Windows.Device.Gpio nanoFramework.Windows.Devices.Gpio -DAPI_Windows.Devices.Gpio=ON Windows.Devices.Pwm nanoFramework.Windows.Devices.Pwm -DAPI_Windows.Devices.Pwm=ON Windows.Devices.SerialCommunication nanoFramework.Windows.Devices.SerialCommunication -DAPI_Windows.Devices.SerialCommunication=ON Windows.Devices.Spi nanoFramework.Windows.Devices.Spi -DAPI_Windows.Devices.Spi=ON Windows.Devices.WiFi nanoFramework.Windows.Devices.WiFi -DAPI_Windows.Devices.WiFi=ON Windows.Networking.Sockets nanoFramework.Windows.Networking.Sockets -DAPI_Windows.Networking.Sockets=ON Windows.Storage nanoFramework.Windows.Storage -DNF_FEATURE_HAS_SDCARD=ON and/or -DNF_FEATURE_HAS_USB_MSD=ON Windows.Storage.Streams nanoFramework.Windows.Storage.Streams -DAPI_=ON System.Net nanoFramework.Windows.System.Net -DAPI_System.Net=ON Distribution strategy To ease the burden of distributing and updating the class libraries we've choose to use Nuget to handle all this. It has the added benefit of dealing with the dependency management, version and such. So, for each class library, there is a Nuget package that includes the assembly and documentation files. The Nuget package takes care of making sure that the required dependency(ies) and correct version(s) are added to a managed (C#) project, making a developer's life much easier. How to add a new class library Follows the procedure to add a new class library to a nanoFramework target image. The example is for adding Windows.Devices.Gpio library. In VS2017 start a new project for a nanoFramework C# Class library. Source code here Implement all the required methods, enums, properties in that project. It's recommended that you add XML comments there (and enable the automated documentation generation in the project properties). Add the Nuget packaging project to distribute the managed assembly and documentation. We have a second Nuget package that includes all the build artifacts, generated stubs, dump files and such. This is to be used in automated testing and distribution of followup projects or build steps. Upon a successfully build of the managed project the skeleton with the stubs should be available in the respective folder. Because nanoFramework aims to be target independent, the native implementation of a class library can be split in two parts: Declaration and common code bits (these always exist) inside the src folder. The specific implementation bits that are platform dependent and that will live 'inside' each platform RTOS folder. The next step would be to copy the stubs to a folder with the assembly name inside the src folder. Following the example above, these are: - Common Windows.Devices.Gpio . - ChibiOS Windows.Devices.Gpio . - ESP32 FreeRTOS Windows.Devices.Gpio . - TI-RTOS Windows.Devices.Gpio . Add the CMake as a module to the modules folder here . The name of the module should follow the assembly name (Find Windows.Devices.Gpio .cmake). Mind the CMake rules for the naming: start with Find followed by the module name and cmake extension. The CMake for the Windows.Devices.Gpio module is here . In the CMake NF_NativeAssemblies.cmake add an option for the API. The option name must follow the pattern API_ namespace . The option for Windows.Devices.Gpio is API_Windows.Devices.Gpio. In the CMake NF_NativeAssemblies.cmake find the macro ParseApiOptions and add a block for the API. Just copy/paste an existing one and replace the namespace with the one that you are adding. Update the template file for the CMake variants here to include the respective option. For the Windows.Devices.Gpio example you would add to the OPTION1... and OPTION2... (under linkage ) the following line: \"API_Windows.Devices.Gpio\" : \"OFF\" If the API requires enabling hardware or SoC peripherals in the target HAL/PAL make the required changes to the appropriate files. For Windows.Devices.Gpio in ChibiOS there is nothing to enable because the GPIO subsystem is always enabled. In contrast, for the Windows.Devices.Spi, the SPI subsystem has to be enabled at the halconf.h file and also (at driver level) in mcuconf.h the SPI peripherals have to be individually enabled (e.g. #define STM32_SPI_USE_SPI1 TRUE ). Note: To ease the overall configuration of an API and related hardware (and when it makes sense) the API option (API_Windows.Devices.Gpio) can be extended to automatically enable the HAL subsystem. This happens with the Windows.Devices.Spi API. The CMake option is mirrored in the general CMakeLists.txt in order to be used in CMakes and headers. This mirror property is HAL_USE_SPI_OPTION . It's being defined here and not in the individual halconf.h files as usual. To make this work the CMake property has to be added to the CMake template file of the platform target_platform.h.in . When adding/enabling new APIs and depending on how the drivers and the library are coded, some static variables will be added to the BSS RAM area. Because of that extra space that is taken by those variables the Managed Heap size may have to be adjusted to make room for those. To do this find the __clr_managed_heap_size__ in the general CMakeLists.txt of that target and decrease the value there as required. Some APIs depend of others. This happens for example with Windows.Devices.Gpio that requires nanoFramework.Runtime.Events in order to generate the interrupts for the changed pin values. To make this happen the option to include the required API(s) has to be enabled in the main CMakeLists.txt inside the if clause of the dependent API. Just like if the option was enabled at the CMake command line. Check this by searching for API_nanoFramework.Runtime.Events inside the if(API_Windows.Devices.Gpio) . How to include a class library in the build To include a class library in the build for a target image you have to add to the CMake an option for the API. For the Windows.Devices.Gpio example the option would be -DAPI_Windows.Devices.Gpio=ON . You can also add this to your own cmake-variants.json file. To exclude a class library just set the option to OFF or simply don't include it in the command."
  },
  "content/architecture/date-and-time.html": {
    "href": "content/architecture/date-and-time.html",
    "title": "Date and Time | nanoFramework Documentation",
    "keywords": "Date and Time About this document This document describes how nanoFramework handles Date & Time and the available option regarding this matter. UTC and local time Time (and date) is fundamental for the inner works of nanoFramework . But an application running on top of it can make use of it, or not, thus making relevant the discussion and evaluation of the related features and associated code. Because nanoFramework runs on constrained resources platforms inclusion of features that increase both RAM and FLASH usage has to be considered and evaluated. DateTime supports the use of Local and UTC times by its DateTime.Kind property. Supporting this requires adding several blocks such as: an API for setting the platform timezone, handling the huge number of available timezones, managing the daylight savings changes, manage conversion to/from the different kinds, etc. Considering all the above, nanoFramework addresses this matter providing the absolute minimal viable options. There is support for DateTime (obviously) but all DateTime are considered UTC. There is no support for DateTime.Kind.Local , setting timezone or converting to/from the different kinds. If an application requires this, it has to implement it at its own level. Time source The time base source is, by default, the SysTick available in the CMSIS RTOS API. This is the source of the time when a DateTime object is instantiated. Because almost all hardware platforms capable of running nanoFramework include an hardware RTC this peripheral can be used as the source for time objects. Note that for all other internals of nanoFramework the CMSIS RTOS API SysTick keeps being used as the time base. This option is exposed to the board designer by the NF_FEATURE_RTC configuration option. Setting it to ON when calling CMake brings in the RTC subsystem and all the calls to DateTime make use of the time base provided by this peripheral. RTC and hardware Leveraging the RTC hardware peripheral allows several interesting/valuable features: more accurate timekeeping (when compared with a regular timer); possibility for timekeeping in sleep/deep sleep modes; setting alarms to wake-up the system at a future time;"
  },
  "content/architecture/deployment.html": {
    "href": "content/architecture/deployment.html",
    "title": "Application deployment | nanoFramework Documentation",
    "keywords": "Application deployment About this document This document describes how a managed nanoFramework application is deployed to a target device. Deployment preparation The pre-requisites for deploying a managed nanoFramework application to a target device are very simple: a collection with the PE files for the target application and the referenced assemblies needs to be compiled. This collection of PE files is a blob with the binary contents of those files. Deployment The deployment stage consists on erasing the required deployment blocks on the device (FLASH sectors) and programming them with the blob containing the binary versions of the PE files. nanoFramework follows a simplified and high level approach to this. It's up to the programming application to manage the device memory, meaning that it will tell the device exactly where and what is going into the memory. Also there is no \"reuse\" of what might be already deployed on the device. All the PE files are always deployed. This has the advantage of not requiring the extra steps of reading back what's in the device, checking the exact versions and deciding if a certain PE file will fit on a flash block. The downside is that sometimes this causes unnecessary flash erase and write cycles. Considering that a typical modern SoC flash endurance limit is in the range of 100k to 1M cycles this is negligible and acceptable for a device used for development purposes."
  },
  "content/architecture/HAL.html": {
    "href": "content/architecture/HAL.html",
    "title": "HAL architecture | nanoFramework Documentation",
    "keywords": "HAL architecture About this document This document describes the nanoFramework HAL design, some explanation on the choices that were made and the options that are available to customize it."
  },
  "content/architecture/index.html": {
    "href": "content/architecture/index.html",
    "title": "nanoFramework Architecture | nanoFramework Documentation",
    "keywords": "nanoFramework Architecture Class Libraries Date and Time Application deployment Thread execution Native interrupt handlers Wire Protocol PE File format"
  },
  "content/architecture/memory-map-sructure.html": {
    "href": "content/architecture/memory-map-sructure.html",
    "title": "| nanoFramework Documentation",
    "keywords": "TBD"
  },
  "content/architecture/native-interrupt-handlers.html": {
    "href": "content/architecture/native-interrupt-handlers.html",
    "title": "Thread execution | nanoFramework Documentation",
    "keywords": "Thread execution About this document This document describes how thread execution works with the nanoFramework CLR. Native interrupt handlers The functions implementing interrupt handlers for native code need to be wrapped by the macros NATIVE_INTERRUPT_START and NATIVE_INTERRUPT_END that take care of setting/resetting the appropriate System_State flags."
  },
  "content/architecture/pe-file/AssemblyHeader.html": {
    "href": "content/architecture/pe-file/AssemblyHeader.html",
    "title": "AssemblyHeader (CLR_RECORD_ASSEMBLY) | nanoFramework Documentation",
    "keywords": "AssemblyHeader (CLR_RECORD_ASSEMBLY) The AssemblyHeader structure contains a number of verification markers and CRCs to validate the legitimacy of the assembly at runtime. Additionally, the Assembly header contains the location information for the MetadataTables and BLOB storage areas. The Structure of the AssemblyHeader is as follows: Name Type Description Marker uint8_t[8] Id marker for an assembly HeaderCRC uint32_t CRC32 of the AssemblyHeader structure itself AssemblyCRC uint32_t CRC32 of the complete assembly Flags AssemblyHeaderFlags Flags for the assembly NativeMethodsChecksum uint32_t Native Method Checksum PatchEntryOffset uint32_t Offset into ResourceData table of patch native method Version VersionInfo Version information data structure for this assembly AssemblyName uint16_t String table index for the Assembly's name StartOfTables uint32_t[16] Array of offsets into the PE file for the metadata tables NumPatchedMethods uint32_t (Deprecated) No longer used PaddingOfTables uint8_t[16] amount of alignment padding for each metadata table Field Details The following sections describe the individual fields of the AssemblyHeader structure. Marker The assembly marker is an eight character marker consisting of a string non zero terminated ASCII encoded characters. This is used to clearly identify a .NET nanoFramework PE file on disk and in memory at runtime. It also indicates the version of this data structure, thus any modifications to this structure in future releases MUST use a new marker string. For all released versions of nanoFramework this string is 'NFMRK1'. Header CRC ANSI X3.66 32 bit CRC for the AssemblyHeader. This is computed assuming the HeaderCRC and AssemblyCRC fields are 0. Assembly CRC ANSI X3.66 32 bit CRC for the entire contents of the Assembly PE data. This is computed assuming the HeaderCRC and AssemblyCRC fields are 0. Flags The flags property are meant to contain a bit flags value. They are not used in nanoFramework and were kept for historical reasons and structure compatibility. NativeMethodsChecksum The NativeMethodsChecksum is a unique value that is matched against the native methods table stored in the CLR firmware to ensure the methods match. The actual algorithm used for computing this checksum are documented in the [NativeMethodsChecksum Algorithm] document. Though, it worth noting that the actual algorithm doesn't matter. Nothing in the runtime will compute this value. The runtime only compares the assembly's value with the one for the native code registered for a given assembly to ensure they match. As long as the tool generating the assembly and the native method stubs header and code files use the same value then the actual algorithm is mostly irrelevant. The most important aspect of the algorithm chosen is that any change to any type or method signature of any type with native methods MUST generate a distinct checksum value. The current MetadataProcessor algorithm constructs a mangled string name for the native methods (used to generate the stubs), sorts them all and runs a CRC32 across them to get a distinct value. Since the CRC is based on the fully qualified method name and the types of all parameters any change of the signatures will generate a new value - denoting a mismatch. PatchEntryOffset The PatchEntryOffset field is an offset into the assemblies ResourceData blob table where native \"patch\" code exists. At runtime if this is not 0xFFFFFFFF then the CLR will compute a physical address of the start of the patch code and call the function located there. The function must be position independent and must have the following signature void PatchEntry() This is a very limited mechanism at present and ultimately requires deep knowledge of the underlying platform HAL/PAL etc... to be of any real use. Of special importance is the location of the assembly in physical memory as many micro controllers limit the memory addresses where executable code can reside. (i.e. internal flash or RAM only ) thus, this is not a generalized extensibility/dynamically loaded native code mechanism. Version The Version field holds the assembly's version number. (as opposed to the version of the AssemblyHeaderStructure itself). This is used by the debugger for version checks at deployment time. The runtime itself doesn't use versions to resolve references, as only one version of an assembly can be loaded at a time. Thus assembly references in the PE format don't include a version. AssemblyName String Table index for the name of the assembly StartOfTables Fixed array of offsets to the table data for each of the 16 different tables. The entries in this array are offsets from the start of the assembly header itself (e.g. the file seek offset if the PE image is from a file) Name nanoFramework Source Element Name Description AssemblyRef CLR_RECORD_ASSEMBLYREF Table of Assembly references TypeRef CLR_RECORD_TYPEREF Reference to a type in another assembly FieldRef CLR_RECORD_FIELDREF Reference to a field of a type in another assembly MethodRef CLR_RECORD_METHODREF Reference to a method of a type in another assembly TypeDef CLR_RECORD_TYPEDEF Type definition for a type in this assembly FieldDef CLR_RECORD_FIELDDEF Field definition for a type in this assembly MethodDef CLR_RECORD_METHODDEF Method definition for a type in this assembly Attributes CLR_RECORD_ATTRIBUTE Attribute types defined in this assembly TypeSpec CLR_RECORD_TYPESPEC TypeSpecifications (signatures) used in this assembly Resources CLR_RECORD_RESOURCE Resource items in a resource file bound to this assembly ResourcesData <blob> Blob table data for the resources Strings <blob> Blob table data for the strings Signatures <blob> Blob table data for the metadata signatures ByteCode <blob> Blob table data for the IL byte code instructions ResourcesFiles CLR_RECORD_RESOURCE_FILE Resource files descriptors for resource files bound to this assembly EndOfAssembly <N/A> Technically, this is not a table. Instead this entry contains the offset to the end of the assembly, which is useful for finding the next assembly in a DAT region PaddingOfTables For every table, a number of bytes that were padded to the end of the table to align the next table to a 32bit boundary. The start of each table is aligned to a 32bit boundary, and ends at a 32bit boundary. Some of these tables will, therefore, have no padding, and all will have values in the range [0-3]. This isn't the most compact form to hold this information, but it only costs 16 bytes/assembly. Trying to only align some of the tables is just much more hassle than it's worth. This field itself must also be aligned on a 32 bit boundary. This padding is used to compute the size of a given table (including the blob data) using the following formula: TableSize = StartOfTables[ tableindex + 1 ] - StartOfTables[ tableindex ] - PaddingOfTables[ tableindex ]"
  },
  "content/architecture/pe-file/AssemblyRefTableEntry.html": {
    "href": "content/architecture/pe-file/AssemblyRefTableEntry.html",
    "title": "AssemblyRefTableEntry (CLR_RECORD_ASSEMBLYREF) | nanoFramework Documentation",
    "keywords": "AssemblyRefTableEntry (CLR_RECORD_ASSEMBLYREF) The assembly Reference table contains references to other assemblies. The runtime will lookup the assembly by name and version when resolving the reference to an assembly header. The format of the AssemblyRefTableEntry is as follows: Name Type Description Name StringTableIndex index into the string table blob for the name of the referenced assembly {padding} uint16_t Unused padding (Must be 0) Version VersionInfo VersionInfo structure for the version of the assembly (Checked at runtime for an EXACT match)"
  },
  "content/architecture/pe-file/AttributeTableEntry.html": {
    "href": "content/architecture/pe-file/AttributeTableEntry.html",
    "title": "AttributeTableEntry (CLR_RECORD_ATTRIBUTE) | nanoFramework Documentation",
    "keywords": "AttributeTableEntry (CLR_RECORD_ATTRIBUTE) The Attribute table contains entries with the following structure Name Type Description OwnerType TableKind One of TableKind::TypeDef , TableKind::MethodDef , or TableKind::FieldDef OwnerIndex uint16_t Index into the table specified by OwnerType Constructor MethodRefOrMethodDef Binary token for a MethodRef or MethodDef that represents the constructor of the Attribute Data SigTableIndex Index into the signature table that defines the parts of the attribute Signature Table Usage (TODO: Define valid signature table sequences for an attribute)"
  },
  "content/architecture/pe-file/Common-PE-Types-and-Enumerations.html": {
    "href": "content/architecture/pe-file/Common-PE-Types-and-Enumerations.html",
    "title": "Philosophy | nanoFramework Documentation",
    "keywords": "Philosophy The PE File format is expressed in terms of a number of common types. In code these are generally realized as an enumeration, typedef or type alias of some sort o help ensure both clarity of code and correctness of use. This additional clarity and type safety is preferred over use of raw primitive types directly as they onvey no real meaning beyond their basic ranges making correct use of the code less obvious and more error prone. Table Index Many PE data structures store an index into a particular table index as a field. This table defines the type names used to store the index and which table it is an index into. Name underlying type Description StringTableIndex unsigned 16 bit integer Index into the string table (see: StringTables ) for more details) TypeDefTableIndex unsigned 16 bit integer Index into the type definition table TypeRefTableIndex unsigned 16 bit integer Index into the type reference table FieldDefTableIndex unsigned 16 bit integer Index into the field definition table MethodDefTableIndex unsigned 16 bit integer Index into the method definition table SigTableIndex unsigned 16 bit integer Index into the signature table (see: SignatureBlobs for more details) EmptyIndex Constant Since an index values are used to access members of a table and since (in C, C++, and many other languages) tables are indexed with the first element as index == 0 the value 0 is not useable as a constant to indicate \"none\" or \"null\". Thus a dedicated value is used for nanoFramework metadata tables. Any index with the value 0xFFFF is considered the EmptyIndex and this is normally defined as a manifest constant for the entire code base to test against. TableKind The TableKind enumeration identifies a specific table in the assembly metadata. Name Value Description AssemblyRef 0x0000 Assembly reference table TypeRef 0x0001 Type Reference Table FieldRef 0x0002 Field Reference table MethodRef 0x0003 Method Reference Table TypeDef 0x0004 Type Definition Table FieldDef 0x0005 Field Definition Table MethodDef 0x0006 Method Definition Table Attributes 0x0007 Attribute Table TypeSpec 0x0008 Type Specification Table Resources 0x0009 Resources Table ResourcesData 0x000A Resource Data Blob Table Strings 0x000B String Blob table Signatures 0x000C Signature Blob table ByteCode 0x000D IL Byte Code Stream Blob Table ResourcesFiles 0x000E Resource Files Table EndOfAssembly 0x000F End of Assembly Table (Used to quickly find the end of the assembly when scanning assemblies) Max 0x0010 End of enumeration valid enumeration values must be less than this value Miscellaneous Types Name underlying type Description MetadataOffset unsigned 16 bit integer Offset from the start of the IL instruction stream blob data MetadataPtr pointer to a const byte Pointer to the interior of the IL instruction stream blob data Tokens Many instructions in IL and fields of data structures contain a token. Tokens in IL Metadata reference some other piece of metadata in the assembly. Tokens contain the table the token refers to along with an index into the table into a single primitive integral value. In nanoFramework PE files there are two kinds of tokens MetadataToken and a more compact BinaryToken. Metadata Token A metadata token is an unsigned 32 bit value where the Most significant byte is the table kind and the least significant 16 bits are the table index (In nanoFramework PE format a table index is 16bits only thus there are 8 bits of unused data in a MetadataToken) Binary Token A Binary Token is a compact form of representing an index to one of two possible tables. Binary tokens are 16 but unsigned integers where the most significant bit is used to determine which of two possible tables the remaining 15 bits provide the index for. The following table provides the type name aliases for the various combinations of tables used in nanoFramework PE metadata. Name MSB==1 Table MSB==0 Table TypeRefOrAssemblyRef TypeRef AssemblyRef TypeRefOrTypeDef TypeRef TypeDef MethodRefOrMethodDef MethodRef MethodDef FieldRefOrFieldDef FieldRef FieldDef VersionInfo Many nanoFramework PE data structures include a version. The versions, when presented for readability are typically represented as a quad of 4 integer values separated by a '.' (i.e. 1.2.3.4) the following table defines the Version info structure used in the PE file to represent a version. Name Type Description Major unsigned 16 bit integer Major component of the common version quad Minor unsigned 16 bit integer Minor component of the common version quad Build unsigned 16 bit integer Build component of the common version quad Revision unsigned 16 bit integer Revision component of the common version quad DataType The DataType enumeration corresponds to the ECMA ELEMENT_TYPE_xxxx, however the actual numeric values are not the same as the interpreter uses only a reduced sub-set of the standard values. Name Description Void 0 byte void value Boolean 1 byte boolean value I1 8 bit signed integer U1 8 bit unsigned integer CHAR 16 bit UTF-16 character I2 16 bit signed integer U2 16 bit unsigned integer I4 32 bit signed integer U4 32 bit unsigned integer R4 32 bit IEEE-754 floating point value I8 64 bit signed integer U8 64 bit unsigned integer R8 64 bit IEEE-754 floating point value DateTime 8 bytes - Shortcut for System.DateTime TimeSpan 8 bytes - Shortcut for System.TimeSpan String 4 bytes - short cut for reference to System.String Object 4 bytes - Shortcut for reference to System.Object Class CLASS <class Token> ValueType VALUETYPE <class Token> SZArray Shortcut for single dimension zero lower bound array SZARRAY <type> ByRef BYREF <type>"
  },
  "content/architecture/pe-file/ExceptionHandlerTableEntry.html": {
    "href": "content/architecture/pe-file/ExceptionHandlerTableEntry.html",
    "title": "ExceptionHandlerTableEntry (CLR_RECORD_EH) | nanoFramework Documentation",
    "keywords": "ExceptionHandlerTableEntry (CLR_RECORD_EH) The Exception Handler table contains entries for the exception handling blocks within a method. If a method has the MethodDefFlags::HasExceptionHandlers flag set then the last byte of the ByteCode table for the method is the number of Exception handlers for the method. The exception handlers precede the count in the byte code stream (e.g. with a negative offset from the size). NOTE: This means that instances of this structure stored in a PE image may be stored at an address that is NOT correctly aligned for the structure. Thus consumers should always copy the data into a properly aligned buffer. REVIEW: In a future revision of the PE binary format this should be managed by inserting padding into the ByteCode stream so that copying and dealing with unaligned data isn't needed. Name Type Description Mode ExceptionHandlerMode Mode for the exception handler ClassToken( 1 ) TypeRefOrTypeDef Class token for the handler FilterStart MetadataOffset Offset into the IL ByteCode stream for the filter code TryStart MetadataOffset Offset into the IL ByteCode stream for the starting range this handler covers TryEnd MetadataOffset Offset into the IL ByteCode stream for the end of the range this handler covers HandlerStart MetadataOffset Offset into the IL ByteCode stream for the start of the exception handler HandlerEnd MetadataOffset Offset into the IL ByteCode stream for the end of the exception handler Notes The Mode, ClassToken and FilterStart form a discriminated union with the mode as the discriminator and the ClassToken and FilterStart sharing the same memory location. That is the ClassToken and FilterStart are representable as a C/C++ anonymous union. Start and End offsets are inclusive ExceptionHandlerMode The exception handler mode determines the specific mode for the exception handler, the base type for the enumeration is a uint16_t Name Value Description Catch 0x0000 Exception handler is a catch handler for a specific type CatchAll 0x0001 Exception handler catches all exceptions, regardless of type Finally 0x0002 Exception handler is a Finally block Filter 0x0003 Exception handler is a filter block"
  },
  "content/architecture/pe-file/FieldRefTableEntry.html": {
    "href": "content/architecture/pe-file/FieldRefTableEntry.html",
    "title": "FieldRefTableEntry (CLR_RECORD_FIELDREF) | nanoFramework Documentation",
    "keywords": "FieldRefTableEntry (CLR_RECORD_FIELDREF) The FieldRef Table consists of the following columns: Name Type Description Name StringTableIndex Index into the string table for the name of the type Container TypeRefTableIndex Index into the TypeRefTable for the type containing this field Sig SigTableIndex Index into signature table describing the type of this filed {padding} uint16_t Unused padding (Must be 0)"
  },
  "content/architecture/pe-file/index.html": {
    "href": "content/architecture/pe-file/index.html",
    "title": ".NET nanoFramework PE File Format | nanoFramework Documentation",
    "keywords": ".NET nanoFramework PE File Format The .NET nanoFramework PE data format is based on the ECMA-335 specification. Specifically sections II.22 - II.24. Due to the constraints of the systems nanoFramework targets the PE file format is not an exact match/implementation of the ECMA-335 specification. nanoFramework PE file format is essentially an extended subset of the format defined in ECMA-335. Major differences from ECMA-335 The number and size of the metadata tables is limited in nanoFramework to keep the overall memory footprint as low as possible. The Windows PE32/COFF header, tables and information is stripped out. Switch instruction branch table index is limited to 8 bits. Table indexes are limited to 12 bits. This also means that the metadata tokens are 16 bits and not 32 so the actual IL instruction stream is different for nanoFramework . Resources are handled in a very different manner with their own special table in the assembly header. File Data Structure The PE file starts with an Assembly header which is the top level structure of every nanoFramework PE file. On disk the AssemblyHeader structure is at offset 0 of the .PE file. On the device the AssemblyHeader is aligned at a 32 bit boundary within a well known ROM/FLASH region (the Deployment region) with the first assembly at offset 0 of the region. Immediately following the assembly header is the metadata table data. Since there are no fixed requirements that an assembly requires all possible tables or what the number of entries in each table will be, the exact size and location of the start of each table's data is entirely described within the header including the end of the assembly, which is used to compute the start location of any subsequent assemblies in memory. +-----------------+ <--- Aligned to 32 bit boundary in memory | AssemblyHeader | +-----------------+ | Metadata | +-----------------+ | { padding } | +-----------------+ <--- Aligned to 32 bit boundary in memory | AssemblyHeader | +-----------------+ | Metadata | +-----------------+ | { padding } | +-----------------+ <--- Aligned to 32 bit boundary in memory | ... | Structures for the other table entries AssemblyRef Table Attribute Table ExceptionHandler Table FieldRef Table MethodDef Table MethodRef Table Resources Table TypeDef Table TypeRef Table TypeSpec Table Common PE Types and Enumerations Note: the documentation for the PE file format was taken from the original one at .NET Micro Framework."
  },
  "content/architecture/pe-file/MethodDefTableEntry.html": {
    "href": "content/architecture/pe-file/MethodDefTableEntry.html",
    "title": "MethodDefTableEntry (CLR_RECORD_METHODDEF) | nanoFramework Documentation",
    "keywords": "MethodDefTableEntry (CLR_RECORD_METHODDEF) The MethodRef table contains entries with the following structure Name Type Description Name StringTableIndex Index into string table for the name of the method RVA MetadataOffset Offset into the IL byte code blob table for the opcodes of the method Flags MethodDefFlags Flags to indicate intrinsic attributes and semantics of the method RetVal DataType DataType of the return value for the method NumArgs uint8_t Number of arguments to the method NumLocals uint8_t Number of local variables for the method LengthEvalStack uint8_t Length of the evaluation stack for the method Locals SigTableIndex Index into signature table to describe the locals for the method Sig SigTableIndex Index into signature table that describes the method itself Signature Table Usage The method Def has multiple references to the signature table each describes some aspect of the method in distinct ways. This section describes the sequence of entries in the signature and their meanings for a method definition. Locals Signature Table (TODO: Define allowed sequence chains for local signatures. ECMA uses diagrams for this - consider using SVG here) Method Signature (TODO: Define allowed sequence chains for the method's signature. ECMA uses diagrams for this - consider using SVG here)"
  },
  "content/architecture/pe-file/MethodRefTableEntry.html": {
    "href": "content/architecture/pe-file/MethodRefTableEntry.html",
    "title": "MethodRefTableEntry (CLR_RECORD_METHODREF) | nanoFramework Documentation",
    "keywords": "MethodRefTableEntry (CLR_RECORD_METHODREF) The MethodRef table contains entries with the following structure Name Type Description name StringTableIndex Index into string table for the name of the method container TypeRefTableIndex Index into TypeRef table for the type containing the method sig SignatureTableIndex Index into signature table for signature of the method pad uint16_t padding for alignment requirements"
  },
  "content/architecture/pe-file/ResourcesTableEntry.html": {
    "href": "content/architecture/pe-file/ResourcesTableEntry.html",
    "title": "ResourcesTableEntry (CLR_RECORD_RESOURCE) | nanoFramework Documentation",
    "keywords": "ResourcesTableEntry (CLR_RECORD_RESOURCE) The Resources table is used to describe the resources bound to an assembly Name Type Description Id uint16_t Id of the resource Kind ResourceKind Kind of the resource Flags uint8_t Flags for the resource Offset ResourcesDataTableIndex Index into the ResourcesData blob table ResourceKind Name Value Description Invalid 0x00 Invalid entry Bitmap 0x01 The resource is a Bitmap Font 0x02 The resource is a Font in the TinyCLR Font format String 0x03 The resource is a String Binary 0x04 The resource is a binary blob Manifest Constants Name Value Description SentinelId 0x7FFF Sentinel marker (See Notes for details) FlagsPaddingMask 0x03 Mask for lower two bits of flags to retrieve padding (See Notes for details) Notes The last entry in the Resources table will have: Field Value Id SentinelId Kind Invalid Offset Size of the ResourceData table Flags 0 This is used to ensure that the preceding entry can use the offset of the last entry to compute the size of its data in the ResourceData blob table. The lower two bits of the flags is the padding applied to align this entries data in the ResourcesData blob table. That is, the size of the previous entries data is the offset of this entry minus the offset of the previous entry minus the padding for this entry. Or to put that another way, to compute the size of a resource requires a reference to the next entry in the table. With the next entry the size is computable using the following formula: sizeOfResource = next.Offset - Offset + ( next.Flags & FlagsPaddingMask )"
  },
  "content/architecture/pe-file/TypeDefTableEntry.html": {
    "href": "content/architecture/pe-file/TypeDefTableEntry.html",
    "title": "TypeDefTableEntry (CLR_RECORD_TYPEDEF) | nanoFramework Documentation",
    "keywords": "TypeDefTableEntry (CLR_RECORD_TYPEDEF) The MethodRef table contains entries with the following structure: Name Type Description Name StringTableIndex Index into string table with the name of the type NameSpace StringTableIndex Index into string table with the name of the namespace containing the type Extends TypeRefOrTypeDef Index into TypeRef or TypeDef table for the super class of the type EnclosingType TypeDefTableIndex Index into the TypeDef table for the enclosing type if this is a nested type Interfaces SignatureTableIndex Index into signature blob table for the set of interfaces implemented by this type FirstMethod MethodDefTableIndex Index into MethodDef table for the first method of the type VirtualMethodCount uint8_t Count of virtual methods in the type InstanceMethodCount uint8_t Count of instance methods in the type StaticMethodCount uint8_t Count of static methods in the type DataType DataType Data type identity for the type FirstStaticField FieldDefTableIndex Index into FiledDef table for the first static field of the type FirstInstanceField FieldDefTableIndex Index into FieldDef table for the first instance field of the type Flags TypeDefFlags Flags defining intrinsic attributes and access modifiers for the type TypeDefFlags The TypeDefFlags enumeration provides a set of flag values for various instrinsic attributes and accessibility traits of a type definition. Name Value Description None 0 No special attributes or semantics ScopeMask 0x0007 Mask to extract the accesibility scope values NotPublic 0x0000 Class is not public scope. Public 0x0001 Class is public scope. NestedPublic 0x0002 Class is nested with public visibility. NestedPrivate 0x0003 Class is nested with private visibility. NestedFamily 0x0004 Class is nested with family visibility. NestedAssembly 0x0005 Class is nested with assembly visibility. NestedFamANDAssem 0x0006 Class is nested with family and assembly visibility. NestedFamORAssem 0x0007 Class is nested with family or assembly visibility. Serializable 0x0008 Type is serializeable SemanticsMask 0x0030 Mask to extract the bits pertaining to type semantics Class 0x0000 Class Semantics (in particular the value of this field is that bits 4 and 5 are 0) ValueType 0x0010 Value type semantics Interface 0x0020 Interface semantics Enum 0x0030 Enume semantics Abstract 0x0040 Type is abstract Sealed 0x0080 Type is sealed SpecialName 0x0100 Type is a well known special name Delegate 0x0200 Type is a delegate MulticastDelegate 0x0400 Type is a multicast delegate Patched 0x0800 (TODO) BeforeFieldInit 0x1000 (TODO) HasSecurity 0x2000 (TODO) HasFinalizer 0x4000 (TODO) HasAttributes 0x8000 (TODO)"
  },
  "content/architecture/pe-file/TypeRefTableEntry.html": {
    "href": "content/architecture/pe-file/TypeRefTableEntry.html",
    "title": "TypeRefTableEntry (CLR_RECORD_TYPEREF) | nanoFramework Documentation",
    "keywords": "TypeRefTableEntry (CLR_RECORD_TYPEREF) The TypeRef Table consists of the following columns: Name Type Description Name StringTableIndex Index into the string table for the name of the type Namespace StringTableIndex Index into the string table for the namespace Scope TypeRefOrAssemblyRef Binary token for either the TypeRef table or the AssemblyRef table {padding} uint16_t Unused padding (Must be 0)"
  },
  "content/architecture/pe-file/TypeSpecTableEntry.html": {
    "href": "content/architecture/pe-file/TypeSpecTableEntry.html",
    "title": "TypeSpecTableEntry (CLR_RECORD_TYPESPEC) | nanoFramework Documentation",
    "keywords": "TypeSpecTableEntry (CLR_RECORD_TYPESPEC) The TypeSpec table is used to describe composite types, like an array. Name Type Description Sig SigTableIndex Index into the signature table for the TypeSpec pad uint16_t Padding for alignment Signtature Table Usage (TODO: Define valid signature table sequences for a TypeSpec)"
  },
  "content/architecture/thread-execution.html": {
    "href": "content/architecture/thread-execution.html",
    "title": "Thread execution | nanoFramework Documentation",
    "keywords": "Thread execution About this document This document describes how thread execution works with the nanoFramework CLR. Introduction to Threads Oversimplifying it a nanoFramework thread is (in terms of execution) basically a stream of IL instructions that are translated by the interpreter making things happen. This execution occurs in a cooperative fashion, meaning that a thread is allowed to run for a certain amount of time, after that it stops and the execution is passed to the next thread that meets the required conditions to run. Thread execution The nanoFramework CLR and interpreter run on a RTOS thread. When the RTOS works in a cooperative fashion (opposed to a preemptive fashion) the thread is expected to relinquish control to the RTOS so that context switching can occur and the next RTOS thread is given the opportunity to run. This context switching in nanoFramework is expected to occur after each time slot that a nanoFramework thread is allowed to run. It's up to the target board developer to provide the correct way to relinquish the control of the threads execution according to the RTOS running beneath. This may not be required by all RTOS's. For example when by default the RTOS works in a preemptive fashion, the thread execution occurs in a round robin fashion among the various RTOS threads. The execution relinquish to the underlying RTOS, so that the 'next' RTOS thread and other RTOS services can run is performed inside the Events_WaitForEvents function that is implemented for each target platform. For the current version of nanoFramework this is accomplished in the following ways: For targets running with ChibiOS (a CMSIS compliant RTOS) a call to osDelay(10) is sufficient and allows the kernel to run all the other threads with the same (or higher) priority. For the ESP32 target - which is running with FreeRTOS - a call to vTaskDelay(0) is sufficient and allows the kernel to run all the other threads with the same (or higher) priority."
  },
  "content/architecture/wire-protocol.html": {
    "href": "content/architecture/wire-protocol.html",
    "title": "Wire Protocol | nanoFramework Documentation",
    "keywords": "Wire Protocol Table of contents `Wire Protocol Message](#wire-protocol-message) Data channels Receiving and transmitting data Receiver workflow `Wire Protocol Commands](#wire-protocol-commands) How to add support for a new command How to add support for new channels HAL interface Application interface Debugging Wire Protocol communications CRC32 validations About this document This document describes the Wire Protocol used by nanoFramework for debug and the booter stage. The protocol follows the implementation of the .NET Micro Framework Wire Protocol. The intention is to review it later in order to improve and simplify it. Wire Protocol Message The message basic structure is comprised by: Signature which is basically a marker to detect the start of a new message packet. Has a fixed length. Header with several fields to cary packet sequence, flags, commands, CRC, etc. Has a fixed length. CRC32 of header (for verification calculation this CRC32 field has to be zeroed). CRC32 of payload, when it exists (for verification calculation this CRC32 field has to be zeroed). Command code. Sequence number of the message. Sequence reply. Carries the sequence number of the message that the message is a reply to. Flags. Size of the payload. Payload for carrying data. Optional and its size is variable. You can check the details on `WireProtocol.h](@ src\\CLR\\WireProtocol\\WireProtocol.h) Data channels Currently nanoFramework Wire Protocol supports only serial channels. The plan is to add support for USB (using CDC class device) and TCP. To ease the port to new HAL/platforms the code is architecture so that only minimal changes are required to add support for new implementations. Receiving and transmitting data The code is architecture to receive and transmit data over a serial stream. Preferably (and to use the reference implementation provided without much changes) the interface/API of the serial stream should: Allow checking if there is data available for reading. Allow reading sequentially (FIFO fashion) the input stream for a definite number of bytes. Having a timeout for the read operation is ideal to prevent bad/incomplete read operations. Allow writing to the transmit stream a definite number of bytes. Ideally in a non-blocking fashion to prevent bad/incomplete write operations. Receiver workflow Follows a high-level description on how the Wire Protocol component works. RTOS thread - ReceiverThread(...) in WireProtocol_ReceiverThread (@ src\\CLR\\WireProtocol\\WireProtocol_ReceiverThread.c) - that loops continuously checking for available data in the receiving channel. On available data the reception of the message is initialized (WP_Message_Initialize) and prepared (WP_Message_PrepareReception) so the reception can actually occur and be processed by calling WP_Message_Process. During the reception states the input stream is read ( WP_ReceiveBytes(...) in WireProtocol_HAL_Interface (@ src\\CLR\\WireProtocol\\WireProtocol_HAL_Interface.c)) so the message header is received and it's integrity checked. Follows the reception and the integrity check of the payload, if there is any. After a successful reception of the header (and payload, if any) the Process state machine in WireProtocol_Message (@ src\\CLR\\WireProtocol\\WireProtocol_Message.c)) reaches the ReceiveState_CompletePayload state and calls the ProcessPayload(...) function. Inside ProcessPayload(...) the lookup table for the commands that are implemented is searched and, if the command is found, the respective handler is called. According to the command its processing can require extra processing or gathering data. Invariably the handler execution end with a call to ReplyToCommand(...) where the reply is sent back to the host device. When executing ReplyToCommand(...) the output stream is written ( WP_TransmitMessage(...) in WireProtocol_HAL_Interface (@ src\\CLR\\WireProtocol\\WireProtocol_HAL_Interface.c)) with the reply message. Wire Protocol Commands Processing a command is carried in a handler function. The collection of the commands that are implemented is listed in c_Lookup_Request . This lookup structure is basically an array with the command code along with a pointer to the respective handler. It resides in WireProtocol_App_Interface.c . The actual command implementation resides in WireProtocol_Commands.c . How to add support for a new command There are two groups of commands: monitor commands and debug commands. In order to add a new monitor command you have to: Add the function declaration and any required structure and/or type definition in WireProtocol_MonitorCommands.h (@ src\\CLR\\WireProtocol\\WireProtocol_MonitorCommands.h) Add a weak prototype in WireProtocol_MonitorCommands.c (@ src\\CLR\\WireProtocol\\WireProtocol_MonitorCommands.c) The actual code for the command handler function (and any required helper functions or extra processing) is added at target level. For the reference implementation for nanoBooter in ChibiOS check WireProtocol_MonitorCommands.c (@ targets\\CMSIS-OS\\ChibiOS\\nanoBooter\\WireProtocol_MonitorCommands.c) To add the command to the collection of the supported monitor commands un-comment or add the respective line in the c_Lookup_Request variable in WireProtocol_App_Interface.c for both nanoBooter (@ targets\\CMSIS-OS\\ChibiOS\\nanoBooter\\WireProtocol_MonitorCommands.c) and/or nanoCLR] (@ targets\\CMSIS-OS\\ChibiOS\\nanoCLR\\WireProtocol_MonitorCommands.c). Because this declaration uses a macro to add the declaration of a command, make sure the existing naming pattern is strictly followed. This architecture tries to bring flexibility by making it easy to have different monitor commands for nanoBooter and nanoCLR and also having them implemented in different ways, if necessary. To ease code portability from .NET Micro Framework code base and maintain an understandable implementation the naming has been maintained or minimally adapted from the original C++ code. Try to follow this as much as possible when implementing new commands or porting the original C++ code to C. How to add support for new channels Current Wire Protocol implementation has support for transmission over serial port (UART/USART) and serial over USB (USB CDC device class). Support for TCP channel is planned at a later stage. When adding support for new channels the functions WP_ReceiveBytes(...) and WP_TransmitMessage(...) in WireProtocol_HAL_Interface.c are the ones that need to be reworked. This implementation is target and board specific so it resides in the board folder. Check the reference implementation for the ST_STM32F4_DISCOVERY board here (@ targets\\CMSIS-OS\\ChibiOS\\ST_STM32F4_DISCOVERY\\common\\WireProtocol_HAL_Interface.c). On both, the relevant part is that they read/write to a serial stream a specified number of bytes. Preferably non blocking calls with a timeout. Please read the comments inside of each of those functions for the details. The last piece that needs to be adjusted is the code inside the ReceiverThread(...) which is the RTOS thread that is running the Wire Protocol component. That thread is basically a loop with a wait state were the checks for existing data to be read on the input stream. On data available the WP_Message_Process(...) function is called. HAL interface The Wire Protocol requires the following functions in order to interface with the HAL. Weak implementations of each function are part of the core code. WP_TransmitMessage(...) in WireProtocol_HAL_Interface.c (@ src\\CLR\\WireProtocol\\WireProtocol_HAL_Interface.c) WP_ReceiveBytes(...) in WireProtocol_HAL_Interface.c (@ src\\CLR\\WireProtocol\\WireProtocol_HAL_Interface.c) WP_CheckAvailableIncomingData(...) in WireProtocol_HAL_Interface.c (@ src\\CLR\\WireProtocol\\WireProtocol_HAL_Interface.c) An implementation for an STM32F4_DISCOVERY board with ChibiOS (including its HAL) is provided as a reference. Please check it at WireProtocol_HAL_Interface (@ targets\\CMSIS-OS\\ChibiOS\\ST_STM32F4_DISCOVERY\\common\\WireProtocol_HAL_Interface.c). When porting nanoFramework to another RTOS or HAL follow the reference implementation to ease the port work. Application interface The Wire Protocol requires the following functions in order to interface with it's client app. Weak implementations of each function are part of the core code. WP_App_ProcessHeader(...) in WireProtocol_App_Interface.c () WP_App_ProcessPayload(...) in WireProtocol_App_Interface.c () Actual implementations of these are to be provided by nanoBooter and nanoCLR. Please check the reference implementation for ChibiOS at WireProtocol_App_Interface.c (@ targets\\CMSIS-OS\\ChibiOS\\nanoBooter\\WireProtocol_App_Interface.c). Debugging Wire Protocol communications To ease debugging of Wire Protocol sessions there are available a set of CMake options to adjust the output of the Wire Protocol state machine and TX/Rx operations. The available options are: NF_WP_TRACE_ERRORS: Enable error tracing. NF_WP_TRACE_HEADERS: Enable packet headers tracing. NF_WP_TRACE_STATE: Enable tracing of the current state of the Wire Protocol sate machine. NF_WP_TRACE_NODATA: Enable tracing of empty or incomplete packets. NF_WP_TRACE_ALL: Enable all the options above. In case this setting is chosen it takes precedence over all the other and replaces when on. CRC32 validations In order to ensure Wire Protocol communications integrity the message header and payload have each a CRC32 field which is filled in with the CRC32 hash of the respective section. This allows the receiver to validate the integrity of both the header and the payload. A target can choose not to implement that. The Wire Protocol layer in the debugger is able to automatically handle both situations. To have a target image built without implementing CRC32 validation the option NF_WP_IMPLEMENTS_CRC32=OFF has to be passed to CMake."
  },
  "content/building/build-esp32.html": {
    "href": "content/building/build-esp32.html",
    "title": "How to Build, Flash and Debug the ESP32 nanoCLR on Windows using Visual Code | nanoFramework Documentation",
    "keywords": "How to Build, Flash and Debug the ESP32 nanoCLR on Windows using Visual Code Table of contents Prerequisites Overview nanoFramework Github Repo Setting up the build environment Set up Visual Studio Code Build nanoCLR Common Build Issues Flash nanoCLR to ESP32 Start with a Hello World C# application Debug the nanoCLR About this document This document describes how to build the required images for nanoFramework for ESP32 targets. The build is based on CMake tool to ease the development in all major platforms. Prerequisites You'll need: Visual Studio Code . Additional extensions and setup steps follow below. Set up Visual Code Python 3.6.5 Required for uploading the nanoCLR to the ESP32. Ensure the Windows default app to open .py files is Python. CMake (Minimum required version is 3.15) A build system for CMake to generate the build files to. We recommend Ninja . OpenOCD For on chip debugging of the nanoCLR. Driver for the USB to UART Bridge. This depends on the ESP32 hardware. After installing it, use Windows Device Manager to determine the COM port as this is needed to complete the setup. Follows the most common drivers: CP210x USB to UART Bridge VCP Drivers used in the standard ESP32 DevKitC. FTDI Virtual COM Port Drivers . The above can be installed manually , or using the Power Shell script .\\install-nf-tools.ps1 -TargetSeries ESP32 from the install-scripts folder within the nanoFramework/nf-interpreter project (cloned or downloaded) Overview To simplify: this guide we will put all our tools and source in easily accessible folders and not at the default install paths (you do not have to do the same). Create a directory structure such as the following: C:\\nftools C:\\nanoFramework Download and install Visual Studio Code . Clone nf-interpreter repository into C:\\nanoFramework\\nf-interpreter . See next section for more info. Run the PowerShell script that's on the install-scripts folder that will download and install all the required tools. .\\install-nf-tools.ps1 -TargetSeries ESP32 -Path 'C:\\nftools' For best results, run in an elevated command prompt, otherwise setting system environnement variables will fail. Review and adjust several JSON files to match your environment (as documented below) Restart Visual Studio Code (due to json changes) The setup is a lot easier than it seems. The setup scripts do almost everything. nanoFramework GitHub repo If you intend to change the nanoCLR and create Pull Requests then you will need to fork the nanoFramework/nf-interpreter to your own GitHub repo and clone the forked GitHub repo to your Windows system using an Git client such as Fork or the GitHub Desktop application . The develop branch is the default working branch. When working on a fix or experimenting a new feature you should do it on another branch. See the Contributing guide for specific instructions on the suggested contributing workflow. If you don't intend to make changes to the nanoBooter and nanoCLR, you can clone nanoFramework/nf-interpreter directly from here. Make sure to put this folder high enough on your drive, that you won't trigger long filename issues. CMake does not support filenames in excess of 250 characters. Setting up the build environment After cloning the repo, you need to setup the build environment. You can use the power shell script or follow the step-by-step instructions. Automated Install of the build environment The following power shell script is not signed. Run Power Shell as an Administrator and run set-executionpolicy remotesigned to enable execution of the non-signed script. On Windows, one may use the .\\install-nf-tools.ps1 Power Shell script located in the repository install-scripts folder to download/install CMake, the ESP32 IDF Source, toolchain, prebuilt libraries, OpenOCD (for JTAG debugging) and Ninja. You may need to use Run as Administrator for power shell to permit installing modules to unzip the downloaded archives. The script will download the zips and installers into the repository zips folder and extract them into sub-folders of the nanoFramework tools folder C:\\nftools or install the tool. Open Power Shell in the install-scripts folder of the repository. Example Power Shell command line: .\\install-nf-tools.ps1 -TargetSeries ESP32 You can force the environment variables to be updated by adding -Force to the command line. The script will create the following sub-folders (see manual install below): C:\\nftools C:\\nftools\\esp-idf-v3.3.1 C:\\nftools\\libs-v3.3.1 C:\\nftools\\ninja C:\\nftools\\openocd-esp32 The following Environment Variables will be created for the current Windows User. NF_TOOLS_PATH = C:\\nftools ESP32_TOOLCHAIN_PATH = C:\\nftools\\xtensa-esp32-elf ESP32_LIBS_PATH = C:\\nftools\\libs-v3.3.1 IDF_PATH = C:\\nftools\\esp-idf-v3.3.1 NINJA_PATH = C:\\nftools\\ninja Manual Install of the build environment These steps are not required if you've used the automated install script as described above. To save time on building the nanoCLR and to avoid having to create a CMakeLists.txt project for the ESP32 IDF files, the ESP32 IDF libraries are prebuilt using the Esp32 Msys32 environment then used for linking in the CMake build of nanoCLR. This has already been done and the libraries can be just be downloaded. Create a directory such as the following: C:\\nftools C:\\nftools\\libs-v3.3.1 Download the pre-built libs zip from here and extract it into C:\\nftools\\libs-v3.3.1 . Download the v3.3.1 IDF source zip file from here and extract it into C:\\nftools so you get C:\\nftools\\esp-idf-v3.3\\components etc. Download the Esp32 toolchain from here and extract it into C:\\nftools so you get C:\\nftools\\xtensa-esp32-elf . For on chip debugging of the nanoCLR, download OpenOCD from here and extract OpenOCD into C:\\nftools so you get C:\\nftools\\openocd-esp32 . Download the light weight build system Ninja for CMake to generate the build files from here . This is lightweight build system, designed for speed and it works on Windows and Linux machines. See here how to setup Ninja to build nanoFramework . Define the environment variables to match the install locations. Default locations are: ESP32_TOOLS_PATH = C:\\nftools ESP32_TOOLCHAIN_PATH = C:\\nftools\\xtensa-esp32-elf ESP32_LIBS_PATH = C:\\nftools\\libs-v3.3.1 IDF_PATH = C:\\nftools\\esp-idf-v3.3.1 NINJA_PATH = C:\\nftools\\ninja Add Ninja to the PATH (i.e. C:\\nftools\\ninja ) Download the latest stable version from here and install it. Install Python 3.6.5 and then install the serial driver for python from the command line: python -m pip install pyserial Note that .\\install-esp32-tools.ps1 will install pyserial for you if you installed Python prior to running the script. (It is Ok to run python -m pip install pyserial multiple times.) Set up Visual Studio Code Install the extensions: C/C++ CMake CMake Tools Run the PowerShell script Initialize-VSCode.ps1 that's on the install-scripts folder. This will adjust the required settings, build launch configuration for debugging and setup the tasks to ease your developer work. You can specify the COM port the ESP32 flash programming utility will use (The COM port is easily changed later). If it is not specified, manually edit tasks.json and change instances of <default-com-port-for-esp32> to the required port before flashing the ESP32 nanoCLR firmware. (COM22 used in the example bellow) .\\Initialize-VSCode.ps1 -COMPort COM22 You can force the environment variables to be updated by adding -Force to the command line. The PowerShell relies on the environment variables described above to properly setup the various VS Code working files. In case you have not used the automated install and the variable are not available you'll have to manually edit tasks.json , launch.json , cmake-variants.json and settings.json to replace the relevant paths. !!mind to always use forward slashes in the paths!! More info available on the Tweaking cmake-variants.TEMPLATE.json documentation page. Save any open files and exit VS Code. Build nanoCLR Launch Visual Studio from the repository folder, or load it from the File menu, select Open Folder and browse to the repo folder. VS Code could prompt you asking \"Would you like to configure this project?\". Ignore the prompt as you need to select the build variant first. Next time VS Code open it should load the workspace automatically. In the status bar at the bottom left, click on the No Kit Selected and select [Unspecified] . In the status bar at the bottom left, click on the CMake:Debug ESP32_WROOM_32: Ready and select Debug . Wait for it to finish Configuring the project (progress bar shown in right bottom corner). This can take a while the first time. In the status bar click Build or hit F7. Wait for the build to finish with Build finished with exit code 0 output message. In the build folder you'll find several files: nanoCLR.bin nanoCLR.elf partitions_4mb.elf Note: If there are errors during the build process it is possible to end up with a partial build in the build folder, and the CMake/Ninja build process declaring a successful build despite the .bin targets not being created, and a CMake clean not helping. In this case deleting the contents of the build folder should allow the build to complete once you resolve the issues that cause the original failure. Common Build Issues The above may have some errors if: CMake is not installed properly, not in the PATH or cannot be found for some reason. Ninja is not recognized: check settings.json or your PATH environment variable and restart Visual Studio Code. COMPILATION object file not found: check that your paths don't exceed 140 chars. Put the solution folder high enough on drive. Make sure to 'Build all' first time. Reopen VS Code if you have changed anything on the cmake-variants.json . Clean the build folder by deleting it's contents and restart VS Code. Flash nanoCLR into ESP32 The third file that gets flashed into the ESP32 is the bootloader.bin which will be located here C:/ESP32_Tools/libs-v3.3.1/bootloader.bin if the automated install script is used. Connect your development board to the computer port that you've setup in tasks.json . Bring your board into download mode by holding down the GPIO0 pin to GND or holding down the respective button during power up. In Visual Studio Code enter the command Tasks: Run task and if you flash the board for the first time Erase ESP32 and then Flash ESP32 Start with a 'Hello World' C# application Watch the video tutorial here and follow the step that should be done in Visual Studio 2017 Community Edition. Skip the steps that describing uploading the nanoCLR into the STM32 Nucleo board. Debugging nanoCLR If you want to debug the nanoCLR code on the ESP32 chip you'll need an JTAG debugging adapter. ESP32 WROVER KIT already includes one. For other boards you can use the Olimex ARM-USB-OCD-H JTAG debugging adapter or a Segger JLink. There are preset configurations for these adapters. You can now debug nanoCLR on the ESP32 by pressing F5 in Visual Studio Code. Notes on JTAG debugging on ESP32 The JTAG connections on ESP32 DEVKITC are: TDI -> GPIO12 TCK -> GPIO13 TMS -> GPIO14 TDO -> GPIO15 TRST -> EN / RST (Reset) GND -> GND See Gojimmypi for description of JTAG connections here . If flashing nanoCLR via a COM port (default), then be aware that you need to disconnect the JTAG to avoid it preventing the bootloader from running, and therefore being unable to reprogram the ESP23. e.g. if you see the following pattern repeating, unplug the USB-OCD-H, and then the programming will proceed. esptool.py v2.1 Connecting........_____....._____... The Esp32 only has 2 hardware breakpoints. As code is dynamically loaded unless the method has an IRAM_ATTR attribute any breakpoints set up at the start will cause an error when you try to debug (Unable to set breakpoint). When launched the debugger will normally stop at the main task. Its not possible to set a break point on code that is not yet loaded so either step down to a point that it is loaded or temporarily set the method with the IRAM_ATTR attribute. For more information on JTAG debugging see Espressif documentation . Debugging nanoCLR without special hardware If you do not have access to any special hardware required for debug methods mentioned above you still may use some old-school technique: just place some temporary code at interesting places to get the required information. Using steps below you will get that information in Visual Studio's standard debug output window. Certainly Visual Studio must be debugging something to have that window in working state. So this hack will work only in cases when you want to debug a nanoCLR code which can be executed via managed code. Write some managed code which results in a nanoCLR call executing the code you are interested in. Choose one or more places in nanoCLR code where you want to know something. e.g.: What is the value of a variable? Which part of an if-else statement gets executed? Put the following temporary code there: { char temporaryStringBuffer[64]; int realStringSize=snprintf(temporaryStringBuffer, sizeof(temporaryStringBuffer), \"interestingValue: %d\\r\\n\", interestingValue); CLR_EE_DBG_EVENT_BROADCAST( CLR_DBG_Commands_c_Monitor_Message, realStringSize, temporaryStringBuffer, WP_Flags_c_NonCritical | WP_Flags_c_NoCaching ); } Or simply: CLR_EE_DBG_EVENT_BROADCAST( CLR_DBG_Commands_c_Monitor_Message, 12, \"Hello World!\", WP_Flags_c_NonCritical | WP_Flags_c_NoCaching ); The boring part: rebuild and re-flash firmware and your program. Start debugging in Visual Studio and keep eye on it's debug output window. You will get your messages there when the related temporary code gets executed! Iterate steps 2-5 till you find out what you were interested in. Do not forget to remove all those temporary code blocks before you accidentally commit it!"
  },
  "content/building/build-instructions.html": {
    "href": "content/building/build-instructions.html",
    "title": "Building nanoFramework | nanoFramework Documentation",
    "keywords": "Building nanoFramework nanoFramework build system is based in CMake. Please read the instructions specific to each target series. STM32 ESP32 NXP Prerequisites Pre paration Build a nanoFramework image nanoFramework build deliverables About this document This document describes how to build the required images for nanoFramework to be flashed in a SoC or MCU. The build is based on CMake tool to ease the development in all major platforms. Prerequisites You'll need: GNU ARM Embedded Toolchain CMake (Minimum required version is 3.7) A build system for CMake to generate the build files to. If you have Visual Studio (full version) you can use the included NMake. A nice alternative is Ninja . This is lightweight build system, designed for speed and it works on Windows and Linux machines. See here how to setup Ninja to build nanoFramework . If you are using VS Code as your development platform we suggest that you use the CMake Tools extension. This will allow you to run the builds without leaving VS Code. Visual Studio Code CMake Extension CMake Tools Extension In case you specify an RTOS and you want its source to be downloaded from the official repository, you'll need: For FreeRTOS a SVN client. Tortoise SVN seems to be a popular choice for Windows machines. For ChibiOS a Git client. GitHub Desktop seems to be a popular choice for Windows machines. Preparation It's highly recommended that run the build outside the source tree. This prevents you from cluttering the source tree with CMake artifacts, temporary files etc. In fact this is enforced and checked by the CMake script. In case you need to clean up or start a fresh build all you have to do is simply delete the contents of the build directory. As a suggestion we recommend that you create a directory named build in the repository root and run CMake from there. Build a nanoFramework image The build script accepts the a number of parameters (some of them are mandatory). Please check the details about each parameter here . Note 1: The RTOS currently supported (except for ESP32 target) is ChibiOS. If no source path is specified the source files will be downloaded from nanoFramework GitHub fork. Note 2: the very first build will take more or less time depending on the download speed of the Internet connection of the machine were the build is running. This is because the source code of the RTOS of your choice will be downloaded from its repository. On the subsequent builds this won't happen. You can specify any generator that is supported in the platform where you are building. For more information on this check CMake documentation here . Building from the command prompt If you are building from the command prompt, just go to your build directory and run CMake from there with the appropriate parameters. The following is a working example: cmake \\ -DTOOLCHAIN_PREFIX=\"E:/GNU_Tools_ARM_Embedded/5_4_2016q3\" \\ -DCMAKE_TOOLCHAIN_FILE=CMake/toolchain.arm-none-eabi.cmake \\ -DCHIBIOS_BOARD=ST_NUCLEO_F091RC \\ -DTARGET_SERIES=STM32F0xx \\ -DNF_FEATURE_DEBUGGER=TRUE \\ -DAPI_Windows.Devices.Gpio=ON \\ -DNF_FEATURE_RTC=ON \\ -G \"NMake Makefiles\" ../ This will call CMake (on your build directory that is assumed to be under the repository root) specifying the location of the toolchain install, that the target board is named ST_NUCLEO_F091RC, that STM32F0xx is the series name that it belongs to, debugger feature is to be included, Windows.Devices.Gpio API is to be included and that the build files suitable for NMake are to be generated. Another example: cmake \\ -DTOOLCHAIN_PREFIX=\"E:/GNU_Tools_ARM_Embedded/5_4_2016q3\" \\ -DCMAKE_TOOLCHAIN_FILE=CMake/toolchain.arm-none-eabi.cmake \\ -DCHIBIOS_SOURCE=E:/GitHub/ChibiOS \\ -DCHIBIOS_BOARD=ST_NUCLEO144_F746ZG \\ -DTARGET_SERIES=STM32F7xx \\ -DNF_FEATURE_DEBUGGER=TRUE \\ -DAPI_Windows.Devices.Gpio=ON \\ -DNF_FEATURE_RTC=ON \\ -G \"NMake Makefiles\" ../ This will call CMake (on your build directory that is assumed to be under the repository root) specifying the location of the toolchain install, specifying that ChibiOS sources to be used are located in the designated path (mind the forward slash and no ending slash), that the target board is named ST_NUCLEO144_F746ZG, that STM32F7xx is the series name that it belongs to, debugger feature is to be included, Windows.Devices.Gpio API is to be included, RTC is used and that the build files suitable for NMake are to be generated. After successful completion you'll have the build files ready to be used in the target build tool. Building from VS Code (using CMake Tools extension) We've added the required files and configurations to help you launch your build from VS Code. Follows a brief explanation on the files you might want to tweak. settings.json (inside .vscode folder) here you can change the generator that CMake uses to generate the build. The default is \"cmake.generator\": \"NMake Makefiles\" . The recommendation is to use Ninja as the build tool because it's way faster than NMake. You'll also need to set the use of CMake Server to true, like this: \"cmake.useCMakeServer\" : true . launch.json (inside .vscode folder) here you can set up your launch configurations, such as gdb path or OpenOCD configuration. We've made available Gists with launch.json for several of the reference targets. Grab yours from here . ⚠️ Remember to update paths and other preferences according to your setup and machine configuration. 😉 cmake-variants.json (at the repository root) here you can add several build flavors. You can even add variants to each one. Check the documentation extension here . We've made available Gists with cmake-variants.json for each of the reference targets. Grab yours from here . ⚠️ Remember to update paths and other preferences according to your setup and machine configuration. 😉 To launch the build in VS Code check the status bar at the bottom. Select the build flavor and then click the build button (or hit F7). nanoFramework build deliverables After a successful build you can find the nanoFramework image files in the build directory. Those are: nanoBooter image (not available for ESP32 builds): nanoBooter.bin (raw binary format) nanoBooter.hex (Intel hex format) nanoBooter.s19 (Motorola S-record format, equivalent to srec) nanoBooter.lst (source code listing intermixed with disassembly) nanoBooter.map (image map) nanoCLR image: nanoCLR.bin (raw binary format) nanoCLR.hex (Intel hex format) nanoCLR.s19 (Motorola S-record format, equivalent to srec) nanoCLR.lst (source code listing intermixed with disassembly) nanoCLR.map (image map)"
  },
  "content/building/build-in-visual-studio.html": {
    "href": "content/building/build-in-visual-studio.html",
    "title": "Building nanoFramework in Visual Studio | nanoFramework Documentation",
    "keywords": "Building nanoFramework in Visual Studio Developing firmware for the nanoframework using Visual Studio 2019 community edition (See below for VS2017) The development process described below for VS2017 was initially focused on the STM32/ChibiOS target, with the Espressif ESP32 added later. In this update we will use the ESP32 as our example, for STM32 specific information refer to the VS2017 section. The very long file names used in the ChibiOS builds can result in exceeding the Windows 250 character path limit. Sometimes CMake will complain about this, or you may get seemingly random failed builds. The previous workaround for this was to place your source in a top-level directory. As an alternative we have been using the Windows SUBST command to access the source via ashorted drive mapped path. There are some tools provided to automate this process. First set up a working build environment with VS Code (Recommended) While it is possible to set up a successful build and debug environment using VS 2019, setting up the VS Code environment first is highly recommended. This is the most used and tested path, and should you run into any obstacles along the way you will most likely be able to get assistance from other users. Once that is up and running, you can switch to your preferred IDE! Follow along with one of the guides here: Getting started with VS Code and ESP32 Getting started with VS Code and STM32 Install Visual Studio 2019 Community and workloads You should now have the pieces in place to build, deploy and debug the nanoFramework interpreter, and you may have already installed Visual Studio and tried running some of the managed code examples. We now need to hook these pieces up with Visual Studio so we can use it to run the build/deploy/debug process. Install the following : Software Workload/Component Visual Studio 2019 community edition Linux development with C++ option C++ CMake tools for Windows and Linux option Embedded and IoT Development tools Configuration Files VS Code and VS2019/2017 keep the majority of their configuration files in \"hidden\" directories (in the sense that Unix/Linux hides directory names beginning with a period). For VS Code this is named \".vscode\" and for VS2019 it is named \".vs\" , which helps to keep them from treading on each others toes. The VS2019 IDE normally hides the contents of this directory in Solution Explorer , but if you go to the task-bar at the top of the Solution Explorer pane and hover over the icons you will find Show All Files . When selected, these files appear below in \"Local Settings (.vs)\" The two configuration files in .vs are tasks.vs.json and launch.vs.json . When you clone the nf-interpreter repository there will be two files names tasks.vs.SAMPLE.json and launch.vs.SAMPLE.json , which you can copy as the appropriate name and then modify to suit your configuration if required. Note that these are SAMPLE rather than TEMPLATE files as they are not used as a basis for automatic configuration, but are there as an example of something that is known to work. Unlike VS2017, VS2019 currently rewrites your JSON configuration files,and in doing so will remove any comments you have added. This may strictly follow the JSON spec., but for human readable configuration files is a Really Bad Thing! Hopefully MS will realize this and change the behaviour, perhaps taking on a more reasoned format such as JSON5 tasks.vs.json This adds some entries to the Right-Click context menu for items in the Solution Explorer pane, for example CMakeLists.txt . The sample file is set up for the ESP32, and uses esptool.py to erase or program Flash on the device. You may need to modify the \"port\" setting near the top of the file from COM3 to the port your ESP32 is connected to. launch.vs.json This is used to launch the debugger, using GDB locally with OpenOCD acting as the GDB server providing a connection to your device. The example for ESP32 is using a SEGGER JLINK device to connect to the ESP32 JTAG pins, while the STM32 example uses the STM32 STLINK interface on the STM769IDiscovery board. Note that we haven't been able to get the debug system working purely using the VS2019 resources, and we call a Windows batch file \"startocd.bat\" to handle the OpenOCD configuration details. Take a look at that file and modify it to suit your configuration. (It can have comments as VS doesn't mess with it!) When you have something that works please let us know and we can add it as another option to the file. GDB requires / separators in the path passed for the executable file and symbols, rather than the windows backslash \\ , and at present neither VS Code or VS2017/2019 can do that for us when expanding variables, hence the need to add a hard-coded file path. For VS Code we have a neat little extension nf to take care of that for us, but at this stage no such solution for VS. CMakeSettings.json This is the main configuration file for setting build options for the nf-interpreter , and is located in the root directory. Currently the repository has the actual file rather than a SAMPLE version, something we need to review as we don't want updates overwriting your local modifications! You may prefer to work from a local branch that keeps your changes safe, rather than the develop branch. I currently use a branch SaveLocalSettings to build,with a small script that automatically pulls and merges upstream develop changes into it. Note that VS2019 will walk all over this file! But on the up-side it does give you a nice GUI interface for changing the options included in your build and generating the system, something not present in VS2017. To access this Right-Click on CMakeSettings.json in Solution Explorer , and select the option \"CMake Settings for nanoFramework\" . Helper Batch Scripts RunCmd.bat Helper script to run a command in a separate console window, with a timeout after the command completes before closing the window. This was required when programming ESP32 boards requiring manual intervention (button press). Esptool.py sends a sequence of ___...___...___... during which you may need to hold the boot button and press reset, however VS2019 buffers the output window so you don't see this until it is too late. First parameter n is timeout in seconds. n = 0 - wait for user input after command completes n > 0 - wait for n seconds after command completes N < 0 - wait only if command completed with error SetNFRoot.bat This script is used to help overcome the problem of file paths exceeding the Windows 250 character limit when building nf-interpreter . It does this by usingthe Windows SUBST command to map an unused drive letter to the source root directory. If a mapping already exists, it will be re-used. The environment variable nfRoot is set to this location, which can be accessed from within Visual Studio. For example, if my source root is located at D:\\usr_chronos\\Sandbox\\NanoFramework\\nf-interpreter\\ D:\\usr_chronos\\Sandbox\\NanoFramework\\nf-interpreter>SetNFRoot.bat Found free drive letter: B: Created new subst for D:\\usr_chronos\\Sandbox\\NanoFramework\\nf-interpreter\\ on B: You can remove it with subst B: /D Using short path B:\\ for D:\\usr_chronos\\Sandbox\\NanoFramework\\nf-interpreter\\ B:\\ Now we can refer to the source root as B:\\ and build from there, giving as a substantially shorter path. The script output (see above) is sent to stderr rather than stdout , except for the final B:\\ , meaning it can be used as a command variable expansion in VS, as well as an environment variable expansion, ie ${env.nfRoot} or ${cmd.SetNFRoot.bat} startocd.bat This script is called by GDB to start OpenOCD as a separate process, you can add additional entries to the bottom of the script following the existing pattern. The label is passed from a line in launch.vs.json , default is for ESP32 with J-Link. The script currently starts C:/nanoFramework_Tools/Tools/openocd/bin/openocd.exe for the STM32_STLINK label, which is what you will have installed if you followed the STM32 instructions, but I've actually had better results using the ESP32 version of OpenOCD with the STM32. If you have that version installed just comment out the line following the :STM32_STLINK label. Build Locations We are able to build in separate locations to suit the target type and configuration we are working on. The current layout is to use the Build subdirectory to contain all the separate build types folders, so Build\\ESP32 for ESP32 vanilla build, Build\\ESP32_test for a test build, etc. The STM32 builds are most likely to require a shortened build path, so we can use \"${env.nfRoot}Build/${name}\" in our CMakeSettings.json file STM769IDiscovery section. The build will then be done in \"B:\\Build\\STM769IDiscovery\" . Debugging Once the program has been built and loaded into flash, you can launch the debugger. You need to select the launch configuration from the dropdown, as shown: Note that the launch configuration, here ESP32 nanoCLR - Segger JLink , may not show up for selection in the dropdown immediately, in some cases it takes some minutes to be available. We assume VS2019 is doing something in the background, if anyone knows the cause or a way to speed this up please let us know! You can then commence debugging from the top DEBUG menu. OpenOCD should open in its own console window, connect to the target device, and display something similar to this: In the VS2019 IDE output Window you should see: =thread-group-added,id=\"i1\" GNU gdb (crosstool-NG crosstool-ng-1.22.0-80-g6c4433a5) 7.10 Copyright (C) 2015 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \"show copying\" and \"show warranty\" for details. This GDB was configured as \"--host=i686-host_pc-mingw32 --target=xtensa-esp32-elf\". Type \"show configuration\" for configuration details. For bug reporting instructions, please see: <http://www.gnu.org/software/gdb/bugs/>. Find the GDB manual and other documentation resources online at: <http://www.gnu.org/software/gdb/documentation/>. For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\". Warning: Debuggee TargetArchitecture not detected, assuming x86_64. =cmd-param-changed,param=\"pagination\",value=\"off\" @\"Detected debug stubs @ 3ffcbaa0 on core0 of target 'esp32'\\n\" @\"Target halted. PRO_CPU: PC=0x400D1F4C (active) APP_CPU: PC=0x4000C276 \\n\" [New Thread 1073557668] [New Thread 1073555768] [New Thread 1073561472] [New Thread 1073560324] [New Thread 1073548060] [New Thread 1073544580] [New Thread 1073546588] [New Thread 1073549192] [Switching to Thread 1073553736] Temporary breakpoint 1, app_main () at ../../targets/FreeRTOS_ESP32/ESP32_WROOM_32/nanoCLR/app_main.c:50 50 { =breakpoint-deleted,id=\"1\" The processor has now stopped at the temporary breakpoint inserted by our launch.vs.json startup sequence, showing as an Exception at the entry point in the source code window. You can now step through the code, observe variables, set breakpoints and so on. Summary This documentation is a work in progress, as is Visual Studio support for this type of project. Your feedback and contributions are welcome! Feedback Developing firmware for the nanoframework using Visual Studio 2017 community edition (See above for VS2019) The instructions for VS2019 are more current and can in the most case be used for VS2017 as well 🚧 IMPORTANT : The firmware build for Visual Studio is under construction. 🚧 Some compromises were required to get this to a working stage. I made a decision to put the code at the top level to reduce path length of files which caused warnings of the potential to overflow the command line. Hard coded paths are used to ensure it works with the current CMake coding and the Microsoft usage of CMake There are some issues with the CMakeSettings.json file with path separators. Directory structure for the project Two top level directories have been created to support the development with Visual Studio. c:\\nanoFramework\\nf-interpreter c:\\nanoFramework_Tools c:\\nanoFramework\\nf-interpreter The nf-interpreter repository is cloned to this directory. c:\\nanoFramework\\nf-interpreter\\Build This directory contains the build output, the files in here are transient. When the CMake cache is deleted, files in this directory are deleted. The files in this directory are only visible when selecting \"Show All Files\". These files are not part of the GIT repository. At the end of a successful build the build outputs are copied to the \\Build directory. Note: It is sometimes necessary to delete the contents of these folders if Visual Studio misbehaves. Using Visual Studio with CMake results in what appears to be inconsistencies at times. Sometime the CMake server goes away, shutting down Visual Studio and restarting usually fixes the problem. Note: After clearing the Cmake cache, on occasions the build/chibios_source directory is left empty or only containing the .git file due to some conflict. The current CMakeLists.txt file finds the directory and does not re-copy the code. It is necessary to manually delete the directory from file explorer and generate the cache for the copy to run. _ c:\\nanoFramework_Tools\\ Manually create this directory to contain the following folders. c:\\nanoFramework_Tools\\ChibiOS Copy of the ChibiOS repository cloned from https://github.com/nanoframework/chibios.git C:\\nanoFramework_Tools\\Tools\\openocd Copy of the openocd installation http://www.freddiechopin.info/en/download/category/4-openocd Currently version 0.10.0 C:\\nanoFramework_Tools\\Tools\\ Place a copy of the hex2dfu.exe tool here Example of the directory structure Major configuration files CMakeSettings.json Configuration file used by Visual Studio. This is the standard configuration file for CMake development. This file can contain more than one configuration. In addition to setting the compiler toolchain, additional variables are defined to select the target hardware and operating system to build. Note: Work in progress CMakeLists.txt This is the standard CMakeLists.txt file for the nf-intepreter launch.vs.json Sets up the debugging environment using the gdbserver debugging via configurations. The example references the openocd application. Setup and Installation Software Component Notes Link Visual Studio 2017 community edition Linux development with C++ option Visual C++ tools for Cmake and Linux option Embedded and IoT Development GCC version 6.3.1. December/2018 GCC Tool Chain - Version 7-2018-q2-update GNU Arm Embedded Toolchain https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads# GCC Toolchain NOTES Version 6.3.1 installed by Visual Studio has a problem with fallthrough, Version 8, has a problem with structures ( an issue has been raised to fix this) The following GCC version has been download, installed and tested. GNU Arm Embedded Toolchain - Version 7-2018-q2-update https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads# In CMakeSettings.json the following variables determine the build tool. { \"name\": \"TOOLCHAIN_PREFIX\", \"value\": \"C:/Program Files (x86)/GNU Tools Arm Embedded/7 2018-q2-update\" // \"value\": \"${env.GCCPATH}\" // Standard Visual Studio Install of GCC 6.3.1 }, In CMakeSettings.json the VISUAL_STUDIO variable sets up a workaround for a problem with the build system. If you use the add_custom_command with POST_BUILD then the build compiles but does not link due to a 'cmd.exe' not recognized' { \"name\": \"VISUAL_STUDIO\", \"value\": \"TRUE\" }, To avoid the problem the custom command to copy the build outputs is not run. An equivalent of this can be run by executing CopyBuildOutput.cmd manually from the command prompt. Debugging The launch.vs.json file contains an example configuration for setup to debug the STM32769IDiscovery board. Additonal configurations can be added, although the implementation of the options does not seem consistent with the VSCODE version and some options do not appear to work properly. Also, the whole system is a bit flakey. The openocd program is run as sub process of Visual Studio,and if it runs into problems the system fails, and you must run up task manager to end the openocd.exe task listed as a process of Visual Studio. Diagnosing problems with the debug and launch.vs.json You can get a better understanding of problems that may be occuring with the gdb/openocd debug setup. In Visual Studio select the Command Window Ctrl+Alt+A, and turn on debug logging with the following command. debug.midebuglog /On:c:\\Temp\\debug.log Run a debugging session to collect data and turn it off with the following command. debug.midebuglog /Off This will give you a log of the operation and communications occuring. ( Good luck!) An example snippet displays error for \"Monitor reset halt ( not quite sure why?) 8: (1976730) ->^done 8: (1976730) <-1005-interpreter-exec console \"monitor reset halt\" 8: (1976730) ->(gdb)` 8: (1976741) ->&\"\\\"monitor\\\" command not supported by this target.\\n\" 8: (1976742) ->1005^error,msg=\"\\\"monitor\\\" command not supported by this target.\" 8: (1976742) ->(gdb) 8: (1976742) 1005: elapsed time 11 8: (1976742) <-1006-interpreter-exec console \"monitor reset init\" 8: (1976742) ->&\"\\n\" 8: (1976742) ->^done 8: (1976742) ->(gdb) Feedback If you are using this your feedback is greatly appreciated. Please join our Discord community and start chatting about this."
  },
  "content/building/build-nxp.html": {
    "href": "content/building/build-nxp.html",
    "title": "How to Build, Flash and Debug the NXP nanoBooter and nanoCLR on Windows using Visual Studio Code | nanoFramework Documentation",
    "keywords": "How to Build, Flash and Debug the NXP nanoBooter and nanoCLR on Windows using Visual Studio Code Table of contents Prerequisites Setting up the build environment for NXP Set up MCUXpresso IDE nanoFramework GitHub repo Set up Visual Studio Code Build nanoBooter and nanoCLR Flash the NXP target Debugging with Cortex Debug with J-Link (Optional) Next Steps About this document This document describes how to build the required images for nanoFramework for NXP targets. The build is based on CMake tool to ease the development in all major platforms. Prerequisites You'll need: Visual Studio Code Visual Studio Code Extensions . C/C++ - C/C++ IntelliSense, debugging, and code browsing (by Microsoft) . CMake - language support for Visual Studio Code (by Microsoft) . CMake Tools - Extended CMake support in Visual Studio Code (by Microsoft) . Cortex Debug - Debug tool made explicity for ARM Cortex-M cores (needed for J-Link), if you're using on board programmer you don't need it. CMake (Minimum required version is 3.15) A build system for CMake to generate the build files to. We recommend Ninja . GNU ARM Embedded Toolchain OpenOCD (any working distribution will work, some suggestions follow) . xPack OpenOCD . OpenOCD – Open On-Chip Debugger ChibiOS - Technically you do not need to download this, the build scripts will do this automatically if you do not specify a path to ChibiOS in the cmake-variants.json (more info here ). The above can be installed by the Power Shell script .\\install-nf-tools.ps1 -TargetSeries NXP from the install-scripts folder within the nf-interpreter project (cloned or downloaded). Overview To simplify: this guide we will put all our tools and source in easily accessible folders and not at the default install paths (you do not have to do the same). Create a directory structure such as the following: C:\\nftools C:\\nanoFramework Download and install Visual Studio Code . Clone nf-interpreter repository into C:\\nanoFramework\\nf-interpreter . See next section for more info. Run the PowerShell script that's on the install-scripts folder that will download and install all the required tools. .\\install-stm32-tools.ps1 -Path 'C:\\nftools' For best results, run in an elevated command prompt, otherwise setting system environnement variables will fail. Review and adjust several JSON files to match your environment (as documented below) Restart Visual Studio Code (due to json changes) The setup is a lot easier than it seems. The setup scripts do almost everything. nanoFramework GitHub repo If you intend to change the nanoBooter or nanoCLR and create Pull Requests then you will need to fork the nanoFramework/nf-interpreter to your own GitHub repo and clone the forked GitHub repo to your Windows system using an Git client such as the GitHub Desktop application . The develop branch is the default working branch. When working on a fix or experimenting a new feature you should do it on another branch. See the Contributing guide for specific instructions on the suggested contributing workflow. If you don't intend to make changes to the nanoBooter and nanoCLR, you can clone nanoFramework/nf-interpreter directly from here. Make sure to put this folder high enough on your drive, that you won't trigger long filename issues. CMake does not support filenames in excess of 250 characters. Setting up the build environment To simplify, this guide we will put all our tools and source in easily accessible folders and not at the default install paths (you do not have to do the same): Create a directory structure such as the following: C:\\nftools C:\\nanoFramework Download and install Visual Studio Code. Download and install CMake to C:\\nftools\\CMake . Download Ninja and place the executable in C:\\nftools\\Ninja . Download and install the GNU ARM Embedded Toolchain to C:\\nftools\\GNU_ARM_Toolchain . Finally, clone nf-interpreter into C:\\nanoFramework\\nf-interpreter . See next section for more info. Set up MCUXpresso IDE For programming eval board using on board LPC-Link programmer you will need to set up MCUXpresso IDE which provides us with redlink software. Redlink copies flash image to core RAM and from there it's flashed into external HyperFlash or QSPI flash. Register and download MCUXpresso IDE form nxp website . Install MCUXpresso IDE. Remember to set proper paths while setting up launch.json file in next steps. Setting up the build environment After cloning the repo, you need to setup the build environment. You can use the power shell script or follow the step-by-step instructions. Automated Install of the build environment The following power shell script is not signed. Run Power Shell as an Administrator and run set-executionpolicy remotesigned to enable execution of the non-signed script. On Windows, one may use the .\\install-nf-tools.ps1 Power Shell script located in the repository install-scripts folder to download/install CMake, the toolchain, OpenOCD (for JTAG debugging) and Ninja. You may need to use Run as Administrator for power shell to permit installing modules to unzip the downloaded archives. The script will download the zips and installers into the repository zips folder and extract them into sub-folders of the nanoFramework tools folder C:\\nftools or install the tool. Open Power Shell in the install-scripts folder of the repository and run the script. Example Power Shell command line: ```ps .\\install-nf-tools.ps1 -TargetSeries NXP ``` You can force the environment variables to be updated by adding -Force to the command line. The script will create the following sub-folders (see manual install below): C:\\nftools C:\\nftools\\GNU_Tools_ARM_Embedded\\8-2019-q3-update C:\\nftools\\ninja C:\\nftools\\hex2dfu C:\\nftools\\openocd The following Environment Variables will be created for the current Windows User. NF_TOOLS_PATH = C:\\nftools GNU_GCC_TOOLCHAIN_PATH = C:\\nftools\\GNU_Tools_ARM_Embedded\\8-2019-q3-update NINJA_PATH = C:\\nftools\\ninja Set up Visual Studio Code Install the extensions: C/C++ CMake CMake Tools Run the PowerShell script Initialize-VSCode.ps1 that's on the install-scripts folder. This will adjust the required settings, build launch configuration for debugging and setup the tasks to ease your developer work. .\\Initialize-VSCode.ps1 You can force the environment variables to be updated by adding -Force to the command line. The PowerShell relies on the environment variables described above to properly setup the various VS Code working files. In case you have not used the automated install and the variable are not available you'll have to manually edit tasks.json , launch.json , cmake-variants.json and settings.json to replace the relevant paths. If you want to use onboard programmer edit the file named settings.json inside the .vscode folder and paste the following (mind to update the path to your setup): { \"cortex-debug.armToolchainPath\": \"c:/nftools/GNU_ARM_Toolchain/8 2019-q3-update/bin\", \"cortex-debug.JLinkGDBServerPath\": \"c:/Program Files (x86)/SEGGER/JLink/JLinkGDBServerCL.exe\" } Save any open files and exit VS Code. Build nanoCLR Launch Visual Studio from the repository folder, or load it from the File menu, select Open Folder and browse to the repo folder. VS Code could prompt you asking \"Would you like to configure this project?\". Ignore the prompt as you need to select the build variant first. Reopen VS Code. It should load the workspace automatically. In the status bar at the bottom left, click on the No Kit Selected and select [Unspecified] . In the status bar at the bottom left, click on the CMake:Debug NXP_MIMXRT1060_EVK: Ready and select Debug . Wait for it to finish Configuring the project (progress bar shown in right bottom corner). This can take a while the first time. In the status bar click Build or hit F7. Wait for the build to finish with Build finished with exit code 0 output message. In the build folder you'll find several files: nanoBooter.bin nanoBooter.elf nanoBooter.hex nanoCLR.bin nanoCLR.elf nanoCLR.hex Note: If there are errors during the build process it is possible to end up with a partial build in the build folder, and the CMake/Ninja build process declaring a successful build despite the .bin targets not being created, and a CMake clean not helping. In this case deleting the contents of the build folder should allow the build to complete once you resolve the issues that cause the original failure. Common Build Issues The above may have some errors if: CMake is not installed properly, not in the PATH or cannot be found for some reason. Ninja is not recognized: check settings.json or your PATH environment variable and restart Visual Studio Code. COMPILATION object file not found: check that your paths don't exceed 140 chars. Put the solution folder high enough on drive. Make sure to 'Build all' first time. Reopen VS Code if you have changed anything on the cmake-variants.json . Clean the build folder by deleting it's contents and restart VS Code. Flash the NXP target Connect the Target board to your PC using an USB cable. Open Visual Studio Code and go to Debug and Run (CTRL+SHIFT+D). Run debug (green rectangle or F5 default shortcut), firstly on nanoBooter then nanoCLR. Note: You don't have to re-flash nanoBooter every time you flash nanoCLR. Debugging with Cortex Debug with J-Link (Optional) If you want to view CPU register values in real time and use more advanced debugging tool. It's possible to use Cortex Debug extension. Please refer to guides available at SEGGER's wiki. Next Steps See Getting Started for instructions on creating and running a 'Hello World' managed application on your nanoFramework board."
  },
  "content/building/build-stm32.html": {
    "href": "content/building/build-stm32.html",
    "title": "How to Build, Flash and Debug the STM32 nanoBooter and nanoCLR on Windows using Visual Studio Code | nanoFramework Documentation",
    "keywords": "How to Build, Flash and Debug the STM32 nanoBooter and nanoCLR on Windows using Visual Studio Code Table of contents Prerequisites Setting up the build environment for STM32 Overview nanoFramework Github Repo Setting up the build environment Set up Visual Studio Code Build nanoCLR Flash the STM32 target Next Steps About this document This document describes how to build the required images for nanoFramework for STM32 targets. The build is based on CMake tool to ease the development in all major platforms. Prerequisites You'll need: Visual Studio Code Visual Studio Code Extensions . C/C++ - C/C++ IntelliSense, debugging, and code browsing (by Microsoft) . CMake - language support for Visual Studio Code (by Microsoft) . CMake Tools - Extended CMake support in Visual Studio Code (by Microsoft) CMake (Minimum required version is 3.15) A build system for CMake to generate the build files to. We recommend Ninja . GNU ARM Embedded Toolchain OpenOCD (any working distribution will work, some suggestions follow) . xPack OpenOCD . OpenOCD – Open On-Chip Debugger ChibiOS - Technically you do not need to download this, the build scripts will do this automatically if you do not specify a path to ChibiOS in the cmake-variants.json (more info here ). The above can be installed by the Power Shell script .\\install-nf-tools.ps1 -TargetSeries STM32 from the install-scripts folder within the nf-interpreter project (cloned or downloaded). Overview To simplify: this guide we will put all our tools and source in easily accessible folders and not at the default install paths (you do not have to do the same). Create a directory structure such as the following: C:\\nftools C:\\nanoFramework Download and install Visual Studio Code . Clone nf-interpreter repository into C:\\nanoFramework\\nf-interpreter . See next section for more info. Run the PowerShell script that's on the install-scripts folder that will download and install all the required tools. .\\install-nf-tools.ps1 -TargetSeries STM32 -Path 'C:\\nftools' For best results, run in an elevated command prompt, otherwise setting system environnement variables will fail. Review and adjust several JSON files to match your environment (as documented below) Restart Visual Studio Code (due to json changes) The setup is a lot easier than it seems. The setup scripts do almost everything. nanoFramework GitHub repo If you intend to change the nanoBooter or nanoCLR and create Pull Requests then you will need to fork the nanoFramework/nf-interpreter to your own GitHub repo and clone the forked GitHub repo to your Windows system using an Git client such as the GitHub Desktop application . The develop branch is the default working branch. When working on a fix or experimenting a new feature you should do it on another branch. See the Contributing guide for specific instructions on the suggested contributing workflow. If you don't intend to make changes to the nanoBooter and nanoCLR, you can clone nanoFramework/nf-interpreter directly from here. Make sure to put this folder high enough on your drive, that you won't trigger long filename issues. CMake does not support filenames in excess of 250 characters. Setting up the build environment After cloning the repo, you need to setup the build environment. You can use the power shell script or follow the step-by-step instructions. Automated Install of the build environment The following power shell script is not signed. Run Power Shell as an Administrator and run set-executionpolicy remotesigned to enable execution of the non-signed script. On Windows, one may use the .\\install-nf-tools.ps1 Power Shell script located in the repository install-scripts folder to download/install CMake, the toolchain, OpenOCD (for JTAG debugging) and Ninja. You may need to use Run as Administrator for power shell to permit installing modules to unzip the downloaded archives. The script will download the zips and installers into the repository zips folder and extract them into sub-folders of the nanoFramework tools folder C:\\nftools or install the tool. Open Power Shell in the install-scripts folder of the repository and run the script. Example Power Shell command line: ```ps .\\install-nf-tools.ps1 -TargetSeries STM32 ``` You can force the environment variables to be updated by adding -Force to the command line. The script will create the following sub-folders (see manual install below): C:\\nftools C:\\nftools\\GNU_Tools_ARM_Embedded\\8-2019-q3-update C:\\nftools\\ninja C:\\nftools\\hex2dfu C:\\nftools\\openocd The following Environment Variables will be created for the current Windows User. NF_TOOLS_PATH = C:\\nftools GNU_GCC_TOOLCHAIN_PATH = C:\\nftools\\GNU_Tools_ARM_Embedded\\8-2019-q3-update HEX2DFU_PATH = C:\\nftools\\hex2dfu NINJA_PATH = C:\\nftools\\ninja Set up Visual Studio Code Install the extensions: C/C++ CMake CMake Tools Run the PowerShell script Initialize-VSCode.ps1 that's on the install-scripts folder. This will adjust the required settings, build launch configuration for debugging and setup the tasks to ease your developer work. .\\Initialize-VSCode.ps1 You can force the environment variables to be updated by adding -Force to the command line. The PowerShell relies on the environment variables described above to properly setup the various VS Code working files. In case you have not used the automated install and the variable are not available you'll have to manually edit tasks.json , launch.json , cmake-variants.json and settings.json to replace the relevant paths. Save any open files and exit VS Code. Build nanoCLR Launch Visual Studio from the repository folder, or load it from the File menu, select Open Folder and browse to the repo folder. VS Code could prompt you asking \"Would you like to configure this project?\". Ignore the prompt as you need to select the build variant first. Reopen VS Code. It should load the workspace automatically. In the status bar at the bottom left, click on the No Kit Selected and select [Unspecified] . In the status bar at the bottom left, click on the CMake:Debug ST_STM32F429I_DISCOVERY: Ready and select Debug . Wait for it to finish Configuring the project (progress bar shown in right bottom corner). This can take a while the first time. In the status bar click Build or hit F7. Wait for the build to finish with Build finished with exit code 0 output message. In the build folder you'll find several files: nanoBooter.bin nanoBooter.elf nanoBooter.hex nanoCLR.bin nanoCLR.elf nanoCLR.hex Note: If there are errors during the build process it is possible to end up with a partial build in the build folder, and the CMake/Ninja build process declaring a successful build despite the .bin targets not being created, and a CMake clean not helping. In this case deleting the contents of the build folder should allow the build to complete once you resolve the issues that cause the original failure. Common Build Issues The above may have some errors if: CMake is not installed properly, not in the PATH or cannot be found for some reason. Ninja is not recognized: check settings.json or your PATH environment variable and restart Visual Studio Code. COMPILATION object file not found: check that your paths don't exceed 140 chars. Put the solution folder high enough on drive. Make sure to 'Build all' first time. Reopen VS Code if you have changed anything on the cmake-variants.json . Clean the build folder by deleting it's contents and restart VS Code. Flash the STM32 target Download the STM32 ST-LINK Utility from ST web site and install it in your development machine. Connect the Target board to your PC using an USB cable. Open STM32 ST-Link Utility. And click on Target > Connect . Next erase the entire chip by clicking on Target > Erase Chip . Open nanoBooter.hex ( Open > Open File... ) and program and verify ( Target > Program & Verify... ). Make sure you tick the Reset after programming check box and hit Start . After the upload completes, the MCU is reset and the nanoBooter image runs. You can check the success of the operation watching for a slow blink pattern on the LED. Congratulations, you now have a board running nanoFramework's booter! Open nanoCLR.hex ( Open > Open File... ) and program and verify ( Target > Program & Verify... ). Make sure you tick the Reset after programming check box and hit Start . After the upload completes, the MCU is reset and the nanoCLR image will run. This time and if all goes as expected, there will be no LED blinking. Note: You don't have to re-flash nanoBooter every time you flash nanoCLR. Next Steps See Getting Started for instructions on creating and running a 'Hello World' managed application on your nanoFramework board."
  },
  "content/building/chibios-hal/gcc-linker-script.html": {
    "href": "content/building/chibios-hal/gcc-linker-script.html",
    "title": "GCC linker script for ChibiOS boards | nanoFramework Documentation",
    "keywords": "GCC linker script for ChibiOS boards About this document This document describes the GCC linker script for nanoFramework boards using ChibiOS HAL/PAL and some explanations on how to customize and adapt it to a new target board. Linker script file naming To make it very clear on what file belongs to what image, the linker script files names carry a suffix of '_booter' for the nanoBooter and '_CLR' for the nanoCLR. These linker scripts are used by the linker at the link stage and are added to the build on the CMakeLists.txt global to a target board. When adding a new target board make sure that you set each linker script file to the appropriate target (in CMake, that is). It's also recommended that each linker script file is located in the respective nanoBooter or nanoCLR folder (these being inside a target board folder, that is). Configurations for nanoBooter link script The nanoBooter image is located at the default boot address of the target Soc/MCU. It's recommended that that the region length is set to match the FLASH space reserved for the nanoBooter. This adds an extra check because when the build and link occurs, if the image is too large to fit that space an error is generated and corrective actions can be taken. To illustrate this we are going to look into the linker script for the ST_NUCLEO_F091RC board. This is file STM32F091xC_booter.ld (@ targets/CMSIS-OS/ChibiOS/ST_NUCLEO_F091RC/nanoBooter/STM32F091xC_booter.ld). The only configuration here is the length of the flash region that should be set to the FLASH space reserved for the nanoBooter. In the example it can be seen that the nanoBooter image will start at address 0x08000000, with a maximum size of 16K. Configurations for nanoCLR link script The nanoCLR image is located at the designated address of the available FLASH space, typically right after the space reserved for the nanoBooter. It's recommended that that the region length is set to match the FLASH space reserved for the nanoCLR. This adds an extra check because when the build and link occurs, if the image is too large to fit that space an error is generated and corrective actions can be taken. To illustrate this we are going to look into the linker script for the ST_NUCLEO_F091RC board. This is file STM32F091xC_CLR.ld (@ targets/CMSIS-OS/ChibiOS/ST_NUCLEO_F091RC/nanoCLR/STM32F091xC_CLR.ld). The flash region configuration depends on two factors: the space reserved for nanoBooter image and the space reserved for application deployment. In the example it can be seen that nanoCLR image will start at address 0x08004000 and has a maximum size of 256k - 16k - 100k. That's the size reserved for nanoBooter and the size reserved for the application deployment. On this particular example (because this SoC requires that the vector table is copied to RAM) the ram0 region needs to be tweaked so it starts after the space reserved for the vector table. The end result is ram0 starting at 0x200000C0 with a length of 32k - 0xC0. Tips When designing the address map make sure that the address region boundaries match the FLASH memory blocks . This is very important in order to be able to perform image updates. This is valid for nanoBooter, nanoCLR and application deployment. The link script accepts several number format. Use the one that is convenient for what you are specifying. Follow some examples. For an absolute address (such as the start of a FLASH block) use the hexadecimal notation like in 0x08000000. When specifying the size of a region use the k and M suffixes, like 16k for a block with 16k Bytes (4096 bytes), or 1M. This makes it much easier to copy/paste from the device data sheet. It's OK to use mathematical expressions. For example, when setting the available space for the nanoCLR image don't bother with doing the math, just put there 1M - 16k."
  },
  "content/building/cmake/chibios-build.html": {
    "href": "content/building/cmake/chibios-build.html",
    "title": "CMake file for building ChibiOS from sources | nanoFramework Documentation",
    "keywords": "CMake file for building ChibiOS from sources About this document This document describes the purpose and workflow for the CMake configuration files to build ChibiOS from the repository sources. Building ChibiOS from sources might be needed when debugging a nanoFramework feature that interacts with it. Purpose The purpose of the configuration files collections is to create a CMake package for ChibiOS and build it. Reasoning The sources from ChibiOS can be downloaded from their GitHub mirror repository or, if already available in the build machine, can be copied to the build folder. When invoking CMake these options are passed specifying RTOS=CHIBIRTOS and CHIBI_SOURCE=path-to-the-local-repository-folder . Note: when specifying the location of a local clone make sure that the correct branch is checked out. Workflow ChibiOS HAL is based on boards . The collection of supported boards and the respective configurations live in hal/boards directory. nanoFramework includes an 'overlay' for ChibiOS were supported boards can be added. This collection is also checked for the target board. The collection of supported boards and the respective configurations implemented in the 'overlay' live in /targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/boards directory. A nanoFramework target can also include the ChibiOS board definitions. This is the advisable approach for OEM boards. In this case the board.c and board.h files have to be included right in the target directory. Support for each board in nanoFramework is required. This is were the configuration details and components/features are specified and/or configured. CMakes checks if the target board is available in the targets collection. The collection of board support is at /targets/CMSIS-OS/ChibiOS. After successfully finding the board support in both ChibiOS and nanoFramework targets, CMake checks the TARGET_SERIES in the list of supported series in order to figure out the series for later use. Please check the code at FindCHIBIOS.cmake for details. (NOTE: the current code has been validated for STM boards only) The FindCHIBIOS.cmake includes the specifics for the target series and the respective GCC options. The file naming logic is: CHIBIOS_ STM32F0xx _sources.cmake: common source files for the series (with the series name in bold) CHIBIOS_ STM32F0xx _GCC_options.cmake: GCC options for the series (with the series name in bold) When adding a new vendor/series/board follow these general guidelines: When in doubt try to follow the make files of the repo. They'll give you all the details that you need in order to replicate that in the CMake files. Check if the series file exists. If not, create it and add the source files and include directories. Check if the target series name is contained in the CHIBIOS_SUPPORTED_SERIES list. If not add the series name there. Check if the linker file name is listed in the series file. If not, add it."
  },
  "content/building/cmake/ninja-build.html": {
    "href": "content/building/cmake/ninja-build.html",
    "title": "Using Ninja to build nanoFramework | nanoFramework Documentation",
    "keywords": "Using Ninja to build nanoFramework Inside VS Code using CMake Tools To setup the CMake tools to build using Ninja you have to follow the following steps: Download and place the Ninja executable in a folder. Edit the settings.json file that VS Code places inside the .vscode folder Find a line for \"cmake.generator\" . If you don't have one just add it like this: \"cmake.generator\": \"Ninja\", Find a line for \"cmake.configureSettings\" . This is were the full path to the Nina executable should be set. Mind the forward slashes. If you don't have one just add a block like this: \"cmake.configureSettings\": { \"CMAKE_MAKE_PROGRAM\": \"E:/ninja/ninja.exe\" }, And that is it! Hit F7 or click the build configuration options for CMake Tools at the bottom toolbar. Performance comparison A simple test to compare the performance of NMake and Ninja was carried. It's a complete build (nanoBooter and nanoCLR) for a STM32F429I_DISCOVERY target with debugger and GPIO enabled. Build tool Time to complete build NMake 3m 17sec Ninja 1m 19sec"
  },
  "content/building/cmake-tools-cmake-variants.html": {
    "href": "content/building/cmake-tools-cmake-variants.html",
    "title": "Tweaking cmake-variants.TEMPLATE.json | nanoFramework Documentation",
    "keywords": "Tweaking cmake-variants.TEMPLATE.json Table of contents What is it How to use it Brief description Content explained Working example Templates About this document This document describes how to use and modify the cmake-variants.TEMPLATE.json file to suit your needs. Note : the current revision of the document only focuses on using ChibiOS RTOS. Other RTOSes will follow in a future revision. What is it cmake-variants.TEMPLATE.json is a template containing a minimal set of configuration examples needed to build nanoFramework for you board. Its content describes what kind of build you will get, which toolchain(s) you will use, which type of MCU is on the board, and some other options that will be described later in this document. How to use it First, you have to either rename the file or copy the contents to cmake-variants.json . Then, you will have to modify the content to match your environment. Later, when you change something in the cmake-variants.json you have to close and reopen VS Code and also wipe the build folder, then start again. Brief description There are two sets of parameters that need to be present in this file: the build type : 'debug' or 'release', for example the board's environment : MCU, toolchain, RTOS You should not have to modify the BuildType section unless you have good reasons to do so. However, the Linkage section is the one you will have to take care of. For each board you want to build, you will have to create a dedicated section in the Linkage area, precisely describing the MCU, the toolchain, the build type and the RTOS you will use. Content explained The following explains each line of the linkage section. Text highlighted in bold is an information that you will have to provide. Note : Mind the forward slash ('/') in paths strings ! \" OPTION1_NAME_HERE \" Replace this text with a distinctive option name. e.g. \"STM32F429_Disco\" \"short\": \" \" Replace the text with one word describing shortly your board. e.g. \"F429Disco\" \"long\": \" \" This is a more complete description of the configuration \"BUILD_VERSION\" : \" version-number-for-the-build-format-is-N.N.N.N \" \"CMAKE_TOOLCHAIN_FILE\" : \" CMake/toolchain. .cmake \" This is the toolchain file for the target being built. Currently there we support GNU GCC and Xtensa for ESP32. \"TOOLCHAIN_PREFIX\" : \" absolute-to-gcc-toolchain-mind-the-forward-slash \" This is the path to your gcc toolchain compiler. Use forward slashes and do not provide executable name here \"TOOL_HEX2DFU_PREFIX\" : \" absolute-path-to-hex2dfu-utility-mind-the-forward-slash \" This is the path to the HEX2DFU utility. Use forward slashes and do not provide executable name here. \"ESP32_IDF_PATH\" : \" absolute-path-to-esp-idf-mind-the-forward-slash \" This the path to the ESP32 IDF utility. Use forward slashes and do not provide executable name here. \"ESP32_LIBS_PATH\" : \" absolute-path-to-the-ESP32-libs-folder-mind-the-forward-slashes \" This is the path to the folder where the ESP32 libraries can be found. Use forward slashes. \"EXECUTABLE_OUTPUT_PATH\" : \" ${workspaceRoot}/build \" This is the default and recommended path which will expand to the build folder when building from VS Code. When building from the command line or from Visual Studio this is not required. \"TARGET_SERIES\" : \" STM32F7xx \" For STM32 MCUs represents the target series (STM32F4XX, STM32L4XX, and so on) -For ESP32 matches the target name: \"ESP32_WROOM_32\" \"USE_RNG\" : \" ON \" Option to enable the use of the hardware true random generator unit, if present. Default is ON as the majority of the targets have this feature. \"DP_FLOATINGPOINT\" : \" OFF \" Enables support for double-precision floating point. The default is single-precision. Set to ON to enable double precision floating point. \"SUPPORT_ANY_BASE_CONVERSION\" : \" OFF \" Defines which bases are supported when performing string to value conversions. When ON support for any base is enabled. When OFF (the default) the image will be compiled with support for base 10 and base 16 only. \"RTOS\" : \" one-of-valid-rtos-options \" Defines the RTOS that will be used to build nanoFramework. It can be CHIBIOS or FREERTOS_ESP32. Currently ChibiOS is supported for all STM32 targets and FreeRTOS is supported for ESP32 targets. \"CHIBIOS_SOURCE\" : \" absolute-path-to-chibios-source-mind-the-forward-slash \" Path to an optional local installation of ChibiOS source files. If no path is given, then CMake will download the sources from the projects ChibiOS repository when needed \"CHIBIOS_BOARD\" : \" valid-chibios-board-name-from-boards-collection \" Name of your board, chosen from the available boards collection that can be found in the \\os\\hal\\boards folder of the ChibiOS installation (or distant repository) \"SWO_OUTPUT\" : \" OFF \" Allows specifying whether to include, or not, support for Cortex-M Single Wire Output (SWO). Default is OFF. Check the documentation here for more details on how to use SWO. \"NF_BUILD_RTM\" : \" OFF \" Sets if the build is of R eady T o M arket type. Meaning that all debug helpers and code blocks will be removed from compilation and the build will be compiled and linked with all possible code reducing options enabled. \"NF_WP_TRACE_ERRORS\" : \" OFF \" Enable error tracing in Wire Protocol. \"NF_WP_TRACE_HEADERS\" : \" OFF \" Enable packet headers tracing in Wire Protocol. \"NF_WP_TRACE_STATE\" : \" OFF \" Enable state tracing in Wire Protocol. \"NF_WP_TRACE_NODATA\" : \" OFF \" Enable tracing of empty or incomplete packets in Wire Protocol. \"NF_WP_TRACE_ALL\" : \" OFF \" Enable all tracing options for Wire Protocol. \"NF_WP_IMPLEMENTS_CRC32\" : \" ON \" Enable CRC32 calculations for Wire Protocol. See details here . \"NF_FEATURE_DEBUGGER\" : \" OFF \" Defines is support for debuggin managed applications is enabled. Default is OFF. \"NF_FEATURE_RTC\" : \" OFF \" Allows you to specify whether to use the real time clock unit of the hardware for date & time functions. Depends on target availability. Default is OFF. \"NF_FEATURE_USE_APPDOMAINS\" : \" OFF \" Allows you to specify whether to include, or not, support for Application Domains. Default is OFF. More information about this is available in the documentation here . Note that the complete removal of support for this feature is being considered (see issue here ). \"NF_FEATURE_WATCHDOG\" : \" ON \" Allows you to define it the hardware watchdog should be disabled. This setting can only be set to OFF for STM32 targets. ESP32 build enables this by default so there is no way to disable it. Default is ON, so the hardware watchdog will be enabled by default. \"NF_FEATURE_HAS_CONFIG_BLOCK\" : \" OFF \" Allows the developer to set if the targets platform has configuration block. This requires the the block storage definition and the linker files add support for that. Default is OFF meaning that that the target DOES NOT have configuration block. \"NF_PLATFORM_NO_CLR_TRACE\" : \" OFF \" Allows you to define if trace messages and checks are added to CLR or not. These checks are usually valuable when debugging issues within the CLR. Can and should be removed for RTM build flavours. Default is OFF meaning that all the standard trace and checks are added to the CLR. \"NF_CLR_NO_IL_INLINE\" : \" OFF \" Allows you to define if CLR will use IL inlining. Default is OFF meaning that CLR will inline IL. \"NF_INTEROP_ASSEMBLIES\" : [ \"Assembly1-Namespace\", \"Assembly2-Namespace\" ] Lists the name of the Interop assembly(ies) to be added to the build. Leave empty or don't add it if no Interop assembly is to be added. \"NF_NETWORKING_SNTP\" : \" ON \" Allows you to specify whether SNTP is enabled. Requires networking feature to be enabled. Default is ON. \"NF_SECURITY_MBEDTLS\" : \" OFF \" Enables support for secure sockets using mbedTLS. Default is OFF. \"MBEDTLS_SOURCE\" : \" OFF \" Path to an optional local with mbedTLS source files. \"API_nanoFramework.Devices.OneWire\" : \" OFF \" Allows you to specify whether support for Devices.OneWire is available to your application. Default is OFF. \"API_System.Devices.Dac\" : \" OFF \" Allows you to specify whether DAC functions are available to your application. Default is OFF. \"API_System.Math\" : \" OFF \" Allows you to specify whether System.Math support is available to your application. Default is OFF. \"API_System.Net\" : \" OFF \" Allows you to specify whether System.Net support is available to your application. Default is OFF. \"API_nanoFramework.Devices.Can\" : \" OFF \" Allows you to specify whether CAN bus functions are available to your application. Default is OFF. \"API_nanoFramework.Devices.OneWire\" : \" OFF \" Allows you to specify whether 1-Wire functions are available to your application. Default is OFF. \"API_Windows.Devices.Adc\" : \" OFF \" Allows you to specify whether ADC functions are available to your application. Default is OFF. \"API_Windows.Devices.Gpio\" : \" OFF \" Allows you to specify whether GPIO functions are available to your application. Default is OFF. \"API_Windows.Devices.I2c\" : \" OFF \" Allows you to specify whether I2C functions are available to your application. Default is OFF. \"API_Windows.Devices.Pwm\" : \" OFF \" Allows you to specify whether PWM functions are available to your application. Default is OFF. \"API_Windows.Devices.SerialCommunication\" : \" OFF \" Allows you to specify whether Serial Communication functions are available to your application. Default is OFF. \"API_Windows.Devices.Spi\" : \" OFF \" Allows you to specify whether SPI functions are available to your application. Default is OFF. \"API_Windows.Networking.Sockets\" : \" OFF \" Allows you to specify whether Networking Sockets functions are available to your application. Default is OFF. \"API_Windows.Storage\" : \" OFF \" Allows you to specify whether Windows.Storage functions are available to your application. Default is OFF. \"API_Hardware.Esp32\" : \" OFF \" Allows you to specify whether Hardware.Esp32 functions are available to your application. Default is OFF. Note that this API is exclusive of ESP32 targets and can't be used with any other. \"API_Hardware.Stm32\" : \" OFF \" Allows you to specify whether Hardware.Stm32 functions are available to your application. Default is OFF. Note that this API is exclusive of STM32 targets and can't be used with any other. Working example The following linkage section is a real example used to build nanoFramework for the MBN Quail board. It is using the minimal mandatory information : \"MBNQUAIL\": { \"oneWordSummary$\": \"QUAIL\", \"description$\": \"MBN Quail\", \"settings\": { \"TOOLCHAIN_PREFIX\" : \"C:/Program Files (x86)/GNU Tools ARM Embedded/5.4 2016q3\", \"TARGET_CHIP\" : \"STM32F427VIT\", \"TARGET_SERIES\" : \"STM32F4xx\", \"RTOS\" : \"CHIBIOS\", \"CHIBIOS_SOURCE\" : \"C:/dev/ChibiOS_16.1.7\", \"CHIBIOS_BOARD\" : \"MBN_QUAIL\" \"NF_FEATURE_DEBUGGER\" : \"TRUE\", \"NF_FEATURE_RTC\" : \"ON\", \"NF_FEATURE_USE_APPDOMAINS\" : \"OFF\", \"NF_FEATURE_USE_NETWORKING\" : \"OFF\", \"API_Windows.Devices.Gpio\" : \"ON\" }, \"buildType\": \"Debug\" }, Templates To make your life easier, we provide templates with pre-configured cmake-variants.json for the various reference targets. Just grab them from our Gist. ST_STM32F4_DISCOVERY ST_STM32F429I_DISCOVERY ST_NUCLEO_F091RC ST_NUCLEO144_F746ZG ST_STM32F769I_DISCOVERY MBN_QUAIL NETDUINO3_WIFI ESP32_WROOM_32 TI_CC3220SF_LAUNCHXL"
  },
  "content/building/index.html": {
    "href": "content/building/index.html",
    "title": "Building nanoFramework | nanoFramework Documentation",
    "keywords": "Building nanoFramework Building nanoFramework Build using local source for RTOS CMake variants for CMake tools Building in Visual Studio ChibiOS HAL GCC linker script for ChibiOS boards CMake Building with ChibiOS Building using Ninja"
  },
  "content/building/rtos-source-for-build.html": {
    "href": "content/building/rtos-source-for-build.html",
    "title": "Building nanoFramework with local RTOS source vs RTOS source from repository | nanoFramework Documentation",
    "keywords": "Building nanoFramework with local RTOS source vs RTOS source from repository When building nanoFramework for a CMSIS target (currently only ChibiOS is supported) the developer has two options: either using a local path for the RTOS source code or downloading it from the official repository. This document aims to give you an brief overview of the differences between these two so you can choose the option that best fits your use scenario. Source from official repository When running CMake, if the parameter -DCHIBIOS_SOURCE is not not specified CMake will connect to nanoFrameworks ChibiOS mirror on GitHub and will clone the source from there. The time for this operation to complete will mostly depend on the speed of your internet connection. ChibiOS will be cached within the build directory so the full download won't happen again unless the build directory is cleared. A check for any changes in the repo is made whenever a build is run. If there are any, the changes will be downloaded and merged. This option is good for automated builds or when you don't have (or don't want) the repo cloned to your local storage device. Another advantage is that you don't have to manage the updates to the local clone yourself. An obvious disadvantage is that if the build folder is cleaned (required when switching between target boards) the 'cached' repo will be gone and a full download will occur when the project is next built. Source from local clone When running CMake, if the parameter -DCHIBIOS_SOURCE=\".....\" is specified a local clone located at the designated path will be used when the build occurs. The only timing penalty is the one necessary for CMake to copy the contents of the local ChibiOS repo to the build cache folder. This is a one time operation and it won't happen again unless the build folder is cleaned up. This option is good when you have a local clone of the repo and you don't want to increase the build time with checks on the repo and downloading it or wish to target a different branch (such as master ). The downside is that you have to manage the update process for the ChibiOS repo yourself. Another important aspect to consider is the branch to manually checkout . Not doing this is synonym of using the 'master' branch that contains the development files and is not a stable version, which is probably not what you want to use. So, make sure that you checkout the branch matching the currently supported stable version. In doubt ask in the Discord channel. Also here, if the build folder is cleaned the 'cached' repo will be gone."
  },
  "content/case-studies/index.html": {
    "href": "content/case-studies/index.html",
    "title": "Case studies | nanoFramework Documentation",
    "keywords": "Case studies Here you can find Case Studies illustrating real products using nanoFramework . Oil Fields Monitoring"
  },
  "content/case-studies/oil-fields-monitoring-orgpal.html": {
    "href": "content/case-studies/oil-fields-monitoring-orgpal.html",
    "title": "Oil Fields Monitoring | nanoFramework Documentation",
    "keywords": "Oil Fields Monitoring Company: OrgPal Telemetry Application Industry: Oil Field Product website Energy field services and operations requires compliance, accurate and frequent monitoring. For oil and gas companies the challenge is finding a cost-effective, reliable system and not all telemetry systems are created equal. Zan Gligorov , CEO of OrgPal Telemetry , explains the reasoning behind their choice. Our objective was to create a modern, simple, easy-to-install and use device that could easily integrate with the hundreds of sensors from the most modern to already existing across oil fields in North America. Our hardware met those goals, but we needed a great firmware to match it, and nanoFramework made that possible. Many solutions use different components from many manufacturers to integrate a solution, leading to a costly solution and even more costly maintenance option. The technology is not compatible by design, only function and given that they are deployed in distant hostile environments with limited or no access to terrestrial communications - and no electrical power supply - maintenance becomes very costly over time. Because nanoFramework is so feature rich yet easy to use, has small footprint (it fits on tiny MCU's), our solution is efficient with the lowest power consumption in the industry. We were able to use a very high power STM32 MCU, integrate a complete satellite with antenna, on board flash/file system, USB, cellular support, RTC and more for a very powerful remote measurement system, with low energy footprint. The resulting PalThree based solution is a game-changer for the industry. Checkout these photos bellow. Tanks in staging area Close up on tank with PalThree Tank fitted with PalThree deployed in the desert Solar panel that is powering PalThree PalThree in product enclosure"
  },
  "content/community-targets/GHI_FEZ_CERB40_NF.html": {
    "href": "content/community-targets/GHI_FEZ_CERB40_NF.html",
    "title": "| nanoFramework Documentation",
    "keywords": ""
  },
  "content/community-targets/I2M_ELECTRON_NF.html": {
    "href": "content/community-targets/I2M_ELECTRON_NF.html",
    "title": "| nanoFramework Documentation",
    "keywords": ""
  },
  "content/community-targets/I2M_OXYGEN_NF.html": {
    "href": "content/community-targets/I2M_OXYGEN_NF.html",
    "title": "| nanoFramework Documentation",
    "keywords": ""
  },
  "content/community-targets/index.html": {
    "href": "content/community-targets/index.html",
    "title": "Community provided target boards | nanoFramework Documentation",
    "keywords": "Community provided target boards There is a GitHub repository that holds target boards provided by community members. Check it here . These boards are now maintained by the core team and any questions/issues about them should be addresses to the target owner . STMicroelectronics boards GHI FEZ Cerb40 Ingenuity Micro Electron Ingenuity Micro Oxygen ST_NUCLEO144_F412ZG_NF ST_NUCLEO144_F439ZI ST_NUCLEO144_F746ZG ST_NUCLEO64_F401RE_NF ST_NUCLEO64_F411RE_NF ST_STM32F4_DISCOVERY TI CC1352P1_LAUNCHXL"
  },
  "content/community-targets/ST_NUCLEO144_F412ZG_NF.html": {
    "href": "content/community-targets/ST_NUCLEO144_F412ZG_NF.html",
    "title": "| nanoFramework Documentation",
    "keywords": ""
  },
  "content/community-targets/st_nucleo144_f439zi.html": {
    "href": "content/community-targets/st_nucleo144_f439zi.html",
    "title": "STM NUCLEO144 F439ZI board | nanoFramework Documentation",
    "keywords": "STM NUCLEO144 F439ZI board The board used in this community contribution is the NUCLEO144 F439ZI board from STM. The board can be purchased from various sources and should be about 23 euros. Further information on this board and links for the user and programming manuals can be found at the product page in ST website . Some basic information abstracted from ST: STM32 microcontroller in LQFP144 package External SMPS to generate Vcore logic supply (only available on '-P' suffixed boards) Ethernet compliant with IEEE-802.3-2002 (depending on STM32 support) USB OTG or full-speed device (depending on STM32 support) 3 user LEDs User and reset push-buttons 32.768 kHz crystal oscillator Board connectors: USB with Micro-AB SWD Ethernet RJ45 (depending on STM32 support) ST Zio connector including Arduino™ Uno V3 ST morpho Flexible power-supply options: ST-LINK USB VBUS or external sources On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration capability: mass storage, virtual COM port and debug port Flashing and debugging This board has two micro USB connectors. One is exposing the embedded ST-Link interface that is used for flashing the nanoFramework firmware and for performing debugging on the nanoCLR code. The second is used to connect the device with Visual Studio allowing to deploy and debug your C# managed applications. Floating point The current build is set to add support for single-precision floating point. Meaning that System.Math API supports only the float overloads. The double ones will throw a NotImplementedException ."
  },
  "content/community-targets/ST_NUCLEO64_F401RE_NF.html": {
    "href": "content/community-targets/ST_NUCLEO64_F401RE_NF.html",
    "title": "| nanoFramework Documentation",
    "keywords": ""
  },
  "content/community-targets/ST_NUCLEO64_F411RE_NF.html": {
    "href": "content/community-targets/ST_NUCLEO64_F411RE_NF.html",
    "title": "| nanoFramework Documentation",
    "keywords": ""
  },
  "content/community-targets/stm32f4-discovery.html": {
    "href": "content/community-targets/stm32f4-discovery.html",
    "title": "STMicroelectronics STM32F4DISCOVERY | nanoFramework Documentation",
    "keywords": "STMicroelectronics STM32F4DISCOVERY Product page Firmware images (ready to deploy) Stable Preview"
  },
  "content/community-targets/st-nucleo144-f746zg.html": {
    "href": "content/community-targets/st-nucleo144-f746zg.html",
    "title": "STMicroelectronics NUCLEO144-F746ZG | nanoFramework Documentation",
    "keywords": "STMicroelectronics NUCLEO144-F746ZG Product page Firmware images (ready to deploy) Stable Preview"
  },
  "content/community-targets/ti-cc1352p1-launchxl.html": {
    "href": "content/community-targets/ti-cc1352p1-launchxl.html",
    "title": "TI CC1352P1-LAUNCHXL | nanoFramework Documentation",
    "keywords": "TI CC1352P1-LAUNCHXL Product page Features CC1352R mcu CC3220SF single-chip wireless microcontroller Dual-Core Architecture: User-Dedicated Application MCU Subsystem Dedicated software controlled radio controller Powerful 48-MHz Arm® Cortex®-M4F processor Embedded Memory: 352kB of in-system Programmable Flash 256KB of ROM for protocols and library functions 8KB of Cache SRAM (Alternatively available as general-purpose RAM) 80KB of ultra-low leakage SRAM Peripherals: Digital peripherals can be routed to any GPIO 4× 32-bit or 8× 16-bit general-purpose timers 12-Bit ADC, 200 kSamples/s, 8 channels 2× comparators with internal reference DAC (1× continuous time, 1× ultra-low power) Programmable current source 2× UART 2× SSI (SPI, MICROWIRE, TI) I2C I2S Real-Time Clock (RTC) AES 128- and 256-bit Crypto Accelerator ECC and RSA Public Key Hardware Accelerator SHA2 Accelerator (Full suite up to SHA-512) True Random Number Generator (TRNG) Capacitive sensing, up to 8 channels Integrated temperature and battery monitor Radio section Multi-band sub-1 GHz and 2.4 GHz RF transceiver compatible with Bluetooth 5 Low Energy and IEEE 802.15.4 PHY and MAC Excellent receiver sensitivity: –121 dBm for SimpleLink long-range mode –110 dBm at 50 kbps, –105 dBm for Bluetooth 125-kbps (LE Coded PHY) Output power up to +14 dBm (Sub-1 GHz) and +5 dBm (2.4 GHz) with temperature compensation Suitable for systems targeting compliance with worldwide radio frequency regulations ETSI EN 300 220 Receiver Category 1.5 and 2, EN 300 328, EN 303 131, EN 303 204 (Europe) EN 300 440 Category 2 FCC CFR47 Part 15 ARIB STD-T108 and STD-T66 Wide standard support Output power up to +20 dBm with temperature compensation Wireless protocols Thread Zigbee® Bluetooth® 5 Low Energy IEEE 802.15.4g IPv6-enabled smart objects (6LoWPAN), Wireless M-Bus Wi-SUN® KNX RF proprietary systems SimpleLink™ TI 15.4-Stack (Sub-1 GHz) Dynamic Multiprotocol Manager (DMM) Launchpad board LaunchPad with 2.4GHz and Sub-1GHz radio for wireless applications with integrated PCB trace antenna Broad band antenna supports both 868 MHz ISM band for Europe and 915 MHz ISM band for US with a single board On-board emulator gets you started with instant code development in CCS Cloud Can be used with both LaunchPad kit and SmartRF™ Studio applications Access all I/O signals with the BoosterPack plug-in module connectors Compatible with LCD BoosterPack Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ Stable Preview"
  },
  "content/contributing/api-review-process.html": {
    "href": "content/contributing/api-review-process.html",
    "title": "| nanoFramework Documentation",
    "keywords": "TBD"
  },
  "content/contributing/cla.html": {
    "href": "content/contributing/cla.html",
    "title": "nanoFramework Individual Contributor License Agreement | nanoFramework Documentation",
    "keywords": "nanoFramework Individual Contributor License Agreement Thank you for your interest in contributing to nanoFramework (\"We\" or \"Us\"). This contributor agreement (\"Agreement\") documents the rights granted by contributors to Us. To make this document effective, please sign it and send it to Us by electronic submission, following the instructions at . This is a legally binding document, so please read it carefully before agreeing to it. The Agreement may cover more than one software project managed by Us. 1. Definitions \"You\" means the individual who Submits a Contribution to Us. \"Contribution\" means any work of authorship that is Submitted by You to Us in which You own or assert ownership of the Copyright. If You do not own the Copyright in the entire work of authorship, please follow the instructions in . \"Copyright\" means all rights protecting works of authorship owned or controlled by You, including copyright, moral and neighboring rights, as appropriate, for the full term of their existence including any extensions by You. \"Material\" means the work of authorship which is made available by Us to third parties. When this Agreement covers more than one software project, the Material means the work of authorship to which the Contribution was Submitted. After You Submit the Contribution, it may be included in the Material. \"Submit\" means any form of electronic, verbal, or written communication sent to Us or our representatives, including but not limited to electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Us for the purpose of discussing and improving the Material, but excluding communication that is conspicuously marked or otherwise designated in writing by You as \"Not a Contribution.\" \"Submission Date\" means the date on which You Submit a Contribution to Us. \"Effective Date\" means the date You execute this Agreement or the date You first Submit a Contribution to Us, whichever is earlier. 2. Grant of Rights 2.1 Copyright License (a) You retain ownership of the Copyright in Your Contribution and have the same rights to use or license the Contribution which You would have had without entering into the Agreement. (b) To the maximum extent permitted by the relevant law, You grant to Us a perpetual, worldwide, non-exclusive, transferable, royalty-free, irrevocable license under the Copyright covering the Contribution, with the right to sublicense such rights through multiple tiers of sublicensees, to reproduce, modify, display, perform and distribute the Contribution as part of the Material; provided that this license is conditioned upon compliance with Section 2.3. 2.2 Patent License For patent claims including, without limitation, method, process, and apparatus claims which You own, control or have the right to grant, now or in the future, You grant to Us a perpetual, worldwide, non-exclusive, transferable, royalty-free, irrevocable patent license, with the right to sublicense these rights to multiple tiers of sublicensees, to make, have made, use, sell, offer for sale, import and otherwise transfer the Contribution and the Contribution in combination with the Material (and portions of such combination). This license is granted only to the extent that the exercise of the licensed rights infringes such patent claims; and provided that this license is conditioned upon compliance with Section 2.3. 2.3 Outbound License As a condition on the grant of rights in Sections 2.1 and 2.2, We agree to license the Contribution only under the terms of the license or licenses which We are using on the Submission Date for the Material (including any rights to adopt any future version of a license if permitted). 2.4 Moral Rights. If moral rights apply to the Contribution, to the maximum extent permitted by law, You waive and agree not to assert such moral rights against Us or our successors in interest, or any of our licensees, either direct or indirect. 2.5 Our Rights. You acknowledge that We are not obligated to use Your Contribution as part of the Material and may decide to include any Contribution We consider appropriate. 2.6 Reservation of Rights. Any rights not expressly licensed under this section are expressly reserved by You. 3. Agreement You confirm that: (a) You have the legal authority to enter into this Agreement. (b) You own the Copyright and patent claims covering the Contribution which are required to grant the rights under Section 2. (c) The grant of rights under Section 2 does not violate any grant of rights which You have made to third parties, including Your employer. If You are an employee, You have had Your employer approve this Agreement or sign the Entity version of this document. If You are less than eighteen years old, please have Your parents or guardian sign the Agreement. (d) You have followed the instructions in , if You do not own the Copyright in the entire work of authorship Submitted. 4. Disclaimer EXCEPT FOR THE EXPRESS WARRANTIES IN SECTION 3, THE CONTRIBUTION IS PROVIDED \"AS IS\". MORE PARTICULARLY, ALL EXPRESS OR IMPLIED WARRANTIES INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE EXPRESSLY DISCLAIMED BY YOU TO US. TO THE EXTENT THAT ANY SUCH WARRANTIES CANNOT BE DISCLAIMED, SUCH WARRANTY IS LIMITED IN DURATION TO THE MINIMUM PERIOD PERMITTED BY LAW. 5. Consequential Damage Waiver TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT WILL YOU BE LIABLE FOR ANY LOSS OF PROFITS, LOSS OF ANTICIPATED SAVINGS, LOSS OF DATA, INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL AND EXEMPLARY DAMAGES ARISING OUT OF THIS AGREEMENT REGARDLESS OF THE LEGAL OR EQUITABLE THEORY (CONTRACT, TORT OR OTHERWISE) UPON WHICH THE CLAIM IS BASED. 6. Miscellaneous 6.1 This Agreement will be governed by and construed in accordance with the laws of excluding its conflicts of law provisions. Under certain circumstances, the governing law in this section might be superseded by the United Nations Convention on Contracts for the International Sale of Goods (\"UN Convention\") and the parties intend to avoid the application of the UN Convention to this Agreement and, thus, exclude the application of the UN Convention in its entirety to this Agreement. 6.2 This Agreement sets out the entire agreement between You and Us for Your Contributions to Us and overrides all other agreements or understandings. 6.3 If You or We assign the rights or obligations received through this Agreement to a third party, as a condition of the assignment, that third party must agree in writing to abide by all the rights and obligations in the Agreement. 6.4 The failure of either party to require performance by the other party of any provision of this Agreement in one situation shall not affect the right of a party to require such performance at any time in the future. A waiver of performance under a provision in one situation shall not be considered a waiver of the performance of the provision in the future or a waiver of the provision in its entirety. 6.5 If any provision of this Agreement is found void and unenforceable, such provision will be replaced to the extent possible with a provision that comes closest to the meaning of the original provision and which is enforceable. The terms and conditions set forth in this Agreement shall apply notwithstanding any failure of essential purpose of this Agreement or any limited remedy to the maximum extent possible under law."
  },
  "content/contributing/coding-contributions.html": {
    "href": "content/contributing/coding-contributions.html",
    "title": "Coding contributions to nanoFramework | nanoFramework Documentation",
    "keywords": "Coding contributions to nanoFramework API review process Contribution workflow C# Coding Style C/C++ Coding Style GitHub Labels Project priorities Contribution License Agreement Developing native code Debug with VS Code Debug class libraries and startup Use a viewer to watch output from Cortex-M SWO"
  },
  "content/contributing/contributing-individuals.html": {
    "href": "content/contributing/contributing-individuals.html",
    "title": "Contributing individuals | nanoFramework Documentation",
    "keywords": "Contributing individuals nanoFramework was started from individual contributions and keeps growing based on those. That's very important for the project and we sure would love to have you onboard! The project needs people with skills on C/C++ and C# and Azure DevOps. No need to be a subject matter expert! Even the smallest contribution matters. We welcome embedded system developers familiar with platforms we target, including: ESP32, STM32, TI CC32xx and NXP. Or are familiar with RTOSes, including: FreeRTOS, ChibiOS and TI SimpleLink. C# developers with general coding experiencing, coding Visual Studio extension development, coding with Visual Studio debugging components, willing to write unit tests. Technical writers that want to get experience, gain knowledge on a new platform or technology or just wanting to contribute voluntarily. Designers, video editors, web designers and people with marketing and PR skills. Basically the project can benefit from good communication, presenting good and nice looking materials, provide great and engaging training materials. Code of conduct This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. Contributing guide Please read our Contribution Workflow to get an idea on the matter and hopefully get you started on your first Pull Request! ;)"
  },
  "content/contributing/contributing-organizations.html": {
    "href": "content/contributing/contributing-organizations.html",
    "title": "Organizations contributing or helping nanoFramework | nanoFramework Documentation",
    "keywords": "Organizations contributing or helping nanoFramework Organizations contributing to nanoFramework These companies and organizations contribute to the develop effort of nanoFramework . Eclo Solutions that allows José Simões and other developers of it's team to work for nanoFramework on their work hours, along with providing Azure infrastructure to run nfbot and that has paid nanoFramework bills during the early stages. Global Control 5 Ltd. which has contributed with NXP port and the NXP_MIMXRT1060_EVK reference target. OrgPal that has commissioned the development of several nanoFramework features. Organizations helping nanoFramework These companies and organizations support the community and the project. ChibiOS that provides us with an awesome RTOS that's used in our STM32 targets. GitHub that hosts our git repositories. Icons 8 that allows to use their icons on our Visual Studio extension. JFrog which provides us free hosting and distribution for our firmware images and other utils used in the build process. Microsoft through free Azure DevOps that runs our CD & CI infrastructure. Sonar Cloud by providing free access to their Continuous Code Quality analysis tools. Projects and communities supporting nanoFramework AMQP.Net Lite the awesome AMQP library developed by Xin Chen . Nerdbank.GitVersioning package from Andrew Arnott that provides semver-compatible git commit information and that we use on all our class libraries."
  },
  "content/contributing/contributing-workflow.html": {
    "href": "content/contributing/contributing-workflow.html",
    "title": "Contribution Workflow | nanoFramework Documentation",
    "keywords": "Contribution Workflow You can contribute to nanoFramework with issues and PRs. Simply filing issues for problems you encounter is a great way to contribute. Contributing implementations is greatly appreciated. Table of contents Getting Started Making a change Typos Coding Style Changes Commit Messages Contributor License Agreement PR Feedback Working on an open issue Suggested Workflow General git resources Getting Started If you are looking at getting your feet wet with some simple (but still beneficial) changes, check out up-for-grabs issues on the nanoFramework Home repo. For new ideas, please always start with an issue before starting development of an implementation. See project priorities to understand the team's approach to engagement on general improvements to the product. You do not need to file an issue for trivial changes (e.g. typo fixes). Just create a PR for those changes. Making a change Make a quality change. Consider and document (preferably with tests) as many usage scenarios as you can to ensure that your change will work correctly in the myriad of ways it might get used. There are several issues to keep in mind when making a change. Typos Typos are embarrassing! We will accept most PRs that fix typos. In order to make it easier to review your PR, please focus on a given component with your fixes or on one type of typo across the entire repository. If it's going to take >30 mins to review your PR, then we will probably ask you to chunk it up. Coding Style Changes We would like to have nanoFramework in full conformance with the style guidelines described here C/C++ Coding Style and here C# Coding Style . We plan to do that with tooling, in a holistic way. In the meantime, please: DO NOT send PRs for style changes. DO give priority to the current style of the project or file you're changing even if it diverges from the general guidelines. Commit Messages Please format commit messages as follows (based on this excellent post ): Summarize change in 50 characters or less Provide more detail after the first line. Leave one blank line below the summary and wrap all lines at 72 characters or less. If the change fixes an issue, leave another blank line after the final paragraph and indicate which issue is fixed in the specific format below. Fix #42 Also do your best to factor commits appropriately, i.e. not too large with unrelated things in the same commit, and not too small with the same small change applied N times in N different commits. If there was some accidental reformatting or whitespace changes during the course of your commits, please rebase them away before submitting the PR. Signing off your commit messages We recommend (although is not mandatory) that you include a Signed-off-by line in the commit message: Signed-off-by: Joe Smith <joe.smith@email.com> The project requires that the name used is your real name. Neither anonymous contributions nor those utilizing pseudonyms will be accepted. Contributor License Agreement Why a CLA? The Contributor License Agreement helps ensure everyone that nanoFramework is here to stay. Specifically, our Contributor License Agreements (CLAs) grant the contributor and nanoFramework joint copyright interest in contributed code. Further, it provides assurance from the contributor that contributions are original work that does not violate any third-party license agreement. The agreement between contributors and project is explicit, so developers and users can be confident in the legal status of the source code and their right to use it. Our CLA's All contributions to nanoFramework (no matter if that's code, bug fixes, configuration changes, documentation, or anything elase) requires that the contributor(s) complete and sign a Contributor License Agreement. You can read it here . nanoFramework team and community members will provide feedback on your change. Community feedback is highly valued. You will often see the absence of team feedback if the community has already provided good review feedback. PR Feedback nanoFramework team and community members will provide feedback on your change. Community feedback is highly valued. You will often see the absence of team feedback if the community has already provided good review feedback. One or more nanoFramework team members will review every PR prior to merge. They will often reply with \"LGTM, modulo comments\". That means that the PR will be merged once the feedback is resolved. \"LGTM\" == \"looks good to me\". There are lots of thoughts and approaches for how to efficiently discuss changes. It is best to be clear and explicit with your feedback. Please be patient with people who might not understand the finer details about your approach to feedback. Also don't think that comments and requests for changes means that your contribution is not appreciated and people can be stalling or discouraging you. You may have done a wonderful job on the task at hand but, as it's still part of a very large software project, there could be implications on aspects that you might not be aware of, or that it's impacting or causing side effects on other parts. Keep an open mind and positive attitude! 😉 nanoFramework project uses many labels for categorizing issues and pull requests. Check here the full list. Working on an open issue When you want to work on an open issue (including up-for-grabs ) we recommend the following. Issues labeled with investigating : if the current status doesn't seem updated or clear, add a comment asking for clarification before start any work on it. Issues labeled with under-review : if the current status doesn't seem updated or clear, add a comment asking for a clarification before start any work on it. Issues labeled with up-for-grabs : add a comment stating your interest and the issue will be assigned to you and the label switched to in progress . Suggested Workflow We use and recommend the following workflow: Create an issue for your work. You can skip this step for trivial changes. Reuse an existing issue on the topic, if there is one. Get agreement from the team and the community that your proposed change is a good one. If your change adds a new API, follow the API Review Process . Clearly state that you are going to take on implementing it, if that's the case. You can request that the issue be assigned to you. Note: The issue filer and the implementer don't have to be the same person. Create a personal fork of the repository on GitHub (if you already have one you can jump straight to step 5 bellow). Forking the repository is a simple click on the \"Fork\" button (at the top right corner) on the repositories page in GitHub. Clone that new fork to your local system. This operation depends heavily on what local client you are going to use in order to manage your local clone. There are a number of clients, from Git command line to more sophisticated and GUI clients. GitHub has it's own desktop client . There is an extension for Visual Studio . Visual Studio Code has it's owned Git client baked in. There is also the popular Tower and many others. If you are using a GUI client don't bother with the the git command lines shown bellow. Cloning locally is a simple click on the green \"Clone or Download\" button (at the top right corner) that shows on your personal fork in GitHub. You can also perform this operation locally. Directly from your Git client or from the git command line: git clone https://github.com/<your-github-id-here>/<nf-repo-name-here>.git Configure a remote upstream to the master repository. git remote add upstream https://github.com/nanoframework/<nf-repo-name-here>.git Make sure that your develop branch is in sync with the master develop branch. git checkout develop git pull upstream develop Create a branch off of develop branch. git checkout -b <branch-name-here> develop We suggest that you name the branch so that it clearly communicates your intentions, such as issue-123 or githubhandle-issue . Don't use a branch name starting with develop because that may be mistaken with the develop branches on the master repository. Branches are useful since they isolate your changes from incoming changes from upstream. They also enable you to create multiple PRs from the same fork. Work your way through the changes and commit them using your Git client or the command line as you prefer. Please follow our Commit Messages guidance. Include Signed-off-by line, e.g. git commit -s Add new tests corresponding to your change, if applicable. Build the repository with your changes. Make sure that the builds are clean. Make sure that the tests are all passing, including any new tests that you've added. If you've been working in this branch and changes have been made in upstream develop, you should rebase the working branch on the upstream develop branch so that your work shows on top of any other changes. If you have just created your working branch you can skip this step. git rebase upstream/develop Push your changes to your fork on GitHub (if you haven't already). git push origin <branch-name-here> Create a pull request (PR) against the upstream repository's develop branch. Creating a PR is a simple click on the \"Pull Request\" button that shows on your personal fork in GitHub. There is a template for the PR message. We ask you to follow it. It has the required topics and placeholders for what is required to make it clear. Also acts as a check list for you as the submitter. When starting a PR GitHub will show you if you repo is up to date with the master one and if a merge is OK. If there are differences showing you have to go back to you local clone and merge those into your local clone. After doing that it's advisable to re-run the build and tests because there could have been changed brought in that affected your code. After the above succeeds you have to push the changes up to origin repeating step 10 above. Note 1: It is OK for your PR to include a large number of commits. If that's the case, once your change is accepted, you can be asked to squash your commits into one or some appropriately small number of commits before your PR is merged. Note 2: It is OK to create your PR as \"[WIP]\" on the upstream repo before the implementation is done. This can be useful if you'd like to start the feedback process concurrent with your implementation. State that this is the case in the initial PR comment. Note 3: If you are working on a feature that has high impact or it's something experimental, your original PR can have it's target branch moved into a new develop branch in the master repo, something like develop-shiny-awesome-feature . General git resources If you are coming from another version control system git can feel daunting, awkward, confusing and may cause you frustration. ⚠️ Be warned about that! ⚠️ 😜 We suggest that you go through some basic tutorial and give it a try on a test repo that you setup for yourself. Here are a few resources that we've compiled to get you up to speed. No claims that these are, by any stretch, the only or the better ones! You can find a bunch of these out there! GitHub trial site . Gives you a nice tour of git. Get your feet wet without even installing software! GitHub help page Deals with basic usage, concepts and terms of git and github. Good to get a first idea. Git Reference . Nice and concise reference of the essential functions of git. Takes about 30min to read through, you'll come out smarter at the end. The git community book . This book is meant to help you learn how to use Git as quickly and easily as possible. Escape a git mess step-by-step . Humorous and handy workflow to help you when you get stuck with git and your blood pressure starts to rise."
  },
  "content/contributing/cs-coding-style.html": {
    "href": "content/contributing/cs-coding-style.html",
    "title": "C# Coding Style | nanoFramework Documentation",
    "keywords": "C# Coding Style For non code files (xml etc) our current best guidance is consistency. When editing files, keep new code and changes consistent with the style in the files. For new files, it should conform to the style for that component. Last, if there's a completely new component, anything that is reasonably broadly accepted is fine. The general rule we follow is \"use Visual Studio defaults\". For details check the Naming Guidelines of .NET guide. We use Allman style braces, where each brace begins on a new line. A single line statement block can go without braces but the block must be properly indented on its own line and it must not be nested in other statement blocks that use braces. We use four spaces of indentation (no tabs). We use _camelCase for internal and private fields and use readonly where possible. Prefix static fields with s_ and thread static fields with t_ . When used on static fields, readonly should come after static (i.e. static readonly not readonly static ). We avoid this. unless absolutely necessary. We always specify the visibility, even if it's the default (i.e. private string _foo not string _foo ). Visibility should be the first modifier (i.e. public abstract not abstract public ). Namespace imports should be specified at the top of the file, outside of namespace declarations and should be sorted alphabetically. Avoid more than one empty line at any time. For example, do not have two blank lines between members of a type. Avoid spurious free spaces. For example avoid if (someVar == 0)... , where the dots mark the spurious free spaces. Consider enabling \"View White Space (Ctrl+E, S)\" if using Visual Studio, to aid detection. If a file happens to differ in style from these guidelines (e.g. private members are named m_member rather than _member ), the existing style in that file takes precedence. We only use var when it's obvious what the variable type is (i.e. var stream = new FileStream(...) not var stream = OpenStandardInput() ). We use language keywords instead of BCL types (i.e. int, string, float instead of Int32, String, Single , etc) for both type references as well as method calls (i.e. int.Parse instead of Int32.Parse ). We use PascalCasing to name all our constant local variables and fields. The only exception is for interop code where the constant value should exactly match the name and value of the code you are calling via interop. We use nameof(...) instead of \"...\" whenever possible and relevant. Fields should be specified at the top within type declarations. We have provided a Visual Studio 2013 vssettings file nnnnn.vssettings at the root of each repository, enabling C# auto-formatting conforming to the above guidelines. Note that rules 7 and 8 are not covered by the vssettings, since these are not rules currently supported by VS formatting. Example File: ObservableLinkedList`1.cs: using System; using System.Collections; using System.Collections.Generic; using System.Collections.Specialized; using System.ComponentModel; using System.Diagnostics; using Microsoft.Win32; namespace System.Collections.Generic { public partial class ObservableLinkedList<T> : INotifyCollectionChanged, INotifyPropertyChanged { private ObservableLinkedListNode<T> _head; private int _count; public ObservableLinkedList(IEnumerable<T> items) { if (items == null) throw new ArgumentNullException(nameof(items)); foreach (T item in items) { AddLast(item); } } public event NotifyCollectionChangedEventHandler CollectionChanged; public int Count { get { return _count; } } public ObservableLinkedListNode AddLast(T value) { var newNode = new LinkedListNode<T>(this, value); InsertNodeBefore(_head, node); } protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e) { NotifyCollectionChangedEventHandler handler = CollectionChanged; if (handler != null) { handler(this, e); } } private void InsertNodeBefore(LinkedListNode<T> node, LinkedListNode<T> newNode) { ... } ... } } ObservableLinkedList`1.ObservableLinkedListNode.cs: using System; namespace System.Collections.Generics { partial class ObservableLinkedList<T> { public class ObservableLinkedListNode { private readonly ObservableLinkedList<T> _parent; private readonly T _value; internal ObservableLinkedListNode(ObservableLinkedList<T> parent, T value) { Debug.Assert(parent != null); _parent = parent; _value = value; } public T Value { get { return _value; } } } ... } }"
  },
  "content/contributing/cxx-coding-style.html": {
    "href": "content/contributing/cxx-coding-style.html",
    "title": "C/C++ Coding Style | nanoFramework Documentation",
    "keywords": "C/C++ Coding Style For C/C++ files (*.c, *.cpp and *.h), we use clang-format (version 3.10) to ensure code styling. The rules and config files are included in the nf-interpreter repository. Using Visual Studio Code If you are using Visual Studio Code we suggest that you install the Clang-Format extension . To have this extension working you need to have the clang-format.exe installed on your system. LLVM.org doesn't provide a separate installer for this tool so follows a quick and dirty way of getting it. Install the Clang-Format extension. Install the LLVM package from GitHub here . Take note of the path where you choose to install it. Back in VS Code, open the settings and adjust the entry for clang-format.executable with the path to the executable. The new setting file will have a new entry with something similar to the following: \"clang-format.executable\" : \"C:/Program Files/LLVM/bin/clang-format.exe\" You might have something slightly different in your setup. Just remember the following: add that setting, the path that you've copied before, change it to have forward slashes and add the clang-format.exe at the end. After following the above steps successfully you can now right click on any C, C++ or H file and hit 'Format Document'. The VS Code extension will take care that the document is properly formatted according to the coding style guidelines. Using Visual Studio If you are using Visual Studio we suggest that you install the ClangFormat extension ."
  },
  "content/contributing/developer-guide.html": {
    "href": "content/contributing/developer-guide.html",
    "title": "| nanoFramework Documentation",
    "keywords": "TBD"
  },
  "content/contributing/developing-native/arm-swo.html": {
    "href": "content/contributing/developing-native/arm-swo.html",
    "title": "Using ARM Cortex-M Single Wire Output (SWO) | nanoFramework Documentation",
    "keywords": "Using ARM Cortex-M Single Wire Output (SWO) About this document This document describes how to use Cortex-M SWO to output data from nanoFramework . Prerequisites You'll need: Target board with SWO pin free and configured in it's reset state (meaning not used by GPIO or any other peripheral and not configured in any alternate mode). If using a stock board it's also convenient to check the schematics if any hardware changes are required. STM F429I_DISCOVERY board requires solder bridge SB9 to be soldered STM F769I-DISCO board requires a 0 Ohm resistor on R92 (or just soldering the pads toghether) Software capable of driving and outputting data from an SWO source. (ST-Link)[http://www.st.com/content/st_com/en/products/embedded-software/development-tool-software/stsw-link004.html] is an excellent tool for this purpose. Set nanoFramework build options to include support for SWO (either setting \"SWO_OUTPUT\" : \"ON\" in cmake-variants.json or launching CMake with -DSWO_OUPUT=ON). Outputting SWO Load the target flash with a nanoFramework image build with SWO option On ST-Link menu choose ST-Link -> Printf via SWO viewer After SWO viewer windows loads, set the Sytem clock to match the target and the Stimulus port to 0 . Click the Start button and watch the output in the main window area."
  },
  "content/contributing/developing-native/debugging-class-libraries.html": {
    "href": "content/contributing/developing-native/debugging-class-libraries.html",
    "title": "Guidelines for debugging nanoFramework class libraries native code | nanoFramework Documentation",
    "keywords": "Guidelines for debugging nanoFramework class libraries native code About this document This document provides guidelines useful when debugging class libraries native code. It doesn't care if the developer is using VS Code or other IDE. How does an assembly load successfully? The assemblies with the class libraries and the managed application are loaded at startup from the deployment area in the FLASH memory. When the LoadDeploymentAssemblies() is called the deployment area is sweep and all 'candidate' assemblies are validated. The validation steps are basically checking the start token, a valid header and the CRC32 of the full assembly. Only the ones that pass the complete set of validation make it to the assembly collection. After this step a call to g_CLR_RT_TypeSystem.ResolveAll() happens in which the type system tries to resolve all the assemblies. This means that all the required types and methods (from all the assemblies) are available and in the correct versions. Next comes the g_CLR_RT_TypeSystem.PrepareForExecution() which is only called if all the assemblies could be resolved along with the required types. Starting the execution engine The managed application actually starts to be executed with a call to g_CLR_RT_ExecutionEngine.Execute() . As long the managed code is being executed this will never exit. When the execution ends, because of a serious exception or because there is no managed application to execute the code flow hits the CLR_EE_DBG_IS( RebootPending ) line (bellow the the call to the execution engine call). Summarizing So, by setting break points at, or after, the above calls one can understand and perform a check if the assemblies are being loaded and/or the managed application being executed. If something goes wrong (for instance) with an assembly failing to load the developer has to go deeper in order to find out the root cause. But that's a matter for another piece of documentation."
  },
  "content/contributing/developing-native/vscode-debug-instructions.html": {
    "href": "content/contributing/developing-native/vscode-debug-instructions.html",
    "title": "Instructions for debugging nanoFramework native code in VS Code | nanoFramework Documentation",
    "keywords": "Instructions for debugging nanoFramework native code in VS Code Table of contents Prerequisites Preparation Launch the debug session About this document This document describes how to debug nanoFramework native code using VS Code. Prerequisites You'll need: GNU ARM Embedded Toolchain Visual Studio Code C/C++ extension OpenOCD (any working distribution will work, follow some suggestions) Freddie Chopin OpenOCD (development) OpenOCD – Open On-Chip Debugger GNU ARM Eclipse OpenOCD Preparation You'll need a binary image with debug information to be loaded in the SoC or MCU. Assuming you are using VS Code to launch your builds, you'll have this image ready to be loaded in the MCU. (see Build instructions documentation ) In order to launch the debug session you'll need to setup the launch.json file, located in the .vscode folder. We've provided a template file launch.TEMPLATE.json to get you started with this. Just copy it and rename to launch.json . Here's what you need to change in order to adapt the template file to your setup and make it more suitable to your working style and preferences. name: here you can name each of the launch configurations to help choosing the appropriate one when launching the debug session. These could be for example: \"nanoBooter in Discovery 4\", \"nanoCLR in Nucleo F091RC\", \"test featureXYZ in Discovery 4\". miDebuggerPath: full path to the gdb executable (this one is inside the GCC tool-chain folder) program: full path to the .elf output file that results from a successful build setupCommands (fourth 'text' entry): full path to the final image (the .hex file) setupCommands (fifth 'text' entry): the same as the program entry above (the .elf file) debugServerPath: full path to the OpenOCD executable debugServerArgs: full path to the scripts directory on the OpenOCD installation AND the appropriate .cfg files for the interface and the board. Note 1: VS Code parser seems to have trouble parsing and replacing the ${workspaceRoot} for some OpenOCD commands. That's the reason why you see there the ${workspaceRoot} variable and in other places the full path were that variable would make sense to be at. Just use what's there to keep OpenOCD happy. Note 2: Always mind the forward slash in the paths above, otherwise you'll get into troubles with strange and unclear errors from OpenOCD. Templates To make your life easier, we provide templates with pre-configured launch.json for the various reference targets. Just grab them from our Gist. ST_STM32F4_DISCOVERY ST_STM32F429I_DISCOVERY ST_NUCLEO_F091RC ST_NUCLEO144_F746ZG ST_STM32F769I_DISCOVERY TI_CC3220SF_LAUNCHXL Launch the debug session Using VS Code menu View > Debug, clicking on the debug icon on the left hand toolbar or hitting the CTRL+SHIT+D shortcut you'll reach the debug view. There you'll find the launch configurations for debug that we've setup above (see the drop down at the top) and the familiar green play button (or F5 if you prefer). When a debug session is active you can find a lot of familiar stuff: debug toolbar with the usual operations (pause, step over, into, out, restart and stop) variables list call stack that you can use to navigate up and down breakpoint list to manage those watch expressions support for 'mouse over' a variable which will display a context with the variable content ability to set/remove breakpoints by clicking near the line number other handy tools and options using the right click on the various objects"
  },
  "content/contributing/financial-sponsors.html": {
    "href": "content/contributing/financial-sponsors.html",
    "title": "Financial sponsors | nanoFramework Documentation",
    "keywords": "Financial sponsors nanoFramework uses 'Open Collective' to manage our funding in a completely transparent manner. Funding is necessary for us to manage things like infrastructure costs, carry out PR (including advertising the project to the embedded systems industry, hobbyist communities and academia), marketing work, development and maintenance tasks that no one volunteers to do, supporting projects that we depend on, etc... To this end, we have setup an 'Open Collective' to manage our funding in a completely transparent manner. To make a donation you can use either Open Collective or GitHub Sponsors. Click on the appropriate button bellow. Sponsors Sponsors will get their logo and link to a website on our GitHub readme and also on our home page. Backers Backers are individuals who contribute with money to help support nanoFramework. Every little bit helps and we appreciate all contributions, even the smallest ones."
  },
  "content/contributing/index.html": {
    "href": "content/contributing/index.html",
    "title": "Contributing to nanoFramework | nanoFramework Documentation",
    "keywords": "Contributing to nanoFramework Financial contributions People contributing to nanoFramework do so in the spirit of Open Source, our community, developers using nanoFramework and, most importantly, pushing the embedded systems world forward together in a community effort. Funding is necessary for us to manage things like infrastructure costs, carry out PR (including advertising the project to the embedded systems industry, hobbyist communities and academia), marketing work, development and maintenance tasks that no one volunteers to do, supporting projects that we depend on, etc... To this end, we have setup an 'Open Collective' to manage our funding in a completely transparent manner. To make a donation you can use either Open Collective or GitHub Sponsors. Click on the appropriate button bellow. How can I help? Anyone can help the project in a number of ways: Choose to use or ask your employer to use nanoFramework in projects. If you are a teacher or work in training, use nanoFramework in your courses, classes and workshops. If you are a maker, publish your projects on platforms such as Hackster.io , spread the word by tweeting about us, mentioning us on the forums and communities where you are engaged in. Contribute to our various repositories, from the nf-interpreter (where the firmware images that running on the targets devices), to the various class libraries, Visual Studio extension and other various utilities. Use nanoFramework in your projects and report back bugs that you find and/or suggest better ways to accomplish something or even new features that can improve the framework. Help writing, translating and maintaining the documentation for the various components, getting started guides, tutorials and target devices. Hangout on our Discord community and answer questions, provide guidance and mentorship and welcome new members to the community. Help in managing, triaging and answering GitHub issues. Contribute web designs and creative designs for our project website and/or other graphic and visual needs. Become a backer or supporter through our Open Collective or GitHub Sponsors . Commissioning new features and sponsoring bug fixes. Branding and social networking. Encouraging employers You can ask your employer to improve your (and the company) productivity by using nanoFramework in projects. Explain to them how nanoFramework can help developing an embedded system project, no matter if it's a proof of concept for a potential customer or if it's a complex IoT device. How easy is to use the tools available for a smooth debugging experience. Executives CTO's, VPs and business owners can also help nanoFramework ! nanoFramework along with C# and Visual Studio can give your team a tremendous productivity boost. Imagine slashing the number of hours required to complete a project and making it's maintenance easier. If you're not willing to take our word for it, perhaps you will if it comes from a reputable source in the industry like Altium. Check out this article from their blog, where industry expert Mark Harris goes through a deep analysis on the benefits of using high level programming languages like C# and nanoFramework for embedded projects. It includes some interesting numbers on costs, budgets and estimates. Sponsorship Besides monetary contribution, companies can support nanoFramework by providing their developers time. This can come from developers that are between projects or tasks and are not actively working on a company project in certain period. Or maybe there is a project already using nanoFramework for which a specific feature is not available yet or requires improvements. Developers working on it can use their time to code that and contribute back to the project. Developers The project needs people with skills on C/C++ and C# and Azure DevOps. No need to be a subject matter expert! Even the smallest contribution matters. We welcome embedded system developers familiar with platforms we target, including: ESP32, STM32, TI CC32xx and NXP. Or that are familiar with RTOSes, including: FreeRTOS, ChibiOS and TI SimpleLink. C# developers with general coding experiencing, coding Visual Studio extension development, coding with Visual Studio debugging components, willing to write unit tests. Commissioning new features A great way to get something back from your financial contribution is to commission new features. If your company is working on a new product or project and nanoFramework is missing a feature, could use a couple of APIs that don't exist or even an entire library, just reach out to Eclo Solutions to design and build it. If it's not a secret or something too specific, whit your permission, it can be merged to the codebase and benefit the ecosystem and the entire community. Sponsor bug fixes Sometimes bugs hang in the queue for too much sometime. The common triage criteria are the seriousness of the issue (how severely and wide is the impact) and the estimate on how long it takes to fix it. If there is a bug that's being a show stopper for you or your project you can sponsor it's resolution. We'll provide an estimate on the cost to fix it. Brand advocates and social networking Besides financial contributions or coding there is a lot more that you can do to help the project. .NET nanoFramework can be an awesome framework to work with and empowers developers with a tremendous productivity boost, but... if just a handful of people know about that? Marketing and advertising cost money that we don't have. You can help by spreading the word. Do you maintain a blog? Or do you have a bunch of followers on Twitter or LinkedIn? A post about .NET nanoFramework and mentioning @nanoframework can take the project further. GitHub stars it's an easy and simple contribution to the project. Please spare a few seconds and head over to our GitHub organization and give them a star. It increases the project visibility and it's an indication on how big it's the community around it. Writing a review and classifying our extensions on the Visual Studio marketplace has a positive impact on the project visibility and helps towards increasing the reputation. Providing a testimonial with an endorsement to the project or highlighting a feature or a situation where it has stand out it's another way of contributing to the project. Email, tweet or send a message on Discord. If you want it to be featured on the web site please include your name, title, company and picture. Other sections about contributing to nanoFramework Coding contributions API review process Contribution workflow C# Coding Style C/C++ Coding Style GitHub Labels Project priorities Contribution License Agreement Developing native code Debug with VS Code Debug class libraries and startup Use a viewer to watch output from Cortex-M SWO"
  },
  "content/contributing/labels.html": {
    "href": "content/contributing/labels.html",
    "title": "Labels | nanoFramework Documentation",
    "keywords": "Labels nanoFramework project uses many labels for categorizing issues and pull requests. Label Meaning on Issue Meaning on Pull Request bug The issue concerns a bug in the code The issue concerns a bug in the code enhancement The issue is an improvement to the code The pull request is an improvement to the code up-for-grabs The issue has been discussed and it's ready for someone to start working on it. It's not assigned to a particular person. If you want to work on it, just add a comment saying so and it's yours! Normally not applicable (see comments if observed on a pull request) investigating The issue is being investigated by the team or by a community member. If the status is not clear, better ask for an update about it. n/a question The issue is a question Normally not applicable (see comments if observed on a pull request) code review n/a The pull request is under review needs discussion The issue needs further discussion before an actionable decision can be made The pull request needs further discussion before an actionable decision can be made pull request A pull request intended to address the issue has been created, but not yet merged n/a blocked The issue cannot be fixed until another issue, which may be external, is addressed The pull request cannot be merged until another issue, which may be external, is addressed do not merge n/a The pull request should not be merged at this time. This could indicate a work-in-progress, a problem in the implementation code, or cases where the pull request depends on (is blocked by) another issue or pull request which has not been addressed. merge OK n/a The pull request has been reviewed and meets all the contribution requirements so it's ready to be merged in progress A developer is currently working on the issue A developer is currently making updates to the code in the pull request fixed The issue has been resolved The pull request describes a new issue (i.e. no separate issue exists), and the content of the pull request was merged to fix the issue duplicate Another issue or pull request contains the original report for this topic Another pull request was submitted to correct the issue. This is generally only applied to pull requests after another pull request to correct the issue is merged. wontfix The issue will not be corrected. The current behaviour could be by design, out of scope, or cannot be changed due to the breaking changes policy for the project (see comments for details). The pull request will not be merged due to a fundamental issue (see description for this label on issues) documentation The issue is related with documentation The pull request is related with documentation feature-request The issue contains a new feature request Normally not applicable (see comments if observed on a pull request) FEEDBACK REQUESTED Feedback from the community is requested. Please step in and add your comment, that is if you have anything relevant to say about it. Normally not applicable (see comments if observed on a pull request) help wanted If this issue has any work assigned or has already started to be addressed in a pull request help is welcomed. If you are willing to help add a comment to coordinate with the people already working on it. Help is welcomed for this pull request. If you are willing to help add a comment to coordinate with the people already working on it. DONE The work on the issue is completed n/a under review The issue (probably a feature request) is under review and a decision hasn't been made n/a trivial The work required to complete this issue is considered to be very simple and it shouldn't pose any significant challenge. It can be completed in a very short time. It doesn't require any particular skills or deep knowledge on the matter or the project. n/a non trivial The work required to complete this issue is considered to be somewhat complex. It requires a particular skill set or deep knowledge on the matter or about the matter or the project architecture. n/a area-Config-and-Build The issue is related with the configuration and build of nanoFramework The pull request is related with the configuration and build of nanoFramework area-Infrastructure-and-Organization The issue is related with the infrastructure or the overall organization of the nanoFramework project The pull request with the infrastructure or the overall organization of the nanoFramework project area-Interpreter The issue is related with the Interpreter component of nanoFramework The pull request is related with the Interpreter component of nanoFramework"
  },
  "content/contributing/project-priorities.html": {
    "href": "content/contributing/project-priorities.html",
    "title": "| nanoFramework Documentation",
    "keywords": "TBD"
  },
  "content/esp32/build_ESP32_libraries.html": {
    "href": "content/esp32/build_ESP32_libraries.html",
    "title": "Build the ESP32 IDF Libraries | nanoFramework Documentation",
    "keywords": "Build the ESP32 IDF Libraries Using the instructions on the Espressif website . Download the complete Msys2 enviroment and toolchain and unzip to c:\\msys2 Download the required ESP IDF into the nanoClr build default location c:\\Esp32_tools\\esp-idf-v3.3.1 Set up your Windows environment with the IDF_PATH=c:\\Esp32_tools\\esp-idf-v3.3.1 Start Msys command shell C:\\msys32\\mingw32.exe cd /c/esp32_tools/esp-idf-v3.3.1/examples/get-started/blink/ run: make menuconfig Change the following options: Esp32 specific/Cpu frquency 240Mhz Esp32 specific/Initialize Task Watchdog Timer in startup = OFF Esp32 specific/Main XTAL frequency = Autodetect LWIP SO RCVbuf Component config/Bluetooth enable FatFS Long filename support(Heap) Psram autodetect 32bit or 64bit Save and Exit Run make to build blink project Exit msys2 Copy the libraries to the Esp32_tools/lib-v3.3.1 directory Copy the nf-interpreter\\targets\\FreeRTOS_ESP32\\ESP32_WROOM_32\\CopyLibs.cmd to the c:\\esp32_tools\\esp-idf-v3.3.1\\examples\\get-started\\blink directory Open windows command in same directory and run batch file. This will create and copy all the libraries plus the bootloader.bin to the c:\\esp32_tools\\libs-v3.3.1 directory copy the updated build/include/sdkconfig.h to the nf-interpreter\\targets\\FreeRTOS_ESP32\\ESP32_WROOM_32 directory Check/update build files In the nf-interpreter repo check/update the following files: azure-pipelines-templates\\build-esp32.ymlAppveyor.yml azure-pipelines-templates\\download-install-esp32-build-components.yml install-scripts\\install-esp32-idf.ps1 install-scripts\\install_esp32-libs.ps1"
  },
  "content/esp32/index.html": {
    "href": "content/esp32/index.html",
    "title": "ESP32 specific articles | nanoFramework Documentation",
    "keywords": "ESP32 specific articles Building ESP32 libraries"
  },
  "content/faq/coding-in-csharp.html": {
    "href": "content/faq/coding-in-csharp.html",
    "title": "Coding in C# | nanoFramework Documentation",
    "keywords": "Coding in C# Can I use auto-properties in classes? No, you have to declare the backing fields. I have a Solution that targets both nanoFramework and standard .NET and would like to share/reuse code in both platforms. I know I can't reference assemblies from one into the other. How can I accomplish this? Your best option is to use a shared project to hold the common code. Put there the classes that are to be used in both platforms. You can go all the way into this reusability by using compiler constants, compiler defines and even partial classes. For a small example on this check the ToString sample on our samples repo. It's using this technic to share code between a nanoFramework app and a .NET console app. I need to debug something in a class library how can I easily replace the NuGet reference with the real project? This can be easily accomplished by using a handy Visual Studio extension called NuGet Reference Switcher . Add the class library project to your solution and using that tool switch the NuGet package reference to the recently added project. After debugging you can switch back to the NuGet reference."
  },
  "content/faq/index.html": {
    "href": "content/faq/index.html",
    "title": "Frequently asked questions | nanoFramework Documentation",
    "keywords": "Frequently asked questions Despite working with nanoFramework being tremendously easy there always moments where one needs a hand or bumps into an award situations. This is a collection of tips, perls of wisdom and answers to frequent situations. Please do contribute with your own! Coding in C# Working with Visual Studio extension Working with ESP32 targets Working with STM32 targets <!-- Coding C/C++ (native firmware) --> <!-- Debugging C/C++ (native firmware) --> <!-- Working with Visual Studio Code --> <!-- Developing Visual Studio extension -->"
  },
  "content/faq/working-with-esp32-targets.html": {
    "href": "content/faq/working-with-esp32-targets.html",
    "title": "Working with ESP32 targets | nanoFramework Documentation",
    "keywords": "Working with ESP32 targets Is the ESP32 Dev Kit C the ONLY board version that will work with nanoFramework? There are available several different versions including: ESP32-WROOM-32, ESP32-WROOM-32D, ESP32-WROOM-32U, ESP32-SOLO-1, ESP32-WROVER-B, ESP32-WROVER-IB, etc. The current ESP32 Dev Kit C image that we provide works on all ESP32 boards that use the ESP32-Wroom-32x or ESP32-WROVER modules. The ESP32-WROVER modules also have PSRAM which we currently don't support but will in the future. The SOLO modules have only one core which currently won't work as we start the nanoCLR on the 2nd core. Can I use Smart Config to configure my ESP32 devices? Yes you can! The Smart Config is automatically started when the device is booted and there is no wireless SSID set up. i.e. When the device is first flashed. To configure the device use one of the Smart Config apps on your phone such as :- the ESP8266 SmartConfig, DHC smartConfig apps on Android and EspressiF ESpTouch on IOS. Connect phone to Wifi to the Access point, run Smart Config application which will prompt you for the AP password. This will then send the details to the device. The device saves the details and connects to the AP point. When connected it confirms the connection back to the Phone. When the device is next rebooted the device automatically connects to AP as the WiFi details have been saved. For more information see here . In your application you can wait for the network to be configured/connected by waiting for the IP to be set. static void WaitIP() { Console.WriteLine(\"Wait for IP\"); while (true) { NetworkInterface ni = NetworkInterface.GetAllNetworkInterfaces()[0]; if (ni.IPv4Address != null && ni.IPv4Address.Length > 0) { if (ni.IPv4Address[0] != '0') { Console.WriteLine(\"Have IP \" + ni.IPv4Address); break; } } Thread.Sleep(1000); } } Can I debug nanoCLR code on ESP32 using Visual Studio without any special hardware? Yes you can! Follow the old-school steps described here ."
  },
  "content/faq/working-with-stm32-targets.html": {
    "href": "content/faq/working-with-stm32-targets.html",
    "title": "Working with STM32 targets | nanoFramework Documentation",
    "keywords": "Working with STM32 targets Can I debug the native code on any STM32 board? For that to be possible you need to be able to connect to the JTAG pins on the MCU. Most of the STM32 Discovery and Nucleo boards include a ST-Link hardware that exposes the debug port."
  },
  "content/faq/working-with-vs-extension.html": {
    "href": "content/faq/working-with-vs-extension.html",
    "title": "Working with Visual Studio extension | nanoFramework Documentation",
    "keywords": "Working with Visual Studio extension I have a Solution with several class library projects that are referenced in the application project. After a few debug sessions VS complains that it can't access one of them because the file is locked by another process. This occurs because the debugger or de deployment provider have locked that DLL on a previous debug session. To prevent this from happening, you have to open the \"Configuration Manager\" dialog for the Solution and un-check the \"Deploy\" option for all projects except the executable. To remove the lock on that file open a PowerShell console and execute the following command, being NNNN the process number that shows at the very end of the VS message: Stop-Process -id NNNNN . When I build a project/solutions it fails with an error NFMDP: Error 0x81010009 . What is this? This happens when you are using a C# feature that is not currently supported by nanoFramework. The most common cases are generics or a complicated Linq expression. There is currently no way to point you exactly where the issue is. The best suggestion is to build often so you can spot this as early as possible. It can also help if you comment the code that you've added recently and start uncomment as you run the build. This way you'll have a general guidance on where the root cause could be. When deploying an application I get a message like Couldn't find a valid native assembly required by... complaining that it can't find a native assembly. What can I do to fix this? This occurs when you are deploying a project that is referencing one (or more) libraries for which the target image doesn't have support or are of a different version. Make sure you have your NuGet updated and that the target device is flashed with the appropriate image. It could be that you are referencing preview versions of the NuGet packages but the target device is flashed with an older stable image and is \"behind\". I'm having issues with NuGet package manager complaining that it can't resolve dependencies for a package. This is occurring because you're probably referencing a preview version of a NuGet package that is published only on nanoFramework development feed. The same can occur if the package is referencing another package that its only available there. When working with preview packages, make sure that you register nanoFramework Azure DevOps NuGet feed by adding the package source in Visual Studio. Follow our blog post with instructions here . After starting a debug session it end abruptly with a message like Error: Device stopped after type resolution failure . What can I do to fix this? This happens when there is a problem with type resolution on the deployed application. Usually happens after one of these situations: The firmware image was updated and the deployment wasn't erased. The assemblies in the deployment area are outdated and the required types or versions can't be found on the new image. Fix: erase de deployment area and deploy a new version of the application. One or more NuGet packages where updated and there is a version mismatch between them. This is noticeable by Visual Studio adding an app.config file to one or more of the projects to use assembly binding redirect. This is not possible with nanoFramework . Fix: erase the app.config and work the update of the NuGet packages. The best option is usually to update the one(s) that have more dependencies and the package manager will make sure to update all the other in a cascading manner. If this doesn't work the alternative is to uninstall the NuGet packages and start adding them back again."
  },
  "content/getting-started-guides/getting-started-managed.html": {
    "href": "content/getting-started-guides/getting-started-managed.html",
    "title": "Getting Started Guide for managed code (C#) | nanoFramework Documentation",
    "keywords": "Getting Started Guide for managed code (C#) nanoFramework enables the writing of managed code applications for embedded devices. Doesn't matter if you are a seasoned .NET developer or if you've just arrived here and want to give it a try. This getting started guide will walk you through the setup of your development machine to get you coding a nice \"Hello World\" in no time! You can find the video for this guide on our YouTube channel here . The hardware In this guide we'll be using a ST Microelectronics STM32F746 NUCLEO board. This is a rather common and inexpensive board that packs a Cortex M7 with 1MB flash, 320 kB of RAM and includes an ethernet connector. Installing Visual Studio The first part is to get Visual Studio (both 2017 and 2019 versions are supported) and the nanoFramework extension installed. Download Visual Studio. If you already have it installed, you can skip this step. If you don't, please download the free Visual Studio Community edition. Either way, make sure you've selected the .NET desktop workload. If using the latest preview (recommended), please make sure you are able to use the latest extension and NuGet's: https://nanoframework.net/2019/08/21/new-preview-feeds-for-nanoframework. Launch Visual Studio (we'll just refer to it as VS from now on) and install the nanoFramework extension. You can do this by going into Tools > Extensions and Updates. Make sure you've switched the left-hand tree view to the Online branch and enter nanoFramework in the search box. Now open the Device Explorer window. You can do this by going into View > Other Windows > Device Explorer. Uploading the firmware to the board using nanoFirmwareFlasher The second part is to load the nanoFramework image in the board flash. The best way is to use the nano Firmware Flasher tool. This is a .NET Core CLI command tool. Note: the VC++ 2010 x86 redistributable may required installing on your PC in certain circumstances. Install nano Firmware Flasher . dotnet tool install -g nanoFirmwareFlasher Perform the update by providing the target name to nano Firmware Flasher. The official name of the target (either a reference or a community board) has to be used, otherwise it won't work as the tool isn't able to guess what board is connected. (The following include the description for targets of several platforms for completeness) To update the firmware of an ESP32 target connected to COM31, to the latest available development version. (In case the board you have has one of these: please press and hold Flash button on your board before running command and until you see 'Erasing flash...\" message) nanoff --target ESP32_WROOM_32 --serialport COM31 --update To update the firmware of a ST board connected through JTAG (ST-Link) to the latest available development version. nanoff --target ST_NUCLEO144_F746ZG --update To update the firmware of a ST board connected through DFU (like the NETDUINO3) you first need to put the board in DFU mode. This can be accomplished by pressing a certain combination of buttons. It depends on the particular hardware that you are using. nanoff --target NETDUINO3_WIFI --update After the upload completes, the MCU is reset and the nanoCLR image will run. You can check if the board is properly running nanoFramework by looking into the Device Explorer window in Visual Studio. Coding a 'Hello World' application Now you have everything that you need to start coding your first application. Let's go for a good old 'Hello World' in micro-controller mode, which is blinking a LED, shall we? Go back to VS and click File > New > Project. Make sure you have selected 'Framework 4.6 or above' and choose nanoFramework, on the left hand side tree view. Choose the 'Blank Application' template and a location of your choosing were the project files will be saved. Name your project and hit OK. The program file will be automatically opened for you. We'll code a very simple application that enters an infinite loop and turns on and off an LED. We'll skip the details because that's not the aim of this guide. Let's just grab the code from the nanoFramework samples repo here . Make sure that the correct GPIO pin is being used. That's the line below the comment mentioning the STM32F746 NUCLEO board. Because GPIO is being used we need to pull that class library and a reference to it in our project. The class libraries are distributed through NuGet. To add this class, right click on 'References' in the Solution Explorer and click 'Manage NuGet Packages'. On the search box type 'nanoFramework'. Make sure you have the preview checkbox ticked. Find the Windows.Devices.Gpio package and click \"Install\". After the license confirmation box, the package will be downloaded and a reference to it will be added. You'll notice that you no longer have the unknown references hints in VS. Click \"Build Solution\" from the Build menu. A success message shows in the Build window. We are almost there. Go into the Device Explorer window and click on the nanoFramework device showing there. Make sure the connection is OK by hitting the \"Ping\" button. On success, a message shows on the output window. Let's deploy the application to the board. In order to do that, right click on the Project name and choose \"Deploy\". You'll see the feedback of the several operations that are running on the background in the Output Window. After a successful deployment you need to reset the target and your 'Hello World' blinky application will start running and, voilá , the LED starts blinking! If you want, instead of \"just\" deploying the application to the target you can choose to start a debug session. To do that hit F5 (as usual) in Visual Studio and watch it run. Wrapping up Congratulations! That's your first nanoFramework C# application executing right there on the target board. How awesome is that?! And this is it for the getting started guide. You've went through the steps required to install Visual Studio, the nanoFramework extension and the ST-LINK Utility. You've also learned how to upload nanoFramework firmware images into a target board. And last, but not the least: how to code a simple 'Hello World' C# application and deploy it to a target board. Check out other guides and tutorials. You may also want to join our Discord channel , where you'll find a supportive community to discuss your ideas and help you in case you get stuck on something."
  },
  "content/getting-started-guides/index.html": {
    "href": "content/getting-started-guides/index.html",
    "title": "Getting started with nanoFramework | nanoFramework Documentation",
    "keywords": "Getting started with nanoFramework We have several getting started guides to help you start with nanoFramework . PLEASE NOTE: You DO NOT have to build the firmware images to get started with nanoFramework . We provide ready to flash images for several reference targets and several others community contributed . Managed (C#) Getting started guide Build instructions Build nanoFramework for STM32 Build nanoFramework for ESP32 Build nanoFramework for NXP"
  },
  "content/hal-pal/chibios/adc-configuration.html": {
    "href": "content/hal-pal/chibios/adc-configuration.html",
    "title": "ADC configuration | nanoFramework Documentation",
    "keywords": "ADC configuration About this document This document describes how to configure the ADC and respective GPIO pins for a STM32 target board based in ChibiOS HAL/PAL. Assumptions and design The STM32 parts can have up to 19 multiplexed channels (being 16 from external sources). Those can be grouped for special conversion scenarios that we are not going to use. Each ADC channel can be exposed in one or more GPIO pins. Despite this providing more flexibility to a system designer it poses an additional complication at the time of configuring the ADC. Considering that the heavy-lifting on the ADC configuration and initial setup is performed by ChibiOS, we've tried to make the remaining configuration as simple as possible, which is pretty much mapping the GPIO pins. For the remaining of this document we'll be using ST STM32F769I_DISCOVERY reference target and will configure the ADC to use the ADC channels exposed through the CN14 connector. From the schematics of the board (mb1225 F769I-DISCO schematic.pdf downloadable from ST web site) one can see that the following channels exposed: pad GPIO pin ADC channel A0 PA6 ADC1_IN6 A1 PA4 ADC1_IN4 A2 PC2 ADC1_IN12 A3 PF10 ADC1_IN8 A4 PF8 ADC3_IN6 A5 PB8 ADC3_IN7 To fully take advantage of the ADC hardware we are going to enable the internal ADC sources. These ones have to be mapped to ADC1. pad GPIO pin ADC channel N.A. N.A. ADC1_TEMP_SENSOR N.A. N.A. ADC1_VREFINT N.A. N.A. ADC1_VBAT Configurations The configurations are all concentrated in the target_windows_devices_adc_config.cpp file in the reference target folder. This source file is added to the CMake target only if the API_Windows.Devices.Adc option is set to ON. See the target CMakeList.txt. There is a global NF_PAL_ADC_PORT_PIN_CHANNEL array for the ADC controller. On each entry there are the configurations for the ADC block, the GPIO port and pin along with the ADC internal channel reference. Note that for the internal sources channels the GPIO port and pin are to be set to NULL and those are only available on ADC1. All the naming come from existing ChibiOS defines. The configuration array will look like: const NF_PAL_ADC_PORT_PIN_CHANNEL AdcPortPinConfig[] = { // ADC1 {1, GPIOA, 6, ADC_CHANNEL_IN6}, {1, GPIOA, 4, ADC_CHANNEL_IN4}, {1, GPIOC, 2, ADC_CHANNEL_IN12}, {1, GPIOF, 10, ADC_CHANNEL_IN8}, // ADC3 {3, GPIOF, 8, ADC_CHANNEL_IN6}, {3, GPIOB, 8, ADC_CHANNEL_IN7}, // these are the internal sources, available only at ADC1 {1, NULL, NULL, ADC_CHANNEL_SENSOR}, {1, NULL, NULL, ADC_CHANNEL_VREFINT}, {1, NULL, NULL, ADC_CHANNEL_VBAT}, }; There is also a variable with the channel count, like this: const int AdcChannelCount = ARRAYSIZE(AdcPortPinConfig); To complete the configuration one has to enable ADC1 and ADC3 for ChibiOS HAL. Remember those were the ADC blocks used in the configuration above. This is done by editing the mcuconf.h file inside the target nanoCLR folder. Search for STM32_ADC_USE_ADC1 and STM32_ADC_USE_ADC3 and set those to TRUE ."
  },
  "content/hal-pal/chibios/clr-managed-heap.html": {
    "href": "content/hal-pal/chibios/clr-managed-heap.html",
    "title": "CLR Managed heap definition | nanoFramework Documentation",
    "keywords": "CLR Managed heap definition About this document This document describes how the CLR manged heap is defined as a ChibiOS target. For STM32 based devices: The configurations are chained by linker files: the target linker file provided for the nanoCLR in the target board folder, e.g. STM32F091xC.ld and from within calls rules.ld except the F7 series which calls rules_clr.ld, rules_code.ld, rules_data.ld and rules_stacks.ld directly. rules.ld (which is common to all STM32 based ChibiOS targets and calls the next set of linker files) rules_clr.ld , rules_code.ld , rules_data.ld and rules_stacks.ld Managed heap location and size The CLR managed heap can be located on the target board at any RAM address where space available. Either internal or external. It will be placed (considering the RAM region defined) after the region containing the CRT heap (if it's assigned to that same RAM region) and right before the Vector table copy in RAM (if it is assigned to the same RAM region). This empowers developers to create new target boards with maximum flexibility of where to locate the CLR managed heap and its respective size. Definition the CLR managed heap location The location of the CLR managed heap is set in in target linker file provided for nanoCLR in the target boards folder, e.g. STM32F091xC.ld For example the line (usually toward the end of the file) will contain something similar to REGION_ALIAS(\"CLR_MANAGED_HEAP_RAM\", ram0); . The example stated here defines CLR manged heap location as being set in the ram0 region. The RAM regions and respective sizes are defined in the same file. For further information, please check the ChibiOS documentation for details on how to define further RAM regions. Size of the CLR managed heap The size of the CLR managed heap is automatically adjusted to take all the available RAM space after the CRT heap (if it's assigned to that same RAM region). It maybe be required to adjust the size of the CRT heap. This is set in the CMake file of the target board, e.g. CMakeLists.txt . Look for the __crt_heap_size__ definition in a line that contain something similar to --defsym=__crt_heap_size__=0x800 . In the example stated here the size of CRT heap is being set to 0x800. When defining the size you need to take into account several factors: the total available size of the region where it's being placed if there are initialized variables assigned to this region how much space they are taking if the CRT heap is located in this region and the size left for it is enough The linker is only able to determine whether there is enough room for all of these factors and it will only complain if there isn't. However it can not determine if the CRT heap (just like the CRT heap) is large enough for the running requirements. That is up to the target board developer. For a detailed overview on the final memory map you may want to check the nanoCLR.map that will be located in the build folder after a successful build. Look for the regions called .heap and .clr_managed_heap to see the final addresses where those were placed."
  },
  "content/hal-pal/chibios/config-usb-virtual-com-port.html": {
    "href": "content/hal-pal/chibios/config-usb-virtual-com-port.html",
    "title": "USB configuration of Virtual COM port (CDC) | nanoFramework Documentation",
    "keywords": "USB configuration of Virtual COM port (CDC) About this document This document describes the available settings/options to configure the USB Virtual COM port provided by ChibiOS HAL. All these settings/options are exposed in the usbcfg.c file, located in the common folder of the reference boards that expose an USB device connector. USB Vendor #define USB_STRING_VENDOR L\"STMicroelectronics\" In this setting it's defined the string that will show as the Vendor name for the USB device (showing in Windows Device manager, for example). Adjust the string to whatever is to show there. Mind the L prefix, DO NOT remove it. USB Device description #define USB_STRING_DEVICE_DESCRIPTION L\"nanoFramework Virtual COM Port\" In this setting it's defined the string that will show as the device description for the USB device (showing in Windows Device manager, for example). Adjust the string to whatever is to show there. Mind the L prefix, DO NOT remove it. USB serial number #define USB_STRING_SERIAL_NUMBER L\"NANO_xxxxxxxxxxxx\" In this setting it's defined the string that will show as the serial number of the USB device (showing in Windows Device manager, for example). This serial number will be part of the instance path of the device that helps the OS to identify and address the USB device like in \\USB\\VID_0483&PID_5740\\NANO_3267335D3333. Adjust the string to whatever is to show there. Mind the L prefix, DO NOT remove it. Note 1: nanoFramework ANT tool uses this serial number as a helper to identify nanoFramework devices relying that this string starts with NANO_ _ (that is upper case NANO followed by an underscore)._ Note 2: For STMicroelectronics reference boards the serial number is completed with the silicon unique ID available on their STM32 parts. Check the series manual for details. USB Vendor ID idVendor in the vcom_device_descriptor_data structure. In this setting it's defined the USB Vendor ID of the USB device. Hexadecimal 0x0483 in the reference boards (that's STMicroelectronics USB Vendor ID). Note: You are not allowed to use the USB Vendor from a third party without their express consent. If you want to use your own Vendor ID you have to apply for one with the USB organization. USB Product ID idProduct in the vcom_device_descriptor_data structure. In this setting it's defined the USB Product ID of the USB device. Hexadecimal 0x5740 in the reference boards (that's STM USB product ID used in the Discovery and Nucleo boards). Note: You are not allowed to use the USB Vendor ID + Product from a third party without their express consent. If you want to use your own Vendor ID + Product ID you have to apply for one with the USB organization."
  },
  "content/hal-pal/chibios/external-memory.html": {
    "href": "content/hal-pal/chibios/external-memory.html",
    "title": "External memory | nanoFramework Documentation",
    "keywords": "External memory About this document This document describes how to use external memory for the managed heap using the ChibiOS FSMC driver from the nanoFramework overlay. Please refer to the CLR managed heap documentation . Memory controller Most STM32 devices include a FSMC (Flexible Static Memory Controller) that provides seamless interface with the most common memory types either synchronous or asynchronous. Assumptions and design The initialization of the memory controller along with the memory configuration have to occur as early as possible after the boot. In the current nanoFramework design this is expected to occur right after the call to CMSIS osKernelInitialize() when all other initialization and configurations have already happen and interrupts are enabled. Because the memory space is to be used as the managed heap the timing is no more critical than that, so pretty much anywhere before the call to the CLR startup should be quite alright. The function were the external memory configuration and initialization is to occur is Target_ExternalMemoryInit() . The nanoHAL_v2.h provides a weak and empty implementation of this function. If a target is to use external memory it has to provide the strong implementation of this function and call it before ClrStartup() is called. Considering that the default placement of the CLR managed is in the SoC internal RAM, the linker file includes a rule to place this region (called clr_managed_heap ) in one of its RAM regions. Example for STM32F429I-Discovery reference target To provide a working example of this configuration we are taking the STM32F429I-Discovery reference target that is in the nf-interpreter repository here . This targets board has a 64Mbit SDRAM (the chip is the IS42S16400J). The target implementation is provided in the target_external_memory.c file that is located in the target base folder. This location allows the function to be reused by nanoCLR and nanoBooter, if desired. Plus, it's included in the compile sequence at a time that the target CPU and other required definitions are already set. In order to include this code file in the build it has to be included as source file the target definition. For our example this is in the arguments of add_executable for nanoCLR. Next we have to set the __crt_heap_size__ symbol to 0 so the managed heap is not placed in the SoC RAM. This is done by setting it to 0 in the target CMakelist.txt like this --defsym=__crt_heap_size__=0x0 ."
  },
  "content/hal-pal/index.html": {
    "href": "content/hal-pal/index.html",
    "title": "nanoFramework HAL/PAL | nanoFramework Documentation",
    "keywords": "nanoFramework HAL/PAL ChibiOS HAL ADC configuration CLR Managed heap definition USB configuration of Virtual COM port (CDC)"
  },
  "content/introduction/companies-using-nanoframework.html": {
    "href": "content/introduction/companies-using-nanoframework.html",
    "title": "Companies using nanoFramework | nanoFramework Documentation",
    "keywords": "Companies using nanoFramework nanoFramework is comprised of a number of components, from the firmware running on the target devices to the various class libraries distributed as NuGet packages. All those have got a considerable download count (and keep increasing). Because it's OSS we can't possible know or track who is using it. If you are using nanoFramework in a commercial product we would love to know. Please fill in this form . Eclo Solutions 🏷 Monitoring systems 🌍 Portugal Global Control 5 Ltd. 🏷 Building automation 🌍 Poland OrgPal 🏷 Automation systems 🌍 U.S.A."
  },
  "content/introduction/what-is-nanoframework.html": {
    "href": "content/introduction/what-is-nanoframework.html",
    "title": "What is nanoFramework? | nanoFramework Documentation",
    "keywords": "What is nanoFramework ? nanoFramework is a free and Open Source platform that enables the writing of managed code applications for constrained embedded devices . It is suitable for many types of projects including IoT sensors, wearables, academic proof of concept, robotics, hobbyist/makers creations or even complex industrial equipment. It makes the development for such platforms easier, faster and less costly by giving embedded developers access to modern technologies and tools used by desktop application developers. Developers can harness the powerful and familiar Microsoft Visual Studio IDE and their .NET C# knowledge to quickly write code without having to worry about the low-level hardware intricacies of a microcontroller. Desktop .NET developers will feel “at home” and are able to use their skills in embedded systems development, enlarging the pool of qualified embedded developers. It includes a reduced version of the .NET Common Language Runtime (CLR) and features a subset of the .NET base class libraries along with the most common APIs included in the Universal Windows Platform (UWP) allowing code reuse from desktop applications, IoT Core applications, thousands of code examples and open source projects. Using Microsoft Visual Studio, a developer can deploy and debug the code directly on real hardware. The nanoFramework platform picks up where [].NET Micro Framework]( https://en.wikipedia.org/wiki/.NET_Micro_Framework ) left off and uses some of its building blocks. Many of the original components were completely rewritten, others improved and some simply reused. A lot of code cleansing and improvements took place to make nanoFramework fit for the future! Read along and find out why use nanoFramework?"
  },
  "content/introduction/why-use-nanoframework.html": {
    "href": "content/introduction/why-use-nanoframework.html",
    "title": "Why use nanoFramework? | nanoFramework Documentation",
    "keywords": "Why use nanoFramework ? nanoFramework is the perfect enabler for developing software that works on embedded devices. Start with a low cost and readily available development board, then use nanoFramework to write, debug and deploy your code. Whether this is your first foray into programming or are a seasoned developer, if you want a powerful and easy to use tool for developing software that runs on embedded devices, you are in the right place. With its modular architecture, it’s easy to grab the core components (like the CLR, debugger and interpreter) and extendibility to new hardware platforms, nanoFramework is the perfect partner for your project. The current reference implementation uses ChibiOS supporting several ST Microelectronics development boards and also ESP32 . Because it’s completely free and Open Source you have access to and the ability to modify all parts of the code including the ability to leverage what others have already contributed. If you are willing to, you can help shape the future by contributing back to the project and rapidly growing community. Here are some of its unique features: Can run on resource-constrained devices with as low as 256kB of flash and 64kB of RAM. Runs directly on bare metal. Currently ARM Cortex-M and ESP32 devices are supported. Supports common embedded peripherals and interconnects like GPIO, UART, SPI, I2C, USB, networking. Provides multithreading support natively. Support for energy-efficient operation such as devices running on batteries. Support for Interop code allowing developers to easily write libraries that have both managed (C#) and native code (C/C++). No manual memory management because of its simpler mark-and-sweep garbage collector . Execution constrains to catch device lockups and crashes. Here are some advantages over other similar systems: First class debugger experience right on the target hardware with breakpoints, single step, step into, step out, step over, pause and stop. Powerful and free programming environment with Microsoft Visual Studio IDE . Support for a large range of inexpensive boards from several manufacturers including: Discovery and Nucleo boards from ST Microelectronics , Quail from Mikrobus, Netduino from Wilderness Labs and ESP32 DevKit C. Easily expandable to other hardware platforms and RTOSes . Currently is targeting CMSIS compatible ones and ESP32 FreeRTOS port. Completely free and Open Source . From the core components to the utilities used for building, deploying, debugging and IDE components. In case you wonder: what is nanoFramework ?"
  },
  "content/licensing/chibios.html": {
    "href": "content/licensing/chibios.html",
    "title": "Licensing options when using ChibiOS as the RTOS | nanoFramework Documentation",
    "keywords": "Licensing options when using ChibiOS as the RTOS About this document This document provides a general overview of the licensing options available when using ChibiOS as the nanoFramework RTOS component. The nanoFramework team have been in contact with the ChibiOS sales team to ensure accuracy of the following information at time of print (October 2017). For details or to discuss your particular situation, we strongly recommend getting in touch with the ChibiOS sales team . What exactly is being used from ChibiOS in nanoFramework firmware? nanoFramework is built against unmodified ChibiOS sources via a mirror (for stability). It's using: The HAL , which is released under Apache License 2.0 meaning that it's 100% free to use or distribute without royalties for any purpose. The RT , is released under GPL3. See below for the licensing options which maybe different depending on your particular use. Can I use ChibiOS freely for my hobby or personal development at home? Yes, using ChibiOS in a Free and Open Source Software project or for personal use is perfectly fine. Can I use ChibiOS freely if I'm developing a commercial product? Yes but if you modify the ChibiOS source code in any way please be aware of the following options: you must comply with the GPL3 licensing terms. Basically you MUST keep the ChibiOS part open source. OR are okay with ChibiOS publicizing your use of it and you clearly mention that your product is using ChibiOS you may keep your additions closed source. Can I use ChibiOS 'components licensing'? 'Components Licensing' is when you buy only parts of ChibiOS, for example the RT kernel with the CM4 port. This option MUST be discussed it with the ChibiOS sales team. What is a 'runtime license'? The 'runtime license' is an option for the use of parts of ChibiOS in software products that are sold to 3rd parties. This option MUST be discussed with the ChibiOS sales team. What about the nanoframework firmware The nanoframwork firmware is released under Apache 2 license and has no implications of using ChibiOS as the RTOS. What about managed apps (C#) running on nanoFramework ? Applications (the C# code) that are loaded into and executed by the nanoframwork firmware firmware image are not compiled or built by it due to the fact that it is interpreted on the fly from memory. As such, it can be deemed as a seperate component and your C# managed code from a licensing perspective can be deemed seperate from the firmware. For discussion sake imagine that you won't ever load a managed app on the firmware image. nanoFramework would still be perfectly working software, just not doing much. As such this means that ChibiOS licensing doesn't apply to C# managed apps and it's use is not affected by the ChibiOS licensing terms."
  },
  "content/licensing/index.html": {
    "href": "content/licensing/index.html",
    "title": "nanoFramework licensing | nanoFramework Documentation",
    "keywords": "nanoFramework licensing All nanoFramework source code is provided under Apache 2.0 license. This is valid for nf-interpreter, class libraries, Visual Studio extension and all tools and utilities. ChibiOS licensing"
  },
  "content/maintainers/cd-ci-automation.html": {
    "href": "content/maintainers/cd-ci-automation.html",
    "title": "CD & CI automation | nanoFramework Documentation",
    "keywords": "CD & CI automation About this document This document describes the CD-CI automation by means of Azure Pipelines and GitHub action. Commands that nfbot understands nfbot reacts to commands passed on PR comments for any repository. Only members of the organization have permission to send these commands. On successful execution of a command, nfbot reacts to the comment with a 👍. If case there is an error or problem with the execution it will react with 😕. The command syntax is: @nfbot comand <argument(s)> . Available commands: Command Argument Description updatedependents - Update the libraries that depend on this library updatedependencies - Check if there are updated versions of the referenced libraries and update if needed startrelease - Kick a release candidate workflow for this library runpipeline branch Runs the Azure Pipeline for the mentioned branch. If no branch is mentioned runs it for the default branch."
  },
  "content/maintainers/community-targets-build-release.html": {
    "href": "content/maintainers/community-targets-build-release.html",
    "title": "Community targets build and publishing | nanoFramework Documentation",
    "keywords": "Community targets build and publishing About this document This document describes the recipe to setup the build and publish of new Community targets. Introduction The build of each of the Community targets is a job in Azure Pipelines yaml. The build of each target is triggered by adding to the commit message (or PR description) a token (or more than one) or #ALL# . The token is the board name enclosed in '#', e.g. #ST_STM32F4_DISCOVERY# . Note that it's possible to add more than one token to the commit message to trigger the build for the specific targets. Setup the build for a new target Update the azure-pipelines.yml in the Community repository as follows: Start by adding a new job to the collection. Preferably copy/paste from a similar target. Make sure to use the target name at the various places where it shows, namely: job name, condition expression and variables. Setup the image publishing Community target images are distributed through nanoFramework JFrog Bintray repository . Sign-in with nanoFramework Bintray account. Go to nanoframework-images-community-targets repository here Add a new package inside that repository. The package name must be exactly the same as the target name otherwise the publish step will fail. The remaining details are to be copied from one of the other existing targets. Mind the description field to update the target name and possibly the manufacturer. Go to the package main page of the recently created package and grab the markdown from the \"Latest Version Badge\" link there and past it in the Community targets list in the readme. PRs and manual builds When merging a PR make sure to add to the commit message the token(s) for the targets to build, otherwise the merge to the master branch won't trigger a build for any board. It's possible to manually start a build and specify that it should build all targets. This is most handy, for example, after a number of changes in the nf-interpreter repo to build new images for the Community targets. Another situation is when one forgets to add the build token in the PR merge and needs to trigger a build afterwards. To do this, go to the Builds page in the project Azure Pipelines and hit the 'Queue' button. When the pop-up shows, change the BUILD_ALL variable to 'true'. Like this:"
  },
  "content/maintainers/creating-a-new-repo.html": {
    "href": "content/maintainers/creating-a-new-repo.html",
    "title": "Procedure for creating a new repository | nanoFramework Documentation",
    "keywords": "Procedure for creating a new repository About this document This document describes the recipe to create a new GitHub repository. It's meant for class libraries. Introduction The strict following of this procedure is required in order to maintain consistency and coherence throughout the repositories, along with taking advantage of the build tools, testing and publishing automation. If in doubt please ask one of the senior team members. Creating the repository in GitHub This is basically clicking the create new repository button in GitHub. Note: The class libraries repositories are following the patter \" lib- namespace \" most of the remaining repositories \" nf- some-relevant-name-here \". This makes it easier to spot what is what. As we are following the GitFlow branching model two branches must be created: master and develop . Make sure to create an empty readme.md to make it easier to fork and clone the new repo. Adjust the repository settings (part 1) Go to the repository Settings and move into Options . In the Features section disable Wikis, Issues and Projects. On the Merge Button section disable Allow merge commits. We prefer to have tidy merges on PRs without having to bother contributors to squash commits. Move into Branches and set develop as the default branch. Setup the CLA Open a browser window in Private Mode (so you can sign-in as nfbot and not loose you personal GitHub session). Navigate to the CLA Assistant . Sign-in with GitHub nfbot account. Click the \"Configure CLA\" button at the top left. Select the newly created repo on the \"Choose a repository\" drop-down. Select the \"nanoFramework-CLA.md\" in the next drop-down. Click the \"Link\" button and agree with the next step. On the list of the CLAs, find the new one and click on the ellipsis to the right and then 'Edit'. Add nfbot,*[bot] into the field \"Provide user names, who doesn't need to sign the CLA\". Click Save . Setup Azure DevOps Open a new browser window on which you are signed in to GitHub as nfbot . On the repo Settings, navigate to \"Integrations & Services\". Click \"Configure\" button for Azure Pipelines. The next step will take you to the Azure DevOps website. Click on \"Create New Project\". Name the project following the GiHub repo name but without the \"lib\" prefix. Make it Public , select Git as the version control and Agile as the work item process. After the project is created a list with GitHub repositories shows. Select the repository that has been just created. The next step asks for the Pipeline configuration. Choose \"Starter Pipeline\" to get the build running and allow configuring the pipeline. The next steps will show the minimal yaml and the option to save the file and run the pipeline. Click on \"Save and run\". This will trigger the very first build. Navigate back to the Pipeline, select it and click \"Edit\" (at the top right). Then click on the 3 vertical dots (again at the top right) and then \"Triggers\". Make sure that the option to override YAML is not checked for \"Continuous integration\". Uncheck the same option for \"Pull request validation\" and check the \"Make secrets available to builds of forks\". Navigate to \"Variables\" and add DiscordWebhook with a value taken from the Azure webhook of the \"build-monitor\" channel in our Discord server. Make sure that the variable is set to secret by clicking on the padlock icon. Add another variable GitHubToken with a value taken from the nfbot personal tokens in GitHub. Make sure that the variable is set to secret by clicking on the padlock icon. Add another variable NbgvParameters , leave it empty and check the \"Settable at queue time\". Add another variable StartReleaseCandidate , set the content to false and check the \"Settable at queue time\". Add another variable UPDATE_DEPENDENTS , set the content to false and check the \"Settable at queue time\". Click the \"Save\" button and confirm the operation on the pop-up. Go back to the pipelines view and with the current pipeline selected, click on the ellipsis icon and then on \"Status badge\". Copy the markdown code that shows on the pop-up. This will be required to add the correct build badges in the repo readme in a moment. Prepare the initial commit Fork the repo into your preferred GutHub account and clone it locally. The best option is to copy/paste from an existing repo, so you're more efficient doing just that. Mind the name changes tough! Grab the following files: .github_changelog_generator .gitignore (no changes required) azure-pipelines.yml CODE_OF_CONDUCT.md (no changes required) CONTRIBUTING.md (no changes required) LICENSE (no changes required) README.md template.vssettings (no changes required) source/version.json source/NuGet.Config source/readme.txt Open \"azure-pipelines.yml\" Rename the nugetPackageName variable with the new name (mind the nanoframework prefix). Rename the repoName variable with the repo name. Rename the sourceFileName parameter with the equivalent name. It's probably wise to wait for the first successful build of the class library and then get back here with the correct name for the assembly declaration source file. Rename the sonarCloudProject variable with the repo name. If there are class libraries that depend on this one, copy the \"update dependencies\" job from CorLib \"azure-pipelines.yml\". If there aren't just skip this step. Open \".github_changelog_generator\" and set the project to the repo name. Open \"source\\version.json\" and set the version to the appropriate one. Make sure to follow our version number guidelines. In doubt please ask one of the senior team members. Open \"README.md\" Rename the class library name occurrences with the new name. Rename the package name for the NuGet badges. Replace the build status badges with the ones that you've copied from Azure DevOps. They'll be the same until there is a second pipeline for the master branch. Create a \"source\" folder that will hold the code files, VS Solution and projects along with the nuspec(s) for packaging the NuGet. Create a folder inside \"source\" with the name of the new class library. Add to the VS Solution the class library project. Again it's better to follow an existing one and ask in doubt. Make sure you are following the naming pattern. Make sure you copy the key.snk from the initial repo (or from the CorLib repo). DO NOT create a new one. Rename, edit and adjust as required the \"nuspec\" files to create the NuGet packages. Edit the \"readme.txt\" inside the source folder and rename the repository name. Still on\"azure-pipelines.yml\" and only if there are class libraries that depend on this one. Adjust the repositoriesToUpdate list with the repo names of the class libraries that depend on this new one. Adjust the repository settings (part 2) Go to the repository settings in GitHub and move into Branches . Go to the rule for \"develop\" branch and change the following: Enable \"Require pull request reviews before merging\" Enable \"Require status checks to pass before merging\" with the options: \"Require branches to be up to date before merging\" \"Status checks: nanoframework. azure-devops-project-name \" \"Status checks: license/cla\" (for develop branch) Update the dependency upwards As a minimum, the new class library depends on mscorlib. If that's the only dependency, edit the azure-pipelines.yml file there and add this new repo to the repositoriesToUpdate list. Now, if it depends on others, you have to figure out which one of those is at the end of the dependency chain and add this new repo to that azure-pipelines.yml file. For example, Windows.Devices.Gpio depends on CoreLibrary and Runtime.Events (which, in turn, depends on CoreLibrary ). Updating it's dependencies has to the triggered at Runtime.Events not on CoreLibrary because of the chained dependency. Add the class library to the documentation project If this class library has documentation that has to be published as part of nanoFramework documentation (which is most likely) it needs to be referenced in the documentation project. Edit the documentation repo azure-pipelines.yml and add entries for this new repo on the clone, restore and build steps."
  },
  "content/maintainers/github-workflow.html": {
    "href": "content/maintainers/github-workflow.html",
    "title": "GitHub workflow procedures | nanoFramework Documentation",
    "keywords": "GitHub workflow procedures About this document This document describes the GitHub workflow and \"procedures\" that should be followed by maintainers. GitHub labels We have a set of basic labels that are common to all repos and should be used to communicate and/or flag issues and PRs. It's a clear and quick way of understanding the current status of something, help filtering and also triage what's it about. On PRs they are even used by the change log generator to properly update the change log with bugs, enhancements, breaking changes, etc. That's why it's vey important that all those are properly labeled from the moment they are created. The Home project has several others that are used to classify the group the issue belongs to (like tools, a specific class library,...). There are also a few that should be used to flag them to the community with a call for action like \"good first issue\", \"trivial\", \"feeback requested\". To summarize it's very important and makes everyone life easier if the labels are used properly. GitHub issues Upon a new issue being raised, it should be properly labeled and, if possible/relevant, a follow up comment should be added. This is useful to show developers that we care, that the project is active and also helps the flow of the next steps, which is someone eventually pickup the issue, reply to it, make additional testing or start working on it. When a maintainer self-assigns an issue or assigns it to another team member the appropriate flags should be managed. This provides follow up to the community and prevents that several developers invest their time working on the same task, possibly duplicating work and wasting time, which leads to frustration. As it's made abundantly clear on all repos that GitHub issues should not be used to ask questions. For that, developers are encouraged and should use the Discord channels. They are better served there by having a quick reply, reach-out to everyone in the community, have a better experience and it's usually more convenient. Having said that, issues raised to ask questions should be directed to Discord and closed with an appropriate and polite message. The exceptions would be when the user can't use Discord (because of company firewall rules, some regions in the world have access to social network block) or a quick reply does it, which is more efficient."
  },
  "content/maintainers/guidelines-for-community-interaction.html": {
    "href": "content/maintainers/guidelines-for-community-interaction.html",
    "title": "Guidelines for community interaction | nanoFramework Documentation",
    "keywords": "Guidelines for community interaction About this document This document provides guidelines for maintainers on how to interact with the community. Introduction nanoFramework it's an Open Source project therefore it aims to gather the interest of a community as broad as possible. This community is expected to be as active as possible in various fronts: providing feedback, generate discussions around issues and suggestions, contribute back to the project with code and performing various tasks like answering questions in project forums, repo maintenance, project web site, writing documentation, social marketing and others. The interaction between the project team and the community plays an important role on the overall success of nanoFramework . The following guidelines are provided as a suggestion and should also be considered as a \"kind of\" S ervice L evel A greement for maintainers. Always interact with community members in a friendly, courteous and positive way. Remember: people come here probably because they have questions or are in search for help. If they are treated correctly they'll be happy, feel welcome and the are more likely to contribute back, provide a positive feedback or spread the word about nanoFramework . If someone is not using the proper channel, not providing enough details to formulate a clear question or not writing clearly, do your best to point them in the right direction and try to understand them. They may not have understood the project instructions properly or they might not be English native. Be patient and understandable. People tend to expect a quick reply to their questions or interactions. Being able to accomplish this not only makes them to have a positive feeling about the project but it also shows that the project is alive and kicking! The person(s) in charge of each channel should be able to provide feedback in a timely fashion. If someone from the team notices that this is not happening (for some reason) it should step in and do it by itself. Note that the feedback here depends on the channel. If it's the Discord channel a dialog has to be established. If it's an issue or a PR just by setting the appropriate labels and assigning it to the person in charge, it's a sign that something is happening and the user will be rest assured that it's being taken care of. Pull request should be always welcomed. Even if they are small or almost meaningless. It helps setting a positive feeling about this and will bring more and with increased quality. When commenting or reviewing keep the positive and friendly tone. Use thanks and please all the time. If a PR is complete trash, not relevant or makes no sense at all try to put it as nicely as possible."
  },
  "content/maintainers/index.html": {
    "href": "content/maintainers/index.html",
    "title": "Documentation for maintainers | nanoFramework Documentation",
    "keywords": "Documentation for maintainers CD-CI automation Guidelines for Community interaction GitHub workflow Community targets build and publishing Procedure for creating a new repository Publish Workflow and Strategy Semantic Versioning"
  },
  "content/maintainers/publish-workflow.html": {
    "href": "content/maintainers/publish-workflow.html",
    "title": "Publish Workflow and Strategy | nanoFramework Documentation",
    "keywords": "Publish Workflow and Strategy About this document This document describes the workflow and strategy adopted by nanoFramework to handle the merging, branching and release publishing. Pull Requests Pull requests with contributions are always merged into develop branch. On each pull request build the respective NuGet packages are published to nanoFramework Azure DevOps NuGet feed (if this is a component that uses this distribution channel). By sourcing this NuGet feed someone testing that pull request can reference it straight away without any further hassle. There is nothing else to be done as the package identifier and the version are automatically incremented based. Development Once pull requests have been merged into develop a new release is automatically generated and published to nanoFramework Azure DevOps NuGet feed (if this is a component that uses this distribution channel). There is nothing else to be done as the package identifier and the version are automatically incremented. Release Candidates The process is kicked off by opening up a pull request from develop to a new branch named release-vN.N.N (note the branch name starting with release , this is mandatory for the configuration and scripts to properly recognize this as such). If this release contains a breaking change then increase the MAJOR version by one and reset the MINOR back to zero and keep the PATCH at zero. Otherwise just bump the MINOR version by one and keep the PATCH at zero. At this stage the contributor proposing a new release must perform a few administrative tasks. It's the responsibility of the release approver to verify that these tasks have been performed correctly. Details on the release preparation can be read from the Nerdbank GitVersioning documentation here . If the process for merging individual pull requests was followed perfectly there is not much else to do except verify that all pull requests have assigned a milestone and an appropriate label. The label classifies the type of change and it's mandatory because the release notes are automatically generated from this information. For the purposes of the automated release notes generation, only the pull requests have to follow this strict label mapping, not the issues. This is because the issue management is centralized in the Home repo (not per repository). The pull requests that address an issue already link to that issue thus making easy to trace the changes and the reasoning about those, ultimately self-documenting the changes. If there are any problems with the generated release notes document, resolve those in GitHub by assigning the appropriate labels to the pull requests and then re-run the build for the merge commit in Azure DevOps. Production The process is kicked off by opening up a pull request from a release-vN.N.N branch to master . In the Home repository, edit the vNext milestone and change it to the version number of this release. Once the pull request has been approved use the merge commit option ( not the squash and merge ). This will trigger a new CI build after which a new draft release with be generated along with the release notes. If the validation of these has already been done in the release-vN.N.N step above there should be no need for further corrections. Pressing the publish release button will stamp the repository with a git tag with the release version, overriding any automatic versioning strategies and trigger a new build which will be automatically published to NuGet (if this is a component that uses this distribution channel). After the build for the tag release is completed edit the source/version.json file and bump the version field to the vNext version, including the preview tag. Then start a new PR from the release-vN.N.N into the develop branch. This makes any changes in that have been made branch should be deleted. After the CI completes squash and merge ( really really squash and merge ) the PR. The release-vN.N.N branch can now be safely be deleted. To complete this step create a new vNext milestone in the Home repo."
  },
  "content/maintainers/semantic-versioning.html": {
    "href": "content/maintainers/semantic-versioning.html",
    "title": "Semantic Versioning | nanoFramework Documentation",
    "keywords": "Semantic Versioning nanoFramework versioning follows the Semantic Versioning guidelines. Semantic versioning is all about releases and our continuous integration infrastructure uses Nerdbank GitVersioning to automatically version the releases as per the configuration of each repository. nanoFramework follows the GitFlow branching model which allows more structured releases and versioning. nanoFramework has three different workflows which control how the versioning. Development Builds Builds from the develop branch have a suffix of alpha so that they are sorted higher than release builds which provides the team the ability to manually publish development builds to NuGet as pre-releases, if needed. GitVersion is configured in Continuous Deployment mode which automatically increments the version per commit. Pull Request Builds Builds from pull requests have a suffix of test$BuildNumber and are not automatically published to NuGet (if they are distributed by NuGet) but the packages - or artifacts - are available for download from AppVeyor which allows the team or anyone interested to test the unit of change without having to merge it into develop. Release Builds Builds from the master branch do not have a suffix and GitVersion is configured in Continuous Delivery mode. If a commit is tagged, the version in the tag overrides the automatic versioning strategies. Versioning nanoFramework follows the following version pattern: MAJOR.MINOR.PATCH[-PREVIEW\\ALPHA\\RC-BUILDNUMBER]. Major or Breaking : drop/adds support for a platform remove public API introduce incompatible API changes adopt a newer MAJOR version of an existing dependency disable a compatibility quirk off by default Minor : add public API add new behavior add a new feature adopt a newer version of an existing dependency introduces a new dependency add functionality in a backwards-compatible manner any other change (not otherwise captured) Patch : backwards-compatible bug fixes any other minor changes or improvements that are backwards-compatible"
  },
  "content/nxp/flash-nxp-mbed.html": {
    "href": "content/nxp/flash-nxp-mbed.html",
    "title": "Flash a nanoCLR image/nanoBooter in a NXP MIMXRT1060_EVAL board | nanoFramework Documentation",
    "keywords": "Flash a nanoCLR image/nanoBooter in a NXP MIMXRT1060_EVAL board How To guide The easiest way to flash nanoBooter and nanoCLR image onto i.MX RT1060 board is through mbed, which provides virtual disk after you connect the board to PC. NOTE: If you overwritten DAPLink firmware, you will need proper DAPLink firmware for OpenSDA serial and debug adapter that is built into eval board, it provides USB host (IDE, file system and serial terminal). You can download it from here: OpenSDA . Then follow the procedure described in a link. Download the image from nanoFramework repository. Check that J1 is in middle position (power from micro-usb port) and connect usb cable to J41 usb. Removable disk \"rt1060-evk\" should appear in file manager. Extract downloaded image and copy nanoFramework image \"nanobooter-nanoclr.hex\" to removable disk. Device should automatically program flash and reset itself after short time. Check if programming was successful by reseting the board while pressing SW8 button. If a green led starts blinking it means that nanoBooter is working correctly. Finally reset the board and open Visual Studio. Device should be recognised by Device Explorer nanoFramework plugin. FAQ Device is not recognised by Device Explorer. Try to restart Visual Studio Check that firmware was properly programmed, try booting to nanoBooter, device should be listed in Devices Explorer In FAIL.txt on removable disk error: \"The interface firmware FAILED to reset/halt the target MCU\" Check that jumpers J47, J48, J49 are present and J44 is not Jumper J1 must be in middle position if your not using external power Device correctly boots to nanoBooter but is not detected otherwise If you flashed nanoBooter.hex and then nanoCLR.hex, programmer erases memory every flashing procces. If you want to flash them separatly you can use method described here"
  },
  "content/nxp/index.html": {
    "href": "content/nxp/index.html",
    "title": "NXP specific articles | nanoFramework Documentation",
    "keywords": "NXP specific articles Flash NXP i.MX RT1060 firmware using mbed virtual disk"
  },
  "content/reference-targets/esp32-wroom-32.html": {
    "href": "content/reference-targets/esp32-wroom-32.html",
    "title": "Espressif ESP32 WROOM-32 | nanoFramework Documentation",
    "keywords": "Espressif ESP32 WROOM-32 This image fits all EPS32 boards carrying an ESP32-WROOM-32 module, like the ESP32-DevKitC or the ESP32-WROVER-KIT. ESP32-DevKitC Product page ESP32-WROVER-KIT Product page Firmware images (ready to deploy) Stable Preview"
  },
  "content/reference-targets/index.html": {
    "href": "content/reference-targets/index.html",
    "title": "Reference target boards | nanoFramework Documentation",
    "keywords": "Reference target boards We provide ready build firmware images for several reference target boards. These can be used for either initial testing and start feeling how cool is to work with nanoFramework or as the base for system designers to develop their own custom boards and firmware. Espressif ESP32 boards ESP32 WROOM-32 Mikrobus.Net board MBN_QUAIL Netduino boards NETDUINO3_WIFI Orgpal boards OrgPal PalThree STMicroelectronics boards NUCLEO64_F091RC STM32F429I_DISCOVERY STM32F769I_DISCOVERY TI SimpleLink boards TI CC1352R1_LAUNCHXL TI CC3220SF_LAUNCHXL NXP boards NXP i.MX_RT1060_EVK Community target boards There is a GitHub repository that holds target boards provided by community members. Check it here ."
  },
  "content/reference-targets/mbn-quail.html": {
    "href": "content/reference-targets/mbn-quail.html",
    "title": "Mikrobus Net QUAIL | nanoFramework Documentation",
    "keywords": "Mikrobus Net QUAIL Product page Firmware images (ready to deploy) Stable Preview"
  },
  "content/reference-targets/mimxrt-1060-evk.html": {
    "href": "content/reference-targets/mimxrt-1060-evk.html",
    "title": "NXP i.MXRT1060 evalboard | nanoFramework Documentation",
    "keywords": "NXP i.MXRT1060 evalboard Board featuring 600 MHz ARM Cortex-M7 core without internal flash. But it has support for both QSPI and HyperFlash. Can be powered from usb. It has onboard LPC-Link programmer. Technical and Functional Specifications: Memory 256 Mb SDRAM memory 512 Mb Hyper Flash 64 Mb QSPI Flash TF socket for SD card Display and Audio Parallel LCD connector Camera connector Audio codec 4-pole audio headphone jack External speaker connection Microphone S/PDIF connector Connectivity Micro USB host and OTG connectors Ethernet (10/100M) connector CAN transceiver Arduino® interface Specification acquired from NXP product page Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ ✔️ ✔️ ✔️ ✔️ Stable Preview J-Link If you want to use dedicated J-Link programmer instead of onboard one, please refer to SEGGER wiki . It describes how to configure J-Link to work with i.MXRT1060 microcontroller. To setup J-Link in Visual Studio Core refer to this guide."
  },
  "content/reference-targets/netduino3-wifi.html": {
    "href": "content/reference-targets/netduino3-wifi.html",
    "title": "Wilderness Labs Netduino N3 WiFi | nanoFramework Documentation",
    "keywords": "Wilderness Labs Netduino N3 WiFi Product page Firmware images (ready to deploy) Stable Preview"
  },
  "content/reference-targets/orgpal-palthree.html": {
    "href": "content/reference-targets/orgpal-palthree.html",
    "title": "OrgPal PalThree | nanoFramework Documentation",
    "keywords": "OrgPal PalThree Product page Features STM32F769BIT MCU Powerful 216-MHz Arm® Cortex®-M7 2 Mbytes Flash, and 1 MB External SDRAM PalThree Board Versatile board for many applications with integrated sensor protocol support Broad sensor protocol support via RS 485/Modbus, 4-20mA, UART, I2C, Analog/Digital GPIO on a single board On-board micro USB gets you started with instant code development using Visual Studio 2017 or later Can be expanded with many plug in boards using the two 30 pin ports 16 MB QSPI Flash, and 8 MB SPI Flashfor onboard storage SD Card USB multiplexed with 2 connectors microUSB for debugging and programming Ethernet (LAN8742A) with SSL support 16x2 LCD I2C, expandable to use any I2C LCD DSI LCD Connector with I2C (Raspberry Pi LCD connector) Peripherals and Sensor Protocols: RS 485 4-20mA 1 Relay (optically isolated) 1 Flow/Pulse count Digital and Analog GPIOs UART, I2C and SPI 3 user LEDs 2 user buttons 4 key matrix key pad connector Real-Time Clock (RTC) Speaker (buzzer) Integrated temperature and battery monitor 2 30 pin Expansion Ports JTAG 10 pin ARM Micro connector Low power design, power use as low as 0.4mA in auto off mode 9-24V power input range with reverse polarity protection Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ Stable Preview"
  },
  "content/reference-targets/stm32f429i-discovery.html": {
    "href": "content/reference-targets/stm32f429i-discovery.html",
    "title": "STMicroelectronics 32F429IDISCOVERY | nanoFramework Documentation",
    "keywords": "STMicroelectronics 32F429IDISCOVERY Product page Features STM32F429ZIT6 mcu 2 Mbytes of internal Flash memory 256 Kbytes of internal RAM 64-Mbit SDRAM (provided as 8 Mbytes of managed heap) 2.4\" QVGA TFT LCD Two user LEDs: LD3 (green), LD4 (red) Two push-buttons (user and reset) USB OTG with micro-AB connector Simple extension header exposing most of the mcu pins On-board ST-LINK/V2 Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ Stable Preview"
  },
  "content/reference-targets/stm32f769i-discovery.html": {
    "href": "content/reference-targets/stm32f769i-discovery.html",
    "title": "STMicroelectronics 32F769IDISCOVERY | nanoFramework Documentation",
    "keywords": "STMicroelectronics 32F769IDISCOVERY Product page Firmware images (ready to deploy) Stable Preview"
  },
  "content/reference-targets/st-nucleo64-f091rc.html": {
    "href": "content/reference-targets/st-nucleo64-f091rc.html",
    "title": "STMicroelectronics NUCLEO-F091RC | nanoFramework Documentation",
    "keywords": "STMicroelectronics NUCLEO-F091RC Product page Firmware images (ready to deploy) Stable Preview"
  },
  "content/reference-targets/ti-cc1352r1-launchxl.html": {
    "href": "content/reference-targets/ti-cc1352r1-launchxl.html",
    "title": "TI CC1352R1-LAUNCHXL | nanoFramework Documentation",
    "keywords": "TI CC1352R1-LAUNCHXL Product page Features CC1352R mcu CC3220SF single-chip wireless microcontroller Dual-Core Architecture: User-Dedicated Application MCU Subsystem Dedicated software controlled radio controller Powerful 48-MHz Arm® Cortex®-M4F processor Embedded Memory: 352kB of in-system Programmable Flash 256KB of ROM for protocols and library functions 8KB of Cache SRAM (Alternatively available as general-purpose RAM) 80KB of ultra-low leakage SRAM Peripherals: Digital peripherals can be routed to any GPIO 4× 32-bit or 8× 16-bit general-purpose timers 12-Bit ADC, 200 kSamples/s, 8 channels 2× comparators with internal reference DAC (1× continuous time, 1× ultra-low power) Programmable current source 2× UART 2× SSI (SPI, MICROWIRE, TI) I2C I2S Real-Time Clock (RTC) AES 128- and 256-bit Crypto Accelerator ECC and RSA Public Key Hardware Accelerator SHA2 Accelerator (Full suite up to SHA-512) True Random Number Generator (TRNG) Capacitive sensing, up to 8 channels Integrated temperature and battery monitor Radio section Multi-band sub-1 GHz and 2.4 GHz RF transceiver compatible with Bluetooth 5 Low Energy and IEEE 802.15.4 PHY and MAC Excellent receiver sensitivity: –121 dBm for SimpleLink long-range mode –110 dBm at 50 kbps, –105 dBm for Bluetooth 125-kbps (LE Coded PHY) Output power up to +14 dBm (Sub-1 GHz) and +5 dBm (2.4 GHz) with temperature compensation Suitable for systems targeting compliance with worldwide radio frequency regulations ETSI EN 300 220 Receiver Category 1.5 and 2, EN 300 328, EN 303 131, EN 303 204 (Europe) EN 300 440 Category 2 FCC CFR47 Part 15 ARIB STD-T108 and STD-T66 Wide standard support Wireless protocols Thread Zigbee® Bluetooth® 5 Low Energy IEEE 802.15.4g IPv6-enabled smart objects (6LoWPAN), Wireless M-Bus Wi-SUN® KNX RF proprietary systems SimpleLink™ TI 15.4-Stack (Sub-1 GHz) Dynamic Multiprotocol Manager (DMM) Launchpad board LaunchPad with 2.4GHz and Sub-1GHz radio for wireless applications with integrated PCB trace antenna Broad band antenna supports both 868 MHz ISM band for Europe and 915 MHz ISM band for US with a single board On-board emulator gets you started with instant code development in CCS Cloud Can be used with both LaunchPad kit and SmartRF™ Studio applications Access all I/O signals with the BoosterPack plug-in module connectors Compatible with LCD BoosterPack Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ Stable Preview"
  },
  "content/reference-targets/ti-cc3220sf-launchxl.html": {
    "href": "content/reference-targets/ti-cc3220sf-launchxl.html",
    "title": "TI CC3220SF-LAUNCHXL | nanoFramework Documentation",
    "keywords": "TI CC3220SF-LAUNCHXL Product page Features CC3220SF mcu CC3220SF single-chip wireless microcontroller Dual-Core Architecture: User-Dedicated Application MCU Subsystem Highly-Integrated Wi-Fi Network Processor Arm® Cortex®-M4 Core at 80 MHz Embedded Memory: 256KB of RAM Optional 1MB of Executable Flash External Serial Flash Peripherals: McASP Supports Two I2S Channels SD, SPI, I2C, UART 8-Bit Synchronous Imager Interface 4-Channel 12-Bit ADCs 4 General-Purpose Timers (GPT) With 16-Bit PWM Mode Watchdog Timer Up to 27 GPIO Pins Debug Interfaces: JTAG, cJTAG, SWD Wi-Fi Network Processor (NWP) Subsystem: Wi-Fi Modes: 802.11b/g/n Station 802.11b/g Access Point (AP) Supports up to Four Stations Wi-Fi Direct® Client and Group Owner WPA2 Personal and Enterprise Security: WEP, WPA™/WPA2™ PSK, WPA2 Enterprise (802.1x) IPv4 and IPv6 TCP/IP Stack SimpleLink Connection Manager for Autonomous and Fast Wi-Fi Connections Flexible Wi-Fi Provisioning With SmartConfig™ Technology, AP Mode, and WPS2 Options Hardware Crypto Engine for Advanced Fast Security, Including: AES, DES, 3DES, SHA2, MD5, CRC, and Checksum Secure Sockets (SSLv3, TLS1.0, TLS1.1, TLS1.2) Secure Boot: Validate the Integrity and Authenticity of the Runtime Binary During Boot Launchpad board Standalone development platform featuring sensors, LEDs and push-buttons On-board chip antenna with option for U.FL-based testing 2x20-pin stackable connectors (BoosterPack headers) to connect to TI LaunchPads and other BoosterPacks Back-channel universal asynchronous receiver/transmitter (UART) through USB to PC XDS110-based JTAG emulation with serial port for flash programming Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ Stable Preview"
  },
  "content/stm32/create-dfu-file.html": {
    "href": "content/stm32/create-dfu-file.html",
    "title": "How To Create a .dfu file | nanoFramework Documentation",
    "keywords": "How To Create a .dfu file To manually flash firmware using ST DFUSE tools, get a copy of ST DFUSE tools . Install the DFUSE tools Download the devices firmware update .zip file Repeat step 1 above Step one Locate the devices Device_BlockStorage.c file. E.g. the Netduino 3 file is located here . Find the BlockRegionInfo segment Start address and bytes per block. Example: const BlockRegionInfo BlockRegions[] = { { 0x08000000, // start address for block region 4, // total number of blocks in this region 0x4000, // total number of bytes per block ARRAYSIZE_CONST_EXPR(BlockRange1), BlockRange1, }, } Start the STDFU File Manager and select the \"I want to generate a .dfu file ....\" radio button. Select the \"Muti BIN\" button and select the nanoBooter.bin file from the firmware update .zip file. Enter the Start address from above into the \"Address\" textbox. Example: 8000000. Press the \"Add to List\" button. Next select the nanoCLR.bin file. Enter the Start address + bytes per block into the \"Address\" textbox. Example: 804000. Press the \"Add to List\" button. Press the \"Generate\" button. Step two Start the DFUSE Demo Application. Locate the .dfu file generated above. Click the \"Choose\" button then the \"Update\" button. Toggle the devices power. That's all, we are done!"
  },
  "content/stm32/flash-dfuse.html": {
    "href": "content/stm32/flash-dfuse.html",
    "title": "How To Flash a target using a .dfu file | nanoFramework Documentation",
    "keywords": "How To Flash a target using a .dfu file This is a guide on how to manually flash the firmware provided as DFU file using ST DFUSE tools. Introduction To manually flash firmware using ST DFUSE tools, get a copy of ST DFUSE tools . Install the DFUSE tools. Put your device in bootloader mode. This can be accomplished by pressing a certain combination of buttons. It depends on the particular hardware that you are using. Step one Start the STDFU Tester application. Select the \"Protocol\" tab. Click the \"Create from Map\" button. Select the \"Erase\" radio button option. Click the \"Go\" button. Wait for the erase process to complete. Step two Start the DFUSE Demo Application Locate the .dfu file located in the device firmware update .zip file. Note: If the .dfu file does not exist in the .zip file. It can be created following the instructions here . Within the \"Upgrade or Verify\" box, click the \"Choose\" button and then the \"Update\" button. Wait for the process to complete. Toggle the devices power."
  },
  "content/stm32/flash-stlink.html": {
    "href": "content/stm32/flash-stlink.html",
    "title": "How To Flash a target usign ST-Link utility | nanoFramework Documentation",
    "keywords": "How To Flash a target usign ST-Link utility This is a guide on how to manually flash the firmware using ST-Link utility. Introduction There are two images to be flashed in the target, one for nanoBooter and another one for nanoCLR. Download the STM32 ST-LINK Utility from ST web site and install it in your development machine. Download a ZIP file with the firmware for the board from our web site here by clicking on the appropriate badge. This will take you to our JFrog Bintray repository that holds the packages with pre-build images for several target boards. After downloading it, unzip the package contents. Connect the target board to your PC using an USB cable. Note that on most ST deveopement boards there are two micro USB connectors. To follow this guide you'll want to use the one that's providing the JTAG connection through the ST-Link debugger. In doubt, check the PCB for the correct one or the board schematic. Launch the ST-LINK Utility that you've just installed and connect to the ST board. Perform a \"full chip erase\" to clear the flash. Load the nanoBooter.hex file from the package and hit the \"Program and verify\" button. Make sure you tick the \"Reset after programming\" check box and hit \"Start\". After the upload completes, the MCU is reset and the nanoBooter image runs. You can check the success of the operation watching for a slow blink pattern on the LED. Congratulations, you now have a board running nanoFramework's booter! Next, load the nanoCLR.hex file from the extracted package folder and hit again the \"Program and verify\" button. Make sure you tick the \"Reset after programming\" check box and hit \"Start\". After the upload completes, the MCU is reset and the nanoCLR image will run. This time and if all goes as expected, there will be no LED blinking. You can check if the board is properly running nanoFramework by looking into the Device Explorer window in VS."
  },
  "content/stm32/index.html": {
    "href": "content/stm32/index.html",
    "title": "STM32 specific articles | nanoFramework Documentation",
    "keywords": "STM32 specific articles How To Create a .dfu file Flash firmware using ST DFUSE utility Flash firmware using ST-Link utility"
  },
  "content/support/community-help.html": {
    "href": "content/support/community-help.html",
    "title": "Community help | nanoFramework Documentation",
    "keywords": "Community help Our awesome community has your back! Everything in nanoFramework is public Note that we all do this in the spirit of Open Source. All discussions are public, so that everyone can participate and help each other. If you need help, you should use the methods listed here. This ensures the core team knows what's going on in the project and that everyone can benefit from each other's answers and knowledge. If you a question on how to use nanoFramework Go to Stack overflow and use the \"nanoframework\" tag. Have you found a bug or want to suggest a new feature or improvement? Please open an issue in our GitHub . We ask you to open an issue only when you have a real and confirmed one. Don't open an issue for support requests or to start a discussion. For that you'll get a better (and quicker!) support/feedback in one of the ( https://discord.gg/gCyBu8T ) channels. Chat and engage with contributors and community members Jump into our Discord server . You'll find several public channels on the various topics. You want to share what you are doing with nanoFramework You are welcomed to submit projects to Hackster.io . Make sure you use one of our components there so your project gets tagged automatically. Tweet about your project and mention @nanoFramework . Looking for professional support ?"
  },
  "content/support/professional-support.html": {
    "href": "content/support/professional-support.html",
    "title": "Professional Support | nanoFramework Documentation",
    "keywords": "Professional Support Professional support is provided by core team members. Aimed at commercial users developing nanoFramework based projects has the objective to help them reduce their development effort and, consequently, the time to market. The support services ensure that: Your questions will be answered correctly and in a timely fashion. Bugs that you report are fixed with higher priority. The above will, obviously, help the project continuous growth. The following companies offer their engineering services, tools, training, software components and support services. Eclo Solutions Looking for community help ?"
  },
  "content/ti-simplelink/flash-nanoclr-cc13x2_26x2.html": {
    "href": "content/ti-simplelink/flash-nanoclr-cc13x2_26x2.html",
    "title": "Flash a nanoCLR image in TI CC13x2/CC6x2 boards | nanoFramework Documentation",
    "keywords": "Flash a nanoCLR image in TI CC13x2/CC6x2 boards How To guide To flash nanoCLR image in TI CC13x2/CC6x2 boards Uniflash tool from TI is required. Assuming that Uniflash tool and the USB drivers are properly installed, follows the recommend procedure for a CC1352R1 LaunchPad board. Download the image from nanoFramework repository. Connect the board using the USB cable. Start Uniflash. The board should be detected and listed, unless the configuration is set to manual detection. Click the Start button there. Select the nanoCLR image file by clicking Browse and navigating to the folder/file where the nanoCLR.bin is located. (Make sure you do select the file with bin extension). The nanoCLR image will show in the flash list. By clicking on the Load Image button the flashing process starts. After successfully burning the flash with the nanoCLR image, you can disconnect and reconnect the USB cable. The nanoDevice target will show in Visual Studio Device Explorer window as expected."
  },
  "content/ti-simplelink/flash-nanoclr-cc32xx.html": {
    "href": "content/ti-simplelink/flash-nanoclr-cc32xx.html",
    "title": "Flash a nanoCLR image in a TI CC32xx board | nanoFramework Documentation",
    "keywords": "Flash a nanoCLR image in a TI CC32xx board How To guide To flash nanoCLR image in a TI board Uniflash tool from TI is required. Assuming that Uniflash tool and the USB drivers are properly installed, follows the recommend procedure for a CC3220SF-LAUNCHXL board. Download the image from nanoFramework repository. Place the J13 SPO jumper in position 1. Connect the board using the USB cable. Start Uniflash. The board should be detected and listed. Click the Start button there and select the project corresponding to your board. This is assuming that you've created that project beforehand. If that's not the case, please follow the walk-through here . Select the nanoCLR image file by clicking Browse and navigating to the folder/file where the nanoCLR.bin is located. (Make sure you do select the file with bin extension). Click the Connect button. After the connection with the target is successfully established the device status and capabilities will be listed at the top right corner. Click the Burn button and the flashing process will start. After successfully burning the flash with the nanoCLR image, you can disconnect and reconnect the USB cable. The nanoDevice target will show in Visual Studio Device Explorer window as expected. Prepare a Uniflash project for a CC32xx board (TBD)"
  },
  "content/ti-simplelink/index.html": {
    "href": "content/ti-simplelink/index.html",
    "title": "TI specific articles | nanoFramework Documentation",
    "keywords": "TI specific articles How To flash nanoCLR in CC13x2 and CC26x2 boards How To flash nanoCLR in CC32xx board"
  },
  "content/ULX3S/index.html": {
    "href": "content/ULX3S/index.html",
    "title": "ULX3S specific articles | nanoFramework Documentation",
    "keywords": "ULX3S specific articles See the Main Radiona ULX3S page , and emard's source . The onboard ESP32 used the same Building ESP32 libraries . The full ULX3S schematic is available here . See in particular the ESP32 connections: The red LED (D22) is on GPIO5."
  },
  "index.html": {
    "href": "index.html",
    "title": "Sponsoring nanoFramework | nanoFramework Documentation",
    "keywords": "Making it easy to write C# code for embedded systems! Sponsoring nanoFramework Most of the core team members and contributors are embedded systems enthusiasts, passionate about coding and people that like challenges. The work on nanoFramework is done mostly on their free time. Some of the core members happen to work on companies that sponsor heavily nanoFramework and offer their work hours to the project. If you use nanoFramework for serious work or want to support it, please donate. This allow for paying the infrastructure cost and more time to be invested on the project. Besides monetary contributions, there are several other ways to contribute. Please read the documentation about this [here]contributing/index.md). Sponsors Sponsors will get their logo and link to a website on our GitHub readme and also on our home page. Backers Backers are individuals who contribute with money to help support nanoFramework. Every little bit helps and we appreciate all contributions, even the smallest ones. What is nanoFramework ? nanoFramework is a free and Open Source platform that enables the writing of managed code applications for constrained embedded devices . It is suitable for many types of projects including IoT sensors, wearables, academic proof of concept, robotics, hobbyist/makers creations or even complex industrial equipment. It makes the development for such platforms easier, faster and less costly by giving embedded developers access to modern technologies and tools used by desktop application developers. Developers can harness the powerful and familiar Microsoft Visual Studio IDE and their .NET C# knowledge to quickly write code without having to worry about the low-level hardware intricacies of a microcontroller. Desktop .NET developers will feel “at home” and are able to use their skills in embedded systems development, enlarging the pool of qualified embedded developers. It includes a reduced version of the .NET Common Language Runtime (CLR) and features a subset of the .NET base class libraries along with the most common APIs included in the Universal Windows Platform (UWP) allowing code reuse from desktop applications, IoT Core applications, thousands of code examples and open source projects. Using Microsoft Visual Studio, a developer can deploy and debug the code directly on real hardware. The nanoFramework platform picks up where .NET Micro Framework left off and uses some of its building blocks. Many of the original components were completely rewritten, others improved and some simply reused. A lot of code cleansing and improvements took place to make nanoFramework fit for the future! Read along and find out why use nanoFramework? Documentation Explore our knowledge base, API documentation, samples, guides and tutorials. Getting started guides Build instructions Reference target boards Community provided target boards ESP32 specific content STM32 specific content TI specific content Know how to contribute to nanoFramework project. Contribute to nanoFramework Developer contribution"
  }
}