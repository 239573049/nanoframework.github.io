{
  "api/index.html": {
    "href": "api/index.html",
    "title": ".NET nanoFramework APIs | nanoFramework Documentation",
    "keywords": ".NET nanoFramework APIs Our APIs try to follow, as closely as possible, the ones from .NET IoT . The main goal is to potentiate code reuse, existing code samples for .NET IoT and even Desktop. This is a work in progress so do check back often for updates. If you find any bugs in documentation we appreciate if you let us know or even better submit a PR with the correction. Happy coding with .NET nanoFramework !"
  },
  "api/Microsoft.Extensions.Logging.EventId.html": {
    "href": "api/Microsoft.Extensions.Logging.EventId.html",
    "title": "Struct EventId | nanoFramework Documentation",
    "keywords": "Struct EventId Event Id structure Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.Extensions.Logging Assembly : nanoFramework.Logging.dll Syntax public readonly struct EventId Constructors | Improve this Doc View Source EventId(Int32, String) Creates an EventId Declaration public EventId(int id, string name = null) Parameters Type Name Description Int32 id The ID number String name The associated name Properties | Improve this Doc View Source Id The ID Declaration public readonly int Id { get; } Property Value Type Description Int32 | Improve this Doc View Source Name The name, null is none Declaration public readonly string Name { get; } Property Value Type Description String Methods | Improve this Doc View Source Equals(EventId) Check if this EvetnId have the same Id as the other one Declaration public readonly bool Equals(EventId other) Parameters Type Name Description EventId other The EvetnId to compare Returns Type Description Boolean True if Id is equal | Improve this Doc View Source Equals(Object) Check if this EventId is the same object as the other one Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj The EventId to compare Returns Type Description Boolean True if equal Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Get the hash code Declaration public override readonly int GetHashCode() Returns Type Description Int32 ID is the hash code Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Convert to string Declaration public override readonly string ToString() Returns Type Description String The name or ID if name is null Overrides Object.ToString() Operators | Improve this Doc View Source Equality(EventId, EventId) Equal operator Declaration public static bool operator ==(EventId left, EventId right) Parameters Type Name Description EventId left EventId left to compare EventId right EvetnId right to compare Returns Type Description Boolean True if equal | Improve this Doc View Source Implicit(Int32 to EventId) Implicitly convert int to EnvetId Declaration public static implicit operator EventId(int i) Parameters Type Name Description Int32 i Returns Type Description EventId | Improve this Doc View Source Inequality(EventId, EventId) non equal operator Declaration public static bool operator !=(EventId left, EventId right) Parameters Type Name Description EventId left EventId left to compare EventId right EvetnId right to compare Returns Type Description Boolean True if not equal Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Microsoft.Extensions.Logging.html": {
    "href": "api/Microsoft.Extensions.Logging.html",
    "title": "Namespace Microsoft.Extensions.Logging | nanoFramework Documentation",
    "keywords": "Namespace Microsoft.Extensions.Logging Classes LoggerExtensions ILogger extension methods for common scenarios. Structs EventId Event Id structure Interfaces ILogger Represents a type used to perform logging. ILoggerFactory Represents a type used to configure the logging system and create instances of ILogger from the registered ILogger s. Enums LogLevel Defines logging severity levels."
  },
  "api/Microsoft.Extensions.Logging.ILogger.html": {
    "href": "api/Microsoft.Extensions.Logging.ILogger.html",
    "title": "Interface ILogger | nanoFramework Documentation",
    "keywords": "Interface ILogger Represents a type used to perform logging. Namespace : Microsoft.Extensions.Logging Assembly : nanoFramework.Logging.dll Syntax public interface ILogger Remarks Aggregates most logging patterns to a single method. Methods | Improve this Doc View Source IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel level to be checked. Returns Type Description Boolean true if enabled. | Improve this Doc View Source Log(LogLevel, EventId, String, Exception, MethodInfo) Writes a log entry. Declaration void Log(LogLevel logLevel, EventId eventId, string state, Exception exception, MethodInfo format) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. String state The entry to be written. Exception exception The exception related to this entry. MethodInfo format Extension Methods LogDispatcher.GetCurrentClassLogger(Object) LoggerExtensions.LogDebug(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogDebug(ILogger, EventId, String, Object[]) LoggerExtensions.LogDebug(ILogger, Exception, String, Object[]) LoggerExtensions.LogDebug(ILogger, String, Object[]) LoggerExtensions.LogTrace(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogTrace(ILogger, EventId, String, Object[]) LoggerExtensions.LogTrace(ILogger, Exception, String, Object[]) LoggerExtensions.LogTrace(ILogger, String, Object[]) LoggerExtensions.LogInformation(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogInformation(ILogger, EventId, String, Object[]) LoggerExtensions.LogInformation(ILogger, Exception, String, Object[]) LoggerExtensions.LogInformation(ILogger, String, Object[]) LoggerExtensions.LogWarning(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogWarning(ILogger, EventId, String, Object[]) LoggerExtensions.LogWarning(ILogger, Exception, String, Object[]) LoggerExtensions.LogWarning(ILogger, String, Object[]) LoggerExtensions.LogError(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogError(ILogger, EventId, String, Object[]) LoggerExtensions.LogError(ILogger, Exception, String, Object[]) LoggerExtensions.LogError(ILogger, String, Object[]) LoggerExtensions.LogCritical(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogCritical(ILogger, EventId, String, Object[]) LoggerExtensions.LogCritical(ILogger, Exception, String, Object[]) LoggerExtensions.LogCritical(ILogger, String, Object[]) LoggerExtensions.Log(ILogger, LogLevel, String, Object[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, String, Object[]) LoggerExtensions.Log(ILogger, LogLevel, Exception, String, Object[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, Exception, String, Object[]) LoggerExtensions.BeginScope(ILogger, String, Object[])"
  },
  "api/Microsoft.Extensions.Logging.ILoggerFactory.html": {
    "href": "api/Microsoft.Extensions.Logging.ILoggerFactory.html",
    "title": "Interface ILoggerFactory | nanoFramework Documentation",
    "keywords": "Interface ILoggerFactory Represents a type used to configure the logging system and create instances of ILogger from the registered ILogger s. Inherited Members IDisposable.Dispose() Namespace : Microsoft.Extensions.Logging Assembly : nanoFramework.Logging.dll Syntax public interface ILoggerFactory : IDisposable Methods | Improve this Doc View Source CreateLogger(String) Creates a new ILogger instance. Declaration ILogger CreateLogger(string categoryName) Parameters Type Name Description String categoryName The category name for messages produced by the logger. Returns Type Description ILogger The ILogger . Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Microsoft.Extensions.Logging.LoggerExtensions.html": {
    "href": "api/Microsoft.Extensions.Logging.LoggerExtensions.html",
    "title": "Class LoggerExtensions | nanoFramework Documentation",
    "keywords": "Class LoggerExtensions ILogger extension methods for common scenarios. Inheritance Object LoggerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.Extensions.Logging Assembly : nanoFramework.Logging.dll Syntax public static class LoggerExtensions Properties | Improve this Doc View Source MessageFormatter Provide a way to have the message formated Declaration public static MethodInfo MessageFormatter { get; set; } Property Value Type Description MethodInfo Methods | Improve this Doc View Source BeginScope(ILogger, String, Object[]) Formats the message and creates a scope. Declaration public static IDisposable BeginScope(this ILogger logger, string messageFormat, params object[] args) Parameters Type Name Description ILogger logger The ILogger to create the scope in. String messageFormat Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Returns Type Description IDisposable A disposable scope object. Can be null. Examples using(logger.BeginScope(\"Processing request from {Address}\", address)) { } | Improve this Doc View Source Log(ILogger, LogLevel, EventId, Exception, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. EventId eventId The event id associated with the log. Exception exception The exception to log. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. | Improve this Doc View Source Log(ILogger, LogLevel, EventId, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, EventId eventId, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. EventId eventId The event id associated with the log. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. | Improve this Doc View Source Log(ILogger, LogLevel, Exception, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. Exception exception The exception to log. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. | Improve this Doc View Source Log(ILogger, LogLevel, String, Object[]) Formats and writes a log message at the specified log level. Declaration public static void Log(this ILogger logger, LogLevel logLevel, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. LogLevel logLevel Entry will be written on this level. String message Format string of the log message. Object [] args An object array that contains zero or more objects to format. | Improve this Doc View Source LogCritical(ILogger, EventId, Exception, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical(this ILogger logger, EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogCritical(0, exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogCritical(ILogger, EventId, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical(this ILogger logger, EventId eventId, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogCritical(0, \"Processing request from {Address}\", address) | Improve this Doc View Source LogCritical(ILogger, Exception, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical(this ILogger logger, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogCritical(exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogCritical(ILogger, String, Object[]) Formats and writes a critical log message. Declaration public static void LogCritical(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogCritical(\"Processing request from {Address}\", address) | Improve this Doc View Source LogDebug(ILogger, EventId, Exception, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug(this ILogger logger, EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogDebug(0, exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogDebug(ILogger, EventId, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug(this ILogger logger, EventId eventId, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogDebug(0, \"Processing request from {Address}\", address) | Improve this Doc View Source LogDebug(ILogger, Exception, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug(this ILogger logger, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogDebug(exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogDebug(ILogger, String, Object[]) Formats and writes a debug log message. Declaration public static void LogDebug(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogDebug(\"Processing request from {Address}\", address) | Improve this Doc View Source LogError(ILogger, EventId, Exception, String, Object[]) Formats and writes an error log message. Declaration public static void LogError(this ILogger logger, EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogError(0, exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogError(ILogger, EventId, String, Object[]) Formats and writes an error log message. Declaration public static void LogError(this ILogger logger, EventId eventId, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogError(0, \"Processing request from {Address}\", address) | Improve this Doc View Source LogError(ILogger, Exception, String, Object[]) Formats and writes an error log message. Declaration public static void LogError(this ILogger logger, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogError(exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogError(ILogger, String, Object[]) Formats and writes an error log message. Declaration public static void LogError(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogError(\"Processing request from {Address}\", address) | Improve this Doc View Source LogInformation(ILogger, EventId, Exception, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation(this ILogger logger, EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogInformation(0, exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogInformation(ILogger, EventId, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation(this ILogger logger, EventId eventId, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogInformation(0, \"Processing request from {Address}\", address) | Improve this Doc View Source LogInformation(ILogger, Exception, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation(this ILogger logger, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogInformation(exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogInformation(ILogger, String, Object[]) Formats and writes an informational log message. Declaration public static void LogInformation(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogInformation(\"Processing request from {Address}\", address) | Improve this Doc View Source LogTrace(ILogger, EventId, Exception, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace(this ILogger logger, EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogTrace(0, exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogTrace(ILogger, EventId, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace(this ILogger logger, EventId eventId, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogTrace(0, \"Processing request from {Address}\", address) | Improve this Doc View Source LogTrace(ILogger, Exception, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace(this ILogger logger, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogTrace(exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogTrace(ILogger, String, Object[]) Formats and writes a trace log message. Declaration public static void LogTrace(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogTrace(\"Processing request from {Address}\", address) | Improve this Doc View Source LogWarning(ILogger, EventId, Exception, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning(this ILogger logger, EventId eventId, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogWarning(0, exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogWarning(ILogger, EventId, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning(this ILogger logger, EventId eventId, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. EventId eventId The event id associated with the log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogWarning(0, \"Processing request from {Address}\", address) | Improve this Doc View Source LogWarning(ILogger, Exception, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning(this ILogger logger, Exception exception, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. Exception exception The exception to log. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogWarning(exception, \"Error while processing request from {Address}\", address) | Improve this Doc View Source LogWarning(ILogger, String, Object[]) Formats and writes a warning log message. Declaration public static void LogWarning(this ILogger logger, string message, params object[] args) Parameters Type Name Description ILogger logger The ILogger to write to. String message Format string of the log message in message template format. Example: \"User {User} logged in from {Address}\" Object [] args An object array that contains zero or more objects to format. Examples logger.LogWarning(\"Processing request from {Address}\", address)"
  },
  "api/Microsoft.Extensions.Logging.LogLevel.html": {
    "href": "api/Microsoft.Extensions.Logging.LogLevel.html",
    "title": "Enum LogLevel | nanoFramework Documentation",
    "keywords": "Enum LogLevel Defines logging severity levels. Namespace : Microsoft.Extensions.Logging Assembly : nanoFramework.Logging.dll Syntax public enum LogLevel Fields Name Description Critical Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires immediate attention. Debug Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value. Error Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure. Information Logs that track the general flow of the application. These logs should have long-term value. None Not used for writing log messages. Specifies that a logging category should not write any messages. Trace Logs that contain the most detailed messages. These messages may contain sensitive application data. These messages are disabled by default and should never be enabled in a production environment. Warning Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the application execution to stop. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Mosquito.TemperatureGauge.html": {
    "href": "api/Mosquito.TemperatureGauge.html",
    "title": "Namespace Mosquito.TemperatureGauge | nanoFramework Documentation",
    "keywords": "Namespace Mosquito.TemperatureGauge Classes Program"
  },
  "api/Mosquito.TemperatureGauge.Program.html": {
    "href": "api/Mosquito.TemperatureGauge.Program.html",
    "title": "Class Program | nanoFramework Documentation",
    "keywords": "Class Program Inheritance Object Program Namespace : Mosquito.TemperatureGauge Assembly : Mosquito.TemperatureGauge.dll Syntax public class Program : object Methods | Improve this Doc View Source Main() Declaration public static void Main() | Improve this Doc View Source SetupAndConnectNetwork() Declaration public static void SetupAndConnectNetwork() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Client.CloudToDeviceMessage.html": {
    "href": "api/nanoFramework.Azure.Devices.Client.CloudToDeviceMessage.html",
    "title": "Delegate CloudToDeviceMessage | nanoFramework Documentation",
    "keywords": "Delegate CloudToDeviceMessage Cloud to device delegate function used for callback. Namespace : nanoFramework.Azure.Devices.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public delegate void CloudToDeviceMessage(object sender, CloudToDeviceMessageEventArgs e); Parameters Type Name Description Object sender The DeviceClient class sender. CloudToDeviceMessageEventArgs e The device message event arguments. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Client.CloudToDeviceMessageEventArgs.html": {
    "href": "api/nanoFramework.Azure.Devices.Client.CloudToDeviceMessageEventArgs.html",
    "title": "Class CloudToDeviceMessageEventArgs | nanoFramework Documentation",
    "keywords": "Class CloudToDeviceMessageEventArgs The device message event arguments. Inheritance Object EventArgs CloudToDeviceMessageEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class CloudToDeviceMessageEventArgs : EventArgs Constructors | Improve this Doc View Source CloudToDeviceMessageEventArgs(String, String) Constructor for device message event arguments. Declaration public CloudToDeviceMessageEventArgs(string message, string properties) Parameters Type Name Description String message The string message. String properties The properties. Properties | Improve this Doc View Source Message The message. Declaration public string Message { get; set; } Property Value Type Description String | Improve this Doc View Source Properties The properties. Declaration public Hashtable Properties { get; set; } Property Value Type Description Hashtable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Client.DeviceClient.html": {
    "href": "api/nanoFramework.Azure.Devices.Client.DeviceClient.html",
    "title": "Class DeviceClient | nanoFramework Documentation",
    "keywords": "Class DeviceClient Azure IoT Client SDK for .NET nanoFramework using MQTT Inheritance Object DeviceClient Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class DeviceClient : IDisposable Constructors | Improve this Doc View Source DeviceClient(String, String, X509Certificate2, MqttQoSLevel, X509Certificate) Creates an DeviceClient class. Declaration public DeviceClient(string iotHubName, string deviceId, X509Certificate2 clientCert, MqttQoSLevel qosLevel = MqttQoSLevel.AtMostOnce, X509Certificate azureCert = null) Parameters Type Name Description String iotHubName Your Azure IoT Hub fully qualified domain name (example: youriothub.azure-devices.net). String deviceId The device ID (name of your device). X509Certificate2 clientCert The certificate to connect the device (containing both public and private keys). MqttQoSLevel qosLevel The default quality of assurance level for delivery for the MQTT messages (defaults to the lowest quality). X509Certificate azureCert Azure certificate for the connection to Azure IoT Hub | Improve this Doc View Source DeviceClient(String, String, String, MqttQoSLevel, X509Certificate) Creates an DeviceClient class. Declaration public DeviceClient(string iotHubName, string deviceId, string sasKey, MqttQoSLevel qosLevel = MqttQoSLevel.AtMostOnce, X509Certificate azureCert = null) Parameters Type Name Description String iotHubName The Azure IoT name fully qualified (ex: youriothub.azure-devices.net) String deviceId The device ID which is the name of your device. String sasKey One of the SAS Key either primary, either secondary. MqttQoSLevel qosLevel The default quality level delivery for the MQTT messages, default to the lower quality X509Certificate azureCert Azure certificate for the connection to Azure IoT Hub Properties | Improve this Doc View Source IoTHubStatus The latest status. Declaration public IoTHubStatus IoTHubStatus { get; } Property Value Type Description IoTHubStatus | Improve this Doc View Source IsConnected True if the device connected. Declaration public bool IsConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source LastTwin The latest Twin received. Declaration public Twin LastTwin { get; } Property Value Type Description Twin | Improve this Doc View Source QosLevel The default level quality. Declaration public MqttQoSLevel QosLevel { get; set; } Property Value Type Description MqttQoSLevel Methods | Improve this Doc View Source AddMethodCallback(MethodCallback) Add a callback method. Declaration public void AddMethodCallback(MethodCallback methodCallback) Parameters Type Name Description MethodCallback methodCallback The callback method to add. | Improve this Doc View Source Close() Close the connection with Azure IoT and disconnect the device. Declaration public void Close() | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source GetTwin(CancellationToken) Gets the twin. Declaration public Twin GetTwin(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellationToken A cancellation token Returns Type Description Twin The twin. Remarks It is strongly recommended to use a cancellation token that can be canceled and manage this on the caller code level. A reasonable time of few seconds is recommended with a retry mechanism. | Improve this Doc View Source Open() Open the connection with Azure IoT. This will initiate a connection from the device to the Azure IoT Hub instance. Declaration public bool Open() Returns Type Description Boolean | Improve this Doc View Source Reconnect() Reconnect to Azure Iot Hub Declaration public void Reconnect() | Improve this Doc View Source RemoveMethodCallback(MethodCallback) Remove a callback method. Declaration public void RemoveMethodCallback(MethodCallback methodCallback) Parameters Type Name Description MethodCallback methodCallback The callback method to remove. | Improve this Doc View Source SendMessage(String, CancellationToken) Send a message to Azure IoT. Declaration public bool SendMessage(string message, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description String message The message to send. CancellationToken cancellationToken A cancellation token. If you use the default one, the confirmation of delivery will not be awaited. Returns Type Description Boolean True for successful message delivery. | Improve this Doc View Source UpdateReportedProperties(TwinCollection, CancellationToken) Update the twin reported properties. Declaration public bool UpdateReportedProperties(TwinCollection reported, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TwinCollection reported The reported properties. CancellationToken cancellationToken A cancellation token. If you use the default one, the confirmation of delivery will not be awaited. Returns Type Description Boolean True for successful message delivery. Events | Improve this Doc View Source CloudToDeviceMessage Cloud to device message received event. Declaration public event CloudToDeviceMessage CloudToDeviceMessage Event Type Type Description CloudToDeviceMessage | Improve this Doc View Source StatusUpdated Status change event. Declaration public event StatusUpdated StatusUpdated Event Type Type Description StatusUpdated | Improve this Doc View Source TwinUpated Device twin updated event. Declaration public event TwinUpdated TwinUpated Event Type Type Description TwinUpdated Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Client.html": {
    "href": "api/nanoFramework.Azure.Devices.Client.html",
    "title": "Namespace nanoFramework.Azure.Devices.Client | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Azure.Devices.Client Classes CloudToDeviceMessageEventArgs The device message event arguments. DeviceClient Azure IoT Client SDK for .NET nanoFramework using MQTT IoTHubStatus Azure IoT Hub status. StatusUpdatedEventArgs Status updated arguments. Enums Status Azure IoT Hub status. Delegates CloudToDeviceMessage Cloud to device delegate function used for callback. MethodCallback Method call back delegate. StatusUpdated Delegate method for status update."
  },
  "api/nanoFramework.Azure.Devices.Client.IoTHubStatus.html": {
    "href": "api/nanoFramework.Azure.Devices.Client.IoTHubStatus.html",
    "title": "Class IoTHubStatus | nanoFramework Documentation",
    "keywords": "Class IoTHubStatus Azure IoT Hub status. Inheritance Object IoTHubStatus Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class IoTHubStatus Constructors | Improve this Doc View Source IoTHubStatus() Default constructor. Declaration public IoTHubStatus() Properties | Improve this Doc View Source Message The associated message if any. Declaration public string Message { get; set; } Property Value Type Description String | Improve this Doc View Source Status The status. Declaration public Status Status { get; set; } Property Value Type Description Status Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Client.MethodCallback.html": {
    "href": "api/nanoFramework.Azure.Devices.Client.MethodCallback.html",
    "title": "Delegate MethodCallback | nanoFramework Documentation",
    "keywords": "Delegate MethodCallback Method call back delegate. Namespace : nanoFramework.Azure.Devices.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public delegate string MethodCallback(int rid, string payload); Parameters Type Name Description Int32 rid The request ID. String payload The payload. Returns Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Client.Status.html": {
    "href": "api/nanoFramework.Azure.Devices.Client.Status.html",
    "title": "Enum Status | nanoFramework Documentation",
    "keywords": "Enum Status Azure IoT Hub status. Namespace : nanoFramework.Azure.Devices.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public enum Status Fields Name Description Connected Connection happened. DirectMethodCalled A direct method has been called. Disconnected Disconnection happened. InternalError Internal SDK error. IoTHubError IoT Hub Error. IoTHubHighlightInformation IoT Hub Highlight Information. IoTHubInformation IoT Hub Information. IoTHubWarning IoT Hub Warning. MessageReceived Message received. TwinReceived Twin received. TwinUpdated Twin has been updated. TwinUpdateError Error updating the twins. TwinUpdateReceived Twin update received. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Azure.Devices.Client.StatusUpdated.html": {
    "href": "api/nanoFramework.Azure.Devices.Client.StatusUpdated.html",
    "title": "Delegate StatusUpdated | nanoFramework Documentation",
    "keywords": "Delegate StatusUpdated Delegate method for status update. Namespace : nanoFramework.Azure.Devices.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public delegate void StatusUpdated(object sender, StatusUpdatedEventArgs e); Parameters Type Name Description Object sender The DeviceClient sender. StatusUpdatedEventArgs e The status updated arguments. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Client.StatusUpdatedEventArgs.html": {
    "href": "api/nanoFramework.Azure.Devices.Client.StatusUpdatedEventArgs.html",
    "title": "Class StatusUpdatedEventArgs | nanoFramework Documentation",
    "keywords": "Class StatusUpdatedEventArgs Status updated arguments. Inheritance Object EventArgs StatusUpdatedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class StatusUpdatedEventArgs : EventArgs Constructors | Improve this Doc View Source StatusUpdatedEventArgs(IoTHubStatus) Constructor for status updated arguments. Declaration public StatusUpdatedEventArgs(IoTHubStatus status) Parameters Type Name Description IoTHubStatus status The status. Properties | Improve this Doc View Source IoTHubStatus The IoT Hub status. Declaration public IoTHubStatus IoTHubStatus { get; set; } Property Value Type Description IoTHubStatus Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Provisioning.Client.DeviceRegistrationResult.html": {
    "href": "api/nanoFramework.Azure.Devices.Provisioning.Client.DeviceRegistrationResult.html",
    "title": "Class DeviceRegistrationResult | nanoFramework Documentation",
    "keywords": "Class DeviceRegistrationResult The result of a registration operation. Inheritance Object DeviceRegistrationResult Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Provisioning.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class DeviceRegistrationResult Constructors | Improve this Doc View Source DeviceRegistrationResult(String, DateTime, String, String, ProvisioningRegistrationStatusType, ProvisioningRegistrationSubstatusType, String, DateTime, Int32, String, String) Used internally by the SDK to create a new instance of the DeviceRegistrationResult class. This constructor is exposed to allow serialization and unit testing of applications using this SDK. Declaration public DeviceRegistrationResult(string registrationId, DateTime createdDateTimeUtc, string assignedHub, string deviceId, ProvisioningRegistrationStatusType status, ProvisioningRegistrationSubstatusType substatus, string generationId, DateTime lastUpdatedDateTimeUtc, int errorCode, string errorMessage, string etag) Parameters Type Name Description String registrationId DateTime createdDateTimeUtc String assignedHub String deviceId ProvisioningRegistrationStatusType status ProvisioningRegistrationSubstatusType substatus String generationId DateTime lastUpdatedDateTimeUtc Int32 errorCode String errorMessage String etag | Improve this Doc View Source DeviceRegistrationResult(String, DateTime, String, String, ProvisioningRegistrationStatusType, ProvisioningRegistrationSubstatusType, String, DateTime, Int32, String, String, String) . Constructor to allow return data Declaration public DeviceRegistrationResult(string registrationId, DateTime createdDateTimeUtc, string assignedHub, string deviceId, ProvisioningRegistrationStatusType status, ProvisioningRegistrationSubstatusType substatus, string generationId, DateTime lastUpdatedDateTimeUtc, int errorCode, string errorMessage, string etag, string returnData) Parameters Type Name Description String registrationId DateTime createdDateTimeUtc String assignedHub String deviceId ProvisioningRegistrationStatusType status ProvisioningRegistrationSubstatusType substatus String generationId DateTime lastUpdatedDateTimeUtc Int32 errorCode String errorMessage String etag String returnData | Improve this Doc View Source DeviceRegistrationResult(String, DateTime, String, String, ProvisioningRegistrationStatusType, String, DateTime, Int32, String, String) Used internally by the SDK to create a new instance of the DeviceRegistrationResult class. This constructor is exposed to allow serialization and unit testing of applications using this SDK. Declaration public DeviceRegistrationResult(string registrationId, DateTime createdDateTimeUtc, string assignedHub, string deviceId, ProvisioningRegistrationStatusType status, string generationId, DateTime lastUpdatedDateTimeUtc, int errorCode, string errorMessage, string etag) Parameters Type Name Description String registrationId DateTime createdDateTimeUtc String assignedHub String deviceId ProvisioningRegistrationStatusType status String generationId DateTime lastUpdatedDateTimeUtc Int32 errorCode String errorMessage String etag Properties | Improve this Doc View Source AssignedHub The assigned Azure IoT Hub. Declaration public string AssignedHub { get; protected set; } Property Value Type Description String | Improve this Doc View Source CreatedDateTimeUtc The time when the device originally registered with the service. Declaration public DateTime CreatedDateTimeUtc { get; protected set; } Property Value Type Description DateTime | Improve this Doc View Source DeviceId The Device Id. Declaration public string DeviceId { get; protected set; } Property Value Type Description String | Improve this Doc View Source ErrorCode Error code. Declaration public int ErrorCode { get; protected set; } Property Value Type Description Int32 | Improve this Doc View Source ErrorMessage Error message. Declaration public string ErrorMessage { get; protected set; } Property Value Type Description String | Improve this Doc View Source Etag The Etag. Declaration public string Etag { get; protected set; } Property Value Type Description String | Improve this Doc View Source GenerationId The generation Id. Declaration public string GenerationId { get; protected set; } Property Value Type Description String | Improve this Doc View Source JsonPayload The Custom data returned from the webhook to the device. Declaration public string JsonPayload { get; } Property Value Type Description String | Improve this Doc View Source LastUpdatedDateTimeUtc The time when the device last refreshed the registration. Declaration public DateTime LastUpdatedDateTimeUtc { get; protected set; } Property Value Type Description DateTime | Improve this Doc View Source RegistrationId The registration id. Declaration public string RegistrationId { get; protected set; } Property Value Type Description String | Improve this Doc View Source Status The status of the operation. Declaration public ProvisioningRegistrationStatusType Status { get; protected set; } Property Value Type Description ProvisioningRegistrationStatusType | Improve this Doc View Source Substatus The substatus of the operation. Declaration public ProvisioningRegistrationSubstatusType Substatus { get; protected set; } Property Value Type Description ProvisioningRegistrationSubstatusType Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Provisioning.Client.html": {
    "href": "api/nanoFramework.Azure.Devices.Provisioning.Client.html",
    "title": "Namespace nanoFramework.Azure.Devices.Provisioning.Client | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Azure.Devices.Provisioning.Client Classes DeviceRegistrationResult The result of a registration operation. ProvisioningDeviceClient Allows devices to use the Device Provisioning Service. ProvisioningRegistrationAdditionalData Additional parameters to be passed over registartion instance Enums ProvisioningRegistrationStatusType The provisioning status type. ProvisioningRegistrationSubstatusType The provisioning substatus type."
  },
  "api/nanoFramework.Azure.Devices.Provisioning.Client.ProvisioningDeviceClient.html": {
    "href": "api/nanoFramework.Azure.Devices.Provisioning.Client.ProvisioningDeviceClient.html",
    "title": "Class ProvisioningDeviceClient | nanoFramework Documentation",
    "keywords": "Class ProvisioningDeviceClient Allows devices to use the Device Provisioning Service. Inheritance Object ProvisioningDeviceClient Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Provisioning.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class ProvisioningDeviceClient : IDisposable Methods | Improve this Doc View Source Create(String, String, String, X509Certificate, X509Certificate) Creates an instance of the Device Provisioning Client. Declaration public static ProvisioningDeviceClient Create(string globalDeviceEndpoint, string idScope, string registrationId, X509Certificate securityProvider, X509Certificate azureCert = null) Parameters Type Name Description String globalDeviceEndpoint The GlobalDeviceEndpoint for the Device Provisioning Service. String idScope The IDScope for the Device Provisioning Service. String registrationId The registration ID X509Certificate securityProvider The security provider instance. X509Certificate azureCert The Azure root certificate, leave it null if you have it stored in the device. Returns Type Description ProvisioningDeviceClient An instance of the ProvisioningDeviceClient | Improve this Doc View Source Create(String, String, String, String, X509Certificate) Creates an instance of the Device Provisioning Client. Declaration public static ProvisioningDeviceClient Create(string globalDeviceEndpoint, string idScope, string registrationId, string securityProvider, X509Certificate azureCert = null) Parameters Type Name Description String globalDeviceEndpoint The GlobalDeviceEndpoint for the Device Provisioning Service. String idScope The IDScope for the Device Provisioning Service. String registrationId The registration ID String securityProvider The security provider instance. X509Certificate azureCert The Azure root certificate, leave it null if you have it stored in the device. Returns Type Description ProvisioningDeviceClient An instance of the ProvisioningDeviceClient | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Register(ProvisioningRegistrationAdditionalData, CancellationToken) Registers the current device using the Device Provisioning Service and assigns it to an IoT Hub. Declaration public DeviceRegistrationResult Register(ProvisioningRegistrationAdditionalData data, CancellationToken cancellationToken) Parameters Type Name Description ProvisioningRegistrationAdditionalData data The custom content. CancellationToken cancellationToken The cancellation token. Returns Type Description DeviceRegistrationResult The registration result. | Improve this Doc View Source Register(CancellationToken) Registers the current device using the Device Provisioning Service and assigns it to an IoT Hub. Declaration public DeviceRegistrationResult Register(CancellationToken cancellationToken) Parameters Type Name Description CancellationToken cancellationToken The cancellation token. Returns Type Description DeviceRegistrationResult The registration result. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Provisioning.Client.ProvisioningRegistrationAdditionalData.html": {
    "href": "api/nanoFramework.Azure.Devices.Provisioning.Client.ProvisioningRegistrationAdditionalData.html",
    "title": "Class ProvisioningRegistrationAdditionalData | nanoFramework Documentation",
    "keywords": "Class ProvisioningRegistrationAdditionalData Additional parameters to be passed over registartion instance Inheritance Object ProvisioningRegistrationAdditionalData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Provisioning.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class ProvisioningRegistrationAdditionalData Properties | Improve this Doc View Source JsonData Additional (optional) Json Data to be sent to the service Declaration public string JsonData { get; set; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Provisioning.Client.ProvisioningRegistrationStatusType.html": {
    "href": "api/nanoFramework.Azure.Devices.Provisioning.Client.ProvisioningRegistrationStatusType.html",
    "title": "Enum ProvisioningRegistrationStatusType | nanoFramework Documentation",
    "keywords": "Enum ProvisioningRegistrationStatusType The provisioning status type. Namespace : nanoFramework.Azure.Devices.Provisioning.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public enum ProvisioningRegistrationStatusType Fields Name Description Assigned DRS successfully returned a device Id and connection string to the device Assigning Device has connected to the DRS but IoT Hub Id has not yet been returned to the device Disabled Device is disabled Failed Device enrollment failed Unassigned Device has not yet come on-line Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Azure.Devices.Provisioning.Client.ProvisioningRegistrationSubstatusType.html": {
    "href": "api/nanoFramework.Azure.Devices.Provisioning.Client.ProvisioningRegistrationSubstatusType.html",
    "title": "Enum ProvisioningRegistrationSubstatusType | nanoFramework Documentation",
    "keywords": "Enum ProvisioningRegistrationSubstatusType The provisioning substatus type. Namespace : nanoFramework.Azure.Devices.Provisioning.Client Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public enum ProvisioningRegistrationSubstatusType Fields Name Description DeviceDataMigrated Device has been assigned to a different IoT hub and its device data was migrated from the previously assigned IoT hub. Device data was removed from the previously assigned IoT hub. DeviceDataReset Device has been assigned to a different IoT hub and its device data was populated from the initial state stored in the enrollment. Device data was removed from the previously assigned IoT hub. InitialAssignment Device has been assigned to an IoT hub for the first time Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Azure.Devices.Shared.html": {
    "href": "api/nanoFramework.Azure.Devices.Shared.html",
    "title": "Namespace nanoFramework.Azure.Devices.Shared | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Azure.Devices.Shared Classes Twin Twin Representation. TwinCollection Represents a collection of properties for Twin . TwinProperties Represents Twin properties TwinUpdateEventArgs Twin updated event arguments. Delegates TwinUpdated Delegate for Twin updated."
  },
  "api/nanoFramework.Azure.Devices.Shared.Twin.html": {
    "href": "api/nanoFramework.Azure.Devices.Shared.Twin.html",
    "title": "Class Twin | nanoFramework Documentation",
    "keywords": "Class Twin Twin Representation. Inheritance Object Twin Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Shared Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class Twin Constructors | Improve this Doc View Source Twin() Creates an instance of Twin . Declaration public Twin() | Improve this Doc View Source Twin(TwinProperties) Creates an instance of Twin . Declaration public Twin(TwinProperties twinProperties) Parameters Type Name Description TwinProperties twinProperties The twin properties. | Improve this Doc View Source Twin(String) Creates an instance of Twin . Declaration public Twin(string deviceId) Parameters Type Name Description String deviceId Device Id | Improve this Doc View Source Twin(String, String) Creates an instance of Twin . Declaration public Twin(string deviceId, string jsonTwin) Parameters Type Name Description String deviceId Device Id. String jsonTwin The json twin. Properties | Improve this Doc View Source DeviceId Gets and sets the Twin Id. Declaration public string DeviceId { get; set; } Property Value Type Description String | Improve this Doc View Source ModelId The DTDL model Id of the device. Declaration public string ModelId { get; set; } Property Value Type Description String Remarks The value will be null for a non-pnp device. The value will be null for a pnp device until the device connects and registers with the model Id. | Improve this Doc View Source Properties Gets and sets the Twin properties. Declaration public TwinProperties Properties { get; set; } Property Value Type Description TwinProperties | Improve this Doc View Source Version Twin's Version Declaration public long Version { get; set; } Property Value Type Description Int64 Methods | Improve this Doc View Source ToJson() Gets the Twin as a JSON string. Declaration public string ToJson() Returns Type Description String JSON string Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Shared.TwinCollection.html": {
    "href": "api/nanoFramework.Azure.Devices.Shared.TwinCollection.html",
    "title": "Class TwinCollection | nanoFramework Documentation",
    "keywords": "Class TwinCollection Represents a collection of properties for Twin . Inheritance Object TwinCollection Implements IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Shared Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class TwinCollection : IEnumerable Constructors | Improve this Doc View Source TwinCollection() Creates an empty TwinCollection . Declaration public TwinCollection() | Improve this Doc View Source TwinCollection(Hashtable) Creates a TwinCollection using the given JSON fragments for the body. Declaration public TwinCollection(Hashtable twin) Parameters Type Name Description Hashtable twin The JSON hashtable. | Improve this Doc View Source TwinCollection(String) Creates a TwinCollection using the given JSON fragments for the body. Declaration public TwinCollection(string twinJson) Parameters Type Name Description String twinJson JSON fragment containing the twin data. Properties | Improve this Doc View Source Count Gets the count of properties in the Collection. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[String] Property Indexer. Declaration public object this[string propertyName] { get; set; } Parameters Type Name Description String propertyName Name of the property to get. Property Value Type Description Object Value for the given property name. | Improve this Doc View Source Version Gets the version of the TwinCollection . Declaration public long Version { get; } Property Value Type Description Int64 Methods | Improve this Doc View Source Add(String, Object) Add a property. Declaration public void Add(string property, object value) Parameters Type Name Description String property The property to add. Object value The value of the property. | Improve this Doc View Source Contains(String) Determines whether the specified property is present. Declaration public bool Contains(string propertyName) Parameters Type Name Description String propertyName The property to locate. Returns Type Description Boolean True if the specified property is present; otherwise, false. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. | Improve this Doc View Source ToJson() Gets the TwinProperties as a JSON string. Declaration public string ToJson() Returns Type Description String JSON string | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Remarks Available only in mscorlib build with support for System.Reflection. Implements IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Shared.TwinProperties.html": {
    "href": "api/nanoFramework.Azure.Devices.Shared.TwinProperties.html",
    "title": "Class TwinProperties | nanoFramework Documentation",
    "keywords": "Class TwinProperties Represents Twin properties Inheritance Object TwinProperties Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Shared Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class TwinProperties Constructors | Improve this Doc View Source TwinProperties() Initializes a new instance of TwinProperties Declaration public TwinProperties() | Improve this Doc View Source TwinProperties(Hashtable, Hashtable) Initializes a new instance of TwinProperties Declaration public TwinProperties(Hashtable desired, Hashtable reported) Parameters Type Name Description Hashtable desired Hashtable for the desired properties Hashtable reported Hashtable for the reported properties Properties | Improve this Doc View Source Desired Gets and sets the Twin desired properties. Declaration public TwinCollection Desired { get; set; } Property Value Type Description TwinCollection | Improve this Doc View Source Reported Gets and sets the Twin reported properties. Declaration public TwinCollection Reported { get; set; } Property Value Type Description TwinCollection Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Shared.TwinUpdated.html": {
    "href": "api/nanoFramework.Azure.Devices.Shared.TwinUpdated.html",
    "title": "Delegate TwinUpdated | nanoFramework Documentation",
    "keywords": "Delegate TwinUpdated Delegate for Twin updated. Namespace : nanoFramework.Azure.Devices.Shared Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public delegate void TwinUpdated(object sender, TwinUpdateEventArgs e); Parameters Type Name Description Object sender The DeviceClient sender. TwinUpdateEventArgs e The Twin updated event arguments. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Azure.Devices.Shared.TwinUpdateEventArgs.html": {
    "href": "api/nanoFramework.Azure.Devices.Shared.TwinUpdateEventArgs.html",
    "title": "Class TwinUpdateEventArgs | nanoFramework Documentation",
    "keywords": "Class TwinUpdateEventArgs Twin updated event arguments. Inheritance Object EventArgs TwinUpdateEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Azure.Devices.Shared Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class TwinUpdateEventArgs : EventArgs Constructors | Improve this Doc View Source TwinUpdateEventArgs(TwinCollection) Constructor for Twin updated event arguments. Declaration public TwinUpdateEventArgs(TwinCollection twin) Parameters Type Name Description TwinCollection twin The twin collection. Properties | Improve this Doc View Source Twin Twin collection. Declaration public TwinCollection Twin { get; set; } Property Value Type Description TwinCollection Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Devices.Can.CanController.html": {
    "href": "api/nanoFramework.Devices.Can.CanController.html",
    "title": "Class CanController | nanoFramework Documentation",
    "keywords": "Class CanController Represents a CAN controller on the system. Inheritance Object CanController Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public sealed class CanController : IDisposable Fields | Improve this Doc View Source ControllerId Controller ID for this CanController . Declaration public readonly string ControllerId Field Value Type Description String Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FromId(String, CanSettings) Opens a CAN bus with the settings provided. Declaration public static CanController FromId(string controllerId, CanSettings settings) Parameters Type Name Description String controllerId The id of the bus. CanSettings settings The bus settings. Returns Type Description CanController The CAN controller requested. GetMessage() Get next CanMessage available in the _ CanController internal buffer. If there are no more messages available null will be returned. Declaration public extern CanMessage GetMessage() Returns Type Description CanMessage A CanMessage or null if there are no more messages available. WriteMessage(CanMessage) Write message to CAN Bus. Declaration public extern void WriteMessage(CanMessage message) Parameters Type Name Description CanMessage message CAN mesage to write in CAN Bus. Events | Improve this Doc View Source MessageReceived Indicates that a message has been received through a CanController object. Declaration public event CanMessageReceivedEventHandler MessageReceived Event Type Type Description CanMessageReceivedEventHandler Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Devices.Can.CanEvent.html": {
    "href": "api/nanoFramework.Devices.Can.CanEvent.html",
    "title": "Enum CanEvent | nanoFramework Documentation",
    "keywords": "Enum CanEvent Describes the possible types of events for the CAN controller. Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public enum CanEvent Fields Name Description ErrorOccurred An error has occurred. MessageReceived A CAN message was received. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Devices.Can.CanMessage.html": {
    "href": "api/nanoFramework.Devices.Can.CanMessage.html",
    "title": "Class CanMessage | nanoFramework Documentation",
    "keywords": "Class CanMessage CAN message. Inheritance Object CanMessage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public class CanMessage Constructors | Improve this Doc View Source CanMessage(UInt32, CanMessageIdType, CanMessageFrameType, Byte[]) Creates a CAN message. Declaration public CanMessage(uint id, CanMessageIdType identifierType, CanMessageFrameType frameType, byte[] message) Parameters Type Name Description UInt32 id CanMessageIdType identifierType CanMessageFrameType frameType Byte [] message Properties | Improve this Doc View Source FrameType Message frame type. Declaration public CanMessageFrameType FrameType { get; set; } Property Value Type Description CanMessageFrameType | Improve this Doc View Source Id Message ID (SID or EID format, depending on IdentifierType ). Declaration public uint Id { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source IdentifierType Message identifier type. Declaration public CanMessageIdType IdentifierType { get; set; } Property Value Type Description CanMessageIdType | Improve this Doc View Source Message Message data. Declaration public byte[] Message { get; set; } Property Value Type Description Byte [] Remarks Maximum lenght of data buffer is 8. Exceptions Type Condition ArgumentOutOfRangeException If the message buffer exceeds the maximum allowed lenght. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Devices.Can.CanMessageFrameType.html": {
    "href": "api/nanoFramework.Devices.Can.CanMessageFrameType.html",
    "title": "Enum CanMessageFrameType | nanoFramework Documentation",
    "keywords": "Enum CanMessageFrameType CAN message frame type. Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public enum CanMessageFrameType Fields Name Description Data Data frame. RemoteRequest Remote request frame. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Devices.Can.CanMessageIdType.html": {
    "href": "api/nanoFramework.Devices.Can.CanMessageIdType.html",
    "title": "Enum CanMessageIdType | nanoFramework Documentation",
    "keywords": "Enum CanMessageIdType CAN message identifier type. Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public enum CanMessageIdType Fields Name Description EID Extended Identifier. SID Standard Identifier. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Devices.Can.CanMessageReceivedEventArgs.html": {
    "href": "api/nanoFramework.Devices.Can.CanMessageReceivedEventArgs.html",
    "title": "Class CanMessageReceivedEventArgs | nanoFramework Documentation",
    "keywords": "Class CanMessageReceivedEventArgs Provides data for the MessageReceived event. Inheritance Object CanMessageReceivedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public class CanMessageReceivedEventArgs Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Devices.Can.CanMessageReceivedEventHandler.html": {
    "href": "api/nanoFramework.Devices.Can.CanMessageReceivedEventHandler.html",
    "title": "Delegate CanMessageReceivedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate CanMessageReceivedEventHandler Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public delegate void CanMessageReceivedEventHandler(object sender, CanMessageReceivedEventArgs e); Parameters Type Name Description Object sender CanMessageReceivedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Devices.Can.CanSettings.html": {
    "href": "api/nanoFramework.Devices.Can.CanSettings.html",
    "title": "Class CanSettings | nanoFramework Documentation",
    "keywords": "Class CanSettings Represents the settings for CAN bus. Inheritance Object CanSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Devices.Can Assembly : nanoFramework.Devices.Can.dll Syntax public sealed class CanSettings Constructors | Improve this Doc View Source CanSettings(Byte, Byte, Byte, Byte) Initializes a new instance of CanSettings . Declaration public CanSettings(byte baudRatePrescaler, byte phaseSegment1, byte phaseSegment2, byte syncJumpWidth) Parameters Type Name Description Byte baudRatePrescaler Bus baud rate prescaler. Byte phaseSegment1 Phase segment 1. Byte phaseSegment2 Phase segment 2. Byte syncJumpWidth Synchronization jump width. Properties | Improve this Doc View Source BaudRatePrescaler Gets or sets the baud rate prescaler. Declaration public byte BaudRatePrescaler { get; set; } Property Value Type Description Byte | Improve this Doc View Source PhaseSegment1 Gets or sets the value for phase segment 1. Declaration public byte PhaseSegment1 { get; set; } Property Value Type Description Byte | Improve this Doc View Source PhaseSegment2 Gets or sets the value for phase segment 2. Declaration public byte PhaseSegment2 { get; set; } Property Value Type Description Byte | Improve this Doc View Source SyncJumpWidth Gets or sets the value for the synchronization jump width. Declaration public byte SyncJumpWidth { get; set; } Property Value Type Description Byte Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Devices.Can.html": {
    "href": "api/nanoFramework.Devices.Can.html",
    "title": "Namespace nanoFramework.Devices.Can | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Devices.Can Classes CanController Represents a CAN controller on the system. CanMessage CAN message. CanMessageReceivedEventArgs Provides data for the MessageReceived event. CanSettings Represents the settings for CAN bus. Enums CanEvent Describes the possible types of events for the CAN controller. CanMessageFrameType CAN message frame type. CanMessageIdType CAN message identifier type. Delegates CanMessageReceivedEventHandler"
  },
  "api/nanoFramework.Devices.OneWire.html": {
    "href": "api/nanoFramework.Devices.OneWire.html",
    "title": "Namespace nanoFramework.Devices.OneWire | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Devices.OneWire Classes OneWireController Represents a 1-Wire bus controller. The class provides methods and properties that an app can use to interact with the bus."
  },
  "api/nanoFramework.Devices.OneWire.OneWireController.html": {
    "href": "api/nanoFramework.Devices.OneWire.OneWireController.html",
    "title": "Class OneWireController | nanoFramework Documentation",
    "keywords": "Class OneWireController Represents a 1-Wire bus controller. The class provides methods and properties that an app can use to interact with the bus. Inheritance Object OneWireController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Devices.OneWire Assembly : nanoFramework.Devices.OneWire.dll Syntax public class OneWireController Properties | Improve this Doc View Source SerialNumber SerialNum buffer that is used in the search methods FindFirstDevice(Boolean, Boolean) and FindNextDevice(Boolean, Boolean) . Declaration public byte[] SerialNumber { get; set; } Property Value Type Description Byte [] Methods | Improve this Doc View Source FindAllDevices() Find all devices present in 1-Wire Net Declaration public ArrayList FindAllDevices() Returns Type Description ArrayList ArrayList with the serial numbers of all devices found. FindFirstDevice(Boolean, Boolean) Finds the first device on the 1-Wire Net Declaration public extern bool FindFirstDevice(bool performResetBeforeSearch, bool searchWithAlarmCommand) Parameters Type Name Description Boolean performResetBeforeSearch TRUE perform reset before search, FALSE do not perform reset before search. Boolean searchWithAlarmCommand TRUE the find alarm command 0xEC is sent instead of the normal search command 0xF0. Returns Type Description Boolean TRUE: when a 1-Wire device was found and it's Serial Number placed in SerialNumber . FALSE: There are no devices on the 1-Wire Net. FindNextDevice(Boolean, Boolean) The function does a general search. This function continues from the previous search state. The search state can be reset by using the 'FindFirstDevice' function. Declaration public extern bool FindNextDevice(bool performResetBeforeSearch, bool searchWithAlarmCommand) Parameters Type Name Description Boolean performResetBeforeSearch TRUE perform reset before search, FALSE do not perform reset before search. Boolean searchWithAlarmCommand TRUE the find alarm command 0xEC is sent instead of the normal search command 0xF0. Returns Type Description Boolean TRUE: when a 1-Wire device was found and it's Serial Number placed in SerialNumber . FALSE: when no new device was found. Either the last search was the last device or there are no devices on the 1-Wire Net. ReadByte() Sends 8 bits of read communication to the 1-Wire Net. Declaration public extern byte ReadByte() Returns Type Description Byte 8 bit read from 1-Wire Net. TouchBit(Boolean) Send 1 bit of communication to the 1-Wire Net and return the result 1 bit read from the 1-Wire Net. The parameter value least significant bit is used and the least significant bit of the result is the return bit. Declaration public extern bool TouchBit(bool value) Parameters Type Name Description Boolean value The least significant bit is the bit to send. Returns Type Description Boolean A 0 or 1 read from value . TouchByte(Byte) Send 8 bits of communication to the 1-Wire Net and return the result 8 bits read from the 1-Wire Net. The value least significant 8 bits are used and the least significant 8 bits of the result is the return byte. Declaration public extern byte TouchByte(byte value) Parameters Type Name Description Byte value 8 bits to send (least significant byte). Returns Type Description Byte 8 bits read from value TouchReset() Reset all of the devices on the 1-Wire Net and return the result. Declaration public extern bool TouchReset() Returns Type Description Boolean TRUE: presence pulse(s) detected, device(s) reset. FALSE: no presence pulses detected. WriteByte(Byte) Send 8 bits of communication to the 1-Wire Net and verify that the 8 bits read from the 1-Wire Net is the same (write operation). Declaration public extern byte WriteByte(byte value) Parameters Type Name Description Byte value 8 bits to send (least significant byte). Returns Type Description Byte TRUE: bytes written and echo was the same FALSE: echo was not the same Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Hardware.Esp32.Configuration.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Configuration.html",
    "title": "Class Configuration | nanoFramework Documentation",
    "keywords": "Class Configuration Change Configuration Inheritance Object Configuration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public class Configuration Methods | Improve this Doc View Source GetFunctionPin(DeviceFunction) Returns the current pin number used by a device function. Declaration public static int GetFunctionPin(DeviceFunction function) Parameters Type Name Description DeviceFunction function Returns Type Description Int32 The pin number used by device function. If value is -1 then pins is not assigned. | Improve this Doc View Source SetPinFunction(Int32, DeviceFunction) Set the default function for a GPIO pin. Declaration public static void SetPinFunction(int pin, DeviceFunction value) Parameters Type Name Description Int32 pin The pin number to set against function. DeviceFunction value The device function to be assigned the pin. Remarks Allows gpio pins to be assigned a device function. For example setting the I2C1 data pin to use GPIO pin 17. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Hardware.Esp32.DeviceFunction.html": {
    "href": "api/nanoFramework.Hardware.Esp32.DeviceFunction.html",
    "title": "Enum DeviceFunction | nanoFramework Documentation",
    "keywords": "Enum DeviceFunction Defines values used to change pin configuration via the GPIO alternate drivemode interface. Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum DeviceFunction Fields Name Description ADC1_CH0 ADC1 channel 0 ADC1_CH1 ADC1 channel 1 ADC1_CH10 ADC1 channel 10 Internally ESP32 Adc2 channel 10 ADC1_CH11 ADC1 channel 11 Internally ESP32 Adc2 channel 11 ADC1_CH12 ADC1 channel 12 Internally ESP32 Adc2 channel 12 ADC1_CH13 ADC1 channel 13 Internally ESP32 Adc2 channel 13 ADC1_CH14 ADC1 channel 14 Internally ESP32 Adc2 channel 14 ADC1_CH15 ADC1 channel 15 Internally ESP32 Adc2 channel 15 ADC1_CH16 ADC1 channel 16 Internally ESP32 Adc2 channel 16 ADC1_CH17 ADC1 channel 17 Internally ESP32 Adc2 channel 17 ADC1_CH18 ADC1 channel 18 Internally ESP32 Adc2 channel 18 ADC1_CH19 ADC1 channel 19 Internally ESP32 Adc2 channel 19 ADC1_CH2 ADC1 channel 2 ADC1_CH3 ADC1 channel 3 ADC1_CH4 ADC1 channel 4 ADC1_CH5 ADC1 channel 5 ADC1_CH6 ADC1 channel 6 ADC1_CH7 ADC1 channel 7 ADC1_CH8 ADC1 channel 8 Internal Temperture sensor (VP) ADC1_CH9 ADC1 channel 9 Internal Hall Sensor (VN) COM1_CTS Device function Clear to Send(CTS) for COM1 COM1_RTS Device function Request to Send(RTS) for COM1 COM1_RX Device function RX data for COM1 COM1_TX Device function TX data for COM1 COM2_CTS Device function Clear to Send(CTS) for COM2 COM2_RTS Device function Request to Send(RTS) for COM2 COM2_RX Device function RX data for COM2 COM2_TX Device function TX data for COM2 COM3_CTS Device function Clear to Send(CTS) for COM3 COM3_RTS Device function Request to Send(RTS) for COM3 COM3_RX Device function RX data for COM3 COM3_TX Device function TX data for COM3 I2C1_CLOCK Device function CLOCK for I2C1 I2C1_DATA Device function DATA for I2C1 I2C2_CLOCK Device function CLOCK for I2C2 I2C2_DATA Device function DATA for I2C2 I2S1_BCK I2S1 function Bit Clock. Used for general purpose read and write on the I2S bus. I2S1_DATA_OUT I2S1 function DATA_OUT. Used for output data typically on a speaker. I2S1_MCK I2S1 function Master Clock. Used only in master mode. I2S1_MDATA_IN I2S1 function MDATA_IN. Used for input data typically from a microphone. I2S1_WS I2S1 function WS. Used if your have stereo. I2S2_BCK I2S2 function Bit Clock. Used for general purpose read and write on the I2S bus. I2S2_DATA_OUT I2S2 function DATA_OUT. Used for output data typically on a speaker. I2S2_MCK I2S2 function Master Clock. Used only in master mode. I2S2_MDATA_IN I2S2 function MDATA_IN. Used for input data typically from a microphone. I2S2_WS I2S2 function WS. Used if your have stereo. PWM1 Device function PWM1 PWM10 Device function PWM10 PWM11 Device function PWM11 PWM12 Device function PWM12 PWM13 Device function PWM13 PWM14 Device function PWM14 PWM15 Device function PWM15 PWM16 Device function PWM16 PWM2 Device function PWM2 PWM3 Device function PWM3 PWM4 Device function PWM4 PWM5 Device function PWM5 PWM6 Device function PWM6 PWM7 Device function PWM7 PWM8 Device function PWM8 PWM9 Device function PWM9 SPI1_CLOCK Device function CLOCK for SPI1 SPI1_MISO Device function MISO for SPI1 SPI1_MOSI Device function MOSI for SPI1 SPI2_CLOCK Device function CLOCK for SPI2 SPI2_MISO Device function MISO for SPI2 SPI2_MOSI Device function MOSI for SPI2 Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.Esp32.DeviceTypes.html": {
    "href": "api/nanoFramework.Hardware.Esp32.DeviceTypes.html",
    "title": "Enum DeviceTypes | nanoFramework Documentation",
    "keywords": "Enum DeviceTypes Device Types Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum DeviceTypes Fields Name Description ADC ADC Device type GPIO GPIO Device type I2C I2C Device type I2S I2S Device type PWM PWM Device type SERIAL SERIAL Device type SPI SPI Device type Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.Esp32.EspNativeError.html": {
    "href": "api/nanoFramework.Hardware.Esp32.EspNativeError.html",
    "title": "Enum EspNativeError | nanoFramework Documentation",
    "keywords": "Enum EspNativeError Encapsulates the ESP32 native errors Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum EspNativeError Fields Name Description FAIL The function failed INVALID_ARG Invalid argument error INVALID_CRC CRC error INVALID_MAC Invalid MAC address INVALID_RESPONSE Invalid response INVALID_SIZE Invalid size error INVALID_STATE Invalid state error INVALID_VERSION Invalid version NO_MEM Memory allocation failed error NOT_FOUND The function failed NOT_SUPPORTED Function not supported error OK No error TIMEOUT Timeout error WIFI_BASE Base of WiFi errors Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.Esp32.Gpio.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Gpio.html",
    "title": "Class Gpio | nanoFramework Documentation",
    "keywords": "Class Gpio ESP32 GPIO pins Inheritance Object Gpio Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public static class Gpio Fields | Improve this Doc View Source IO00 Gpio IO00 Declaration public const int IO00 = 0 Field Value Type Description Int32 | Improve this Doc View Source IO01 Gpio IO01 (UART0 TXD) Declaration public const int IO01 = 1 Field Value Type Description Int32 | Improve this Doc View Source IO02 Gpio IO02 Declaration public const int IO02 = 2 Field Value Type Description Int32 | Improve this Doc View Source IO03 Gpio IO03 (UART0 RXD) Declaration public const int IO03 = 3 Field Value Type Description Int32 | Improve this Doc View Source IO04 Gpio IO04 Declaration public const int IO04 = 4 Field Value Type Description Int32 | Improve this Doc View Source IO05 Gpio IO05 Declaration public const int IO05 = 5 Field Value Type Description Int32 | Improve this Doc View Source IO06 Gpio IO06 (Reserved for SPI flash) Declaration public const int IO06 = 6 Field Value Type Description Int32 | Improve this Doc View Source IO07 Gpio IO07 (Reserved for SPI flash) Declaration public const int IO07 = 7 Field Value Type Description Int32 | Improve this Doc View Source IO08 Gpio IO08 (Reserved for SPI flash) Declaration public const int IO08 = 8 Field Value Type Description Int32 | Improve this Doc View Source IO09 Gpio IO09 (Reserved for SPI flash) Declaration public const int IO09 = 9 Field Value Type Description Int32 | Improve this Doc View Source IO10 Gpio IO10 (Reserved for SPI flash) Declaration public const int IO10 = 10 Field Value Type Description Int32 | Improve this Doc View Source IO11 Gpio IO11 (Reserved for SPI flash) Declaration public const int IO11 = 11 Field Value Type Description Int32 | Improve this Doc View Source IO12 Gpio IO12 (also used for JTAG TDI) Declaration public const int IO12 = 12 Field Value Type Description Int32 | Improve this Doc View Source IO13 Gpio IO13 (also used for JTAG TCK) Declaration public const int IO13 = 13 Field Value Type Description Int32 | Improve this Doc View Source IO14 Gpio IO14 (also used for JTAG TMS) Declaration public const int IO14 = 14 Field Value Type Description Int32 | Improve this Doc View Source IO15 Gpio IO15 (also used for JTAG TDO) Declaration public const int IO15 = 15 Field Value Type Description Int32 | Improve this Doc View Source IO16 Gpio IO16 Declaration public const int IO16 = 16 Field Value Type Description Int32 | Improve this Doc View Source IO17 Gpio IO17 Declaration public const int IO17 = 17 Field Value Type Description Int32 | Improve this Doc View Source IO18 Gpio IO18 Declaration public const int IO18 = 18 Field Value Type Description Int32 | Improve this Doc View Source IO19 Gpio IO19 Declaration public const int IO19 = 19 Field Value Type Description Int32 | Improve this Doc View Source IO20 Gpio IO20, No Physical pin for IO20 Declaration public const int IO20 = 20 Field Value Type Description Int32 | Improve this Doc View Source IO21 Gpio IO21 Declaration public const int IO21 = 21 Field Value Type Description Int32 | Improve this Doc View Source IO22 Gpio IO22 Declaration public const int IO22 = 22 Field Value Type Description Int32 | Improve this Doc View Source IO23 Gpio IO23 Declaration public const int IO23 = 23 Field Value Type Description Int32 | Improve this Doc View Source IO24 Gpio IO24, No Physical pin for IO24 Declaration public const int IO24 = 24 Field Value Type Description Int32 | Improve this Doc View Source IO25 Gpio IO25 Declaration public const int IO25 = 25 Field Value Type Description Int32 | Improve this Doc View Source IO26 Gpio IO26 Declaration public const int IO26 = 26 Field Value Type Description Int32 | Improve this Doc View Source IO27 Gpio IO27 Declaration public const int IO27 = 27 Field Value Type Description Int32 | Improve this Doc View Source IO28 Gpio IO28, No Physical pin for IO28 Declaration public const int IO28 = 28 Field Value Type Description Int32 | Improve this Doc View Source IO29 Gpio IO29, No Physical pin for IO29 Declaration public const int IO29 = 29 Field Value Type Description Int32 | Improve this Doc View Source IO30 Gpio IO30, No Physical pin for IO30 Declaration public const int IO30 = 30 Field Value Type Description Int32 | Improve this Doc View Source IO31 Gpio IO31, No Physical pin for IO31 Declaration public const int IO31 = 31 Field Value Type Description Int32 | Improve this Doc View Source IO32 Gpio IO32 Declaration public const int IO32 = 32 Field Value Type Description Int32 | Improve this Doc View Source IO33 Gpio IO33 Declaration public const int IO33 = 33 Field Value Type Description Int32 | Improve this Doc View Source IO34 Gpio IO34 (Input Only, no software pullup/pulldown functions) Declaration public const int IO34 = 34 Field Value Type Description Int32 | Improve this Doc View Source IO35 Gpio IO35 (Input Only, no software pullup/pulldown functions) Declaration public const int IO35 = 35 Field Value Type Description Int32 | Improve this Doc View Source IO36 Gpio IO36 SENSOR_VP (Input Only, no software pullup/pulldown functions) Declaration public const int IO36 = 36 Field Value Type Description Int32 | Improve this Doc View Source IO37 Gpio IO37 (Input Only, no software pullup/pulldown functions) Declaration public const int IO37 = 37 Field Value Type Description Int32 | Improve this Doc View Source IO38 Gpio IO38 (Input Only, no software pullup/pulldown functions) Declaration public const int IO38 = 38 Field Value Type Description Int32 | Improve this Doc View Source IO39 Gpio IO39 SENSOR_VN (Input Only, no software pullup/pulldown functions) Declaration public const int IO39 = 39 Field Value Type Description Int32"
  },
  "api/nanoFramework.Hardware.Esp32.HighResTimer.html": {
    "href": "api/nanoFramework.Hardware.Esp32.HighResTimer.html",
    "title": "Class HighResTimer | nanoFramework Documentation",
    "keywords": "Class HighResTimer The class encapsulates the ESP32 High Resolution Timer API. Inheritance Object HighResTimer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public class HighResTimer : IDisposable Constructors | Improve this Doc View Source HighResTimer() Create a High Resolution Timer. A maximum of 10 timers can be created. Declaration public HighResTimer() Methods | Improve this Doc View Source Dispose() Dispose HighResTimer Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Dispose(bool disposing) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Finalizer Declaration protected void Finalize() | Improve this Doc View Source GetCurrent() Returns the number of micro seconds since boot Declaration public static ulong GetCurrent() Returns Type Description UInt64 | Improve this Doc View Source StartOnePeriodic(UInt64) Start a periodic timer. Declaration public void StartOnePeriodic(ulong period_us) Parameters Type Name Description UInt64 period_us Period between firing timer events. | Improve this Doc View Source StartOneShot(UInt64) Start a one shot timer. Once the timer has expired the timer event will be fired. Declaration public void StartOneShot(ulong timeout_us) Parameters Type Name Description UInt64 timeout_us Timeout in mirco seconds | Improve this Doc View Source Stop() Stop the Timer. Declaration public void Stop() Events | Improve this Doc View Source OnHighResTimerExpired Event raised when a HighRes timer expires. Declaration public event HighResTimerExpiredEventHandler OnHighResTimerExpired Event Type Type Description HighResTimerExpiredEventHandler Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Hardware.Esp32.HighResTimerExpiredEventHandler.html": {
    "href": "api/nanoFramework.Hardware.Esp32.HighResTimerExpiredEventHandler.html",
    "title": "Delegate HighResTimerExpiredEventHandler | nanoFramework Documentation",
    "keywords": "Delegate HighResTimerExpiredEventHandler Event raised when a High res timer expires. Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public delegate void HighResTimerExpiredEventHandler(HighResTimer sender, object e); Parameters Type Name Description HighResTimer sender Object e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Hardware.Esp32.html": {
    "href": "api/nanoFramework.Hardware.Esp32.html",
    "title": "Namespace nanoFramework.Hardware.Esp32 | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Hardware.Esp32 Classes Configuration Change Configuration Gpio ESP32 GPIO pins HighResTimer The class encapsulates the ESP32 High Resolution Timer API. Sleep Encapsulates ESP32 sleep functions Enums DeviceFunction Defines values used to change pin configuration via the GPIO alternate drivemode interface. DeviceTypes Device Types EspNativeError Encapsulates the ESP32 native errors Sleep.TouchPad Enumeration of Touch pad numbers Sleep.WakeupCause Sleep wakeup cause Sleep.WakeupGpioPin Gpio pins that can be used for wakeup Sleep.WakeupMode Wakeup mode used by EnableWakeupByMultiPins Delegates HighResTimerExpiredEventHandler Event raised when a High res timer expires."
  },
  "api/nanoFramework.Hardware.Esp32.Rmt.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Rmt.html",
    "title": "Namespace nanoFramework.Hardware.Esp32.Rmt | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Hardware.Esp32.Rmt Classes ReceiverChannel A class that can be used to Receive RMT items on ESP32 RmtChannel Base class for a RMT channel RmtCommand Class to encapsulate a RMT item TransmitterChannel A class that can be used to create and transmit RMT commands on ESP32 Enums SourceClock Enum for source Clock types"
  },
  "api/nanoFramework.Hardware.Esp32.Rmt.ReceiverChannel.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Rmt.ReceiverChannel.html",
    "title": "Class ReceiverChannel | nanoFramework Documentation",
    "keywords": "Class ReceiverChannel A class that can be used to Receive RMT items on ESP32 Inheritance Object RmtChannel ReceiverChannel Implements IDisposable Inherited Members RmtChannel._channel RmtChannel._clockDivider RmtChannel._sourceClock RmtChannel._NumberRmtChannels RmtChannel._MaxChannelNumber RmtChannel.Channel RmtChannel.ClockDivider RmtChannel.SourceClock Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32.Rmt Assembly : nanoFramework.Hardware.Esp32.Rmt.dll Syntax public class ReceiverChannel : RmtChannel, IDisposable Constructors | Improve this Doc View Source ReceiverChannel(Int32, Int32) Public constructor to create receiver channel object. Declaration public ReceiverChannel(int gpio, int rmtBufferSize = 100) Parameters Type Name Description Int32 gpio The GPIO pin number that we want to use for receiving Int32 rmtBufferSize The maximum number of RMT commands to be reserved in receiver input buffer. Default 100. Properties | Improve this Doc View Source ReceiveTimeout The receive time-out used when calling GetAllItems. Default 1 second. Declaration public TimeSpan ReceiveTimeout { get; set; } Property Value Type Description TimeSpan Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source EnableFilter(Boolean, Byte) Enable / Disable filter for channel. Declaration public void EnableFilter(bool enable, byte threshold) Parameters Type Name Description Boolean enable True to Enable filter Byte threshold Pulse width to ignore expressed in number of source clock cycles, Value between 1-255 | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetAllItems() Get all RmtCommand items available. Declaration public RmtCommand[] GetAllItems() Returns Type Description RmtCommand [] Return array of RMTCommand. If no signal received in time-out period then empty array will be returned. Remarks If no signal received in time-out period then empty array will be returned. | Improve this Doc View Source SetIdleThresold(UInt16) Set the Idle Threshold in ticks. Declaration public void SetIdleThresold(ushort threshold) Parameters Type Name Description UInt16 threshold Value between 1 and 65535 (0xFFFF) | Improve this Doc View Source Start(Boolean) Start receiving data on channel. Declaration public void Start(bool clearBuffer) Parameters Type Name Description Boolean clearBuffer Clears buffer before starting. | Improve this Doc View Source Stop() Stop receiving data on channel. Declaration public void Stop() Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Hardware.Esp32.Rmt.RmtChannel.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Rmt.RmtChannel.html",
    "title": "Class RmtChannel | nanoFramework Documentation",
    "keywords": "Class RmtChannel Base class for a RMT channel Inheritance Object RmtChannel ReceiverChannel TransmitterChannel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32.Rmt Assembly : nanoFramework.Hardware.Esp32.Rmt.dll Syntax public class RmtChannel Fields | Improve this Doc View Source _channel Assigned RMT channel, assigned when channel created. Declaration protected int _channel Field Value Type Description Int32 | Improve this Doc View Source _clockDivider Clock divider used on channel Declaration protected byte _clockDivider Field Value Type Description Byte | Improve this Doc View Source _MaxChannelNumber The largest channel number. Channel numbers start at 0. Declaration protected const byte _MaxChannelNumber = 7 Field Value Type Description Byte | Improve this Doc View Source _NumberRmtChannels The number of RMT channels available. Declaration protected const byte _NumberRmtChannels = 8 Field Value Type Description Byte | Improve this Doc View Source _sourceClock RMT channel source clock Declaration protected SourceClock _sourceClock Field Value Type Description SourceClock Properties | Improve this Doc View Source Channel The channel number we are using Declaration public int Channel { get; } Property Value Type Description Int32 | Improve this Doc View Source ClockDivider The value can be between 1 and 255. Declaration public byte ClockDivider { get; set; } Property Value Type Description Byte | Improve this Doc View Source SourceClock The source clock. Only the 80MHz APB clock is currently supported. Declaration public SourceClock SourceClock { get; set; } Property Value Type Description SourceClock Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Hardware.Esp32.Rmt.RmtCommand.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Rmt.RmtCommand.html",
    "title": "Class RmtCommand | nanoFramework Documentation",
    "keywords": "Class RmtCommand Class to encapsulate a RMT item Inheritance Object RmtCommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32.Rmt Assembly : nanoFramework.Hardware.Esp32.Rmt.dll Syntax public class RmtCommand Constructors | Improve this Doc View Source RmtCommand(UInt16, Boolean, UInt16, Boolean) Create new rmt command Declaration public RmtCommand(ushort duration1, bool level1, ushort duration2, bool level2) Parameters Type Name Description UInt16 duration1 Boolean level1 UInt16 duration2 Boolean level2 Properties | Improve this Doc View Source Duration0 Level1 duration in RMT channel ticks Declaration public ushort Duration0 { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Duration1 Level2 duration in RMT channel ticks Declaration public ushort Duration1 { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Level0 Level 0 value high/low Declaration public bool Level0 { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Level1 Level 1 value high/low Declaration public bool Level1 { get; set; } Property Value Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Hardware.Esp32.Rmt.SourceClock.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Rmt.SourceClock.html",
    "title": "Enum SourceClock | nanoFramework Documentation",
    "keywords": "Enum SourceClock Enum for source Clock types Namespace : nanoFramework.Hardware.Esp32.Rmt Assembly : nanoFramework.Hardware.Esp32.Rmt.dll Syntax public enum SourceClock Fields Name Description APB 80MHz clock source. REF Not supported Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.Esp32.Rmt.TransmitterChannel.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Rmt.TransmitterChannel.html",
    "title": "Class TransmitterChannel | nanoFramework Documentation",
    "keywords": "Class TransmitterChannel A class that can be used to create and transmit RMT commands on ESP32 Inheritance Object RmtChannel TransmitterChannel Implements IDisposable Inherited Members RmtChannel._channel RmtChannel._clockDivider RmtChannel._sourceClock RmtChannel._NumberRmtChannels RmtChannel._MaxChannelNumber RmtChannel.Channel RmtChannel.ClockDivider RmtChannel.SourceClock Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32.Rmt Assembly : nanoFramework.Hardware.Esp32.Rmt.dll Syntax public class TransmitterChannel : RmtChannel, IDisposable Constructors | Improve this Doc View Source TransmitterChannel(Int32) Public constructor to create Transmitter object Declaration public TransmitterChannel(int gpio) Parameters Type Name Description Int32 gpio The GPIO pin number that we want to use for transmitting Properties | Improve this Doc View Source CarrierEnabled Is the carrier wave enabled? Declaration public bool CarrierEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CarrierHighDuration The duration of the carrier wave's high pulse, in source clock ticks. Declaration public ushort CarrierHighDuration { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source CarrierLevel The level of the carrier wave's. Declaration public bool CarrierLevel { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CarrierLowDuration The duration of the carrier wave's low pulse, in source clock ticks. Declaration public ushort CarrierLowDuration { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source IdleLevel The level of the channel when in an idle state. Declaration public bool IdleLevel { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsChannelIdle Is the channel idle? Declaration public bool IsChannelIdle { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Access a command from the array of commands that will be sent Declaration public RmtCommand this[int index] { get; set; } Parameters Type Name Description Int32 index Index into RMTCommand array Property Value Type Description RmtCommand RMT command from index Methods | Improve this Doc View Source AddCommand(RmtCommand) Add new RMT command to the list of commands that will be sent Declaration public void AddCommand(RmtCommand cmd) Parameters Type Name Description RmtCommand cmd RmtCommand to Add | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Send(Boolean) Send the filled RMT commands to the transmitter Declaration public void Send(bool waitTxDone) Parameters Type Name Description Boolean waitTxDone If true wait the TX process to end, false function returns without waiting, but if another command is send before the end of the previous process an error will occur. | Improve this Doc View Source SendData(Byte[], Boolean) Send a RAW data to RMT module Declaration public void SendData(byte[] data, bool waitTxDone) Parameters Type Name Description Byte [] data byte array of data for tx module ready for native function Boolean waitTxDone Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Hardware.Esp32.Sleep.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Sleep.html",
    "title": "Class Sleep | nanoFramework Documentation",
    "keywords": "Class Sleep Encapsulates ESP32 sleep functions Inheritance Object Sleep Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public class Sleep Methods | Improve this Doc View Source EnableWakeupByMultiPins(Sleep.WakeupGpioPin, Sleep.WakeupMode) Enable Wkaup using multiple pins. Declaration public static EspNativeError EnableWakeupByMultiPins(Sleep.WakeupGpioPin pins, Sleep.WakeupMode mode) Parameters Type Name Description Sleep.WakeupGpioPin pins Sleep.WakeupMode mode Returns Type Description EspNativeError Remarks Only pins that are RTC connected. | Improve this Doc View Source EnableWakeupByPin(Sleep.WakeupGpioPin, Int32) Enable wakeup using a gpio pin Declaration public static EspNativeError EnableWakeupByPin(Sleep.WakeupGpioPin pin, int level) Parameters Type Name Description Sleep.WakeupGpioPin pin GPIO number used as wakeup source. Only pins that have RTC functionality can be used. 0,2,4,12->15,25->27,32->39 Int32 level Returns Type Description EspNativeError | Improve this Doc View Source EnableWakeupByTimer(TimeSpan) Enable Wakeup by Timer Declaration public static EspNativeError EnableWakeupByTimer(TimeSpan time) Parameters Type Name Description TimeSpan time Returns Type Description EspNativeError | Improve this Doc View Source EnableWakeupByTouchPad() Enable wakeup by Touchpad Declaration public static EspNativeError EnableWakeupByTouchPad() Returns Type Description EspNativeError | Improve this Doc View Source GetWakeupCause() Get the cause for waking up Declaration public static Sleep.WakeupCause GetWakeupCause() Returns Type Description Sleep.WakeupCause Return the Wakeup cause. | Improve this Doc View Source GetWakeupGpioPin() Returns a bit mask of pins taht caused the wakeup Declaration public static Sleep.WakeupGpioPin GetWakeupGpioPin() Returns Type Description Sleep.WakeupGpioPin | Improve this Doc View Source GetWakeupTouchpad() Get the touch pad which caused wakeup. Declaration public static Sleep.TouchPad GetWakeupTouchpad() Returns Type Description Sleep.TouchPad Return TouchPad number or None | Improve this Doc View Source StartDeepSleep() Enter deep sleep using configured wakeup sources. Declaration public static void StartDeepSleep() Remarks If no wakeup sources configured then it will be a indefinite sleep. This call never returns. After the device enters deep sleep a wakeup source will wake the device and the execution will start as if it was a reset. Keep in mind that the execution WILL NOT continue after the call to this method. | Improve this Doc View Source StartLightSleep() Enter light sleep with the configured wakeup options. Declaration public static EspNativeError StartLightSleep() Returns Type Description EspNativeError Return ESP_ERR_INVALID_STATE if Wifi or BT not stopped. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Hardware.Esp32.Sleep.TouchPad.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Sleep.TouchPad.html",
    "title": "Enum Sleep.TouchPad | nanoFramework Documentation",
    "keywords": "Enum Sleep.TouchPad Enumeration of Touch pad numbers Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum TouchPad Fields Name Description None Number returned when no touch pad used on wakeup Num0 Touch pad channel 0 is GPIO4 Num1 Touch pad channel 1 is GPIO0 Num2 Touch pad channel 2 is GPIO2 Num3 Touch pad channel 3 is GPIO15 Num4 Touch pad channel 4 is GPIO13 Num5 Touch pad channel 5 is GPIO12 Num6 Touch pad channel 6 is GPIO14 Num7 Touch pad channel 7 is GPIO27 Num8 Touch pad channel 8 is GPIO33 Num9 Touch pad channel 9 is GPIO32 Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.Esp32.Sleep.WakeupCause.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Sleep.WakeupCause.html",
    "title": "Enum Sleep.WakeupCause | nanoFramework Documentation",
    "keywords": "Enum Sleep.WakeupCause Sleep wakeup cause Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum WakeupCause Fields Name Description Ext0 Wakeup caused by external signal using RTC_IO Ext1 Wakeup caused by external signal using RTC_CNTL Gpio Wakeup caused by GPIO (light sleep only) Timer Wakeup caused by timer TouchPad Wakeup caused by touchpad Uart Wakeup caused by UART (light sleep only) Ulp Wakeup caused by ULP program Undefined In case of deep sleep, reset was not caused by exit from deep sleep Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.Esp32.Sleep.WakeupGpioPin.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Sleep.WakeupGpioPin.html",
    "title": "Enum Sleep.WakeupGpioPin | nanoFramework Documentation",
    "keywords": "Enum Sleep.WakeupGpioPin Gpio pins that can be used for wakeup Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax [Flags] public enum WakeupGpioPin : ulong Fields Name Description None No wake up pin Pin0 Gpio Pin 1 used for wakeup Pin12 Gpio Pin 12 used for wakeup Pin13 Gpio Pin 13 used for wakeup Pin14 Gpio Pin 14 used for wakeup Pin15 Gpio Pin 15 used for wakeup Pin2 Gpio Pin 2 used for wakeup Pin25 Gpio Pin 25 used for wakeup Pin26 Gpio Pin 26 used for wakeup Pin27 Gpio Pin 27 used for wakeup Pin32 Gpio Pin 32 used for wakeup Pin33 Gpio Pin 33 used for wakeup Pin34 Gpio Pin 34 used for wakeup Pin35 Gpio Pin 35 used for wakeup Pin36 Gpio Pin 36 used for wakeup Pin37 Gpio Pin 37 used for wakeup Pin38 Gpio Pin 38 used for wakeup Pin39 Gpio Pin 39 used for wakeup Pin4 Gpio Pin 4 used for wakeup Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.Esp32.Sleep.WakeupMode.html": {
    "href": "api/nanoFramework.Hardware.Esp32.Sleep.WakeupMode.html",
    "title": "Enum Sleep.WakeupMode | nanoFramework Documentation",
    "keywords": "Enum Sleep.WakeupMode Wakeup mode used by EnableWakeupByMultiPins Namespace : nanoFramework.Hardware.Esp32 Assembly : nanoFramework.Hardware.Esp32.dll Syntax public enum WakeupMode Fields Name Description AllLow Wakeup when all pins are low AnyHigh Wakeup when any pin is high Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.Stm32.BackupMemory.html": {
    "href": "api/nanoFramework.Hardware.Stm32.BackupMemory.html",
    "title": "Class BackupMemory | nanoFramework Documentation",
    "keywords": "Class BackupMemory Provides access to STM32 backup registers. Inheritance Object BackupMemory Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public static class BackupMemory Properties | Improve this Doc View Source Size Gets the size of the backup memory on the current target. Declaration public static int Size { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ReadBoolean(UInt32) Reads a Boolean value from the backup memory. Declaration public static bool ReadBoolean(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Boolean The value. | Improve this Doc View Source ReadByte(UInt32) Reads a byte value from the backup memory. Declaration public static byte ReadByte(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Byte The value. ReadBytes(UInt32, Byte[]) Reads an array of byte values from the backup memory. Declaration public static extern void ReadBytes(uint position, byte[] value) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Byte [] value The array of values. | Improve this Doc View Source ReadDateTime(UInt32) Reads a date and time value from the backup memory. Declaration public static DateTime ReadDateTime(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description DateTime The value. | Improve this Doc View Source ReadInt16(UInt32) Reads a 16-bit integer value from the backup memory. Declaration public static short ReadInt16(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Int16 The value. | Improve this Doc View Source ReadInt32(UInt32) Reads a 32-bit integer value from the backup memory. Declaration public static int ReadInt32(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Int32 The value. | Improve this Doc View Source ReadInt64(UInt32) Reads a 64-bit integer value from the backup memory. Declaration public static long ReadInt64(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Int64 The value. | Improve this Doc View Source ReadSingle(UInt32) Reads a floating-point value from the backup memory. Declaration public static float ReadSingle(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description Single The value. | Improve this Doc View Source ReadString(UInt32, UInt32) Reads a string value from the backup memory. Declaration public static string ReadString(uint position, uint lenght) Parameters Type Name Description UInt32 position Position on the backup memory to read from. UInt32 lenght The length of the string. Returns Type Description String The value. | Improve this Doc View Source ReadTimeSpan(UInt32) Reads a time interval from the backup memory. Declaration public static TimeSpan ReadTimeSpan(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description TimeSpan The value. | Improve this Doc View Source ReadUInt16(UInt32) Reads a 16-bit unsigned integer from the backup memory. Declaration public static ushort ReadUInt16(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description UInt16 The value. | Improve this Doc View Source ReadUInt32(UInt32) Reads a 32-bit unsigned integer from the backup memory. Declaration public static uint ReadUInt32(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description UInt32 The value. | Improve this Doc View Source ReadUInt64(UInt32) Reads a 64-bit unsigned integer from the backup memory. Declaration public static ulong ReadUInt64(uint position) Parameters Type Name Description UInt32 position Position on the backup memory to read from. Returns Type Description UInt64 The value. | Improve this Doc View Source WriteBoolean(UInt32, Boolean) Writes a Boolean value to the backup memory. Declaration public static void WriteBoolean(uint position, bool value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Boolean value The value to write. | Improve this Doc View Source WriteByte(UInt32, Byte) Writes a byte value to the backup memory. Declaration public static void WriteByte(uint position, byte value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Byte value The value to write. WriteBytes(UInt32, Byte[]) Writes an array of byte values to the backup memory. Declaration public static extern void WriteBytes(uint position, byte[] value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Byte [] value The value to write. | Improve this Doc View Source WriteDateTime(UInt32, DateTime) Writes a date and time value to the backup memory. Declaration public static void WriteDateTime(uint position, DateTime value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . DateTime value The value to write. | Improve this Doc View Source WriteInt16(UInt32, Int16) Writes a 16-bit integer value to the backup memory. Declaration public static void WriteInt16(uint position, short value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Int16 value The value to write. | Improve this Doc View Source WriteInt32(UInt32, Int32) Writes a 32-bit integer value to the backup memory. Declaration public static void WriteInt32(uint position, int value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Int32 value The value to write. | Improve this Doc View Source WriteInt64(UInt32, Int64) Writes a 64-bit integer value to the backup memory. Declaration public static void WriteInt64(uint position, long value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Int64 value The value to write. | Improve this Doc View Source WriteSingle(UInt32, Single) Write a floating-point value to the backup memory. Declaration public static void WriteSingle(uint position, float value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . Single value The value to write. | Improve this Doc View Source WriteString(UInt32, String) Writes a string value to the backup memory. Declaration public static void WriteString(uint position, string value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . String value The value to write. | Improve this Doc View Source WriteTimeSpan(UInt32, TimeSpan) Writes a time interval value to the output stream. Declaration public static void WriteTimeSpan(uint position, TimeSpan value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . TimeSpan value The value to write. | Improve this Doc View Source WriteUInt16(UInt32, UInt16) Writes a 16-bit unsigned integer value to the backup memory. Declaration public static void WriteUInt16(uint position, ushort value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . UInt16 value The value to write. | Improve this Doc View Source WriteUInt32(UInt32, UInt32) Writes a 32-bit unsigned integer value to the backup memory. Declaration public static void WriteUInt32(uint position, uint value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . UInt32 value The value to write. | Improve this Doc View Source WriteUInt64(UInt32, UInt64) Writes a 64-bit unsigned integer value to the backup memory. Declaration public static void WriteUInt64(uint position, ulong value) Parameters Type Name Description UInt32 position Position on the backup memory to write the value . UInt64 value The value to write."
  },
  "api/nanoFramework.Hardware.Stm32.html": {
    "href": "api/nanoFramework.Hardware.Stm32.html",
    "title": "Namespace nanoFramework.Hardware.Stm32 | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Hardware.Stm32 Classes BackupMemory Provides access to STM32 backup registers. Power Provides methods to control power mode of the target CPU. RTC Provides access to RTC (real time clock) features. Utilities Utilities for managing and handling STM32 target devices. Enums Power.WakeupPin Wake-up pin enumeration. Power.WakeupReasonType Wakeup reason enumeration."
  },
  "api/nanoFramework.Hardware.Stm32.Power.html": {
    "href": "api/nanoFramework.Hardware.Stm32.Power.html",
    "title": "Class Power | nanoFramework Documentation",
    "keywords": "Class Power Provides methods to control power mode of the target CPU. Inheritance Object Power Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public static class Power Remarks This API is available only for SMT32 targets. Properties WakeupReason Gets the reason for device wakeup. Declaration public static Power.WakeupReasonType WakeupReason { get; } Property Value Type Description Power.WakeupReasonType Methods DisableWakeupPin(Power.WakeupPin) Disables the specified pin as wake-up source. Declaration public static extern void DisableWakeupPin(Power.WakeupPin pin = Power.WakeupPin.Pin1) Parameters Type Name Description Power.WakeupPin pin Remarks The wake-up pin availability is target dependent. Check the target device data-sheet for details. If the specified pin is not available an ArgumentException is thrown. EnableWakeupPin(Power.WakeupPin) Enables the specified pin as wake-up source. Declaration public static extern void EnableWakeupPin(Power.WakeupPin pin = Power.WakeupPin.Pin1) Parameters Type Name Description Power.WakeupPin pin Remarks The wake-up pin availability is target dependent. Check the target device data-sheet for details. If the specified pin is not available an ArgumentException is thrown. | Improve this Doc View Source EnterStandbyMode() Sets the target device to enter STM32 \"standby\" mode. Declaration public static void EnterStandbyMode() Remarks If no wakeup sources configured then it will be a indefinite sleep. This call never returns. After the device enters standby a wakeup source will wake the device and the execution will start as if it was a reset. Keep in mind that the execution WILL NOT continue after the call to this method."
  },
  "api/nanoFramework.Hardware.Stm32.Power.WakeupPin.html": {
    "href": "api/nanoFramework.Hardware.Stm32.Power.WakeupPin.html",
    "title": "Enum Power.WakeupPin | nanoFramework Documentation",
    "keywords": "Enum Power.WakeupPin Wake-up pin enumeration. Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public enum WakeupPin Fields Name Description Pin1 Wake-up pin 1. Pin2 Wake-up pin 2. Pin3 Wake-up pin 3. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.Stm32.Power.WakeupReasonType.html": {
    "href": "api/nanoFramework.Hardware.Stm32.Power.WakeupReasonType.html",
    "title": "Enum Power.WakeupReasonType | nanoFramework Documentation",
    "keywords": "Enum Power.WakeupReasonType Wakeup reason enumeration. Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public enum WakeupReasonType Fields Name Description FromPin Wakeup from pin. FromStandby Wakeup from standby mode. Undetermined Undetermined wakeup reason. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.Stm32.RTC.html": {
    "href": "api/nanoFramework.Hardware.Stm32.RTC.html",
    "title": "Class RTC | nanoFramework Documentation",
    "keywords": "Class RTC Provides access to RTC (real time clock) features. Inheritance Object RTC Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public static class RTC Methods GetAlarm() Gets the DateTime set for the alarm. Declaration public static extern DateTime GetAlarm() Returns Type Description DateTime Return the current DateTime set for the alarm. Remarks If target device has more than one alarm. This is the value of Alarm A. | Improve this Doc View Source SetAlarm(DateTime) Sets the DateTime for the alarm. This will wake-up the target device if it's in sleep or power down mode. Declaration public static void SetAlarm(DateTime time) Parameters Type Name Description DateTime time Time to set. Remarks If target device has more than one alarm. This will set Alarm A."
  },
  "api/nanoFramework.Hardware.Stm32.Utilities.html": {
    "href": "api/nanoFramework.Hardware.Stm32.Utilities.html",
    "title": "Class Utilities | nanoFramework Documentation",
    "keywords": "Class Utilities Utilities for managing and handling STM32 target devices. Inheritance Object Utilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.Stm32 Assembly : nanoFramework.Hardware.Stm32.dll Syntax public static class Utilities Properties | Improve this Doc View Source DeviceId Gets the device identifier. Declaration public static uint DeviceId { get; } Property Value Type Description UInt32 | Improve this Doc View Source DeviceRevisionId Gets the device revision identifier. Declaration public static uint DeviceRevisionId { get; } Property Value Type Description UInt32 | Improve this Doc View Source UniqueDeviceId Gets the 96 bits unique device ID. Declaration public static byte[] UniqueDeviceId { get; } Property Value Type Description Byte []"
  },
  "api/nanoFramework.Hardware.TI.html": {
    "href": "api/nanoFramework.Hardware.TI.html",
    "title": "Namespace nanoFramework.Hardware.TI | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Hardware.TI Classes Power Provides methods to control power mode of the target CPU. Power.PinWakeupConfig Configuration for GPIO pin to wakeup device. Utilities Utilities for managing and handling TI SimpleLink target devices. Enums Power.PinPullUpDown Configuration for GPIO pin internal pull-up or pull-down resitor. Power.PinWakeupEdge Configuration for GPIO pin wakeup sensivity. Power.ResetSource Source of system reset."
  },
  "api/nanoFramework.Hardware.TI.Power.html": {
    "href": "api/nanoFramework.Hardware.TI.Power.html",
    "title": "Class Power | nanoFramework Documentation",
    "keywords": "Class Power Provides methods to control power mode of the target CPU. Inheritance Object Power Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.TI Assembly : nanoFramework.Hardware.TI.dll Syntax public static class Power Remarks This API is available only for TI targets. Properties SourceOfReset Gets the reset source. Declaration public static Power.ResetSource SourceOfReset { get; } Property Value Type Description Power.ResetSource Methods ConfigureWakeupFromGpioPin(Power.PinWakeupConfig[]) Setup wakeup configuration from GPIO pins. Declaration public static extern void ConfigureWakeupFromGpioPin(Power.PinWakeupConfig[] pinWakeupConfig) Parameters Type Name Description Power.PinWakeupConfig [] pinWakeupConfig Array of Power.PinWakeupConfig with the configuration for the GPIO pins. Remarks This method is used to setup the wakeup configuration from GPIO pins. If there is a need to make further changes to the configuration just call this method again with the new configuration. There is no storage for the configuration nor any method to query the existing configuration, if any. If a GPIO pin has been setup with a wakeup configuration and that needs to be removed, it should be added to the new configuration array with None . | Improve this Doc View Source EnterShutdownMode() Sets the target device to enter TI \"shutdown\" mode. Declaration public static void EnterShutdownMode() Remarks If no wakeup sources configured then it will be a indefinite sleep. This call never returns. After the device enters shutdown a wakeup source will wake the device and the execution will start as if it was a reset. Keep in mind that the execution WILL NOT continue after the call to this method. | Improve this Doc View Source EnterStandbyMode(TimeSpan) Sets the target device to enter TI \"standby\" mode. Declaration public static void EnterStandbyMode(TimeSpan duration) Parameters Type Name Description TimeSpan duration Duration of the standby mode. Remarks After the device enters standby it will wake-up after the set period of time . Keep in mind that the execution WILL NOT continue after the call to this method."
  },
  "api/nanoFramework.Hardware.TI.Power.PinPullUpDown.html": {
    "href": "api/nanoFramework.Hardware.TI.Power.PinPullUpDown.html",
    "title": "Enum Power.PinPullUpDown | nanoFramework Documentation",
    "keywords": "Enum Power.PinPullUpDown Configuration for GPIO pin internal pull-up or pull-down resitor. Namespace : nanoFramework.Hardware.TI Assembly : nanoFramework.Hardware.TI.dll Syntax public enum PinPullUpDown : uint Fields Name Description None No pull-up or pull-down resistor. PullDown Enable internal pull-down resistor for GPIO pin. PullUp Enable internal pull-up resistor for GPIO pin. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.TI.Power.PinWakeupConfig.html": {
    "href": "api/nanoFramework.Hardware.TI.Power.PinWakeupConfig.html",
    "title": "Class Power.PinWakeupConfig | nanoFramework Documentation",
    "keywords": "Class Power.PinWakeupConfig Configuration for GPIO pin to wakeup device. Inheritance Object Power.PinWakeupConfig Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.TI Assembly : nanoFramework.Hardware.TI.dll Syntax public class PinWakeupConfig Constructors | Improve this Doc View Source PinWakeupConfig(Int32, Power.PinWakeupEdge, Power.PinPullUpDown) Create a wakeup configuration for a GPIO pin. Declaration public PinWakeupConfig(int pin, Power.PinWakeupEdge wakeupConfig, Power.PinPullUpDown pinPullUpDown = Power.PinPullUpDown.None) Parameters Type Name Description Int32 pin GPIO pin number to configure for wakeup. Power.PinWakeupEdge wakeupConfig Wakeup configuration for the GPIO pin. Power.PinPullUpDown pinPullUpDown Option for internal pull-up or pull-down resistor. Remarks To remove a wakeup configuration from a pin set the wakeupConfig to None . Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Hardware.TI.Power.PinWakeupEdge.html": {
    "href": "api/nanoFramework.Hardware.TI.Power.PinWakeupEdge.html",
    "title": "Enum Power.PinWakeupEdge | nanoFramework Documentation",
    "keywords": "Enum Power.PinWakeupEdge Configuration for GPIO pin wakeup sensivity. Namespace : nanoFramework.Hardware.TI Assembly : nanoFramework.Hardware.TI.dll Syntax public enum PinWakeupEdge Fields Name Description NegativeEdge Wakeup from shutdown on negative edge. None No wakeup. PositiveEdge Wakeup from shutdown on positive edge. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.TI.Power.ResetSource.html": {
    "href": "api/nanoFramework.Hardware.TI.Power.ResetSource.html",
    "title": "Enum Power.ResetSource | nanoFramework Documentation",
    "keywords": "Enum Power.ResetSource Source of system reset. Namespace : nanoFramework.Hardware.TI Assembly : nanoFramework.Hardware.TI.dll Syntax public enum ResetSource : byte Fields Name Description ClockLoss Clock loss detected. NoiseOnTck Detected noise on TCK pin. PowerOn Power-on reset. ResetPin Reset pin. SoftwareReset Software initiated system reset. VddrFailure VDDR failure. VddsFailure VDDS failure. WakeupFromShutdown System wakeup from shutdown. WarmReset Warm reset. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Hardware.TI.Utilities.html": {
    "href": "api/nanoFramework.Hardware.TI.Utilities.html",
    "title": "Class Utilities | nanoFramework Documentation",
    "keywords": "Class Utilities Utilities for managing and handling TI SimpleLink target devices. Inheritance Object Utilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Hardware.TI Assembly : nanoFramework.Hardware.TI.dll Syntax public static class Utilities Remarks This API is available only for TI targets. Methods | Improve this Doc View Source GetIeeeAddress() Gets the IEEE Address. Declaration public static byte[] GetIeeeAddress() Returns Type Description Byte []"
  },
  "api/nanoFramework.Json.DeserializationException.html": {
    "href": "api/nanoFramework.Json.DeserializationException.html",
    "title": "Class DeserializationException | nanoFramework Documentation",
    "keywords": "Class DeserializationException Exception thrown when there is an problem with a deserialization operation. Check the comment from where the exception has been throw to learn the cause. Inheritance Object Exception DeserializationException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Json Assembly : nanoFramework.Json.dll Syntax [Serializable] public class DeserializationException : Exception Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Json.html": {
    "href": "api/nanoFramework.Json.html",
    "title": "Namespace nanoFramework.Json | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Json Classes DeserializationException Exception thrown when there is an problem with a deserialization operation. Check the comment from where the exception has been throw to learn the cause. JsonConvert Provides methods for converting between .NET types and JSON types. SerializationException Exception thrown when there is an problem with a serialization operation. Check the comment from where the exception has been throw to learn the cause."
  },
  "api/nanoFramework.Json.JsonConvert.html": {
    "href": "api/nanoFramework.Json.JsonConvert.html",
    "title": "Class JsonConvert | nanoFramework Documentation",
    "keywords": "Class JsonConvert Provides methods for converting between .NET types and JSON types. Inheritance Object JsonConvert Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Json Assembly : nanoFramework.Json.dll Syntax public static class JsonConvert Methods | Improve this Doc View Source DeserializeObject(Stream, Type) Deserializes a Json string into an object. Declaration public static object DeserializeObject(Stream stream, Type type) Parameters Type Name Description Stream stream Type type The object type to convert to Returns Type Description Object | Improve this Doc View Source DeserializeObject(String, Type) Deserializes a Json string into an object. Declaration public static object DeserializeObject(string sourceString, Type type) Parameters Type Name Description String sourceString Type type The object type to convert to Returns Type Description Object | Improve this Doc View Source DeserializeObject(DataReader, Type) Deserializes a Json string into an object. Declaration public static object DeserializeObject(DataReader dr, Type type) Parameters Type Name Description DataReader dr Type type The object type to convert to Returns Type Description Object | Improve this Doc View Source SerializeObject(Object) Convert an object to a JSON string. Declaration public static string SerializeObject(object oSource) Parameters Type Name Description Object oSource The value to convert. Supported types are: Boolean, String, Byte, (U)Int16, (U)Int32, Float, Double, Decimal, Array, IDictionary, IEnumerable, Guid, Datetime, DictionaryEntry, Object and null. Returns Type Description String The JSON object as a string or null when the value type is not supported. Remarks For objects, only public properties with getters are converted."
  },
  "api/nanoFramework.Json.SerializationException.html": {
    "href": "api/nanoFramework.Json.SerializationException.html",
    "title": "Class SerializationException | nanoFramework Documentation",
    "keywords": "Class SerializationException Exception thrown when there is an problem with a serialization operation. Check the comment from where the exception has been throw to learn the cause. Inheritance Object Exception SerializationException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Json Assembly : nanoFramework.Json.dll Syntax [Serializable] public class SerializationException : Exception Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Logging.Debug.DebugLogger.html": {
    "href": "api/nanoFramework.Logging.Debug.DebugLogger.html",
    "title": "Class DebugLogger | nanoFramework Documentation",
    "keywords": "Class DebugLogger A logger that prints to the debug console Inheritance Object DebugLogger Implements ILogger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Logging.Debug Assembly : nanoFramework.Logging.dll Syntax public class DebugLogger : ILogger Constructors | Improve this Doc View Source DebugLogger(String) Creates a new instance of the DebugLogger Declaration public DebugLogger(string loggerName) Parameters Type Name Description String loggerName The logger name Properties | Improve this Doc View Source LoggerName Name of the logger Declaration public string LoggerName { get; } Property Value Type Description String | Improve this Doc View Source MinLogLevel Sets the minimum log level Declaration public LogLevel MinLogLevel { get; set; } Property Value Type Description LogLevel Methods | Improve this Doc View Source IsEnabled(LogLevel) Checks if the given logLevel is enabled. Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel level to be checked. Returns Type Description Boolean true if enabled. | Improve this Doc View Source Log(LogLevel, EventId, String, Exception, MethodInfo) Writes a log entry. Declaration public void Log(LogLevel logLevel, EventId eventId, string state, Exception exception, MethodInfo format) Parameters Type Name Description LogLevel logLevel Entry will be written on this level. EventId eventId Id of the event. String state The entry to be written. Exception exception The exception related to this entry. MethodInfo format Implements ILogger Extension Methods LogDispatcher.GetCurrentClassLogger(Object) LoggerExtensions.LogDebug(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogDebug(ILogger, EventId, String, Object[]) LoggerExtensions.LogDebug(ILogger, Exception, String, Object[]) LoggerExtensions.LogDebug(ILogger, String, Object[]) LoggerExtensions.LogTrace(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogTrace(ILogger, EventId, String, Object[]) LoggerExtensions.LogTrace(ILogger, Exception, String, Object[]) LoggerExtensions.LogTrace(ILogger, String, Object[]) LoggerExtensions.LogInformation(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogInformation(ILogger, EventId, String, Object[]) LoggerExtensions.LogInformation(ILogger, Exception, String, Object[]) LoggerExtensions.LogInformation(ILogger, String, Object[]) LoggerExtensions.LogWarning(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogWarning(ILogger, EventId, String, Object[]) LoggerExtensions.LogWarning(ILogger, Exception, String, Object[]) LoggerExtensions.LogWarning(ILogger, String, Object[]) LoggerExtensions.LogError(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogError(ILogger, EventId, String, Object[]) LoggerExtensions.LogError(ILogger, Exception, String, Object[]) LoggerExtensions.LogError(ILogger, String, Object[]) LoggerExtensions.LogCritical(ILogger, EventId, Exception, String, Object[]) LoggerExtensions.LogCritical(ILogger, EventId, String, Object[]) LoggerExtensions.LogCritical(ILogger, Exception, String, Object[]) LoggerExtensions.LogCritical(ILogger, String, Object[]) LoggerExtensions.Log(ILogger, LogLevel, String, Object[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, String, Object[]) LoggerExtensions.Log(ILogger, LogLevel, Exception, String, Object[]) LoggerExtensions.Log(ILogger, LogLevel, EventId, Exception, String, Object[]) LoggerExtensions.BeginScope(ILogger, String, Object[])"
  },
  "api/nanoFramework.Logging.Debug.DebugLoggerFactory.html": {
    "href": "api/nanoFramework.Logging.Debug.DebugLoggerFactory.html",
    "title": "Class DebugLoggerFactory | nanoFramework Documentation",
    "keywords": "Class DebugLoggerFactory Provides a simple Debugger logger Inheritance Object DebugLoggerFactory Implements ILoggerFactory IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Logging.Debug Assembly : nanoFramework.Logging.dll Syntax public class DebugLoggerFactory : ILoggerFactory, IDisposable Methods | Improve this Doc View Source CreateLogger(String) Creates a new ILogger instance. Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description String categoryName The category name for messages produced by the logger. Returns Type Description ILogger The ILogger . | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements ILoggerFactory IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Logging.Debug.html": {
    "href": "api/nanoFramework.Logging.Debug.html",
    "title": "Namespace nanoFramework.Logging.Debug | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Logging.Debug Classes DebugLogger A logger that prints to the debug console DebugLoggerFactory Provides a simple Debugger logger"
  },
  "api/nanoFramework.Logging.html": {
    "href": "api/nanoFramework.Logging.html",
    "title": "Namespace nanoFramework.Logging | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Logging Classes LogDispatcher This class contains static members that provide log support. Interfaces IMessageFormatter Provide the skeleton for a Message Formatter logger"
  },
  "api/nanoFramework.Logging.IMessageFormatter.html": {
    "href": "api/nanoFramework.Logging.IMessageFormatter.html",
    "title": "Interface IMessageFormatter | nanoFramework Documentation",
    "keywords": "Interface IMessageFormatter Provide the skeleton for a Message Formatter logger Namespace : nanoFramework.Logging Assembly : nanoFramework.Logging.dll Syntax public interface IMessageFormatter Methods | Improve this Doc View Source MessageFormatter(String, LogLevel, EventId, String, Exception) The function to format the message Declaration string MessageFormatter(string className, LogLevel logLevel, EventId eventId, string state, Exception exception) Parameters Type Name Description String className The name of the logger LogLevel logLevel The log level EventId eventId The event id String state The message itself Exception exception The exception Returns Type Description String A formatted string Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Logging.LogDispatcher.html": {
    "href": "api/nanoFramework.Logging.LogDispatcher.html",
    "title": "Class LogDispatcher | nanoFramework Documentation",
    "keywords": "Class LogDispatcher This class contains static members that provide log support. Inheritance Object LogDispatcher Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Logging Assembly : nanoFramework.Logging.dll Syntax public static class LogDispatcher Properties | Improve this Doc View Source LoggerFactory The default logger factory for the whole assembly. If this is null (the default), logging is disabled Declaration public static ILoggerFactory LoggerFactory { get; set; } Property Value Type Description ILoggerFactory Methods | Improve this Doc View Source GetCurrentClassLogger(Object) Gets a logger with the name of the current class Declaration public static ILogger GetCurrentClassLogger(this object currentClass) Parameters Type Name Description Object currentClass The class whose logger shall be retrieved Returns Type Description ILogger A ILogger instance | Improve this Doc View Source GetLogger(String) Gets a logger with the given name Declaration public static ILogger GetLogger(string loggerName) Parameters Type Name Description String loggerName Name of the logger Returns Type Description ILogger A reference to a ILogger ."
  },
  "api/nanoFramework.Logging.Serial.html": {
    "href": "api/nanoFramework.Logging.Serial.html",
    "title": "Namespace nanoFramework.Logging.Serial | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Logging.Serial Classes SerialLogger A logger that outputs to a . SerialLoggerFactory Provides a simple Serial Device logger"
  },
  "api/nanoFramework.Logging.Serial.SerialLogger.html": {
    "href": "api/nanoFramework.Logging.Serial.SerialLogger.html",
    "title": "Class SerialLogger | nanoFramework Documentation",
    "keywords": "Class SerialLogger A logger that outputs to a . Inheritance Object SerialLogger Namespace : nanoFramework.Logging.Serial Assembly : nanoFramework.Logging.Serial.dll Syntax public class SerialLogger : ILogger Constructors | Improve this Doc View Source SerialLogger(ref SerialPort, String) Creates a new instance of the SerialLogger Declaration public SerialLogger(ref SerialPort serialDevice, string loggerName) Parameters Type Name Description SerialPort serialDevice The serial port to use String loggerName The logger name Properties | Improve this Doc View Source LoggerName Name of the logger Declaration public string LoggerName { get; } Property Value Type Description String | Improve this Doc View Source MinLogLevel Sets the minimum log level Declaration public LogLevel MinLogLevel { get; set; } Property Value Type Description LogLevel | Improve this Doc View Source SerialPort Name of the serial device Declaration public SerialPort SerialPort { get; } Property Value Type Description SerialPort Methods | Improve this Doc View Source IsEnabled(LogLevel) Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Returns Type Description Boolean | Improve this Doc View Source Log(LogLevel, EventId, String, Exception, MethodInfo) Declaration public void Log(LogLevel logLevel, EventId eventId, string state, Exception exception, MethodInfo format) Parameters Type Name Description LogLevel logLevel EventId eventId String state Exception exception MethodInfo format Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Logging.Serial.SerialLoggerFactory.html": {
    "href": "api/nanoFramework.Logging.Serial.SerialLoggerFactory.html",
    "title": "Class SerialLoggerFactory | nanoFramework Documentation",
    "keywords": "Class SerialLoggerFactory Provides a simple Serial Device logger Inheritance Object SerialLoggerFactory Namespace : nanoFramework.Logging.Serial Assembly : nanoFramework.Logging.Serial.dll Syntax public class SerialLoggerFactory : ILoggerFactory Constructors | Improve this Doc View Source SerialLoggerFactory(String, Int32, UInt16, Parity, StopBits, Handshake) Create a new instance of SerialLoggerFactory from a . Declaration public SerialLoggerFactory(string comPort, int baudRate = 9600, ushort dataBits = 8, Parity parity = Parity.None, StopBits stopBits = StopBits.One, Handshake handshake = Handshake.None) Parameters Type Name Description String comPort Int32 baudRate UInt16 dataBits Parity parity StopBits stopBits Handshake handshake Methods | Improve this Doc View Source CreateLogger(String) Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description String categoryName Returns Type Description ILogger | Improve this Doc View Source Dispose() Declaration public void Dispose() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Logging.Stream.html": {
    "href": "api/nanoFramework.Logging.Stream.html",
    "title": "Namespace nanoFramework.Logging.Stream | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Logging.Stream Classes StreamLogger A logger that outputs to a nanoFramework.Logging.Stream . StreamLoggerFactory Provides a simple Stream logger"
  },
  "api/nanoFramework.Logging.Stream.StreamLogger.html": {
    "href": "api/nanoFramework.Logging.Stream.StreamLogger.html",
    "title": "Class StreamLogger | nanoFramework Documentation",
    "keywords": "Class StreamLogger A logger that outputs to a nanoFramework.Logging.Stream . Inheritance Object StreamLogger Namespace : nanoFramework.Logging.Stream Assembly : nanoFramework.Logging.Stream.dll Syntax public class StreamLogger : ILogger Constructors | Improve this Doc View Source StreamLogger(Stream, String) Creates a new instance of the Declaration public StreamLogger(Stream stream, string loggerName) Parameters Type Name Description Stream stream Stream to output the log to. String loggerName The logger name Properties | Improve this Doc View Source BaseStream Name of the logger Declaration public Stream BaseStream { get; } Property Value Type Description Stream | Improve this Doc View Source LoggerName Name of the logger Declaration public string LoggerName { get; } Property Value Type Description String | Improve this Doc View Source MinLogLevel Sets the minimum log level Declaration public LogLevel MinLogLevel { get; set; } Property Value Type Description LogLevel Methods | Improve this Doc View Source IsEnabled(LogLevel) Declaration public bool IsEnabled(LogLevel logLevel) Parameters Type Name Description LogLevel logLevel Returns Type Description Boolean | Improve this Doc View Source Log(LogLevel, EventId, String, Exception, MethodInfo) Declaration public void Log(LogLevel logLevel, EventId eventId, string state, Exception exception, MethodInfo format) Parameters Type Name Description LogLevel logLevel EventId eventId String state Exception exception MethodInfo format Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Logging.Stream.StreamLoggerFactory.html": {
    "href": "api/nanoFramework.Logging.Stream.StreamLoggerFactory.html",
    "title": "Class StreamLoggerFactory | nanoFramework Documentation",
    "keywords": "Class StreamLoggerFactory Provides a simple Stream logger Inheritance Object StreamLoggerFactory Namespace : nanoFramework.Logging.Stream Assembly : nanoFramework.Logging.Stream.dll Syntax public class StreamLoggerFactory : ILoggerFactory Constructors | Improve this Doc View Source StreamLoggerFactory(Stream) Create a new instance of StreamLoggerFactory from a nanoFramework.Logging.Stream . Declaration public StreamLoggerFactory(Stream stream) Parameters Type Name Description Stream stream The stream | Improve this Doc View Source StreamLoggerFactory(String) Create a new instance of Stream Logger Factory from a file Declaration public StreamLoggerFactory(string fileName) Parameters Type Name Description String fileName Methods | Improve this Doc View Source CreateLogger(String) Declaration public ILogger CreateLogger(string categoryName) Parameters Type Name Description String categoryName Returns Type Description ILogger | Improve this Doc View Source Dispose() Declaration public void Dispose() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Exceptions.html": {
    "href": "api/nanoFramework.M2Mqtt.Exceptions.html",
    "title": "Namespace nanoFramework.M2Mqtt.Exceptions | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.M2Mqtt.Exceptions Classes MqttClientException MQTT client exception MqttCommunicationException Exception due to error communication with broker on socket MqttConnectionException Connection to the broker exception MqttTimeoutException Timeout on receiving from broker exception Enums MqttClientErrorCode MQTT client error code"
  },
  "api/nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.html": {
    "href": "api/nanoFramework.M2Mqtt.Exceptions.MqttClientErrorCode.html",
    "title": "Enum MqttClientErrorCode | nanoFramework Documentation",
    "keywords": "Enum MqttClientErrorCode MQTT client error code Namespace : nanoFramework.M2Mqtt.Exceptions Assembly : nanoFramework.M2Mqtt.dll Syntax public enum MqttClientErrorCode Fields Name Description InflightQueueFull Inflight queue is full InvalidClientId Invalid client id InvalidConnectFlags Invalid connect flags received InvalidFlagBits Invalid flag bits received InvalidProtocolName Invalid protocol name KeepAliveWrong Keep alive period too large QosLevelsEmpty Qos levels list empty for subscribe QosNotAllowed QoS level not allowed TopicLength Topic length wrong TopicsEmpty Topics list empty for subscribe TopicsQosLevelsNotMatch Topics / Qos Levels not match in subscribe TopicWildcard Topic contains wildcards WillWrong Will error (topic, message or QoS level) WrongBrokerMessage Wrong message from broker WrongMessageId Wrong Message Id Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.M2Mqtt.Exceptions.MqttClientException.html": {
    "href": "api/nanoFramework.M2Mqtt.Exceptions.MqttClientException.html",
    "title": "Class MqttClientException | nanoFramework Documentation",
    "keywords": "Class MqttClientException MQTT client exception Inheritance Object Exception MqttClientException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Exceptions Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttClientException : Exception Constructors | Improve this Doc View Source MqttClientException(MqttClientErrorCode) Constructor Declaration public MqttClientException(MqttClientErrorCode errorCode) Parameters Type Name Description MqttClientErrorCode errorCode Error code Properties | Improve this Doc View Source ErrorCode Error code Declaration public MqttClientErrorCode ErrorCode { get; set; } Property Value Type Description MqttClientErrorCode Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Exceptions.MqttCommunicationException.html": {
    "href": "api/nanoFramework.M2Mqtt.Exceptions.MqttCommunicationException.html",
    "title": "Class MqttCommunicationException | nanoFramework Documentation",
    "keywords": "Class MqttCommunicationException Exception due to error communication with broker on socket Inheritance Object Exception MqttCommunicationException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Exceptions Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttCommunicationException : Exception Constructors | Improve this Doc View Source MqttCommunicationException() Default constructor Declaration public MqttCommunicationException() | Improve this Doc View Source MqttCommunicationException(Exception) Constructor Declaration public MqttCommunicationException(Exception e) Parameters Type Name Description Exception e Inner Exception Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Exceptions.MqttConnectionException.html": {
    "href": "api/nanoFramework.M2Mqtt.Exceptions.MqttConnectionException.html",
    "title": "Class MqttConnectionException | nanoFramework Documentation",
    "keywords": "Class MqttConnectionException Connection to the broker exception Inheritance Object Exception MqttConnectionException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Exceptions Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttConnectionException : Exception Constructors | Improve this Doc View Source MqttConnectionException(String, Exception) Connection to the broker exception Declaration public MqttConnectionException(string message, Exception innerException) Parameters Type Name Description String message A friendly message of the exception that occurred Exception innerException Detail on why the exception occurred Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Exceptions.MqttTimeoutException.html": {
    "href": "api/nanoFramework.M2Mqtt.Exceptions.MqttTimeoutException.html",
    "title": "Class MqttTimeoutException | nanoFramework Documentation",
    "keywords": "Class MqttTimeoutException Timeout on receiving from broker exception Inheritance Object Exception MqttTimeoutException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Exceptions Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttTimeoutException : Exception Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Fx.html": {
    "href": "api/nanoFramework.M2Mqtt.Fx.html",
    "title": "Class Fx | nanoFramework Documentation",
    "keywords": "Class Fx Support methods for specific framework Inheritance Object Fx Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public static class Fx Methods | Improve this Doc View Source SleepThread(Int32) Puts the thread to sleep Declaration public static void SleepThread(int millisecondsTimeout) Parameters Type Name Description Int32 millisecondsTimeout Timeout in Milliseconds | Improve this Doc View Source StartThread(ThreadStart) Starts the thread Declaration public static void StartThread(ThreadStart threadStart) Parameters Type Name Description ThreadStart threadStart Thread to start"
  },
  "api/nanoFramework.M2Mqtt.html": {
    "href": "api/nanoFramework.M2Mqtt.html",
    "title": "Namespace nanoFramework.M2Mqtt | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.M2Mqtt Classes Fx Support methods for specific framework IPAddressUtility IPAddress Utility class MqttClient MQTT Client MqttNetworkChannel Channel to communicate over the network MqttSettings Settings class for the MQTT broker MqttSslUtility MQTT SSL utility class Interfaces IMqttNetworkChannel Interface for channel under MQTT library Enums MqttProtocolVersion MQTT protocol version MqttSslProtocols Supported SSL/TLS protocol versions Delegates MqttClient.ConnectionClosedEventHandler Delegate that defines event handler for client/peer disconnection MqttClient.ConnectionClosedRequestEventHandler Delegate that defines event handler for server disconnection request MqttClient.ConnectionOpenedEventHandler Delegate that defines event handler for unsubscribed topic MqttClient.MqttMsgAuthenticationEventHandler Delegate that defines event handler for authentication topic, v5.0 only MqttClient.MqttMsgPublishedEventHandler Delegate that defines event handler for published message MqttClient.MqttMsgPublishEventHandler Delegate that defines event handler for PUBLISH message received MqttClient.MqttMsgSubscribedEventHandler Delegate that defines event handler for subscribed topic MqttClient.MqttMsgUnsubscribedEventHandler Delegate that defines event handler for unsubscribed topic"
  },
  "api/nanoFramework.M2Mqtt.IMqttNetworkChannel.html": {
    "href": "api/nanoFramework.M2Mqtt.IMqttNetworkChannel.html",
    "title": "Interface IMqttNetworkChannel | nanoFramework Documentation",
    "keywords": "Interface IMqttNetworkChannel Interface for channel under MQTT library Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public interface IMqttNetworkChannel Properties | Improve this Doc View Source DataAvailable Data available on channel Declaration bool DataAvailable { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Accept() Accept client connection Declaration void Accept() | Improve this Doc View Source Close() Close the network channel Declaration void Close() | Improve this Doc View Source Connect() Connect to remote server Declaration void Connect() | Improve this Doc View Source Receive(Byte[]) Receive data from the network channel Declaration int Receive(byte[] buffer) Parameters Type Name Description Byte [] buffer Data buffer for receiving data Returns Type Description Int32 Number of bytes received | Improve this Doc View Source Receive(Byte[], Int32) Receive data from the network channel with a specified timeout Declaration int Receive(byte[] buffer, int timeout) Parameters Type Name Description Byte [] buffer Data buffer for receiving data Int32 timeout Timeout on receiving (in milliseconds) Returns Type Description Int32 Number of bytes received | Improve this Doc View Source Send(Byte[]) Send data on the network channel to the broker Declaration int Send(byte[] buffer) Parameters Type Name Description Byte [] buffer Data buffer to send Returns Type Description Int32 Number of byte sent Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Internal.html": {
    "href": "api/nanoFramework.M2Mqtt.Internal.html",
    "title": "Namespace nanoFramework.M2Mqtt.Internal | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.M2Mqtt.Internal Classes InternalEvent Generic internal event for dispatching MsgInternalEvent Internal event with a message MsgPublishedInternalEvent Internal event for a published message"
  },
  "api/nanoFramework.M2Mqtt.Internal.InternalEvent.html": {
    "href": "api/nanoFramework.M2Mqtt.Internal.InternalEvent.html",
    "title": "Class InternalEvent | nanoFramework Documentation",
    "keywords": "Class InternalEvent Generic internal event for dispatching Inheritance Object InternalEvent MsgInternalEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Internal Assembly : nanoFramework.M2Mqtt.dll Syntax public abstract class InternalEvent Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Internal.MsgInternalEvent.html": {
    "href": "api/nanoFramework.M2Mqtt.Internal.MsgInternalEvent.html",
    "title": "Class MsgInternalEvent | nanoFramework Documentation",
    "keywords": "Class MsgInternalEvent Internal event with a message Inheritance Object InternalEvent MsgInternalEvent MsgPublishedInternalEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Internal Assembly : nanoFramework.M2Mqtt.dll Syntax public class MsgInternalEvent : InternalEvent Constructors | Improve this Doc View Source MsgInternalEvent(MqttMsgBase) Constructor Declaration public MsgInternalEvent(MqttMsgBase msg) Parameters Type Name Description MqttMsgBase msg Related message Properties | Improve this Doc View Source Message Related message Declaration public MqttMsgBase Message { get; set; } Property Value Type Description MqttMsgBase Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Internal.MsgPublishedInternalEvent.html": {
    "href": "api/nanoFramework.M2Mqtt.Internal.MsgPublishedInternalEvent.html",
    "title": "Class MsgPublishedInternalEvent | nanoFramework Documentation",
    "keywords": "Class MsgPublishedInternalEvent Internal event for a published message Inheritance Object InternalEvent MsgInternalEvent MsgPublishedInternalEvent Inherited Members MsgInternalEvent.Message Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Internal Assembly : nanoFramework.M2Mqtt.dll Syntax public class MsgPublishedInternalEvent : MsgInternalEvent Constructors | Improve this Doc View Source MsgPublishedInternalEvent(MqttMsgBase, Boolean) Constructor Declaration public MsgPublishedInternalEvent(MqttMsgBase msg, bool isPublished) Parameters Type Name Description MqttMsgBase msg Message published Boolean isPublished Publish flag Properties | Improve this Doc View Source IsPublished Message published (or failed due to retries) Declaration public bool IsPublished { get; } Property Value Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.IPAddressUtility.html": {
    "href": "api/nanoFramework.M2Mqtt.IPAddressUtility.html",
    "title": "Class IPAddressUtility | nanoFramework Documentation",
    "keywords": "Class IPAddressUtility IPAddress Utility class Inheritance Object IPAddressUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public static class IPAddressUtility Methods | Improve this Doc View Source GetAddressFamily(IPAddress) Return AddressFamily for the IP address Declaration public static AddressFamily GetAddressFamily(this IPAddress ipAddress) Parameters Type Name Description IPAddress ipAddress IP address to check Returns Type Description AddressFamily Address family"
  },
  "api/nanoFramework.M2Mqtt.Messages.ConnectionClosedRequestEventArgs.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.ConnectionClosedRequestEventArgs.html",
    "title": "Class ConnectionClosedRequestEventArgs | nanoFramework Documentation",
    "keywords": "Class ConnectionClosedRequestEventArgs Event Args class for DISCONNECT message received from server Inheritance Object EventArgs ConnectionClosedRequestEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class ConnectionClosedRequestEventArgs : EventArgs Constructors | Improve this Doc View Source ConnectionClosedRequestEventArgs(MqttMsgDisconnect) Constructor Declaration public ConnectionClosedRequestEventArgs(MqttMsgDisconnect disconnect) Parameters Type Name Description MqttMsgDisconnect disconnect DISCONNECT message received from client Properties | Improve this Doc View Source Message Message received from client Declaration public MqttMsgDisconnect Message { get; } Property Value Type Description MqttMsgDisconnect Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.ConnectionOpenedEventArgs.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.ConnectionOpenedEventArgs.html",
    "title": "Class ConnectionOpenedEventArgs | nanoFramework Documentation",
    "keywords": "Class ConnectionOpenedEventArgs Event Args class for CONNECT message received from client Inheritance Object EventArgs ConnectionOpenedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class ConnectionOpenedEventArgs : EventArgs Constructors | Improve this Doc View Source ConnectionOpenedEventArgs(MqttMsgConnack) Constructor Declaration public ConnectionOpenedEventArgs(MqttMsgConnack connact) Parameters Type Name Description MqttMsgConnack connact CONNECT message received from client Properties | Improve this Doc View Source Message Message received from client Declaration public MqttMsgConnack Message { get; } Property Value Type Description MqttMsgConnack Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.html",
    "title": "Namespace nanoFramework.M2Mqtt.Messages | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.M2Mqtt.Messages Classes ConnectionClosedRequestEventArgs Event Args class for DISCONNECT message received from server ConnectionOpenedEventArgs Event Args class for CONNECT message received from client MqttMsgAuthentication Class for AUTH message from broker to client or client to broker as part of an extended authentication exchange, such as challenge / response authentication. MqttMsgAuthenticationEventArgs Event Args class for CONNECT message received from client MqttMsgBase Base class for all MQTT messages MqttMsgConnack Class for CONNACK message from broker to client MqttMsgConnect Class for CONNECT message from client to broker MqttMsgConnectEventArgs Event Args class for CONNECT message received from client MqttMsgContext Context for MQTT message MqttMsgDisconnect Class for DISCONNECT message from client to broker MqttMsgPingReq Class for PINGREQ message from client to broker MqttMsgPingResp Class for PINGRESP message from client to broker MqttMsgPuback Class for PUBACK message from broker to client MqttMsgPubcomp Class for PUBCOMP message from broker to client MqttMsgPublish Class for PUBLISH message from client to broker MqttMsgPublishedEventArgs Event Args class for published message MqttMsgPublishEventArgs Event Args class for PUBLISH message received from broker MqttMsgPubrec Class for PUBREC message from broker to client MqttMsgPubrel Class for PUBREL message from client top broker MqttMsgSuback Class for SUBACK message from broker to client MqttMsgSubscribe Class for SUBSCRIBE message from client to broker MqttMsgSubscribedEventArgs Event Args class for subscribed topics MqttMsgSubscribeEventArgs Event Args class for subscribe request on topics MqttMsgUnsuback Class for UNSUBACK message from broker to client MqttMsgUnsubscribe Class for UNSUBSCRIBE message from client to broker MqttMsgUnsubscribedEventArgs Event Args class for unsubscribed topic MqttMsgUnsubscribeEventArgs Event Args class for unsubscribe request on topics UserProperty A user property is a key value string pair, v5.0 only Enums MqttMessageType MQTT Message Type MqttMsgFlow Flow of the message MqttMsgState MQTT message state MqttQoSLevel MQTT Quality of Service Level MqttReasonCode A Reason Code is a one byte unsigned value that indicates the result of an operation. Reason Codes less than 0x80 indicate successful completion of an operation. The normal Reason Code for success is 0. Reason Code values of 0x80 or greater indicate failure. MqttRetainHandeling Retain Handling option. This option specifies whether retained messages are sent when the subscription is established. This does not affect the sending of retained messages at any point after the subscribe. If there are no retained messages matching the Topic Filter, all of these values act the same."
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMessageType.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMessageType.html",
    "title": "Enum MqttMessageType | nanoFramework Documentation",
    "keywords": "Enum MqttMessageType MQTT Message Type Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public enum MqttMessageType Fields Name Description Authentication Authentication exchange Connect Connection request ConnectAck Connect acknowledgment Disconnect Disconnect notification PingRequest PING request PingResponse PING response Publish Publish message PublishAck Publish acknowledgment (QoS 1) PublishComplete Publish complete (QoS 2 delivery part 3) PublishReceived Publish received (QoS 2 delivery part 1) PublishRelease Publish release (QoS 2 delivery part 2) Subscribe Subscribe request SubscribeAck Subscribe acknowledgment Unsubscribe Unsubscribe request UnsubscribeAck Unsubscribe acknowledgment Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgAuthentication.html",
    "title": "Class MqttMsgAuthentication | nanoFramework Documentation",
    "keywords": "Class MqttMsgAuthentication Class for AUTH message from broker to client or client to broker as part of an extended authentication exchange, such as challenge / response authentication. Inheritance Object MqttMsgBase MqttMsgAuthentication Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgAuthentication : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgAuthentication() Constructor Declaration public MqttMsgAuthentication() Properties | Improve this Doc View Source AuthenticationData Authentication Data, v5.0 only Declaration public byte[] AuthenticationData { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source AuthenticationMethod Authentication Method, v5.0 only Declaration public string AuthenticationMethod { get; set; } Property Value Type Description String | Improve this Doc View Source Reason The Reason as a string, v5.0 only Declaration public string Reason { get; set; } Property Value Type Description String | Improve this Doc View Source ReasonCode Return Code, v5.0 only Declaration public MqttReasonCode ReasonCode { get; set; } Property Value Type Description MqttReasonCode Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a PUBREC message Declaration public static MqttMsgAuthentication Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgAuthentication PUBREC message instance Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgAuthenticationEventArgs.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgAuthenticationEventArgs.html",
    "title": "Class MqttMsgAuthenticationEventArgs | nanoFramework Documentation",
    "keywords": "Class MqttMsgAuthenticationEventArgs Event Args class for CONNECT message received from client Inheritance Object EventArgs MqttMsgAuthenticationEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgAuthenticationEventArgs : EventArgs Constructors | Improve this Doc View Source MqttMsgAuthenticationEventArgs(MqttMsgAuthentication) Constructor Declaration public MqttMsgAuthenticationEventArgs(MqttMsgAuthentication authentication) Parameters Type Name Description MqttMsgAuthentication authentication CONNECT message received from client Properties | Improve this Doc View Source Message Message received from client Declaration public MqttMsgAuthentication Message { get; } Property Value Type Description MqttMsgAuthentication Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgBase.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgBase.html",
    "title": "Class MqttMsgBase | nanoFramework Documentation",
    "keywords": "Class MqttMsgBase Base class for all MQTT messages Inheritance Object MqttMsgBase MqttMsgAuthentication MqttMsgConnack MqttMsgConnect MqttMsgDisconnect MqttMsgPingReq MqttMsgPingResp MqttMsgPuback MqttMsgPubcomp MqttMsgPublish MqttMsgPubrec MqttMsgPubrel MqttMsgSuback MqttMsgSubscribe MqttMsgUnsuback MqttMsgUnsubscribe Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public abstract class MqttMsgBase Properties | Improve this Doc View Source DupFlag Duplicate message flag Declaration public bool DupFlag { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MaximumPacketSize Maximum Packet Size, v5.0 only Declaration public uint MaximumPacketSize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source MessageId Message identifier for the message Declaration public ushort MessageId { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source QosLevel Quality of Service level Declaration public MqttQoSLevel QosLevel { get; set; } Property Value Type Description MqttQoSLevel | Improve this Doc View Source Retain Retain message flag Declaration public bool Retain { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Type Message type Declaration public MqttMessageType Type { get; set; } Property Value Type Description MqttMessageType | Improve this Doc View Source UserProperties User Property, v5.0 only Declaration public ArrayList UserProperties { get; } Property Value Type Description ArrayList Methods | Improve this Doc View Source DecodeVariableByte(IMqttNetworkChannel) Decode remaining length reading bytes from socket Declaration protected static int DecodeVariableByte(IMqttNetworkChannel channel) Parameters Type Name Description IMqttNetworkChannel channel Channel from reading bytes Returns Type Description Int32 Decoded remaining length | Improve this Doc View Source EncodeVariableByte(Int32, Byte[], Int32) Encode remaining length and insert it into message buffer Declaration protected int EncodeVariableByte(int remainingLength, byte[] buffer, int index) Parameters Type Name Description Int32 remainingLength Remaining length value to encode Byte [] buffer Message buffer for inserting encoded value Int32 index Index from which insert encoded value into buffer Returns Type Description Int32 Index updated | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns message bytes rapresentation Declaration public abstract byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion Protocol version Returns Type Description Byte [] Bytes rapresentation Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgConnack.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgConnack.html",
    "title": "Class MqttMsgConnack | nanoFramework Documentation",
    "keywords": "Class MqttMsgConnack Class for CONNACK message from broker to client Inheritance Object MqttMsgBase MqttMsgConnack Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgConnack : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgConnack() Constructor Declaration public MqttMsgConnack() Properties | Improve this Doc View Source AssignedClientIdentifier The client ID to use to connect to the server. This must replace the initial Client ID used for the connection, v5.0 only Declaration public string AssignedClientIdentifier { get; set; } Property Value Type Description String | Improve this Doc View Source AuthenticationData Authentication Data, v5.0 only Declaration public byte[] AuthenticationData { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source AuthenticationMethod Authentication Method, v5.0 only Declaration public string AuthenticationMethod { get; set; } Property Value Type Description String | Improve this Doc View Source MaximumQoS True if there is a maximum QoS, v5.0 only Declaration public bool MaximumQoS { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Reason The Reason as a string, v5.0 only Declaration public string Reason { get; set; } Property Value Type Description String | Improve this Doc View Source ReceiveMaximum Receive Maximum, v5.0 only Declaration public ushort ReceiveMaximum { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source ResponseInformation Used as the basis for creating a Response Topic, v5.0 only Declaration public string ResponseInformation { get; set; } Property Value Type Description String | Improve this Doc View Source RetainAvailable True if retain is available, v5.0 only Declaration public bool RetainAvailable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ReturnCode Return Code Declaration public MqttReasonCode ReturnCode { get; set; } Property Value Type Description MqttReasonCode | Improve this Doc View Source ServerKeepAlive Use this value instead of the one present in the client sent on Connect, v5.0 only Declaration public ushort ServerKeepAlive { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source ServerReference Used by the Client to identify another Server to use, v5.0 only Declaration public string ServerReference { get; set; } Property Value Type Description String | Improve this Doc View Source SessionExpiryInterval Session Expiry Interval, v5.0 only Declaration public uint SessionExpiryInterval { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source SessionPresent Session present flag Declaration public bool SessionPresent { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SharedSubscriptionAvailable True if Shared Subscription are Available on the server, v5.0 only Declaration public bool SharedSubscriptionAvailable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SubscriptionIdentifiersAvailable True if Subscription Identifiers are Available on the server, v5.0 only Declaration public bool SubscriptionIdentifiersAvailable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TopicAliasMaximum TopicAliasMaximum, v5.0 only Declaration public ushort TopicAliasMaximum { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source WildcardSubscriptionAvailable True if Wildcard Subscription are Available on the server, v5.0 only Declaration public bool WildcardSubscriptionAvailable { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a CONNACK message Declaration public static MqttMsgConnack Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgConnack CONNACK message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgConnect.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgConnect.html",
    "title": "Class MqttMsgConnect | nanoFramework Documentation",
    "keywords": "Class MqttMsgConnect Class for CONNECT message from client to broker Inheritance Object MqttMsgBase MqttMsgConnect Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgConnect : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgConnect() Constructor Declaration public MqttMsgConnect() | Improve this Doc View Source MqttMsgConnect(String) Constructor Declaration public MqttMsgConnect(string clientId) Parameters Type Name Description String clientId Client identifier | Improve this Doc View Source MqttMsgConnect(String, String, String, Boolean, MqttQoSLevel, Boolean, String, String, Boolean, UInt16, MqttProtocolVersion) Constructor Declaration public MqttMsgConnect(string clientId, string username, string password, bool willRetain, MqttQoSLevel willQosLevel, bool willFlag, string willTopic, string willMessage, bool cleanSession, ushort keepAlivePeriod, MqttProtocolVersion protocolVersion) Parameters Type Name Description String clientId Client identifier String username Username String password Password Boolean willRetain Will retain flag MqttQoSLevel willQosLevel Will QOS level Boolean willFlag Will flag String willTopic Will topic String willMessage Will message Boolean cleanSession Clean sessione flag UInt16 keepAlivePeriod Keep alive period MqttProtocolVersion protocolVersion MQTT Protocol version Properties | Improve this Doc View Source AuthenticationData Authentication Data, v5.0 only Declaration public byte[] AuthenticationData { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source AuthenticationMethod Authentication Method, v5.0 only Declaration public string AuthenticationMethod { get; set; } Property Value Type Description String | Improve this Doc View Source CleanSession Clean session flag Declaration public bool CleanSession { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ClientId Client identifier Declaration public string ClientId { get; set; } Property Value Type Description String | Improve this Doc View Source KeepAlivePeriod Keep alive period Declaration public ushort KeepAlivePeriod { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Password Password Declaration public string Password { get; set; } Property Value Type Description String | Improve this Doc View Source ProtocolName Protocol name Declaration public string ProtocolName { get; set; } Property Value Type Description String | Improve this Doc View Source ProtocolVersion Protocol version Declaration public MqttProtocolVersion ProtocolVersion { get; set; } Property Value Type Description MqttProtocolVersion | Improve this Doc View Source ReceiveMaximum ReceiveMaximum, v5.0 only Declaration public ushort ReceiveMaximum { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source RequestProblemInformation Request Problem Information, v5.0 only Declaration public bool RequestProblemInformation { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RequestResponseInformation Request Response Information, v5.0 only Declaration public bool RequestResponseInformation { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SessionExpiryInterval Session Expiry Interval, v5.0 only Declaration public uint SessionExpiryInterval { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source TopicAliasMaximum TopicAliasMaximum, v5.0 only Declaration public ushort TopicAliasMaximum { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Username Username Declaration public string Username { get; set; } Property Value Type Description String | Improve this Doc View Source WillDelayInterval Will Delay Interval, v5.0 only Declaration public uint WillDelayInterval { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source WillFlag Will flag Declaration public bool WillFlag { get; set; } Property Value Type Description Boolean | Improve this Doc View Source WillMessage Will message Declaration public string WillMessage { get; set; } Property Value Type Description String | Improve this Doc View Source WillQosLevel Will QOS level Declaration public byte WillQosLevel { get; set; } Property Value Type Description Byte | Improve this Doc View Source WillRetain Will retain flag Declaration public bool WillRetain { get; set; } Property Value Type Description Boolean | Improve this Doc View Source WillTopic Will topic Declaration public string WillTopic { get; set; } Property Value Type Description String Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a CONNECT message Declaration public static MqttMsgConnect Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgConnect CONNECT message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgConnectEventArgs.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgConnectEventArgs.html",
    "title": "Class MqttMsgConnectEventArgs | nanoFramework Documentation",
    "keywords": "Class MqttMsgConnectEventArgs Event Args class for CONNECT message received from client Inheritance Object EventArgs MqttMsgConnectEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgConnectEventArgs : EventArgs Constructors | Improve this Doc View Source MqttMsgConnectEventArgs(MqttMsgConnect) Constructor Declaration public MqttMsgConnectEventArgs(MqttMsgConnect connect) Parameters Type Name Description MqttMsgConnect connect CONNECT message received from client Properties | Improve this Doc View Source Message Message received from client Declaration public MqttMsgConnect Message { get; } Property Value Type Description MqttMsgConnect Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgContext.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgContext.html",
    "title": "Class MqttMsgContext | nanoFramework Documentation",
    "keywords": "Class MqttMsgContext Context for MQTT message Inheritance Object MqttMsgContext Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgContext Properties | Improve this Doc View Source Attempt Attempt (for retry) Declaration public int Attempt { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Flow Flow of the message Declaration public MqttMsgFlow Flow { get; set; } Property Value Type Description MqttMsgFlow | Improve this Doc View Source Key Unique key Declaration public string Key { get; } Property Value Type Description String | Improve this Doc View Source Message MQTT message Declaration public MqttMsgBase Message { get; set; } Property Value Type Description MqttMsgBase | Improve this Doc View Source State MQTT message state Declaration public MqttMsgState State { get; set; } Property Value Type Description MqttMsgState | Improve this Doc View Source Timestamp Timestamp in ticks (for retry) Declaration public int Timestamp { get; set; } Property Value Type Description Int32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgDisconnect.html",
    "title": "Class MqttMsgDisconnect | nanoFramework Documentation",
    "keywords": "Class MqttMsgDisconnect Class for DISCONNECT message from client to broker Inheritance Object MqttMsgBase MqttMsgDisconnect Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgDisconnect : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgDisconnect() Constructor Declaration public MqttMsgDisconnect() Properties | Improve this Doc View Source Reason The Reason as a string, v5.0 only Declaration public string Reason { get; set; } Property Value Type Description String | Improve this Doc View Source ResonCode Reason Code, v5.0 only Declaration public MqttReasonCode ResonCode { get; set; } Property Value Type Description MqttReasonCode | Improve this Doc View Source ServerReference Used by the Client to identify another Server to use, v5.0 only Declaration public string ServerReference { get; set; } Property Value Type Description String | Improve this Doc View Source SessionExpiryInterval Session Expiry Interval, v5.0 only Declaration public uint SessionExpiryInterval { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a DISCONNECT message Declaration public static MqttMsgDisconnect Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgDisconnect DISCONNECT message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgFlow.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgFlow.html",
    "title": "Enum MqttMsgFlow | nanoFramework Documentation",
    "keywords": "Enum MqttMsgFlow Flow of the message Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public enum MqttMsgFlow Fields Name Description ToAcknowledge To acknowledge to publisher ToPublish To publish to subscribers Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgPingReq.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgPingReq.html",
    "title": "Class MqttMsgPingReq | nanoFramework Documentation",
    "keywords": "Class MqttMsgPingReq Class for PINGREQ message from client to broker Inheritance Object MqttMsgBase MqttMsgPingReq Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgPingReq : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgPingReq() Constructor Declaration public MqttMsgPingReq() Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a PINGREQ message Declaration public static MqttMsgPingReq Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgPingReq PINGREQ message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgPingResp.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgPingResp.html",
    "title": "Class MqttMsgPingResp | nanoFramework Documentation",
    "keywords": "Class MqttMsgPingResp Class for PINGRESP message from client to broker Inheritance Object MqttMsgBase MqttMsgPingResp Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgPingResp : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgPingResp() Constructor Declaration public MqttMsgPingResp() Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a PINGRESP message Declaration public static MqttMsgPingResp Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgPingResp PINGRESP message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgPuback.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgPuback.html",
    "title": "Class MqttMsgPuback | nanoFramework Documentation",
    "keywords": "Class MqttMsgPuback Class for PUBACK message from broker to client Inheritance Object MqttMsgBase MqttMsgPuback Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgPuback : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgPuback() Constructor Declaration public MqttMsgPuback() Properties | Improve this Doc View Source Reason The Reason as a string, v5.0 only Declaration public string Reason { get; set; } Property Value Type Description String | Improve this Doc View Source ReasonCode Return Code, v5.0 only Declaration public MqttReasonCode ReasonCode { get; set; } Property Value Type Description MqttReasonCode Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a PUBACK message Declaration public static MqttMsgPuback Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgPuback PUBACK message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgPubcomp.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgPubcomp.html",
    "title": "Class MqttMsgPubcomp | nanoFramework Documentation",
    "keywords": "Class MqttMsgPubcomp Class for PUBCOMP message from broker to client Inheritance Object MqttMsgBase MqttMsgPubcomp Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgPubcomp : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgPubcomp() Constructor Declaration public MqttMsgPubcomp() Properties | Improve this Doc View Source Reason The Reason as a string, v5.0 only Declaration public string Reason { get; set; } Property Value Type Description String | Improve this Doc View Source ReasonCode Return Code, v5.0 only Declaration public MqttReasonCode ReasonCode { get; set; } Property Value Type Description MqttReasonCode Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a PUBCOMP message Declaration public static MqttMsgPubcomp Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgPubcomp PUBCOMP message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgPublish.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgPublish.html",
    "title": "Class MqttMsgPublish | nanoFramework Documentation",
    "keywords": "Class MqttMsgPublish Class for PUBLISH message from client to broker Inheritance Object MqttMsgBase MqttMsgPublish Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgPublish : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgPublish() Constructor Declaration public MqttMsgPublish() | Improve this Doc View Source MqttMsgPublish(String, Byte[]) Constructor Declaration public MqttMsgPublish(string topic, byte[] message) Parameters Type Name Description String topic Message topic Byte [] message Message data | Improve this Doc View Source MqttMsgPublish(String, Byte[], Boolean, MqttQoSLevel, Boolean) Constructor Declaration public MqttMsgPublish(string topic, byte[] message, bool dupFlag, MqttQoSLevel qosLevel, bool retain) Parameters Type Name Description String topic Message topic Byte [] message Message data Boolean dupFlag Duplicate flag MqttQoSLevel qosLevel Quality of Service level Boolean retain Retain flag Properties | Improve this Doc View Source ContentType The content of the Application Message, v5.0 only Declaration public string ContentType { get; set; } Property Value Type Description String | Improve this Doc View Source CorrelationData The Correlation Data is used by the sender of the Request Message to identify which request the Response Message is for when it is received, v5.0 only Declaration public byte[] CorrelationData { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source IsPayloadUTF8 True if the payload is UTF8 encoded, v5.0 only Declaration public bool IsPayloadUTF8 { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Message Message data Declaration public byte[] Message { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source MessageExpiryInterval Message Expiry Interval. If the server did not managed to process it on time, the message must be deleted. Value is the lifetime of the Will Message in seconds and is sent as the Publication Expiry Interval when the Server publishes the Will Message. v5.0 only Declaration public uint MessageExpiryInterval { get; set; } Property Value Type Description UInt32 Remarks The value 0 is the default one, it means, it is not present | Improve this Doc View Source ResponseTopic Response Topic is used as the Topic Name for a response message, v5.0 only Declaration public string ResponseTopic { get; set; } Property Value Type Description String | Improve this Doc View Source SubscriptionIdentifier The Subscription Identifier can have the value of 1 to 268,435,455, v5.0 only Declaration public int SubscriptionIdentifier { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Topic Message topic Declaration public string Topic { get; set; } Property Value Type Description String | Improve this Doc View Source TopicAlias Used instead of the Topic to reduce size of the Publish packet, v5.0 only Declaration public ushort TopicAlias { get; set; } Property Value Type Description UInt16 Remarks The 0 value is not permitted. The client must not send value higher than the Topic Alias Maximum received in the Connack/Connect message. Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a PUBLISH message Declaration public static MqttMsgPublish Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgPublish PUBLISH message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgPublishedEventArgs.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgPublishedEventArgs.html",
    "title": "Class MqttMsgPublishedEventArgs | nanoFramework Documentation",
    "keywords": "Class MqttMsgPublishedEventArgs Event Args class for published message Inheritance Object EventArgs MqttMsgPublishedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgPublishedEventArgs : EventArgs Constructors | Improve this Doc View Source MqttMsgPublishedEventArgs(UInt16) Constructor (published message) Declaration public MqttMsgPublishedEventArgs(ushort messageId) Parameters Type Name Description UInt16 messageId Message identifier published | Improve this Doc View Source MqttMsgPublishedEventArgs(UInt16, Boolean) Constructor Declaration public MqttMsgPublishedEventArgs(ushort messageId, bool isPublished) Parameters Type Name Description UInt16 messageId Message identifier Boolean isPublished Publish flag Properties | Improve this Doc View Source IsPublished Message published (or failed due to retries) Declaration public bool IsPublished { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MessageId Message identifier Declaration public ushort MessageId { get; set; } Property Value Type Description UInt16 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgPublishEventArgs.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgPublishEventArgs.html",
    "title": "Class MqttMsgPublishEventArgs | nanoFramework Documentation",
    "keywords": "Class MqttMsgPublishEventArgs Event Args class for PUBLISH message received from broker Inheritance Object EventArgs MqttMsgPublishEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgPublishEventArgs : EventArgs Constructors | Improve this Doc View Source MqttMsgPublishEventArgs(String, Byte[], Boolean, MqttQoSLevel, Boolean) Constructor Declaration public MqttMsgPublishEventArgs(string topic, byte[] message, bool dupFlag, MqttQoSLevel qosLevel, bool retain) Parameters Type Name Description String topic Message topic Byte [] message Message data Boolean dupFlag Duplicate delivery flag MqttQoSLevel qosLevel Quality of Service level Boolean retain Retain flag Properties | Improve this Doc View Source DupFlag Duplicate message flag Declaration public bool DupFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source Message Message data Declaration public byte[] Message { get; } Property Value Type Description Byte [] | Improve this Doc View Source QosLevel Quality of Service level Declaration public MqttQoSLevel QosLevel { get; } Property Value Type Description MqttQoSLevel | Improve this Doc View Source Retain Retain message flag Declaration public bool Retain { get; } Property Value Type Description Boolean | Improve this Doc View Source Topic Message topic Declaration public string Topic { get; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgPubrec.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgPubrec.html",
    "title": "Class MqttMsgPubrec | nanoFramework Documentation",
    "keywords": "Class MqttMsgPubrec Class for PUBREC message from broker to client Inheritance Object MqttMsgBase MqttMsgPubrec Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgPubrec : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgPubrec() Constructor Declaration public MqttMsgPubrec() Properties | Improve this Doc View Source Reason The Reason as a string, v5.0 only Declaration public string Reason { get; set; } Property Value Type Description String | Improve this Doc View Source ReasonCode Return Code, v5.0 only Declaration public MqttReasonCode ReasonCode { get; set; } Property Value Type Description MqttReasonCode Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a PUBREC message Declaration public static MqttMsgPubrec Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgPubrec PUBREC message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgPubrel.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgPubrel.html",
    "title": "Class MqttMsgPubrel | nanoFramework Documentation",
    "keywords": "Class MqttMsgPubrel Class for PUBREL message from client top broker Inheritance Object MqttMsgBase MqttMsgPubrel Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgPubrel : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgPubrel() Constructor Declaration public MqttMsgPubrel() Properties | Improve this Doc View Source Reason The Reason as a string, v5.0 only Declaration public string Reason { get; set; } Property Value Type Description String | Improve this Doc View Source ReasonCode Return Code, v5.0 only Declaration public MqttReasonCode ReasonCode { get; set; } Property Value Type Description MqttReasonCode Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a PUBREL message Declaration public static MqttMsgPubrel Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgPubrel PUBREL message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgState.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgState.html",
    "title": "Enum MqttMsgState | nanoFramework Documentation",
    "keywords": "Enum MqttMsgState MQTT message state Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public enum MqttMsgState Fields Name Description QueuedQos0 QOS = 0, Message queued QueuedQos1 QOS = 1, Message queued QueuedQos2 QOS = 2, Message queued SendPuback QOS = 1, PUBLISH received, send PUBACK SendPubcomp QOS = 2, end second phase handshake send PUBCOMP SendPubrec QOS = 2, start first phase handshake send PUBREC SendPubrel QOS = 2, start second phase handshake send PUBREL SendSubscribe Send SUBSCRIBE message SendUnsubscribe Send UNSUBSCRIBE message WaitForAuthentication After CONNECT if Authentication Method is not empty, v5.0 only WaitForPuback QOS = 1, PUBLISH sent, wait for PUBACK WaitForPubcomp QOS = 2, PUBREL sent, wait for PUBCOMP WaitForPubrec QOS = 2, PUBLISH sent, wait for PUBREC WaitForPubrel QOS = 2, PUBREC sent, wait for PUBREL WaitForSuback (QOS = 1), SUBSCRIBE sent, wait for SUBACK WaitForUnsuback (QOS = 1), UNSUBSCRIBE sent, wait for UNSUBACK Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgSuback.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgSuback.html",
    "title": "Class MqttMsgSuback | nanoFramework Documentation",
    "keywords": "Class MqttMsgSuback Class for SUBACK message from broker to client Inheritance Object MqttMsgBase MqttMsgSuback Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgSuback : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgSuback() Constructor Declaration public MqttMsgSuback() Properties | Improve this Doc View Source GrantedQoSLevels List of granted QOS Levels Declaration public MqttQoSLevel[] GrantedQoSLevels { get; set; } Property Value Type Description MqttQoSLevel [] | Improve this Doc View Source Reason The Reason as a string, v5.0 only Declaration public string Reason { get; set; } Property Value Type Description String | Improve this Doc View Source ReasonCodes List of granted Reasons, v5.0 only Declaration public MqttReasonCode[] ReasonCodes { get; set; } Property Value Type Description MqttReasonCode [] Remarks In v5.0, replaces the GrantedQoSLevels, still the cast will be done in the GrantedQoSLevels. Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a SUBACK message Declaration public static MqttMsgSuback Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgSuback SUBACK message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgSubscribe.html",
    "title": "Class MqttMsgSubscribe | nanoFramework Documentation",
    "keywords": "Class MqttMsgSubscribe Class for SUBSCRIBE message from client to broker Inheritance Object MqttMsgBase MqttMsgSubscribe Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgSubscribe : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgSubscribe() Constructor Declaration public MqttMsgSubscribe() | Improve this Doc View Source MqttMsgSubscribe(String[], MqttQoSLevel[]) Constructor Declaration public MqttMsgSubscribe(string[] topics, MqttQoSLevel[] qosLevels) Parameters Type Name Description String [] topics List of topics to subscribe MqttQoSLevel [] qosLevels List of QOS Levels related to topics Properties | Improve this Doc View Source NoLocal If True, Application Messages MUST NOT be forwarded to a connection with a ClientID equal to the ClientID of the publishing connection, v5.0 only Declaration public bool NoLocal { get; set; } Property Value Type Description Boolean | Improve this Doc View Source QoSLevels List of QOS Levels related to topics Declaration public MqttQoSLevel[] QoSLevels { get; set; } Property Value Type Description MqttQoSLevel [] | Improve this Doc View Source RetainAsPublished If true, Application Messages forwarded using this subscription keep the RETAIN flag they were published with. If false, Application Messages forwarded using this subscription have the RETAIN flag set to 0 v5.0 only Declaration public bool RetainAsPublished { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RetainHandeling Retain Handling option. This option specifies whether retained messages are sent when the subscription is established, v5.0 only Declaration public MqttRetainHandeling RetainHandeling { get; set; } Property Value Type Description MqttRetainHandeling | Improve this Doc View Source SubscriptionIdentifier The Subscription Identifier can have the value of 1 to 268,435,455, v5.0 only Declaration public int SubscriptionIdentifier { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Topics List of topics to subscribe Declaration public string[] Topics { get; set; } Property Value Type Description String [] Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a SUBSCRIBE message Declaration public static MqttMsgSubscribe Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgSubscribe SUBSCRIBE message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgSubscribedEventArgs.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgSubscribedEventArgs.html",
    "title": "Class MqttMsgSubscribedEventArgs | nanoFramework Documentation",
    "keywords": "Class MqttMsgSubscribedEventArgs Event Args class for subscribed topics Inheritance Object EventArgs MqttMsgSubscribedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgSubscribedEventArgs : EventArgs Constructors | Improve this Doc View Source MqttMsgSubscribedEventArgs(UInt16, MqttQoSLevel[]) Constructor Declaration public MqttMsgSubscribedEventArgs(ushort messageId, MqttQoSLevel[] grantedQosLevels) Parameters Type Name Description UInt16 messageId Message identifier for subscribed topics MqttQoSLevel [] grantedQosLevels List of granted QOS Levels Properties | Improve this Doc View Source GrantedQoSLevels List of granted QOS Levels Declaration public MqttQoSLevel[] GrantedQoSLevels { get; } Property Value Type Description MqttQoSLevel [] | Improve this Doc View Source MessageId Message identifier Declaration public ushort MessageId { get; } Property Value Type Description UInt16 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgSubscribeEventArgs.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgSubscribeEventArgs.html",
    "title": "Class MqttMsgSubscribeEventArgs | nanoFramework Documentation",
    "keywords": "Class MqttMsgSubscribeEventArgs Event Args class for subscribe request on topics Inheritance Object EventArgs MqttMsgSubscribeEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgSubscribeEventArgs : EventArgs Constructors | Improve this Doc View Source MqttMsgSubscribeEventArgs(UInt16, String[], MqttQoSLevel[]) Constructor Declaration public MqttMsgSubscribeEventArgs(ushort messageId, string[] topics, MqttQoSLevel[] qosLevels) Parameters Type Name Description UInt16 messageId Message identifier for subscribe topics request String [] topics Topics requested to subscribe MqttQoSLevel [] qosLevels List of QOS Levels requested Properties | Improve this Doc View Source MessageId Message identifier Declaration public ushort MessageId { get; } Property Value Type Description UInt16 | Improve this Doc View Source QoSLevels List of QOS Levels requested Declaration public MqttQoSLevel[] QoSLevels { get; } Property Value Type Description MqttQoSLevel [] | Improve this Doc View Source Topics Topics requested to subscribe Declaration public string[] Topics { get; } Property Value Type Description String [] Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgUnsuback.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgUnsuback.html",
    "title": "Class MqttMsgUnsuback | nanoFramework Documentation",
    "keywords": "Class MqttMsgUnsuback Class for UNSUBACK message from broker to client Inheritance Object MqttMsgBase MqttMsgUnsuback Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgUnsuback : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgUnsuback() Constructor Declaration public MqttMsgUnsuback() Properties | Improve this Doc View Source Reason The Reason as a string, v5.0 only Declaration public string Reason { get; set; } Property Value Type Description String | Improve this Doc View Source ReasonCode Return Code, v5.0 only Declaration public MqttReasonCode ReasonCode { get; set; } Property Value Type Description MqttReasonCode Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a UNSUBACK message Declaration public static MqttMsgUnsuback Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgUnsuback UNSUBACK message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribe.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribe.html",
    "title": "Class MqttMsgUnsubscribe | nanoFramework Documentation",
    "keywords": "Class MqttMsgUnsubscribe Class for UNSUBSCRIBE message from client to broker Inheritance Object MqttMsgBase MqttMsgUnsubscribe Inherited Members MqttMsgBase.Type MqttMsgBase.DupFlag MqttMsgBase.QosLevel MqttMsgBase.Retain MqttMsgBase.MessageId MqttMsgBase.UserProperties MqttMsgBase.MaximumPacketSize MqttMsgBase.EncodeVariableByte(Int32, Byte[], Int32) MqttMsgBase.DecodeVariableByte(IMqttNetworkChannel) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgUnsubscribe : MqttMsgBase Constructors | Improve this Doc View Source MqttMsgUnsubscribe() Constructor Declaration public MqttMsgUnsubscribe() | Improve this Doc View Source MqttMsgUnsubscribe(String[]) Constructor Declaration public MqttMsgUnsubscribe(string[] topics) Parameters Type Name Description String [] topics List of topics to unsubscribe Properties | Improve this Doc View Source Topics List of topics to unsubscribe Declaration public string[] Topics { get; set; } Property Value Type Description String [] Methods | Improve this Doc View Source GetBytes(MqttProtocolVersion) Returns the bytes that represents the current object. Declaration public override byte[] GetBytes(MqttProtocolVersion protocolVersion) Parameters Type Name Description MqttProtocolVersion protocolVersion MQTT protocol version Returns Type Description Byte [] An array of bytes that represents the current object. Overrides MqttMsgBase.GetBytes(MqttProtocolVersion) | Improve this Doc View Source Parse(Byte, MqttProtocolVersion, IMqttNetworkChannel) Parse bytes for a UNSUBSCRIBE message Declaration public static MqttMsgUnsubscribe Parse(byte fixedHeaderFirstByte, MqttProtocolVersion protocolVersion, IMqttNetworkChannel channel) Parameters Type Name Description Byte fixedHeaderFirstByte First fixed header byte MqttProtocolVersion protocolVersion MQTT Protocol Version IMqttNetworkChannel channel Channel connected to the broker Returns Type Description MqttMsgUnsubscribe UNSUBSCRIBE message instance | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribedEventArgs.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribedEventArgs.html",
    "title": "Class MqttMsgUnsubscribedEventArgs | nanoFramework Documentation",
    "keywords": "Class MqttMsgUnsubscribedEventArgs Event Args class for unsubscribed topic Inheritance Object EventArgs MqttMsgUnsubscribedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgUnsubscribedEventArgs : EventArgs Constructors | Improve this Doc View Source MqttMsgUnsubscribedEventArgs(UInt16) Constructor Declaration public MqttMsgUnsubscribedEventArgs(ushort messageId) Parameters Type Name Description UInt16 messageId Message identifier for unsubscribed topic Properties | Improve this Doc View Source MessageId Message identifier Declaration public ushort MessageId { get; } Property Value Type Description UInt16 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribeEventArgs.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttMsgUnsubscribeEventArgs.html",
    "title": "Class MqttMsgUnsubscribeEventArgs | nanoFramework Documentation",
    "keywords": "Class MqttMsgUnsubscribeEventArgs Event Args class for unsubscribe request on topics Inheritance Object EventArgs MqttMsgUnsubscribeEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttMsgUnsubscribeEventArgs : EventArgs Constructors | Improve this Doc View Source MqttMsgUnsubscribeEventArgs(UInt16, String[]) Constructor Declaration public MqttMsgUnsubscribeEventArgs(ushort messageId, string[] topics) Parameters Type Name Description UInt16 messageId Message identifier for subscribed topics String [] topics Topics requested to subscribe Properties | Improve this Doc View Source MessageId Message identifier Declaration public ushort MessageId { get; } Property Value Type Description UInt16 | Improve this Doc View Source Topics Topics requested to subscribe Declaration public string[] Topics { get; } Property Value Type Description String [] Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttQoSLevel.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttQoSLevel.html",
    "title": "Enum MqttQoSLevel | nanoFramework Documentation",
    "keywords": "Enum MqttQoSLevel MQTT Quality of Service Level Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public enum MqttQoSLevel Fields Name Description AtLeastOnce QOS At Least Once AtMostOnce QOS At Most Once ExactlyOnce QOS Exactly Once GrantedFailure Subscribe only QOS Granted Failure [v3.1.1] Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttReasonCode.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttReasonCode.html",
    "title": "Enum MqttReasonCode | nanoFramework Documentation",
    "keywords": "Enum MqttReasonCode A Reason Code is a one byte unsigned value that indicates the result of an operation. Reason Codes less than 0x80 indicate successful completion of an operation. The normal Reason Code for success is 0. Reason Code values of 0x80 or greater indicate failure. Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public enum MqttReasonCode Fields Name Description AdministrativeAction Administrative action BadAuthenticationMethod Bad authentication method BadUserNameOrPassword Bad User Name or Password Banned Banned ClientIdentifierNotValid Client Identifier not valid ConnectionRateExceeded Connection rate exceeded ConnectionRefusedBadUserNameOrPassword The data in the user name or password is malformed, ConnectionRefusedIdentifierRejected The Client identifier is correct UTF-8 but not allowed by the Server, ConnectionRefusedNotAuthorized The Client is not authorized to connect, ConnectionRefusedServerUnavailable The Network Connection has been made but the MQTT service is unavailable, ConnectionRefusedUnacceptableProtocolVersion The Server does not support the level of the MQTT protocol requested by the Client, ContinueAuthentication Continue authentication DisconnectWithWillMessage Disconnect with Will Message GrantedQoS0 Granted QoS 0 GrantedQoS1 Granted QoS 1 GrantedQoS2 Granted QoS 2 ImplementationSpecificError Implementation specific error KeepAliveTimeout Keep Alive timeout MalformedPacket Malformed Packet MaximumConnectTime Maximum connect time MessageRateTooHigh Message rate too high NoMatchingSubscribers No matching subscribers NormalDisconnection Normal disconnection NoSubscriptionExisted No subscription existed NotAuthorized Not authorized PacketIdentifierInUse Packet Identifier in use PacketIdentifierNotFound Packet Identifier not found PacketTooLarge Packet too large PayloadFormatInvalid Payload format invalid ProtocolError Protocol Error QoSNotSupported QoS not supported QuotaExceeded Quota exceeded ReAuthenticate Re-authenticate ReceiveMaximumExceeded Receive Maximum exceeded RetainNotSupported Retain not supported ServerBusy Server busy ServerMoved Server moved ServerUnavailable Server unavailable ServeShuttingDown Server shutting down SessionTakenOver Session taken over SharedSubscriptionsNotSupported Shared Subscriptions not supported SubscriptionIdentifiersNotSupported Subscription Identifiers not supported Success Success TopicAliasInvalid Topic Alias invalid TopicFilterInvalid Topic Filter invalid TopicNameInvalid Topic Name invalid UnspecifiedError Unspecified error UnsupportedProtocolVersion Unsupported Protocol Version UseAnotherServer Use another server WildcardSubscriptionsNotSupported Wildcard Subscriptions not supported Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.M2Mqtt.Messages.MqttRetainHandeling.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.MqttRetainHandeling.html",
    "title": "Enum MqttRetainHandeling | nanoFramework Documentation",
    "keywords": "Enum MqttRetainHandeling Retain Handling option. This option specifies whether retained messages are sent when the subscription is established. This does not affect the sending of retained messages at any point after the subscribe. If there are no retained messages matching the Topic Filter, all of these values act the same. Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public enum MqttRetainHandeling Fields Name Description AllTime Send retained messages at the time of the subscribe NoRetain Do not send retained messages at the time of the subscribe SubscribeTimeOnly Send retained messages at subscribe only if the subscription does not currently exist Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.M2Mqtt.Messages.UserProperty.html": {
    "href": "api/nanoFramework.M2Mqtt.Messages.UserProperty.html",
    "title": "Class UserProperty | nanoFramework Documentation",
    "keywords": "Class UserProperty A user property is a key value string pair, v5.0 only Inheritance Object UserProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Messages Assembly : nanoFramework.M2Mqtt.dll Syntax public class UserProperty Constructors | Improve this Doc View Source UserProperty(String, String) Constructor Declaration public UserProperty(string name, string value) Parameters Type Name Description String name Name of the property String value Value of the property Properties | Improve this Doc View Source Name Name Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Value Value Declaration public string Value { get; set; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttClient.ConnectionClosedEventHandler.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttClient.ConnectionClosedEventHandler.html",
    "title": "Delegate MqttClient.ConnectionClosedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate MqttClient.ConnectionClosedEventHandler Delegate that defines event handler for client/peer disconnection Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public delegate void ConnectionClosedEventHandler(object sender, EventArgs e); Parameters Type Name Description Object sender EventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttClient.ConnectionClosedRequestEventHandler.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttClient.ConnectionClosedRequestEventHandler.html",
    "title": "Delegate MqttClient.ConnectionClosedRequestEventHandler | nanoFramework Documentation",
    "keywords": "Delegate MqttClient.ConnectionClosedRequestEventHandler Delegate that defines event handler for server disconnection request Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public delegate void ConnectionClosedRequestEventHandler(object sender, ConnectionClosedRequestEventArgs e); Parameters Type Name Description Object sender ConnectionClosedRequestEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttClient.ConnectionOpenedEventHandler.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttClient.ConnectionOpenedEventHandler.html",
    "title": "Delegate MqttClient.ConnectionOpenedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate MqttClient.ConnectionOpenedEventHandler Delegate that defines event handler for unsubscribed topic Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public delegate void ConnectionOpenedEventHandler(object sender, ConnectionOpenedEventArgs e); Parameters Type Name Description Object sender ConnectionOpenedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttClient.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttClient.html",
    "title": "Class MqttClient | nanoFramework Documentation",
    "keywords": "Class MqttClient MQTT Client Inheritance Object MqttClient Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttClient Constructors | Improve this Doc View Source MqttClient(String) Constructor Declaration public MqttClient(string brokerHostName) Parameters Type Name Description String brokerHostName Broker Host Name or IP Address | Improve this Doc View Source MqttClient(String, Int32, Boolean, X509Certificate, X509Certificate, MqttSslProtocols) Constructor Declaration public MqttClient(string brokerHostName, int brokerPort, bool secure, X509Certificate caCert, X509Certificate clientCert, MqttSslProtocols sslProtocol) Parameters Type Name Description String brokerHostName Broker Host Name or IP Address Int32 brokerPort Broker port Boolean secure Using secure connection X509Certificate caCert CA certificate for secure connection X509Certificate clientCert Client certificate MqttSslProtocols sslProtocol SSL/TLS protocol Properties | Improve this Doc View Source AuthenticationData Authentication Data, v5.0 only Declaration public byte[] AuthenticationData { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source AuthenticationMethod Authentication Method, v5.0 only Declaration public string AuthenticationMethod { get; set; } Property Value Type Description String | Improve this Doc View Source CleanSession Clean session flag Declaration public bool CleanSession { get; } Property Value Type Description Boolean | Improve this Doc View Source ClientId Client identifier Declaration public string ClientId { get; } Property Value Type Description String | Improve this Doc View Source IsAuthenticationFlow Set to true if you have an authentication flow, v5.0 only Declaration public bool IsAuthenticationFlow { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsConnected Connection status between client and broker Declaration public bool IsConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source MaximumPacketSize Maximum Packet Size, v5.0 only Declaration public uint MaximumPacketSize { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source ProtocolVersion MQTT protocol version Declaration public MqttProtocolVersion ProtocolVersion { get; set; } Property Value Type Description MqttProtocolVersion | Improve this Doc View Source ReceiveMaximum ReceiveMaximum, v5.0 only Declaration public ushort ReceiveMaximum { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source RequestProblemInformation Request Problem Information, v5.0 only Declaration public bool RequestProblemInformation { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RequestResponseInformation Request Response Information, v5.0 only Declaration public bool RequestResponseInformation { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SessionExpiryInterval Session Expiry Interval, v5.0 only Declaration public uint SessionExpiryInterval { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Settings MQTT client settings Declaration public MqttSettings Settings { get; } Property Value Type Description MqttSettings | Improve this Doc View Source TopicAliasMaximum TopicAliasMaximum, v5.0 only Declaration public ushort TopicAliasMaximum { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source UserProperties User Property, v5.0 only Declaration public ArrayList UserProperties { get; } Property Value Type Description ArrayList | Improve this Doc View Source WillDelayInterval Will Delay Interval, v5.0 only Declaration public uint WillDelayInterval { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source WillFlag Will flag Declaration public bool WillFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source WillMessage Will message Declaration public string WillMessage { get; } Property Value Type Description String | Improve this Doc View Source WillQosLevel Will QOS level Declaration public MqttQoSLevel WillQosLevel { get; } Property Value Type Description MqttQoSLevel | Improve this Doc View Source WillTopic Will topic Declaration public string WillTopic { get; } Property Value Type Description String Methods | Improve this Doc View Source Connect(String) Connect to broker Declaration public MqttReasonCode Connect(string clientId) Parameters Type Name Description String clientId Client identifier Returns Type Description MqttReasonCode Return code of CONNACK message from broker | Improve this Doc View Source Connect(String, Boolean) Connect to broker Declaration public MqttReasonCode Connect(string clientId, bool cleanSession) Parameters Type Name Description String clientId Client identifier Boolean cleanSession Clean sessione flag Returns Type Description MqttReasonCode Return code of CONNACK message from broker | Improve this Doc View Source Connect(String, String, String) Connect to broker Declaration public MqttReasonCode Connect(string clientId, string username, string password) Parameters Type Name Description String clientId Client identifier String username Username String password Password Returns Type Description MqttReasonCode Return code of CONNACK message from broker | Improve this Doc View Source Connect(String, String, String, Boolean, MqttQoSLevel, Boolean, String, String, Boolean, UInt16) Connect to broker Declaration public MqttReasonCode Connect(string clientId, string username, string password, bool willRetain, MqttQoSLevel willQosLevel, bool willFlag, string willTopic, string willMessage, bool cleanSession, ushort keepAlivePeriod) Parameters Type Name Description String clientId Client identifier String username Username String password Password Boolean willRetain Will retain flag MqttQoSLevel willQosLevel Will QOS level Boolean willFlag Will flag String willTopic Will topic String willMessage Will message Boolean cleanSession Clean sessione flag UInt16 keepAlivePeriod Keep alive period Returns Type Description MqttReasonCode Return code of CONNACK message from broker | Improve this Doc View Source Connect(String, String, String, Boolean, UInt16) Connect to broker Declaration public MqttReasonCode Connect(string clientId, string username, string password, bool cleanSession, ushort keepAlivePeriod) Parameters Type Name Description String clientId Client identifier String username Username String password Password Boolean cleanSession Clean sessione flag UInt16 keepAlivePeriod Keep alive period Returns Type Description MqttReasonCode Return code of CONNACK message from broker | Improve this Doc View Source Disconnect() Disconnect from broker Declaration public void Disconnect() | Improve this Doc View Source Publish(String, Byte[]) Publish a message asynchronously (QoS Level 0 and not retained) Declaration public ushort Publish(string topic, byte[] message) Parameters Type Name Description String topic Message topic Byte [] message Message data (payload) Returns Type Description UInt16 Message Id related to PUBLISH message | Improve this Doc View Source Publish(String, Byte[], MqttQoSLevel, Boolean) Publish a message asynchronously Declaration public ushort Publish(string topic, byte[] message, MqttQoSLevel qosLevel, bool retain) Parameters Type Name Description String topic Message topic Byte [] message Message data (payload) MqttQoSLevel qosLevel QoS Level Boolean retain Retain flag Returns Type Description UInt16 Message Id related to PUBLISH message | Improve this Doc View Source Subscribe(String[], MqttQoSLevel[]) Subscribe for message topics Declaration public ushort Subscribe(string[] topics, MqttQoSLevel[] qosLevels) Parameters Type Name Description String [] topics List of topics to subscribe MqttQoSLevel [] qosLevels QOS levels related to topics Returns Type Description UInt16 Message Id related to SUBSCRIBE message | Improve this Doc View Source Unsubscribe(String[]) Unsubscribe for message topics Declaration public ushort Unsubscribe(string[] topics) Parameters Type Name Description String [] topics List of topics to unsubscribe Returns Type Description UInt16 Message Id in UNSUBACK message from broker Events | Improve this Doc View Source Authentication The event for peer/client disconnection Declaration public event MqttClient.MqttMsgAuthenticationEventHandler Authentication Event Type Type Description MqttClient.MqttMsgAuthenticationEventHandler | Improve this Doc View Source ConnectionClosed The event for peer/client disconnection Declaration public event MqttClient.ConnectionClosedEventHandler ConnectionClosed Event Type Type Description MqttClient.ConnectionClosedEventHandler | Improve this Doc View Source ConnectionClosedRequest The event for peer/client disconnection Declaration public event MqttClient.ConnectionClosedRequestEventHandler ConnectionClosedRequest Event Type Type Description MqttClient.ConnectionClosedRequestEventHandler | Improve this Doc View Source ConnectionOpened The event for peer/client disconnection Declaration public event MqttClient.ConnectionOpenedEventHandler ConnectionOpened Event Type Type Description MqttClient.ConnectionOpenedEventHandler | Improve this Doc View Source MqttMsgPublished The event for published message Declaration public event MqttClient.MqttMsgPublishedEventHandler MqttMsgPublished Event Type Type Description MqttClient.MqttMsgPublishedEventHandler | Improve this Doc View Source MqttMsgPublishReceived The event for PUBLISH message received Declaration public event MqttClient.MqttMsgPublishEventHandler MqttMsgPublishReceived Event Type Type Description MqttClient.MqttMsgPublishEventHandler | Improve this Doc View Source MqttMsgSubscribed The event for subscribed topic Declaration public event MqttClient.MqttMsgSubscribedEventHandler MqttMsgSubscribed Event Type Type Description MqttClient.MqttMsgSubscribedEventHandler | Improve this Doc View Source MqttMsgUnsubscribed The event for unsubscribed topic Declaration public event MqttClient.MqttMsgUnsubscribedEventHandler MqttMsgUnsubscribed Event Type Type Description MqttClient.MqttMsgUnsubscribedEventHandler Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttClient.MqttMsgAuthenticationEventHandler.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttClient.MqttMsgAuthenticationEventHandler.html",
    "title": "Delegate MqttClient.MqttMsgAuthenticationEventHandler | nanoFramework Documentation",
    "keywords": "Delegate MqttClient.MqttMsgAuthenticationEventHandler Delegate that defines event handler for authentication topic, v5.0 only Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public delegate void MqttMsgAuthenticationEventHandler(object sender, MqttMsgAuthenticationEventArgs e); Parameters Type Name Description Object sender MqttMsgAuthenticationEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttClient.MqttMsgPublishedEventHandler.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttClient.MqttMsgPublishedEventHandler.html",
    "title": "Delegate MqttClient.MqttMsgPublishedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate MqttClient.MqttMsgPublishedEventHandler Delegate that defines event handler for published message Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public delegate void MqttMsgPublishedEventHandler(object sender, MqttMsgPublishedEventArgs e); Parameters Type Name Description Object sender MqttMsgPublishedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttClient.MqttMsgPublishEventHandler.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttClient.MqttMsgPublishEventHandler.html",
    "title": "Delegate MqttClient.MqttMsgPublishEventHandler | nanoFramework Documentation",
    "keywords": "Delegate MqttClient.MqttMsgPublishEventHandler Delegate that defines event handler for PUBLISH message received Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public delegate void MqttMsgPublishEventHandler(object sender, MqttMsgPublishEventArgs e); Parameters Type Name Description Object sender MqttMsgPublishEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttClient.MqttMsgSubscribedEventHandler.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttClient.MqttMsgSubscribedEventHandler.html",
    "title": "Delegate MqttClient.MqttMsgSubscribedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate MqttClient.MqttMsgSubscribedEventHandler Delegate that defines event handler for subscribed topic Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public delegate void MqttMsgSubscribedEventHandler(object sender, MqttMsgSubscribedEventArgs e); Parameters Type Name Description Object sender MqttMsgSubscribedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttClient.MqttMsgUnsubscribedEventHandler.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttClient.MqttMsgUnsubscribedEventHandler.html",
    "title": "Delegate MqttClient.MqttMsgUnsubscribedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate MqttClient.MqttMsgUnsubscribedEventHandler Delegate that defines event handler for unsubscribed topic Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public delegate void MqttMsgUnsubscribedEventHandler(object sender, MqttMsgUnsubscribedEventArgs e); Parameters Type Name Description Object sender MqttMsgUnsubscribedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttNetworkChannel.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttNetworkChannel.html",
    "title": "Class MqttNetworkChannel | nanoFramework Documentation",
    "keywords": "Class MqttNetworkChannel Channel to communicate over the network Inheritance Object MqttNetworkChannel Implements IMqttNetworkChannel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttNetworkChannel : IMqttNetworkChannel Constructors | Improve this Doc View Source MqttNetworkChannel(Socket) Constructor Declaration public MqttNetworkChannel(Socket socket) Parameters Type Name Description Socket socket Socket opened with the client | Improve this Doc View Source MqttNetworkChannel(Socket, Boolean, X509Certificate, MqttSslProtocols) Constructor Declaration public MqttNetworkChannel(Socket socket, bool secure, X509Certificate serverCert, MqttSslProtocols sslProtocol) Parameters Type Name Description Socket socket Socket opened with the client Boolean secure Secure connection (SSL/TLS) X509Certificate serverCert Server X509 certificate for secure connection MqttSslProtocols sslProtocol SSL/TLS protocol version | Improve this Doc View Source MqttNetworkChannel(String, Int32) Constructor Declaration public MqttNetworkChannel(string remoteHostName, int remotePort) Parameters Type Name Description String remoteHostName Remote Host name Int32 remotePort Remote port | Improve this Doc View Source MqttNetworkChannel(String, Int32, Boolean, X509Certificate, X509Certificate, MqttSslProtocols) Constructor Declaration public MqttNetworkChannel(string remoteHostName, int remotePort, bool secure, X509Certificate caCert, X509Certificate clientCert, MqttSslProtocols sslProtocol) Parameters Type Name Description String remoteHostName Remote Host name Int32 remotePort Remote port Boolean secure Using SSL X509Certificate caCert CA certificate X509Certificate clientCert Client certificate MqttSslProtocols sslProtocol SSL/TLS protocol version Properties | Improve this Doc View Source DataAvailable Data available on the channel Declaration public bool DataAvailable { get; } Property Value Type Description Boolean | Improve this Doc View Source RemoteHostName Remote host name Declaration public string RemoteHostName { get; } Property Value Type Description String | Improve this Doc View Source RemoteIpAddress Remote IP address Declaration public IPAddress RemoteIpAddress { get; } Property Value Type Description IPAddress | Improve this Doc View Source RemotePort Remote port Declaration public int RemotePort { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Accept() Accept connection from a remote client Declaration public void Accept() | Improve this Doc View Source Close() Close the network channel Declaration public void Close() | Improve this Doc View Source Connect() Connect to remote server Declaration public void Connect() | Improve this Doc View Source Receive(Byte[]) Receive data from the network Declaration public int Receive(byte[] buffer) Parameters Type Name Description Byte [] buffer Data buffer for receiving data Returns Type Description Int32 Number of bytes received | Improve this Doc View Source Receive(Byte[], Int32) Receive data from the network channel with a specified timeout Declaration public int Receive(byte[] buffer, int timeout) Parameters Type Name Description Byte [] buffer Data buffer for receiving data Int32 timeout Timeout on receiving (in milliseconds) Returns Type Description Int32 Number of bytes received | Improve this Doc View Source Send(Byte[]) Send data on the network channel Declaration public int Send(byte[] buffer) Parameters Type Name Description Byte [] buffer Data buffer to send Returns Type Description Int32 Number of byte sent Implements IMqttNetworkChannel Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttProtocolVersion.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttProtocolVersion.html",
    "title": "Enum MqttProtocolVersion | nanoFramework Documentation",
    "keywords": "Enum MqttProtocolVersion MQTT protocol version Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public enum MqttProtocolVersion Fields Name Description Version_3_1 MQTT protocol version 3.1 Version_3_1_1 MQTT protocol version 3.1.1 Version_5 MQTT protocol version 5.0 Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.M2Mqtt.MqttSettings.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttSettings.html",
    "title": "Class MqttSettings | nanoFramework Documentation",
    "keywords": "Class MqttSettings Settings class for the MQTT broker Inheritance Object MqttSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttSettings Fields | Improve this Doc View Source BrokerDefaultPort Default port for the MQTT protocol Declaration public const int BrokerDefaultPort = 1883 Field Value Type Description Int32 | Improve this Doc View Source BrokerDefaultSslPort Default SSL port for the MQTT protocol Declaration public const int BrokerDefaultSslPort = 8883 Field Value Type Description Int32 | Improve this Doc View Source ConnectTimeout Connection Timeout Declaration public const int ConnectTimeout = 30000 Field Value Type Description Int32 Remarks The broker needs to receive the first message (CONNECT) within a reasonable amount of time after the initial TCP/IP connection | Improve this Doc View Source DefaultDelayRetry Delay for retry publish, subscribe and unsubscribe for QoS Level 1 or 2. This is in ticks, equivalent of 1 second. Declaration public const int DefaultDelayRetry = 10000000 Field Value Type Description Int32 | Improve this Doc View Source DefaultInflightQueueSize The default inflight queue size Declaration public const int DefaultInflightQueueSize = 2147483647 Field Value Type Description Int32 | Improve this Doc View Source DefaultTimeout Default timeout on receiving from client Declaration public const int DefaultTimeout = 30000 Field Value Type Description Int32 | Improve this Doc View Source MaximumAttemptsRetry Max publish, subscribe and unsubscribe retry for QoS Level 1 or 2 Declaration public const int MaximumAttemptsRetry = 3 Field Value Type Description Int32 Properties | Improve this Doc View Source AttemptsOnRetry Attempts on retry Declaration public int AttemptsOnRetry { get; } Property Value Type Description Int32 | Improve this Doc View Source DelayOnRetry Delay on retry Declaration public int DelayOnRetry { get; } Property Value Type Description Int32 | Improve this Doc View Source InflightQueueSize Inflight queue size Declaration public int InflightQueueSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Instance Singleton instance of settings Declaration public static MqttSettings Instance { get; } Property Value Type Description MqttSettings | Improve this Doc View Source Port Listening connection port Declaration public int Port { get; } Property Value Type Description Int32 | Improve this Doc View Source SslPort Listening connection SSL port Declaration public int SslPort { get; } Property Value Type Description Int32 | Improve this Doc View Source TimeoutOnConnection Timeout on client connection (before receiving CONNECT message) Declaration public int TimeoutOnConnection { get; } Property Value Type Description Int32 | Improve this Doc View Source TimeoutOnReceiving Timeout on receiving Declaration public int TimeoutOnReceiving { get; } Property Value Type Description Int32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.MqttSslProtocols.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttSslProtocols.html",
    "title": "Enum MqttSslProtocols | nanoFramework Documentation",
    "keywords": "Enum MqttSslProtocols Supported SSL/TLS protocol versions Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public enum MqttSslProtocols Fields Name Description None None SSLv3 SSL version 3 TLSv1_0 TLS version 1.0 TLSv1_1 TLS version 1.1 TLSv1_2 TLS version 1.2 TLSv1_3 TLS version 1.3 Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.M2Mqtt.MqttSslUtility.html": {
    "href": "api/nanoFramework.M2Mqtt.MqttSslUtility.html",
    "title": "Class MqttSslUtility | nanoFramework Documentation",
    "keywords": "Class MqttSslUtility MQTT SSL utility class Inheritance Object MqttSslUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt Assembly : nanoFramework.M2Mqtt.dll Syntax public static class MqttSslUtility Methods | Improve this Doc View Source ToSslPlatformEnum(MqttSslProtocols) Defines the possible versions of Secure Sockets Layer (SSL). Declaration public static SslProtocols ToSslPlatformEnum(MqttSslProtocols mqttSslProtocol) Parameters Type Name Description MqttSslProtocols mqttSslProtocol Returns Type Description SslProtocols Remarks Note: Following the recommendation of the .NET documentation, nanoFramework implementation does not have SSL3 nor Default because those are deprecated and unsecure."
  },
  "api/nanoFramework.M2Mqtt.Session.html": {
    "href": "api/nanoFramework.M2Mqtt.Session.html",
    "title": "Namespace nanoFramework.M2Mqtt.Session | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.M2Mqtt.Session Classes MqttClientSession MQTT Client Session MqttSession MQTT Session base class"
  },
  "api/nanoFramework.M2Mqtt.Session.MqttClientSession.html": {
    "href": "api/nanoFramework.M2Mqtt.Session.MqttClientSession.html",
    "title": "Class MqttClientSession | nanoFramework Documentation",
    "keywords": "Class MqttClientSession MQTT Client Session Inheritance Object MqttSession MqttClientSession Inherited Members MqttSession.ClientId MqttSession.InflightMessages MqttSession.Clear() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Session Assembly : nanoFramework.M2Mqtt.dll Syntax public class MqttClientSession : MqttSession Constructors | Improve this Doc View Source MqttClientSession(String) Constructor Declaration public MqttClientSession(string clientId) Parameters Type Name Description String clientId Client Id to create session Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.M2Mqtt.Session.MqttSession.html": {
    "href": "api/nanoFramework.M2Mqtt.Session.MqttSession.html",
    "title": "Class MqttSession | nanoFramework Documentation",
    "keywords": "Class MqttSession MQTT Session base class Inheritance Object MqttSession MqttClientSession Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.M2Mqtt.Session Assembly : nanoFramework.M2Mqtt.dll Syntax public abstract class MqttSession Constructors | Improve this Doc View Source MqttSession() Constructor Declaration protected MqttSession() | Improve this Doc View Source MqttSession(String) Constructor Declaration protected MqttSession(string clientId) Parameters Type Name Description String clientId Client Id to create session Properties | Improve this Doc View Source ClientId Client Id Declaration public string ClientId { get; set; } Property Value Type Description String | Improve this Doc View Source InflightMessages Messages inflight during session Declaration public Hashtable InflightMessages { get; set; } Property Value Type Description Hashtable Methods | Improve this Doc View Source Clear() Clean session Declaration public virtual void Clear() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Networking.ConnectionError.html": {
    "href": "api/nanoFramework.Networking.ConnectionError.html",
    "title": "Class ConnectionError | nanoFramework Documentation",
    "keywords": "Class ConnectionError Connection Error class Inheritance Object ConnectionError Namespace : nanoFramework.Networking Assembly : nanoFramework.NetworkHelper.dll Syntax public class ConnectionError : object Constructors | Improve this Doc View Source ConnectionError(String, Exception) Connection Error class constructor Declaration public ConnectionError(string error, Exception ex = null) Parameters Type Name Description String error Error message. Exception ex Exception Properties | Improve this Doc View Source Error The error message Declaration public string Error { get; } Property Value Type Description String | Improve this Doc View Source Exception The possible Exception Declaration public Exception Exception { get; } Property Value Type Description Exception Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Networking.html": {
    "href": "api/nanoFramework.Networking.html",
    "title": "Namespace nanoFramework.Networking | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Networking Classes ConnectionError Connection Error class IPConfiguration IP configuration used for static IP address configuration. NetworkHelper Network helper class to connect easily to WiFi networks Sntp Provides a set of methods that help developers to manage the SNTP (Simple Network Time Protocol) client on the target device."
  },
  "api/nanoFramework.Networking.IPConfiguration.html": {
    "href": "api/nanoFramework.Networking.IPConfiguration.html",
    "title": "Class IPConfiguration | nanoFramework Documentation",
    "keywords": "Class IPConfiguration IP configuration used for static IP address configuration. Inheritance Object IPConfiguration Namespace : nanoFramework.Networking Assembly : nanoFramework.NetworkHelper.dll Syntax public class IPConfiguration : object Constructors | Improve this Doc View Source IPConfiguration(String, String, String, String[]) Constructor for IP Configuration. Declaration public IPConfiguration(string ipAddress, string ipSubnetMask, string ipGatewayAddress, string[] ipDns) Parameters Type Name Description String ipAddress The static IP address. String ipSubnetMask The IP subnet mask address. String ipGatewayAddress The IP gateway address. String [] ipDns The IP DNS list, null to let automatic DNS on. Properties | Improve this Doc View Source IPAddress Gets or sets the static IP Address. Declaration public string IPAddress { get; set; } Property Value Type Description String | Improve this Doc View Source IPDns Gets or sets the static DNS. null to let the automatic DNS enabled. Declaration public string[] IPDns { get; set; } Property Value Type Description String [] | Improve this Doc View Source IPGatewayAddress Gets or sets the he IP gateway address. Declaration public string IPGatewayAddress { get; set; } Property Value Type Description String | Improve this Doc View Source IPSubnetMask Gets or sets the IP subnet mask address. Declaration public string IPSubnetMask { get; set; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Networking.NetworkHelper.html": {
    "href": "api/nanoFramework.Networking.NetworkHelper.html",
    "title": "Class NetworkHelper | nanoFramework Documentation",
    "keywords": "Class NetworkHelper Network helper class to connect easily to WiFi networks Inheritance Object NetworkHelper Namespace : nanoFramework.Networking Assembly : nanoFramework.NetworkHelper.dll Syntax public static class NetworkHelper : object Properties | Improve this Doc View Source ConnectionError The error connection type Declaration public static ConnectionError ConnectionError { get; } Property Value Type Description ConnectionError Methods | Improve this Doc View Source ConnectWifiDhcp(String, String, WiFiReconnectionKind, Boolean, Int32, CancellationToken) This function will connect the network with DHCP enabled, for your SSID and try to connect to it with the credentials you've passed. This will save as well the configuration of your network. Declaration public static bool ConnectWifiDhcp(string ssid, string password, WiFiReconnectionKind reconnectionKind = null, bool setDateTime = false, int wifiAdapter = 0, CancellationToken token = null) Parameters Type Name Description String ssid The SSID you are trying to connect to. String password The password associated to the SSID you are trying to connect to. WiFiReconnectionKind reconnectionKind The reconnection type to the network. Boolean setDateTime True to wait for a valid date time. Int32 wifiAdapter The WiFi adapter to be used. Relevant only if you have multiple WiFi adapters. CancellationToken token A cancellation token used for timeout. Returns Type Description Boolean True if success. If no success a more detailed error message available in the ConnectionError property | Improve this Doc View Source ConnectWifiFixAddress(String, String, IPConfiguration, WiFiReconnectionKind, Boolean, Int32, CancellationToken) This function will connect the network with the static IP address you are providing, for your SSID and try to connect to it with the credentials you've passed. This will save as well the configuration of your network. Declaration public static bool ConnectWifiFixAddress(string ssid, string password, IPConfiguration ipConfiguration, WiFiReconnectionKind reconnectionKind = null, bool setDateTime = false, int wifiAdapter = 0, CancellationToken token = null) Parameters Type Name Description String ssid The SSID you are trying to connect to. String password The password associated to the SSID you are trying to connect to. IPConfiguration ipConfiguration The static IP configuration you want to apply. WiFiReconnectionKind reconnectionKind The reconnection type to the network. Boolean setDateTime True to wait for a valid date time. Int32 wifiAdapter The WiFi adapter to be used. Relevant only if you have multiple WiFi adapters. CancellationToken token A cancellation token used for timeout. Returns Type Description Boolean True if success. If no success a more detailed error message available in the ConnectionError property | Improve this Doc View Source IsConfigurationStored(Int32) Checks if a WiFi configuration is stored. Declaration public static bool IsConfigurationStored(int wifiAdapter = 0) Parameters Type Name Description Int32 wifiAdapter The WiFi adapter to be used. Relevant only if you have multiple WiFi adapters. Returns Type Description Boolean True if a configuration is stored. | Improve this Doc View Source IsValidDateTime() Check if the DateTime is valid. Declaration public static bool IsValidDateTime() Returns Type Description Boolean True if valid. | Improve this Doc View Source IsValidIpAddress(NetworkInterfaceType) Check if there is a valid IP address on a specific interface type. Declaration public static bool IsValidIpAddress(NetworkInterfaceType interfaceType) Parameters Type Name Description NetworkInterfaceType interfaceType The type of interface. Returns Type Description Boolean True if valid. | Improve this Doc View Source ReconnectWifi(Boolean, Int32, CancellationToken) This function will connect the network, the information used to connect are the ones stored in the device. This function can be called only if an existing network has been setup previously and if the credentials are valid. Declaration public static bool ReconnectWifi(bool setDateTime = false, int wifiAdapter = 0, CancellationToken token = null) Parameters Type Name Description Boolean setDateTime True to wait for a valid date time. Int32 wifiAdapter The WiFi adapter to be used. Relevant only if you have multiple WiFi adapters. CancellationToken token A cancellation token used for timeout. Returns Type Description Boolean True if success. If no success a more detailed error message available in the ConnectionError property | Improve this Doc View Source ScanAndConnectWifiDhcp(String, String, WiFiReconnectionKind, Boolean, Int32, CancellationToken) This function will scan and connect the network with DHCP enabled, for your SSID and try to connect to it with the credentials you've passed. This will save as well the configuration of your network. Declaration public static bool ScanAndConnectWifiDhcp(string ssid, string password, WiFiReconnectionKind reconnectionKind = null, bool setDateTime = false, int wifiAdapter = 0, CancellationToken token = null) Parameters Type Name Description String ssid The SSID you are trying to connect to. String password The password associated to the SSID you are trying to connect to. WiFiReconnectionKind reconnectionKind The reconnection type to the network. Boolean setDateTime True to wait for a valid date time. Int32 wifiAdapter The WiFi adapter to be used. Relevant only if you have multiple WiFi adapters. CancellationToken token A cancellation token used for timeout. Returns Type Description Boolean True if success. If no success a more detailed error message available in the ConnectionError property | Improve this Doc View Source WaitForValidIPAndDate(Boolean, NetworkInterfaceType, CancellationToken) Wait for a valid IP and potentially a date Declaration public static bool WaitForValidIPAndDate(bool setDateTime, NetworkInterfaceType networkInterfaceType, CancellationToken token) Parameters Type Name Description Boolean setDateTime True to wait for a valid date NetworkInterfaceType networkInterfaceType The tye of interface. CancellationToken token A cancellation token Returns Type Description Boolean True if success"
  },
  "api/nanoFramework.Networking.Sntp.html": {
    "href": "api/nanoFramework.Networking.Sntp.html",
    "title": "Class Sntp | nanoFramework Documentation",
    "keywords": "Class Sntp Provides a set of methods that help developers to manage the SNTP (Simple Network Time Protocol) client on the target device. Inheritance Object Sntp Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Networking Assembly : nanoFramework.Networking.Sntp.dll Syntax public class Sntp Remarks For a list of some public NTP servers, see this link : http://support.ntp.org/bin/view/Servers/NTPPoolServers Properties IsStarted Get status of SNTP client. Declaration public static bool IsStarted { get; } Property Value Type Description Boolean Server1 Gets, sets the address of the SNTP server 1. Declaration public static string Server1 { get; set; } Property Value Type Description String Server2 Gets, sets the address of the SNTP server 2. Declaration public static string Server2 { get; set; } Property Value Type Description String Methods Start() Starts the SNTP client. After this method returns a periodic call to the set SNTP servers is performed providing time synchronization. The system time is updated immediately after each successful execution. The time synchronization occurs on a hourly rate. Declaration public static extern void Start() Remarks This method is specific to nanoFramework. Stop() Stops the SNTP client. The time synchronization will stop. Declaration public static extern void Stop() UpdateNow() Performs an immediate request to synchronize time. Declaration public static extern void UpdateNow() Remarks This performs a restart of the internal service. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.Border.html": {
    "href": "api/nanoFramework.Presentation.Controls.Border.html",
    "title": "Class Border | nanoFramework Documentation",
    "keywords": "Class Border Inheritance Object DispatcherObject UIElement Control ContentControl Border Inherited Members ContentControl.Child Control.Background Control.Font Control.Foreground Control._background Control._foreground Control._font UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class Border : ContentControl Constructors | Improve this Doc View Source Border() Declaration public Border() Properties | Improve this Doc View Source BorderBrush Declaration public Brush BorderBrush { get; set; } Property Value Type Description Brush Methods | Improve this Doc View Source ArrangeOverride(Int32, Int32) Declaration protected override void ArrangeOverride(int arrangeWidth, int arrangeHeight) Parameters Type Name Description Int32 arrangeWidth Int32 arrangeHeight Overrides UIElement.ArrangeOverride(Int32, Int32) | Improve this Doc View Source GetBorderThickness(out Int32, out Int32, out Int32, out Int32) Declaration public void GetBorderThickness(out int left, out int top, out int right, out int bottom) Parameters Type Name Description Int32 left Int32 top Int32 right Int32 bottom | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides ContentControl.MeasureOverride(Int32, Int32, out Int32, out Int32) | Improve this Doc View Source OnRender(DrawingContext) Declaration public override void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides Control.OnRender(DrawingContext) | Improve this Doc View Source SetBorderThickness(Int32) Declaration public void SetBorderThickness(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source SetBorderThickness(Int32, Int32, Int32, Int32) Declaration public void SetBorderThickness(int left, int top, int right, int bottom) Parameters Type Name Description Int32 left Int32 top Int32 right Int32 bottom Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.Canvas.html": {
    "href": "api/nanoFramework.Presentation.Controls.Canvas.html",
    "title": "Class Canvas | nanoFramework Documentation",
    "keywords": "Class Canvas Inheritance Object DispatcherObject UIElement Panel Canvas WindowManager Inherited Members Panel.Children UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnRender(DrawingContext) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class Canvas : Panel Constructors | Improve this Doc View Source Canvas() Declaration public Canvas() Methods | Improve this Doc View Source ArrangeOverride(Int32, Int32) Declaration protected override void ArrangeOverride(int arrangeWidth, int arrangeHeight) Parameters Type Name Description Int32 arrangeWidth Int32 arrangeHeight Overrides UIElement.ArrangeOverride(Int32, Int32) | Improve this Doc View Source GetBottom(UIElement) Declaration public static int GetBottom(UIElement e) Parameters Type Name Description UIElement e Returns Type Description Int32 | Improve this Doc View Source GetLeft(UIElement) Declaration public static int GetLeft(UIElement e) Parameters Type Name Description UIElement e Returns Type Description Int32 | Improve this Doc View Source GetRight(UIElement) Declaration public static int GetRight(UIElement e) Parameters Type Name Description UIElement e Returns Type Description Int32 | Improve this Doc View Source GetTop(UIElement) Declaration public static int GetTop(UIElement e) Parameters Type Name Description UIElement e Returns Type Description Int32 | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides Panel.MeasureOverride(Int32, Int32, out Int32, out Int32) | Improve this Doc View Source SetBottom(UIElement, Int32) Declaration public static void SetBottom(UIElement e, int bottom) Parameters Type Name Description UIElement e Int32 bottom | Improve this Doc View Source SetLeft(UIElement, Int32) Declaration public static void SetLeft(UIElement e, int left) Parameters Type Name Description UIElement e Int32 left | Improve this Doc View Source SetRight(UIElement, Int32) Declaration public static void SetRight(UIElement e, int right) Parameters Type Name Description UIElement e Int32 right | Improve this Doc View Source SetTop(UIElement, Int32) Declaration public static void SetTop(UIElement e, int top) Parameters Type Name Description UIElement e Int32 top Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.ContentControl.html": {
    "href": "api/nanoFramework.Presentation.Controls.ContentControl.html",
    "title": "Class ContentControl | nanoFramework Documentation",
    "keywords": "Class ContentControl Inheritance Object DispatcherObject UIElement Control ContentControl Border ListBox ListBoxItem ScrollViewer Window Inherited Members Control.Background Control.Font Control.Foreground Control.OnRender(DrawingContext) Control._background Control._foreground Control._font UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public abstract class ContentControl : Control Properties | Improve this Doc View Source Child Declaration public UIElement Child { get; set; } Property Value Type Description UIElement Methods | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides UIElement.MeasureOverride(Int32, Int32, out Int32, out Int32) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.Control.html": {
    "href": "api/nanoFramework.Presentation.Controls.Control.html",
    "title": "Class Control | nanoFramework Documentation",
    "keywords": "Class Control Inheritance Object DispatcherObject UIElement Control ContentControl Inherited Members UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.MeasureOverride(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class Control : UIElement Fields | Improve this Doc View Source _background Declaration protected Brush _background Field Value Type Description Brush | Improve this Doc View Source _font Declaration protected Font _font Field Value Type Description Font | Improve this Doc View Source _foreground Declaration protected Brush _foreground Field Value Type Description Brush Properties | Improve this Doc View Source Background Declaration public Brush Background { get; set; } Property Value Type Description Brush | Improve this Doc View Source Font Declaration public Font Font { get; set; } Property Value Type Description Font | Improve this Doc View Source Foreground Declaration public Brush Foreground { get; set; } Property Value Type Description Brush Methods | Improve this Doc View Source OnRender(DrawingContext) Declaration public override void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides UIElement.OnRender(DrawingContext) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.Dock.html": {
    "href": "api/nanoFramework.Presentation.Controls.Dock.html",
    "title": "Enum Dock | nanoFramework Documentation",
    "keywords": "Enum Dock Dock - Enum which describes how to position and stretch the child of a DockPanel. Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public enum Dock Fields Name Description Bottom Position this child at the bottom of the remaining space. Left Position this child at the left of the remaining space. Right Position this child at the right of the remaining space. Top Position this child at the top of the remaining space. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.Controls.DockPanel.html": {
    "href": "api/nanoFramework.Presentation.Controls.DockPanel.html",
    "title": "Class DockPanel | nanoFramework Documentation",
    "keywords": "Class DockPanel DockPanel is used to size and position children inward from the edges of available space. A Dock enum (see SetDock(UIElement, Dock) and GetDock(UIElement) ) determines on which size a child is placed. Children are stacked in order from these edges until there is no more space; this happens when previous children have consumed all available space, or a child with Dock set to Fill is encountered. Inheritance Object DispatcherObject UIElement Panel DockPanel Inherited Members Panel.Children UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnRender(DrawingContext) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class DockPanel : Panel Properties | Improve this Doc View Source LastChildFill Declaration public bool LastChildFill { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source ArrangeOverride(Int32, Int32) DockPanel computes a position and final size for each of its children based upon their Dock enum and sizing properties. Declaration protected override void ArrangeOverride(int arrangeWidth, int arrangeHeight) Parameters Type Name Description Int32 arrangeWidth Width that DockPanel will assume to position children. Int32 arrangeHeight Height that DockPanel will assume to position children. Overrides UIElement.ArrangeOverride(Int32, Int32) | Improve this Doc View Source GetDock(UIElement) Reads the pseudo-attached property Dock from the given element. Declaration public static Dock GetDock(UIElement element) Parameters Type Name Description UIElement element UIElement from which to read the pseudo-attached property. Returns Type Description Dock The property's value. | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Updates DesiredSize of the DockPanel. Called by parent UIElement. This is the first pass of layout. Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth An \"upper limit\" that the return value should not exceed. Int32 availableHeight An \"upper limit\" that the return value should not exceed. Int32 desiredWidth The Panel's desired width. Int32 desiredHeight The Panel's desired height. Overrides Panel.MeasureOverride(Int32, Int32, out Int32, out Int32) | Improve this Doc View Source SetDock(UIElement, Dock) Writes the pseudo-attached property Dock to the given element. Declaration public static void SetDock(UIElement element, Dock dock) Parameters Type Name Description UIElement element UIElement to which to write the attached property. Dock dock The property value to set. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.DrawingAttributes.html": {
    "href": "api/nanoFramework.Presentation.Controls.DrawingAttributes.html",
    "title": "Class DrawingAttributes | nanoFramework Documentation",
    "keywords": "Class DrawingAttributes Inheritance Object DrawingAttributes Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class DrawingAttributes Fields | Improve this Doc View Source Color Declaration public Color Color Field Value Type Description Color Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.html": {
    "href": "api/nanoFramework.Presentation.Controls.html",
    "title": "Namespace nanoFramework.Presentation.Controls | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Presentation.Controls Classes Border Canvas ContentControl Control DockPanel DockPanel is used to size and position children inward from the edges of available space. A Dock enum (see SetDock(UIElement, Dock) and GetDock(UIElement) ) determines on which size a child is placed. Children are stacked in order from these edges until there is no more space; this happens when previous children have consumed all available space, or a child with Dock set to Fill is encountered. DrawingAttributes Image Summary description for Image. InkCanvas Note: InkCanvas control is not movable at runtime. This requires complex logic, with no customer scenario at this moment. ListBox ListBoxItem ListBoxItemCollection Panel ScrollChangedEventArgs ScrollViewer SelectionChangedEventArgs StackPanel Text TextFlow TextRun TextRunCollection WrapPanel WrapPanel is used to place child UIElements at sequential positions from left to the right and then \"wrap\" the lines of children from top to the bottom. All children get the layout partition of size ItemWidth x ItemHeight. Enums Dock Dock - Enum which describes how to position and stretch the child of a DockPanel. Orientation ScrollingStyle Delegates ScrollChangedEventHandler SelectionChangedEventHandler"
  },
  "api/nanoFramework.Presentation.Controls.Image.html": {
    "href": "api/nanoFramework.Presentation.Controls.Image.html",
    "title": "Class Image | nanoFramework Documentation",
    "keywords": "Class Image Summary description for Image. Inheritance Object DispatcherObject UIElement Image Inherited Members UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class Image : UIElement Constructors | Improve this Doc View Source Image() Declaration public Image() | Improve this Doc View Source Image(Bitmap) Declaration public Image(Bitmap bmp) Parameters Type Name Description Bitmap bmp Properties | Improve this Doc View Source Bitmap Declaration public Bitmap Bitmap { get; set; } Property Value Type Description Bitmap Methods | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides UIElement.MeasureOverride(Int32, Int32, out Int32, out Int32) | Improve this Doc View Source OnRender(DrawingContext) Declaration public override void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides UIElement.OnRender(DrawingContext) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.InkCanvas.html": {
    "href": "api/nanoFramework.Presentation.Controls.InkCanvas.html",
    "title": "Class InkCanvas | nanoFramework Documentation",
    "keywords": "Class InkCanvas Note: InkCanvas control is not movable at runtime. This requires complex logic, with no customer scenario at this moment. Inheritance Object DispatcherObject UIElement InkCanvas Inherited Members UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class InkCanvas : UIElement Constructors | Improve this Doc View Source InkCanvas(Int32, Int32, Int32, Int32) Declaration public InkCanvas(int left, int top, int width, int height) Parameters Type Name Description Int32 left Int32 top Int32 width Int32 height | Improve this Doc View Source InkCanvas(Int32, Int32, Int32, Int32, Int32) Declaration public InkCanvas(int left, int top, int width, int height, int borderWidth) Parameters Type Name Description Int32 left Int32 top Int32 width Int32 height Int32 borderWidth Fields | Improve this Doc View Source _bitmap Declaration protected Bitmap _bitmap Field Value Type Description Bitmap | Improve this Doc View Source _defaultDrawingAttributes Declaration protected DrawingAttributes _defaultDrawingAttributes Field Value Type Description DrawingAttributes Properties | Improve this Doc View Source DefaultDrawingAttributes Declaration public DrawingAttributes DefaultDrawingAttributes { get; set; } Property Value Type Description DrawingAttributes Methods | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Init(Int32, Int32, Int32, Int32, Int32) Declaration protected virtual void Init(int left, int top, int width, int height, int borderWidth) Parameters Type Name Description Int32 left Int32 top Int32 width Int32 height Int32 borderWidth | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides UIElement.MeasureOverride(Int32, Int32, out Int32, out Int32) | Improve this Doc View Source OnRender(DrawingContext) Declaration public override void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides UIElement.OnRender(DrawingContext) | Improve this Doc View Source OnTouchDown(TouchEventArgs) Declaration protected override void OnTouchDown(TouchEventArgs e) Parameters Type Name Description TouchEventArgs e Overrides UIElement.OnTouchDown(TouchEventArgs) | Improve this Doc View Source OnTouchUp(TouchEventArgs) Declaration protected override void OnTouchUp(TouchEventArgs e) Parameters Type Name Description TouchEventArgs e Overrides UIElement.OnTouchUp(TouchEventArgs) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.ListBox.html": {
    "href": "api/nanoFramework.Presentation.Controls.ListBox.html",
    "title": "Class ListBox | nanoFramework Documentation",
    "keywords": "Class ListBox Inheritance Object DispatcherObject UIElement Control ContentControl ListBox Inherited Members ContentControl.Child ContentControl.MeasureOverride(Int32, Int32, Int32, Int32) Control.Background Control.Font Control.Foreground Control.OnRender(DrawingContext) Control._background Control._foreground Control._font UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class ListBox : ContentControl Constructors | Improve this Doc View Source ListBox() Declaration public ListBox() Properties | Improve this Doc View Source ExtentHeight Extent height of the scroll area. Declaration public int ExtentHeight { get; } Property Value Type Description Int32 | Improve this Doc View Source ExtentWidth Extent width of the scroll area. Declaration public int ExtentWidth { get; } Property Value Type Description Int32 | Improve this Doc View Source HorizontalOffset Horizontal offset of the scroll. Declaration public int HorizontalOffset { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Items Declaration public ListBoxItemCollection Items { get; } Property Value Type Description ListBoxItemCollection | Improve this Doc View Source ScrollingStyle The scrolling style. Declaration public ScrollingStyle ScrollingStyle { get; set; } Property Value Type Description ScrollingStyle | Improve this Doc View Source SelectedIndex Declaration public int SelectedIndex { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SelectedItem Declaration public ListBoxItem SelectedItem { get; set; } Property Value Type Description ListBoxItem | Improve this Doc View Source VerticalOffset Vertical offset of the scroll. Declaration public int VerticalOffset { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source OnButtonDown(ButtonEventArgs) Declaration protected override void OnButtonDown(ButtonEventArgs e) Parameters Type Name Description ButtonEventArgs e Overrides UIElement.OnButtonDown(ButtonEventArgs) | Improve this Doc View Source ScrollIntoView(ListBoxItem) Declaration public void ScrollIntoView(ListBoxItem item) Parameters Type Name Description ListBoxItem item Events | Improve this Doc View Source ScrollChanged Event handler if the scroll changes. Declaration public event ScrollChangedEventHandler ScrollChanged Event Type Type Description ScrollChangedEventHandler | Improve this Doc View Source SelectionChanged Declaration public event SelectionChangedEventHandler SelectionChanged Event Type Type Description SelectionChangedEventHandler Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.ListBoxItem.html": {
    "href": "api/nanoFramework.Presentation.Controls.ListBoxItem.html",
    "title": "Class ListBoxItem | nanoFramework Documentation",
    "keywords": "Class ListBoxItem Inheritance Object DispatcherObject UIElement Control ContentControl ListBoxItem Inherited Members ContentControl.Child ContentControl.MeasureOverride(Int32, Int32, Int32, Int32) Control.Background Control.Font Control.Foreground Control.OnRender(DrawingContext) Control._background Control._foreground Control._font UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class ListBoxItem : ContentControl Properties | Improve this Doc View Source IsSelectable Declaration public bool IsSelectable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsSelected Declaration public bool IsSelected { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source OnIsSelectedChanged(Boolean) Declaration protected virtual void OnIsSelectedChanged(bool isSelected) Parameters Type Name Description Boolean isSelected Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.ListBoxItemCollection.html": {
    "href": "api/nanoFramework.Presentation.Controls.ListBoxItemCollection.html",
    "title": "Class ListBoxItemCollection | nanoFramework Documentation",
    "keywords": "Class ListBoxItemCollection Inheritance Object ListBoxItemCollection Implements ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class ListBoxItemCollection : ICollection, IEnumerable Constructors | Improve this Doc View Source ListBoxItemCollection(ListBox, UIElementCollection) Declaration public ListBoxItemCollection(ListBox listBox, UIElementCollection items) Parameters Type Name Description ListBox listBox UIElementCollection items Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsSynchronized Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public ListBoxItem this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description ListBoxItem | Improve this Doc View Source SyncRoot Declaration public object SyncRoot { get; } Property Value Type Description Object Methods | Improve this Doc View Source Add(ListBoxItem) Declaration public int Add(ListBoxItem item) Parameters Type Name Description ListBoxItem item Returns Type Description Int32 | Improve this Doc View Source Add(UIElement) Declaration public int Add(UIElement element) Parameters Type Name Description UIElement element Returns Type Description Int32 | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(ListBoxItem) Declaration public bool Contains(ListBoxItem item) Parameters Type Name Description ListBoxItem item Returns Type Description Boolean | Improve this Doc View Source CopyTo(Array, Int32) Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array Int32 index | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator | Improve this Doc View Source IndexOf(ListBoxItem) Declaration public int IndexOf(ListBoxItem item) Parameters Type Name Description ListBoxItem item Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, ListBoxItem) Declaration public void Insert(int index, ListBoxItem item) Parameters Type Name Description Int32 index ListBoxItem item | Improve this Doc View Source Remove(ListBoxItem) Declaration public void Remove(ListBoxItem item) Parameters Type Name Description ListBoxItem item | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Implements ICollection IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.Orientation.html": {
    "href": "api/nanoFramework.Presentation.Controls.Orientation.html",
    "title": "Enum Orientation | nanoFramework Documentation",
    "keywords": "Enum Orientation Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public enum Orientation Fields Name Description Horizontal Vertical Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.Controls.Panel.html": {
    "href": "api/nanoFramework.Presentation.Controls.Panel.html",
    "title": "Class Panel | nanoFramework Documentation",
    "keywords": "Class Panel Inheritance Object DispatcherObject UIElement Panel Canvas DockPanel StackPanel WrapPanel Inherited Members UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnRender(DrawingContext) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class Panel : UIElement Properties | Improve this Doc View Source Children Declaration public UIElementCollection Children { get; } Property Value Type Description UIElementCollection Methods | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides UIElement.MeasureOverride(Int32, Int32, out Int32, out Int32) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.ScrollChangedEventArgs.html": {
    "href": "api/nanoFramework.Presentation.Controls.ScrollChangedEventArgs.html",
    "title": "Class ScrollChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class ScrollChangedEventArgs Inheritance Object EventArgs ScrollChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class ScrollChangedEventArgs : EventArgs Constructors | Improve this Doc View Source ScrollChangedEventArgs(Int32, Int32, Int32, Int32) Declaration public ScrollChangedEventArgs(int offsetX, int offsetY, int offsetChangeX, int offsetChangeY) Parameters Type Name Description Int32 offsetX Int32 offsetY Int32 offsetChangeX Int32 offsetChangeY Fields | Improve this Doc View Source HorizontalChange Declaration public readonly int HorizontalChange Field Value Type Description Int32 | Improve this Doc View Source HorizontalOffset Declaration public readonly int HorizontalOffset Field Value Type Description Int32 | Improve this Doc View Source VerticalChange Declaration public readonly int VerticalChange Field Value Type Description Int32 | Improve this Doc View Source VerticalOffset Declaration public readonly int VerticalOffset Field Value Type Description Int32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.ScrollChangedEventHandler.html": {
    "href": "api/nanoFramework.Presentation.Controls.ScrollChangedEventHandler.html",
    "title": "Delegate ScrollChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate ScrollChangedEventHandler Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public delegate void ScrollChangedEventHandler(object sender, ScrollChangedEventArgs args); Parameters Type Name Description Object sender ScrollChangedEventArgs args Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.ScrollingStyle.html": {
    "href": "api/nanoFramework.Presentation.Controls.ScrollingStyle.html",
    "title": "Enum ScrollingStyle | nanoFramework Documentation",
    "keywords": "Enum ScrollingStyle Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public enum ScrollingStyle Fields Name Description First Last LineByLine PageByPage Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.Controls.ScrollViewer.html": {
    "href": "api/nanoFramework.Presentation.Controls.ScrollViewer.html",
    "title": "Class ScrollViewer | nanoFramework Documentation",
    "keywords": "Class ScrollViewer Inheritance Object DispatcherObject UIElement Control ContentControl ScrollViewer Inherited Members ContentControl.Child Control.Background Control.Font Control.Foreground Control.OnRender(DrawingContext) Control._background Control._foreground Control._font UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class ScrollViewer : ContentControl Constructors | Improve this Doc View Source ScrollViewer() Declaration public ScrollViewer() Properties | Improve this Doc View Source ExtentHeight Declaration public int ExtentHeight { get; } Property Value Type Description Int32 | Improve this Doc View Source ExtentWidth Declaration public int ExtentWidth { get; } Property Value Type Description Int32 | Improve this Doc View Source HorizontalOffset Declaration public int HorizontalOffset { get; set; } Property Value Type Description Int32 | Improve this Doc View Source LineHeight Declaration public int LineHeight { get; set; } Property Value Type Description Int32 | Improve this Doc View Source LineWidth Declaration public int LineWidth { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ScrollingStyle Declaration public ScrollingStyle ScrollingStyle { get; set; } Property Value Type Description ScrollingStyle | Improve this Doc View Source VerticalOffset Declaration public int VerticalOffset { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source ArrangeOverride(Int32, Int32) Declaration protected override void ArrangeOverride(int arrangeWidth, int arrangeHeight) Parameters Type Name Description Int32 arrangeWidth Int32 arrangeHeight Overrides UIElement.ArrangeOverride(Int32, Int32) | Improve this Doc View Source LineDown() Declaration public void LineDown() | Improve this Doc View Source LineLeft() Declaration public void LineLeft() | Improve this Doc View Source LineRight() Declaration public void LineRight() | Improve this Doc View Source LineUp() Declaration public void LineUp() | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides ContentControl.MeasureOverride(Int32, Int32, out Int32, out Int32) | Improve this Doc View Source OnButtonDown(ButtonEventArgs) Declaration protected override void OnButtonDown(ButtonEventArgs e) Parameters Type Name Description ButtonEventArgs e Overrides UIElement.OnButtonDown(ButtonEventArgs) | Improve this Doc View Source PageDown() Declaration public void PageDown() | Improve this Doc View Source PageLeft() Declaration public void PageLeft() | Improve this Doc View Source PageRight() Declaration public void PageRight() | Improve this Doc View Source PageUp() Declaration public void PageUp() Events | Improve this Doc View Source ScrollChanged Declaration public event ScrollChangedEventHandler ScrollChanged Event Type Type Description ScrollChangedEventHandler Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.SelectionChangedEventArgs.html": {
    "href": "api/nanoFramework.Presentation.Controls.SelectionChangedEventArgs.html",
    "title": "Class SelectionChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class SelectionChangedEventArgs Inheritance Object EventArgs SelectionChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class SelectionChangedEventArgs : EventArgs Constructors | Improve this Doc View Source SelectionChangedEventArgs(Int32, Int32) Declaration public SelectionChangedEventArgs(int previousIndex, int newIndex) Parameters Type Name Description Int32 previousIndex Int32 newIndex Fields | Improve this Doc View Source PreviousSelectedIndex Declaration public readonly int PreviousSelectedIndex Field Value Type Description Int32 | Improve this Doc View Source SelectedIndex Declaration public readonly int SelectedIndex Field Value Type Description Int32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.SelectionChangedEventHandler.html": {
    "href": "api/nanoFramework.Presentation.Controls.SelectionChangedEventHandler.html",
    "title": "Delegate SelectionChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate SelectionChangedEventHandler Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public delegate void SelectionChangedEventHandler(object sender, SelectionChangedEventArgs args); Parameters Type Name Description Object sender SelectionChangedEventArgs args Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.StackPanel.html": {
    "href": "api/nanoFramework.Presentation.Controls.StackPanel.html",
    "title": "Class StackPanel | nanoFramework Documentation",
    "keywords": "Class StackPanel Inheritance Object DispatcherObject UIElement Panel StackPanel Inherited Members Panel.Children UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnRender(DrawingContext) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class StackPanel : Panel Constructors | Improve this Doc View Source StackPanel() Declaration public StackPanel() | Improve this Doc View Source StackPanel(Orientation) Declaration public StackPanel(Orientation orientation) Parameters Type Name Description Orientation orientation Properties | Improve this Doc View Source Orientation Declaration public Orientation Orientation { get; set; } Property Value Type Description Orientation Methods | Improve this Doc View Source ArrangeOverride(Int32, Int32) Declaration protected override void ArrangeOverride(int arrangeWidth, int arrangeHeight) Parameters Type Name Description Int32 arrangeWidth Int32 arrangeHeight Overrides UIElement.ArrangeOverride(Int32, Int32) | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides Panel.MeasureOverride(Int32, Int32, out Int32, out Int32) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.Text.html": {
    "href": "api/nanoFramework.Presentation.Controls.Text.html",
    "title": "Class Text | nanoFramework Documentation",
    "keywords": "Class Text Inheritance Object DispatcherObject UIElement Text Inherited Members UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class Text : UIElement Constructors | Improve this Doc View Source Text() Declaration public Text() | Improve this Doc View Source Text(Font, String) Declaration public Text(Font font, string content) Parameters Type Name Description Font font String content | Improve this Doc View Source Text(String) Declaration public Text(string content) Parameters Type Name Description String content Fields | Improve this Doc View Source _font Declaration protected Font _font Field Value Type Description Font | Improve this Doc View Source _text Declaration protected string _text Field Value Type Description String Properties | Improve this Doc View Source Font Declaration public Font Font { get; set; } Property Value Type Description Font | Improve this Doc View Source ForeColor Declaration public Color ForeColor { get; set; } Property Value Type Description Color | Improve this Doc View Source LineHeight Declaration public int LineHeight { get; } Property Value Type Description Int32 | Improve this Doc View Source TextAlignment Declaration public TextAlignment TextAlignment { get; set; } Property Value Type Description TextAlignment | Improve this Doc View Source TextContent Declaration public string TextContent { get; set; } Property Value Type Description String | Improve this Doc View Source TextWrap Declaration public bool TextWrap { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Trimming Declaration public TextTrimming Trimming { get; set; } Property Value Type Description TextTrimming Methods | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides UIElement.MeasureOverride(Int32, Int32, out Int32, out Int32) | Improve this Doc View Source OnRender(DrawingContext) Declaration public override void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides UIElement.OnRender(DrawingContext) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.TextFlow.html": {
    "href": "api/nanoFramework.Presentation.Controls.TextFlow.html",
    "title": "Class TextFlow | nanoFramework Documentation",
    "keywords": "Class TextFlow Inheritance Object DispatcherObject UIElement TextFlow Inherited Members UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class TextFlow : UIElement Constructors | Improve this Doc View Source TextFlow() Declaration public TextFlow() Fields | Improve this Doc View Source TextRuns Declaration public TextRunCollection TextRuns Field Value Type Description TextRunCollection Properties | Improve this Doc View Source LineCount Declaration public int LineCount { get; } Property Value Type Description Int32 | Improve this Doc View Source ScrollingStyle Declaration public ScrollingStyle ScrollingStyle { get; set; } Property Value Type Description ScrollingStyle | Improve this Doc View Source TextAlignment Declaration public TextAlignment TextAlignment { get; set; } Property Value Type Description TextAlignment | Improve this Doc View Source TopLine Declaration public int TopLine { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides UIElement.MeasureOverride(Int32, Int32, out Int32, out Int32) | Improve this Doc View Source OnButtonDown(ButtonEventArgs) Declaration protected override void OnButtonDown(ButtonEventArgs e) Parameters Type Name Description ButtonEventArgs e Overrides UIElement.OnButtonDown(ButtonEventArgs) | Improve this Doc View Source OnRender(DrawingContext) Declaration public override void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides UIElement.OnRender(DrawingContext) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.TextRun.html": {
    "href": "api/nanoFramework.Presentation.Controls.TextRun.html",
    "title": "Class TextRun | nanoFramework Documentation",
    "keywords": "Class TextRun Inheritance Object TextRun Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class TextRun Constructors | Improve this Doc View Source TextRun(String, Font, Color) Declaration public TextRun(string text, Font font, Color foreColor) Parameters Type Name Description String text Font font Color foreColor Fields | Improve this Doc View Source _height Declaration protected int _height Field Value Type Description Int32 | Improve this Doc View Source _width Declaration protected int _width Field Value Type Description Int32 | Improve this Doc View Source Font Declaration public readonly Font Font Field Value Type Description Font | Improve this Doc View Source ForeColor Declaration public readonly Color ForeColor Field Value Type Description Color | Improve this Doc View Source Text Declaration public readonly string Text Field Value Type Description String Properties | Improve this Doc View Source EndOfLine Declaration public static TextRun EndOfLine { get; } Property Value Type Description TextRun Methods | Improve this Doc View Source GetSize(out Int32, out Int32) Declaration public void GetSize(out int width, out int height) Parameters Type Name Description Int32 width Int32 height Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.TextRunCollection.html": {
    "href": "api/nanoFramework.Presentation.Controls.TextRunCollection.html",
    "title": "Class TextRunCollection | nanoFramework Documentation",
    "keywords": "Class TextRunCollection Inheritance Object TextRunCollection Implements ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class TextRunCollection : ICollection, IEnumerable Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsSynchronized Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Declaration public TextRun this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description TextRun | Improve this Doc View Source SyncRoot Declaration public object SyncRoot { get; } Property Value Type Description Object Methods | Improve this Doc View Source Add(TextRun) Declaration public int Add(TextRun textRun) Parameters Type Name Description TextRun textRun Returns Type Description Int32 | Improve this Doc View Source Add(String, Font, Color) Declaration public int Add(string text, Font font, Color foreColor) Parameters Type Name Description String text Font font Color foreColor Returns Type Description Int32 | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(TextRun) Declaration public bool Contains(TextRun run) Parameters Type Name Description TextRun run Returns Type Description Boolean | Improve this Doc View Source CopyTo(Array, Int32) Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array Int32 index | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator | Improve this Doc View Source IndexOf(TextRun) Declaration public int IndexOf(TextRun run) Parameters Type Name Description TextRun run Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, TextRun) Declaration public void Insert(int index, TextRun run) Parameters Type Name Description Int32 index TextRun run | Improve this Doc View Source Remove(TextRun) Declaration public void Remove(TextRun run) Parameters Type Name Description TextRun run | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index Implements ICollection IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Controls.WrapPanel.html": {
    "href": "api/nanoFramework.Presentation.Controls.WrapPanel.html",
    "title": "Class WrapPanel | nanoFramework Documentation",
    "keywords": "Class WrapPanel WrapPanel is used to place child UIElements at sequential positions from left to the right and then \"wrap\" the lines of children from top to the bottom. All children get the layout partition of size ItemWidth x ItemHeight. Inheritance Object DispatcherObject UIElement Panel WrapPanel Inherited Members Panel.Children UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnRender(DrawingContext) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Controls Assembly : nanoFramework.Graphics.dll Syntax public class WrapPanel : Panel Properties | Improve this Doc View Source ItemHeight The ItemWidth and ItemHeight properties specify the size of all items in the WrapPanel. Note that children of WrapPanel may have their own Width/Height properties set - the ItemWidth/ItemHeight specifies the size of \"layout partition\" reserved by WrapPanel for the child. If this property is not set (equal to 0) - the size of layout partition is equal to DesiredSize of the child element. Declaration public int ItemHeight { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ItemWidth The ItemWidth and ItemHeight properties specify the size of all items in the WrapPanel. Note that children of WrapPanel may have their own Width/Height properties set - the ItemWidth/ItemHeight specifies the size of \"layout partition\" reserved by WrapPanel for the child. If this property is not set (equal to 0) - the size of layout partition is equal to DesiredSize of the child element. Declaration public int ItemWidth { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Orientation Specifies dimension of children positioning in absence of wrapping. Wrapping occurs in orthogonal direction. For example, if Orientation is Horizontal, the items try to form horizontal rows first and if needed are wrapped and form vertical stack of rows. If Orientation is Vertical, items first positioned in a vertical column, and if there is not enough space - wrapping creates additional columns in horizontal dimension. Declaration public Orientation Orientation { get; set; } Property Value Type Description Orientation Methods | Improve this Doc View Source ArrangeOverride(Int32, Int32) ArrangeOverride(Int32, Int32) Declaration protected override void ArrangeOverride(int arrangeWidth, int arrangeHeight) Parameters Type Name Description Int32 arrangeWidth Int32 arrangeHeight Overrides UIElement.ArrangeOverride(Int32, Int32) | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides Panel.MeasureOverride(Int32, Int32, out Int32, out Int32) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.HorizontalAlignment.html": {
    "href": "api/nanoFramework.Presentation.HorizontalAlignment.html",
    "title": "Enum HorizontalAlignment | nanoFramework Documentation",
    "keywords": "Enum HorizontalAlignment Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public enum HorizontalAlignment Fields Name Description Center Left Right Stretch Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.html": {
    "href": "api/nanoFramework.Presentation.html",
    "title": "Namespace nanoFramework.Presentation | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Presentation Classes PresentationSource Presentation source is our connection to the rest of the managed system. UIElement UIElementCollection A UIElementCollection is a ordered collection of UIElements. Window WindowManager Structs UIElementCollection.Enumerator This is a simple UIElementCollection enumerator that is based on the ArrayListEnumeratorSimple that is used for ArrayLists. The following comment is from the CLR people: For a straightforward enumeration of the entire ArrayList, this is faster, because it's smaller. Benchmarks showed this. Enums HorizontalAlignment SizeToContent SizeToContent VerticalAlignment Visibility Visibility - Enum which describes 3 possible visibility options. Delegates PostRenderEventHandler"
  },
  "api/nanoFramework.Presentation.Media.Brush.html": {
    "href": "api/nanoFramework.Presentation.Media.Brush.html",
    "title": "Class Brush | nanoFramework Documentation",
    "keywords": "Class Brush Inheritance Object Brush ImageBrush LinearGradientBrush SolidColorBrush Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public abstract class Brush Properties | Improve this Doc View Source Opacity Declaration public ushort Opacity { get; set; } Property Value Type Description UInt16 Methods | Improve this Doc View Source RenderEllipse(Bitmap, Pen, Int32, Int32, Int32, Int32) Declaration protected virtual void RenderEllipse(Bitmap bmp, Pen outline, int x, int y, int xRadius, int yRadius) Parameters Type Name Description Bitmap bmp Pen outline Int32 x Int32 y Int32 xRadius Int32 yRadius | Improve this Doc View Source RenderPolygon(Bitmap, Pen, Int32[]) Declaration protected virtual void RenderPolygon(Bitmap bmp, Pen outline, int[] pts) Parameters Type Name Description Bitmap bmp Pen outline Int32 [] pts | Improve this Doc View Source RenderRectangle(Bitmap, Pen, Int32, Int32, Int32, Int32) Declaration protected abstract void RenderRectangle(Bitmap bmp, Pen outline, int x, int y, int width, int height) Parameters Type Name Description Bitmap bmp Pen outline Int32 x Int32 y Int32 width Int32 height Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Media.BrushMappingMode.html": {
    "href": "api/nanoFramework.Presentation.Media.BrushMappingMode.html",
    "title": "Enum BrushMappingMode | nanoFramework Documentation",
    "keywords": "Enum BrushMappingMode Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public enum BrushMappingMode Fields Name Description Absolute RelativeToBoundingBox Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.Media.Color.html": {
    "href": "api/nanoFramework.Presentation.Media.Color.html",
    "title": "Enum Color | nanoFramework Documentation",
    "keywords": "Enum Color Note: Colors are not RGB 24-bit but are BGR 24-bit Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public enum Color : uint Fields Name Description AliceBlue AntiqueWhite Aqua Aquamarine Azure Beige Bisque Black BlanchedAlmond Blue BlueViolet Brown BurlyWood CadetBlue Chartreuse Chocolate Coral CornflowerBlue Cornsilk Crimson Cyan DarkBlue DarkCyan DarkGoldenrod DarkGray DarkGreen DarkKhaki DarkMagenta DarkOliveGreen DarkOrange DarkOrchid DarkRed DarkSalmon DarkSeaGreen DarkSlateBlue DarkSlateGray DarkTurquoise DarkViolet DeepPink DeepSkyBlue DimGray DodgerBlue Firebrick FloralWhite ForestGreen Gainsboro GhostWhite Gold Goldenrod Gray Green GreenYellow Honeydew HotPink IndianRed Indigo Ivory Khaki Lavender LavenderBlush LawnGreen LemonChiffon LightBlue LightCoral LightCyan LightGoldenrodYellow LightGray LightGreen LightPink LightSalmon LightSeaGreen LightSkyBlue LightSlateGray LightSteelBlue LightYellow Lime LimeGreen Linen Magenta Maroon MediumAquamarine MediumBlue MediumOrchid MediumPurple MediumSeaGreen MediumSlateBlue MediumSpringGreen MediumTurquoise MediumVioletRed MidnightBlue MintCream MistyRose Moccasin NavajoWhite Navy OldLace Olive OliveDrab Orange OrangeRed Orchid PaleGoldenrod PaleGreen PaleTurquoise PaleVioletRed PapayaWhip PeachPuff Peru Pink Plum PowderBlue Purple Red RosyBrown RoyalBlue SaddleBrown Salmon SandyBrown SeaGreen SeaShell Sienna Silver SkyBlue SlateBlue SlateGray Snow SpringGreen SteelBlue Tan Teal Thistle Tomato Turquoise Violet Wheat White WhiteSmoke Yellow YellowGreen Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.Media.ColorUtility.html": {
    "href": "api/nanoFramework.Presentation.Media.ColorUtility.html",
    "title": "Class ColorUtility | nanoFramework Documentation",
    "keywords": "Class ColorUtility Inheritance Object ColorUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public static class ColorUtility Methods | Improve this Doc View Source ColorFromRGB(Byte, Byte, Byte) Declaration public static Color ColorFromRGB(byte r, byte g, byte b) Parameters Type Name Description Byte r Byte g Byte b Returns Type Description Color | Improve this Doc View Source GetBValue(Color) Declaration public static byte GetBValue(Color color) Parameters Type Name Description Color color Returns Type Description Byte | Improve this Doc View Source GetGValue(Color) Declaration public static byte GetGValue(Color color) Parameters Type Name Description Color color Returns Type Description Byte | Improve this Doc View Source GetRValue(Color) Declaration public static byte GetRValue(Color color) Parameters Type Name Description Color color Returns Type Description Byte | Improve this Doc View Source To16Bpp(Color) Converts color into a 16bit representation. Declaration public static ushort To16Bpp(Color color) Parameters Type Name Description Color color A color. Returns Type Description UInt16 a 16 bit encoded representation."
  },
  "api/nanoFramework.Presentation.Media.Constants.html": {
    "href": "api/nanoFramework.Presentation.Media.Constants.html",
    "title": "Class Constants | nanoFramework Documentation",
    "keywords": "Class Constants Inheritance Object Constants Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public static class Constants Fields | Improve this Doc View Source MaxExtent Declaration public const int MaxExtent = 524287 Field Value Type Description Int32"
  },
  "api/nanoFramework.Presentation.Media.DrawingContext.html": {
    "href": "api/nanoFramework.Presentation.Media.DrawingContext.html",
    "title": "Class DrawingContext | nanoFramework Documentation",
    "keywords": "Class DrawingContext Drawing Context. Inheritance Object DispatcherObject DrawingContext Implements IDisposable Inherited Members DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public class DrawingContext : DispatcherObject, IDisposable Constructors | Improve this Doc View Source DrawingContext(Bitmap) Declaration public DrawingContext(Bitmap bmp) Parameters Type Name Description Bitmap bmp | Improve this Doc View Source DrawingContext(Int32, Int32) Declaration public DrawingContext(int width, int height) Parameters Type Name Description Int32 width Int32 height Properties | Improve this Doc View Source Bitmap Declaration public Bitmap Bitmap { get; } Property Value Type Description Bitmap | Improve this Doc View Source Height Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Width Declaration public int Width { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source BlendImage(Bitmap, Int32, Int32, Int32, Int32, Int32, Int32, UInt16) Declaration public void BlendImage(Bitmap source, int destinationX, int destinationY, int sourceX, int sourceY, int sourceWidth, int sourceHeight, ushort opacity) Parameters Type Name Description Bitmap source Int32 destinationX Int32 destinationY Int32 sourceX Int32 sourceY Int32 sourceWidth Int32 sourceHeight UInt16 opacity | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source DrawEllipse(Brush, Pen, Int32, Int32, Int32, Int32) Declaration public void DrawEllipse(Brush brush, Pen pen, int x, int y, int xRadius, int yRadius) Parameters Type Name Description Brush brush Pen pen Int32 x Int32 y Int32 xRadius Int32 yRadius | Improve this Doc View Source DrawImage(Bitmap, Int32, Int32) Declaration public void DrawImage(Bitmap source, int x, int y) Parameters Type Name Description Bitmap source Int32 x Int32 y | Improve this Doc View Source DrawImage(Bitmap, Int32, Int32, Int32, Int32, Int32, Int32) Declaration public void DrawImage(Bitmap source, int destinationX, int destinationY, int sourceX, int sourceY, int sourceWidth, int sourceHeight) Parameters Type Name Description Bitmap source Int32 destinationX Int32 destinationY Int32 sourceX Int32 sourceY Int32 sourceWidth Int32 sourceHeight | Improve this Doc View Source DrawLine(Pen, Int32, Int32, Int32, Int32) Declaration public void DrawLine(Pen pen, int x0, int y0, int x1, int y1) Parameters Type Name Description Pen pen Int32 x0 Int32 y0 Int32 x1 Int32 y1 | Improve this Doc View Source DrawPolygon(Brush, Pen, Int32[]) Declaration public void DrawPolygon(Brush brush, Pen pen, int[] pts) Parameters Type Name Description Brush brush Pen pen Int32 [] pts | Improve this Doc View Source DrawRectangle(Brush, Pen, Int32, Int32, Int32, Int32) Declaration public void DrawRectangle(Brush brush, Pen pen, int x, int y, int width, int height) Parameters Type Name Description Brush brush Pen pen Int32 x Int32 y Int32 width Int32 height | Improve this Doc View Source DrawText(String, Font, Color, Int32, Int32) Declaration public void DrawText(string text, Font font, Color color, int x, int y) Parameters Type Name Description String text Font font Color color Int32 x Int32 y | Improve this Doc View Source DrawText(ref String, Font, Color, Int32, Int32, Int32, Int32, TextAlignment, TextTrimming) Declaration public bool DrawText(ref string text, Font font, Color color, int x, int y, int width, int height, TextAlignment alignment, TextTrimming trimming) Parameters Type Name Description String text Font font Color color Int32 x Int32 y Int32 width Int32 height TextAlignment alignment TextTrimming trimming Returns Type Description Boolean | Improve this Doc View Source GetClippingRectangle(out Int32, out Int32, out Int32, out Int32) Declaration public void GetClippingRectangle(out int x, out int y, out int width, out int height) Parameters Type Name Description Int32 x Int32 y Int32 width Int32 height | Improve this Doc View Source GetTranslation(out Int32, out Int32) Declaration public void GetTranslation(out int x, out int y) Parameters Type Name Description Int32 x Int32 y | Improve this Doc View Source PopClippingRectangle() Declaration public void PopClippingRectangle() | Improve this Doc View Source PushClippingRectangle(Int32, Int32, Int32, Int32) Declaration public void PushClippingRectangle(int x, int y, int width, int height) Parameters Type Name Description Int32 x Int32 y Int32 width Int32 height | Improve this Doc View Source RotateImage(Int32, Int32, Int32, Bitmap, Int32, Int32, Int32, Int32, UInt16) Declaration public void RotateImage(int angle, int destinationX, int destinationY, Bitmap bitmap, int sourceX, int sourceY, int sourceWidth, int sourceHeight, ushort opacity) Parameters Type Name Description Int32 angle Int32 destinationX Int32 destinationY Bitmap bitmap Int32 sourceX Int32 sourceY Int32 sourceWidth Int32 sourceHeight UInt16 opacity | Improve this Doc View Source Scale9Image(Int32, Int32, Int32, Int32, Bitmap, Int32, Int32, Int32, Int32, UInt16) Declaration public void Scale9Image(int xDst, int yDst, int widthDst, int heightDst, Bitmap bitmap, int leftBorder, int topBorder, int rightBorder, int bottomBorder, ushort opacity) Parameters Type Name Description Int32 xDst Int32 yDst Int32 widthDst Int32 heightDst Bitmap bitmap Int32 leftBorder Int32 topBorder Int32 rightBorder Int32 bottomBorder UInt16 opacity | Improve this Doc View Source SetPixel(Color, Int32, Int32) Declaration public void SetPixel(Color color, int x, int y) Parameters Type Name Description Color color Int32 x Int32 y | Improve this Doc View Source StretchImage(Int32, Int32, Int32, Int32, Bitmap, Int32, Int32, Int32, Int32, UInt16) Declaration public void StretchImage(int xDst, int yDst, int widthDst, int heightDst, Bitmap bitmap, int xSrc, int ySrc, int widthSrc, int heightSrc, ushort opacity) Parameters Type Name Description Int32 xDst Int32 yDst Int32 widthDst Int32 heightDst Bitmap bitmap Int32 xSrc Int32 ySrc Int32 widthSrc Int32 heightSrc UInt16 opacity | Improve this Doc View Source TileImage(Int32, Int32, Bitmap, Int32, Int32, UInt16) Declaration public void TileImage(int xDst, int yDst, Bitmap bitmap, int width, int height, ushort opacity) Parameters Type Name Description Int32 xDst Int32 yDst Bitmap bitmap Int32 width Int32 height UInt16 opacity | Improve this Doc View Source Translate(Int32, Int32) Declaration public void Translate(int dx, int dy) Parameters Type Name Description Int32 dx Int32 dy Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Media.html": {
    "href": "api/nanoFramework.Presentation.Media.html",
    "title": "Namespace nanoFramework.Presentation.Media | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Presentation.Media Classes Brush ColorUtility Constants DrawingContext Drawing Context. ImageBrush LinearGradientBrush Pen SolidColorBrush Enums BrushMappingMode Color Note: Colors are not RGB 24-bit but are BGR 24-bit Stretch TextAlignment TextTrimming"
  },
  "api/nanoFramework.Presentation.Media.ImageBrush.html": {
    "href": "api/nanoFramework.Presentation.Media.ImageBrush.html",
    "title": "Class ImageBrush | nanoFramework Documentation",
    "keywords": "Class ImageBrush Inheritance Object Brush ImageBrush Inherited Members Brush.Opacity Brush.RenderEllipse(Bitmap, Pen, Int32, Int32, Int32, Int32) Brush.RenderPolygon(Bitmap, Pen, Int32[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public sealed class ImageBrush : Brush Constructors | Improve this Doc View Source ImageBrush(Bitmap) Declaration public ImageBrush(Bitmap bmp) Parameters Type Name Description Bitmap bmp Fields | Improve this Doc View Source BitmapSource Declaration public Bitmap BitmapSource Field Value Type Description Bitmap | Improve this Doc View Source Stretch Declaration public Stretch Stretch Field Value Type Description Stretch Methods | Improve this Doc View Source RenderRectangle(Bitmap, Pen, Int32, Int32, Int32, Int32) Declaration protected override void RenderRectangle(Bitmap bmp, Pen pen, int x, int y, int width, int height) Parameters Type Name Description Bitmap bmp Pen pen Int32 x Int32 y Int32 width Int32 height Overrides Brush.RenderRectangle(Bitmap, Pen, Int32, Int32, Int32, Int32) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Media.LinearGradientBrush.html": {
    "href": "api/nanoFramework.Presentation.Media.LinearGradientBrush.html",
    "title": "Class LinearGradientBrush | nanoFramework Documentation",
    "keywords": "Class LinearGradientBrush Inheritance Object Brush LinearGradientBrush Inherited Members Brush.Opacity Brush.RenderEllipse(Bitmap, Pen, Int32, Int32, Int32, Int32) Brush.RenderPolygon(Bitmap, Pen, Int32[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public sealed class LinearGradientBrush : Brush Constructors | Improve this Doc View Source LinearGradientBrush(Color, Color) Declaration public LinearGradientBrush(Color startColor, Color endColor) Parameters Type Name Description Color startColor Color endColor | Improve this Doc View Source LinearGradientBrush(Color, Color, Int32, Int32, Int32, Int32) Declaration public LinearGradientBrush(Color startColor, Color endColor, int startX, int startY, int endX, int endY) Parameters Type Name Description Color startColor Color endColor Int32 startX Int32 startY Int32 endX Int32 endY Fields | Improve this Doc View Source EndColor Declaration public Color EndColor Field Value Type Description Color | Improve this Doc View Source EndX Declaration public int EndX Field Value Type Description Int32 | Improve this Doc View Source EndY Declaration public int EndY Field Value Type Description Int32 | Improve this Doc View Source MappingMode Declaration public BrushMappingMode MappingMode Field Value Type Description BrushMappingMode | Improve this Doc View Source RelativeBoundingBoxSize Declaration public const int RelativeBoundingBoxSize = 1000 Field Value Type Description Int32 | Improve this Doc View Source StartColor Declaration public Color StartColor Field Value Type Description Color | Improve this Doc View Source StartX Declaration public int StartX Field Value Type Description Int32 | Improve this Doc View Source StartY Declaration public int StartY Field Value Type Description Int32 Methods | Improve this Doc View Source RenderRectangle(Bitmap, Pen, Int32, Int32, Int32, Int32) Declaration protected override void RenderRectangle(Bitmap bmp, Pen pen, int x, int y, int width, int height) Parameters Type Name Description Bitmap bmp Pen pen Int32 x Int32 y Int32 width Int32 height Overrides Brush.RenderRectangle(Bitmap, Pen, Int32, Int32, Int32, Int32) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Media.Pen.html": {
    "href": "api/nanoFramework.Presentation.Media.Pen.html",
    "title": "Class Pen | nanoFramework Documentation",
    "keywords": "Class Pen Inheritance Object Pen Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public class Pen Constructors | Improve this Doc View Source Pen(Color) Declaration public Pen(Color color) Parameters Type Name Description Color color | Improve this Doc View Source Pen(Color, UInt16) Declaration public Pen(Color color, ushort thickness) Parameters Type Name Description Color color UInt16 thickness Fields | Improve this Doc View Source Color Declaration public Color Color Field Value Type Description Color | Improve this Doc View Source Thickness Declaration public ushort Thickness Field Value Type Description UInt16 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Media.SolidColorBrush.html": {
    "href": "api/nanoFramework.Presentation.Media.SolidColorBrush.html",
    "title": "Class SolidColorBrush | nanoFramework Documentation",
    "keywords": "Class SolidColorBrush Inheritance Object Brush SolidColorBrush Inherited Members Brush.Opacity Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public sealed class SolidColorBrush : Brush Constructors | Improve this Doc View Source SolidColorBrush(Color) Declaration public SolidColorBrush(Color color) Parameters Type Name Description Color color Fields | Improve this Doc View Source Color Declaration public Color Color Field Value Type Description Color Methods | Improve this Doc View Source RenderEllipse(Bitmap, Pen, Int32, Int32, Int32, Int32) Declaration protected override void RenderEllipse(Bitmap bmp, Pen pen, int x, int y, int xRadius, int yRadius) Parameters Type Name Description Bitmap bmp Pen pen Int32 x Int32 y Int32 xRadius Int32 yRadius Overrides Brush.RenderEllipse(Bitmap, Pen, Int32, Int32, Int32, Int32) | Improve this Doc View Source RenderPolygon(Bitmap, Pen, Int32[]) Basic algorithm uses scan lines to fill the polygon. No multiplication or division is needed, neither is floating point calculation. Declaration protected override void RenderPolygon(Bitmap bmp, Pen outline, int[] pts) Parameters Type Name Description Bitmap bmp Pen outline Int32 [] pts Overrides Brush.RenderPolygon(Bitmap, Pen, Int32[]) | Improve this Doc View Source RenderRectangle(Bitmap, Pen, Int32, Int32, Int32, Int32) Declaration protected override void RenderRectangle(Bitmap bmp, Pen pen, int x, int y, int width, int height) Parameters Type Name Description Bitmap bmp Pen pen Int32 x Int32 y Int32 width Int32 height Overrides Brush.RenderRectangle(Bitmap, Pen, Int32, Int32, Int32, Int32) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Media.Stretch.html": {
    "href": "api/nanoFramework.Presentation.Media.Stretch.html",
    "title": "Enum Stretch | nanoFramework Documentation",
    "keywords": "Enum Stretch Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public enum Stretch Fields Name Description Fill None Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.Media.TextAlignment.html": {
    "href": "api/nanoFramework.Presentation.Media.TextAlignment.html",
    "title": "Enum TextAlignment | nanoFramework Documentation",
    "keywords": "Enum TextAlignment Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public enum TextAlignment Fields Name Description Center Left Right Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.Media.TextTrimming.html": {
    "href": "api/nanoFramework.Presentation.Media.TextTrimming.html",
    "title": "Enum TextTrimming | nanoFramework Documentation",
    "keywords": "Enum TextTrimming Namespace : nanoFramework.Presentation.Media Assembly : nanoFramework.Graphics.dll Syntax public enum TextTrimming Fields Name Description CharacterEllipsis None WordEllipsis Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.PostRenderEventHandler.html": {
    "href": "api/nanoFramework.Presentation.PostRenderEventHandler.html",
    "title": "Delegate PostRenderEventHandler | nanoFramework Documentation",
    "keywords": "Delegate PostRenderEventHandler Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public delegate void PostRenderEventHandler(DrawingContext dc); Parameters Type Name Description DrawingContext dc Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.PresentationSource.html": {
    "href": "api/nanoFramework.Presentation.PresentationSource.html",
    "title": "Class PresentationSource | nanoFramework Documentation",
    "keywords": "Class PresentationSource Presentation source is our connection to the rest of the managed system. Inheritance Object DispatcherObject PresentationSource Inherited Members DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public class PresentationSource : DispatcherObject Constructors | Improve this Doc View Source PresentationSource() Constructs an instance of the PresentationSource object. Declaration public PresentationSource() Properties | Improve this Doc View Source RootUIElement The Root UIElement for this source. Declaration public UIElement RootUIElement { get; set; } Property Value Type Description UIElement Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Shapes.Direction.html": {
    "href": "api/nanoFramework.Presentation.Shapes.Direction.html",
    "title": "Enum Direction | nanoFramework Documentation",
    "keywords": "Enum Direction Namespace : nanoFramework.Presentation.Shapes Assembly : nanoFramework.Graphics.dll Syntax public enum Direction Fields Name Description BottomToTop TopToBottom Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.Shapes.Ellipse.html": {
    "href": "api/nanoFramework.Presentation.Shapes.Ellipse.html",
    "title": "Class Ellipse | nanoFramework Documentation",
    "keywords": "Class Ellipse Inheritance Object DispatcherObject UIElement Shape Ellipse Inherited Members Shape.Fill Shape.Stroke UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.MeasureOverride(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Shapes Assembly : nanoFramework.Graphics.dll Syntax public class Ellipse : Shape Constructors | Improve this Doc View Source Ellipse(Int32, Int32) Declaration public Ellipse(int xRadius, int yRadius) Parameters Type Name Description Int32 xRadius Int32 yRadius Methods | Improve this Doc View Source OnRender(DrawingContext) Declaration public override void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides UIElement.OnRender(DrawingContext) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Shapes.html": {
    "href": "api/nanoFramework.Presentation.Shapes.html",
    "title": "Namespace nanoFramework.Presentation.Shapes | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Presentation.Shapes Classes Ellipse Line Polygon Rectangle Shape Enums Direction"
  },
  "api/nanoFramework.Presentation.Shapes.Line.html": {
    "href": "api/nanoFramework.Presentation.Shapes.Line.html",
    "title": "Class Line | nanoFramework Documentation",
    "keywords": "Class Line Inheritance Object DispatcherObject UIElement Shape Line Inherited Members Shape.Fill Shape.Stroke UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.MeasureOverride(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Shapes Assembly : nanoFramework.Graphics.dll Syntax public class Line : Shape Constructors | Improve this Doc View Source Line() Declaration public Line() | Improve this Doc View Source Line(Int32, Int32) Declaration public Line(int dx, int dy) Parameters Type Name Description Int32 dx Int32 dy Properties | Improve this Doc View Source Direction Declaration public Direction Direction { get; set; } Property Value Type Description Direction Methods | Improve this Doc View Source OnRender(DrawingContext) Declaration public override void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides UIElement.OnRender(DrawingContext) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Shapes.Polygon.html": {
    "href": "api/nanoFramework.Presentation.Shapes.Polygon.html",
    "title": "Class Polygon | nanoFramework Documentation",
    "keywords": "Class Polygon Inheritance Object DispatcherObject UIElement Shape Polygon Inherited Members Shape.Fill Shape.Stroke UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.MeasureOverride(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Shapes Assembly : nanoFramework.Graphics.dll Syntax public class Polygon : Shape Constructors | Improve this Doc View Source Polygon() Declaration public Polygon() | Improve this Doc View Source Polygon(Int32[]) Declaration public Polygon(int[] pts) Parameters Type Name Description Int32 [] pts Properties | Improve this Doc View Source Points Declaration public int[] Points { get; set; } Property Value Type Description Int32 [] Methods | Improve this Doc View Source OnRender(DrawingContext) Declaration public override void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides UIElement.OnRender(DrawingContext) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Shapes.Rectangle.html": {
    "href": "api/nanoFramework.Presentation.Shapes.Rectangle.html",
    "title": "Class Rectangle | nanoFramework Documentation",
    "keywords": "Class Rectangle Inheritance Object DispatcherObject UIElement Shape Rectangle Inherited Members Shape.Fill Shape.Stroke UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.MeasureOverride(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Shapes Assembly : nanoFramework.Graphics.dll Syntax public class Rectangle : Shape Constructors | Improve this Doc View Source Rectangle() Declaration public Rectangle() | Improve this Doc View Source Rectangle(Int32, Int32) Declaration public Rectangle(int width, int height) Parameters Type Name Description Int32 width Int32 height Methods | Improve this Doc View Source OnRender(DrawingContext) Declaration public override void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides UIElement.OnRender(DrawingContext) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.Shapes.Shape.html": {
    "href": "api/nanoFramework.Presentation.Shapes.Shape.html",
    "title": "Class Shape | nanoFramework Documentation",
    "keywords": "Class Shape Inheritance Object DispatcherObject UIElement Shape Ellipse Line Polygon Rectangle Inherited Members UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.MeasureOverride(Int32, Int32, Int32, Int32) UIElement.ArrangeOverride(Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnRender(DrawingContext) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation.Shapes Assembly : nanoFramework.Graphics.dll Syntax public abstract class Shape : UIElement Properties | Improve this Doc View Source Fill Declaration public Brush Fill { get; set; } Property Value Type Description Brush | Improve this Doc View Source Stroke Declaration public Pen Stroke { get; set; } Property Value Type Description Pen Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.SizeToContent.html": {
    "href": "api/nanoFramework.Presentation.SizeToContent.html",
    "title": "Enum SizeToContent | nanoFramework Documentation",
    "keywords": "Enum SizeToContent SizeToContent Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public enum SizeToContent Fields Name Description Height Sizes Height to content's Height Manual Does not size to content Width Sizes Width to content's Width WidthAndHeight Sizes both Width and Height to content's size Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.UIElement.html": {
    "href": "api/nanoFramework.Presentation.UIElement.html",
    "title": "Class UIElement | nanoFramework Documentation",
    "keywords": "Class UIElement Inheritance Object DispatcherObject UIElement Control Image InkCanvas Panel Text TextFlow Shape Inherited Members DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public abstract class UIElement : DispatcherObject Constructors | Improve this Doc View Source UIElement() Declaration protected UIElement() Fields | Improve this Doc View Source _horizontalAlignment Declaration protected HorizontalAlignment _horizontalAlignment Field Value Type Description HorizontalAlignment | Improve this Doc View Source _verticalAlignment Declaration protected VerticalAlignment _verticalAlignment Field Value Type Description VerticalAlignment Properties | Improve this Doc View Source ActualHeight Declaration public int ActualHeight { get; } Property Value Type Description Int32 | Improve this Doc View Source ActualWidth Declaration public int ActualWidth { get; } Property Value Type Description Int32 | Improve this Doc View Source Height Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source HorizontalAlignment Declaration public HorizontalAlignment HorizontalAlignment { get; set; } Property Value Type Description HorizontalAlignment | Improve this Doc View Source InstanceEventHandlersStore Ensure the store has been created. Declaration protected Hashtable InstanceEventHandlersStore { get; } Property Value Type Description Hashtable | Improve this Doc View Source IsArrangeValid Determines if the RenderSize and position of child elements is valid. Declaration public bool IsArrangeValid { get; } Property Value Type Description Boolean Remarks A developer can force arrangement to be invalidated by calling InvalidateArrange. IsArrangeValid and IsMeasureValid are related, in that arrangement cannot be valid without measurement first being valid. | Improve this Doc View Source IsEnabled Fetches the value of the IsEnabled property Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsFocused A property indicating if the button is focused on this element or not. Declaration public bool IsFocused { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMeasureValid Determines if the DesiredSize is valid. Declaration public bool IsMeasureValid { get; } Property Value Type Description Boolean Remarks A developer can force arrangement to be invalidated by calling InvalidateMeasure. IsArrangeValid and IsMeasureValid are related, in that arrangement cannot be valid without measurement first being valid. | Improve this Doc View Source IsVisible A property indicating if this element is Visible or not. Declaration public bool IsVisible { get; } Property Value Type Description Boolean | Improve this Doc View Source LogicalChildren Declaration protected UIElementCollection LogicalChildren { get; } Property Value Type Description UIElementCollection | Improve this Doc View Source Parent Declaration public UIElement Parent { get; } Property Value Type Description UIElement | Improve this Doc View Source RootUIElement Declaration public UIElement RootUIElement { get; } Property Value Type Description UIElement | Improve this Doc View Source VerticalAlignment Declaration public VerticalAlignment VerticalAlignment { get; set; } Property Value Type Description VerticalAlignment | Improve this Doc View Source Visibility Visibility accessor Declaration public Visibility Visibility { get; set; } Property Value Type Description Visibility | Improve this Doc View Source Width Declaration public int Width { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source AddHandler(RoutedEvent, RoutedEventHandler, Boolean) Adds a routed event handler for the particular RoutedEvent Declaration public void AddHandler(RoutedEvent routedEvent, RoutedEventHandler handler, bool handledEventsToo) Parameters Type Name Description RoutedEvent routedEvent RoutedEvent for which the handler is attached RoutedEventHandler handler The handler that will be invoked on this object when the RoutedEvent is raised Boolean handledEventsToo Flag indicating whether or not the listener wants to hear about events that have already been handled Remarks The handler added thus is also known as an instance handler NOTE: It is not an error to add a handler twice (handler will simply be called twice) Input parameters RoutedEvent and handler cannot be null handledEventsToo input parameter when false means that listener does not care about already handled events. Hence the handler will not be invoked on the target if the RoutedEvent has already been Handled handledEventsToo input parameter when true means that the listener wants to hear about all events even if they have already been handled. Hence the handler will be invoked irrespective of the event being Handled | Improve this Doc View Source AddToEventRoute(EventRoute, RoutedEventArgs) Add the event handlers for this element to the route. Declaration public void AddToEventRoute(EventRoute route, RoutedEventArgs args) Parameters Type Name Description EventRoute route RoutedEventArgs args | Improve this Doc View Source Arrange(Int32, Int32, Int32, Int32) Parents or system call this method to arrange the internals of children on a second pass of layout update. Declaration public void Arrange(int finalRectX, int finalRectY, int finalRectWidth, int finalRectHeight) Parameters Type Name Description Int32 finalRectX This is the final X location that parent or system wants this UIElement to assume. Int32 finalRectY This is the final Y location that parent or system wants this UIElement to assume. Int32 finalRectWidth This is the Width that parent or system wants this UIElement to assume. Int32 finalRectHeight This is the height that parent or system wants this UIElement to assume. Remarks This method internally calls ArrangeOverride override, giving the derived class opportunity to arrange its children and/or content using final computed size. In their ArrangeOverride overrides, derived class is supposed to create its visual structure and prepare itself for rendering. Arrange is called by parents from their implementation of ArrangeOverride or by system when needed. This method sets Bounds=finalSize before calling ArrangeOverride. | Improve this Doc View Source ArrangeOverride(Int32, Int32) ArrangeOverride allows for the customization of the final sizing and positioning of children. Declaration protected virtual void ArrangeOverride(int arrangeWidth, int arrangeHeight) Parameters Type Name Description Int32 arrangeWidth Final width Int32 arrangeHeight Final height Remarks UIElement authors should override this method, call Arrange on each visible child UIElement, to size and position each child UIElement by passing a rectangle reserved for the child within parent space. Note: It is required that a parent UIElement calls Arrange on each child or they won't be rendered. Typical override follows a pattern roughly like this (pseudo-code): protected override void ArrangeOverride(int arrangeWidth, int arrangeHeight) { foreach (UIElement child in VisualChildren) { child.Arrange(new Rect(childX, childY, childWidth, childHeight); } } | Improve this Doc View Source ChildElementFromPoint(Int32, Int32) Given x, y co-ordinates of the parent UIElement, find the child control that is directly underneath that point. If there are multiple such controls, the one that was created/inserted into the list last wins. This is because we don't have explicit z-ordering right now. Declaration public UIElement ChildElementFromPoint(int x, int y) Parameters Type Name Description Int32 x Int32 y Returns Type Description UIElement | Improve this Doc View Source ContainsPoint(Int32, Int32) Declaration public bool ContainsPoint(int x, int y) Parameters Type Name Description Int32 x Int32 y Returns Type Description Boolean | Improve this Doc View Source GetDesiredSize(out Int32, out Int32) Declaration public void GetDesiredSize(out int width, out int height) Parameters Type Name Description Int32 width Int32 height | Improve this Doc View Source GetLayoutOffset(out Int32, out Int32) Declaration public void GetLayoutOffset(out int x, out int y) Parameters Type Name Description Int32 x Int32 y | Improve this Doc View Source GetMargin(out Int32, out Int32, out Int32, out Int32) Declaration public void GetMargin(out int left, out int top, out int right, out int bottom) Parameters Type Name Description Int32 left Int32 top Int32 right Int32 bottom | Improve this Doc View Source GetPointerTarget(Int32, Int32) Declaration public UIElement GetPointerTarget(int x, int y) Parameters Type Name Description Int32 x Int32 y Returns Type Description UIElement | Improve this Doc View Source GetRenderSize(out Int32, out Int32) Declaration public void GetRenderSize(out int width, out int height) Parameters Type Name Description Int32 width Int32 height | Improve this Doc View Source GetUnclippedSize(out Int32, out Int32) Declaration public void GetUnclippedSize(out int width, out int height) Parameters Type Name Description Int32 width Int32 height | Improve this Doc View Source Invalidate() Declaration public void Invalidate() | Improve this Doc View Source InvalidateArrange() Invalidates the arrange state for the UIElement. The UIElement will be queued for an update layout that will occur asynchronously. MeasureOverride will not be called unless InvalidateMeasure is also called - or that something else caused the measure state to be invalidated. Declaration public void InvalidateArrange() | Improve this Doc View Source InvalidateMeasure() Invalidates the measurement state for the UIElement. This has the effect of also invalidating the arrange state for the UIElement. The UIElement will be queued for an update layout that will occur asynchronously. Declaration public void InvalidateMeasure() | Improve this Doc View Source InvalidateRect(Int32, Int32, Int32, Int32) Declaration public void InvalidateRect(int x, int y, int w, int h) Parameters Type Name Description Int32 x Int32 y Int32 w Int32 h | Improve this Doc View Source Measure(Int32, Int32) Updates DesiredSize of the UIElement. Must be called by parents from their MeasureOverride, to form recursive update. This is first pass of layout update. Declaration public void Measure(int availableWidth, int availableHeight) Parameters Type Name Description Int32 availableWidth Available width that parent can give to the child. May be MaxValue (when parent wants to measure to content). This is soft constraint. Child can return bigger size to indicate that it wants bigger space and hope that parent can throw in scrolling... Int32 availableHeight Available height that parent can give to the child. May be MaxValue (when parent wants to measure to content). This is soft constraint. Child can return bigger size to indicate that it wants bigger space and hope that parent can throw in scrolling... Remarks Measure is called by parents on their children. Internally, Measure calls MeasureOverride override on the same object, giving it opportunity to compute its DesiredSize. This method will return immediately if child is not Dirty, previously measured and availableSize is the same as cached. This method also resets the IsMeasureinvalid bit on the child. In case when \"unbounded measure to content\" is needed, parent can use availableSize as double.PositiveInfinity. Any returned size is OK in this case. | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Measurement override. Implement your size-to-content logic here. Declaration protected virtual void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Available size that parent can give to the child. May be MaxValue(when parent wants to measure to content). This is soft constraint. Child can return bigger size to indicate that it wants bigger space and hope that parent can throw in scrolling... Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Remarks MeasureOverride is designed to be the main customizability point for size control of layout. UIElement authors should override this method, call Measure on each child UIElement, and compute their desired size based upon the measurement of the children. The return value should be the desired size. Note: It is required that a parent UIElement calls Measure on each child or they won't be sized/arranged. Typical override follows a pattern roughly like this (pseudo-code): protected override void MeasureOverride(int avialableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) { foreach (UIElement child in VisualChildren) { child.Measure(availableSize); availableSize.Deflate(child.DesiredSize); _cache.StoreInfoAboutChild(child); } Size desired = CalculateBasedOnCache(_cache); return desired; } The key aspects of this snippet are: | Improve this Doc View Source OnButtonDown(ButtonEventArgs) Declaration protected virtual void OnButtonDown(ButtonEventArgs e) Parameters Type Name Description ButtonEventArgs e | Improve this Doc View Source OnButtonUp(ButtonEventArgs) Declaration protected virtual void OnButtonUp(ButtonEventArgs e) Parameters Type Name Description ButtonEventArgs e | Improve this Doc View Source OnChildDesiredSizeChanged(UIElement) Notification that is called by Measure of a child when it ends up with different desired size for the child. Declaration protected virtual void OnChildDesiredSizeChanged(UIElement child) Parameters Type Name Description UIElement child Remarks Default implementation simply calls invalidateMeasure(), assuming that layout of a parent should be updated after child changed its size. Finer point: this method can only be called in the scenario when the system calls Measure on a child, not when parent calls it since if parent calls it, it means parent has dirty layout and is recalculating already. | Improve this Doc View Source OnChildrenChanged(UIElement, UIElement, Int32) OnChildrenChanged is called when the UIElementCollection of the UIElement is edited. Declaration protected virtual void OnChildrenChanged(UIElement added, UIElement removed, int indexAffected) Parameters Type Name Description UIElement added UIElement removed Int32 indexAffected | Improve this Doc View Source OnGenericEvent(GenericEventArgs) Declaration protected virtual void OnGenericEvent(GenericEventArgs e) Parameters Type Name Description GenericEventArgs e | Improve this Doc View Source OnGotFocus(FocusChangedEventArgs) Declaration protected virtual void OnGotFocus(FocusChangedEventArgs e) Parameters Type Name Description FocusChangedEventArgs e | Improve this Doc View Source OnLostFocus(FocusChangedEventArgs) Declaration protected virtual void OnLostFocus(FocusChangedEventArgs e) Parameters Type Name Description FocusChangedEventArgs e | Improve this Doc View Source OnPreviewButtonDown(ButtonEventArgs) Declaration protected virtual void OnPreviewButtonDown(ButtonEventArgs e) Parameters Type Name Description ButtonEventArgs e | Improve this Doc View Source OnPreviewButtonUp(ButtonEventArgs) Declaration protected virtual void OnPreviewButtonUp(ButtonEventArgs e) Parameters Type Name Description ButtonEventArgs e | Improve this Doc View Source OnRender(DrawingContext) Declaration public virtual void OnRender(DrawingContext dc) Parameters Type Name Description DrawingContext dc | Improve this Doc View Source OnTouchDown(TouchEventArgs) Declaration protected virtual void OnTouchDown(TouchEventArgs e) Parameters Type Name Description TouchEventArgs e | Improve this Doc View Source OnTouchGestureChanged(TouchGestureEventArgs) Declaration protected virtual void OnTouchGestureChanged(TouchGestureEventArgs e) Parameters Type Name Description TouchGestureEventArgs e | Improve this Doc View Source OnTouchGestureEnded(TouchGestureEventArgs) Declaration protected virtual void OnTouchGestureEnded(TouchGestureEventArgs e) Parameters Type Name Description TouchGestureEventArgs e | Improve this Doc View Source OnTouchGestureStarted(TouchGestureEventArgs) Declaration protected virtual void OnTouchGestureStarted(TouchGestureEventArgs e) Parameters Type Name Description TouchGestureEventArgs e | Improve this Doc View Source OnTouchMove(TouchEventArgs) Declaration protected virtual void OnTouchMove(TouchEventArgs e) Parameters Type Name Description TouchEventArgs e | Improve this Doc View Source OnTouchUp(TouchEventArgs) Declaration protected virtual void OnTouchUp(TouchEventArgs e) Parameters Type Name Description TouchEventArgs e | Improve this Doc View Source PointToClient(ref Int32, ref Int32) Declaration public void PointToClient(ref int x, ref int y) Parameters Type Name Description Int32 x Int32 y | Improve this Doc View Source PointToScreen(ref Int32, ref Int32) We are deviating little from their desktop counter parts, mostly for simplicity and perf. Declaration public void PointToScreen(ref int x, ref int y) Parameters Type Name Description Int32 x Int32 y | Improve this Doc View Source RaiseEvent(RoutedEventArgs) Raise the events specified by RoutedEvent Declaration public void RaiseEvent(RoutedEventArgs args) Parameters Type Name Description RoutedEventArgs args RoutedEventArgs for the event to be raised Remarks This method is a shorthand for This method walks up the visual tree, calling cref=\"UIElement.BuildRouteCore\" on every cref=\"UIElement\" NOTE: The RoutedEvent in RoutedEventArgs and EventRoute must be matched Once the route is built, it calls InvokeHandlers() | Improve this Doc View Source RenderRecursive(DrawingContext) Declaration protected virtual void RenderRecursive(DrawingContext dc) Parameters Type Name Description DrawingContext dc | Improve this Doc View Source SetMargin(Int32) Declaration public void SetMargin(int length) Parameters Type Name Description Int32 length | Improve this Doc View Source SetMargin(Int32, Int32, Int32, Int32) Declaration public void SetMargin(int left, int top, int right, int bottom) Parameters Type Name Description Int32 left Int32 top Int32 right Int32 bottom | Improve this Doc View Source UpdateLayout() Call this method to ensure that the whoel subtree of elements that includes this UIElement is properly updated. Declaration public void UpdateLayout() Remarks This ensures that UIElements with IsMeasureInvalid or IsArrangeInvalid will get call to their MeasureOverride and ArrangeOverride, and all computed sizes will be validated. This method does nothing if layout is clean but it does work if layout is not clean so avoid calling it after each change in the UIElement tree. It makes sense to either never call it (system will do this in a deferred manner) or only call it if you absolutely need updated sizes and positions after you do all changes. Events | Improve this Doc View Source IsEnabledChanged Declaration public event PropertyChangedEventHandler IsEnabledChanged Event Type Type Description PropertyChangedEventHandler | Improve this Doc View Source IsVisibleChanged Declaration public event PropertyChangedEventHandler IsVisibleChanged Event Type Type Description PropertyChangedEventHandler | Improve this Doc View Source TouchDown Declaration public event TouchEventHandler TouchDown Event Type Type Description TouchEventHandler | Improve this Doc View Source TouchGestureChanged Declaration public event TouchGestureEventHandler TouchGestureChanged Event Type Type Description TouchGestureEventHandler | Improve this Doc View Source TouchGestureEnd Declaration public event TouchGestureEventHandler TouchGestureEnd Event Type Type Description TouchGestureEventHandler | Improve this Doc View Source TouchGestureStart Declaration public event TouchGestureEventHandler TouchGestureStart Event Type Type Description TouchGestureEventHandler | Improve this Doc View Source TouchMove Declaration public event TouchEventHandler TouchMove Event Type Type Description TouchEventHandler | Improve this Doc View Source TouchUp Declaration public event TouchEventHandler TouchUp Event Type Type Description TouchEventHandler Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.UIElementCollection.Enumerator.html": {
    "href": "api/nanoFramework.Presentation.UIElementCollection.Enumerator.html",
    "title": "Struct UIElementCollection.Enumerator | nanoFramework Documentation",
    "keywords": "Struct UIElementCollection.Enumerator This is a simple UIElementCollection enumerator that is based on the ArrayListEnumeratorSimple that is used for ArrayLists. The following comment is from the CLR people: For a straightforward enumeration of the entire ArrayList, this is faster, because it's smaller. Benchmarks showed this. Implements IEnumerator ICloneable Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public struct Enumerator : IEnumerator, ICloneable Properties | Improve this Doc View Source Current Gets the current UIElement. Declaration public readonly UIElement Current { get; } Property Value Type Description UIElement Methods | Improve this Doc View Source Clone() Creates a new object that is a copy of the current instance. Declaration public object Clone() Returns Type Description Object | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the collection. Declaration public bool MoveNext() Returns Type Description Boolean | Improve this Doc View Source Reset() Sets the enumerator to its initial position, which is before the first element in the collection. Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Gets the current UIElement. Declaration readonly object IEnumerator.Current { get; } Returns Type Description Object Implements IEnumerator ICloneable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.UIElementCollection.html": {
    "href": "api/nanoFramework.Presentation.UIElementCollection.html",
    "title": "Class UIElementCollection | nanoFramework Documentation",
    "keywords": "Class UIElementCollection A UIElementCollection is a ordered collection of UIElements. Inheritance Object UIElementCollection Implements ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public class UIElementCollection : ICollection, IEnumerable Remarks A UIElementCollection has implied context affinity. It is a violation to access the collection from a different context than that of the owning Element This collection is an amalgam of UIElementCollection and UIElementCollection from Avalon Constructors | Improve this Doc View Source UIElementCollection(UIElement) Declaration public UIElementCollection(UIElement owner) Parameters Type Name Description UIElement owner Properties | Improve this Doc View Source Capacity Gets or sets the number of elements that the UIElementCollection can contain. Declaration public virtual int Capacity { get; set; } Property Value Type Description Int32 The number of elements that the UIElementCollection can contain. Remarks Capacity is the number of elements that the UIElementCollection is capable of storing. Count is the number of UIElements that are actually in the UIElementCollection. Capacity is always greater than or equal to Count. If Count exceeds Capacity while adding elements, the capacity of the UIElementCollection is increased. By default the capacity is 0. Exceptions Type Condition ArgumentOutOfRangeException Capacity is set to a value that is less than Count. | Improve this Doc View Source Count Declaration public virtual int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsSynchronized Declaration public virtual bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Indexer for the UIElementCollection. Gets or sets the UIElement stored at the zero-based index of the UIElementCollection. Declaration public UIElement this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description UIElement Remarks This property provides the ability to access a specific UIElement in the UIElementCollection by using the following systax: myUIElementCollection[index] . Exceptions Type Condition ArgumentOutOfRangeException index is less than zero -or- index is equal to or greater than Count. ArgumentException If the new child has already a parent or if the slot a the specified index is not null. | Improve this Doc View Source SyncRoot Declaration public virtual object SyncRoot { get; } Property Value Type Description Object Methods | Improve this Doc View Source Add(UIElement) Appends a UIElement to the end of the UIElementCollection. Declaration public int Add(UIElement element) Parameters Type Name Description UIElement element Returns Type Description Int32 The UIElementCollection index at which the UIElement has been added. Remarks Adding a null is allowed. Exceptions Type Condition ArgumentException If the new child has already a parent. | Improve this Doc View Source Clear() Removes all elements from the UIElementCollection. Declaration public void Clear() Remarks Count is set to zero. Capacity remains unchanged. To reset the capacity of the UIElementCollection, call TrimToSize or set the Capacity property directly. | Improve this Doc View Source Contains(UIElement) Determines whether a element is in the UIElementCollection. Declaration public bool Contains(UIElement element) Parameters Type Name Description UIElement element Returns Type Description Boolean | Improve this Doc View Source CopyTo(UIElement[], Int32) Strongly typed version of CopyTo Copies the collection into the Array. Declaration public virtual void CopyTo(UIElement[] array, int index) Parameters Type Name Description UIElement [] array Int32 index | Improve this Doc View Source CopyTo(Array, Int32) Copies the UIElement collection to the specified array starting at the specified index. Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array Int32 index | Improve this Doc View Source IndexOf(UIElement) Returns the zero-based index of the UIElement. If the UIElement is not in the UIElementCollection -1 is returned. If null is passed to the method, the index of the first entry with null is returned. If there is no null entry -1 is returned. Declaration public int IndexOf(UIElement element) Parameters Type Name Description UIElement element Returns Type Description Int32 | Improve this Doc View Source Insert(Int32, UIElement) Inserts an element into the UIElementCollection at the specified index. Declaration public void Insert(int index, UIElement element) Parameters Type Name Description Int32 index The zero-based index at which value should be inserted. UIElement element The UIElement to insert. Remarks If Count already equals Capacity, the capacity of the UIElementCollection is increased before the new UIElement is inserted. If index is equal to Count, value is added to the end of UIElementCollection. The UIElements that follow the insertion point move down to accommodate the new UIElement. The indexes of the UIElements that are moved are also updated. Exceptions Type Condition ArgumentOutOfRangeException index is less than zero. -or- index is greater than Count. | Improve this Doc View Source Remove(UIElement) Removes the specified element from the UIElementCollection. Declaration public void Remove(UIElement element) Parameters Type Name Description UIElement element The UIElement to remove from the UIElementCollection. Remarks The UIElements that follow the removed UIElements move up to occupy the vacated spot. The indexes of the UIElements that are moved are also updated. If element is null then the first null entry is removed. Note that removing a null entry is linear in the size of the collection. | Improve this Doc View Source RemoveAt(Int32) Removes the UIElement at the specified index. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. Remarks The UIElements that follow the removed UIElements move up to occupy the vacated spot. The indexes of the UIElements that are moved are also updated. Exceptions Type Condition ArgumentOutOfRangeException index is less than zero or - index is equal or greater than count. | Improve this Doc View Source RemoveRange(Int32, Int32) Removes a range of UIElements from the UIElementCollection. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The zero-based index of the range of elements to remove Int32 count The number of elements to remove. Remarks The UIElements that follow the removed UIElements move up to occupy the vacated spot. The indexes of the UIElements that are moved are also updated. Exceptions Type Condition ArgumentOutOfRangeException index is less than zero. -or- count is less than zero. ArgumentException index and count do not denote a valid range of elements in the UIElementCollection. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator that can iterate through the UIElementCollection. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Enumerator that enumerates the UIElementCollection in order. Implements ICollection IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.VerticalAlignment.html": {
    "href": "api/nanoFramework.Presentation.VerticalAlignment.html",
    "title": "Enum VerticalAlignment | nanoFramework Documentation",
    "keywords": "Enum VerticalAlignment Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public enum VerticalAlignment Fields Name Description Bottom Center Stretch Top Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.Visibility.html": {
    "href": "api/nanoFramework.Presentation.Visibility.html",
    "title": "Enum Visibility | nanoFramework Documentation",
    "keywords": "Enum Visibility Visibility - Enum which describes 3 possible visibility options. Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public enum Visibility Fields Name Description Collapsed Not visible and does not occupy any space in layout, as if it doesn't exist. Hidden Occupies space in the layout, but is not visible (completely transparent). Visible Normally visible. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Presentation.Window.html": {
    "href": "api/nanoFramework.Presentation.Window.html",
    "title": "Class Window | nanoFramework Documentation",
    "keywords": "Class Window Inheritance Object DispatcherObject UIElement Control ContentControl Window Inherited Members ContentControl.Child Control.Background Control.Font Control.Foreground Control.OnRender(DrawingContext) Control._background Control._foreground Control._font UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.OnChildrenChanged(UIElement, UIElement, Int32) UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.RenderRecursive(DrawingContext) UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public class Window : ContentControl Constructors | Improve this Doc View Source Window() Constructs a window object Declaration public Window() Remarks Automatic determination of current Dispatcher. Use alternative constructor that accepts a Dispatcher for best performance. REFACTOR -- consider specifying app default window sizes to cover Aux case for default window size. Properties | Improve this Doc View Source Left Declaration public int Left { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SizeToContent Auto size Window to its content's size Declaration public SizeToContent SizeToContent { get; set; } Property Value Type Description SizeToContent Default value is SizeToContent.Manual Remarks SizeToContent can be applied to Width Height independently After SizeToContent is set, setting Width/Height does not take affect if that dimension is sizing to content. | Improve this Doc View Source Top Position for Top of the host window Declaration public int Top { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Topmost Determines if this window is always on the top. Declaration public bool Topmost { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source ArrangeOverride(Int32, Int32) ArrangeOverride allows for the customization of the positioning of children. Declaration protected override void ArrangeOverride(int arrangeWidth, int arrangeHeight) Parameters Type Name Description Int32 arrangeWidth Int32 arrangeHeight Overrides UIElement.ArrangeOverride(Int32, Int32) Remarks Deducts the frame size of the window from the constraint and then arranges it's child. Supports only one child. | Improve this Doc View Source Close() Declaration public void Close() | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Measurement override. Implements content sizing logic. Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides ContentControl.MeasureOverride(Int32, Int32, out Int32, out Int32) Remarks Deducts the frame size from the constraint and then passes it on to it's child. Only supports one Visual child (just like control) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Presentation.WindowManager.html": {
    "href": "api/nanoFramework.Presentation.WindowManager.html",
    "title": "Class WindowManager | nanoFramework Documentation",
    "keywords": "Class WindowManager Inheritance Object DispatcherObject UIElement Panel Canvas WindowManager Inherited Members Canvas.GetBottom(UIElement) Canvas.SetBottom(UIElement, Int32) Canvas.GetLeft(UIElement) Canvas.SetLeft(UIElement, Int32) Canvas.GetRight(UIElement) Canvas.SetRight(UIElement, Int32) Canvas.GetTop(UIElement) Canvas.SetTop(UIElement, Int32) Canvas.ArrangeOverride(Int32, Int32) Panel.Children UIElement.OnGenericEvent(GenericEventArgs) UIElement.OnTouchDown(TouchEventArgs) UIElement.OnTouchUp(TouchEventArgs) UIElement.OnTouchMove(TouchEventArgs) UIElement.OnTouchGestureStarted(TouchGestureEventArgs) UIElement.OnTouchGestureChanged(TouchGestureEventArgs) UIElement.OnTouchGestureEnded(TouchGestureEventArgs) UIElement.OnPreviewButtonDown(ButtonEventArgs) UIElement.OnButtonDown(ButtonEventArgs) UIElement.OnPreviewButtonUp(ButtonEventArgs) UIElement.OnButtonUp(ButtonEventArgs) UIElement.OnGotFocus(FocusChangedEventArgs) UIElement.OnLostFocus(FocusChangedEventArgs) UIElement.TouchDown UIElement.TouchUp UIElement.TouchMove UIElement.TouchGestureStart UIElement.TouchGestureChanged UIElement.TouchGestureEnd UIElement.GetDesiredSize(Int32, Int32) UIElement.GetMargin(Int32, Int32, Int32, Int32) UIElement.SetMargin(Int32) UIElement.SetMargin(Int32, Int32, Int32, Int32) UIElement.ActualWidth UIElement.ActualHeight UIElement.Height UIElement.Width UIElement.GetLayoutOffset(Int32, Int32) UIElement.GetRenderSize(Int32, Int32) UIElement.LogicalChildren UIElement.IsFocused UIElement.Measure(Int32, Int32) UIElement.Arrange(Int32, Int32, Int32, Int32) UIElement.UpdateLayout() UIElement.IsMeasureValid UIElement.IsArrangeValid UIElement.ChildElementFromPoint(Int32, Int32) UIElement.GetUnclippedSize(Int32, Int32) UIElement.ContainsPoint(Int32, Int32) UIElement.GetPointerTarget(Int32, Int32) UIElement.PointToScreen(Int32, Int32) UIElement.PointToClient(Int32, Int32) UIElement.InvalidateMeasure() UIElement.InvalidateArrange() UIElement.Parent UIElement.RootUIElement UIElement.HorizontalAlignment UIElement.VerticalAlignment UIElement.OnChildDesiredSizeChanged(UIElement) UIElement.OnRender(DrawingContext) UIElement.Visibility UIElement.IsVisible UIElement.IsVisibleChanged UIElement.IsEnabled UIElement.IsEnabledChanged UIElement.InvalidateRect(Int32, Int32, Int32, Int32) UIElement.Invalidate() UIElement.RaiseEvent(RoutedEventArgs) UIElement.AddToEventRoute(EventRoute, RoutedEventArgs) UIElement.InstanceEventHandlersStore UIElement.AddHandler(RoutedEvent, RoutedEventHandler, Boolean) UIElement._horizontalAlignment UIElement._verticalAlignment DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Presentation Assembly : nanoFramework.Graphics.dll Syntax public class WindowManager : Canvas Fields | Improve this Doc View Source Instance Declaration public static WindowManager Instance Field Value Type Description WindowManager Methods | Improve this Doc View Source MeasureOverride(Int32, Int32, out Int32, out Int32) Declaration protected override void MeasureOverride(int availableWidth, int availableHeight, out int desiredWidth, out int desiredHeight) Parameters Type Name Description Int32 availableWidth Int32 availableHeight Int32 desiredWidth Int32 desiredHeight Overrides Canvas.MeasureOverride(Int32, Int32, out Int32, out Int32) | Improve this Doc View Source OnChildrenChanged(UIElement, UIElement, Int32) Declaration protected override void OnChildrenChanged(UIElement added, UIElement removed, int indexAffected) Parameters Type Name Description UIElement added UIElement removed Int32 indexAffected Overrides UIElement.OnChildrenChanged(UIElement, UIElement, Int32) | Improve this Doc View Source RenderRecursive(DrawingContext) Declaration protected override void RenderRecursive(DrawingContext dc) Parameters Type Name Description DrawingContext dc Overrides UIElement.RenderRecursive(DrawingContext) Events | Improve this Doc View Source PostRender Declaration public event PostRenderEventHandler PostRender Event Type Type Description PostRenderEventHandler Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.BaseEvent.html": {
    "href": "api/nanoFramework.Runtime.Events.BaseEvent.html",
    "title": "Class BaseEvent | nanoFramework Documentation",
    "keywords": "Class BaseEvent This is a base class from which other nanoFramework event classes derive. Inheritance Object BaseEvent GenericEvent TouchEvent PinValueChangedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class BaseEvent Fields | Improve this Doc View Source Message A byte characterizing the event message. Declaration public byte Message Field Value Type Description Byte | Improve this Doc View Source Source Specifies the source of the event. Declaration public ushort Source Field Value Type Description UInt16 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.CustomEvent.html": {
    "href": "api/nanoFramework.Runtime.Events.CustomEvent.html",
    "title": "Class CustomEvent | nanoFramework Documentation",
    "keywords": "Class CustomEvent Provides handling for custom native events. Inheritance Object CustomEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public static class CustomEvent Events | Improve this Doc View Source CustomEventPosted Event occurs when a custom event is posted. Declaration public static event CustomEventPostedEventHandler CustomEventPosted Event Type Type Description CustomEventPostedEventHandler Remarks The CustomEvent class raises CustomEventPosted event when a custom event is posted. To have a CustomEvent object call an event-handling method when a CustomEventPosted event occurs, you must associate the method with a CustomEventPostedEventHandler delegate, and add this delegate to this event."
  },
  "api/nanoFramework.Runtime.Events.CustomEventArgs.html": {
    "href": "api/nanoFramework.Runtime.Events.CustomEventArgs.html",
    "title": "Class CustomEventArgs | nanoFramework Documentation",
    "keywords": "Class CustomEventArgs Contains argument values for custom events. Inheritance Object EventArgs CustomEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class CustomEventArgs : EventArgs Properties | Improve this Doc View Source Data1 Value of 1st field in event. Declaration public ushort Data1 { get; } Property Value Type Description UInt16 | Improve this Doc View Source Data2 Value of 1st field in event. Declaration public uint Data2 { get; } Property Value Type Description UInt32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.CustomEventPostedEventHandler.html": {
    "href": "api/nanoFramework.Runtime.Events.CustomEventPostedEventHandler.html",
    "title": "Delegate CustomEventPostedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate CustomEventPostedEventHandler Provides an event handler that is called when a custom event is posted. Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public delegate void CustomEventPostedEventHandler(object sender, CustomEventArgs e); Parameters Type Name Description Object sender Specifies the object that sent the custom event. CustomEventArgs e Contains the custom event arguments. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.EventCategory.html": {
    "href": "api/nanoFramework.Runtime.Events.EventCategory.html",
    "title": "Enum EventCategory | nanoFramework Documentation",
    "keywords": "Enum EventCategory Defines the categories events are classified into. Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public enum EventCategory Fields Name Description Bluetooth Specifies a Bluetooth event. Can Specifies a CAN event. Custom Specifies a programmer-defined event. Gpio Specifies a GPIO event. HighResolutionTimer Specifies a HighResolutionTimer event. Network Specifies a Network event. Radio Specifies a Radio event. SerialDevice Specifies a SerialDevice event. Storage Specifies a Storage event. Unknown Specifies an unknown event type. WiFi Specifies a WiFi event. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Runtime.Events.EventSink.html": {
    "href": "api/nanoFramework.Runtime.Events.EventSink.html",
    "title": "Class EventSink | nanoFramework Documentation",
    "keywords": "Class EventSink Provides a dispatcher for handling events. Inheritance Object NativeEventDispatcher EventSink Implements IDisposable Inherited Members NativeEventDispatcher.threadSpawn NativeEventDispatcher.callbacks NativeEventDispatcher.disposed NativeEventDispatcher.EnableInterrupt() NativeEventDispatcher.DisableInterrupt() NativeEventDispatcher.Dispose(Boolean) NativeEventDispatcher.Dispose() NativeEventDispatcher.OnInterrupt Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class EventSink : NativeEventDispatcher, IDisposable Methods | Improve this Doc View Source AddEventFilter(EventCategory, IEventListener) Adds an event filter to the dispatcher. Declaration public static void AddEventFilter(EventCategory eventCategory, IEventListener eventFilter) Parameters Type Name Description EventCategory eventCategory Selects the event category. IEventListener eventFilter Specifies the event filter. | Improve this Doc View Source AddEventListener(EventCategory, IEventListener) Adds a listener for particular types of events. Declaration public static void AddEventListener(EventCategory eventCategory, IEventListener eventListener) Parameters Type Name Description EventCategory eventCategory Selects the event category. IEventListener eventListener Specifies the event listener. | Improve this Doc View Source AddEventProcessor(EventCategory, IEventProcessor) Adds an event processing routine. Declaration public static void AddEventProcessor(EventCategory eventCategory, IEventProcessor eventProcessor) Parameters Type Name Description EventCategory eventCategory Selects the event category. IEventProcessor eventProcessor Specifies the event processor. | Improve this Doc View Source PostManagedEvent(Byte, Byte, UInt16, UInt32) Processes event information. Declaration public static void PostManagedEvent(byte category, byte subCategory, ushort data1, uint data2) Parameters Type Name Description Byte category The event category. Byte subCategory The event subcategory. UInt16 data1 Data related to the event. UInt32 data2 Data related to the event. | Improve this Doc View Source RemoveEventFilter(EventCategory, IEventListener) Removes an event filter. Declaration public static void RemoveEventFilter(EventCategory eventCategory, IEventListener eventFilter) Parameters Type Name Description EventCategory eventCategory Selects an event category. IEventListener eventFilter Specifies the event filter to be removed. | Improve this Doc View Source RemoveEventListener(EventCategory, IEventListener) Removes an event listener. Declaration public static void RemoveEventListener(EventCategory eventCategory, IEventListener eventListener) Parameters Type Name Description EventCategory eventCategory Selects an event category. IEventListener eventListener Specifies the event listener to be removed. | Improve this Doc View Source RemoveEventProcessor(EventCategory, IEventProcessor) Removes an event processor. Declaration public static void RemoveEventProcessor(EventCategory eventCategory, IEventProcessor eventProcessor) Parameters Type Name Description EventCategory eventCategory Selects an event category. IEventProcessor eventProcessor Specifies the event processor to be removed. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.GenericEvent.html": {
    "href": "api/nanoFramework.Runtime.Events.GenericEvent.html",
    "title": "Class GenericEvent | nanoFramework Documentation",
    "keywords": "Class GenericEvent Creates an instance of the GenericEvent class. Inheritance Object BaseEvent GenericEvent GenericEventEx Inherited Members BaseEvent.Source BaseEvent.Message Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class GenericEvent : BaseEvent Fields | Improve this Doc View Source Category Specifies the event category. Declaration public byte Category Field Value Type Description Byte | Improve this Doc View Source Data Contains the data associated with the event. Declaration public uint Data Field Value Type Description UInt32 | Improve this Doc View Source Time Holds the event's time stamp. Declaration public DateTime Time Field Value Type Description DateTime Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.GenericEventEx.html": {
    "href": "api/nanoFramework.Runtime.Events.GenericEventEx.html",
    "title": "Class GenericEventEx | nanoFramework Documentation",
    "keywords": "Class GenericEventEx Creates an instance of the GenericEvent class. Inheritance Object BaseEvent GenericEvent GenericEventEx Inherited Members GenericEvent.Category GenericEvent.Data GenericEvent.Time BaseEvent.Source BaseEvent.Message Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Graphics.dll Syntax public class GenericEventEx : GenericEvent Fields | Improve this Doc View Source X Specifies additional position information. Declaration public int X Field Value Type Description Int32 | Improve this Doc View Source Y Specifies additional position information. Declaration public int Y Field Value Type Description Int32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.html": {
    "href": "api/nanoFramework.Runtime.Events.html",
    "title": "Namespace nanoFramework.Runtime.Events | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Runtime.Events Classes BaseEvent This is a base class from which other nanoFramework event classes derive. CustomEvent Provides handling for custom native events. CustomEventArgs Contains argument values for custom events. EventSink Provides a dispatcher for handling events. GenericEvent Creates an instance of the GenericEvent class. GenericEventEx Creates an instance of the GenericEvent class. NativeEventDispatcher Initializes a new instance of the NativeEventDispatcher class. WeakDelegate Provides methods for combining and removing \"weak\" delegates. Interfaces IEventListener Provides an interface to use as the basis of event listeners. IEventProcessor Provides an interface to use as the basis of event processors. Enums EventCategory Defines the categories events are classified into. Delegates CustomEventPostedEventHandler Provides an event handler that is called when a custom event is posted. NativeEventHandler A multicast (combinable) delegate that defines the event handler for a native event."
  },
  "api/nanoFramework.Runtime.Events.IEventListener.html": {
    "href": "api/nanoFramework.Runtime.Events.IEventListener.html",
    "title": "Interface IEventListener | nanoFramework Documentation",
    "keywords": "Interface IEventListener Provides an interface to use as the basis of event listeners. Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public interface IEventListener Methods | Improve this Doc View Source InitializeForEventSource() Initializes an event listener so that it listens to events from a particular source. Declaration void InitializeForEventSource() | Improve this Doc View Source OnEvent(BaseEvent) Reacts to an event. Declaration bool OnEvent(BaseEvent ev) Parameters Type Name Description BaseEvent ev Holds the event that occurred. Returns Type Description Boolean true if the event was processed, or false if not. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.IEventProcessor.html": {
    "href": "api/nanoFramework.Runtime.Events.IEventProcessor.html",
    "title": "Interface IEventProcessor | nanoFramework Documentation",
    "keywords": "Interface IEventProcessor Provides an interface to use as the basis of event processors. Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public interface IEventProcessor Methods | Improve this Doc View Source ProcessEvent(UInt32, UInt32, DateTime) Processes an event IEventProcessor should return null if it cannot process an event, in that case next processor will be given an opportunity. Declaration BaseEvent ProcessEvent(uint data1, uint data2, DateTime time) Parameters Type Name Description UInt32 data1 Holds event-specific data. UInt32 data2 Holds event-specific data. DateTime time Contains the time stamp for the event. Returns Type Description BaseEvent The event that was processed, or null if the event can't be processed. Remarks In the event that the processor cannot process an event, IEventProcessor should return null. In that case next processor will be given an opportunity. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.NativeEventDispatcher.html": {
    "href": "api/nanoFramework.Runtime.Events.NativeEventDispatcher.html",
    "title": "Class NativeEventDispatcher | nanoFramework Documentation",
    "keywords": "Class NativeEventDispatcher Initializes a new instance of the NativeEventDispatcher class. Inheritance Object NativeEventDispatcher EventSink Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public class NativeEventDispatcher : IDisposable Constructors NativeEventDispatcher(String, UInt64) Initializes a new instance of the NativeEventDispatcher class. Declaration public extern NativeEventDispatcher(string driverName, ulong driverData) Parameters Type Name Description String driverName The name of a registered driver. UInt64 driverData Driver data to be used when initializing the driver. Fields | Improve this Doc View Source callbacks The event handler for this NativeEventDispatcher object (a multicast combinable delegate). Declaration protected NativeEventHandler callbacks Field Value Type Description NativeEventHandler | Improve this Doc View Source disposed Set to true if this NativeEventDispatcher object has been disposed, or false if not. Declaration protected bool disposed Field Value Type Description Boolean | Improve this Doc View Source threadSpawn The event handler for this NativeEventDispatcher object (a multicast combinable delegate). Declaration protected NativeEventHandler threadSpawn Field Value Type Description NativeEventHandler Methods DisableInterrupt() Disables the interrupt for this NativeEventDispatcher object. Declaration public extern virtual void DisableInterrupt() | Improve this Doc View Source Dispose() Releases resources used by this NativeEventDispatcher object. Declaration public void Dispose() Dispose(Boolean) Releases resources used by this NativeEventDispatcher object. Declaration protected extern virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if in the process of disposing, or false otherwise. EnableInterrupt() Enables the interrupt for this NativeEventDispatcher object. Declaration public extern virtual void EnableInterrupt() | Improve this Doc View Source Finalize() Declaration protected void Finalize() Events | Improve this Doc View Source OnInterrupt Adds or removes callback methods for native events. Declaration public event NativeEventHandler OnInterrupt Event Type Type Description NativeEventHandler Remarks Applications can subscribe to this event to be notified when an interrupt event occurs. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.NativeEventHandler.html": {
    "href": "api/nanoFramework.Runtime.Events.NativeEventHandler.html",
    "title": "Delegate NativeEventHandler | nanoFramework Documentation",
    "keywords": "Delegate NativeEventHandler A multicast (combinable) delegate that defines the event handler for a native event. Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public delegate void NativeEventHandler(uint data1, uint data2, DateTime time); Parameters Type Name Description UInt32 data1 First parameter (can be the port). UInt32 data2 First parameter (can be the port). DateTime time Time of the event. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Events.WeakDelegate.html": {
    "href": "api/nanoFramework.Runtime.Events.WeakDelegate.html",
    "title": "Class WeakDelegate | nanoFramework Documentation",
    "keywords": "Class WeakDelegate Provides methods for combining and removing \"weak\" delegates. Inheritance Object WeakDelegate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Events Assembly : nanoFramework.Runtime.Events.dll Syntax public static class WeakDelegate Remarks When instances of the WeakDelegate class are created, the object references in the delegate list are treated like WeakReference objects. This means that these object references are prone to garbage collection even if they are still targets in the list of delegates. When such object references are collected as garbage, they are automatically removed from the list of delegates. Methods Combine(Delegate, Delegate) Concatenates the invocation lists of two multicast (combinable) delegates. Declaration public static extern Delegate Combine(Delegate a, Delegate b) Parameters Type Name Description Delegate a The combinable delegate whose invocation list comes first. Delegate b The combinable delegate whose invocation list comes second. Returns Type Description Delegate A new combinable delegate with an invocation list that concatenates the invocation lists of the a and b parameters, in that order. If b is a null reference, this method returns a. If a is a null reference, this method returns b. If both a and b are null references, this method returns null. Remove(Delegate, Delegate) Removes the invocation list of a specified delegate from the invocation list of another specified delegate. Declaration public static extern Delegate Remove(Delegate a, Delegate b) Parameters Type Name Description Delegate a The delegate from which the invocation list is to be removed. Delegate b The delegate that supplies the invocation list to be removed from the delegate specified in a. Returns Type Description Delegate A new delegate with an invocation list formed by taking the invocation list of the a parameter and removing the invocation list of the b parameter, if b's invocation list is found in a's invocation list. If b is a null reference, or if b's invocation list is not found in a's invocation list, this method returns a. If b's invocation list is equal to a's invocation list, or if b is a null reference, this method returns null."
  },
  "api/nanoFramework.Runtime.Native.ConstraintException.html": {
    "href": "api/nanoFramework.Runtime.Native.ConstraintException.html",
    "title": "Class ConstraintException | nanoFramework Documentation",
    "keywords": "Class ConstraintException The exception that is thrown when an action is attempted that violates a constraint. Inheritance Object Exception ConstraintException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public class ConstraintException : Exception Remarks When a ConstraintException exception is caught, if the ExecutionConstraint object that caused this exception has not been uninstalled, the catch block implementation has a small additional amount of time during which to handle the exception. If this takes too long, the exception is re-thrown automatically. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Native.ExecutionConstraint.html": {
    "href": "api/nanoFramework.Runtime.Native.ExecutionConstraint.html",
    "title": "Class ExecutionConstraint | nanoFramework Documentation",
    "keywords": "Class ExecutionConstraint Provides a method to require a thread to complete an operation within specific constraints. Inheritance Object ExecutionConstraint Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public static class ExecutionConstraint Methods Install(Int32, Int32) Creates a sub-thread within the calling thread, containing a constraint that requires the calling thread to complete an operation within a specified time period and at a specified priority level. Declaration public static extern void Install(int timeoutMilliseconds, int priority) Parameters Type Name Description Int32 timeoutMilliseconds The number of milliseconds before a ConstraintException exception is thrown. Note that the value -1 in this parameter indicates that the current constraint exception is to be uninstalled. Int32 priority The priority level of the calling thread. Remarks If the specified timeout expires before the thread has completed the operation, a ConstraintException exception is thrown. Note that the time that was set in the timeout parameter is standard clock time, not thread execution time. The priority level can only be raised for threads that already have a priority level higher than 0 (zero). Exceptions Type Condition Exception The timeout parameter is less than -1. Exception The system is unable to identify the thread that is installing this constraint. Exception The thread installing this constraint does not own the sub-thread that the constraint applies to."
  },
  "api/nanoFramework.Runtime.Native.GC.html": {
    "href": "api/nanoFramework.Runtime.Native.GC.html",
    "title": "Class GC | nanoFramework Documentation",
    "keywords": "Class GC Provides a set of methods and properties to control GC (garbage collection), a service that automatically reclaims unused computer memory. Inheritance Object GC Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public static class GC Methods EnableGCMessages(Boolean) Specifies whether GC (garbage collection) messages are enabled. Declaration public static extern void EnableGCMessages(bool enable) Parameters Type Name Description Boolean enable true to enable output of messages; otherwise, false. Remarks Despite this method enabling the GC messages there is the possibility of those never being outputted depending on the target build options. RTM builds (which remove all non essential features) are one of those situations. Run(Boolean) Runs GC (garbage collection), a service that automatically reclaims unused computer memory. Declaration public static extern uint Run(bool compactHeap) Parameters Type Name Description Boolean compactHeap true to force heap compaction; otherwise, false . Returns Type Description UInt32 The amount of free (unused) memory, in bytes."
  },
  "api/nanoFramework.Runtime.Native.html": {
    "href": "api/nanoFramework.Runtime.Native.html",
    "title": "Namespace nanoFramework.Runtime.Native | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.Runtime.Native Classes ConstraintException The exception that is thrown when an action is attempted that violates a constraint. ExecutionConstraint Provides a method to require a thread to complete an operation within specific constraints. GC Provides a set of methods and properties to control GC (garbage collection), a service that automatically reclaims unused computer memory. Power Provides access to power management functionalities on target device. ResourceUtility Helper class to access nanoFramework application managed resources. Rtc Provides a set of methods that help developers to manage the RTC (Real Time Clock) on the target device. SystemInfo Provides information about the system. Enums SystemInfo.FloatingPoint Floating point options. Delegates RebootEventHandler The event handler delegate for the OnRebootEvent event."
  },
  "api/nanoFramework.Runtime.Native.Power.html": {
    "href": "api/nanoFramework.Runtime.Native.Power.html",
    "title": "Class Power | nanoFramework Documentation",
    "keywords": "Class Power Provides access to power management functionalities on target device. Inheritance Object Power Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public class Power Remarks This API is a general one common to all devices. There could be available target specific APIs providing other methods. Methods | Improve this Doc View Source RebootDevice() The RebootDevice method enables the caller to force a reboot of the device. This method raises the OnRebootEvent. Declaration public static void RebootDevice() Remarks If there are any handlers subscribing OnRebootEvent the reboot will happen only after all handlers complete their execution, no matter the time that takes. In case the developer want's to set a timeout for those to complete, use the alternative RebootDevice(Int32) call and set an execution constrain. | Improve this Doc View Source RebootDevice(Int32) The RebootDevice method enables the caller to force a reboot of the device. This method raises the OnRebootEvent. Declaration public static void RebootDevice(int exeConstraintTimeout) Parameters Type Name Description Int32 exeConstraintTimeout Execution constraint timeout (in milliseconds) for the event handlers. If the event handlers take longer than the given value, then the handlers will be aborted and the reboot will be executed. Events | Improve this Doc View Source OnRebootEvent This event notifies listeners prior to a device reboot. The event handlers may have an execution constraint placed on them by the caller of the Reboot method. Therefore, it is recommended that the event handlers be short atomic operations. Declaration public static event RebootEventHandler OnRebootEvent Event Type Type Description RebootEventHandler Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Native.RebootEventHandler.html": {
    "href": "api/nanoFramework.Runtime.Native.RebootEventHandler.html",
    "title": "Delegate RebootEventHandler | nanoFramework Documentation",
    "keywords": "Delegate RebootEventHandler The event handler delegate for the OnRebootEvent event. Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public delegate void RebootEventHandler(); Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.Runtime.Native.ResourceUtility.html": {
    "href": "api/nanoFramework.Runtime.Native.ResourceUtility.html",
    "title": "Class ResourceUtility | nanoFramework Documentation",
    "keywords": "Class ResourceUtility Helper class to access nanoFramework application managed resources. Inheritance Object ResourceUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.ResourceManager.dll Syntax public static class ResourceUtility Methods | Improve this Doc View Source GetDelimitedStringResource(ResourceManager, Enum, Int32) Retrieves the string representation of a specified resource. Declaration public static string GetDelimitedStringResource(ResourceManager rm, Enum resource, int i) Parameters Type Name Description ResourceManager rm The ResourceManager that contains the specified resources. Enum resource An enumerated value that specifies the type of the resources for which you want to get the string representations. Int32 i The index number of the resource (in the resource manager's resource collection) for which you want to get the string representation. Returns Type Description String The string representations of the specified resource. | Improve this Doc View Source GetDelimitedStringResources(ResourceManager, Enum) Retrieves the string representations of the specified resources. Declaration public static string[] GetDelimitedStringResources(ResourceManager rm, Enum resource) Parameters Type Name Description ResourceManager rm The ResourceManager that contains the specified resources. Enum resource An enumerated value that specifies the type of the resources for which you want to get the string representations. Returns Type Description String [] The string representations of the specified resources. GetObject(ResourceManager, Enum) Gets the value of a specified Object resource for the current system culture. Declaration public static extern object GetObject(ResourceManager rm, Enum id) Parameters Type Name Description ResourceManager rm The ResourceManager that contains the specified resources. Enum id The integer identifier for the specified resource. Returns Type Description Object The value of the specified resource for the current system culture. GetObject(ResourceManager, Enum, Int32, Int32) Gets the value of a specified Object resource for the current system culture. Declaration public static extern object GetObject(ResourceManager rm, Enum id, int offset, int length) Parameters Type Name Description ResourceManager rm The ResourceManager that contains the specified resources. Enum id The integer identifier for the specified resource. Int32 offset The offset for retrieving the value. Int32 length The length of the value to retrieve. Returns Type Description Object The value of the specified resource for the current system culture."
  },
  "api/nanoFramework.Runtime.Native.Rtc.html": {
    "href": "api/nanoFramework.Runtime.Native.Rtc.html",
    "title": "Class Rtc | nanoFramework Documentation",
    "keywords": "Class Rtc Provides a set of methods that help developers to manage the RTC (Real Time Clock) on the target device. Inheritance Object Rtc Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public static class Rtc Methods | Improve this Doc View Source SetSystemTime(DateTime) Sets the current system time and date. Declaration public static bool SetSystemTime(DateTime time) Parameters Type Name Description DateTime time DateTime structure that contains the new system date and time. Returns Type Description Boolean If the function succeeds, the return value is true. Remarks This method is specific to nanoFramework. The actual availability of the resulting feature depends on the availability on target platform that's running the nanoCLR."
  },
  "api/nanoFramework.Runtime.Native.SystemInfo.FloatingPoint.html": {
    "href": "api/nanoFramework.Runtime.Native.SystemInfo.FloatingPoint.html",
    "title": "Enum SystemInfo.FloatingPoint | nanoFramework Documentation",
    "keywords": "Enum SystemInfo.FloatingPoint Floating point options. Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public enum FloatingPoint Fields Name Description DoublePrecisionHardware Double precision floating point calculation supported by hardware unit. DoublePrecisionSoftware Double precision floating point software emulated. None None SinglePrecisionHardware Single precision floating point calculation supported by hardware unit. SinglePrecisionSoftware Single precision floating point software emulated. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.Runtime.Native.SystemInfo.html": {
    "href": "api/nanoFramework.Runtime.Native.SystemInfo.html",
    "title": "Class SystemInfo | nanoFramework Documentation",
    "keywords": "Class SystemInfo Provides information about the system. Inheritance Object SystemInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.Runtime.Native Assembly : nanoFramework.Runtime.Native.dll Syntax public static class SystemInfo Properties | Improve this Doc View Source FloatingPointSupport Gets a SystemInfo.FloatingPoint value with the information regarding the floating point support available in the target platform. Declaration public static SystemInfo.FloatingPoint FloatingPointSupport { get; } Property Value Type Description SystemInfo.FloatingPoint Model Gets a value that represents a product model. Declaration public static byte Model { get; } Property Value Type Description Byte OEM Gets a value that represents an original equipment manufacturer (OEM). Declaration public static byte OEM { get; } Property Value Type Description Byte OEMString Gets a string that contains information provided by the equipment manufacturer (OEM) about this system. Declaration public static string OEMString { get; } Property Value Type Description String Platform Gets a string that contains the platform designation. Declaration public static string Platform { get; } Property Value Type Description String SKU Gets a value that represents a product's stock-keeping unit (SKU). Declaration public static ushort SKU { get; } Property Value Type Description UInt16 TargetName Gets a string that contains the target name. Declaration public static string TargetName { get; } Property Value Type Description String | Improve this Doc View Source Version Gets a string containing version information about this system. Declaration public static Version Version { get; } Property Value Type Description Version"
  },
  "api/nanoFramework.System.IO.FileSystem.html": {
    "href": "api/nanoFramework.System.IO.FileSystem.html",
    "title": "Namespace nanoFramework.System.IO.FileSystem | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.System.IO.FileSystem Classes RemovableDeviceEventArgs Contains argument values for Removable Devices events. SDCard Class to allow a SD memory card to be configured and mounted on the system. SDCard.SDCardMmcParameters Parameter used for creating a MMC card instance. SDCard.SDCardSpiParameters Parameter used for creating a SPI card instance. StorageEventManager Event manager for Storage events. Enums RemovableDeviceEventArgs.RemovableDeviceEvent Specifies the type of event occurred with the Removable Device specified. SDCard.SDDataWidth Data width to use on MMC SD protocol. SDCard.SDInterfaceType SDCard interface type. Delegates RemovableDeviceEventHandler Provides an event handler that is called when a Removable Device event occurs."
  },
  "api/nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs.html": {
    "href": "api/nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs.html",
    "title": "Class RemovableDeviceEventArgs | nanoFramework Documentation",
    "keywords": "Class RemovableDeviceEventArgs Contains argument values for Removable Devices events. Inheritance Object EventArgs RemovableDeviceEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.System.IO.FileSystem Assembly : System.IO.FileSystem.dll Syntax public class RemovableDeviceEventArgs : EventArgs Properties | Improve this Doc View Source Event The RemovableDeviceEventArgs.RemovableDeviceEvent occurred. Declaration public RemovableDeviceEventArgs.RemovableDeviceEvent Event { get; } Property Value Type Description RemovableDeviceEventArgs.RemovableDeviceEvent | Improve this Doc View Source Path The path of the Removable Device. Declaration public string Path { get; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs.RemovableDeviceEvent.html": {
    "href": "api/nanoFramework.System.IO.FileSystem.RemovableDeviceEventArgs.RemovableDeviceEvent.html",
    "title": "Enum RemovableDeviceEventArgs.RemovableDeviceEvent | nanoFramework Documentation",
    "keywords": "Enum RemovableDeviceEventArgs.RemovableDeviceEvent Specifies the type of event occurred with the Removable Device specified. Namespace : nanoFramework.System.IO.FileSystem Assembly : System.IO.FileSystem.dll Syntax public enum RemovableDeviceEvent Remarks This enum is specific to nanoFramework. There is no equivalent in the UWP API. Fields Name Description Inserted A Removable Device has been inserted. Removed A Removable Device has been removed. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.System.IO.FileSystem.RemovableDeviceEventHandler.html": {
    "href": "api/nanoFramework.System.IO.FileSystem.RemovableDeviceEventHandler.html",
    "title": "Delegate RemovableDeviceEventHandler | nanoFramework Documentation",
    "keywords": "Delegate RemovableDeviceEventHandler Provides an event handler that is called when a Removable Device event occurs. Namespace : nanoFramework.System.IO.FileSystem Assembly : System.IO.FileSystem.dll Syntax public delegate void RemovableDeviceEventHandler(object sender, RemovableDeviceEventArgs e); Parameters Type Name Description Object sender Specifies the object that sent the Removable Device event. RemovableDeviceEventArgs e Contains the Removable Device event arguments. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.System.IO.FileSystem.SDCard.html": {
    "href": "api/nanoFramework.System.IO.FileSystem.SDCard.html",
    "title": "Class SDCard | nanoFramework Documentation",
    "keywords": "Class SDCard Class to allow a SD memory card to be configured and mounted on the system. Inheritance Object SDCard Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.System.IO.FileSystem Assembly : System.IO.FileSystem.dll Syntax public class SDCard : IDisposable Constructors | Improve this Doc View Source SDCard() Creates an instance of SDcard where parameters have already been defined in firmware. Declaration public SDCard() | Improve this Doc View Source SDCard(SDCard.SDCardMmcParameters) Create an instance of SDCard for a MMC connected SD card. Declaration public SDCard(SDCard.SDCardMmcParameters parameters) Parameters Type Name Description SDCard.SDCardMmcParameters parameters Connection parameters | Improve this Doc View Source SDCard(SDCard.SDCardSpiParameters) Create an instance of SDCard for a SPI connected SD card. Declaration public SDCard(SDCard.SDCardSpiParameters parameters) Parameters Type Name Description SDCard.SDCardSpiParameters parameters Connection parameters Properties | Improve this Doc View Source CardDetectEnabled Return true if Card detection is enabled Declaration public bool CardDetectEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source CardType Type of interface used by SDCard. Declaration public SDCard.SDInterfaceType CardType { get; } Property Value Type Description SDCard.SDInterfaceType | Improve this Doc View Source IsCardDetected Indicates if SD card has been detected if optional cardDetectPin parameter is enabled with a valid GPIO pin. If not enabled will always return false. Declaration public bool IsCardDetected { get; } Property Value Type Description Boolean Remarks Not all SD Card modules have a card detect pin or the pin connected to a GPIO pin. | Improve this Doc View Source IsMounted Indicates if the SD card has been mounted Declaration public bool IsMounted { get; } Property Value Type Description Boolean | Improve this Doc View Source MmcParameters The parameters for a MMC connected SD card. Declaration public SDCard.SDCardMmcParameters MmcParameters { get; } Property Value Type Description SDCard.SDCardMmcParameters | Improve this Doc View Source SpiParameters The parameters for a SPI connected SD card. Declaration public SDCard.SDCardSpiParameters SpiParameters { get; } Property Value Type Description SDCard.SDCardSpiParameters Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Mount() Mount the SD memory card device Declaration public void Mount() Remarks This will try to mount the SD memory card on the specified interface. If the Card is not present or the card is unable to be read then an exception will be thrown. | Improve this Doc View Source Unmount() Unmount a mounted SD memory card. Declaration public void Unmount() Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.System.IO.FileSystem.SDCard.SDCardMmcParameters.html": {
    "href": "api/nanoFramework.System.IO.FileSystem.SDCard.SDCardMmcParameters.html",
    "title": "Class SDCard.SDCardMmcParameters | nanoFramework Documentation",
    "keywords": "Class SDCard.SDCardMmcParameters Parameter used for creating a MMC card instance. Inheritance Object SDCard.SDCardMmcParameters Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.System.IO.FileSystem Assembly : System.IO.FileSystem.dll Syntax public class SDCardMmcParameters Fields | Improve this Doc View Source cardDetectPin The optional card detect GPIO pin which must be set to a valid pin if EnableCardDetectPin is true. If defined a StorageEventManager event will be raised when a card is inserted or removed. Declaration public uint cardDetectPin Field Value Type Description UInt32 | Improve this Doc View Source dataWidth Data width to use on MMC SD protocol. Declaration public SDCard.SDDataWidth dataWidth Field Value Type Description SDCard.SDDataWidth | Improve this Doc View Source enableCardDetectPin Set true when an Card Detect Pin is used. The cardDetectPin parameter must have a valid GPIO pin. Declaration public bool enableCardDetectPin Field Value Type Description Boolean Remarks Not all SD Card modules have a card detect pin or the pin connected to a GPIO pin. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.System.IO.FileSystem.SDCard.SDCardSpiParameters.html": {
    "href": "api/nanoFramework.System.IO.FileSystem.SDCard.SDCardSpiParameters.html",
    "title": "Class SDCard.SDCardSpiParameters | nanoFramework Documentation",
    "keywords": "Class SDCard.SDCardSpiParameters Parameter used for creating a SPI card instance. Inheritance Object SDCard.SDCardSpiParameters Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.System.IO.FileSystem Assembly : System.IO.FileSystem.dll Syntax public class SDCardSpiParameters Fields | Improve this Doc View Source cardDetectPin The optional card detect GPIO pin which must be set to a valid pin if EnableCardDetectPin is true. If defined a StorageEventManager event will be raised when a card is inserted or removed. Declaration public uint cardDetectPin Field Value Type Description UInt32 | Improve this Doc View Source chipSelectPin The chip select pin to use for SD Card. Declaration public uint chipSelectPin Field Value Type Description UInt32 | Improve this Doc View Source enableCardDetectPin Set true when an Card Detect Pin is used. The cardDetectPin parameter must have a valid GPIO pin. Declaration public bool enableCardDetectPin Field Value Type Description Boolean Remarks Not all SD Card modules have a card detect pin or the pin connected to a GPIO pin. | Improve this Doc View Source spiBus The SPI bus to use for SD Card. Declaration public uint spiBus Field Value Type Description UInt32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.System.IO.FileSystem.SDCard.SDDataWidth.html": {
    "href": "api/nanoFramework.System.IO.FileSystem.SDCard.SDDataWidth.html",
    "title": "Enum SDCard.SDDataWidth | nanoFramework Documentation",
    "keywords": "Enum SDCard.SDDataWidth Data width to use on MMC SD protocol. Namespace : nanoFramework.System.IO.FileSystem Assembly : System.IO.FileSystem.dll Syntax public enum SDDataWidth Fields Name Description _1_bit 1-bit width. _4_bit 4-bit width. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.System.IO.FileSystem.SDCard.SDInterfaceType.html": {
    "href": "api/nanoFramework.System.IO.FileSystem.SDCard.SDInterfaceType.html",
    "title": "Enum SDCard.SDInterfaceType | nanoFramework Documentation",
    "keywords": "Enum SDCard.SDInterfaceType SDCard interface type. Namespace : nanoFramework.System.IO.FileSystem Assembly : System.IO.FileSystem.dll Syntax public enum SDInterfaceType Fields Name Description Mmc MMC SDcard interface type Spi SPI SDCard interface type System Interface already defined in firmware. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.System.IO.FileSystem.StorageEventManager.html": {
    "href": "api/nanoFramework.System.IO.FileSystem.StorageEventManager.html",
    "title": "Class StorageEventManager | nanoFramework Documentation",
    "keywords": "Class StorageEventManager Event manager for Storage events. Inheritance Object StorageEventManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.System.IO.FileSystem Assembly : System.IO.FileSystem.dll Syntax public static class StorageEventManager Events | Improve this Doc View Source RemovableDeviceInserted Event that occurs when a Removable Device is inserted. Declaration public static event RemovableDeviceEventHandler RemovableDeviceInserted Event Type Type Description RemovableDeviceEventHandler Remarks The StorageEventManager class raises RemovableDeviceEventArgs events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed. To have a StorageEventManager object call an event-handling method when a RemovableDeviceInserted event occurs, you must associate the method with a RemovableDeviceEventHandler delegate, and add this delegate to this event. | Improve this Doc View Source RemovableDeviceRemoved Event that occurs when a Removable Device is removed. Declaration public static event RemovableDeviceEventHandler RemovableDeviceRemoved Event Type Type Description RemovableDeviceEventHandler Remarks The StorageEventManager class raises RemovableDeviceEventArgs events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed. To have a StorageEventManager object call an event-handling method when a RemovableDeviceRemoved event occurs, you must associate the method with a RemovableDeviceEventHandler delegate, and add this delegate to this event."
  },
  "api/nanoFramework.TestFramework.html": {
    "href": "api/nanoFramework.TestFramework.html",
    "title": "Namespace nanoFramework.TestFramework | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.TestFramework Classes UnitTestLauncher This class is a unit test launcher for nanoFramework"
  },
  "api/nanoFramework.TestFramework.Test.html": {
    "href": "api/nanoFramework.TestFramework.Test.html",
    "title": "Namespace nanoFramework.TestFramework.Test | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.TestFramework.Test Classes SomthingElse TestOfTest"
  },
  "api/nanoFramework.TestFramework.Test.SomthingElse.html": {
    "href": "api/nanoFramework.TestFramework.Test.SomthingElse.html",
    "title": "Class SomthingElse | nanoFramework Documentation",
    "keywords": "Class SomthingElse Inheritance Object SomthingElse Namespace : nanoFramework.TestFramework.Test Assembly : NFUnitTest.dll Syntax public class SomthingElse : object Methods | Improve this Doc View Source NothingReally() Declaration public void NothingReally() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.TestFramework.Test.TestOfTest.html": {
    "href": "api/nanoFramework.TestFramework.Test.TestOfTest.html",
    "title": "Class TestOfTest | nanoFramework Documentation",
    "keywords": "Class TestOfTest Inheritance Object TestOfTest Namespace : nanoFramework.TestFramework.Test Assembly : NFUnitTest.dll Syntax public class TestOfTest : object Methods | Improve this Doc View Source Cleanup() Declaration public void Cleanup() | Improve this Doc View Source Nothing() Declaration public void Nothing() | Improve this Doc View Source RunSetup() Declaration public void RunSetup() | Improve this Doc View Source TestCheckAllEqual() Declaration public void TestCheckAllEqual() | Improve this Doc View Source TestCheckAllNotEqual() Declaration public void TestCheckAllNotEqual() | Improve this Doc View Source TestNullEmpty() Declaration public void TestNullEmpty() | Improve this Doc View Source TestRaisesException() Declaration public void TestRaisesException() | Improve this Doc View Source TestStringComparison() Declaration public void TestStringComparison() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.TestFramework.UnitTestLauncher.html": {
    "href": "api/nanoFramework.TestFramework.UnitTestLauncher.html",
    "title": "Class UnitTestLauncher | nanoFramework Documentation",
    "keywords": "Class UnitTestLauncher This class is a unit test launcher for nanoFramework Inheritance Object UnitTestLauncher Namespace : nanoFramework.TestFramework Assembly : nanoFramework.UnitTestLauncher.dll Syntax public class UnitTestLauncher : object Methods | Improve this Doc View Source Main() Main function Declaration public static void Main() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.TI.EasyLink.ControlOption.html": {
    "href": "api/nanoFramework.TI.EasyLink.ControlOption.html",
    "title": "Enum ControlOption | nanoFramework Documentation",
    "keywords": "Enum ControlOption EasyLink Status and error codes. Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public enum ControlOption : byte Fields Name Description AddressSize Set the number of bytes in Address for both address filter and Tx/Rx operations. AsyncRxTimeout Relative time in ticks from asynchronous Rx start to TimeOut. A value of 0 means no timeout. IdleTimeout Set a timeout value for inactivity on the radio. MultiClientMode Set Multi-client mode for applications that will use multiple RF clients. RxTestTone Enable/Disable Rx Test mode for Tone. TestSignal Enable/Disable Test mode for Signal. TestTone Enable/Disable Test mode for Tone. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.TI.EasyLink.EasyLinkController.html": {
    "href": "api/nanoFramework.TI.EasyLink.EasyLinkController.html",
    "title": "Class EasyLinkController | nanoFramework Documentation",
    "keywords": "Class EasyLinkController The CC13xx/CC26xx EasyLink API is a simple abstraction layer on top of the CC13xx/CC26xx RF Driver and is intended as a starting point for developers creating a proprietor Sub1G protocol. Inheritance Object EasyLinkController Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public sealed class EasyLinkController : IDisposable Remarks The EasyLink layer does not support any regional RF conformance such as 'Listen Before Talk' required for the license free frequency band. Customers need to add support for the regional conformance that their product requires under the EasyLink API. Constructors | Improve this Doc View Source EasyLinkController(PhyType) Initializes the radio with specified Phy settings. Declaration public EasyLinkController(PhyType phyTYpe) Parameters Type Name Description PhyType phyTYpe PhyType settings to initialize the radio with. Properties AbsoluteTime Absolute radio time. This can be used for monitoring or Tx and Rx events using the AbsoluteTime field from TransmitPacket or ReceivedPacket . Declaration public uint AbsoluteTime { get; } Property Value Type Description UInt32 Absolute radio time. Frequency Gets the radio frequency in units of kHz. The returned frequency is value set in the Frequency Synthesizer and may not be exactly the same that was set. Declaration public uint Frequency { get; } Property Value Type Description UInt32 Remarks This value does not include any offsets for deviations due to factors such as temperature and hence this API should not be used to get an accurate measure of frequency. IeeeAddress Gets the IEEE address. Declaration public byte[] IeeeAddress { get; } Property Value Type Description Byte [] | Improve this Doc View Source IsInitialized Provides information if the EasyLink layer has been successfully initialized by calling Initialize() . Declaration public bool IsInitialized { get; } Property Value Type Description Boolean true if the EasyLink has been successfully initialized. | Improve this Doc View Source PhyType Declaration public PhyType PhyType { get; } Property Value Type Description PhyType RfPower Gets the Tx Power in dBm. Declaration public sbyte RfPower { get; } Property Value Type Description SByte Remarks This value does not include any offsets for deviations due to factors such as temperature and hence this API should not be used to get an accurate measure of frequency. Rssi RSSI value of an ongoing radio operation. It is useful in receiver test modes to detect the presence of both modulated and unmodulated carrier waves. Declaration public sbyte Rssi { get; } Property Value Type Description SByte Signed RSSI value (dBm)e. Remarks If no RSSI is available the return value is -128. Methods | Improve this Doc View Source AddAddressToFilter(Byte[]) Add an address to the receive address filter. Any packet received for an address that is not in the filter will be discarded. Addresses are entered as Byte array. Declaration public void AddAddressToFilter(byte[] address) Parameters Type Name Description Byte [] address Remarks If the address is already on the list it won't be added. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() GetConfiguration(ControlOption) Gets the current value of an advanced configuration option. Declaration public extern uint GetConfiguration(ControlOption option) Parameters Type Name Description ControlOption option The control option to get. Returns Type Description UInt32 The control option value. | Improve this Doc View Source Initialize() Initializes the EsayLink layer. Declaration public Status Initialize() Returns Type Description Status The operation result. | Improve this Doc View Source Receive(out ReceivedPacket) Waits for packet to be received. This method blocks execution of the current thread until a packet is received. Declaration public Status Receive(out ReceivedPacket packet) Parameters Type Name Description ReceivedPacket packet The received packet. Returns Type Description Status The operation result. | Improve this Doc View Source Receive(out ReceivedPacket, TimeSpan) Waits for packet to be received. This method blocks execution of the current thread until a packet is received. If no packet is receive before the timeout expires an Exception is thrown. Declaration public Status Receive(out ReceivedPacket packet, TimeSpan timeout) Parameters Type Name Description ReceivedPacket packet The received packet. TimeSpan timeout The timeout value for the reception operation to complete successfully. Returns Type Description Status The operation result. | Improve this Doc View Source RemoveAddressFromFilter(Byte[]) Removes an address from the receive address filter. Declaration public void RemoveAddressFromFilter(byte[] address) Parameters Type Name Description Byte [] address Remarks If the address is not on the filter list no error will be returned. | Improve this Doc View Source SetConfiguration(ControlOption, UInt32) Sets advanced configuration options. Declaration public Status SetConfiguration(ControlOption option, uint value) Parameters Type Name Description ControlOption option The control option to be set. UInt32 value The value to set the control option to. Returns Type Description Status The operation result. | Improve this Doc View Source SetFrequency(UInt32) Sets the radio frequency in units of kHz. When setting the radio frequency the value will be rounded to the nearest frequency supported by the frequency synthesizer. Declaration public Status SetFrequency(uint frequency) Parameters Type Name Description UInt32 frequency Returns Type Description Status Remarks In order to set the frequency the EasyLink layer has to have been previously initialized with Initialize() . | Improve this Doc View Source SetRfPower(SByte) Sets the Tx Power in dBm. Accepted values range from -20 to 20 dBm, depending on the platform. All platforms other than the CC1352P: Value of -10 dBm or values in the range of 0-14 dBm are accepted. Values above 14 are set to 14 dBm while those below 0 are set to -10 dBm. CC1352P Default PA: -20 to 14 dBm. Values above 14 dBm will be set to 14 dBm, while values below -20 dBm will cause a configuration error. CC1352P High PA: 14 to 20 dBm. Values above 20 dBm will be set to 20 dBm, while values below 14 dBm will cause a configuration error. Declaration public Status SetRfPower(sbyte rfPower) Parameters Type Name Description SByte rfPower Returns Type Description Status Remarks In order to set the Tx Power the EasyLink layer has to have been previously initialized with Initialize() . The PA mode is chosen at build time, run-time switching from high PA to default PA (or vice versa) is not supported. | Improve this Doc View Source Transmit(TransmitPacket) Sends a Packet with blocking call. This method blocks execution of the current thread until the packet transmission in complete. Declaration public Status Transmit(TransmitPacket packet) Parameters Type Name Description TransmitPacket packet The TransmitPacket to be transmitted. Returns Type Description Status The operation result. | Improve this Doc View Source Transmit(TransmitPacket, TimeSpan) Sends a Packet. This method blocks execution of the current thread until the packet transmission in complete. Declaration public Status Transmit(TransmitPacket packet, TimeSpan timeout) Parameters Type Name Description TransmitPacket packet The TransmitPacket to be transmitted. TimeSpan timeout The timeout value for the transmission operation to complete successfully. Returns Type Description Status The operation result. | Improve this Doc View Source Transmit(TransmitPacket, TimeSpan, TimeSpan) Sends a Packet. This method blocks execution of the current thread until the packet transmission in complete. Declaration public Status Transmit(TransmitPacket packet, TimeSpan timeout, TimeSpan dueTime) Parameters Type Name Description TransmitPacket packet The TransmitPacket to be transmitted. TimeSpan timeout The timeout value (in milliseconds) for the transmission operation to complete successfully. TimeSpan dueTime The amount of time to delay before starting the transmission, in milliseconds. Specify zero (0) to start the timer immediately. Returns Type Description Status The operation result. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.TI.EasyLink.html": {
    "href": "api/nanoFramework.TI.EasyLink.html",
    "title": "Namespace nanoFramework.TI.EasyLink | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.TI.EasyLink Classes EasyLinkController The CC13xx/CC26xx EasyLink API is a simple abstraction layer on top of the CC13xx/CC26xx RF Driver and is intended as a starting point for developers creating a proprietor Sub1G protocol. ReceivedPacket Class with definitions and data of a received packet. TransmitPacket Class with definitions and data of a packet to be transmited. Enums ControlOption EasyLink Status and error codes. PhyType Phy settings to initialize the radio. Status EasyLink Status and error codes."
  },
  "api/nanoFramework.TI.EasyLink.PhyType.html": {
    "href": "api/nanoFramework.TI.EasyLink.PhyType.html",
    "title": "Enum PhyType | nanoFramework Documentation",
    "keywords": "Enum PhyType Phy settings to initialize the radio. Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public enum PhyType : byte Remarks The support for a particular Phy configuration is target dependent. If the request type is not available an NotSupportedException will be thrown. Fields Name Description _2_4_100kbps2gfs 2.4Ghz 100kbps data rate, IEEE 802.15.4g GFSK. _2_4_200kbps2gfsk 2.4Ghz 200kbps data rate, IEEE 802.15.4g GFSK. _2_4_250kbps2gfsk 2.4Ghz 250kbps data rate, IEEE 802.15.4g GFSK. _200kbps2gfsk 200kbps data rate, IEEE 802.15.4g GFSK. _50kbps2gfsk Sub1G 50kbps data rate, IEEE 802.15.4g GFSK _5kbpsSlLr SimpleLink Long Range (5 kbps). Custom Customer Phy specific settings. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.TI.EasyLink.ReceivedPacket.html": {
    "href": "api/nanoFramework.TI.EasyLink.ReceivedPacket.html",
    "title": "Class ReceivedPacket | nanoFramework Documentation",
    "keywords": "Class ReceivedPacket Class with definitions and data of a received packet. Inheritance Object ReceivedPacket Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public class ReceivedPacket Properties | Improve this Doc View Source AbsoluteTime Absolute radio time that the packet was received. Declaration public uint AbsoluteTime { get; } Property Value Type Description UInt32 | Improve this Doc View Source DestinationAddress Destination address. Declaration public byte[] DestinationAddress { get; } Property Value Type Description Byte [] | Improve this Doc View Source Payload Payload data. Declaration public byte[] Payload { get; } Property Value Type Description Byte [] | Improve this Doc View Source Rssi RSSI of received packet. Declaration public sbyte Rssi { get; } Property Value Type Description SByte | Improve this Doc View Source RxTimeout Relative radio time from Rx start to Rx Timeout, or absolute time that packet was Rx'ed when returned. A value of 0 means no timeout. Declaration public uint RxTimeout { get; } Property Value Type Description UInt32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.TI.EasyLink.Status.html": {
    "href": "api/nanoFramework.TI.EasyLink.Status.html",
    "title": "Enum Status | nanoFramework Documentation",
    "keywords": "Enum Status EasyLink Status and error codes. Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public enum Status : byte Fields Name Description Aborted Command stopped or aborted. Busy Busy error. CommandError Command error. ConfigurationError Configuration error. MemoryError Memory error ParameterError Parameter error. RxBufferError Receive buffer error. RxError Receive error. RxTimeout Receive timeout. Success Operation successful. TxError Transmit error. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.TI.EasyLink.TransmitPacket.html": {
    "href": "api/nanoFramework.TI.EasyLink.TransmitPacket.html",
    "title": "Class TransmitPacket | nanoFramework Documentation",
    "keywords": "Class TransmitPacket Class with definitions and data of a packet to be transmited. Inheritance Object TransmitPacket Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.TI.EasyLink Assembly : nanoFramework.TI.EasyLink.dll Syntax public class TransmitPacket Constructors | Improve this Doc View Source TransmitPacket(Byte[], Byte[]) Declaration public TransmitPacket(byte[] address, byte[] data) Parameters Type Name Description Byte [] address Byte [] data Properties | Improve this Doc View Source DestinationAddress Destination address. Declaration public byte[] DestinationAddress { get; } Property Value Type Description Byte [] | Improve this Doc View Source Payload Payload data. Declaration public byte[] Payload { get; } Property Value Type Description Byte [] Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Application.html": {
    "href": "api/nanoFramework.UI.Application.html",
    "title": "Class Application | nanoFramework Documentation",
    "keywords": "Class Application Application base class Inheritance Object DispatcherObject Application Implements IEventListener Inherited Members DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class Application : DispatcherObject, IEventListener Constructors | Improve this Doc View Source Application() Initializes a new instance of the Application class. Declaration public Application() Properties | Improve this Doc View Source Current The Current property enables the developer to always get to the application in AppDomain in which they are running. Declaration public static Application Current { get; } Property Value Type Description Application | Improve this Doc View Source MainWindow The MainWindow property indicates the primary window of the application. Declaration public Window MainWindow { get; set; } Property Value Type Description Window Remarks By default - MainWindow will be set to the first window opened in the application. However the MainWindow may be set programmatically to indicate \"this is my main window\". It is a recommended programming style to refer to MainWindow in code instead of Windows[0]. | Improve this Doc View Source ShutdownMode The ShutdownMode property is called to set the shutdown specific mode of the application. Setting this property controls the way in which an application will shutdown. The three values for the ShutdownMode enum are : OnLastWindowClose OnMainWindowClose OnExplicitShutdown OnLastWindowClose - this mode will shutdown the application when the last window is closed, or an explicit call is made to Application.Shutdown(). This is the default mode. OnMainWindowClose - this mode will shutdown the application when the main window has been closed, or Application.Shutdown() is called. Note that if the MainWindow property has not been set - this mode is equivalent to OnExplicitOnly. OnExplicitShutdown- this mode will shutdown the application only when an explicit call to OnShutdown() has been made. Declaration public ShutdownMode ShutdownMode { get; set; } Property Value Type Description ShutdownMode | Improve this Doc View Source Windows The Windows property exposes a WindowCollection object, from which a developer can iterate over all the windows that have been opened in the current application. Declaration public WindowCollection Windows { get; } Property Value Type Description WindowCollection Methods | Improve this Doc View Source InitializeForEventSource() Declaration public void InitializeForEventSource() | Improve this Doc View Source OnEvent(BaseEvent) Declaration public bool OnEvent(BaseEvent ev) Parameters Type Name Description BaseEvent ev Returns Type Description Boolean | Improve this Doc View Source OnExit(EventArgs) OnExit is called to raise the Exit event. The developer will typically override this method if they want to take action when the application exits ( or they may choose to attach an event). Declaration protected virtual void OnExit(EventArgs e) Parameters Type Name Description EventArgs e The event args that will be passed to the Exit event Remarks This method follows the .Net programming guideline of having a protected virtual method that raises an event, to provide a convenience for developers that subclass the event. If you override this method - you need to call Base.OnExit(...) for the corresponding event to be raised. | Improve this Doc View Source OnStartup(EventArgs) OnStartup is called to raise the Startup event. The developer will typically override this method if they want to take action at startup time ( or they may choose to attach an event). This method will be called once when the application begins, once that application's Run() method has been called. Declaration protected virtual void OnStartup(EventArgs e) Parameters Type Name Description EventArgs e The event args that will be passed to the Startup event Remarks This method follows the .Net programming guideline of having a protected virtual method that raises an event, to provide a convenience for developers that subclass the event. If you override this method - you need to call Base.OnStartup(...) for the corresponding event to be raised. | Improve this Doc View Source Run() Run is called to start an application. Typically a developer will do some setting of properties/attaching to events after instantiating an application object, and then call Run() to start the application. Declaration public void Run() Remarks Once run has been called - an application's OnStartup override and Startup event is called immediately afterwards. | Improve this Doc View Source Run(Window) Run is called to start an application. Typically a developer will do some setting of properties/attaching to events after instantiating an application object, and then call Run() to start the application. Declaration public void Run(Window window) Parameters Type Name Description Window window Window that will be added to the Windows property and made the MainWindow of the Applcation. The passed Window must be created on the same thread as the Application object. Furthermore, this Window is shown once the Application is run. Remarks Once run has been called - an application's OnStartup override and Startup event is called immediately afterwards. | Improve this Doc View Source Shutdown() Shutdown is called to programmatically shutdown an application. Once shutdown() is called, the application gets called with the OnShutdown method to raise the Shutdown event. Declaration public void Shutdown() Events | Improve this Doc View Source Exit The Exit event is fired when an application is shutting down. This event is raised by the OnExit method. Declaration public event EventHandler Exit Event Type Type Description EventHandler | Improve this Doc View Source Startup The Startup event is fired when an application is starting. This event is raised by the OnStartup method. Declaration public event EventHandler Startup Event Type Type Description EventHandler Implements IEventListener Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Bitmap.BitmapImageType.html": {
    "href": "api/nanoFramework.UI.Bitmap.BitmapImageType.html",
    "title": "Enum Bitmap.BitmapImageType | nanoFramework Documentation",
    "keywords": "Enum Bitmap.BitmapImageType Note that these values have to match the c_Type* consts in CLR_GFX_BitmapDescription Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public enum BitmapImageType : byte Fields Name Description Bmp A bitmap in Windows BMP format. Gif A bitmap in GIF format. Jpeg A bitmap in JPEG format. NanoCLRBitmap A bitmap in a format specific to the nano Framework common language runtine (CLR). Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.Bitmap.html": {
    "href": "api/nanoFramework.UI.Bitmap.html",
    "title": "Class Bitmap | nanoFramework Documentation",
    "keywords": "Class Bitmap Encapsulates a bitmap, which consists of the pixel data for a graphics image and its methods and attributes This class cannot be inherited.The.NET Micro Framework provides the Inheritance Object MarshalByRefObject Bitmap Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public sealed class Bitmap : MarshalByRefObject, IDisposable Constructors Bitmap(Byte[], Bitmap.BitmapImageType) Not docummented yet. Declaration public extern Bitmap(byte[] imageData, Bitmap.BitmapImageType type) Parameters Type Name Description Byte [] imageData An array of pixel data for the specified image. Bitmap.BitmapImageType type The bitmap type for the specified image. Bitmap(Int32, Int32) Encapsulates a bitmap, which consists of the pixel data for a graphics image and its methods and attributes. Declaration public extern Bitmap(int width, int height) Parameters Type Name Description Int32 width The width of the bitmap. Int32 height The height of the bitmap. Fields | Improve this Doc View Source BLACKNESS Fills the destination rectangle with the color associated with index number 0 in the physical palette. Declaration public const int BLACKNESS = 4 Field Value Type Description Int32 | Improve this Doc View Source CenterX Represents the x-coordinate location of the center of the display device, in pixels. Declaration public static readonly int CenterX Field Value Type Description Int32 | Improve this Doc View Source CenterY Represents the y-coordinate location of the center of the display device, in pixels. Declaration public static readonly int CenterY Field Value Type Description Int32 | Improve this Doc View Source DSTDKGRAY Fills the destination rectangle with a dark gray color. Declaration public const int DSTDKGRAY = 8 Field Value Type Description Int32 | Improve this Doc View Source DSTGRAY Fills the destination rectangle with a gray color. Declaration public const int DSTGRAY = 6 Field Value Type Description Int32 | Improve this Doc View Source DSTINVERT Inverts the destination rectangle. Declaration public const int DSTINVERT = 3 Field Value Type Description Int32 | Improve this Doc View Source DSTLTGRAY Fills the destination rectangle with a light gray color. Declaration public const int DSTLTGRAY = 7 Field Value Type Description Int32 | Improve this Doc View Source DT_AlignmentCenter Specifies that text is center-aligned as it flows around a bitmap. Declaration public const uint DT_AlignmentCenter = 2U Field Value Type Description UInt32 | Improve this Doc View Source DT_AlignmentLeft Specifies that text is left-aligned as it flows around a bitmap. Declaration public const uint DT_AlignmentLeft = 0U Field Value Type Description UInt32 | Improve this Doc View Source DT_AlignmentMask Specifies that you can use a mask to get or set text alignment around a bitmap. Declaration public const uint DT_AlignmentMask = 34U Field Value Type Description UInt32 | Improve this Doc View Source DT_AlignmentRight Specifies that text is right-aligned as it flows around a bitmap. Declaration public const uint DT_AlignmentRight = 32U Field Value Type Description UInt32 | Improve this Doc View Source DT_Ellipsis Specifies that the bitmap text is trimmed to the nearest character, and an ellipsis is inserted at the end of each trimmed line. Declaration public const uint DT_Ellipsis = 8U Field Value Type Description UInt32 | Improve this Doc View Source DT_IgnoreHeight Specifies that if the bitmap text is larger than the space provided, the text is drawn in its full size, rather than being scaled down to fit the value in the Height property. Declaration public const uint DT_IgnoreHeight = 16U Field Value Type Description UInt32 | Improve this Doc View Source DT_None Specifies that there are no format rules. Declaration public const uint DT_None = 0U Field Value Type Description UInt32 | Improve this Doc View Source DT_TrimmingCharacterEllipsis Not yet documented. Declaration public const uint DT_TrimmingCharacterEllipsis = 64U Field Value Type Description UInt32 | Improve this Doc View Source DT_TrimmingMask Not yet documented. Declaration public const uint DT_TrimmingMask = 72U Field Value Type Description UInt32 | Improve this Doc View Source DT_TrimmingNone Not yet documented. Declaration public const uint DT_TrimmingNone = 0U Field Value Type Description UInt32 | Improve this Doc View Source DT_TrimmingWordEllipsis Not yet documented. Declaration public const uint DT_TrimmingWordEllipsis = 8U Field Value Type Description UInt32 | Improve this Doc View Source DT_TruncateAtBottom Specifies that if the bitmap text is larger than the space provided, the text is truncated at the bottom. Declaration public const uint DT_TruncateAtBottom = 4U Field Value Type Description UInt32 | Improve this Doc View Source DT_WordWrap Specifies whether a line of bitmap text automatically wraps words to the beginning of the next line when the line reaches its maximum width. Declaration public const uint DT_WordWrap = 1U Field Value Type Description UInt32 | Improve this Doc View Source MaxHeight Specifies the maximum height of the display device, in pixels. Declaration public static readonly int MaxHeight Field Value Type Description Int32 | Improve this Doc View Source MaxWidth Specifies the maximum width of the display device, in pixels. Declaration public static readonly int MaxWidth Field Value Type Description Int32 | Improve this Doc View Source OpacityOpaque Specifies that the current bitmap is opaque. Declaration public const ushort OpacityOpaque = 256 Field Value Type Description UInt16 | Improve this Doc View Source OpacityTransparent Specifies that the current bitmap is transparent. Declaration public const ushort OpacityTransparent = 0 Field Value Type Description UInt16 | Improve this Doc View Source PATINVERT Inverts the source rectangle. Declaration public const int PATINVERT = 2 Field Value Type Description Int32 | Improve this Doc View Source RANDOM Fills the destination rectangle or circle with a randomly generated pattern. Declaration public const int RANDOM = 10 Field Value Type Description Int32 | Improve this Doc View Source SINGLEPIXEL Specifies that a circle should have only a single-pixel border and no fill pattern or color. Declaration public const int SINGLEPIXEL = 9 Field Value Type Description Int32 | Improve this Doc View Source SRCCOPY Copies the source rectangle directly to the destination rectangle. Declaration public const int SRCCOPY = 1 Field Value Type Description Int32 | Improve this Doc View Source WHITENESS Fills the destination rectangle with the color associated with index number 1 in the physical palette. Declaration public const int WHITENESS = 5 Field Value Type Description Int32 Properties Height Gets the height of the current bitmap. Declaration public int Height { get; } Property Value Type Description Int32 Width Gets the width of the current bitmap. Declaration public int Width { get; } Property Value Type Description Int32 Methods Clear() Clears the entire drawing surface. Declaration public extern void Clear() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source DrawEllipse(Color, Int32, Int32, Int32, Int32) Draw and Ellipse Declaration public void DrawEllipse(Color colorOutline, int x, int y, int xRadius, int yRadius) Parameters Type Name Description Color colorOutline The outline color. Int32 x The x-coordinate location of the center of the ellipse. Int32 y The y-coordinate location of the center of the ellipse. Int32 xRadius The radius of the ellipse in the x-coordinate direction. Int32 yRadius The radius of the ellipse in the y-coordinate direction. DrawEllipse(Color, Int32, Int32, Int32, Int32, Int32, Color, Int32, Int32, Color, Int32, Int32, UInt16) Draws an ellipse filled with a specified color gradient. Declaration public extern void DrawEllipse(Color colorOutline, int thicknessOutline, int x, int y, int xRadius, int yRadius, Color colorGradientStart, int xGradientStart, int yGradientStart, Color colorGradientEnd, int xGradientEnd, int yGradientEnd, ushort opacity) Parameters Type Name Description Color colorOutline The outline color. Int32 thicknessOutline The thickness of the ellipse's outline, in pixels. Int32 x The x-coordinate location of the center of the ellipse. Int32 y The y-coordinate location of the center of the ellipse. Int32 xRadius The radius of the ellipse in the x-coordinate direction. Int32 yRadius The radius of the ellipse in the y-coordinate direction. Color colorGradientStart The starting color of the color gradient. Int32 xGradientStart The x-coordinate location of the starting point of the color gradient. Int32 yGradientStart The y-coordinate location of the starting point of the color gradient. Color colorGradientEnd The ending color of the color gradient. Int32 xGradientEnd The x-coordinate location of the ending point of the color gradient. Int32 yGradientEnd The y-coordinate location of the ending point of the color gradient. UInt16 opacity The opacity of the ellipse. | Improve this Doc View Source DrawImage(Int32, Int32, Bitmap, Int32, Int32, Int32, Int32) Draws a rectangular block of pixels with a specified degree of transparency. Declaration public void DrawImage(int xDst, int yDst, Bitmap bitmap, int xSrc, int ySrc, int width, int height) Parameters Type Name Description Int32 xDst The x-coordinate location of the upper-left corner of the rectangular area on the display to which the specified pixels are to be copied. Int32 yDst The y-coordinate location of the upper-left corner of the rectangular area on the display to which the specified pixels are to be copied. Bitmap bitmap The source bitmap. Int32 xSrc The x-coordinate location of the upper-left corner of the rectangular area in the source bitmap from which the specified pixels are to be copied. Int32 ySrc The x-coordinate location of the upper-left corner of the rectangular area in the source bitmap from which the specified pixels are to be copied. Int32 width The width of the rectangular block of pixels to be copied. Int32 height The height of the rectangular block of pixels to be copied. DrawImage(Int32, Int32, Bitmap, Int32, Int32, Int32, Int32, UInt16) Draws a rectangular block of pixels with a specified degree of transparency. Declaration public extern void DrawImage(int xDst, int yDst, Bitmap bitmap, int xSrc, int ySrc, int width, int height, ushort opacity) Parameters Type Name Description Int32 xDst The x-coordinate location of the upper-left corner of the rectangular area on the display to which the specified pixels are to be copied. Int32 yDst The y-coordinate location of the upper-left corner of the rectangular area on the display to which the specified pixels are to be copied. Bitmap bitmap The source bitmap. Int32 xSrc The x-coordinate location of the upper-left corner of the rectangular area in the source bitmap from which the specified pixels are to be copied. Int32 ySrc The x-coordinate location of the upper-left corner of the rectangular area in the source bitmap from which the specified pixels are to be copied. Int32 width The width of the rectangular block of pixels to be copied. Int32 height The height of the rectangular block of pixels to be copied. UInt16 opacity The degree of opacity of the bitmap. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent. DrawLine(Color, Int32, Int32, Int32, Int32, Int32) Draws a line on the display device. Declaration public extern void DrawLine(Color color, int thickness, int x0, int y0, int x1, int y1) Parameters Type Name Description Color color The color of the line. Int32 thickness The thickness of the line, in pixels.Remark: The thickness parameter is not currently available.For now, all lines are one pixel thick. Int32 x0 The x-coordinate location of the line's starting point. Int32 y0 The y-coordinate location of the line's starting point. Int32 x1 The x-coordinate location of the line's ending point. Int32 y1 The y-coordinate location of the line's ending point. DrawRectangle(Color, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Color, Int32, Int32, Color, Int32, Int32, UInt16) Draws a rectangle on the display device. Declaration public extern void DrawRectangle(Color colorOutline, int thicknessOutline, int x, int y, int width, int height, int xCornerRadius, int yCornerRadius, Color colorGradientStart, int xGradientStart, int yGradientStart, Color colorGradientEnd, int xGradientEnd, int yGradientEnd, ushort opacity) Parameters Type Name Description Color colorOutline The color of the rectangle's outline. Int32 thicknessOutline The thickness of the rectangle's outline, in pixels. Int32 x The x-coordinate of the rectangle's upper-left corner. Int32 y The y-coordinate of the rectangle's upper-left corner. Int32 width The width of the rectangle, in pixels. Int32 height The height of the rectangle, in pixels. Int32 xCornerRadius The x-coordinate value of the corner radius used to produce rounded corners on the rectangle. Int32 yCornerRadius The y-coordinate value of the corner radius used to produce rounded corners on the rectangle. Color colorGradientStart The starting color for a color gradient. Int32 xGradientStart Holds the x coordinate of the starting location of the color gradient. Int32 yGradientStart Holds the y coordinate of the starting location of the color gradient. Color colorGradientEnd Specifies the ending color of the color gradient. Int32 xGradientEnd Holds the x coordinate of the ending location of the color gradient. Int32 yGradientEnd Holds the y coordinate of the ending location of the color gradient. UInt16 opacity Specifies the opacity of the fill color. Set to 0x00 for completely transparent. Set to 0xFF for completely opague. DrawText(String, Font, Color, Int32, Int32) Draws text on the display device, using a specified font and color. Declaration public extern void DrawText(string text, Font font, Color color, int x, int y) Parameters Type Name Description String text The text to be drawn. Font font The font to be used for the text. Color color The color to be used for the text. Int32 x The x-coordinate of the location where text drawing is to begin. Int32 y The y-coordinate of the location where text drawing is to begin. | Improve this Doc View Source DrawTextInRect(String, Int32, Int32, Int32, Int32, UInt32, Color, Font) The text to be drawn. This parameter contains the remaining text, or an empty string, if the complete text string did not fit in the specified rectangle. The x-coordinate of the upper-left corner of the rectangle. The y-coordinate of the upper-left corner of the rectangle. The width of the rectangle. The height of the rectangle. Flags that specify the format of the text. The color to be used for the text. The font to be used for the text. Declaration public void DrawTextInRect(string text, int x, int y, int width, int height, uint dtFlags, Color color, Font font) Parameters Type Name Description String text Int32 x Int32 y Int32 width Int32 height UInt32 dtFlags Color color Font font DrawTextInRect(ref String, ref Int32, ref Int32, Int32, Int32, Int32, Int32, UInt32, Color, Font) Draws text in a specified rectangle. Sets the clipping region (clipping rectangle) of a bitmap with a specified coordinate pair (x, y), width, and height. Declaration public extern bool DrawTextInRect(ref string text, ref int xRelStart, ref int yRelStart, int x, int y, int width, int height, uint dtFlags, Color color, Font font) Parameters Type Name Description String text The text to be drawn. This parameter contains the remaining text, or an empty string, if the complete text string did not fit in the specified rectangle. Int32 xRelStart The x-coordinate, relative to the rectangle, at which text drawing is to begin. Int32 yRelStart The y-coordinate, relative to the rectangle, at which text drawing is to begin. Int32 x The x-coordinate of the upper-left corner of the rectangle. Int32 y The y-coordinate of the upper-left corner of the rectangle. Int32 width The width of the rectangle. Int32 height The height of the rectangle. UInt32 dtFlags Flags that specify the format of the text. Color color The color to be used for the text. Font font The font to be used for the text. Returns Type Description Boolean | Improve this Doc View Source Finalize() Declaration protected void Finalize() Flush() Flushes the current bitmap to the display device. The bitmap must have the same dimensions as the display device.The.NET Micro Framework provides the Declaration public extern void Flush() Flush(Int32, Int32, Int32, Int32) Flushes the current bitmap to the display device. Declaration public extern void Flush(int x, int y, int width, int height) Parameters Type Name Description Int32 x The x-coordinate of the bitmap's upper-left corner. Int32 y The y-coordinate of the bitmap's upper-left corner. Int32 width The width of the bitmap. Int32 height The height of the bitmap. GetBitmap() Declaration public extern byte[] GetBitmap() Returns Type Description Byte [] GetPixel(Int32, Int32) Retrieves the pixel color at a specified location on the display device. Declaration public extern Color GetPixel(int xPos, int yPos) Parameters Type Name Description Int32 xPos The x-coordinate of the pixel whose color you want to get. Int32 yPos The y-coordinate of the pixel whose color you want to get. Returns Type Description Color MakeTransparent(Color) Sets a bitmap's transparent color. Declaration public extern void MakeTransparent(Color color) Parameters Type Name Description Color color The color to be used as the bitmap's transparent color. RotateImage(Int32, Int32, Int32, Bitmap, Int32, Int32, Int32, Int32, UInt16) Declaration public extern void RotateImage(int angle, int xDst, int yDst, Bitmap bitmap, int xSrc, int ySrc, int width, int height, ushort opacity) Parameters Type Name Description Int32 angle The degree of rotation. Int32 xDst The x-coordinate of the center? of the destination bitmap. Int32 yDst The y-coordinate of the center? of the destination bitmap. Bitmap bitmap Int32 xSrc The x-coordinate of the center? of the source bitmap. Int32 ySrc The y-coordinate of the center? of the source bitmap. Int32 width Int32 height UInt16 opacity Scale9Image(Int32, Int32, Int32, Int32, Bitmap, Int32, Int32, Int32, Int32, UInt16) Declaration public extern void Scale9Image(int xDst, int yDst, int widthDst, int heightDst, Bitmap bitmap, int leftBorder, int topBorder, int rightBorder, int bottomBorder, ushort opacity) Parameters Type Name Description Int32 xDst The x-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied. Int32 yDst The y-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied. Int32 widthDst Int32 heightDst Bitmap bitmap Int32 leftBorder Int32 topBorder Int32 rightBorder Int32 bottomBorder UInt16 opacity The bitmap's degree of opacity. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent. SetClippingRectangle(Int32, Int32, Int32, Int32) Declaration public extern void SetClippingRectangle(int x, int y, int width, int height) Parameters Type Name Description Int32 x The x-coordinate of the upper-left corner of the clipping rectangle. Int32 y The y-coordinate of the upper-left corner of the clipping rectangle. Int32 width The width of the clipping rectangle. Int32 height The height of the clipping rectangle. SetPixel(Int32, Int32, Color) Sets the color for a specified pixel. Declaration public extern void SetPixel(int xPos, int yPos, Color color) Parameters Type Name Description Int32 xPos The x-coordinate of the pixel whose color you want to set. Int32 yPos The y-coordinate of the pixel whose color you want to set. Color color The color you want to set for the specified pixel. StretchImage(Int32, Int32, Bitmap, Int32, Int32, UInt16) Draws a rectangular block of pixels on the display device, stretching or shrinking the rectangular area as necessary. Declaration public extern void StretchImage(int xDst, int yDst, Bitmap sourceBitmap, int width, int height, ushort opacity) Parameters Type Name Description Int32 xDst The x-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied. Int32 yDst The y-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied. Bitmap sourceBitmap The source bitmap. Int32 width The width of the rectangluar area to which the pixels are to be copied. Int32 height The height of the rectangluar area to which the pixels are to be copied. UInt16 opacity The bitmap's degree of opacity. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent. StretchImage(Int32, Int32, Int32, Int32, Bitmap, Int32, Int32, Int32, Int32, UInt16) Declaration public extern void StretchImage(int xDst, int yDst, int widthDst, int heightDst, Bitmap bitmap, int xSrc, int ySrc, int widthSrc, int heightSrc, ushort opacity) Parameters Type Name Description Int32 xDst The x-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied. Int32 yDst The y-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied. Int32 widthDst The width of the rectangluar area to which the pixels are to be copied. Int32 heightDst The height of the rectangluar area to which the pixels are to be copied. Bitmap bitmap The source bitmap. Int32 xSrc Int32 ySrc Int32 widthSrc Int32 heightSrc UInt16 opacity The bitmap's degree of opacity. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent. TileImage(Int32, Int32, Bitmap, Int32, Int32, UInt16) Declaration public extern void TileImage(int xDst, int yDst, Bitmap bitmap, int width, int height, ushort opacity) Parameters Type Name Description Int32 xDst The x-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied. Int32 yDst The y-coordinate of the upper-left corner of the rectangular area to which the pixels are to be copied. Bitmap bitmap The source bitmap. Int32 width Int32 height UInt16 opacity The bitmap's degree of opacity. A value of 0 (zero) makes the bitmap completely opaque (not transparent at all); a value of 255 makes the bitmap completely transparent. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.CancelEventArgs.html": {
    "href": "api/nanoFramework.UI.CancelEventArgs.html",
    "title": "Class CancelEventArgs | nanoFramework Documentation",
    "keywords": "Class CancelEventArgs Inheritance Object EventArgs CancelEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class CancelEventArgs : EventArgs Fields | Improve this Doc View Source Cancel Declaration public bool Cancel Field Value Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.CollectionMethod.html": {
    "href": "api/nanoFramework.UI.CollectionMethod.html",
    "title": "Enum CollectionMethod | nanoFramework Documentation",
    "keywords": "Enum CollectionMethod Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax [Flags] public enum CollectionMethod Fields Name Description Managed Native Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.CollectionMode.html": {
    "href": "api/nanoFramework.UI.CollectionMode.html",
    "title": "Enum CollectionMode | nanoFramework Documentation",
    "keywords": "Enum CollectionMode Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax [Flags] public enum CollectionMode Fields Name Description GestureOnly InkAndGesture InkOnly Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.DisplayControl.html": {
    "href": "api/nanoFramework.UI.DisplayControl.html",
    "title": "Class DisplayControl | nanoFramework Documentation",
    "keywords": "Class DisplayControl Display Control. Inheritance Object DisplayControl Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public static class DisplayControl Properties BitsPerPixel Currently 16 bits in RBG565 format. ( There is some 1 bit code available but untested ) Declaration public static int BitsPerPixel { get; } Property Value Type Description Int32 | Improve this Doc View Source FullScreen Returns a bitmap the size of the current display. Declaration public static Bitmap FullScreen { get; } Property Value Type Description Bitmap Remarks Please make sure you check if you have enough memory with IsFullScreenBufferAvailable. If you don't have enough, the BitMap won't get initialized and will be null. | Improve this Doc View Source IsFullScreenBufferAvailable True if a full size buffer is available Declaration public static bool IsFullScreenBufferAvailable { get; } Property Value Type Description Boolean LongerSide The screens number of pixels for the longer side. Declaration public static int LongerSide { get; } Property Value Type Description Int32 | Improve this Doc View Source MaximumBufferSize The maximum buffer size for Bitmap in bytes. Declaration public static uint MaximumBufferSize { get; } Property Value Type Description UInt32 Orientation Return the current display orientation landscape, portrait. Declaration public static DisplayOrientation Orientation { get; } Property Value Type Description DisplayOrientation ScreenHeight The displays number of pixel for the height based on the orientation. Declaration public static int ScreenHeight { get; } Property Value Type Description Int32 ScreenWidth The displays number of pixel for the width based on the orientation. Declaration public static int ScreenWidth { get; } Property Value Type Description Int32 ShorterSide The screens number of pixels for the shorter side. Declaration public static int ShorterSide { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ChangeOrientation(DisplayOrientation) Change the orientation of the display. Declaration public static bool ChangeOrientation(DisplayOrientation Orientation) Parameters Type Name Description DisplayOrientation Orientation New Orientation Returns Type Description Boolean True if the orientation was supported and changed. Remarks When the orientation is changed the display canvas is disposed and recreated with the new dimensions when DisplayControl.FullScreen is next called. Clear() Clears the screen. Declaration public static extern void Clear() | Improve this Doc View Source Initialize(I2cConfiguration, ScreenConfiguration, UInt32) Initializes the screen to use with I2C configuration. Declaration public static uint Initialize(I2cConfiguration i2c, ScreenConfiguration screen, uint bufferSize = 20480U) Parameters Type Name Description I2cConfiguration i2c ScreenConfiguration screen A screen configuration. UInt32 bufferSize The desired buffer size allocation, 0 for default. Returns Type Description UInt32 The maximum buffer size possible allocation in bytes. Remarks You may have to configure the pins properly for the I2C configuration to be valid before initializing your screen. | Improve this Doc View Source Initialize(SpiConfiguration, ScreenConfiguration, UInt32) Initializes the screen for use with Spi configuration. Declaration public static uint Initialize(SpiConfiguration spi, ScreenConfiguration screen, uint bufferSize = 20480U) Parameters Type Name Description SpiConfiguration spi Spi configuration. ScreenConfiguration screen A screen configuration. UInt32 bufferSize The desired buffer size allocation, 0 for default. Returns Type Description UInt32 The maximum buffer size possible allocation in bytes. Remarks You may have to configure the pins properly for the Spi configuration to be valid before initializing your screen. Write(String, UInt16, UInt16, UInt16, UInt16, Font, Color, Color) Directly write on the screen a text at coordinate x,y a width,height with a background and foreground color. Declaration public static extern void Write(string text, ushort x, ushort y, ushort width, ushort height, Font font, Color foreground, Color background) Parameters Type Name Description String text The text to write. UInt16 x The x coordinate. UInt16 y The y coordinate. UInt16 width The width of the area to display. UInt16 height The height of the area to display. Font font The font to use. Color foreground Foreground color. Color background Background color. Write(UInt16, UInt16, UInt16, UInt16, UInt16[]) Directly write in the screen at coordinate x,y a width,height buffer of 16 bits colors. Declaration public static extern void Write(ushort x, ushort y, ushort width, ushort height, ushort[] colors) Parameters Type Name Description UInt16 x The x coordinate. UInt16 y The y coordinate. UInt16 width The width of the area to display. UInt16 height The height of the area to display. UInt16 [] colors A 16 bits color | Improve this Doc View Source WritePoint(UInt16, UInt16, UInt16) Write a point directly on the screen. Declaration public static void WritePoint(ushort x, ushort y, ushort color) Parameters Type Name Description UInt16 x The x coordinate. UInt16 y The y coordinate. UInt16 color The 16 bits color."
  },
  "api/nanoFramework.UI.DisplayOrientation.html": {
    "href": "api/nanoFramework.UI.DisplayOrientation.html",
    "title": "Enum DisplayOrientation | nanoFramework Documentation",
    "keywords": "Enum DisplayOrientation Display orientation. No all display drivers support every orientation. Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public enum DisplayOrientation Fields Name Description LANDSCAPE Landscape LANDSCAPE180 Landscape 180 PORTRAIT Portrait PORTRAIT180 Portrait 180 Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.EventRoute.html": {
    "href": "api/nanoFramework.UI.EventRoute.html",
    "title": "Class EventRoute | nanoFramework Documentation",
    "keywords": "Class EventRoute Container for the route to be followed by a RoutedEvent when raised Inheritance Object EventRoute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public sealed class EventRoute Remarks EventRoute constitues a non-null nanoFramework.UI.EventRoute.RoutedEvent and an ordered list of (target object, handler list) pairs It facilitates adding new entries to this list and also allows for the handlers in the list to be invoked Constructors | Improve this Doc View Source EventRoute(RoutedEvent) Constructor for EventRoute given the associated nanoFramework.UI.EventRoute.RoutedEvent Declaration public EventRoute(RoutedEvent routedEvent) Parameters Type Name Description RoutedEvent routedEvent Non-null nanoFramework.UI.EventRoute.RoutedEvent to be associated with this EventRoute Methods | Improve this Doc View Source Add(Object, RoutedEventHandler, Boolean) Adds this handler for the specified target to the route Declaration public void Add(object target, RoutedEventHandler handler, bool handledEventsToo) Parameters Type Name Description Object target Target object whose handler is to be added to the route RoutedEventHandler handler Handler to be added to the route Boolean handledEventsToo Flag indicating whether or not the listener wants to hear about events that have already been handled Remarks NOTE: It is not an error to add a handler for a particular target instance twice (handler will simply be called twice). Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Font.html": {
    "href": "api/nanoFramework.UI.Font.html",
    "title": "Class Font | nanoFramework Documentation",
    "keywords": "Class Font Inheritance Object MarshalByRefObject Font Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public sealed class Font : MarshalByRefObject Fields | Improve this Doc View Source DefaultKerning Contains the default kerning for a particular font. The kerning controls the amount of space between consecutive characters in a particular font. Declaration public const int DefaultKerning = 1024 Field Value Type Description Int32 Properties Ascent Gets the ascent measurement for the current font, in pixels. A font's ascent is the vertical distance between the font baseline and the top of the font area. The ascent measurement for the current font, in pixels. Declaration public int Ascent { get; } Property Value Type Description Int32 AverageWidth Gets the average width of the characters in the current font, in pixels. Declaration public int AverageWidth { get; } Property Value Type Description Int32 Descent Gets the descent measurement for the current font, in pixels. A font's descent is the vertical distance between the font baseline and the bottom of the font area. The descent measurement for the current font, in pixels. Declaration public int Descent { get; } Property Value Type Description Int32 ExternalLeading Gets the external leading measurement for the current font, in pixels. The external leading measurement for the current font, in pixels. Declaration public int ExternalLeading { get; } Property Value Type Description Int32 Height Gets the height of the current font, in pixels. Declaration public int Height { get; } Property Value Type Description Int32 InternalLeading Gets the internal leading measurement for the current font, in pixels. The internal leading measurement for the current font, in pixels. Declaration public int InternalLeading { get; } Property Value Type Description Int32 MaxWidth Gets the width of the widest character in the current font, in pixels. Declaration public int MaxWidth { get; } Property Value Type Description Int32 Methods CharWidth(Char) Gets the width of the specified character, in pixels. Declaration public extern int CharWidth(char c) Parameters Type Name Description Char c Returns Type Description Int32 | Improve this Doc View Source ComputeExtent(String, out Int32, out Int32) Computes the width, height, and kerning of a specified line of text. Declaration public void ComputeExtent(string text, out int width, out int height) Parameters Type Name Description String text The text you want to measure. Int32 width The width of the specified text. Int32 height The height of the specified text. ComputeExtent(String, out Int32, out Int32, Int32) Declaration public extern void ComputeExtent(string text, out int width, out int height, int kerning) Parameters Type Name Description String text The text you want to measure. Int32 width The width of the specified text. Int32 height The height of the specified text. Int32 kerning The spacing between consecutive characters. | Improve this Doc View Source ComputeTextInRect(String, out Int32, out Int32) Computes the size of the rectangular area on the display device needed to render the specified text string. Declaration public void ComputeTextInRect(string text, out int renderWidth, out int renderHeight) Parameters Type Name Description String text The text you want to render on the display device. Int32 renderWidth The width, in pixels, of the rectangular area needed to render the text. Int32 renderHeight The height, in pixels, of the rectangular area needed to render the text. | Improve this Doc View Source ComputeTextInRect(String, out Int32, out Int32, Int32) Computes the size of the rectangular area on the display device needed to render the specified text string. Declaration public void ComputeTextInRect(string text, out int renderWidth, out int renderHeight, int availableWidth) Parameters Type Name Description String text The text you want to render on the display device. Int32 renderWidth The width, in pixels, of the rectangular area needed to render the text. Int32 renderHeight The height, in pixels, of the rectangular area needed to render the text. Int32 availableWidth The maximum width of text that will fit in the defined rectangular area. ComputeTextInRect(String, out Int32, out Int32, Int32, Int32, Int32, Int32, UInt32) Computes the size of the rectangular area on the display device needed to render the specified text string. Declaration public extern void ComputeTextInRect(string text, out int renderWidth, out int renderHeight, int xRelStart, int yRelStart, int availableWidth, int availableHeight, uint dtFlags) Parameters Type Name Description String text The text you want to render on the display device. Int32 renderWidth The width, in pixels, of the rectangular area needed to render the text. Int32 renderHeight The height, in pixels, of the rectangular area needed to render the text. Int32 xRelStart The x-coordinate of the relative starting point for the text. Int32 yRelStart The y-coordinate of the relative starting point for the text. Int32 availableWidth The maximum width of text that will fit in the defined rectangular area. Int32 availableHeight The maximum height of text that will fit in the defined rectangular area. UInt32 dtFlags Flags that specify various text characteristics, such as alignment. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.html": {
    "href": "api/nanoFramework.UI.html",
    "title": "Namespace nanoFramework.UI | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.UI Classes Application Application base class Bitmap Encapsulates a bitmap, which consists of the pixel data for a graphics image and its methods and attributes This class cannot be inherited.The.NET Micro Framework provides the CancelEventArgs DisplayControl Display Control. EventRoute Container for the route to be followed by a RoutedEvent when raised Font Ink Mathematics Simple Min/Max for the wpf measures PropertyChangedEventArgs Provides data for the various property changed events. RoutedEvent RoutedEvent is a unique identifier for any registered RoutedEvent RoutedEventArgs The container for all state associated with a RoutedEvent RoutedEventHandlerInfo Container for handler instance and other invocation preferences for this handler instance Temporary Temporary class to extend the EventCatory enum found in the nanoFramework.Runtime.Events Need to merge these into this class update references and remove this file Touch TouchCollectorConfiguration TouchEvent TouchGestureEventArgs TouchInput TouchPanel TouchScreen TouchScreen.ActiveRectangle TouchScreenEventArgs WindowCollection WindowCollection can be used to interate over all the windows that have been opened in the current application. Structs I2cConfiguration I2C configuration. ScreenConfiguration The screen configuration in the driver. SpiConfiguration The Spi configuration for the scressn Enums Bitmap.BitmapImageType Note that these values have to match the c_Type* consts in CLR_GFX_BitmapDescription CollectionMethod CollectionMode DisplayOrientation Display orientation. No all display drivers support every orientation. ReasonSessionEnding Enum for ReasonSessionEnding RoutingStrategy Routing Strategy can be either of Tunnel or Bubble ShutdownMode Enum for ShutdownMode Temporary.EventCategoryEx Temporary enum with unique values within the EventCategory enum range found in nanoFramework.Runtime.Events TouchCollectorConfiguration.TouchInput TouchGesture TouchInputFlags TouchMessages Delegates PropertyChangedEventHandler Represents the method that will handle the event raised when a Property is changed RoutedEventHandler RoutedEventHandler Definition TouchGestureEventHandler TouchScreenEventHandler"
  },
  "api/nanoFramework.UI.I2cConfiguration.html": {
    "href": "api/nanoFramework.UI.I2cConfiguration.html",
    "title": "Struct I2cConfiguration | nanoFramework Documentation",
    "keywords": "Struct I2cConfiguration I2C configuration. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public struct I2cConfiguration Constructors | Improve this Doc View Source I2cConfiguration(Byte, Byte, Boolean) Creates an I2C configuration. Declaration public I2cConfiguration(byte i2cBus, byte address, bool fastMode) Parameters Type Name Description Byte i2cBus I2C bus. Byte address Address. Boolean fastMode True for I2C fast mode. Properties | Improve this Doc View Source Address Address. Declaration public byte Address { get; set; } Property Value Type Description Byte | Improve this Doc View Source FastMode True for I2C fast mode. Declaration public bool FastMode { get; set; } Property Value Type Description Boolean | Improve this Doc View Source I2cBus I2C bus. Declaration public byte I2cBus { get; set; } Property Value Type Description Byte Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Ink.html": {
    "href": "api/nanoFramework.UI.Ink.html",
    "title": "Class Ink | nanoFramework Documentation",
    "keywords": "Class Ink Inheritance Object Ink Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public static class Ink Methods ResetInkRegion() Declaration public static extern void ResetInkRegion() SetInkRegion(UInt32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Bitmap) Declaration public static extern void SetInkRegion(uint flags, int x1, int y1, int x2, int y2, int borderWidth, int color, int penWidth, Bitmap bitmap) Parameters Type Name Description UInt32 flags Int32 x1 Int32 y1 Int32 x2 Int32 y2 Int32 borderWidth Int32 color Int32 penWidth Bitmap bitmap"
  },
  "api/nanoFramework.UI.Input.Button.html": {
    "href": "api/nanoFramework.UI.Input.Button.html",
    "title": "Enum Button | nanoFramework Documentation",
    "keywords": "Enum Button Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public enum Button Fields Name Description AppDefined1 AppDefined2 AppDefined3 AppDefined4 AppDefined5 AppDefined6 AppDefined7 AppDefined8 LastSystemDefinedButton Last in the standard MF buttons enumeration None VK_0 VK_1 VK_2 VK_3 VK_4 VK_5 VK_6 VK_7 VK_8 VK_9 VK_A VK_ADD VK_APOSTROPHE VK_APPS VK_ATTN VK_B VK_BACK VK_BACKQUOTE VK_BACKSLASH VK_BROWSER_BACK VK_BROWSER_FAVORITES VK_BROWSER_FORWARD VK_BROWSER_HOME VK_BROWSER_REFRESH VK_BROWSER_SEARCH VK_BROWSER_STOP VK_C VK_CANCEL VK_CAPITAL VK_CLEAR VK_COMMA VK_CONTROL VK_CONVERT VK_CRSEL VK_D VK_DBE_ALPHANUMERIC VK_DBE_CODEINPUT VK_DBE_DBCSCHAR VK_DBE_DETERMINESTRING VK_DBE_ENTERDLGCONVERSIONMODE VK_DBE_ENTERIMECONFIGMODE VK_DBE_ENTERWORDREGISTERMODE VK_DBE_FLUSHSTRING VK_DBE_HIRAGANA VK_DBE_KATAKANA VK_DBE_NOCODEINPUT VK_DBE_NOROMAN VK_DBE_ROMAN VK_DBE_SBCSCHAR VK_DECIMAL VK_DELETE VK_DIVIDE VK_DOWN The DOWN button. VK_E VK_END VK_EQUAL VK_EREOF VK_ESCAPE VK_EXECUTE VK_EXSEL VK_EXTEND_BSLASH VK_F VK_F1 VK_F10 VK_F11 VK_F12 VK_F13 VK_F14 VK_F15 VK_F16 VK_F17 VK_F18 VK_F19 VK_F2 VK_F20 VK_F21 VK_F22 VK_F23 VK_F24 VK_F3 VK_F4 VK_F5 VK_F6 VK_F7 VK_F8 VK_F9 VK_FINAL VK_G VK_H VK_HANGEUL VK_HANGUL VK_HANJA VK_HELP VK_HOME VK_HYPHEN VK_I VK_INSERT VK_J VK_JUNJA VK_K VK_KANA VK_KANJI VK_L VK_LAUNCH_APP1 VK_LAUNCH_APP2 VK_LAUNCH_MAIL VK_LAUNCH_MEDIA_SELECT VK_LBRACKET VK_LBUTTON VK_LCONTROL VK_LEFT The LEFT button. VK_LMENU VK_LSHIFT VK_LWIN VK_M VK_MBUTTON VK_MEDIA_NEXT_TRACK VK_MEDIA_PLAY_PAUSE VK_MEDIA_PREV_TRACK VK_MEDIA_STOP VK_MENU VK_MULTIPLY VK_N VK_NEXT VK_NOCONVERT VK_NONAME VK_NUMLOCK VK_NUMPAD0 VK_NUMPAD1 VK_NUMPAD2 VK_NUMPAD3 VK_NUMPAD4 VK_NUMPAD5 VK_NUMPAD6 VK_NUMPAD7 VK_NUMPAD8 VK_NUMPAD9 VK_O VK_OEM_102 VK_OEM_CLEAR VK_OFF VK_P VK_PA1 VK_PAUSE VK_PERIOD VK_PLAY VK_PRINT VK_PRIOR VK_PROCESSKEY VK_Q VK_R VK_RBRACKET VK_RBUTTON VK_RCONTROL VK_RETURN VK_RIGHT The RIGHT button. VK_RMENU VK_RSHIFT VK_RWIN VK_S VK_SCROLL VK_SELECT VK_SEMICOLON VK_SEPARATOR VK_SHIFT VK_SLASH VK_SLEEP VK_SNAPSHOT VK_SPACE VK_SUBTRACT VK_T VK_TAB VK_U VK_UP The UP button. VK_V VK_VOLUME_DOWN VK_VOLUME_MUTE VK_VOLUME_UP VK_W VK_X VK_Y VK_Z VK_ZOOM Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.Input.ButtonDevice.html": {
    "href": "api/nanoFramework.UI.Input.ButtonDevice.html",
    "title": "Class ButtonDevice | nanoFramework Documentation",
    "keywords": "Class ButtonDevice The ButtonDevice class represents the button device to the members of a context. Inheritance Object DispatcherObject InputDevice ButtonDevice Inherited Members DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public sealed class ButtonDevice : InputDevice Properties | Improve this Doc View Source DeviceType Device Type Declaration public override InputManager.InputDeviceType DeviceType { get; } Property Value Type Description InputManager.InputDeviceType Overrides InputDevice.DeviceType | Improve this Doc View Source Target Returns the element that input from this device is sent to. Declaration public override UIElement Target { get; } Property Value Type Description UIElement Overrides InputDevice.Target Methods | Improve this Doc View Source Focus(UIElement) Focuses the button input on a particular element. Declaration public UIElement Focus(UIElement obj) Parameters Type Name Description UIElement obj The element to focus the button pad on. Returns Type Description UIElement Element focused to | Improve this Doc View Source GetButtonState(Button) Returns the state of the specified button. Declaration public ButtonState GetButtonState(Button button) Parameters Type Name Description Button button Returns Type Description ButtonState | Improve this Doc View Source IsButtonDown(Button) Returns whether or not the specified button is down. Declaration public bool IsButtonDown(Button button) Parameters Type Name Description Button button Returns Type Description Boolean | Improve this Doc View Source IsButtonHeld(Button) Returns whether or not the specified button is held. Declaration public bool IsButtonHeld(Button button) Parameters Type Name Description Button button Returns Type Description Boolean | Improve this Doc View Source IsButtonUp(Button) Returns whether or not the specified button is up. Declaration public bool IsButtonUp(Button button) Parameters Type Name Description Button button Returns Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.ButtonEventArgs.html": {
    "href": "api/nanoFramework.UI.Input.ButtonEventArgs.html",
    "title": "Class ButtonEventArgs | nanoFramework Documentation",
    "keywords": "Class ButtonEventArgs The ButtonEventArgs class contains information about button states. Inheritance Object EventArgs RoutedEventArgs InputEventArgs ButtonEventArgs Inherited Members InputEventArgs.Device InputEventArgs.Timestamp RoutedEventArgs.RoutedEvent RoutedEventArgs.Handled RoutedEventArgs.Source RoutedEventArgs.OriginalSource RoutedEventArgs.OnSetSource(Object) EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class ButtonEventArgs : InputEventArgs Constructors | Improve this Doc View Source ButtonEventArgs(ButtonDevice, PresentationSource, DateTime, Button) Constructs an instance of the ButtonEventArgs class. Declaration public ButtonEventArgs(ButtonDevice buttonDevice, PresentationSource inputSource, DateTime timestamp, Button button) Parameters Type Name Description ButtonDevice buttonDevice The button device associated with this event. PresentationSource inputSource Presentation Source DateTime timestamp The time when the input occured. (machine time) Button button The button referenced by the event. Fields | Improve this Doc View Source Button The Button referenced by the event. Declaration public readonly Button Button Field Value Type Description Button | Improve this Doc View Source InputSource The source for this button Declaration public readonly PresentationSource InputSource Field Value Type Description PresentationSource Properties | Improve this Doc View Source ButtonState The state of the button referenced by the event. Declaration public ButtonState ButtonState { get; } Property Value Type Description ButtonState | Improve this Doc View Source IsRepeat Whether the button pressed is a repeated button or not. Declaration public bool IsRepeat { get; } Property Value Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.ButtonEventHandler.html": {
    "href": "api/nanoFramework.UI.Input.ButtonEventHandler.html",
    "title": "Delegate ButtonEventHandler | nanoFramework Documentation",
    "keywords": "Delegate ButtonEventHandler The delegate to use for handlers that receive ButtonEventArgs. Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public delegate void ButtonEventHandler(object sender, ButtonEventArgs e); Parameters Type Name Description Object sender ButtonEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.Buttons.html": {
    "href": "api/nanoFramework.UI.Input.Buttons.html",
    "title": "Class Buttons | nanoFramework Documentation",
    "keywords": "Class Buttons The Button class represents the button device to the members of a context. Inheritance Object Buttons Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public sealed class Buttons Remarks The static members of this class simply delegate to the primary button device of the calling thread's input manager. Fields | Improve this Doc View Source ButtonDownEvent ButtonDown Declaration public static readonly RoutedEvent ButtonDownEvent Field Value Type Description RoutedEvent | Improve this Doc View Source ButtonUpEvent ButtonUp Declaration public static readonly RoutedEvent ButtonUpEvent Field Value Type Description RoutedEvent | Improve this Doc View Source GotFocusEvent GotFocus Declaration public static readonly RoutedEvent GotFocusEvent Field Value Type Description RoutedEvent | Improve this Doc View Source LostFocusEvent LostFocus Declaration public static readonly RoutedEvent LostFocusEvent Field Value Type Description RoutedEvent | Improve this Doc View Source PreviewButtonDownEvent PreviewButtonDown Declaration public static readonly RoutedEvent PreviewButtonDownEvent Field Value Type Description RoutedEvent | Improve this Doc View Source PreviewButtonUpEvent PreviewButtonUp Declaration public static readonly RoutedEvent PreviewButtonUpEvent Field Value Type Description RoutedEvent Properties | Improve this Doc View Source FocusedElement Returns the element that the button is focused on. Declaration public static UIElement FocusedElement { get; } Property Value Type Description UIElement | Improve this Doc View Source PrimaryDevice The primary button device. Declaration public static ButtonDevice PrimaryDevice { get; } Property Value Type Description ButtonDevice Methods | Improve this Doc View Source Focus(UIElement) Focuses the button on a particular element. Declaration public static UIElement Focus(UIElement element) Parameters Type Name Description UIElement element The element to focus the button on. Returns Type Description UIElement | Improve this Doc View Source GetButtonState(Button) Returns the state of the specified button. Declaration public static ButtonState GetButtonState(Button button) Parameters Type Name Description Button button Returns Type Description ButtonState | Improve this Doc View Source IsButtonDown(Button) Returns whether or not the specified button is down. Declaration public static bool IsButtonDown(Button button) Parameters Type Name Description Button button Returns Type Description Boolean | Improve this Doc View Source IsButtonHeld(Button) Returns whether or not the specified button is held. Declaration public static bool IsButtonHeld(Button button) Parameters Type Name Description Button button Returns Type Description Boolean | Improve this Doc View Source IsButtonUp(Button) Returns whether or not the specified button is up. Declaration public static bool IsButtonUp(Button button) Parameters Type Name Description Button button Returns Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.ButtonState.html": {
    "href": "api/nanoFramework.UI.Input.ButtonState.html",
    "title": "Enum ButtonState | nanoFramework Documentation",
    "keywords": "Enum ButtonState The ButtonState enumeration describes the state that buttons can be in. Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax [Flags] public enum ButtonState : byte Fields Name Description Down The button is down. Held The button is held None No state (same as up). Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.Input.CaptureMode.html": {
    "href": "api/nanoFramework.UI.Input.CaptureMode.html",
    "title": "Enum CaptureMode | nanoFramework Documentation",
    "keywords": "Enum CaptureMode Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public enum CaptureMode Fields Name Description Element Element None None SubTree SubTree Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.Input.FocusChangedEventArgs.html": {
    "href": "api/nanoFramework.UI.Input.FocusChangedEventArgs.html",
    "title": "Class FocusChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class FocusChangedEventArgs The FocusChangedEventArgs class contains information about focus states Inheritance Object EventArgs RoutedEventArgs InputEventArgs FocusChangedEventArgs Inherited Members InputEventArgs.Device InputEventArgs.Timestamp RoutedEventArgs.RoutedEvent RoutedEventArgs.Handled RoutedEventArgs.Source RoutedEventArgs.OriginalSource RoutedEventArgs.OnSetSource(Object) EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class FocusChangedEventArgs : InputEventArgs Constructors | Improve this Doc View Source FocusChangedEventArgs(ButtonDevice, DateTime, UIElement, UIElement) Constructs an instance of the FocusChangedEventArgs class. Declaration public FocusChangedEventArgs(ButtonDevice buttonDevice, DateTime timestamp, UIElement oldFocus, UIElement newFocus) Parameters Type Name Description ButtonDevice buttonDevice The logical button device associated with this event. DateTime timestamp The time when the input occured. UIElement oldFocus The element that previously had focus. UIElement newFocus The element that now has focus. Fields | Improve this Doc View Source NewFocus The element that now has focus. Declaration public readonly UIElement NewFocus Field Value Type Description UIElement | Improve this Doc View Source OldFocus The element that previously had focus. Declaration public readonly UIElement OldFocus Field Value Type Description UIElement Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.FocusChangedEventHandler.html": {
    "href": "api/nanoFramework.UI.Input.FocusChangedEventHandler.html",
    "title": "Delegate FocusChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate FocusChangedEventHandler The delegate to use for handlers that receive FocusChangedEventArgs. Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public delegate void FocusChangedEventHandler(object sender, FocusChangedEventArgs e); Parameters Type Name Description Object sender FocusChangedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.GenericDevice.html": {
    "href": "api/nanoFramework.UI.Input.GenericDevice.html",
    "title": "Class GenericDevice | nanoFramework Documentation",
    "keywords": "Class GenericDevice The GenericDevice class represents the Generic device to the members of a context. Inheritance Object DispatcherObject InputDevice GenericDevice Inherited Members DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public sealed class GenericDevice : InputDevice Properties | Improve this Doc View Source DeviceType Input Manager Declaration public override InputManager.InputDeviceType DeviceType { get; } Property Value Type Description InputManager.InputDeviceType Overrides InputDevice.DeviceType | Improve this Doc View Source Target Declaration public override UIElement Target { get; } Property Value Type Description UIElement Overrides InputDevice.Target Methods | Improve this Doc View Source SetTarget(UIElement) SetTarget Declaration public void SetTarget(UIElement target) Parameters Type Name Description UIElement target Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.GenericEventArgs.html": {
    "href": "api/nanoFramework.UI.Input.GenericEventArgs.html",
    "title": "Class GenericEventArgs | nanoFramework Documentation",
    "keywords": "Class GenericEventArgs Event Args Inheritance Object EventArgs RoutedEventArgs InputEventArgs GenericEventArgs Inherited Members InputEventArgs.Device InputEventArgs.Timestamp RoutedEventArgs.RoutedEvent RoutedEventArgs.Handled RoutedEventArgs.Source RoutedEventArgs.OriginalSource RoutedEventArgs.OnSetSource(Object) EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class GenericEventArgs : InputEventArgs Constructors | Improve this Doc View Source GenericEventArgs(InputDevice, GenericEventEx) Generic Event Args Declaration public GenericEventArgs(InputDevice inputDevice, GenericEventEx genericEvent) Parameters Type Name Description InputDevice inputDevice GenericEventEx genericEvent Fields | Improve this Doc View Source InternalEvent GenericEventEx Declaration public readonly GenericEventEx InternalEvent Field Value Type Description GenericEventEx Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.GenericEventHandler.html": {
    "href": "api/nanoFramework.UI.Input.GenericEventHandler.html",
    "title": "Delegate GenericEventHandler | nanoFramework Documentation",
    "keywords": "Delegate GenericEventHandler Generic Event handler Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public delegate void GenericEventHandler(object sender, GenericEventArgs e); Parameters Type Name Description Object sender GenericEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.GenericEvents.html": {
    "href": "api/nanoFramework.UI.Input.GenericEvents.html",
    "title": "Class GenericEvents | nanoFramework Documentation",
    "keywords": "Class GenericEvents Generic Events Inheritance Object GenericEvents Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public sealed class GenericEvents Fields | Improve this Doc View Source GenericStandardEvent Generic Standard Events Declaration public static readonly RoutedEvent GenericStandardEvent Field Value Type Description RoutedEvent Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.html": {
    "href": "api/nanoFramework.UI.Input.html",
    "title": "Namespace nanoFramework.UI.Input | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.UI.Input Classes ButtonDevice The ButtonDevice class represents the button device to the members of a context. ButtonEventArgs The ButtonEventArgs class contains information about button states. Buttons The Button class represents the button device to the members of a context. FocusChangedEventArgs The FocusChangedEventArgs class contains information about focus states GenericDevice The GenericDevice class represents the Generic device to the members of a context. GenericEventArgs Event Args GenericEvents Generic Events InputDevice Provides the base class for all input devices. InputEventArgs The InputEventArgs class represents a type of RoutedEventArgs that are relevant to all input events. InputManager The InputManager class is responsible for coordinating all of the input system in nanoFramework. The input manager exists per Dispatcher InputManager.DeviceEvents Device Events InputProviderSite The object which input providers use to report input to the input manager. InputReport The InputReport is an abstract base class for all input that is reported to the InputManager. InputReportArgs report arguments InputReportEventArgs The InputReportEventArgs class contains information about an input report that is being processed. NotifyInputEventArgs Provides information about an input event being processed by the input manager. PreProcessInputEventArgs Allows the handler to cancel the processing of an input event. ProcessInputEventArgs Provides access to the input manager's staging area. RawButtonInputReport The RawButtonInputReport class encapsulates the raw input provided from a keyboard. RawGenericInputReport The RawGenericInputReport class encapsulates the raw input provided from a keyboard. RawTouchInputReport The RawTouchInputReport class encapsulates the raw input provided from a multitouch source. StagingAreaInputItem This class encapsulates an input event while it is being processed by the input manager. TouchCapture TouchDevice The TouchDevice class represents the stylus/touch device to the members of a context. TouchEventArgs TouchEvents Enums Button ButtonState The ButtonState enumeration describes the state that buttons can be in. CaptureMode InputManager.InputDeviceType Input Device Type RawButtonActions RawTouchActions Delegates ButtonEventHandler The delegate to use for handlers that receive ButtonEventArgs. FocusChangedEventHandler The delegate to use for handlers that receive FocusChangedEventArgs. GenericEventHandler Generic Event handler InputEventHandler The delegate to use for handlers that receive InputEventArgs. InputReportEventHandler The delegate to use for handlers that receive InputReportEventArgs NotifyInputEventHandler Delegate type for handles of events that use NotifyInputEventArgs . PreProcessInputEventHandler Delegate type for handles of events that use PreProcessInputEventArgs . ProcessInputEventHandler Delegate type for handles of events that use ProcessInputEventArgs . TouchEventHandler"
  },
  "api/nanoFramework.UI.Input.InputDevice.html": {
    "href": "api/nanoFramework.UI.Input.InputDevice.html",
    "title": "Class InputDevice | nanoFramework Documentation",
    "keywords": "Class InputDevice Provides the base class for all input devices. Inheritance Object DispatcherObject InputDevice ButtonDevice GenericDevice TouchDevice Inherited Members DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public abstract class InputDevice : DispatcherObject Constructors | Improve this Doc View Source InputDevice() Constructs an instance of the InputDevice class. Declaration protected InputDevice() Properties | Improve this Doc View Source DeviceType Input Device Type Declaration public abstract InputManager.InputDeviceType DeviceType { get; } Property Value Type Description InputManager.InputDeviceType | Improve this Doc View Source Target Returns the element that input from this device is sent to. Declaration public abstract UIElement Target { get; } Property Value Type Description UIElement Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.InputEventArgs.html": {
    "href": "api/nanoFramework.UI.Input.InputEventArgs.html",
    "title": "Class InputEventArgs | nanoFramework Documentation",
    "keywords": "Class InputEventArgs The InputEventArgs class represents a type of RoutedEventArgs that are relevant to all input events. Inheritance Object EventArgs RoutedEventArgs InputEventArgs ButtonEventArgs FocusChangedEventArgs GenericEventArgs InputReportEventArgs TouchEventArgs Inherited Members RoutedEventArgs.RoutedEvent RoutedEventArgs.Handled RoutedEventArgs.Source RoutedEventArgs.OriginalSource RoutedEventArgs.OnSetSource(Object) EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class InputEventArgs : RoutedEventArgs Constructors | Improve this Doc View Source InputEventArgs(InputDevice, DateTime) Initializes a new instance of the InputEventArgs class. Declaration public InputEventArgs(InputDevice inputDevice, DateTime timestamp) Parameters Type Name Description InputDevice inputDevice The input device to associate with this event. DateTime timestamp The time when the input occured. Fields | Improve this Doc View Source Timestamp Read-only access to the input timestamp. Declaration public readonly DateTime Timestamp Field Value Type Description DateTime Properties | Improve this Doc View Source Device Read-only access to the input device that initiated this event. Declaration public InputDevice Device { get; } Property Value Type Description InputDevice Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.InputEventHandler.html": {
    "href": "api/nanoFramework.UI.Input.InputEventHandler.html",
    "title": "Delegate InputEventHandler | nanoFramework Documentation",
    "keywords": "Delegate InputEventHandler The delegate to use for handlers that receive InputEventArgs. Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public delegate void InputEventHandler(object sender, InputEventArgs e); Parameters Type Name Description Object sender InputEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.InputManager.DeviceEvents.html": {
    "href": "api/nanoFramework.UI.Input.InputManager.DeviceEvents.html",
    "title": "Class InputManager.DeviceEvents | nanoFramework Documentation",
    "keywords": "Class InputManager.DeviceEvents Device Events Inheritance Object DispatcherObject InputManager.DeviceEvents Inherited Members DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class DeviceEvents : DispatcherObject Events | Improve this Doc View Source PostNotifyInput Subscribe to all input after it is notified Declaration public event NotifyInputEventHandler PostNotifyInput Event Type Type Description NotifyInputEventHandler | Improve this Doc View Source PostProcessInput subscribe to all input after it is processed Declaration public event ProcessInputEventHandler PostProcessInput Event Type Type Description ProcessInputEventHandler | Improve this Doc View Source PreNotifyInput Subscribe for all input before it is notified Declaration public event NotifyInputEventHandler PreNotifyInput Event Type Type Description NotifyInputEventHandler | Improve this Doc View Source PreProcessInput Subscribe for all input before it is processed Declaration public event PreProcessInputEventHandler PreProcessInput Event Type Type Description PreProcessInputEventHandler Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.InputManager.html": {
    "href": "api/nanoFramework.UI.Input.InputManager.html",
    "title": "Class InputManager | nanoFramework Documentation",
    "keywords": "Class InputManager The InputManager class is responsible for coordinating all of the input system in nanoFramework. The input manager exists per Dispatcher Inheritance Object DispatcherObject InputManager Inherited Members DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public sealed class InputManager : DispatcherObject Fields | Improve this Doc View Source InputDeviceEvents Declaration public InputManager.DeviceEvents[] InputDeviceEvents Field Value Type Description InputManager.DeviceEvents [] | Improve this Doc View Source InputReportEvent A routed event indicating that an input report arrived. Declaration public static readonly RoutedEvent InputReportEvent Field Value Type Description RoutedEvent | Improve this Doc View Source PreviewInputReportEvent A routed event indicating that an input report arrived. Declaration public static readonly RoutedEvent PreviewInputReportEvent Field Value Type Description RoutedEvent Properties | Improve this Doc View Source ButtonDevice Button Device Declaration public ButtonDevice ButtonDevice { get; } Property Value Type Description ButtonDevice | Improve this Doc View Source CurrentInputManager Return the input manager associated with the current context. Declaration public static InputManager CurrentInputManager { get; } Property Value Type Description InputManager Remarks This class will not be available in internet zone. | Improve this Doc View Source GenericDevice GenericDevice Declaration public GenericDevice GenericDevice { get; } Property Value Type Description GenericDevice | Improve this Doc View Source InputProviders Returns a collection of input providers registered with the input manager. Declaration public ICollection InputProviders { get; } Property Value Type Description ICollection | Improve this Doc View Source MostRecentInputDevice The MostRecentInputDevice represents the last input device to report an \"interesting\" user action. What exactly constitutes such an action is up to each device to implement. Declaration public InputDevice MostRecentInputDevice { get; set; } Property Value Type Description InputDevice | Improve this Doc View Source TouchDevice Touch Device Declaration public TouchDevice TouchDevice { get; } Property Value Type Description TouchDevice Methods | Improve this Doc View Source ProcessInput(InputEventArgs) Synchronously processes the specified input. Declaration public bool ProcessInput(InputEventArgs input) Parameters Type Name Description InputEventArgs input Returns Type Description Boolean Whether or not any event generated as a consequence of this event was handled. Remarks The specified input is processed by all of the filters and monitors, and is finally dispatched to the appropriate element as an input event. | Improve this Doc View Source RegisterInputProvider(Object) Registers an input provider with the input manager. Declaration public InputProviderSite RegisterInputProvider(object inputProvider) Parameters Type Name Description Object inputProvider The input provider to register. Returns Type Description InputProviderSite Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.InputManager.InputDeviceType.html": {
    "href": "api/nanoFramework.UI.Input.InputManager.InputDeviceType.html",
    "title": "Enum InputManager.InputDeviceType | nanoFramework Documentation",
    "keywords": "Enum InputManager.InputDeviceType Input Device Type Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public enum InputDeviceType Fields Name Description Button Button Generic Generic Last Last Touch Touch Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.Input.InputProviderSite.html": {
    "href": "api/nanoFramework.UI.Input.InputProviderSite.html",
    "title": "Class InputProviderSite | nanoFramework Documentation",
    "keywords": "Class InputProviderSite The object which input providers use to report input to the input manager. Inheritance Object InputProviderSite Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class InputProviderSite : IDisposable Properties | Improve this Doc View Source InputManager Returns the input manager that this site is attached to. Declaration public InputManager InputManager { get; } Property Value Type Description InputManager | Improve this Doc View Source IsDisposed Returns true if we are disposed. Declaration public bool IsDisposed { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose() Unregisters this input provider. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source ReportInput(InputDevice, InputReport) Reports input to the input manager. Declaration public bool ReportInput(InputDevice device, InputReport inputReport) Parameters Type Name Description InputDevice device InputReport inputReport Returns Type Description Boolean Whether or not any event generated as a consequence of this event was handled. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.InputReport.html": {
    "href": "api/nanoFramework.UI.Input.InputReport.html",
    "title": "Class InputReport | nanoFramework Documentation",
    "keywords": "Class InputReport The InputReport is an abstract base class for all input that is reported to the InputManager. Inheritance Object InputReport RawButtonInputReport RawGenericInputReport RawTouchInputReport Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public abstract class InputReport Remarks It is important to note that the InputReport class only contains blittable types. This is required so that the report can be marshalled across application domains. Constructors | Improve this Doc View Source InputReport(PresentationSource, DateTime) Constructs an instance of the InputReport class. Declaration protected InputReport(PresentationSource inputSource, DateTime timestamp) Parameters Type Name Description PresentationSource inputSource The type of input that is being reported. DateTime timestamp The time when the input occured. Fields | Improve this Doc View Source InputSource Read-only access to the type of input source that reported input. Declaration public readonly PresentationSource InputSource Field Value Type Description PresentationSource | Improve this Doc View Source Timestamp Read-only access to the time when the input occured. Declaration public readonly DateTime Timestamp Field Value Type Description DateTime Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.InputReportArgs.html": {
    "href": "api/nanoFramework.UI.Input.InputReportArgs.html",
    "title": "Class InputReportArgs | nanoFramework Documentation",
    "keywords": "Class InputReportArgs report arguments Inheritance Object InputReportArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class InputReportArgs Constructors | Improve this Doc View Source InputReportArgs(Object, Object) Declaration public InputReportArgs(object dev, object report) Parameters Type Name Description Object dev Object report Fields | Improve this Doc View Source Device Declaration public readonly InputDevice Device Field Value Type Description InputDevice | Improve this Doc View Source Report Declaration public readonly InputReport Report Field Value Type Description InputReport Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.InputReportEventArgs.html": {
    "href": "api/nanoFramework.UI.Input.InputReportEventArgs.html",
    "title": "Class InputReportEventArgs | nanoFramework Documentation",
    "keywords": "Class InputReportEventArgs The InputReportEventArgs class contains information about an input report that is being processed. Inheritance Object EventArgs RoutedEventArgs InputEventArgs InputReportEventArgs Inherited Members InputEventArgs.Device InputEventArgs.Timestamp RoutedEventArgs.RoutedEvent RoutedEventArgs.Handled RoutedEventArgs.Source RoutedEventArgs.OriginalSource RoutedEventArgs.OnSetSource(Object) EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class InputReportEventArgs : InputEventArgs Constructors | Improve this Doc View Source InputReportEventArgs(InputDevice, InputReport) Initializes a new instance of the InputReportEventArgs class. Declaration public InputReportEventArgs(InputDevice inputDevice, InputReport report) Parameters Type Name Description InputDevice inputDevice The input device to associate this input with. InputReport report The input report being processed. Fields | Improve this Doc View Source Report Read-only access to the input report being processed. Declaration public readonly InputReport Report Field Value Type Description InputReport Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.InputReportEventHandler.html": {
    "href": "api/nanoFramework.UI.Input.InputReportEventHandler.html",
    "title": "Delegate InputReportEventHandler | nanoFramework Documentation",
    "keywords": "Delegate InputReportEventHandler The delegate to use for handlers that receive InputReportEventArgs Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public delegate void InputReportEventHandler(object sender, InputReportEventArgs e); Parameters Type Name Description Object sender InputReportEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.NotifyInputEventArgs.html": {
    "href": "api/nanoFramework.UI.Input.NotifyInputEventArgs.html",
    "title": "Class NotifyInputEventArgs | nanoFramework Documentation",
    "keywords": "Class NotifyInputEventArgs Provides information about an input event being processed by the input manager. Inheritance Object EventArgs NotifyInputEventArgs ProcessInputEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class NotifyInputEventArgs : EventArgs Remarks An instance of this class, or a derived class, is passed to the handlers of the following events: Fields | Improve this Doc View Source StagingItem The staging area input item being processed by the input manager. Declaration public readonly StagingAreaInputItem StagingItem Field Value Type Description StagingAreaInputItem Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.NotifyInputEventHandler.html": {
    "href": "api/nanoFramework.UI.Input.NotifyInputEventHandler.html",
    "title": "Delegate NotifyInputEventHandler | nanoFramework Documentation",
    "keywords": "Delegate NotifyInputEventHandler Delegate type for handles of events that use NotifyInputEventArgs . Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public delegate void NotifyInputEventHandler(object sender, NotifyInputEventArgs e); Parameters Type Name Description Object sender NotifyInputEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.PreProcessInputEventArgs.html": {
    "href": "api/nanoFramework.UI.Input.PreProcessInputEventArgs.html",
    "title": "Class PreProcessInputEventArgs | nanoFramework Documentation",
    "keywords": "Class PreProcessInputEventArgs Allows the handler to cancel the processing of an input event. Inheritance Object EventArgs NotifyInputEventArgs ProcessInputEventArgs PreProcessInputEventArgs Inherited Members ProcessInputEventArgs.PushInput(InputEventArgs, StagingAreaInputItem) ProcessInputEventArgs.PushInput(StagingAreaInputItem) ProcessInputEventArgs.PopInput() ProcessInputEventArgs.PeekInput() NotifyInputEventArgs.StagingItem EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public sealed class PreProcessInputEventArgs : ProcessInputEventArgs Remarks An instance of this class is passed to the handlers of the following events: cref=\"InputManager.PreProcessInput\" Properties | Improve this Doc View Source Canceled Whether or not the input event processing was canceled. Declaration public bool Canceled { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Cancel() Cancels the processing of the input event. Declaration public void Cancel() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.PreProcessInputEventHandler.html": {
    "href": "api/nanoFramework.UI.Input.PreProcessInputEventHandler.html",
    "title": "Delegate PreProcessInputEventHandler | nanoFramework Documentation",
    "keywords": "Delegate PreProcessInputEventHandler Delegate type for handles of events that use PreProcessInputEventArgs . Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public delegate void PreProcessInputEventHandler(object sender, PreProcessInputEventArgs e); Parameters Type Name Description Object sender PreProcessInputEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.ProcessInputEventArgs.html": {
    "href": "api/nanoFramework.UI.Input.ProcessInputEventArgs.html",
    "title": "Class ProcessInputEventArgs | nanoFramework Documentation",
    "keywords": "Class ProcessInputEventArgs Provides access to the input manager's staging area. Inheritance Object EventArgs NotifyInputEventArgs ProcessInputEventArgs PreProcessInputEventArgs Inherited Members NotifyInputEventArgs.StagingItem EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class ProcessInputEventArgs : NotifyInputEventArgs Remarks An instance of this class, or a derived class, is passed to the handlers of the following events: cref=\"InputManager.PreProcessInput\" cref=\"InputManager.PostProcessInput\" Methods | Improve this Doc View Source PeekInput() Returns the input event on the top of the staging area. Declaration public StagingAreaInputItem PeekInput() Returns Type Description StagingAreaInputItem The input event that is on the top of the staging area. This can be null, if the staging area is empty. | Improve this Doc View Source PopInput() Pops off the input event on the top of the staging area. Declaration public StagingAreaInputItem PopInput() Returns Type Description StagingAreaInputItem The input event that was on the top of the staging area. This can be null, if the staging area was empty. | Improve this Doc View Source PushInput(InputEventArgs, StagingAreaInputItem) Pushes an input event onto the top of the staging area. Declaration public StagingAreaInputItem PushInput(InputEventArgs input, StagingAreaInputItem promote) Parameters Type Name Description InputEventArgs input The input event to place on the staging area. This may not be null, and may not already exist in the staging area. StagingAreaInputItem promote An existing staging area item to promote the state from. Returns Type Description StagingAreaInputItem The staging area input item that wraps the specified input. | Improve this Doc View Source PushInput(StagingAreaInputItem) Pushes an input event onto the top of the staging area. Declaration public StagingAreaInputItem PushInput(StagingAreaInputItem input) Parameters Type Name Description StagingAreaInputItem input The input event to place on the staging area. This may not be null, and may not already exist in the staging area. Returns Type Description StagingAreaInputItem The specified staging area input item. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.ProcessInputEventHandler.html": {
    "href": "api/nanoFramework.UI.Input.ProcessInputEventHandler.html",
    "title": "Delegate ProcessInputEventHandler | nanoFramework Documentation",
    "keywords": "Delegate ProcessInputEventHandler Delegate type for handles of events that use ProcessInputEventArgs . Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public delegate void ProcessInputEventHandler(object sender, ProcessInputEventArgs e); Parameters Type Name Description Object sender ProcessInputEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.RawButtonActions.html": {
    "href": "api/nanoFramework.UI.Input.RawButtonActions.html",
    "title": "Enum RawButtonActions | nanoFramework Documentation",
    "keywords": "Enum RawButtonActions Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public enum RawButtonActions Fields Name Description Activate Activate ButtonDown Button Down ButtonUp Button Up Deactivate Deactivate Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.Input.RawButtonInputReport.html": {
    "href": "api/nanoFramework.UI.Input.RawButtonInputReport.html",
    "title": "Class RawButtonInputReport | nanoFramework Documentation",
    "keywords": "Class RawButtonInputReport The RawButtonInputReport class encapsulates the raw input provided from a keyboard. Inheritance Object InputReport RawButtonInputReport Inherited Members InputReport.InputSource InputReport.Timestamp Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class RawButtonInputReport : InputReport Remarks It is important to note that the InputReport class only contains blittable types. This is required so that the report can be marshalled across application domains. Constructors | Improve this Doc View Source RawButtonInputReport(PresentationSource, DateTime, Button, RawButtonActions) Constructs an instance of the RawKeyboardInputReport class. Declaration public RawButtonInputReport(PresentationSource inputSource, DateTime timestamp, Button button, RawButtonActions actions) Parameters Type Name Description PresentationSource inputSource DateTime timestamp Button button RawButtonActions actions Fields | Improve this Doc View Source Actions Read-only access to the action reported. Declaration public readonly RawButtonActions Actions Field Value Type Description RawButtonActions | Improve this Doc View Source Button Read-only access to the button reported. Declaration public readonly Button Button Field Value Type Description Button Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.RawGenericInputReport.html": {
    "href": "api/nanoFramework.UI.Input.RawGenericInputReport.html",
    "title": "Class RawGenericInputReport | nanoFramework Documentation",
    "keywords": "Class RawGenericInputReport The RawGenericInputReport class encapsulates the raw input provided from a keyboard. Inheritance Object InputReport RawGenericInputReport Inherited Members InputReport.InputSource InputReport.Timestamp Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class RawGenericInputReport : InputReport Remarks It is important to note that the InputReport class only contains blittable types. This is required so that the report can be marshalled across application domains. Constructors | Improve this Doc View Source RawGenericInputReport(PresentationSource, GenericEventEx) Constructs an instance of the RawKeyboardInputReport class. Declaration public RawGenericInputReport(PresentationSource inputSource, GenericEventEx genericEvent) Parameters Type Name Description PresentationSource inputSource source of the input GenericEventEx genericEvent Generic event | Improve this Doc View Source RawGenericInputReport(PresentationSource, GenericEventEx, UIElement) Declaration public RawGenericInputReport(PresentationSource inputSource, GenericEventEx genericEvent, UIElement destTarget) Parameters Type Name Description PresentationSource inputSource GenericEventEx genericEvent UIElement destTarget Fields | Improve this Doc View Source InternalEvent Declaration public readonly GenericEventEx InternalEvent Field Value Type Description GenericEventEx | Improve this Doc View Source Target Declaration public readonly UIElement Target Field Value Type Description UIElement Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.RawTouchActions.html": {
    "href": "api/nanoFramework.UI.Input.RawTouchActions.html",
    "title": "Enum RawTouchActions | nanoFramework Documentation",
    "keywords": "Enum RawTouchActions Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public enum RawTouchActions Fields Name Description Activate Activate Deactivate Deactivate TouchDown Touch Down TouchMove Touch Move TouchUp Touch Up Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.Input.RawTouchInputReport.html": {
    "href": "api/nanoFramework.UI.Input.RawTouchInputReport.html",
    "title": "Class RawTouchInputReport | nanoFramework Documentation",
    "keywords": "Class RawTouchInputReport The RawTouchInputReport class encapsulates the raw input provided from a multitouch source. Inheritance Object InputReport RawTouchInputReport Inherited Members InputReport.InputSource InputReport.Timestamp Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class RawTouchInputReport : InputReport Remarks It is important to note that the InputReport class only contains blittable types. This is required so that the report can be marshalled across application domains. Constructors | Improve this Doc View Source RawTouchInputReport(PresentationSource, DateTime, Byte, TouchInput[]) Constructs an instance of the RawKeyboardInputReport class. Declaration public RawTouchInputReport(PresentationSource inputSource, DateTime timestamp, byte eventMessage, TouchInput[] touches) Parameters Type Name Description PresentationSource inputSource DateTime timestamp Byte eventMessage TouchInput [] touches | Improve this Doc View Source RawTouchInputReport(PresentationSource, DateTime, Byte, TouchInput[], UIElement) Declaration public RawTouchInputReport(PresentationSource inputSource, DateTime timestamp, byte eventMessage, TouchInput[] touches, UIElement destTarget) Parameters Type Name Description PresentationSource inputSource DateTime timestamp Byte eventMessage TouchInput [] touches UIElement destTarget Fields | Improve this Doc View Source EventMessage Declaration public readonly byte EventMessage Field Value Type Description Byte | Improve this Doc View Source Target Declaration public readonly UIElement Target Field Value Type Description UIElement | Improve this Doc View Source Touches Declaration public readonly TouchInput[] Touches Field Value Type Description TouchInput [] Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.StagingAreaInputItem.html": {
    "href": "api/nanoFramework.UI.Input.StagingAreaInputItem.html",
    "title": "Class StagingAreaInputItem | nanoFramework Documentation",
    "keywords": "Class StagingAreaInputItem This class encapsulates an input event while it is being processed by the input manager. Inheritance Object StagingAreaInputItem Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class StagingAreaInputItem Remarks This class just provides the dictionary-based storage for all of the listeners of the various input manager events. Fields | Improve this Doc View Source Input Returns the input event. Declaration public readonly InputEventArgs Input Field Value Type Description InputEventArgs Methods | Improve this Doc View Source GetData(Object) Provides storage for arbitrary data needed during the processing of this input event. Declaration public object GetData(object key) Parameters Type Name Description Object key An arbitrary key for the data. This cannot be null. Returns Type Description Object The data previously set for this key, or null. | Improve this Doc View Source SetData(Object, Object) Provides storage for arbitrary data needed during the processing of this input event. Declaration public void SetData(object key, object value) Parameters Type Name Description Object key An arbitrary key for the data. This cannot be null. Object value The data to set for this key. This can be null. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.TouchCapture.html": {
    "href": "api/nanoFramework.UI.Input.TouchCapture.html",
    "title": "Class TouchCapture | nanoFramework Documentation",
    "keywords": "Class TouchCapture Inheritance Object TouchCapture Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public static class TouchCapture Properties | Improve this Doc View Source Captured Declaration public static UIElement Captured { get; } Property Value Type Description UIElement Methods | Improve this Doc View Source Capture(UIElement) Declaration public static bool Capture(UIElement element) Parameters Type Name Description UIElement element Returns Type Description Boolean | Improve this Doc View Source Capture(UIElement, CaptureMode) Declaration public static bool Capture(UIElement element, CaptureMode mode) Parameters Type Name Description UIElement element CaptureMode mode Returns Type Description Boolean"
  },
  "api/nanoFramework.UI.Input.TouchDevice.html": {
    "href": "api/nanoFramework.UI.Input.TouchDevice.html",
    "title": "Class TouchDevice | nanoFramework Documentation",
    "keywords": "Class TouchDevice The TouchDevice class represents the stylus/touch device to the members of a context. Inheritance Object DispatcherObject InputDevice TouchDevice Inherited Members DispatcherObject.CheckAccess() DispatcherObject.VerifyAccess() DispatcherObject.Dispatcher Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public sealed class TouchDevice : InputDevice Properties | Improve this Doc View Source DeviceType Declaration public override InputManager.InputDeviceType DeviceType { get; } Property Value Type Description InputManager.InputDeviceType Overrides InputDevice.DeviceType | Improve this Doc View Source Target Declaration public override UIElement Target { get; } Property Value Type Description UIElement Overrides InputDevice.Target Methods | Improve this Doc View Source SetTarget(UIElement) Declaration public void SetTarget(UIElement target) Parameters Type Name Description UIElement target Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.TouchEventArgs.html": {
    "href": "api/nanoFramework.UI.Input.TouchEventArgs.html",
    "title": "Class TouchEventArgs | nanoFramework Documentation",
    "keywords": "Class TouchEventArgs Inheritance Object EventArgs RoutedEventArgs InputEventArgs TouchEventArgs Inherited Members InputEventArgs.Device InputEventArgs.Timestamp RoutedEventArgs.RoutedEvent RoutedEventArgs.Handled RoutedEventArgs.Source RoutedEventArgs.OriginalSource RoutedEventArgs.OnSetSource(Object) EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public class TouchEventArgs : InputEventArgs Constructors | Improve this Doc View Source TouchEventArgs(InputDevice, DateTime, TouchInput[]) Declaration public TouchEventArgs(InputDevice inputDevice, DateTime timestamp, TouchInput[] touches) Parameters Type Name Description InputDevice inputDevice DateTime timestamp TouchInput [] touches Fields | Improve this Doc View Source Touches Declaration public TouchInput[] Touches Field Value Type Description TouchInput [] Methods | Improve this Doc View Source GetPosition(UIElement, Int32, out Int32, out Int32) Declaration public void GetPosition(UIElement relativeTo, int touchIndex, out int x, out int y) Parameters Type Name Description UIElement relativeTo Int32 touchIndex Int32 x Int32 y Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.TouchEventHandler.html": {
    "href": "api/nanoFramework.UI.Input.TouchEventHandler.html",
    "title": "Delegate TouchEventHandler | nanoFramework Documentation",
    "keywords": "Delegate TouchEventHandler Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public delegate void TouchEventHandler(object sender, TouchEventArgs e); Parameters Type Name Description Object sender TouchEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Input.TouchEvents.html": {
    "href": "api/nanoFramework.UI.Input.TouchEvents.html",
    "title": "Class TouchEvents | nanoFramework Documentation",
    "keywords": "Class TouchEvents Inheritance Object TouchEvents Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Input Assembly : nanoFramework.Graphics.dll Syntax public sealed class TouchEvents Fields | Improve this Doc View Source TouchDownEvent Declaration public static readonly RoutedEvent TouchDownEvent Field Value Type Description RoutedEvent | Improve this Doc View Source TouchMoveEvent Declaration public static readonly RoutedEvent TouchMoveEvent Field Value Type Description RoutedEvent | Improve this Doc View Source TouchUpEvent Declaration public static readonly RoutedEvent TouchUpEvent Field Value Type Description RoutedEvent Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Mathematics.html": {
    "href": "api/nanoFramework.UI.Mathematics.html",
    "title": "Class Mathematics | nanoFramework Documentation",
    "keywords": "Class Mathematics Simple Min/Max for the wpf measures Inheritance Object Mathematics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public static class Mathematics Methods | Improve this Doc View Source Abs(Int32) Declaration public static int Abs(int a) Parameters Type Name Description Int32 a Returns Type Description Int32 | Improve this Doc View Source Max(Int32, Int32) Declaration public static int Max(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description Int32 | Improve this Doc View Source Min(Int32, Int32) Declaration public static int Min(int a, int b) Parameters Type Name Description Int32 a Int32 b Returns Type Description Int32"
  },
  "api/nanoFramework.UI.PropertyChangedEventArgs.html": {
    "href": "api/nanoFramework.UI.PropertyChangedEventArgs.html",
    "title": "Class PropertyChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class PropertyChangedEventArgs Provides data for the various property changed events. Inheritance Object PropertyChangedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class PropertyChangedEventArgs Constructors | Improve this Doc View Source PropertyChangedEventArgs(String, Object, Object) Initializes a new instance of the PropertyChangedEventArgs class. Declaration public PropertyChangedEventArgs(string property, object oldValue, object newValue) Parameters Type Name Description String property The property whose value changed. Object oldValue The value of the property before the change. Object newValue The value of the property after the change. Fields | Improve this Doc View Source NewValue The value of the property after the change. Declaration public readonly object NewValue Field Value Type Description Object | Improve this Doc View Source OldValue The value of the property before the change. Declaration public readonly object OldValue Field Value Type Description Object | Improve this Doc View Source Property The property whose value changed. Declaration public readonly string Property Field Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.PropertyChangedEventHandler.html": {
    "href": "api/nanoFramework.UI.PropertyChangedEventHandler.html",
    "title": "Delegate PropertyChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate PropertyChangedEventHandler Represents the method that will handle the event raised when a Property is changed Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public delegate void PropertyChangedEventHandler(object sender, PropertyChangedEventArgs e); Parameters Type Name Description Object sender PropertyChangedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.ReasonSessionEnding.html": {
    "href": "api/nanoFramework.UI.ReasonSessionEnding.html",
    "title": "Enum ReasonSessionEnding | nanoFramework Documentation",
    "keywords": "Enum ReasonSessionEnding Enum for ReasonSessionEnding Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public enum ReasonSessionEnding : byte Fields Name Description Logoff Shutdown Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.RoutedEvent.html": {
    "href": "api/nanoFramework.UI.RoutedEvent.html",
    "title": "Class RoutedEvent | nanoFramework Documentation",
    "keywords": "Class RoutedEvent RoutedEvent is a unique identifier for any registered RoutedEvent Inheritance Object RoutedEvent Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public sealed class RoutedEvent Remarks RoutedEvent constitutes the cref=\"RoutedEvent.Name\" cref=\"RoutedEvent.RoutingStrategy\" cref=\"RoutedEvent.HandlerType\" cref=\"RoutedEvent.OwnerType\" NOTE: None of the members can be null Constructors | Improve this Doc View Source RoutedEvent(String, RoutingStrategy, Type) Create a new routed event. You have to promise not to duplicate another event name in the system, or you will be sorry. Declaration public RoutedEvent(string name, RoutingStrategy routingStrategy, Type handlerType) Parameters Type Name Description String name RoutingStrategy routingStrategy Type handlerType Properties | Improve this Doc View Source HandlerType Returns Type of Handler for the RoutedEvent Declaration public Type HandlerType { get; } Property Value Type Description Type Remarks HandlerType is a type of delegate | Improve this Doc View Source Name Returns the Name of the RoutedEvent Declaration public string Name { get; } Property Value Type Description String Remarks RoutedEvent Name is unique within the OwnerType (super class types not considered when talking about uniqueness) | Improve this Doc View Source RoutingStrategy Returns the RoutingStrategy of the RoutedEvent Declaration public RoutingStrategy RoutingStrategy { get; } Property Value Type Description RoutingStrategy Methods | Improve this Doc View Source ToString() String representation Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.RoutedEventArgs.html": {
    "href": "api/nanoFramework.UI.RoutedEventArgs.html",
    "title": "Class RoutedEventArgs | nanoFramework Documentation",
    "keywords": "Class RoutedEventArgs The container for all state associated with a RoutedEvent Inheritance Object EventArgs RoutedEventArgs InputEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class RoutedEventArgs : EventArgs Remarks RoutedEventArgs constitutes the RoutedEvent , Handled , Source and OriginalSource Different RoutedEventArgs can be used with a single RoutedEvent The RoutedEventArgs is responsible for packaging the RoutedEvent , providing extra event state info, and invoking the handler associated with the RoutedEvent Constructors | Improve this Doc View Source RoutedEventArgs() Constructor for RoutedEventArgs Declaration public RoutedEventArgs() Remarks All members take default values RoutedEvent defaults to null Handled defaults to false Source defaults to null OriginalSource also defaults to null | Improve this Doc View Source RoutedEventArgs(RoutedEvent) Constructor for RoutedEventArgs Declaration public RoutedEventArgs(RoutedEvent routedEvent) Parameters Type Name Description RoutedEvent routedEvent The new value that the RoutedEvent Property is being set to | Improve this Doc View Source RoutedEventArgs(RoutedEvent, Object) Constructor for RoutedEventArgs Declaration public RoutedEventArgs(RoutedEvent routedEvent, object source) Parameters Type Name Description RoutedEvent routedEvent The new value that the RoutedEvent Property is being set to Object source The new value that the SourceProperty is being set to Properties | Improve this Doc View Source Handled Returns a boolean flag indicating if or not this RoutedEvent has been handled this far in the route Declaration public bool Handled { get; set; } Property Value Type Description Boolean Remarks Initially starts with a false value before routing has begun | Improve this Doc View Source OriginalSource Returns OriginalSource object that raised the RoutedEvent Declaration public object OriginalSource { get; } Property Value Type Description Object Remarks Always returns the OriginalSource object that raised the RoutedEvent unlike Source that may vary under specific scenarios This property acquires its value once before the event handlers are invoked and never changes then on | Improve this Doc View Source RoutedEvent Returns the RoutedEvent associated with this RoutedEventArgs Declaration public RoutedEvent RoutedEvent { get; set; } Property Value Type Description RoutedEvent Remarks The RoutedEvent cannot be null at any time | Improve this Doc View Source Source Returns Source object that raised the RoutedEvent Declaration public object Source { get; set; } Property Value Type Description Object Methods | Improve this Doc View Source OnSetSource(Object) Invoked when the source of the event is set Declaration protected virtual void OnSetSource(object source) Parameters Type Name Description Object source The new value that the SourceProperty is being set to Remarks Changing the source of an event can often require updating the data within the event. For this reason, the OnSource= method is protected virtual and is meant to be overridden by sub-classes of RoutedEventArgs Also see Source Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.RoutedEventHandler.html": {
    "href": "api/nanoFramework.UI.RoutedEventHandler.html",
    "title": "Delegate RoutedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate RoutedEventHandler RoutedEventHandler Definition Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public delegate void RoutedEventHandler(object sender, RoutedEventArgs e); Parameters Type Name Description Object sender RoutedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.RoutedEventHandlerInfo.html": {
    "href": "api/nanoFramework.UI.RoutedEventHandlerInfo.html",
    "title": "Class RoutedEventHandlerInfo | nanoFramework Documentation",
    "keywords": "Class RoutedEventHandlerInfo Container for handler instance and other invocation preferences for this handler instance Inheritance Object RoutedEventHandlerInfo Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class RoutedEventHandlerInfo Remarks RoutedEventHandlerInfo constitutes the handler instance and flag that indicates if or not this handler must be invoked for already handled events This class needs to be public because it is used by ContentElement in the Framework to store Instance EventHandlers Properties | Improve this Doc View Source Handler Returns associated handler instance Declaration public RoutedEventHandler Handler { get; } Property Value Type Description RoutedEventHandler | Improve this Doc View Source InvokeHandledEventsToo Returns HandledEventsToo Flag Declaration public bool InvokeHandledEventsToo { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Equals(RoutedEventHandlerInfo) Is the given RoutedEventHandlerInfo equals the current Declaration public bool Equals(RoutedEventHandlerInfo handlerInfo) Parameters Type Name Description RoutedEventHandlerInfo handlerInfo Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Is the given object equivalent to the current one Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() Operators | Improve this Doc View Source Equality(RoutedEventHandlerInfo, RoutedEventHandlerInfo) Equals operator overload Declaration public static bool operator ==(RoutedEventHandlerInfo handlerInfo1, RoutedEventHandlerInfo handlerInfo2) Parameters Type Name Description RoutedEventHandlerInfo handlerInfo1 RoutedEventHandlerInfo handlerInfo2 Returns Type Description Boolean | Improve this Doc View Source Inequality(RoutedEventHandlerInfo, RoutedEventHandlerInfo) NotEquals operator overload Declaration public static bool operator !=(RoutedEventHandlerInfo handlerInfo1, RoutedEventHandlerInfo handlerInfo2) Parameters Type Name Description RoutedEventHandlerInfo handlerInfo1 RoutedEventHandlerInfo handlerInfo2 Returns Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.RoutingStrategy.html": {
    "href": "api/nanoFramework.UI.RoutingStrategy.html",
    "title": "Enum RoutingStrategy | nanoFramework Documentation",
    "keywords": "Enum RoutingStrategy Routing Strategy can be either of Tunnel or Bubble Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public enum RoutingStrategy Fields Name Description Bubble Bubble Direct Direct Tunnel Tunnel Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.ScreenConfiguration.html": {
    "href": "api/nanoFramework.UI.ScreenConfiguration.html",
    "title": "Struct ScreenConfiguration | nanoFramework Documentation",
    "keywords": "Struct ScreenConfiguration The screen configuration in the driver. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public struct ScreenConfiguration Constructors | Improve this Doc View Source ScreenConfiguration(UInt16, UInt16, UInt16, UInt16) Creates a screen configuration. Declaration public ScreenConfiguration(ushort x, ushort y, ushort width, ushort height) Parameters Type Name Description UInt16 x The x position the screen starts in the driver. UInt16 y The y position the screen starts in the driver. UInt16 width The width of the screen starts in the driver. UInt16 height The height of the screen starts in the driver. Properties | Improve this Doc View Source Height The height of the screen starts in the driver. Declaration public ushort Height { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Width The width of the screen starts in the driver. Declaration public ushort Width { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source X The x position the screen starts in the driver. Declaration public ushort X { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Y The y position the screen starts in the driver. Declaration public ushort Y { get; set; } Property Value Type Description UInt16 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.ShutdownMode.html": {
    "href": "api/nanoFramework.UI.ShutdownMode.html",
    "title": "Enum ShutdownMode | nanoFramework Documentation",
    "keywords": "Enum ShutdownMode Enum for ShutdownMode Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public enum ShutdownMode : byte Fields Name Description OnExplicitShutdown OnLastWindowClose OnMainWindowClose Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.SpiConfiguration.html": {
    "href": "api/nanoFramework.UI.SpiConfiguration.html",
    "title": "Struct SpiConfiguration | nanoFramework Documentation",
    "keywords": "Struct SpiConfiguration The Spi configuration for the scressn Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public struct SpiConfiguration Constructors | Improve this Doc View Source SpiConfiguration(Byte, Int32, Int32, Int32, Int32) Creates a Spi configuration. Declaration public SpiConfiguration(byte spiBus, int chipselect, int dataCommand, int reset, int backLight) Parameters Type Name Description Byte spiBus Spi bus. Int32 chipselect Chip select. Int32 dataCommand Data command. Int32 reset Reset. Int32 backLight Back light. Properties | Improve this Doc View Source BackLight Back light Declaration public int BackLight { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ChipSelect Chip select. Declaration public int ChipSelect { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DataCommand Data command. Declaration public int DataCommand { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Reset Reset. Declaration public int Reset { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SpiBus Z Spi bus. Declaration public byte SpiBus { get; set; } Property Value Type Description Byte Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Temporary.EventCategoryEx.html": {
    "href": "api/nanoFramework.UI.Temporary.EventCategoryEx.html",
    "title": "Enum Temporary.EventCategoryEx | nanoFramework Documentation",
    "keywords": "Enum Temporary.EventCategoryEx Temporary enum with unique values within the EventCategory enum range found in nanoFramework.Runtime.Events Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public enum EventCategoryEx Fields Name Description Gesture Specifies a Gesture Event Touch Specifies a Touch Event Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.Temporary.html": {
    "href": "api/nanoFramework.UI.Temporary.html",
    "title": "Class Temporary | nanoFramework Documentation",
    "keywords": "Class Temporary Temporary class to extend the EventCatory enum found in the nanoFramework.Runtime.Events Need to merge these into this class update references and remove this file Inheritance Object Temporary Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public static class Temporary"
  },
  "api/nanoFramework.UI.Threading.Dispatcher.html": {
    "href": "api/nanoFramework.UI.Threading.Dispatcher.html",
    "title": "Class Dispatcher | nanoFramework Documentation",
    "keywords": "Class Dispatcher Provides UI services for a thread. Inheritance Object Dispatcher Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Threading Assembly : nanoFramework.Graphics.dll Syntax public sealed class Dispatcher Properties | Improve this Doc View Source CurrentDispatcher Returns the Dispatcher for the current thread. Declaration public static Dispatcher CurrentDispatcher { get; } Property Value Type Description Dispatcher Dispatcher | Improve this Doc View Source HasShutdownFinished Whether or not the dispatcher has been shut down. Declaration public bool HasShutdownFinished { get; } Property Value Type Description Boolean | Improve this Doc View Source HasShutdownStarted Whether or not the dispatcher is shutting down. Declaration public bool HasShutdownStarted { get; } Property Value Type Description Boolean | Improve this Doc View Source Thread Thread for the dispatcher. Declaration public Thread Thread { get; } Property Value Type Description Thread Methods | Improve this Doc View Source BeginInvoke(DispatcherOperationCallback, Object) Executes the specified delegate asynchronously with the specified arguments, on the thread that the Dispatcher was created on. Declaration public DispatcherOperation BeginInvoke(DispatcherOperationCallback method, object args) Parameters Type Name Description DispatcherOperationCallback method A delegate to a method that takes parameters of the same number and type that are contained in the args parameter. Object args An object to pass as the argument to the given method. This can be null if no arguments are needed. Returns Type Description DispatcherOperation A DispatcherOperation object that represents the result of the BeginInvoke operation. null if the operation could not be queued. | Improve this Doc View Source CheckAccess() Checks that the calling thread has access to this object. Declaration public bool CheckAccess() Returns Type Description Boolean True if the calling thread has access to this object. Remarks Only the dispatcher thread may access DispatcherObjects. This method is public so that any thread can probe to see if it has access to the DispatcherObject. | Improve this Doc View Source FromThread(Thread) Returns the Dispatcher for the specified thread. Declaration public static Dispatcher FromThread(Thread thread) Parameters Type Name Description Thread thread Returns Type Description Dispatcher Remarks If there is no dispatcher available for the specified thread, this method will return null. | Improve this Doc View Source Invoke(TimeSpan, DispatcherOperationCallback, Object) Executes the specified delegate synchronously with the specified arguments, on the thread that the Dispatcher was created on. Declaration public object Invoke(TimeSpan timeout, DispatcherOperationCallback method, object args) Parameters Type Name Description TimeSpan timeout The maximum amount of time to wait for the operation to complete. DispatcherOperationCallback method A delegate to a method that takes parameters of the same number and type that are contained in the args parameter. Object args An object to pass as the argument to the given method. This can be null if no arguments are needed. Returns Type Description Object The return value from the delegate being invoked, or null if the delegate has no return value or if the operation was aborted. | Improve this Doc View Source InvokeShutdown() Begins the process of shutting down the dispatcher, synchronously. The process may complete asynchronously, since we may be nested in dispatcher frames. Declaration public void InvokeShutdown() | Improve this Doc View Source PushFrame(DispatcherFrame) Push an execution frame. Declaration public static void PushFrame(DispatcherFrame frame) Parameters Type Name Description DispatcherFrame frame The frame for the dispatcher to process. | Improve this Doc View Source Run() Push the main execution frame. Declaration public static void Run() Remarks This frame will continue until the dispatcher is shut down. | Improve this Doc View Source VerifyAccess() Verifies that the calling thread has access to this object. Declaration public void VerifyAccess() Remarks Only the dispatcher thread may access DispatcherObjects. This method is public so that derived classes can probe to see if the calling thread has access to itself. Events | Improve this Doc View Source ShutdownFinished Raised when the dispatcher is shut down. Declaration public event EventHandler ShutdownFinished Event Type Type Description EventHandler | Improve this Doc View Source ShutdownStarted Raised when the dispatcher starts shutting down. Declaration public event EventHandler ShutdownStarted Event Type Type Description EventHandler Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Threading.DispatcherFrame.html": {
    "href": "api/nanoFramework.UI.Threading.DispatcherFrame.html",
    "title": "Class DispatcherFrame | nanoFramework Documentation",
    "keywords": "Class DispatcherFrame Representation of Dispatcher frame. Inheritance Object DispatcherFrame Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Threading Assembly : nanoFramework.Graphics.dll Syntax public class DispatcherFrame Constructors | Improve this Doc View Source DispatcherFrame() Constructs a new instance of the DispatcherFrame class. Declaration public DispatcherFrame() | Improve this Doc View Source DispatcherFrame(Boolean) Constructs a new instance of the DispatcherFrame class. Declaration public DispatcherFrame(bool exitWhenRequested) Parameters Type Name Description Boolean exitWhenRequested Indicates whether or not this frame will exit when all frames are requested to exit. Dispatcher frames typically break down into two categories: 1) Long running, general purpose frames, that exit only when told to. These frames should exit when requested. 2) Short running, very specific frames that exit themselves when an important criteria is met. These frames may consider not exiting when requested in favor of waiting for their important criteria to be met. These frames should have a timeout associated with them. Properties | Improve this Doc View Source Continue Indicates that this dispatcher frame should exit. Declaration public bool Continue { get; set; } Property Value Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Threading.DispatcherObject.html": {
    "href": "api/nanoFramework.UI.Threading.DispatcherObject.html",
    "title": "Class DispatcherObject | nanoFramework Documentation",
    "keywords": "Class DispatcherObject A DispatcherObject is an object associated with a Dispatcher . A DispatcherObject instance should only be access by the dispatcher's thread. Inheritance Object DispatcherObject DrawingContext PresentationSource UIElement Application InputDevice InputManager InputManager.DeviceEvents Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Threading Assembly : nanoFramework.Graphics.dll Syntax public abstract class DispatcherObject Remarks Subclasses of DispatcherObject should enforce thread safety by calling VerifyAccess() on all their public methods to ensure the calling thread is the appropriate thread. DispatcherObject cannot be independently instantiated; that is, all constructors are protected. Constructors | Improve this Doc View Source DispatcherObject() Instantiate this object associated with the current Dispatcher. Declaration protected DispatcherObject() Fields | Improve this Doc View Source Dispatcher The Dispatcher that this DispatcherObject is associated with. Declaration public readonly Dispatcher Dispatcher Field Value Type Description Dispatcher Methods | Improve this Doc View Source CheckAccess() Checks that the calling thread has access to this object. Declaration public bool CheckAccess() Returns Type Description Boolean True if the calling thread has access to this object. Remarks Only the dispatcher thread may access DispatcherObjects. This method is public so that any thread can probe to see if it has access to the DispatcherObject. | Improve this Doc View Source VerifyAccess() Verifies that the calling thread has access to this object. Declaration public void VerifyAccess() Remarks Only the dispatcher thread may access DispatcherObjects. This method is public so that derived classes can probe to see if the calling thread has access to itself. This is only verified in debug builds. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Threading.DispatcherOperation.html": {
    "href": "api/nanoFramework.UI.Threading.DispatcherOperation.html",
    "title": "Class DispatcherOperation | nanoFramework Documentation",
    "keywords": "Class DispatcherOperation DispatcherOperation represents a delegate that has been posted to the Dispatcher queue. Inheritance Object DispatcherOperation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Threading Assembly : nanoFramework.Graphics.dll Syntax public sealed class DispatcherOperation Properties | Improve this Doc View Source Dispatcher Returns the Dispatcher that this operation was posted to. Declaration public Dispatcher Dispatcher { get; } Property Value Type Description Dispatcher | Improve this Doc View Source Result Returns the result of the operation if it has completed. Declaration public object Result { get; } Property Value Type Description Object | Improve this Doc View Source Status The status of this operation. Declaration public DispatcherOperationStatus Status { get; } Property Value Type Description DispatcherOperationStatus Methods | Improve this Doc View Source Abort() Aborts this operation. Declaration public bool Abort() Returns Type Description Boolean False if the operation could not be aborted (because the operation was already in progress) | Improve this Doc View Source Wait() Waits for this operation to complete. Declaration public DispatcherOperationStatus Wait() Returns Type Description DispatcherOperationStatus The status of the operation. To obtain the return value of the invoked delegate, use the the Result property. | Improve this Doc View Source Wait(TimeSpan) Waits for this operation to complete. Declaration public DispatcherOperationStatus Wait(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout The maximum amount of time to wait. Returns Type Description DispatcherOperationStatus The status of the operation. To obtain the return value of the invoked delegate, use the the Result property. Events | Improve this Doc View Source Aborted An event that is raised when the operation is aborted. Declaration public event EventHandler Aborted Event Type Type Description EventHandler | Improve this Doc View Source Completed An event that is raised when the operation completes. Declaration public event EventHandler Completed Event Type Type Description EventHandler Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Threading.DispatcherOperationCallback.html": {
    "href": "api/nanoFramework.UI.Threading.DispatcherOperationCallback.html",
    "title": "Delegate DispatcherOperationCallback | nanoFramework Documentation",
    "keywords": "Delegate DispatcherOperationCallback A convenient delegate to use for dispatcher operations. Namespace : nanoFramework.UI.Threading Assembly : nanoFramework.Graphics.dll Syntax public delegate object DispatcherOperationCallback(object arg); Parameters Type Name Description Object arg Returns Type Description Object Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Threading.DispatcherOperationStatus.html": {
    "href": "api/nanoFramework.UI.Threading.DispatcherOperationStatus.html",
    "title": "Enum DispatcherOperationStatus | nanoFramework Documentation",
    "keywords": "Enum DispatcherOperationStatus An enumeration describing the status of a DispatcherOperation. Namespace : nanoFramework.UI.Threading Assembly : nanoFramework.Graphics.dll Syntax public enum DispatcherOperationStatus Fields Name Description Aborted The operation has been aborted. Completed The operation has been completed. Executing The operation has started executing, but has not completed yet. Pending The operation is still pending. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.Threading.DispatcherTimer.html": {
    "href": "api/nanoFramework.UI.Threading.DispatcherTimer.html",
    "title": "Class DispatcherTimer | nanoFramework Documentation",
    "keywords": "Class DispatcherTimer A timer that is integrated into the Dispatcher queues, and will be processed after a given amount of time Inheritance Object DispatcherTimer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI.Threading Assembly : nanoFramework.Graphics.dll Syntax public class DispatcherTimer : IDisposable Constructors | Improve this Doc View Source DispatcherTimer() Creates a timer that uses the current thread's Dispatcher to process the timer event Declaration public DispatcherTimer() | Improve this Doc View Source DispatcherTimer(Dispatcher) Creates a timer that uses the specified Dispatcher to process the timer event. Declaration public DispatcherTimer(Dispatcher dispatcher) Parameters Type Name Description Dispatcher dispatcher The dispatcher to use to process the timer. Properties | Improve this Doc View Source Dispatcher Gets the dispatcher this timer is associated with. Declaration public Dispatcher Dispatcher { get; } Property Value Type Description Dispatcher | Improve this Doc View Source Interval Gets or sets the time between timer ticks. Declaration public TimeSpan Interval { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source IsEnabled Gets or sets whether the timer is running. Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Tag Any data that the caller wants to pass along with the timer. Declaration public object Tag { get; set; } Property Value Type Description Object Methods | Improve this Doc View Source Close() Declaration public virtual void Close() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Start() Starts the timer. Declaration public void Start() | Improve this Doc View Source Stop() Stops the timer. Declaration public void Stop() Events | Improve this Doc View Source Tick Occurs when the specified timer interval has elapsed and the timer is enabled. Declaration public event EventHandler Tick Event Type Type Description EventHandler Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.Threading.html": {
    "href": "api/nanoFramework.UI.Threading.html",
    "title": "Namespace nanoFramework.UI.Threading | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.UI.Threading Classes Dispatcher Provides UI services for a thread. DispatcherFrame Representation of Dispatcher frame. DispatcherObject A DispatcherObject is an object associated with a Dispatcher . A DispatcherObject instance should only be access by the dispatcher's thread. DispatcherOperation DispatcherOperation represents a delegate that has been posted to the Dispatcher queue. DispatcherTimer A timer that is integrated into the Dispatcher queues, and will be processed after a given amount of time Enums DispatcherOperationStatus An enumeration describing the status of a DispatcherOperation. Delegates DispatcherOperationCallback A convenient delegate to use for dispatcher operations."
  },
  "api/nanoFramework.UI.Touch.html": {
    "href": "api/nanoFramework.UI.Touch.html",
    "title": "Class Touch | nanoFramework Documentation",
    "keywords": "Class Touch Inheritance Object Touch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public static class Touch Properties | Improve this Doc View Source ActiveTouchPanel Declaration public static TouchPanel ActiveTouchPanel { get; } Property Value Type Description TouchPanel Methods | Improve this Doc View Source Initialize(IEventListener) Declaration public static void Initialize(IEventListener touchEventListener) Parameters Type Name Description IEventListener touchEventListener"
  },
  "api/nanoFramework.UI.TouchCollectorConfiguration.html": {
    "href": "api/nanoFramework.UI.TouchCollectorConfiguration.html",
    "title": "Class TouchCollectorConfiguration | nanoFramework Documentation",
    "keywords": "Class TouchCollectorConfiguration Inheritance Object TouchCollectorConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public static class TouchCollectorConfiguration Properties | Improve this Doc View Source CollectionMethod Declaration public static CollectionMethod CollectionMethod { get; set; } Property Value Type Description CollectionMethod | Improve this Doc View Source CollectionMode Declaration public static CollectionMode CollectionMode { get; set; } Property Value Type Description CollectionMode | Improve this Doc View Source SamplingFrequency Sampling rate per second. Setting 50 will result 50 touch samples in a second. Declaration public static int SamplingFrequency { get; set; } Property Value Type Description Int32 | Improve this Doc View Source TouchMoveFrequency Declaration public static int TouchMoveFrequency { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source GetLastTouchPoint(ref Int32, ref Int32) Declaration public static void GetLastTouchPoint(ref int x, ref int y) Parameters Type Name Description Int32 x Int32 y GetTouchInput(TouchCollectorConfiguration.TouchInput, ref Int32, ref Int32, ref Int32) Declaration public static extern void GetTouchInput(TouchCollectorConfiguration.TouchInput flag, ref int param1, ref int param2, ref int param3) Parameters Type Name Description TouchCollectorConfiguration.TouchInput flag Int32 param1 Int32 param2 Int32 param3 SetTouchInput(TouchCollectorConfiguration.TouchInput, Int32, Int32, Int32) Declaration public static extern void SetTouchInput(TouchCollectorConfiguration.TouchInput flag, int param1, int param2, int param3) Parameters Type Name Description TouchCollectorConfiguration.TouchInput flag Int32 param1 Int32 param2 Int32 param3"
  },
  "api/nanoFramework.UI.TouchCollectorConfiguration.TouchInput.html": {
    "href": "api/nanoFramework.UI.TouchCollectorConfiguration.TouchInput.html",
    "title": "Enum TouchCollectorConfiguration.TouchInput | nanoFramework Documentation",
    "keywords": "Enum TouchCollectorConfiguration.TouchInput Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax [Flags] public enum TouchInput Fields Name Description LastTouchPoint param1- X, param2-Y, param3-unused. SamplingDistance param1- Distance in micro seconds. TouchMoveFrequency param1- frequency per second. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.TouchEvent.html": {
    "href": "api/nanoFramework.UI.TouchEvent.html",
    "title": "Class TouchEvent | nanoFramework Documentation",
    "keywords": "Class TouchEvent Inheritance Object BaseEvent TouchEvent Inherited Members BaseEvent.Source BaseEvent.Message Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class TouchEvent : BaseEvent Fields | Improve this Doc View Source Time Declaration public DateTime Time Field Value Type Description DateTime | Improve this Doc View Source Touches Declaration public TouchInput[] Touches Field Value Type Description TouchInput [] Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.TouchGesture.html": {
    "href": "api/nanoFramework.UI.TouchGesture.html",
    "title": "Enum TouchGesture | nanoFramework Documentation",
    "keywords": "Enum TouchGesture Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public enum TouchGesture : uint Fields Name Description Begin DoubleTap Down DownLeft DownRight End Left NoGesture Pan Right Rollover Rotate Tap TwoFingerTap Up UpLeft UpRight UserDefined Zoom Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.TouchGestureEventArgs.html": {
    "href": "api/nanoFramework.UI.TouchGestureEventArgs.html",
    "title": "Class TouchGestureEventArgs | nanoFramework Documentation",
    "keywords": "Class TouchGestureEventArgs Inheritance Object EventArgs TouchGestureEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class TouchGestureEventArgs : EventArgs Fields | Improve this Doc View Source Arguments Declaration public ushort Arguments Field Value Type Description UInt16 | Improve this Doc View Source Gesture Declaration public TouchGesture Gesture Field Value Type Description TouchGesture | Improve this Doc View Source Timestamp Declaration public readonly DateTime Timestamp Field Value Type Description DateTime | Improve this Doc View Source X Declaration public int X Field Value Type Description Int32 | Improve this Doc View Source Y Declaration public int Y Field Value Type Description Int32 Properties | Improve this Doc View Source Angle Declaration public double Angle { get; } Property Value Type Description Double Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.TouchGestureEventHandler.html": {
    "href": "api/nanoFramework.UI.TouchGestureEventHandler.html",
    "title": "Delegate TouchGestureEventHandler | nanoFramework Documentation",
    "keywords": "Delegate TouchGestureEventHandler Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public delegate void TouchGestureEventHandler(object sender, TouchGestureEventArgs e); Parameters Type Name Description Object sender TouchGestureEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.TouchInput.html": {
    "href": "api/nanoFramework.UI.TouchInput.html",
    "title": "Class TouchInput | nanoFramework Documentation",
    "keywords": "Class TouchInput Inheritance Object TouchInput Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class TouchInput Fields | Improve this Doc View Source ContactHeight Declaration public uint ContactHeight Field Value Type Description UInt32 | Improve this Doc View Source ContactWidth Declaration public uint ContactWidth Field Value Type Description UInt32 | Improve this Doc View Source Flags Declaration public TouchInputFlags Flags Field Value Type Description TouchInputFlags | Improve this Doc View Source SourceID Declaration public byte SourceID Field Value Type Description Byte | Improve this Doc View Source X Declaration public int X Field Value Type Description Int32 | Improve this Doc View Source Y Declaration public int Y Field Value Type Description Int32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.TouchInputFlags.html": {
    "href": "api/nanoFramework.UI.TouchInputFlags.html",
    "title": "Enum TouchInputFlags | nanoFramework Documentation",
    "keywords": "Enum TouchInputFlags Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax [Flags] public enum TouchInputFlags : uint Fields Name Description None Palm Pen Primary Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.TouchMessages.html": {
    "href": "api/nanoFramework.UI.TouchMessages.html",
    "title": "Enum TouchMessages | nanoFramework Documentation",
    "keywords": "Enum TouchMessages Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public enum TouchMessages : byte Fields Name Description Down Move Up Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.UI.TouchPanel.html": {
    "href": "api/nanoFramework.UI.TouchPanel.html",
    "title": "Class TouchPanel | nanoFramework Documentation",
    "keywords": "Class TouchPanel Inheritance Object TouchPanel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class TouchPanel Methods GetCalibrationPoint(Int32, ref Int32, ref Int32) Declaration public extern void GetCalibrationPoint(int index, ref int x, ref int y) Parameters Type Name Description Int32 index Int32 x Int32 y GetCalibrationPointCount(ref Int32) Declaration public extern void GetCalibrationPointCount(ref int count) Parameters Type Name Description Int32 count SetCalibration(Int32, Int16[], Int16[], Int16[], Int16[]) Declaration public extern void SetCalibration(int cCalibrationPoints, short[] screenXBuffer, short[] screenYBuffer, short[] uncalXBuffer, short[] uncalYBuffer) Parameters Type Name Description Int32 cCalibrationPoints Int16 [] screenXBuffer Int16 [] screenYBuffer Int16 [] uncalXBuffer Int16 [] uncalYBuffer StartCalibration() Declaration public extern void StartCalibration() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.TouchScreen.ActiveRectangle.html": {
    "href": "api/nanoFramework.UI.TouchScreen.ActiveRectangle.html",
    "title": "Class TouchScreen.ActiveRectangle | nanoFramework Documentation",
    "keywords": "Class TouchScreen.ActiveRectangle Inheritance Object TouchScreen.ActiveRectangle Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class ActiveRectangle Constructors | Improve this Doc View Source ActiveRectangle(Int32, Int32, Int32, Int32, Object) Declaration public ActiveRectangle(int x, int y, int width, int height, object target) Parameters Type Name Description Int32 x Int32 y Int32 width Int32 height Object target Fields | Improve this Doc View Source Height Declaration public readonly int Height Field Value Type Description Int32 | Improve this Doc View Source Target Declaration public readonly object Target Field Value Type Description Object | Improve this Doc View Source Width Declaration public readonly int Width Field Value Type Description Int32 | Improve this Doc View Source X Declaration public readonly int X Field Value Type Description Int32 | Improve this Doc View Source Y Declaration public readonly int Y Field Value Type Description Int32 Methods | Improve this Doc View Source Contains(TouchInput) Declaration public bool Contains(TouchInput input) Parameters Type Name Description TouchInput input Returns Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.TouchScreen.html": {
    "href": "api/nanoFramework.UI.TouchScreen.html",
    "title": "Class TouchScreen | nanoFramework Documentation",
    "keywords": "Class TouchScreen Inheritance Object TouchScreen Implements IEventListener Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class TouchScreen : IEventListener Constructors | Improve this Doc View Source TouchScreen(TouchScreen.ActiveRectangle[]) Declaration public TouchScreen(TouchScreen.ActiveRectangle[] activeRectangles) Parameters Type Name Description TouchScreen.ActiveRectangle [] activeRectangles Properties | Improve this Doc View Source ActiveRegions Declaration public TouchScreen.ActiveRectangle[] ActiveRegions { get; set; } Property Value Type Description TouchScreen.ActiveRectangle [] Events | Improve this Doc View Source OnGestureChanged Declaration public event TouchGestureEventHandler OnGestureChanged Event Type Type Description TouchGestureEventHandler | Improve this Doc View Source OnGestureEnded Declaration public event TouchGestureEventHandler OnGestureEnded Event Type Type Description TouchGestureEventHandler | Improve this Doc View Source OnGestureStarted Declaration public event TouchGestureEventHandler OnGestureStarted Event Type Type Description TouchGestureEventHandler | Improve this Doc View Source OnTouchDown Declaration public event TouchScreenEventHandler OnTouchDown Event Type Type Description TouchScreenEventHandler | Improve this Doc View Source OnTouchMove Declaration public event TouchScreenEventHandler OnTouchMove Event Type Type Description TouchScreenEventHandler | Improve this Doc View Source OnTouchUp Declaration public event TouchScreenEventHandler OnTouchUp Event Type Type Description TouchScreenEventHandler Explicit Interface Implementations | Improve this Doc View Source IEventListener.InitializeForEventSource() Declaration void IEventListener.InitializeForEventSource() | Improve this Doc View Source IEventListener.OnEvent(BaseEvent) Declaration bool IEventListener.OnEvent(BaseEvent ev) Parameters Type Name Description BaseEvent ev Returns Type Description Boolean Implements IEventListener Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.TouchScreenEventArgs.html": {
    "href": "api/nanoFramework.UI.TouchScreenEventArgs.html",
    "title": "Class TouchScreenEventArgs | nanoFramework Documentation",
    "keywords": "Class TouchScreenEventArgs Inheritance Object EventArgs TouchScreenEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public class TouchScreenEventArgs : EventArgs Constructors | Improve this Doc View Source TouchScreenEventArgs(DateTime, TouchInput[], Object) Declaration public TouchScreenEventArgs(DateTime timestamp, TouchInput[] touches, object target) Parameters Type Name Description DateTime timestamp TouchInput [] touches Object target Fields | Improve this Doc View Source Target Declaration public object Target Field Value Type Description Object | Improve this Doc View Source TimeStamp Declaration public DateTime TimeStamp Field Value Type Description DateTime | Improve this Doc View Source Touches Declaration public TouchInput[] Touches Field Value Type Description TouchInput [] Methods | Improve this Doc View Source GetPosition(Int32, out Int32, out Int32) Declaration public void GetPosition(int touchIndex, out int x, out int y) Parameters Type Name Description Int32 touchIndex Int32 x Int32 y Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.TouchScreenEventHandler.html": {
    "href": "api/nanoFramework.UI.TouchScreenEventHandler.html",
    "title": "Delegate TouchScreenEventHandler | nanoFramework Documentation",
    "keywords": "Delegate TouchScreenEventHandler Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public delegate void TouchScreenEventHandler(object sender, TouchScreenEventArgs e); Parameters Type Name Description Object sender TouchScreenEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.UI.WindowCollection.html": {
    "href": "api/nanoFramework.UI.WindowCollection.html",
    "title": "Class WindowCollection | nanoFramework Documentation",
    "keywords": "Class WindowCollection WindowCollection can be used to interate over all the windows that have been opened in the current application. Inheritance Object WindowCollection Implements ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.UI Assembly : nanoFramework.Graphics.dll Syntax public sealed class WindowCollection : ICollection, IEnumerable Constructors | Improve this Doc View Source WindowCollection() Default Constructor Declaration public WindowCollection() Properties | Improve this Doc View Source Count Count property Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsSynchronized IsSynchronized Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Overloaded [] operator to access the WindowCollection list Declaration public Window this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description Window | Improve this Doc View Source SyncRoot SyncRoot Declaration public object SyncRoot { get; } Property Value Type Description Object Methods | Improve this Doc View Source CopyTo(Window[], Int32) CopyTo Declaration public void CopyTo(Window[] array, int index) Parameters Type Name Description Window [] array Int32 index | Improve this Doc View Source GetEnumerator() GetEnumerator Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator Explicit Interface Implementations | Improve this Doc View Source ICollection.CopyTo(Array, Int32) CopyTo Declaration void ICollection.CopyTo(Array array, int index) Parameters Type Name Description Array array Int32 index Implements ICollection IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.Authentication.html": {
    "href": "api/nanoFramework.WebServer.Authentication.html",
    "title": "Class Authentication | nanoFramework Documentation",
    "keywords": "Class Authentication The authentication to be used by the server Inheritance Object Authentication Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax public class Authentication Constructors | Improve this Doc View Source Authentication() Declaration public Authentication() | Improve this Doc View Source Authentication(NetworkCredential) Declaration public Authentication(NetworkCredential credential) Parameters Type Name Description NetworkCredential credential | Improve this Doc View Source Authentication(String) Declaration public Authentication(string apiKey) Parameters Type Name Description String apiKey Properties | Improve this Doc View Source ApiKey The API Key Declaration public string ApiKey { get; } Property Value Type Description String | Improve this Doc View Source AuthenticationType The type of authentication Declaration public AuthenticationType AuthenticationType { get; } Property Value Type Description AuthenticationType | Improve this Doc View Source Credentials The network credential user and password Declaration public NetworkCredential Credentials { get; } Property Value Type Description NetworkCredential Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.AuthenticationAttribute.html": {
    "href": "api/nanoFramework.WebServer.AuthenticationAttribute.html",
    "title": "Class AuthenticationAttribute | nanoFramework Documentation",
    "keywords": "Class AuthenticationAttribute Authentication attribute for classes and method Inheritance Object Attribute AuthenticationAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method)] public class AuthenticationAttribute : Attribute Constructors | Improve this Doc View Source AuthenticationAttribute(String) The constructor for the Authentication attribute Declaration public AuthenticationAttribute(string auth) Parameters Type Name Description String auth Properties | Improve this Doc View Source AuthenticationMethod The authentication method, examples: Basic:user password Basic ApiKey:OneApiKey ApiKey None In case of Basic and ApiKey alone, the default one passed at server properties ones will be used The Basic authentication is a classical http basic authentication and the couple user password have to be separated with a space, the password can contain spaces but not the user name. Basic and the user name has to be separated with a : ApiKey and the current apikey has to be separated with : The current ApiKey can contain only characters that are allow in http headers Declaration public string AuthenticationMethod { get; set; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.AuthenticationType.html": {
    "href": "api/nanoFramework.WebServer.AuthenticationType.html",
    "title": "Enum AuthenticationType | nanoFramework Documentation",
    "keywords": "Enum AuthenticationType The type of authentication to use Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax public enum AuthenticationType Fields Name Description ApiKey Using an ApiKey Basic Basic authentication with user and password None No authentication is needed Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.WebServer.CallbackRoutes.html": {
    "href": "api/nanoFramework.WebServer.CallbackRoutes.html",
    "title": "Class CallbackRoutes | nanoFramework Documentation",
    "keywords": "Class CallbackRoutes Callback function for the various routes Inheritance Object CallbackRoutes Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax public class CallbackRoutes Properties | Improve this Doc View Source Authentication the authentication details Declaration public Authentication Authentication { get; set; } Property Value Type Description Authentication | Improve this Doc View Source Callback The method to call for a specific route Declaration public MethodInfo Callback { get; set; } Property Value Type Description MethodInfo | Improve this Doc View Source CaseSensitive Is the root case sensitive? Declaration public bool CaseSensitive { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Method The http method ex GET or POST, leave string.Empty for any Declaration public string Method { get; set; } Property Value Type Description String | Improve this Doc View Source Route The route ex: api/gpio Declaration public string Route { get; set; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.CaseSensitiveAttribute.html": {
    "href": "api/nanoFramework.WebServer.CaseSensitiveAttribute.html",
    "title": "Class CaseSensitiveAttribute | nanoFramework Documentation",
    "keywords": "Class CaseSensitiveAttribute If the route is case sensitive or not Inheritance Object Attribute CaseSensitiveAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class CaseSensitiveAttribute : Attribute Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.Header.html": {
    "href": "api/nanoFramework.WebServer.Header.html",
    "title": "Class Header | nanoFramework Documentation",
    "keywords": "Class Header Header class Inheritance Object Header Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax public class Header Properties | Improve this Doc View Source Name Name of the header Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Value Value of the header Declaration public string Value { get; set; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.html": {
    "href": "api/nanoFramework.WebServer.html",
    "title": "Namespace nanoFramework.WebServer | nanoFramework Documentation",
    "keywords": "Namespace nanoFramework.WebServer Classes Authentication The authentication to be used by the server AuthenticationAttribute Authentication attribute for classes and method CallbackRoutes Callback function for the various routes CaseSensitiveAttribute If the route is case sensitive or not Header Header class MethodAttribute The HTTP Method RouteAttribute Route custom attribute UrlParameter Represent an URL parameter Name=Value WebServer This class instantiates a web server. WebServerEventArgs Web server event argument class Enums AuthenticationType The type of authentication to use HttpProtocol Http protocol used Delegates WebServer.GetRequestHandler Delegate for the CommandReceived event."
  },
  "api/nanoFramework.WebServer.HttpProtocol.html": {
    "href": "api/nanoFramework.WebServer.HttpProtocol.html",
    "title": "Enum HttpProtocol | nanoFramework Documentation",
    "keywords": "Enum HttpProtocol Http protocol used Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax public enum HttpProtocol Fields Name Description Http Http protocol Https Https protocol Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/nanoFramework.WebServer.MethodAttribute.html": {
    "href": "api/nanoFramework.WebServer.MethodAttribute.html",
    "title": "Class MethodAttribute | nanoFramework Documentation",
    "keywords": "Class MethodAttribute The HTTP Method Inheritance Object Attribute MethodAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax [AttributeUsage(AttributeTargets.Method)] public class MethodAttribute : Attribute Constructors | Improve this Doc View Source MethodAttribute(String) Declaration public MethodAttribute(string method) Parameters Type Name Description String method Properties | Improve this Doc View Source Method Declaration public string Method { get; set; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.RouteAttribute.html": {
    "href": "api/nanoFramework.WebServer.RouteAttribute.html",
    "title": "Class RouteAttribute | nanoFramework Documentation",
    "keywords": "Class RouteAttribute Route custom attribute Inheritance Object Attribute RouteAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public class RouteAttribute : Attribute Constructors | Improve this Doc View Source RouteAttribute(String) A route attribute Declaration public RouteAttribute(string route) Parameters Type Name Description String route The route like route/second/third Properties | Improve this Doc View Source Route Declaration public string Route { get; set; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.UrlParameter.html": {
    "href": "api/nanoFramework.WebServer.UrlParameter.html",
    "title": "Class UrlParameter | nanoFramework Documentation",
    "keywords": "Class UrlParameter Represent an URL parameter Name=Value Inheritance Object UrlParameter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax public class UrlParameter Properties | Improve this Doc View Source Name Name of the parameter Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Value Valeu of the parameter Declaration public string Value { get; set; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.WebServer.GetRequestHandler.html": {
    "href": "api/nanoFramework.WebServer.WebServer.GetRequestHandler.html",
    "title": "Delegate WebServer.GetRequestHandler | nanoFramework Documentation",
    "keywords": "Delegate WebServer.GetRequestHandler Delegate for the CommandReceived event. Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax public delegate void GetRequestHandler(object obj, WebServerEventArgs e); Parameters Type Name Description Object obj WebServerEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.WebServer.html": {
    "href": "api/nanoFramework.WebServer.WebServer.html",
    "title": "Class WebServer | nanoFramework Documentation",
    "keywords": "Class WebServer This class instantiates a web server. Inheritance Object WebServer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax public class WebServer : IDisposable Constructors | Improve this Doc View Source WebServer(Int32, HttpProtocol) Instantiates a new web server. Declaration public WebServer(int port, HttpProtocol protocol) Parameters Type Name Description Int32 port Port number to listen on. HttpProtocol protocol HttpProtocol version to use with web server. | Improve this Doc View Source WebServer(Int32, HttpProtocol, Type[]) Instantiates a new web server. Declaration public WebServer(int port, HttpProtocol protocol, Type[] controllers) Parameters Type Name Description Int32 port Port number to listen on. HttpProtocol protocol HttpProtocol version to use with web server. Type [] controllers Controllers to use with this web server. Fields | Improve this Doc View Source ParamEqual URL parameter equal character Declaration public const char ParamEqual = '=' Field Value Type Description Char | Improve this Doc View Source ParamSeparator URL parameter separation character Declaration public const char ParamSeparator = '&' Field Value Type Description Char | Improve this Doc View Source ParamStart URL parameter start character Declaration public const char ParamStart = '?' Field Value Type Description Char Properties | Improve this Doc View Source ApiKey Default APiKey to be used for authentication when no key is specified in the attribute Declaration public string ApiKey { get; set; } Property Value Type Description String | Improve this Doc View Source Credential Network credential used for default user:password couple during basic authentication Declaration public NetworkCredential Credential { get; set; } Property Value Type Description NetworkCredential | Improve this Doc View Source HttpsCert The Https certificate to use Declaration public X509Certificate HttpsCert { get; set; } Property Value Type Description X509Certificate | Improve this Doc View Source Port Gets or sets the port the server listens on. Declaration public int Port { get; protected set; } Property Value Type Description Int32 | Improve this Doc View Source Protocol The type of Http protocol used, http or https Declaration public HttpProtocol Protocol { get; protected set; } Property Value Type Description HttpProtocol | Improve this Doc View Source SslProtocols SSL protocols Declaration public SslProtocols SslProtocols { get; set; } Property Value Type Description SslProtocols Methods | Improve this Doc View Source DecodeParam(String) Get an array of parameters from a URL Declaration public static UrlParameter[] DecodeParam(string parameter) Parameters Type Name Description String parameter Returns Type Description UrlParameter [] | Improve this Doc View Source Dispose() Dispose of any resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Release resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Dispose of resources? | Improve this Doc View Source OutputHttpCode(HttpListenerResponse, HttpStatusCode) Output an HTTP Code and close the connection Declaration public static void OutputHttpCode(HttpListenerResponse response, HttpStatusCode code) Parameters Type Name Description HttpListenerResponse response the socket stream HttpStatusCode code the http code | Improve this Doc View Source OutPutStream(HttpListenerResponse, String) Output a stream Declaration public static void OutPutStream(HttpListenerResponse response, string strResponse) Parameters Type Name Description HttpListenerResponse response the socket stream String strResponse the stream to output | Improve this Doc View Source SendFileOverHTTP(HttpListenerResponse, String, Byte[], String) Send file content over HTTP response. Declaration public static void SendFileOverHTTP(HttpListenerResponse response, string fileName, byte[] content, string contentType = \"\") Parameters Type Name Description HttpListenerResponse response HttpListenerResponse to send the content over. String fileName Name of the file to send over HttpListenerResponse . Byte [] content Content of the file to send. String contentType The type of file, if empty string, then will use auto detection | Improve this Doc View Source SendFileOverHTTP(HttpListenerResponse, StorageFile, String) Return a file from Storage over HTTP response. Declaration public static void SendFileOverHTTP(HttpListenerResponse response, StorageFile strFilePath, string contentType = \"\") Parameters Type Name Description HttpListenerResponse response HttpListenerResponse to send the content over. StorageFile strFilePath The file to send String contentType The type of file, if empty string, then will use auto detection | Improve this Doc View Source Start() Start the multi threaded server. Declaration public bool Start() Returns Type Description Boolean | Improve this Doc View Source Stop() Stop the multi threaded server. Declaration public void Stop() Events | Improve this Doc View Source CommandReceived CommandReceived event is triggered when a valid command (plus parameters) is received. Valid commands are defined in the AllowedCommands property. Declaration public event WebServer.GetRequestHandler CommandReceived Event Type Type Description WebServer.GetRequestHandler Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/nanoFramework.WebServer.WebServerEventArgs.html": {
    "href": "api/nanoFramework.WebServer.WebServerEventArgs.html",
    "title": "Class WebServerEventArgs | nanoFramework Documentation",
    "keywords": "Class WebServerEventArgs Web server event argument class Inheritance Object WebServerEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : nanoFramework.WebServer Assembly : nanoFramework.WebServer.dll Syntax public class WebServerEventArgs Constructors | Improve this Doc View Source WebServerEventArgs(HttpListenerContext) Constructor for the event arguments Declaration public WebServerEventArgs(HttpListenerContext context) Parameters Type Name Description HttpListenerContext context Properties | Improve this Doc View Source Context The response class Declaration public HttpListenerContext Context { get; protected set; } Property Value Type Description HttpListenerContext Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Action.html": {
    "href": "api/System.Action.html",
    "title": "Delegate Action | nanoFramework Documentation",
    "keywords": "Delegate Action Encapsulates a method that has no parameters and does not return a value. Namespace : System Assembly : mscorlib.dll Syntax public delegate void Action(); Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Action-1.html": {
    "href": "api/System.Action-1.html",
    "title": "Delegate Action<T> | nanoFramework Documentation",
    "keywords": "Delegate Action<T> Encapsulates a method that has a single parameter and does not return a value. Namespace : System Assembly : mscorlib.dll Syntax public delegate void Action<in T>(T obj); Parameters Type Name Description T obj The parameter of the method that this delegate encapsulates. Type Parameters Name Description T The type of the parameter of the method that this delegate encapsulates. This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see Covariance and Contravariance in Generics . Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Action-2.html": {
    "href": "api/System.Action-2.html",
    "title": "Delegate Action<T1, T2> | nanoFramework Documentation",
    "keywords": "Delegate Action<T1, T2> Encapsulates a method that has a single parameter and does not return a value. Namespace : System Assembly : mscorlib.dll Syntax public delegate void Action<in T1, in T2>(T1 arg1, T2 arg2); Parameters Type Name Description T1 arg1 The first parameter of the method that this delegate encapsulates. T2 arg2 The second parameter of the method that this delegate encapsulates. Type Parameters Name Description T1 The type of the first parameter of the method that this delegate encapsulates. This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see Covariance and Contravariance in Generics . T2 The type of the second parameter of the method that this delegate encapsulates. This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see Covariance and Contravariance in Generics . Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.AppDomainUnloadedException.html": {
    "href": "api/System.AppDomainUnloadedException.html",
    "title": "Class AppDomainUnloadedException | nanoFramework Documentation",
    "keywords": "Class AppDomainUnloadedException The exception that is thrown when an attempt is made to access an unloaded application domain. Inheritance Object Exception SystemException AppDomainUnloadedException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class AppDomainUnloadedException : SystemException Constructors | Improve this Doc View Source AppDomainUnloadedException() Initializes a new instance of the AppDomainUnloadedException class. Declaration public AppDomainUnloadedException() | Improve this Doc View Source AppDomainUnloadedException(String) Initializes a new instance of the AppDomainUnloadedException class with a specified error message. Declaration public AppDomainUnloadedException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source AppDomainUnloadedException(String, Exception) Initializes a new instance of the AppDomainUnloadedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public AppDomainUnloadedException(string message, Exception innerException) Parameters Type Name Description String message The message that describes the error. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ApplicationException.html": {
    "href": "api/System.ApplicationException.html",
    "title": "Class ApplicationException | nanoFramework Documentation",
    "keywords": "Class ApplicationException Serves as the base class for application-defined exceptions. Inheritance Object Exception ApplicationException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class ApplicationException : Exception Constructors | Improve this Doc View Source ApplicationException() Initializes a new instance of the ApplicationException class. Declaration public ApplicationException() | Improve this Doc View Source ApplicationException(String) Initializes a new instance of the ApplicationException class with a specified error message. Declaration public ApplicationException(string message) Parameters Type Name Description String message A message that describes the error. | Improve this Doc View Source ApplicationException(String, Exception) Initializes a new instance of the ApplicationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ApplicationException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ArgumentException.html": {
    "href": "api/System.ArgumentException.html",
    "title": "Class ArgumentException | nanoFramework Documentation",
    "keywords": "Class ArgumentException The exception that is thrown when one of the arguments provided to a method is not valid. Inheritance Object Exception SystemException ArgumentException ArgumentNullException ArgumentOutOfRangeException Inherited Members Exception.HResult Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class ArgumentException : SystemException Constructors | Improve this Doc View Source ArgumentException() Initializes a new instance of the ArgumentException class. Declaration public ArgumentException() | Improve this Doc View Source ArgumentException(String) Initializes a new instance of the ArgumentException class with a specified error message. Declaration public ArgumentException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source ArgumentException(String, Exception) Initializes a new instance of the ArgumentException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ArgumentException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. | Improve this Doc View Source ArgumentException(String, String) Initializes a new instance of the ArgumentException class with a specified error message and the name of the parameter that causes this exception. Declaration public ArgumentException(string message, string paramName) Parameters Type Name Description String message The error message that explains the reason for the exception. String paramName The name of the parameter that caused the current exception. | Improve this Doc View Source ArgumentException(String, String, Exception) Initializes a new instance of the ArgumentException class with a specified error message, the parameter name, and a reference to the inner exception that is the cause of this exception. Declaration public ArgumentException(string message, string paramName, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. String paramName The name of the parameter that caused the current exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Properties | Improve this Doc View Source Message Gets the error message and the parameter name, or only the error message if no parameter name is set. Declaration public override string Message { get; } Property Value Type Description String A text string describing the details of the exception. Overrides Exception.Message | Improve this Doc View Source ParamName Gets the name of the parameter that causes this exception. Declaration public virtual string ParamName { get; } Property Value Type Description String The parameter name. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ArgumentNullException.html": {
    "href": "api/System.ArgumentNullException.html",
    "title": "Class ArgumentNullException | nanoFramework Documentation",
    "keywords": "Class ArgumentNullException The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument. Inheritance Object Exception SystemException ArgumentException ArgumentNullException Inherited Members ArgumentException.Message ArgumentException.ParamName Exception.HResult Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class ArgumentNullException : ArgumentException Constructors | Improve this Doc View Source ArgumentNullException() Initializes a new instance of the ArgumentNullException class. Declaration public ArgumentNullException() | Improve this Doc View Source ArgumentNullException(String) Initializes a new instance of the ArgumentNullException class with the name of the parameter that causes this exception. Declaration public ArgumentNullException(string argument) Parameters Type Name Description String argument The name of the parameter that caused the exception. | Improve this Doc View Source ArgumentNullException(String, String) Initializes an instance of the ArgumentNullException class with a specified error message and the name of the parameter that causes this exception. Declaration public ArgumentNullException(string paramName, string message) Parameters Type Name Description String paramName The name of the parameter that caused the exception. String message A message that describes the error. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ArgumentOutOfRangeException.html": {
    "href": "api/System.ArgumentOutOfRangeException.html",
    "title": "Class ArgumentOutOfRangeException | nanoFramework Documentation",
    "keywords": "Class ArgumentOutOfRangeException The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method. Inheritance Object Exception SystemException ArgumentException ArgumentOutOfRangeException Inherited Members ArgumentException.Message ArgumentException.ParamName Exception.HResult Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class ArgumentOutOfRangeException : ArgumentException Constructors | Improve this Doc View Source ArgumentOutOfRangeException() Initializes a new instance of the ArgumentOutOfRangeException class. Declaration public ArgumentOutOfRangeException() | Improve this Doc View Source ArgumentOutOfRangeException(String) Initializes a new instance of the ArgumentOutOfRangeException class with the name of the parameter that causes this exception. Declaration public ArgumentOutOfRangeException(string paramName) Parameters Type Name Description String paramName The name of the parameter that causes this exception. | Improve this Doc View Source ArgumentOutOfRangeException(String, String) Initializes a new instance of the ArgumentOutOfRangeException class with the name of the parameter that causes this exception and a specified error message. Declaration public ArgumentOutOfRangeException(string paramName, string message) Parameters Type Name Description String paramName The name of the parameter that caused the exception. String message The message that describes the error. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Array.html": {
    "href": "api/System.Array.html",
    "title": "Class Array | nanoFramework Documentation",
    "keywords": "Class Array Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime. Inheritance Object Array Implements ICloneable IList ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class Array : ICloneable, IList, ICollection, IEnumerable Properties | Improve this Doc View Source IsFixedSize Gets a value indicating whether the Array has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description Boolean This property is always true for all arrays. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the Array is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean This property is always false for all arrays. | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the Array is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean This property is always false for all arrays. Length Gets a 32-bit integer that represents the total number of elements in all the dimensions of the Array. Declaration public int Length { get; } Property Value Type Description Int32 A 32-bit integer that represents the total number of elements in all the dimensions of the Array; zero if there are no elements in the array. | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the Array. Declaration public object SyncRoot { get; } Property Value Type Description Object An object that can be used to synchronize access to the Array. Methods | Improve this Doc View Source BinarySearch(Array, Int32, Int32, Object, IComparer) Searches a range of elements in a one-dimensional sorted Array for a value, using the specified IComparer interface. Declaration public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer) Parameters Type Name Description Array array The sorted one-dimensional Array to search. Int32 index The starting index of the range to search. Int32 length The length of the range to search. Object value The object to search for. IComparer comparer The IComparer implementation to use when comparing elements. -or- nullNothingnullptrunit a null reference(Nothing in Visual Basic) to use the IComparable implementation of each element. Returns Type Description Int32 The index of the specified value in the specified array, if value is found. If value is not found and value is less than one or more elements in array, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of (the index of the last element plus 1). Exceptions Type Condition InvalidOperationException comparer is null reference (Nothing in Visual Basic), value does not implement the IComparable interface, and the search encounters an element that does not implement the IComparable interface. | Improve this Doc View Source BinarySearch(Array, Object, IComparer) Searches an entire one-dimensional sorted Array for a value using the specified IComparer interface. Declaration public static int BinarySearch(Array array, object value, IComparer comparer) Parameters Type Name Description Array array The sorted one-dimensional Array to search. Object value The object to search for. IComparer comparer The IComparer implementation to use when comparing elements. -or- nullNothingnullptrunit a null reference(Nothing in Visual Basic) to use the IComparable implementation of each element. Returns Type Description Int32 The index of the specified value in the specified array, if value is found. If value is not found and value is less than one or more elements in array, a negative number which is the bitwise complement of the index of the first element that is larger than value. If value is not found and value is greater than any of the elements in array, a negative number which is the bitwise complement of (the index of the last element plus 1). Clear(Array, Int32, Int32) Sets a range of elements in the Array to zero, to false, or to null reference (Nothing in Visual Basic), depending on the element type. Declaration public static extern void Clear(Array array, int index, int length) Parameters Type Name Description Array array The Array whose elements need to be cleared. Int32 index The starting index of the range of elements to clear. Int32 length The number of elements to clear. | Improve this Doc View Source Clone() Creates a shallow copy of the Array . Declaration public object Clone() Returns Type Description Object A shallow copy of the Array . Remarks Available only in mscorlib build with support for System.Reflection. | Improve this Doc View Source Copy(Array, Array, Int32) Copies a range of elements from an Array starting at the first element and pastes them into another Array starting at the first element. The length is specified as a 32-bit integer. Declaration public static void Copy(Array sourceArray, Array destinationArray, int length) Parameters Type Name Description Array sourceArray The Array that contains the data to copy. Array destinationArray The Array that receives the data. Int32 length A 32-bit integer that represents the number of elements to copy. Copy(Array, Int32, Array, Int32, Int32) Copies a range of elements from an Array starting at the specified source index and pastes them to another Array starting at the specified destination index. The length and the indexes are specified as 32-bit integers. Declaration public static extern void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length) Parameters Type Name Description Array sourceArray The Array that contains the data to copy. Int32 sourceIndex A 32-bit integer that represents the index in the sourceArray at which copying begins. Array destinationArray The Array that receives the data. Int32 destinationIndex A 32-bit integer that represents the index in the destinationArray at which storing begins. Int32 length A 32-bit integer that represents the number of elements to copy. | Improve this Doc View Source CopyTo(Array, Int32) Copies all the elements of the current one-dimensional Array to the specified one-dimensional Array starting at the specified destination Array index. The index is specified as a 32-bit integer. Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from the current Array. Int32 index A 32-bit integer that represents the index in array at which copying begins. CreateInstance(Type, Int32) Creates a one-dimensional Array of the specified Type and length, with zero-based indexing. Declaration public static extern Array CreateInstance(Type elementType, int length) Parameters Type Name Description Type elementType The Type of the Array to create. Int32 length The size of the Array to create. Returns Type Description Array A new one-dimensional Array of the specified Type with the specified length, using zero-based indexing. Remarks Unlike most classes, Array provides the CreateInstance method, instead of public constructors, to allow for late bound access. Reference-type elements are initialized to nullNothingnullptrunit a null reference(Nothing in Visual Basic). Value-type elements are initialized to zero. This method is an O(n) operation, where n is length. Available only in mscorlib build with support for System.Reflection. | Improve this Doc View Source GetEnumerator() Returns an IEnumerator for the Array. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator for the Array. | Improve this Doc View Source GetValue(Int32) Gets the value at the specified position in the one-dimensional Array. The index is specified as a 32-bit integer. Declaration public object GetValue(int index) Parameters Type Name Description Int32 index A 32-bit integer that represents the position of the Array element to get. Returns Type Description Object The value at the specified position in the one-dimensional Array. | Improve this Doc View Source IndexOf(Array, Object) Searches for the specified object and returns the index of the first occurrence within the entire one-dimensional Array. Declaration public static int IndexOf(Array array, object value) Parameters Type Name Description Array array The one-dimensional Array to search. Object value The object to locate in array. Returns Type Description Int32 The index of the first occurrence of value within the entire array, if found; otherwise, the lower bound of the array minus 1. | Improve this Doc View Source IndexOf(Array, Object, Int32) Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional Array that extends from the specified index to the last element. Declaration public static int IndexOf(Array array, object value, int startIndex) Parameters Type Name Description Array array The one-dimensional Array to search. Object value The object to locate in array. Int32 startIndex The starting index of the search. 0 (zero) is valid in an empty array. Returns Type Description Int32 The index of the first occurrence of value within the range of elements in array that extends from startIndex to the last element, if found; otherwise, the lower bound of the array minus 1. | Improve this Doc View Source IndexOf(Array, Object, Int32, Int32) Searches for the specified object and returns the index of the first occurrence within the range of elements in the one-dimensional Array that starts at the specified index and contains the specified number of elements. Declaration public static int IndexOf(Array array, object value, int startIndex, int count) Parameters Type Name Description Array array The one-dimensional Array to search. Object value The object to locate in array. Int32 startIndex The starting index of the search. 0 (zero) is valid in an empty array. Int32 count The number of elements in the section to search. Returns Type Description Int32 The index of the first occurrence of value within the range of elements in array that starts at startIndex and contains the number of elements specified in count, if found; otherwise, the lower bound of the array minus 1. Explicit Interface Implementations | Improve this Doc View Source ICollection.Count Declaration int ICollection.Count { get; } Returns Type Description Int32 | Improve this Doc View Source IList.Add(Object) Declaration int IList.Add(object value) Parameters Type Name Description Object value Returns Type Description Int32 | Improve this Doc View Source IList.Clear() Declaration void IList.Clear() | Improve this Doc View Source IList.Contains(Object) Declaration bool IList.Contains(object value) Parameters Type Name Description Object value Returns Type Description Boolean | Improve this Doc View Source IList.IndexOf(Object) Declaration int IList.IndexOf(object value) Parameters Type Name Description Object value Returns Type Description Int32 | Improve this Doc View Source IList.Insert(Int32, Object) Declaration void IList.Insert(int index, object value) Parameters Type Name Description Int32 index Object value IList.Item[Int32] Declaration object IList.this[int index] { get; set; } Parameters Type Name Description Int32 index Returns Type Description Object | Improve this Doc View Source IList.Remove(Object) Declaration void IList.Remove(object value) Parameters Type Name Description Object value | Improve this Doc View Source IList.RemoveAt(Int32) Declaration void IList.RemoveAt(int index) Parameters Type Name Description Int32 index Implements ICloneable IList ICollection IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.AsyncCallback.html": {
    "href": "api/System.AsyncCallback.html",
    "title": "Delegate AsyncCallback | nanoFramework Documentation",
    "keywords": "Delegate AsyncCallback References a method to be called when a corresponding asynchronous operation completes. Namespace : System Assembly : mscorlib.dll Syntax public delegate void AsyncCallback(IAsyncResult ar); Parameters Type Name Description IAsyncResult ar The result of the asynchronous operation. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Attribute.html": {
    "href": "api/System.Attribute.html",
    "title": "Class Attribute | nanoFramework Documentation",
    "keywords": "Class Attribute Represents the base class for custom attributes. Inheritance Object Attribute AuthenticationAttribute CaseSensitiveAttribute MethodAttribute RouteAttribute AttributeUsageAttribute CLSCompliantAttribute EditorBrowsableAttribute ConditionalAttribute DebuggableAttribute DebuggerBrowsableAttribute DebuggerDisplayAttribute DebuggerHiddenAttribute DebuggerNonUserCodeAttribute DebuggerStepperBoundaryAttribute DebuggerStepThroughAttribute DebuggerTypeProxyAttribute FlagsAttribute MTAThreadAttribute NonSerializedAttribute ObsoleteAttribute ParamArrayAttribute AssemblyCompanyAttribute AssemblyConfigurationAttribute AssemblyCopyrightAttribute AssemblyCultureAttribute AssemblyDefaultAliasAttribute AssemblyDelaySignAttribute AssemblyDescriptionAttribute AssemblyFileVersionAttribute AssemblyFlagsAttribute AssemblyInformationalVersionAttribute AssemblyKeyFileAttribute AssemblyKeyNameAttribute AssemblyNativeVersionAttribute AssemblyProductAttribute AssemblyTitleAttribute AssemblyTrademarkAttribute AssemblyVersionAttribute DefaultMemberAttribute AccessedThroughPropertyAttribute ExtensionAttribute IndexerNameAttribute InternalsVisibleToAttribute MethodImplAttribute ComVisibleAttribute GuidAttribute OutAttribute StructLayoutAttribute TargetFrameworkAttribute SerializableAttribute STAThreadAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.All)] public abstract class Attribute Constructors | Improve this Doc View Source Attribute() Initializes a new instance of the Attribute class. Declaration protected Attribute() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.AttributeTargets.html": {
    "href": "api/System.AttributeTargets.html",
    "title": "Enum AttributeTargets | nanoFramework Documentation",
    "keywords": "Enum AttributeTargets Specifies the application elements on which it is valid to apply an attribute. Namespace : System Assembly : mscorlib.dll Syntax public enum AttributeTargets Fields Name Description All Attribute can be applied to any application element. Assembly Attribute can be applied to an assembly. Class Attribute can be applied to a class. Constructor Attribute can be applied to a constructor. Delegate Attribute can be applied to a delegate. Enum Attribute can be applied to an enumeration. Event Attribute can be applied to an event. Field Attribute can be applied to a field. Interface Attribute can be applied to an interface. Method Attribute can be applied to a method. Module Attribute can be applied to a module. Parameter Attribute can be applied to a parameter. Property Attribute can be applied to a property. ReturnValue Attribute can be applied to a return value. Struct Attribute can be applied to a structure; that is, a value type."
  },
  "api/System.AttributeUsageAttribute.html": {
    "href": "api/System.AttributeUsageAttribute.html",
    "title": "Class AttributeUsageAttribute | nanoFramework Documentation",
    "keywords": "Class AttributeUsageAttribute Specifies the usage of another attribute class. This class cannot be inherited. Inheritance Object Attribute AttributeUsageAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class AttributeUsageAttribute : Attribute Constructors | Improve this Doc View Source AttributeUsageAttribute(AttributeTargets) Initializes a new instance of the AttributeUsageAttribute class with the specified list of AttributeTargets, the AllowMultiple value, and the Inherited value. Declaration public AttributeUsageAttribute(AttributeTargets validOn) Parameters Type Name Description AttributeTargets validOn The set of values combined using a bitwise OR operation to indicate which program elements are valid. Properties | Improve this Doc View Source AllowMultiple Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element. Declaration public bool AllowMultiple { get; set; } Property Value Type Description Boolean true if more than one instance is allowed to be specified; otherwise, false. The default is false. | Improve this Doc View Source Inherited Gets or sets a Boolean value that determines whether the indicated attribute is inherited by derived classes and overriding members. Declaration public bool Inherited { get; set; } Property Value Type Description Boolean true if the attribute can be inherited by derived classes and overriding members; otherwise, false. The default is true. | Improve this Doc View Source ValidOn Gets a set of values identifying which program elements that the indicated attribute can be applied to. Declaration public AttributeTargets ValidOn { get; } Property Value Type Description AttributeTargets One or several AttributeTargets values. The default is All. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Base64FormattingOptions.html": {
    "href": "api/System.Base64FormattingOptions.html",
    "title": "Enum Base64FormattingOptions | nanoFramework Documentation",
    "keywords": "Enum Base64FormattingOptions Specifies whether relevant Convert.ToBase64CharArray and Convert.ToBase64String methods insert line breaks in their output. Namespace : System Assembly : mscorlib.dll Syntax public enum Base64FormattingOptions Fields Name Description InsertLineBreaks Inserts line breaks after every 76 characters in the string representation. None Does not insert line breaks after every 76 characters in the string representation."
  },
  "api/System.BitConverter.html": {
    "href": "api/System.BitConverter.html",
    "title": "Class BitConverter | nanoFramework Documentation",
    "keywords": "Class BitConverter Converts base data types to an array of bytes, and an array of bytes to base data types. Inheritance Object BitConverter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public static class BitConverter Properties IsLittleEndian Indicates the byte order (\"endianess\") in which data is stored in this computer architecture. Declaration public static bool IsLittleEndian { get; } Property Value Type Description Boolean Methods DoubleToInt64Bits(Double) Converts the specified double-precision floating point number to a 64-bit signed integer. Declaration public static extern long DoubleToInt64Bits(double value) Parameters Type Name Description Double value The number to convert. Returns Type Description Int64 GetBytes(Boolean) Returns the specified Boolean value as an array of bytes. Declaration public static extern byte[] GetBytes(bool value) Parameters Type Name Description Boolean value A Boolean value. Returns Type Description Byte [] An array of bytes with length 1. GetBytes(Char) Returns the specified Unicode character value as an array of bytes. Declaration public static extern byte[] GetBytes(char value) Parameters Type Name Description Char value A character to convert. Returns Type Description Byte [] An array of bytes with length 2. GetBytes(Double) Returns the specified double-precision floating point value as an array of bytes. Declaration public static extern byte[] GetBytes(double value) Parameters Type Name Description Double value The number to convert. Returns Type Description Byte [] An array of bytes with length 8. GetBytes(Int16) Returns the specified 16-bit signed integer value as an array of bytes. Declaration public static extern byte[] GetBytes(short value) Parameters Type Name Description Int16 value The number to convert. Returns Type Description Byte [] An array of bytes with length 2. GetBytes(Int32) Returns the specified 32-bit signed integer value as an array of bytes. Declaration public static extern byte[] GetBytes(int value) Parameters Type Name Description Int32 value The number to convert. Returns Type Description Byte [] An array of bytes with length 4. GetBytes(Int64) Returns the specified 64-bit signed integer value as an array of bytes. Declaration public static extern byte[] GetBytes(long value) Parameters Type Name Description Int64 value The number to convert. Returns Type Description Byte [] An array of bytes with length 8. GetBytes(Single) Returns the specified single-precision floating point value as an array of bytes. Declaration public static extern byte[] GetBytes(float value) Parameters Type Name Description Single value The number to convert. Returns Type Description Byte [] An array of bytes with length 4. GetBytes(UInt16) Returns the specified 16-bit unsigned integer value as an array of bytes. Declaration public static extern byte[] GetBytes(ushort value) Parameters Type Name Description UInt16 value The number to convert. Returns Type Description Byte [] An array of bytes with length 2. GetBytes(UInt32) Returns the specified 32-bit unsigned integer value as an array of bytes. Declaration public static extern byte[] GetBytes(uint value) Parameters Type Name Description UInt32 value The number to convert. Returns Type Description Byte [] An array of bytes with length 4. GetBytes(UInt64) Returns the specified 64-bit unsigned integer value as an array of bytes. Declaration public static extern byte[] GetBytes(ulong value) Parameters Type Name Description UInt64 value The number to convert. Returns Type Description Byte [] An array of bytes with length 8. Int64BitsToDouble(Int64) Converts the specified 64-bit signed integer to a double-precision floating point number. Declaration public static extern double Int64BitsToDouble(long value) Parameters Type Name Description Int64 value The number to convert. Returns Type Description Double A double-precision floating point number whose value is equivalent to value. ToBoolean(Byte[], Int32) Returns a Boolean value converted from one byte at a specified position in a byte array. Declaration public static extern bool ToBoolean(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Boolean true if the byte at startIndex in value is nonzero; otherwise, false. ToChar(Byte[], Int32) Returns a Unicode character converted from two bytes at a specified position in a byte array. Declaration public static extern char ToChar(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Char A character formed by two bytes beginning at startIndex. ToDouble(Byte[], Int32) Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array. Declaration public static extern double ToDouble(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Double A double precision floating point number formed by eight bytes beginning at startIndex. ToInt16(Byte[], Int32) Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array. Declaration public static extern short ToInt16(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Int16 A 16-bit signed integer formed by two bytes beginning at startIndex. ToInt32(Byte[], Int32) Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array. Declaration public static extern int ToInt32(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Int32 A 32-bit signed integer formed by four bytes beginning at startIndex. ToInt64(Byte[], Int32) Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array. Declaration public static extern long ToInt64(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Int64 A 64-bit signed integer formed by eight bytes beginning at startIndex. ToSingle(Byte[], Int32) Returns a single-precision floating point number converted from four bytes at a specified position in a byte array. Declaration public static extern float ToSingle(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description Single A single-precision floating point number formed by four bytes beginning at startIndex. ToString(Byte[]) Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation. Declaration public static extern string ToString(byte[] value) Parameters Type Name Description Byte [] value An array of bytes. Returns Type Description String A String of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in value; for example, \"7F-2C-4A\". ToString(Byte[], Int32) Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation. Declaration public static extern string ToString(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description String A String of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of value; for example, \"7F-2C-4A\". ToString(Byte[], Int32, Int32) Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation. Declaration public static extern string ToString(byte[] value, int startIndex, int length) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Int32 length The number of array elements in value to convert. Returns Type Description String A String of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of value; for example, \"7F-2C-4A\". ToUInt16(Byte[], Int32) Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array. Declaration [CLSCompliant(false)] public static extern ushort ToUInt16(byte[] value, int startIndex) Parameters Type Name Description Byte [] value An array of bytes. Int32 startIndex The starting position within value. Returns Type Description UInt16 A 16-bit unsigned integer formed by two bytes beginning at startIndex. ToUInt32(Byte[], Int32) Returns a 32-bit unsigned integer converted from two bytes at a specified position in a byte array. Declaration [CLSCompliant(false)] public static extern uint ToUInt32(byte[] value, int startIndex) Parameters Type Name Description Byte [] value The array of bytes. Int32 startIndex The starting position within value. Returns Type Description UInt32 A 32-bit unsigned integer formed by two bytes beginning at startIndex. ToUInt64(Byte[], Int32) Returns a 64-bit unsigned integer converted from two bytes at a specified position in a byte array. Declaration [CLSCompliant(false)] public static extern ulong ToUInt64(byte[] value, int startIndex) Parameters Type Name Description Byte [] value The array of bytes. Int32 startIndex The starting position within value. Returns Type Description UInt64 A 64-bit unsigned integer formed by two bytes beginning at startIndex."
  },
  "api/System.Boolean.html": {
    "href": "api/System.Boolean.html",
    "title": "Struct Boolean | nanoFramework Documentation",
    "keywords": "Struct Boolean Represents a Boolean value. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Boolean Fields | Improve this Doc View Source FalseString Represents the Boolean value false as a string. This field is read-only. Declaration public static readonly string FalseString Field Value Type Description String | Improve this Doc View Source TrueString Represents the Boolean value true as a string. This field is read-only. Declaration public static readonly string TrueString Field Value Type Description String Methods | Improve this Doc View Source ToString() Converts the value of this instance to its equivalent string representation (either \"True\" or \"False\"). Declaration public override string ToString() Returns Type Description String TrueString if the value of this instance is true, or FalseString if the value of this instance is false. Overrides Object.ToString()"
  },
  "api/System.Byte.html": {
    "href": "api/System.Byte.html",
    "title": "Struct Byte | nanoFramework Documentation",
    "keywords": "Struct Byte Represents an 8-bit unsigned integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Byte Fields | Improve this Doc View Source MaxValue Represents the largest possible value of a Byte. This field is constant. Declaration public const byte MaxValue = 255 Field Value Type Description Byte | Improve this Doc View Source MinValue Represents the smallest possible value of a Byte. This field is constant. Declaration public const byte MinValue = 0 Field Value Type Description Byte Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its Byte equivalent. Declaration [CLSCompliant(false)] public static byte Parse(string s) Parameters Type Name Description String s A string that contains a number to convert. The string is interpreted using the Integer style. Returns Type Description Byte A byte value that is equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException s is null reference (Nothing in Visual Basic). | Improve this Doc View Source ToString() Converts the value of the current Byte object to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this object, which consists of a sequence of digits that range from 0 to 9 with no leading zeroes. Overrides Object.ToString() Remarks The return value is formatted with the general numeric format specifier (\"G\") and the NumberFormatInfo object for the thread current culture. | Improve this Doc View Source ToString(String) Converts the value of the current Byte object to its equivalent string representation using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the current Byte object, formatted as specified by the format parameter."
  },
  "api/System.Char.html": {
    "href": "api/System.Char.html",
    "title": "Struct Char | nanoFramework Documentation",
    "keywords": "Struct Char Represents a character as a UTF-16 code unit. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Char Fields | Improve this Doc View Source MaxValue Represents the largest possible value of a Char. This field is constant. Declaration public const char MaxValue = '\\uffff' Field Value Type Description Char | Improve this Doc View Source MinValue Represents the smallest possible value of a Char. This field is constant. Declaration public const char MinValue = '\\0' Field Value Type Description Char Methods | Improve this Doc View Source ToLower() Returns the lower case character. Declaration public char ToLower() Returns Type Description Char The lower case character. | Improve this Doc View Source ToString() Converts the value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance. Overrides Object.ToString() | Improve this Doc View Source ToUpper() Returns the upper case character. Declaration public char ToUpper() Returns Type Description Char The upper case character."
  },
  "api/System.CLSCompliantAttribute.html": {
    "href": "api/System.CLSCompliantAttribute.html",
    "title": "Class CLSCompliantAttribute | nanoFramework Documentation",
    "keywords": "Class CLSCompliantAttribute Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited. Inheritance Object Attribute CLSCompliantAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.All)] public sealed class CLSCompliantAttribute : Attribute Constructors | Improve this Doc View Source CLSCompliantAttribute(Boolean) Initializes an instance of the CLSCompliantAttribute class with a Boolean value indicating whether the indicated program element is CLS-compliant. Declaration public CLSCompliantAttribute(bool isCompliant) Parameters Type Name Description Boolean isCompliant true if CLS-compliant; otherwise, false. Properties | Improve this Doc View Source IsCompliant GGets the Boolean value indicating whether the indicated program element is CLS-compliant. Declaration public bool IsCompliant { get; } Property Value Type Description Boolean true if the program element is CLS-compliant; otherwise, false. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.ArrayList.html": {
    "href": "api/System.Collections.ArrayList.html",
    "title": "Class ArrayList | nanoFramework Documentation",
    "keywords": "Class ArrayList Implements the IList interface using an array whose size is dynamically increased as required. Inheritance Object ArrayList Implements IList ICollection IEnumerable ICloneable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections Assembly : mscorlib.dll Syntax public class ArrayList : IList, ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source ArrayList() Initializes a new instance of the ArrayList class that is empty and has the default initial capacity. Declaration public ArrayList() Properties | Improve this Doc View Source Capacity Gets or sets the number of elements that the ArrayList can contain. Declaration public virtual int Capacity { get; set; } Property Value Type Description Int32 The number of elements that the ArrayList can contain. | Improve this Doc View Source Count Gets the number of elements actually contained in the ArrayList . Declaration public virtual int Count { get; } Property Value Type Description Int32 The number of elements actually contained in the ArrayList . | Improve this Doc View Source IsFixedSize Gets a value indicating whether the ArrayList has a fixed size. Declaration public virtual bool IsFixedSize { get; } Property Value Type Description Boolean true if the ArrayList has a fixed size; otherwise, false. The default is false. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the ArrayList is read-only. Declaration public virtual bool IsReadOnly { get; } Property Value Type Description Boolean true if the ArrayList is read-only; otherwise, false. The default is false. | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the ArrayList is synchronized (thread safe). Declaration public virtual bool IsSynchronized { get; } Property Value Type Description Boolean true if access to the ArrayList is synchronized (thread safe); otherwise, false. The default is false. Item[Int32] Gets or sets the element at the specified index. Declaration public virtual object this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description Object | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the ArrayList . Declaration public virtual object SyncRoot { get; } Property Value Type Description Object An object that can be used to synchronize access to the ArrayList . Methods Add(Object) Adds an object to the end of the ArrayList . Declaration public extern virtual int Add(object value) Parameters Type Name Description Object value Returns Type Description Int32 The Object to be added to the end of the ArrayList . The value can be null . | Improve this Doc View Source BinarySearch(Object, IComparer) Searches the entire sorted ArrayList for an element using the specified comparer and returns the zero-based index of the element. Declaration public virtual int BinarySearch(object value, IComparer comparer) Parameters Type Name Description Object value The Object to locate. The value can be null reference (Nothing in Visual Basic). IComparer comparer The IComparer implementation to use when comparing elements. -or- nullNothingnullptrunit a null reference(Nothing in Visual Basic) to use the IComparable implementation of each element. Returns Type Description Int32 The zero-based index of value in the sorted ArrayList , if value is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than value or, if there is no larger element, the bitwise complement of Count. Clear() Removes all elements from the ArrayList . Declaration public extern virtual void Clear() | Improve this Doc View Source Clone() Creates a shallow copy of the ArrayList . Declaration public virtual object Clone() Returns Type Description Object A shallow copy of the ArrayList . | Improve this Doc View Source Contains(Object) Determines whether an element is in the ArrayList . Declaration public virtual bool Contains(object value) Parameters Type Name Description Object value Returns Type Description Boolean The Object to locate in the ArrayList .The value can be null . | Improve this Doc View Source CopyTo(Array) Copies the entire ArrayList to a compatible one-dimensional Array, starting at the beginning of the target array. Declaration public virtual void CopyTo(Array array) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ArrayList . The Array must have zero-based indexing. | Improve this Doc View Source CopyTo(Array, Int32) Copies the entire ArrayList to a compatible one-dimensional Array, starting at the specified index of the target array. Declaration public virtual void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ArrayList . The Array must have zero-based indexing. Int32 index The zero-based index in array at which copying begins. | Improve this Doc View Source GetEnumerator() Returns an enumerator for the entire ArrayList . Declaration public virtual IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator for the entire ArrayList . | Improve this Doc View Source IndexOf(Object) Searches for the specified Object and returns the zero-based index of the first occurrence within the entire ArrayList . Declaration public virtual int IndexOf(object value) Parameters Type Name Description Object value The Object to locate in the ArrayList . The value can be null reference (Nothing in Visual Basic). Returns Type Description Int32 The zero-based index of the first occurrence of value within the entire ArrayList , if found; otherwise, -1. | Improve this Doc View Source IndexOf(Object, Int32) Searches for the specified Object and returns the zero-based index of the first occurrence within the range of elements in the ArrayList that extends from the specified index to the last element. Declaration public virtual int IndexOf(object value, int startIndex) Parameters Type Name Description Object value The Object to locate in the ArrayList . The value can be null reference (Nothing in Visual Basic). Int32 startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description Int32 The zero-based index of the first occurrence of value within the range of elements in the ArrayList that extends from startIndex to the last element, if found; otherwise, -1. | Improve this Doc View Source IndexOf(Object, Int32, Int32) Searches for the specified Object and returns the zero-based index of the first occurrence within the range of elements in the ArrayList that starts at the specified index and contains the specified number of elements. Declaration public virtual int IndexOf(object value, int startIndex, int count) Parameters Type Name Description Object value The Object to locate in the ArrayList . The value can be null reference (Nothing in Visual Basic). Int32 startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty list. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the first occurrence of value within the range of elements in the ArrayList that starts at startIndex and contains count number of elements, if found; otherwise, -1. Insert(Int32, Object) Inserts an element into the ArrayList at the specified index. Declaration public extern virtual void Insert(int index, object value) Parameters Type Name Description Int32 index The zero-based index at which value should be inserted. Object value The Object to insert. The value can be null . | Improve this Doc View Source Remove(Object) Removes the first occurrence of a specific object from the ArrayList . Declaration public virtual void Remove(object value) Parameters Type Name Description Object value The Object to remove from the ArrayList . The value can be null . RemoveAt(Int32) Removes the element at the specified index of the ArrayList . Declaration public extern virtual void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. | Improve this Doc View Source ToArray() Copies the elements of the ArrayList to a new Object array. Declaration public virtual object[] ToArray() Returns Type Description Object [] An Object array containing copies of the elements of the ArrayList . Remarks Available only in mscorlib build with support for System.Reflection. | Improve this Doc View Source ToArray(Type) Copies the elements of the ArrayList to a new array of the specified element type. Declaration public virtual Array ToArray(Type type) Parameters Type Name Description Type type The element Type of the destination array to create and copy elements to. Returns Type Description Array An array of the specified element type containing copies of the elements of the ArrayList . Implements IList ICollection IEnumerable ICloneable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.DictionaryEntry.html": {
    "href": "api/System.Collections.DictionaryEntry.html",
    "title": "Class DictionaryEntry | nanoFramework Documentation",
    "keywords": "Class DictionaryEntry Defines a dictionary key/value pair that can be set or retrieved. Inheritance Object DictionaryEntry Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections Assembly : nanoFramework.System.Collections.dll Syntax public class DictionaryEntry Constructors | Improve this Doc View Source DictionaryEntry(Object, Object) Initializes an instance of the DictionaryEntry type with the specified key and value. Declaration public DictionaryEntry(object key, object value) Parameters Type Name Description Object key The object defined in each key/value pair. Object value The definition associated with key. Fields | Improve this Doc View Source Key Gets or sets the key in the key/value pair. Declaration public object Key Field Value Type Description Object The key in the key/value pair. | Improve this Doc View Source Value Gets or sets the value in the key/value pair. Declaration public object Value Field Value Type Description Object The value in the key/value pair. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.Hashtable.html": {
    "href": "api/System.Collections.Hashtable.html",
    "title": "Class Hashtable | nanoFramework Documentation",
    "keywords": "Class Hashtable HashTable is an Associative Container. Created in March 2010. by Eric Harlow. Inheritance Object Hashtable Implements ICloneable IDictionary ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections Assembly : nanoFramework.System.Collections.dll Syntax public class Hashtable : ICloneable, IDictionary, ICollection, IEnumerable Constructors | Improve this Doc View Source Hashtable() Initializes a new, empty instance of the Hashtable class using the default initial capacity and load factor. Declaration public Hashtable() | Improve this Doc View Source Hashtable(Int32) Initializes a new, empty instance of the Hashtable class using the specified initial capacity, and the default load factor. Declaration public Hashtable(int capacity) Parameters Type Name Description Int32 capacity The initial capacity of the HashTable | Improve this Doc View Source Hashtable(Int32, Int32) Initializes a new, empty instance of the Hashtable class using the specified initial capacity, load factor. Declaration public Hashtable(int capacity, int maxLoadFactor) Parameters Type Name Description Int32 capacity The initial capacity of the HashTable Int32 maxLoadFactor The load factor to cause a rehash Properties | Improve this Doc View Source Count Gets the number of elements contained in the ICollection. Declaration public int Count { get; } Property Value Type Description Int32 The number of elements contained in the ICollection. | Improve this Doc View Source GrowthFactor GrowthFactor Property is a multiplier to increase the HashTable size by during a rehash. Default value is 2. Declaration public double GrowthFactor { get; set; } Property Value Type Description Double | Improve this Doc View Source IsFixedSize Gets a value indicating whether the IDictionary object has a fixed size. Declaration public bool IsFixedSize { get; } Property Value Type Description Boolean true if the IDictionary object has a fixed size; otherwise, false. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the IDictionary object is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean true if the IDictionary object is read-only; otherwise, false. | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean true if access to the ICollection is synchronized (thread safe); otherwise, false. | Improve this Doc View Source Item[Object] Gets or sets the element with the specified key. Declaration public object this[object key] { get; set; } Parameters Type Name Description Object key The key of the element to get or set. Property Value Type Description Object The element with the specified key, or null if the key does not exist. | Improve this Doc View Source Keys Gets an ICollection object containing the keys of the IDictionary object. Declaration public ICollection Keys { get; } Property Value Type Description ICollection An ICollection object containing the keys of the IDictionary object. | Improve this Doc View Source MaxLoadFactor MaxLoadFactor Property is the value used to trigger a rehash. Default value is 2. A higher number can decrease lookup performance for large collections. While a value of 1 maintains a constant time complexity at the cost of increased memory requirements. Declaration public int MaxLoadFactor { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public object SyncRoot { get; } Property Value Type Description Object An object that can be used to synchronize access to the ICollection. | Improve this Doc View Source Values Gets an ICollection object containing the values in the IDictionary object. Declaration public ICollection Values { get; } Property Value Type Description ICollection An ICollection object containing the values in the IDictionary object. Methods | Improve this Doc View Source Add(Object, Object) Adds an element with the provided key and value to the IDictionary object. Declaration public void Add(object key, object value) Parameters Type Name Description Object key The Object to use as the key of the element to add. Object value The Object to use as the value of the element to add. | Improve this Doc View Source Clear() Removes all elements from the IDictionary object. Declaration public void Clear() | Improve this Doc View Source Clone() Make a new object which is a copy of the object instanced. Declaration public object Clone() Returns Type Description Object A new object that represents a clone of the object. | Improve this Doc View Source Contains(Object) Determines whether the IDictionary object contains an element with the specified key. Declaration public bool Contains(object key) Parameters Type Name Description Object key The key to locate in the IDictionary object. Returns Type Description Boolean true if the IDictionary contains an element with the key; otherwise, false. | Improve this Doc View Source CopyTo(Array, Int32) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. Int32 index The zero-based index in array at which copying begins. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. | Improve this Doc View Source Remove(Object) Removes the element with the specified key from the IDictionary object. Declaration public void Remove(object key) Parameters Type Name Description Object key The key of the element to remove. Implements ICloneable IDictionary ICollection IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.html": {
    "href": "api/System.Collections.html",
    "title": "Namespace System.Collections | nanoFramework Documentation",
    "keywords": "Namespace System.Collections Classes ArrayList Implements the IList interface using an array whose size is dynamically increased as required. DictionaryEntry Defines a dictionary key/value pair that can be set or retrieved. Hashtable HashTable is an Associative Container. Created in March 2010. by Eric Harlow. Queue A circular-array implementation of a queue. Enqueue can be O(n). Dequeue is O(1). Stack An array implementation of a stack. Push can be O(n). Pop is O(1). Interfaces ICollection Defines size, enumerators, and synchronization methods for all nongeneric collections. IComparer Exposes a method that compares two objects. IDictionary Represents a nongeneric collection of key/value pairs. IEnumerable Exposes an enumerator, which supports a simple iteration over a non-generic collection. IEnumerator Supports a simple iteration over a non-generic collection. IEqualityComparer Defines methods to support the comparison of objects for equality. IList Represents a non-generic collection of objects that can be individually accessed by index."
  },
  "api/System.Collections.ICollection.html": {
    "href": "api/System.Collections.ICollection.html",
    "title": "Interface ICollection | nanoFramework Documentation",
    "keywords": "Interface ICollection Defines size, enumerators, and synchronization methods for all nongeneric collections. Inherited Members IEnumerable.GetEnumerator() Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface ICollection : IEnumerable Properties | Improve this Doc View Source Count Gets the number of elements contained in the ICollection. Declaration int Count { get; } Property Value Type Description Int32 The number of elements contained in the ICollection. | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration bool IsSynchronized { get; } Property Value Type Description Boolean true if access to the ICollection is synchronized (thread safe); otherwise, false. | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration object SyncRoot { get; } Property Value Type Description Object An object that can be used to synchronize access to the ICollection. Methods | Improve this Doc View Source CopyTo(Array, Int32) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. Int32 index The zero-based index in array at which copying begins. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.IComparer.html": {
    "href": "api/System.Collections.IComparer.html",
    "title": "Interface IComparer | nanoFramework Documentation",
    "keywords": "Interface IComparer Exposes a method that compares two objects. Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface IComparer Methods | Improve this Doc View Source Compare(Object, Object) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration int Compare(object x, object y) Parameters Type Name Description Object x The first object to compare. Object y The second object to compare. Returns Type Description Int32 A signed integer that indicates the relative values of x and y, as shown in the following table. Less than zero : x is less than y. Zero : x equals y. Greater than zero : x is greater than y. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.IDictionary.html": {
    "href": "api/System.Collections.IDictionary.html",
    "title": "Interface IDictionary | nanoFramework Documentation",
    "keywords": "Interface IDictionary Represents a nongeneric collection of key/value pairs. Inherited Members ICollection.CopyTo(Array, Int32) ICollection.Count ICollection.SyncRoot ICollection.IsSynchronized IEnumerable.GetEnumerator() Namespace : System.Collections Assembly : nanoFramework.System.Collections.dll Syntax public interface IDictionary : ICollection, IEnumerable Properties | Improve this Doc View Source IsFixedSize Gets a value indicating whether the IDictionary object has a fixed size. Declaration bool IsFixedSize { get; } Property Value Type Description Boolean true if the IDictionary object has a fixed size; otherwise, false. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the IDictionary object is read-only. Declaration bool IsReadOnly { get; } Property Value Type Description Boolean true if the IDictionary object is read-only; otherwise, false. | Improve this Doc View Source Item[Object] Gets or sets the element with the specified key. Declaration object this[object key] { get; set; } Parameters Type Name Description Object key The key of the element to get or set. Property Value Type Description Object The element with the specified key, or null if the key does not exist. | Improve this Doc View Source Keys Gets an ICollection object containing the keys of the IDictionary object. Declaration ICollection Keys { get; } Property Value Type Description ICollection An ICollection object containing the keys of the IDictionary object. | Improve this Doc View Source Values Gets an ICollection object containing the values in the IDictionary object. Declaration ICollection Values { get; } Property Value Type Description ICollection An ICollection object containing the values in the IDictionary object. Methods | Improve this Doc View Source Add(Object, Object) Adds an element with the provided key and value to the IDictionary object. Declaration void Add(object key, object value) Parameters Type Name Description Object key The Object to use as the key of the element to add. Object value The Object to use as the value of the element to add. | Improve this Doc View Source Clear() Removes all elements from the IDictionary object. Declaration void Clear() | Improve this Doc View Source Contains(Object) Determines whether the IDictionary object contains an element with the specified key. Declaration bool Contains(object key) Parameters Type Name Description Object key The key to locate in the IDictionary object. Returns Type Description Boolean true if the IDictionary contains an element with the key; otherwise, false. | Improve this Doc View Source Remove(Object) Removes the element with the specified key from the IDictionary object. Declaration void Remove(object key) Parameters Type Name Description Object key The key of the element to remove. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.IEnumerable.html": {
    "href": "api/System.Collections.IEnumerable.html",
    "title": "Interface IEnumerable | nanoFramework Documentation",
    "keywords": "Interface IEnumerable Exposes an enumerator, which supports a simple iteration over a non-generic collection. Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface IEnumerable Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through a collection. Declaration IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.IEnumerator.html": {
    "href": "api/System.Collections.IEnumerator.html",
    "title": "Interface IEnumerator | nanoFramework Documentation",
    "keywords": "Interface IEnumerator Supports a simple iteration over a non-generic collection. Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface IEnumerator Properties | Improve this Doc View Source Current Gets the element in the collection at the current position of the enumerator. Declaration object Current { get; } Property Value Type Description Object The element in the collection at the current position of the enumerator. Methods | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the collection. Declaration bool MoveNext() Returns Type Description Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. | Improve this Doc View Source Reset() Sets the enumerator to its initial position, which is before the first element in the collection. Declaration void Reset() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.IEqualityComparer.html": {
    "href": "api/System.Collections.IEqualityComparer.html",
    "title": "Interface IEqualityComparer | nanoFramework Documentation",
    "keywords": "Interface IEqualityComparer Defines methods to support the comparison of objects for equality. Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface IEqualityComparer Methods | Improve this Doc View Source Equals(Object, Object) Determines whether the specified objects are equal. Declaration bool Equals(object x, object y) Parameters Type Name Description Object x The first object to compare. Object y The second object to compare. Returns Type Description Boolean true if the specified objects are equal; otherwise, false. | Improve this Doc View Source GetHashCode(Object) Returns a hash code for the specified object. Declaration int GetHashCode(object obj) Parameters Type Name Description Object obj The Object for which a hash code is to be returned. Returns Type Description Int32 A hash code for the specified object. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.IList.html": {
    "href": "api/System.Collections.IList.html",
    "title": "Interface IList | nanoFramework Documentation",
    "keywords": "Interface IList Represents a non-generic collection of objects that can be individually accessed by index. Inherited Members ICollection.CopyTo(Array, Int32) ICollection.Count ICollection.SyncRoot ICollection.IsSynchronized IEnumerable.GetEnumerator() Namespace : System.Collections Assembly : mscorlib.dll Syntax public interface IList : ICollection, IEnumerable Properties | Improve this Doc View Source IsFixedSize Gets a value indicating whether the IList has a fixed size. Declaration bool IsFixedSize { get; } Property Value Type Description Boolean true if the IList has a fixed size; otherwise, false. | Improve this Doc View Source IsReadOnly Gets a value indicating whether the IList is read-only. Declaration bool IsReadOnly { get; } Property Value Type Description Boolean true if the IList is read-only; otherwise, false. | Improve this Doc View Source Item[Int32] Gets or sets the element at the specified index. Declaration object this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description Object The element at the specified index. Methods | Improve this Doc View Source Add(Object) Adds an item to the IList. Declaration int Add(object value) Parameters Type Name Description Object value The object to add to the IList. Returns Type Description Int32 The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection. | Improve this Doc View Source Clear() Removes all items from the IList. Declaration void Clear() | Improve this Doc View Source Contains(Object) Determines whether the IList contains a specific value. Declaration bool Contains(object value) Parameters Type Name Description Object value The object to locate in the IList. Returns Type Description Boolean true if the Object is found in the IList; otherwise, false. | Improve this Doc View Source IndexOf(Object) Determines the index of a specific item in the IList. Declaration int IndexOf(object value) Parameters Type Name Description Object value The object to locate in the IList. Returns Type Description Int32 The index of value if found in the list; otherwise, -1. | Improve this Doc View Source Insert(Int32, Object) Inserts an item to the IList at the specified index. Declaration void Insert(int index, object value) Parameters Type Name Description Int32 index The zero-based index at which value should be inserted. Object value The object to insert into the IList. | Improve this Doc View Source Remove(Object) Removes the first occurrence of a specific object from the IList. Declaration void Remove(object value) Parameters Type Name Description Object value The object to remove from the IList. | Improve this Doc View Source RemoveAt(Int32) Removes the IList item at the specified index. Declaration void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the item to remove. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.Queue.html": {
    "href": "api/System.Collections.Queue.html",
    "title": "Class Queue | nanoFramework Documentation",
    "keywords": "Class Queue A circular-array implementation of a queue. Enqueue can be O(n). Dequeue is O(1). Inheritance Object Queue Implements ICollection IEnumerable ICloneable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections Assembly : nanoFramework.System.Collections.dll Syntax [Serializable] public class Queue : ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source Queue() Initializes a new instance of the Queue class that is empty, has the default initial capacity, and uses the default growth factor (2x). Declaration public Queue() Properties | Improve this Doc View Source Count Gets the number of elements contained in the Queue. Declaration public virtual int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the Queue is synchronized (thread safe). Always return false. Declaration public virtual bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the Queue. Declaration public virtual object SyncRoot { get; } Property Value Type Description Object Methods Clear() Removes all objects from the Queue. Declaration public extern virtual void Clear() | Improve this Doc View Source Clone() Creates a shallow copy of the Queue. Declaration public virtual object Clone() Returns Type Description Object A shallow copy of the Queue. | Improve this Doc View Source Contains(Object) Determines whether an element is in the Queue. Declaration public virtual bool Contains(object obj) Parameters Type Name Description Object obj The Object to locate in the Queue. Returns Type Description Boolean true if obj is found in the Queue; otherwise, false. CopyTo(Array, Int32) Copies the Queue elements to an existing one-dimensional Array, starting at the specified array index. Declaration public extern virtual void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from Queue. Int32 index The zero-based index in array at which copying begins. Dequeue() Removes and returns the object at the beginning of the Queue. Declaration public extern virtual object Dequeue() Returns Type Description Object The object that is removed from the beginning of the Queue. Enqueue(Object) Adds an object to the end of the Queue. Declaration public extern virtual void Enqueue(object obj) Parameters Type Name Description Object obj The object to add to the Queue. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the Queue. Declaration public virtual IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator for the Queue. Peek() Returns the object at the beginning of the Queue without removing it. Declaration public extern virtual object Peek() Returns Type Description Object The object at the beginning of the Queue. | Improve this Doc View Source ToArray() Copies the Queue elements to a new array. The order of the elements in the new array is the same as the order of the elements from the beginning of the Queue to its end. Declaration public virtual object[] ToArray() Returns Type Description Object [] A new array containing elements copied from the Queue. Implements ICollection IEnumerable ICloneable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Collections.Stack.html": {
    "href": "api/System.Collections.Stack.html",
    "title": "Class Stack | nanoFramework Documentation",
    "keywords": "Class Stack An array implementation of a stack. Push can be O(n). Pop is O(1). Inheritance Object Stack Implements ICollection IEnumerable ICloneable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections Assembly : nanoFramework.System.Collections.dll Syntax [Serializable] public class Stack : ICollection, IEnumerable, ICloneable Constructors | Improve this Doc View Source Stack() Initializes a new instance of the Stack class that is empty and has the default initial capacity. Declaration public Stack() Properties | Improve this Doc View Source Count Size of the stack Declaration public virtual int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsSynchronized Returns whether the current stack is synchornized. Always return false. Declaration public virtual bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the Stack. Declaration public virtual object SyncRoot { get; } Property Value Type Description Object Methods Clear() Removes all Objects from the Stack. Declaration public extern virtual void Clear() | Improve this Doc View Source Clone() Creates a shallow copy of the Stack. Declaration public virtual object Clone() Returns Type Description Object A shallow copy of the Stack. | Improve this Doc View Source Contains(Object) Determines whether an element is in the Stack. Declaration public virtual bool Contains(object obj) Parameters Type Name Description Object obj The Object to locate in the Stack. Returns Type Description Boolean true, if obj is found in the Stack; otherwise, false | Improve this Doc View Source CopyTo(Array, Int32) Copies the Stack to an existing one-dimensional Array, starting at the specified array index. Declaration public virtual void CopyTo(Array array, int index) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from Stack. Int32 index The zero-based index in array at which copying begins. | Improve this Doc View Source GetEnumerator() Returns an IEnumerator for this Stack. Declaration public virtual IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator for the Stack. Peek() Returns the object at the top of the Stack without removing it. Declaration public extern virtual object Peek() Returns Type Description Object The Object at the top of the Stack. Pop() Removes and returns the object at the top of the Stack. Declaration public extern virtual object Pop() Returns Type Description Object The Object removed from the top of the Stack. Push(Object) Inserts an object at the top of the Stack. Declaration public extern virtual void Push(object obj) Parameters Type Name Description Object obj The Object to push onto the Stack. | Improve this Doc View Source ToArray() Copies the Stack to a new array, in the same order Pop would return the items. Declaration public virtual object[] ToArray() Returns Type Description Object [] A new array containing copies of the elements of the Stack. Implements ICollection IEnumerable ICloneable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ComponentModel.EditorBrowsableAttribute.html": {
    "href": "api/System.ComponentModel.EditorBrowsableAttribute.html",
    "title": "Class EditorBrowsableAttribute | nanoFramework Documentation",
    "keywords": "Class EditorBrowsableAttribute Specifies that a property or method is viewable in an editor. This class cannot be inherited. Inheritance Object Attribute EditorBrowsableAttribute Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.ComponentModel Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)] public sealed class EditorBrowsableAttribute : Attribute Constructors | Improve this Doc View Source EditorBrowsableAttribute() Initializes a new instance of the EditorBrowsableAttribute class with State set to the default state. Declaration public EditorBrowsableAttribute() | Improve this Doc View Source EditorBrowsableAttribute(EditorBrowsableState) Initializes a new instance of the EditorBrowsableAttribute class with an EditorBrowsableState. Declaration public EditorBrowsableAttribute(EditorBrowsableState state) Parameters Type Name Description EditorBrowsableState state The EditorBrowsableState to set State to. Properties | Improve this Doc View Source State Gets the browsable state of the property or method. Declaration public EditorBrowsableState State { get; } Property Value Type Description EditorBrowsableState An EditorBrowsableState that is the browsable state of the property or method. Methods | Improve this Doc View Source Equals(Object) Returns whether the value of the given object is equal to the current EditorBrowsableAttribute. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to test the value equality of. Returns Type Description Boolean true if the value of the given object is equal to that of the current; otherwise, false. Overrides Object.Equals(Object) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ComponentModel.EditorBrowsableState.html": {
    "href": "api/System.ComponentModel.EditorBrowsableState.html",
    "title": "Enum EditorBrowsableState | nanoFramework Documentation",
    "keywords": "Enum EditorBrowsableState Specifies the browsable state of a property or method from within an editor. Namespace : System.ComponentModel Assembly : mscorlib.dll Syntax public enum EditorBrowsableState Fields Name Description Advanced The property or method is a feature that only advanced users should see. An editor can either show or hide such properties. Always The property or method is always browsable from within an editor. Never The property or method is never browsable from within an editor."
  },
  "api/System.ComponentModel.html": {
    "href": "api/System.ComponentModel.html",
    "title": "Namespace System.ComponentModel | nanoFramework Documentation",
    "keywords": "Namespace System.ComponentModel Classes EditorBrowsableAttribute Specifies that a property or method is viewable in an editor. This class cannot be inherited. Enums EditorBrowsableState Specifies the browsable state of a property or method from within an editor."
  },
  "api/System.Convert.html": {
    "href": "api/System.Convert.html",
    "title": "Class Convert | nanoFramework Documentation",
    "keywords": "Class Convert Converts a base data type to another base data type. Inheritance Object Convert Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public static class Convert Methods | Improve this Doc View Source FromBase64CharArray(Char[], Int32, Int32) Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert. Declaration public static byte[] FromBase64CharArray(char[] inArray, int offset, int length) Parameters Type Name Description Char [] inArray A Unicode character array. Int32 offset A position within inArray . Int32 length The number of elements in inArray to convert. Returns Type Description Byte [] An array of 8-bit unsigned integers equivalent to length elements at position offset in inArray . FromBase64String(String) Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Declaration public static extern byte[] FromBase64String(string inString) Parameters Type Name Description String inString The string to convert. Returns Type Description Byte [] An array of 8-bit unsigned integers that is equivalent to inString Remarks s is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters \"A\" to \"Z\", lowercase characters \"a\" to \"z\", numerals \"0\" to \"9\", and the symbols \"+\" and \"/\". The white-space characters, and their Unicode names and hexadecimal code points, are tab(CHARACTER TABULATION, U+0009), newline(LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank(SPACE, U+0020). An arbitrary number of white-space characters can appear in s because all white-space characters are ignored. The valueless character, \"=\", is used for trailing padding. The end of s can consist of zero, one, or two padding characters. | Improve this Doc View Source ToBase64String(Byte[]) Converts an array of 8-bit unsigned integers to its equivalent String representation encoded with base 64 digits. Declaration public static string ToBase64String(byte[] inArray) Parameters Type Name Description Byte [] inArray An array of 8-bit unsigned integers. Returns Type Description String The String representation, in base 64, of the contents of inArray . | Improve this Doc View Source ToBase64String(Byte[], Base64FormattingOptions) Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value. Declaration public static string ToBase64String(byte[] inArray, Base64FormattingOptions options) Parameters Type Name Description Byte [] inArray An array of 8-bit unsigned integers. Base64FormattingOptions options InsertLineBreaks to insert a line break every 76 characters, or None to not insert line breaks. Returns Type Description String The string representation in base 64 of the elements in inArray . | Improve this Doc View Source ToBase64String(Byte[], Int32, Int32) Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert. Declaration public static string ToBase64String(byte[] inArray, int offset, int length) Parameters Type Name Description Byte [] inArray An array of 8-bit unsigned integers. Int32 offset An offset in inArray . Int32 length The number of elements of inArray to convert. Returns Type Description String The string representation in base 64 of length elements of inArray , starting at position offset . | Improve this Doc View Source ToBase64String(Byte[], Int32, Int32, Base64FormattingOptions) Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value. Declaration public static string ToBase64String(byte[] inArray, int offset, int length, Base64FormattingOptions options) Parameters Type Name Description Byte [] inArray An array of 8-bit unsigned integers. Int32 offset An offset in inArray . Int32 length The number of elements of inArray to convert. Base64FormattingOptions options cref=\"System.InsertLineBreaks\" to insert a line break every 76 characters, or None to not insert line breaks. Returns Type Description String The string representation in base 64 of length elements of inArray , starting at position offset . | Improve this Doc View Source ToBoolean(Byte) Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value. Declaration public static bool ToBoolean(byte value) Parameters Type Name Description Byte value The 8-bit unsigned integer to convert. Returns Type Description Boolean true if value is not zero; otherwise, false . | Improve this Doc View Source ToByte(Boolean) Converts the specified Boolean value to the equivalent 8-bit unsigned integer. Declaration public static byte ToByte(bool value) Parameters Type Name Description Boolean value The Boolean value to convert. Returns Type Description Byte The number 1 if value is true ; otherwise, 0. | Improve this Doc View Source ToByte(String, Int32) Converts the specified string representation of a number to an equivalent 8-bit unsigned integer. Declaration public static byte ToByte(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description Byte An 8-bit unsigned integer that is equivalent to value, or zero if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToChar(UInt16) Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character. Declaration [CLSCompliant(false)] public static char ToChar(ushort value) Parameters Type Name Description UInt16 value The 16-bit unsigned integer to convert. Returns Type Description Char A Unicode character that is equivalent to value. | Improve this Doc View Source ToDouble(String) Converts the specified string representation of a number to an equivalent double-precision floating-point number. Declaration public static double ToDouble(string value) Parameters Type Name Description String value A string that contains the number to convert. Returns Type Description Double A double-precision floating-point number that is equivalent to the number in value, or 0 (zero) if value is null . | Improve this Doc View Source ToInt16(String, Int32) Converts the specified string representation of a number to an equivalent 16-bit signed integer. Declaration public static short ToInt16(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description Int16 A 16-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToInt32(String, Int32) Converts the specified string representation of a number to an equivalent 32-bit signed integer. Declaration public static int ToInt32(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description Int32 A 32-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToInt64(String, Int32) Converts the specified string representation of a number to an equivalent 64-bit signed integer. Declaration public static long ToInt64(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains a number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description Int64 A 64-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToSByte(String, Int32) Converts the specified string representation of a number to an equivalent 8-bit signed integer. Declaration [CLSCompliant(false)] public static sbyte ToSByte(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description SByte An 8-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToSingle(String) Converts the specified string representation of a number to an equivalent single-precision floating-point number. Declaration public static float ToSingle(string value) Parameters Type Name Description String value A string that contains the number to convert. Returns Type Description Single A single-precision floating-point number that is equivalent to the number in value, or 0 (zero) if value is null . | Improve this Doc View Source ToUInt16(String, Int32) Converts the specified string representation of a number to an equivalent 16-bit unsigned integer. Declaration [CLSCompliant(false)] public static ushort ToUInt16(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description UInt16 A 16-bit unsigned integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToUInt32(String, Int32) Converts the specified string representation of a number to an equivalent 32-bit unsigned integer. Declaration [CLSCompliant(false)] public static uint ToUInt32(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description UInt32 A 32-bit unsigned integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values. | Improve this Doc View Source ToUInt64(String, Int32) Converts the specified string representation of a number to an equivalent 64-bit unsigned integer. Declaration [CLSCompliant(false)] public static ulong ToUInt64(string value, int fromBase = 10) Parameters Type Name Description String value A string that contains the number to convert. Int32 fromBase The base of the number in value , which must be 2, 8, 10, or 16. See remark bellow about platform support. Returns Type Description UInt64 A 64-bit signed integer that is equivalent to the number in value, or 0 (zero) if value is null . Remarks The nanoFramework implementation of this method may provide only a subset of the equivalent .NET method, which is supporting only conversions for base 10 values. In that case, any call using a fromBase with a value other than 10 will throw a NotImplementedException . Exceptions Type Condition ArgumentException fromBase is not 2, 8, 10, or 16. NotImplementedException If the platform doesn't have support to convert from non-base 10 values."
  },
  "api/System.DateTime.html": {
    "href": "api/System.DateTime.html",
    "title": "Struct DateTime | nanoFramework Documentation",
    "keywords": "Struct DateTime Represents an instant in time, typically expressed as a date and time of day. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct DateTime Constructors | Improve this Doc View Source DateTime(Int32, Int32, Int32) Initializes a new instance of the DateTime structure to the specified year, month, and day. Declaration public DateTime(int year, int month, int day) Parameters Type Name Description Int32 year The year (1601 through 3000). Int32 month The month (1 through 12). Int32 day The day (1 through the number of days in month). | Improve this Doc View Source DateTime(Int32, Int32, Int32, Int32, Int32, Int32) Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, and second. Declaration public DateTime(int year, int month, int day, int hour, int minute, int second) Parameters Type Name Description Int32 year The year (1601 through 3000). Int32 month The month (1 through 12). Int32 day The day (1 through the number of days in month). Int32 hour The hours (0 through 23). Int32 minute The minutes (0 through 59). Int32 second The seconds (0 through 59). DateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32) Initializes a new instance of the DateTime structure to the specified year, month, day, hour, minute, second, and millisecond. Declaration public extern DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond) Parameters Type Name Description Int32 year The year (1601 through 3000). Int32 month The month (1 through 12). Int32 day The day (1 through the number of days in month). Int32 hour The hours (0 through 23). Int32 minute The minutes (0 through 59). Int32 second The seconds (0 through 59). Int32 millisecond The milliseconds (0 through 999). Exceptions Type Condition ArgumentOutOfRangeException Any parameter out of the accepted ranges | Improve this Doc View Source DateTime(Int64) Initializes a new instance of the DateTime structure to a specified number of ticks. Declaration public DateTime(long ticks) Parameters Type Name Description Int64 ticks A date and time expressed in the number of 100-nanosecond intervals. Exceptions Type Condition ArgumentOutOfRangeException ticks - Ticks must be between MinValue and MaxValue . | Improve this Doc View Source DateTime(Int64, DateTimeKind) Initializes a new instance of the DateTime structure to a specified number of ticks and to Coordinated Universal Time (UTC). Declaration public DateTime(long ticks, DateTimeKind kind) Parameters Type Name Description Int64 ticks A date and time expressed in the number of 100-nanosecond intervals. DateTimeKind kind One of the enumeration values that indicates whether ticks specifies a local time, Coordinated Universal Time (UTC), or neither. Remarks nanoFramework doesn't support local time, only UTC, so it's not possible to specify Local . Fields | Improve this Doc View Source MaxValue Represents the largest possible value of DateTime . This field is read-only. Declaration public static readonly DateTime MaxValue Field Value Type Description DateTime Remarks The value of this constant is equivalent to 23:59:59.9999999, December 31, 3000. This value is specific to nanoFramework. .NET equivalent is 23:59:59.9999999 UTC, December 31, 9999 in the Gregorian calendar. | Improve this Doc View Source MinValue Represents the smallest possible value of DateTime . This field is read-only. Declaration public static readonly DateTime MinValue Field Value Type Description DateTime Remarks The value of this constant is equivalent to 00:00:00.0000000, January 1, 1601. This value is specific to nanoFramework. .NET equivalent is 00:00:00.0000000 UTC, January 1, 0001, in the Gregorian calendar. | Improve this Doc View Source UnixEpoch Represents the Unix Epoch value. This field is read-only. Declaration public static readonly DateTime UnixEpoch Field Value Type Description DateTime Remarks The value of this constant is equivalent to the DateTime corresponding to 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). This value is specific to nanoFramework. Properties | Improve this Doc View Source Date Gets the date component of this instance. Declaration public readonly DateTime Date { get; } Property Value Type Description DateTime A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00). | Improve this Doc View Source Day Gets the day of the month represented by this instance. Declaration public readonly int Day { get; } Property Value Type Description Int32 The day component, expressed as a value between 1 and 31. | Improve this Doc View Source DayOfWeek Gets the day of the week represented by this instance. Declaration public readonly DayOfWeek DayOfWeek { get; } Property Value Type Description DayOfWeek An enumerated constant that indicates the day of the week of this DateTime value. | Improve this Doc View Source DayOfYear Gets the day of the year represented by this instance. Declaration public readonly int DayOfYear { get; } Property Value Type Description Int32 The day of the year, expressed as a value between 1 and 366. | Improve this Doc View Source Hour Gets the hour component of the date represented by this instance. Declaration public readonly int Hour { get; } Property Value Type Description Int32 The hour component, expressed as a value between 0 and 23. | Improve this Doc View Source Kind Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither. Declaration public readonly DateTimeKind Kind { get; } Property Value Type Description DateTimeKind One of the enumeration values that indicates what the current time represents. Remarks Despite the default in the full .NET Framework is Local this won't never happen because nanoFramework only supports UTC time. | Improve this Doc View Source Millisecond Gets the milliseconds component of the date represented by this instance. Declaration public readonly int Millisecond { get; } Property Value Type Description Int32 The milliseconds component, expressed as a value between 0 and 999. | Improve this Doc View Source Minute Gets the minute component of the date represented by this instance. Declaration public readonly int Minute { get; } Property Value Type Description Int32 The minute component, expressed as a value between 0 and 59. | Improve this Doc View Source Month Gets the month component of the date represented by this instance. Declaration public readonly int Month { get; } Property Value Type Description Int32 The month component, expressed as a value between 1 and 12. | Improve this Doc View Source Second Gets the seconds component of the date represented by this instance. Declaration public readonly int Second { get; } Property Value Type Description Int32 The seconds component, expressed as a value between 0 and 59. | Improve this Doc View Source Ticks Gets the number of ticks that represent the date and time of this instance. Declaration public readonly long Ticks { get; } Property Value Type Description Int64 The number of ticks that represent the date and time of this instance. The value is between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks | Improve this Doc View Source TimeOfDay Gets the time of day for this instance. Declaration public readonly TimeSpan TimeOfDay { get; } Property Value Type Description TimeSpan A time interval that represents the fraction of the day that has elapsed since midnight. | Improve this Doc View Source Today Gets the current date. Declaration public static readonly DateTime Today { get; } Property Value Type Description DateTime An object that is set to today's date, with the time component set to 00:00:00. | Improve this Doc View Source UtcNow Gets a DateTime object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC). Declaration public static readonly DateTime UtcNow { get; } Property Value Type Description DateTime An object whose value is the current UTC date and time. | Improve this Doc View Source Year Gets the year component of the date represented by this instance. Declaration public readonly int Year { get; } Property Value Type Description Int32 The year, between 1 and 9999. Methods | Improve this Doc View Source Add(TimeSpan) Returns a new DateTime that adds the value of the specified TimeSpan to the value of this instance. Declaration public DateTime Add(TimeSpan val) Parameters Type Name Description TimeSpan val A positive or negative time interval. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the time interval represented by val . | Improve this Doc View Source AddDays(Double) Returns a new DateTime that adds the specified number of days to the value of this instance. Declaration public DateTime AddDays(double val) Parameters Type Name Description Double val A number of whole and fractional days. The val parameter can be negative or positive. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the number of days represented by val . | Improve this Doc View Source AddHours(Double) Returns a new DateTime that adds the specified number of hours to the value of this instance. Declaration public DateTime AddHours(double val) Parameters Type Name Description Double val A number of whole and fractional hours. The val parameter can be negative or positive. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the number of hours represented by val . | Improve this Doc View Source AddMilliseconds(Double) Returns a new DateTime that adds the specified number of milliseconds to the value of this instance. Declaration public DateTime AddMilliseconds(double val) Parameters Type Name Description Double val A number of whole and fractional milliseconds. The val parameter can be negative or positive. Note that this value is rounded to the nearest integer. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by val . | Improve this Doc View Source AddMinutes(Double) Returns a new DateTime that adds the specified number of minutes to the value of this instance. Declaration public DateTime AddMinutes(double val) Parameters Type Name Description Double val A number of whole and fractional minutes. The val parameter can be negative or positive. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by val . | Improve this Doc View Source AddSeconds(Double) Returns a new DateTime that adds the specified number of seconds to the value of this instance. Declaration public DateTime AddSeconds(double val) Parameters Type Name Description Double val A number of whole and fractional seconds. The val parameter can be negative or positive. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by val . | Improve this Doc View Source AddTicks(Int64) Returns a new DateTime that adds the specified number of ticks to the value of this instance. Declaration public DateTime AddTicks(long val) Parameters Type Name Description Int64 val A number of 100-nanosecond ticks. The val parameter can be positive or negative. Returns Type Description DateTime An object whose value is the sum of the date and time represented by this instance and the time represented by val . | Improve this Doc View Source Compare(DateTime, DateTime) Compares two instances of DateTime and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance. Declaration public static int Compare(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Int32 A signed number indicating the relative values of t1 and t2 . | Improve this Doc View Source CompareTo(Object) Compares the value of this instance to a specified object that contains a specified DateTime value, and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified DateTime value. Declaration public int CompareTo(object val) Parameters Type Name Description Object val A boxed object to compare, or null reference (Nothing in Visual Basic). Returns Type Description Int32 A signed number indicating the relative values of this instance and value. DaysInMonth(Int32, Int32) Returns the number of days in the specified month and year. Declaration public static extern int DaysInMonth(int year, int month) Parameters Type Name Description Int32 year The year. Int32 month The month (a number ranging from 1 to 12). Returns Type Description Int32 The number of days in month for the specified year. For example, if month equals 2 for February, the return value is 28 or 29 depending upon whether year is a leap year. | Improve this Doc View Source Equals(DateTime, DateTime) Returns a value indicating whether two DateTime instances have the same date and time value. Declaration public static bool Equals(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if the two values are equal; otherwise, false. | Improve this Doc View Source Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to this instance. Returns Type Description Boolean true if obj is an instance of DateTime and equals the value of this instance; otherwise, false. Overrides ValueType.Equals(Object) | Improve this Doc View Source FromUnixTimeSeconds(Int64) Converts a Unix time expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z to a DateTime value. Declaration public static DateTime FromUnixTimeSeconds(long seconds) Parameters Type Name Description Int64 seconds A Unix time, expressed as the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). For Unix times before this date, its value is negative. Returns Type Description DateTime A date and time value that represents the same moment in time as the Unix time. Remarks This method is exclusive of nanoFramework. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source Subtract(DateTime) Subtracts the specified date and time from this instance. Declaration public TimeSpan Subtract(DateTime val) Parameters Type Name Description DateTime val The date and time value to subtract. Returns Type Description TimeSpan A time interval that is equal to the date and time represented by this instance minus the date and time represented by val . | Improve this Doc View Source Subtract(TimeSpan) Subtracts the specified duration from this instance. Declaration public DateTime Subtract(TimeSpan val) Parameters Type Name Description TimeSpan val The time interval to subtract. Returns Type Description DateTime An object that is equal to the date and time represented by this instance minus the time interval represented by val . | Improve this Doc View Source ToString() Converts the value of the current DateTime object to its equivalent string representation. Declaration public override string ToString() Returns Type Description String A string representation of the value of the current DateTime object. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the value of the current DateTime object to its equivalent string representation using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A standard or custom date and time format string (see Remarks). Returns Type Description String A string representation of value of the current DateTime object as specified by format. | Improve this Doc View Source ToUnixTimeSeconds() Returns the number of seconds that have elapsed since 1970-01-01T00:00:00Z. Declaration public long ToUnixTimeSeconds() Returns Type Description Int64 The number of seconds that have elapsed since 1970-01-01T00:00:00Z. Remarks Unix time represents the number of seconds that have elapsed since 1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). It does not take leap seconds into account. This method is exclusive of nanoFramework. Operators | Improve this Doc View Source Addition(DateTime, TimeSpan) Adds a specified time interval to a specified date and time, yielding a new date and time. Declaration public static DateTime operator +(DateTime d, TimeSpan t) Parameters Type Name Description DateTime d The date and time value to add. TimeSpan t The time interval to add. Returns Type Description DateTime An object that is the sum of the values of d and t . | Improve this Doc View Source Equality(DateTime, DateTime) Determines whether two specified instances of DateTime are equal. Declaration public static bool operator ==(DateTime d1, DateTime d2) Parameters Type Name Description DateTime d1 The first object to compare. DateTime d2 The second object to compare. Returns Type Description Boolean true if d1 and d2 represent the same date and time; otherwise, false. | Improve this Doc View Source GreaterThan(DateTime, DateTime) Determines whether one specified DateTime is greater than another specified DateTime. Declaration public static bool operator>(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if t1 is greater than t2 ; otherwise, false. | Improve this Doc View Source GreaterThanOrEqual(DateTime, DateTime) Determines whether one specified DateTime is greater than or equal to another specified DateTime. Declaration public static bool operator >=(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if t1 is greater than or equal to t2 ; otherwise, false. | Improve this Doc View Source Inequality(DateTime, DateTime) Determines whether two specified instances of DateTime are not equal. Declaration public static bool operator !=(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if t1 and t2 do not represent the same date and time; otherwise, false. | Improve this Doc View Source LessThan(DateTime, DateTime) Determines whether one specified DateTime is less than another specified DateTime . Declaration public static bool operator <(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if t1 is less than t2 ; otherwise, false. | Improve this Doc View Source LessThanOrEqual(DateTime, DateTime) Determines whether one specified DateTime is less than or equal to another specified DateTime. Declaration public static bool operator <=(DateTime t1, DateTime t2) Parameters Type Name Description DateTime t1 The first object to compare. DateTime t2 The second object to compare. Returns Type Description Boolean true if t1 is less than or equal to t2 ; otherwise, false. | Improve this Doc View Source Subtraction(DateTime, DateTime) Subtracts a specified date and time from another specified date and time and returns a time interval. Declaration public static TimeSpan operator -(DateTime d1, DateTime d2) Parameters Type Name Description DateTime d1 The date and time value to subtract from (the minuend). DateTime d2 The date and time value to subtract (the subtrahend). Returns Type Description TimeSpan The time interval between d1 and d2 ; that is, d1 minus d2 . | Improve this Doc View Source Subtraction(DateTime, TimeSpan) Subtracts a specified time interval from a specified date and time and returns a new date and time. Declaration public static DateTime operator -(DateTime d, TimeSpan t) Parameters Type Name Description DateTime d The date and time value to subtract from. TimeSpan t The time interval to subtract. Returns Type Description DateTime An object whose value is the value of d minus the value of t ."
  },
  "api/System.DateTimeKind.html": {
    "href": "api/System.DateTimeKind.html",
    "title": "Enum DateTimeKind | nanoFramework Documentation",
    "keywords": "Enum DateTimeKind Specifies whether a DateTime object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC. Namespace : System Assembly : mscorlib.dll Syntax public enum DateTimeKind Remarks nanoFramework doesn't support local time, only UTC, so it's not possible to specify Local . Fields Name Description Local The time represented is local time. Utc The time represented is UTC."
  },
  "api/System.DayOfWeek.html": {
    "href": "api/System.DayOfWeek.html",
    "title": "Enum DayOfWeek | nanoFramework Documentation",
    "keywords": "Enum DayOfWeek Specifies the day of the week. Namespace : System Assembly : mscorlib.dll Syntax public enum DayOfWeek Fields Name Description Friday Indicates Friday Monday Indicates Monday Saturday Indicates Saturday Sunday Indicates Sunday Thursday Indicates Thursday Tuesday Indicates Tuesday Wednesday Indicates Wednesday"
  },
  "api/System.DBNull.html": {
    "href": "api/System.DBNull.html",
    "title": "Class DBNull | nanoFramework Documentation",
    "keywords": "Class DBNull Represents a nonexistent value. This class cannot be inherited. Inheritance Object DBNull Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public sealed class DBNull Fields | Improve this Doc View Source Value Represents the sole instance of the DBNull class. Declaration public static readonly DBNull Value Field Value Type Description DBNull Remarks DBNull is a singleton class, which means only this instance of this class can exist. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Delegate.html": {
    "href": "api/System.Delegate.html",
    "title": "Class Delegate | nanoFramework Documentation",
    "keywords": "Class Delegate Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class. Inheritance Object Delegate MulticastDelegate Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class Delegate Properties Method Gets the method represented by the delegate. Declaration public MethodInfo Method { get; } Property Value Type Description MethodInfo A MethodInfo describing the method represented by the delegate. Remarks Available only in mscorlib build with support for System.Reflection. Target Gets the class instance on which the current delegate invokes the instance method. Declaration public object Target { get; } Property Value Type Description Object The object on which the current delegate invokes the instance method, if the delegate represents an instance method; null reference (Nothing in Visual Basic) if the delegate represents a static method. Methods Combine(Delegate, Delegate) Concatenates the invocation lists of two delegates. Declaration public static extern Delegate Combine(Delegate a, Delegate b) Parameters Type Name Description Delegate a The delegate whose invocation list comes first. Delegate b The delegate whose invocation list comes last. Returns Type Description Delegate A new delegate with an invocation list that concatenates the invocation lists of a and b in that order. Returns a if b is null reference (Nothing in Visual Basic), returns b if a is a null reference, and returns a null reference if both a and b are null references. Equals(Object) Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list. Declaration public extern override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current delegate. Returns Type Description Boolean true if obj and the current delegate have the same targets, methods, and invocation list; otherwise, false. Overrides Object.Equals(Object) GetInvocationList() Returns the invocation list of the delegate. Declaration public extern virtual Delegate[] GetInvocationList() Returns Type Description Delegate [] An array of delegates representing the invocation list of the current delegate. Remove(Delegate, Delegate) Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate. Declaration public static extern Delegate Remove(Delegate source, Delegate value) Parameters Type Name Description Delegate source The delegate from which to remove the invocation list of value. Delegate value The delegate that supplies the invocation list to remove from the invocation list of source. Returns Type Description Delegate A new delegate with an invocation list formed by taking the invocation list of source and removing the last occurrence of the invocation list of value, if the invocation list of value is found within the invocation list of source. Returns source if value is null reference (Nothing in Visual Basic) or if the invocation list of value is not found within the invocation list of source. Returns a null reference if the invocation list of value is equal to the invocation list of source or if source is a null reference. Operators Equality(Delegate, Delegate) Determines whether the specified delegates are equal. Declaration public static extern bool operator ==(Delegate d1, Delegate d2) Parameters Type Name Description Delegate d1 The first delegate to compare. Delegate d2 The second delegate to compare. Returns Type Description Boolean true if d1 is equal to d2; otherwise, false. Inequality(Delegate, Delegate) Determines whether the specified delegates are not equal. Declaration public static extern bool operator !=(Delegate d1, Delegate d2) Parameters Type Name Description Delegate d1 The first delegate to compare. Delegate d2 The second delegate to compare. Returns Type Description Boolean true if d1 is not equal to d2; otherwise, false. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Dac.DacChannel.html": {
    "href": "api/System.Device.Dac.DacChannel.html",
    "title": "Class DacChannel | nanoFramework Documentation",
    "keywords": "Class DacChannel Represents a single DAC channel. Inheritance Object DacChannel Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Dac Assembly : System.Device.Dac.dll Syntax public sealed class DacChannel : IDacChannel, IDisposable Properties | Improve this Doc View Source Controller Gets the DAC controller for this channel. Declaration public DacController Controller { get; } Property Value Type Description DacController The DAC controller. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source WriteValue(UInt16) Writes the analogue representation of the digital value to the DAC. Declaration public void WriteValue(ushort value) Parameters Type Name Description UInt16 value Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Dac.DacChannelAlreadyInUseException.html": {
    "href": "api/System.Device.Dac.DacChannelAlreadyInUseException.html",
    "title": "Class DacChannelAlreadyInUseException | nanoFramework Documentation",
    "keywords": "Class DacChannelAlreadyInUseException Exception thrown when a check in DacChannel constructor finds that the channel is already in use. Inheritance Object Exception DacChannelAlreadyInUseException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Dac Assembly : System.Device.Dac.dll Syntax [Serializable] public class DacChannelAlreadyInUseException : Exception Methods | Improve this Doc View Source ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Exception.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Dac.DacController.html": {
    "href": "api/System.Device.Dac.DacController.html",
    "title": "Class DacController | nanoFramework Documentation",
    "keywords": "Class DacController Represents an DAC controller on the system Inheritance Object DacController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Dac Assembly : System.Device.Dac.dll Syntax public sealed class DacController : IDacController Properties | Improve this Doc View Source ChannelCount The number of channels available on the ADC controller. Declaration public int ChannelCount { get; } Property Value Type Description Int32 Number of channels. | Improve this Doc View Source ResolutionInBits Gets the resolution of the controller as number of bits it has. For example, if we have a 10-bit DAC, that means it can detect 1024 (2^10) discrete levels. Declaration public int ResolutionInBits { get; } Property Value Type Description Int32 The number of bits the DAC controller has. Methods | Improve this Doc View Source GetDefault() Gets the default DAC controller on the system. Declaration public static DacController GetDefault() Returns Type Description DacController The default DAC controller on the system, or null if the system has no DAC controller. GetDeviceSelector() Retrieves an string of all the DAC controllers on the system. Declaration public static extern string GetDeviceSelector() Returns Type Description String | Improve this Doc View Source OpenChannel(Int32) Opens a connection to the specified DAC channel. Declaration public DacChannel OpenChannel(int channelNumber) Parameters Type Name Description Int32 channelNumber The channel to connect to. Returns Type Description DacChannel The DAC channel. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Dac.html": {
    "href": "api/System.Device.Dac.html",
    "title": "Namespace System.Device.Dac | nanoFramework Documentation",
    "keywords": "Namespace System.Device.Dac Classes DacChannel Represents a single DAC channel. DacChannelAlreadyInUseException Exception thrown when a check in DacChannel constructor finds that the channel is already in use. DacController Represents an DAC controller on the system"
  },
  "api/System.Device.Gpio.GpioController.html": {
    "href": "api/System.Device.Gpio.GpioController.html",
    "title": "Class GpioController | nanoFramework Documentation",
    "keywords": "Class GpioController Represents a general-purpose I/O (GPIO) controller. Inheritance Object GpioController Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax public sealed class GpioController : IDisposable Constructors | Improve this Doc View Source GpioController() Initializes a new instance of the System.Device.Gpio.GpioController class that will use the logical pin numbering scheme as default. Declaration public GpioController() | Improve this Doc View Source GpioController(PinNumberingScheme) Initializes a new instance of the System.Device.Gpio.GpioController class that will use the specified numbering scheme. The controller will default to use the driver that best applies given the platform the program is executing on. Declaration public GpioController(PinNumberingScheme numberingScheme) Parameters Type Name Description PinNumberingScheme numberingScheme The numbering scheme used to represent pins provided by the controller. Properties | Improve this Doc View Source NumberingScheme The numbering scheme used to represent pins provided by the controller. Declaration public PinNumberingScheme NumberingScheme { get; } Property Value Type Description PinNumberingScheme PinCount The number of pins provided by the controller. Declaration public int PinCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ClosePin(Int32) Closes an open pin. Declaration public void ClosePin(int pinNumber) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme. Exceptions Type Condition InvalidOperationException This exception will be thrown on an attempt to close a pin that hasn't been opened. | Improve this Doc View Source Dispose() Dispose the controller Declaration public void Dispose() | Improve this Doc View Source GetPinMode(Int32) Gets the mode of a pin. Declaration public PinMode GetPinMode(int pinNumber) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme. Returns Type Description PinMode The mode of the pin. IsPinModeSupported(Int32, PinMode) Checks if a pin supports a specific mode. Declaration public extern bool IsPinModeSupported(int pinNumber, PinMode mode) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme. PinMode mode The mode to check. Returns Type Description Boolean The status if the pin supports the mode. IsPinOpen(Int32) Checks if a specific pin is open. Declaration public extern bool IsPinOpen(int pinNumber) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme. Returns Type Description Boolean The status if the pin is open or closed. | Improve this Doc View Source OpenPin(Int32) Opens a pin in order for it to be ready to use. Declaration public GpioPin OpenPin(int pinNumber) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme. Returns Type Description GpioPin The opened GPIO pin. Exceptions Type Condition InvalidOperationException This exception will be thrown if the pin is already open. | Improve this Doc View Source OpenPin(Int32, PinMode) Opens a pin and sets it to a specific mode. Declaration public GpioPin OpenPin(int pinNumber, PinMode mode) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme. PinMode mode The mode to be set. Returns Type Description GpioPin The opened GPIO pin. | Improve this Doc View Source Read(Int32) Reads the current value of a pin. Declaration public PinValue Read(int pinNumber) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme. Returns Type Description PinValue The value of the pin. | Improve this Doc View Source RegisterCallbackForPinValueChangedEvent(Int32, PinEventTypes, PinChangeEventHandler) Adds a callback that will be invoked when pinNumber has an event of type eventType. Declaration public void RegisterCallbackForPinValueChangedEvent(int pinNumber, PinEventTypes eventTypes, PinChangeEventHandler callback) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme. PinEventTypes eventTypes The event types to wait for. PinChangeEventHandler callback The callback method that will be invoked. Exceptions Type Condition InvalidOperationException This exception will be thrown on an attempt to register a callback to a pin that hasn't been opened. SetPinMode(Int32, PinMode) Sets the mode to a pin. Declaration public extern void SetPinMode(int pinNumber, PinMode mode) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme PinMode mode The mode to be set. | Improve this Doc View Source UnregisterCallbackForPinValueChangedEvent(Int32, PinChangeEventHandler) Removes a callback that was being invoked for pin at pinNumber. Declaration public void UnregisterCallbackForPinValueChangedEvent(int pinNumber, PinChangeEventHandler callback) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme. PinChangeEventHandler callback The callback method that will be invoked. | Improve this Doc View Source Write(Int32, PinValue) Writes a value to a pin. Declaration public void Write(int pinNumber, PinValue value) Parameters Type Name Description Int32 pinNumber The pin number in the controller's numbering scheme. PinValue value The value to be written to the pin. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Gpio.GpioPin.html": {
    "href": "api/System.Device.Gpio.GpioPin.html",
    "title": "Class GpioPin | nanoFramework Documentation",
    "keywords": "Class GpioPin Represents a general-purpose I/O (GPIO) pin. Inheritance Object GpioPin Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax public sealed class GpioPin : IDisposable Properties | Improve this Doc View Source DebounceTimeout Gets or sets the debounce timeout for the general-purpose I/O (GPIO) pin, which is an interval during which changes to the value of the pin are filtered out and do not generate ValueChanged events. Declaration public TimeSpan DebounceTimeout { get; set; } Property Value Type Description TimeSpan The debounce timeout for the GPIO pin, which is an interval during which changes to the value of the pin are filtered out and do not generate ValueChanged events. If the length of this interval is 0, all changes to the value of the pin generate ValueChanged events. | Improve this Doc View Source PinNumber Gets the pin number of the general-purpose I/O (GPIO) pin. Declaration public int PinNumber { get; } Property Value Type Description Int32 The pin number of the GPIO pin. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetPinMode() Gets the current pin mode for the general-purpose I/O (GPIO) pin. The pin mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Declaration public PinMode GetPinMode() Returns Type Description PinMode An enumeration value that indicates the current pin mode for the GPIO pin. The pin mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. | Improve this Doc View Source IsPinModeSupported(PinMode) Gets whether the general-purpose I/O (GPIO) pin supports the specified pin mode. Declaration public bool IsPinModeSupported(PinMode pinMode) Parameters Type Name Description PinMode pinMode The pin mode that you want to check for support. Returns Type Description Boolean true if the GPIO pin supports the pin mode that pinMode specifies; otherwise false. If you specify a pin mode for which this method returns false when you call SetPinMode(PinMode) , SetPinMode(PinMode) generates an exception. Read() Reads the current value of the general-purpose I/O (GPIO) pin. Declaration public extern PinValue Read() Returns Type Description PinValue The current value of the GPIO pin. If the pin is configured as an output, this value is the last value written to the pin. | Improve this Doc View Source SetPinMode(PinMode) Sets the pin mode of the general-purpose I/O (GPIO) pin. The pin mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Declaration public void SetPinMode(PinMode value) Parameters Type Name Description PinMode value An enumeration value that specifies pin mode to use for the GPIO pin. The pin mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Exceptions Type Condition ArgumentException The GPIO pin does not support the specified pin mode. Toggle() Toggles the output of the general purpose I/O (GPIO) pin if the pin is configured as an output. Declaration public extern void Toggle() | Improve this Doc View Source Write(PinValue) Drives the specified value onto the general purpose I/O (GPIO) pin according to the current pin mode for the pin if the pin is configured as an output, or updates the latched output value for the pin if the pin is configured as an input. Declaration public void Write(PinValue value) Parameters Type Name Description PinValue value The enumeration value to write to the GPIO pin. If the GPIO pin is configured as an output, the method drives the specified value onto the pin according to the current pin mode for the pin. If the GPIO pin is configured as an input, the method updates the latched output value for the pin. The latched output value is driven onto the pin when the configuration for the pin changes to output. Exceptions Type Condition InvalidOperationException This exception will be thrown on an attempt to write to a pin that hasn't been opened or is not configured as output. Events | Improve this Doc View Source ValueChanged Occurs when the value of the general-purpose I/O (GPIO) pin changes, either because of an external stimulus when the pin is configured as an input, or when a value is written to the pin when the pin in configured as an output. Declaration public event PinValueChangedEventHandler ValueChanged Event Type Type Description PinValueChangedEventHandler Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Gpio.html": {
    "href": "api/System.Device.Gpio.html",
    "title": "Namespace System.Device.Gpio | nanoFramework Documentation",
    "keywords": "Namespace System.Device.Gpio Classes GpioController Represents a general-purpose I/O (GPIO) controller. GpioPin Represents a general-purpose I/O (GPIO) pin. PinValueChangedEventArgs Arguments passed in when an event is triggered by the GPIO. Structs PinValue Represents a value for a pin. PinValuePair Simple wrapper for a pin/value pair. WaitForEventResult Resulting object after waiting for an event to occur. Enums PinEventTypes Event types that can be triggered by the GPIO. Also used to report the received event types back. PinMode Pin modes supported by the GPIO controllers and drivers. PinNumberingScheme Different numbering schemes supported by GPIO controllers and drivers. Delegates PinChangeEventHandler Delegate that defines the structure for callbacks when a pin value changed event occurs. PinValueChangedEventHandler"
  },
  "api/System.Device.Gpio.PinChangeEventHandler.html": {
    "href": "api/System.Device.Gpio.PinChangeEventHandler.html",
    "title": "Delegate PinChangeEventHandler | nanoFramework Documentation",
    "keywords": "Delegate PinChangeEventHandler Delegate that defines the structure for callbacks when a pin value changed event occurs. Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax public delegate void PinChangeEventHandler(object sender, PinValueChangedEventArgs pinValueChangedEventArgs); Parameters Type Name Description Object sender The sender of the event. PinValueChangedEventArgs pinValueChangedEventArgs The pin value changed arguments from the event. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Gpio.PinEventTypes.html": {
    "href": "api/System.Device.Gpio.PinEventTypes.html",
    "title": "Enum PinEventTypes | nanoFramework Documentation",
    "keywords": "Enum PinEventTypes Event types that can be triggered by the GPIO. Also used to report the received event types back. Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax [Flags] public enum PinEventTypes Fields Name Description Falling Triggered when a pin value goes from high to low. None None. Rising Triggered when pin value goes from low to high. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Device.Gpio.PinMode.html": {
    "href": "api/System.Device.Gpio.PinMode.html",
    "title": "Enum PinMode | nanoFramework Documentation",
    "keywords": "Enum PinMode Pin modes supported by the GPIO controllers and drivers. Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax public enum PinMode Fields Name Description Input Configures the GPIO pin in floating mode, with high impedance. InputPullDown Configures the GPIO pin as high impedance with a pull-down resistor to ground. InputPullUp Configures the GPIO pin as high impedance with a pull-up resistor to the voltage charge connection (VCC). Output Configures the GPIO pin in strong drive mode, with low impedance. OutputOpenDrain Configures the GPIO in open drain mode. OutputOpenDrainPullUp Configures the GPIO pin in open drain mode with resistive pull-up mode. OutputOpenSource Configures the GPIO pin in open collector mode. OutputOpenSourcePullDown Configures the GPIO pin in open collector mode with resistive pull-down mode. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Device.Gpio.PinNumberingScheme.html": {
    "href": "api/System.Device.Gpio.PinNumberingScheme.html",
    "title": "Enum PinNumberingScheme | nanoFramework Documentation",
    "keywords": "Enum PinNumberingScheme Different numbering schemes supported by GPIO controllers and drivers. Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax public enum PinNumberingScheme Fields Name Description Board The physical pin numbering that is usually accessible by the board headers. Logical The logical representation of the GPIOs. Refer to the microcontroller's datasheet to find this information. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Device.Gpio.PinValue.html": {
    "href": "api/System.Device.Gpio.PinValue.html",
    "title": "Struct PinValue | nanoFramework Documentation",
    "keywords": "Struct PinValue Represents a value for a pin. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax public readonly struct PinValue Properties | Improve this Doc View Source High The value of the pin is high. Declaration public static readonly PinValue High { get; } Property Value Type Description PinValue | Improve this Doc View Source Low The value of the pin is low. Declaration public static readonly PinValue Low { get; } Property Value Type Description PinValue Methods | Improve this Doc View Source Equals(PinValue) Returns true if the other instance represents the same PinValue than this. Declaration public readonly bool Equals(PinValue other) Parameters Type Name Description PinValue other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override readonly bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current instance. Returns Type Description Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Serves as the default hash function. Declaration public override readonly int GetHashCode() Returns Type Description Int32 A hash code for the current object. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Returns \"Low\" for Low and \"High\" for High Declaration public override readonly string ToString() Returns Type Description String Overrides Object.ToString() Operators | Improve this Doc View Source Equality(PinValue, PinValue) Equality operator Declaration public static bool operator ==(PinValue a, PinValue b) Parameters Type Name Description PinValue a PinValue b Returns Type Description Boolean | Improve this Doc View Source Explicit(PinValue to Boolean) Conversion to byte. Returns true on High , false on Low Declaration public static explicit operator bool (PinValue value) Parameters Type Name Description PinValue value PinValue to convert Returns Type Description Boolean | Improve this Doc View Source Explicit(PinValue to Byte) Conversion to byte. Returns 1 on High , 0 on Low Declaration public static explicit operator byte (PinValue value) Parameters Type Name Description PinValue value PinValue to convert Returns Type Description Byte | Improve this Doc View Source Explicit(PinValue to Int32) Conversion to int. Returns 1 on High , 0 on Low Declaration public static explicit operator int (PinValue value) Parameters Type Name Description PinValue value PinValue to convert Returns Type Description Int32 | Improve this Doc View Source Implicit(Boolean to PinValue) Implicit conversion from bool. false means Low , true means High Declaration public static implicit operator PinValue(bool value) Parameters Type Name Description Boolean value Value to set Returns Type Description PinValue | Improve this Doc View Source Implicit(Int32 to PinValue) Implicit conversion from int. 0 means Low , everything else means High . Declaration public static implicit operator PinValue(int value) Parameters Type Name Description Int32 value Value to set Returns Type Description PinValue | Improve this Doc View Source Inequality(PinValue, PinValue) Inequality operator Declaration public static bool operator !=(PinValue a, PinValue b) Parameters Type Name Description PinValue a PinValue b Returns Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Gpio.PinValueChangedEventArgs.html": {
    "href": "api/System.Device.Gpio.PinValueChangedEventArgs.html",
    "title": "Class PinValueChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class PinValueChangedEventArgs Arguments passed in when an event is triggered by the GPIO. Inheritance Object BaseEvent PinValueChangedEventArgs Inherited Members BaseEvent.Source BaseEvent.Message Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax public class PinValueChangedEventArgs : BaseEvent Constructors | Improve this Doc View Source PinValueChangedEventArgs(PinEventTypes, Int32) Initializes a new instance of the PinValueChangedEventArgs class. Declaration public PinValueChangedEventArgs(PinEventTypes changeType, int pinNumber) Parameters Type Name Description PinEventTypes changeType The change type that triggered the event. Int32 pinNumber The pin number that triggered the event. Properties | Improve this Doc View Source ChangeType The change type that triggered the event. Declaration public PinEventTypes ChangeType { get; } Property Value Type Description PinEventTypes | Improve this Doc View Source PinNumber The pin number that triggered the event. Declaration public int PinNumber { get; } Property Value Type Description Int32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Gpio.PinValueChangedEventHandler.html": {
    "href": "api/System.Device.Gpio.PinValueChangedEventHandler.html",
    "title": "Delegate PinValueChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate PinValueChangedEventHandler Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax public delegate void PinValueChangedEventHandler(object sender, PinValueChangedEventArgs e); Parameters Type Name Description Object sender PinValueChangedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Gpio.PinValuePair.html": {
    "href": "api/System.Device.Gpio.PinValuePair.html",
    "title": "Struct PinValuePair | nanoFramework Documentation",
    "keywords": "Struct PinValuePair Simple wrapper for a pin/value pair. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax public readonly struct PinValuePair Constructors | Improve this Doc View Source PinValuePair(Int32, PinValue) Initializes a new instance of the PinValuePair struct. Declaration public PinValuePair(int pinNumber, PinValue pinValue) Parameters Type Name Description Int32 pinNumber The pin number. PinValue pinValue The pin value. Properties | Improve this Doc View Source PinNumber The pin number. Declaration public readonly int PinNumber { get; } Property Value Type Description Int32 | Improve this Doc View Source PinValue The pin value. Declaration public readonly PinValue PinValue { get; } Property Value Type Description PinValue Methods | Improve this Doc View Source Deconstruct(out Int32, out PinValue) Deconstructor for convenience. Allows using as a \"return Tuple\". Declaration public readonly void Deconstruct(out int pinNumber, out PinValue pinValue) Parameters Type Name Description Int32 pinNumber PinValue pinValue Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Gpio.WaitForEventResult.html": {
    "href": "api/System.Device.Gpio.WaitForEventResult.html",
    "title": "Struct WaitForEventResult | nanoFramework Documentation",
    "keywords": "Struct WaitForEventResult Resulting object after waiting for an event to occur. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System.Device.Gpio Assembly : System.Device.Gpio.dll Syntax public struct WaitForEventResult Fields | Improve this Doc View Source EventTypes The event types that was detected. This is especially useful when listing to both rising and falling edges, where it will indicate which kind of edge was seen. Declaration public PinEventTypes EventTypes Field Value Type Description PinEventTypes | Improve this Doc View Source TimedOut True if waiting for the event timed out. False if an event was triggered before the timeout expired. Declaration public bool TimedOut Field Value Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.I2c.html": {
    "href": "api/System.Device.I2c.html",
    "title": "Namespace System.Device.I2c | nanoFramework Documentation",
    "keywords": "Namespace System.Device.I2c Classes I2cConnectionSettings The connection settings of a device on an I2C bus. I2cDevice The communications channel to a device on an I2C bus. Structs I2cTransferResult Provides information about whether the data transfers that the Read(SpanByte) , Write(SpanByte) , or WriteRead(SpanByte, SpanByte) method performed succeeded, and the actual number of bytes the method transferred. Enums I2cBusSpeed Describes the bus speeds that are available for connecting to an inter-integrated circuit (I2C) device. The bus speed is the frequency at which to clock the I2C bus when accessing the device. I2cTransferStatus Describes whether the data transfers that the Read(SpanByte) , Write(SpanByte) , or WriteRead(SpanByte, SpanByte) methods performed succeeded, or provides the reason that the transfers did not succeed."
  },
  "api/System.Device.I2c.I2cBusSpeed.html": {
    "href": "api/System.Device.I2c.I2cBusSpeed.html",
    "title": "Enum I2cBusSpeed | nanoFramework Documentation",
    "keywords": "Enum I2cBusSpeed Describes the bus speeds that are available for connecting to an inter-integrated circuit (I2C) device. The bus speed is the frequency at which to clock the I2C bus when accessing the device. Namespace : System.Device.I2c Assembly : System.Device.I2c.dll Syntax public enum I2cBusSpeed Fields Name Description FastMode A fast speed of 400 kHz. StandardMode The standard speed of 100 kilohertz (kHz). This speed is the default. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Device.I2c.I2cConnectionSettings.html": {
    "href": "api/System.Device.I2c.I2cConnectionSettings.html",
    "title": "Class I2cConnectionSettings | nanoFramework Documentation",
    "keywords": "Class I2cConnectionSettings The connection settings of a device on an I2C bus. Inheritance Object I2cConnectionSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.I2c Assembly : System.Device.I2c.dll Syntax public sealed class I2cConnectionSettings Constructors | Improve this Doc View Source I2cConnectionSettings(Int32, Int32) Initializes a new instance of the I2cConnectionSettings class. Declaration public I2cConnectionSettings(int busId, int deviceAddress) Parameters Type Name Description Int32 busId The bus ID the I2C device is connected to. Int32 deviceAddress The bus address of the I2C device. | Improve this Doc View Source I2cConnectionSettings(Int32, Int32, I2cBusSpeed) Initializes a new instance of the I2cConnectionSettings class. Declaration public I2cConnectionSettings(int busId, int deviceAddress, I2cBusSpeed busSpeed) Parameters Type Name Description Int32 busId The bus ID the I2C device is connected to. Int32 deviceAddress The bus address of the I2C device. I2cBusSpeed busSpeed The bus speed of the I2C device. Properties | Improve this Doc View Source BusId The bus ID the I2C device is connected to. Declaration public int BusId { get; } Property Value Type Description Int32 | Improve this Doc View Source BusSpeed The bus speed of the I2C device Declaration public I2cBusSpeed BusSpeed { get; } Property Value Type Description I2cBusSpeed | Improve this Doc View Source DeviceAddress The bus address of the I2C device. Declaration public int DeviceAddress { get; } Property Value Type Description Int32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.I2c.I2cDevice.html": {
    "href": "api/System.Device.I2c.I2cDevice.html",
    "title": "Class I2cDevice | nanoFramework Documentation",
    "keywords": "Class I2cDevice The communications channel to a device on an I2C bus. Inheritance Object I2cDevice Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.I2c Assembly : System.Device.I2c.dll Syntax public class I2cDevice : IDisposable Constructors | Improve this Doc View Source I2cDevice(I2cConnectionSettings) Create an I2C Device Declaration public I2cDevice(I2cConnectionSettings settings) Parameters Type Name Description I2cConnectionSettings settings Connection settings Properties | Improve this Doc View Source ConnectionSettings The connection settings of a device on an I2C bus. The connection settings are immutable after the device is created so the object returned will be a clone of the settings object. Declaration public I2cConnectionSettings ConnectionSettings { get; } Property Value Type Description I2cConnectionSettings Methods | Improve this Doc View Source Create(I2cConnectionSettings) Creates a communications channel to a device on an I2C bus running on the current platform Declaration public static I2cDevice Create(I2cConnectionSettings settings) Parameters Type Name Description I2cConnectionSettings settings The connection settings of a device on an I2C bus. Returns Type Description I2cDevice A communications channel to a device on an I2C bus | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Read(SpanByte) Reads data from the I2C device. Declaration public I2cTransferResult Read(SpanByte buffer) Parameters Type Name Description SpanByte buffer The buffer to read the data from the I2C device. The length of the buffer determines how much data to read from the I2C device. Returns Type Description I2cTransferResult | Improve this Doc View Source ReadByte() Reads a byte from the I2C device. Declaration public byte ReadByte() Returns Type Description Byte A byte read from the I2C device. | Improve this Doc View Source Write(SpanByte) Writes data to the I2C device. Declaration public I2cTransferResult Write(SpanByte buffer) Parameters Type Name Description SpanByte buffer The buffer that contains the data to be written to the I2C device. The data should not include the I2C device address. Returns Type Description I2cTransferResult | Improve this Doc View Source WriteByte(Byte) Writes a byte to the I2C device. Declaration public I2cTransferResult WriteByte(byte value) Parameters Type Name Description Byte value The byte to be written to the I2C device. Returns Type Description I2cTransferResult | Improve this Doc View Source WriteRead(SpanByte, SpanByte) Performs an atomic operation to write data to and then read data from the I2C bus on which the device is connected, and sends a restart condition between the write and read operations. Declaration public I2cTransferResult WriteRead(SpanByte writeBuffer, SpanByte readBuffer) Parameters Type Name Description SpanByte writeBuffer The buffer that contains the data to be written to the I2C device. The data should not include the I2C device address. SpanByte readBuffer The buffer to read the data from the I2C device. The length of the buffer determines how much data to read from the I2C device. Returns Type Description I2cTransferResult Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.I2c.I2cTransferResult.html": {
    "href": "api/System.Device.I2c.I2cTransferResult.html",
    "title": "Struct I2cTransferResult | nanoFramework Documentation",
    "keywords": "Struct I2cTransferResult Provides information about whether the data transfers that the Read(SpanByte) , Write(SpanByte) , or WriteRead(SpanByte, SpanByte) method performed succeeded, and the actual number of bytes the method transferred. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System.Device.I2c Assembly : System.Device.I2c.dll Syntax public struct I2cTransferResult Properties | Improve this Doc View Source BytesTransferred The actual number of bytes that the operation actually transferred. The following table describes what this value represents for each method. Declaration public readonly uint BytesTransferred { get; } Property Value Type Description UInt32 | Improve this Doc View Source Status An enumeration value that indicates if the read or write operation transferred the full number of bytes that the method requested, or the reason that the full transfer did not succeed. For WriteReadPartial, the value indicates whether the data for both the write and the read operations was entirely transferred. Declaration public readonly I2cTransferStatus Status { get; } Property Value Type Description I2cTransferStatus Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.I2c.I2cTransferStatus.html": {
    "href": "api/System.Device.I2c.I2cTransferStatus.html",
    "title": "Enum I2cTransferStatus | nanoFramework Documentation",
    "keywords": "Enum I2cTransferStatus Describes whether the data transfers that the Read(SpanByte) , Write(SpanByte) , or WriteRead(SpanByte, SpanByte) methods performed succeeded, or provides the reason that the transfers did not succeed. Namespace : System.Device.I2c Assembly : System.Device.I2c.dll Syntax public enum I2cTransferStatus Fields Name Description ClockStretchTimeout The transfer failed due to the clock being stretched for too long. Ensure the clock line is not being held low. FullTransfer The data was entirely transferred. For WriteRead, the data for both the write and the read operations was entirely transferred. For this status code, the value of the BytesTransferred member that the method returns is the same as the size of the buffer you specified when you called the method, or is equal to the sum of the sizes of two buffers that you specified for WriteRead. PartialTransfer The I2C device negatively acknowledged the data transfer before all of the data was transferred. For this status code, the value of the BytesTransferred member that the method returns is the number of bytes actually transferred. For WriteRead(SpanByte, SpanByte) , the value is the sum of the number of bytes that the operation wrote and the number of bytes that the operation read. SlaveAddressNotAcknowledged The bus address was not acknowledged. For this status code, the value of the BytesTransferred member that the method returns of the method is 0. UnknownError The transfer failed for an unknown reason. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Device.Spi.DataFlow.html": {
    "href": "api/System.Device.Spi.DataFlow.html",
    "title": "Enum DataFlow | nanoFramework Documentation",
    "keywords": "Enum DataFlow Specifies order in which bits are transferred first on the SPI bus. Namespace : System.Device.Spi Assembly : System.Device.Spi.dll Syntax public enum DataFlow Fields Name Description LsbFirst Least significant bit will be sent first. MsbFirst Most significant bit will be sent first (most of the devices use this value). Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Device.Spi.html": {
    "href": "api/System.Device.Spi.html",
    "title": "Namespace System.Device.Spi | nanoFramework Documentation",
    "keywords": "Namespace System.Device.Spi Classes SpiBusInfo Represents the info about a SPI bus. SpiConnectionSettings The connection settings of a device on a SPI bus. SpiDevice The communications channel to a device on a SPI bus. SpiDeviceAlreadyInUseException Exception thrown when a check in driver's constructor finds a device that already exists with the same settings (SPI bus AND chip select line) Enums DataFlow Specifies order in which bits are transferred first on the SPI bus. SpiMode Defines how data is synchronized between devices on a SPI bus. Clock Polarity (CPOL) determines if clock signal is low or high when in idle state. Clock Phase (CPHA) determines when data is sampled relative to the clock signal. SpiSharingMode Defines the sharing mode for the SPI bus."
  },
  "api/System.Device.Spi.SpiBusInfo.html": {
    "href": "api/System.Device.Spi.SpiBusInfo.html",
    "title": "Class SpiBusInfo | nanoFramework Documentation",
    "keywords": "Class SpiBusInfo Represents the info about a SPI bus. Inheritance Object SpiBusInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Spi Assembly : System.Device.Spi.dll Syntax public sealed class SpiBusInfo Properties | Improve this Doc View Source ChipSelectLineCount Gets the number of chip select lines available on the bus. Declaration public int ChipSelectLineCount { get; } Property Value Type Description Int32 Number of chip select lines. | Improve this Doc View Source MaxClockFrequency Maximum clock cycle frequency of the bus. Declaration public int MaxClockFrequency { get; } Property Value Type Description Int32 The clock cycle in Hz. | Improve this Doc View Source MinClockFrequency Minimum clock cycle frequency of the bus. Declaration public int MinClockFrequency { get; } Property Value Type Description Int32 The clock cycle in Hz. | Improve this Doc View Source SupportedDataBitLengths Gets the bit lengths that can be used on the bus for transmitting data. Declaration public int[] SupportedDataBitLengths { get; } Property Value Type Description Int32 [] The supported data lengths. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Spi.SpiConnectionSettings.html": {
    "href": "api/System.Device.Spi.SpiConnectionSettings.html",
    "title": "Class SpiConnectionSettings | nanoFramework Documentation",
    "keywords": "Class SpiConnectionSettings The connection settings of a device on a SPI bus. Inheritance Object SpiConnectionSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Spi Assembly : System.Device.Spi.dll Syntax public sealed class SpiConnectionSettings Constructors | Improve this Doc View Source SpiConnectionSettings(Int32, Int32) Initializes a new instance of the SpiConnectionSettings class. Declaration public SpiConnectionSettings(int busId, int chipSelectLine = -1) Parameters Type Name Description Int32 busId The bus ID the device is connected to. Int32 chipSelectLine The chip select line used on the bus. Optional, -1 if not used Properties | Improve this Doc View Source BusId The bus ID the device is connected to. Declaration public int BusId { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ChipSelectLine The chip select line used on the bus. Declaration public int ChipSelectLine { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ChipSelectLineActiveState Specifies which value on chip select pin means \"active\". Declaration public PinValue ChipSelectLineActiveState { get; set; } Property Value Type Description PinValue | Improve this Doc View Source ClockFrequency The frequency in which the data will be transferred. Declaration public int ClockFrequency { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DataBitLength The length of the data to be transfered. Declaration public int DataBitLength { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DataFlow Specifies order in which bits are transferred first on the SPI bus. Declaration public DataFlow DataFlow { get; set; } Property Value Type Description DataFlow | Improve this Doc View Source Mode The SPI mode being used. Declaration public SpiMode Mode { get; set; } Property Value Type Description SpiMode | Improve this Doc View Source SharingMode Gets or sets the sharing mode for the SPI connection. Declaration public SpiSharingMode SharingMode { get; set; } Property Value Type Description SpiSharingMode Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Spi.SpiDevice.html": {
    "href": "api/System.Device.Spi.SpiDevice.html",
    "title": "Class SpiDevice | nanoFramework Documentation",
    "keywords": "Class SpiDevice The communications channel to a device on a SPI bus. Inheritance Object SpiDevice Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Spi Assembly : System.Device.Spi.dll Syntax public class SpiDevice : IDisposable Constructors | Improve this Doc View Source SpiDevice(SpiConnectionSettings) Creates a communications channel to a device on a SPI bus running on the current hardware. Declaration public SpiDevice(SpiConnectionSettings settings) Parameters Type Name Description SpiConnectionSettings settings The connection settings of a device on a SPI bus. Properties | Improve this Doc View Source ConnectionSettings The connection settings of a device on a SPI bus. The connection settings are immutable after the device is created so the object returned will be a clone of the settings object. Declaration public SpiConnectionSettings ConnectionSettings { get; } Property Value Type Description SpiConnectionSettings Methods | Improve this Doc View Source Create(SpiConnectionSettings) Creates a communications channel to a device on a SPI bus running on the current hardware. Declaration public static SpiDevice Create(SpiConnectionSettings settings) Parameters Type Name Description SpiConnectionSettings settings The connection settings of a device on a SPI bus. Returns Type Description SpiDevice A communications channel to a device on a SPI bus. | Improve this Doc View Source Dispose() Disposes this instance Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Disposes this instance Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true if explicitly disposing, false if in finalizer | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetBusInfo(Int32) Retrieves the info about a certain bus. Declaration public static SpiBusInfo GetBusInfo(int busId) Parameters Type Name Description Int32 busId The id of the bus. Returns Type Description SpiBusInfo The bus info requested. | Improve this Doc View Source Read(SpanByte) Reads data from the SPI device. Declaration public void Read(SpanByte buffer) Parameters Type Name Description SpanByte buffer The buffer to read the data from the SPI device. The length of the buffer determines how much data to read from the SPI device. | Improve this Doc View Source Read(UInt16[]) Reads data from the SPI device. Declaration public void Read(ushort[] buffer) Parameters Type Name Description UInt16 [] buffer The buffer to read the data from the SPI device. The length of the buffer determines how much data to read from the SPI device. | Improve this Doc View Source ReadByte() Reads a byte from the SPI device. Declaration public byte ReadByte() Returns Type Description Byte A byte read from the SPI device. | Improve this Doc View Source TransferFullDuplex(SpanByte, SpanByte) Writes and reads data from the SPI device. Declaration public void TransferFullDuplex(SpanByte writeBuffer, SpanByte readBuffer) Parameters Type Name Description SpanByte writeBuffer The buffer that contains the data to be written to the SPI device. SpanByte readBuffer The buffer to read the data from the SPI device. | Improve this Doc View Source TransferFullDuplex(UInt16[], UInt16[]) Writes and reads data from the SPI device. Declaration public void TransferFullDuplex(ushort[] writeBuffer, ushort[] readBuffer) Parameters Type Name Description UInt16 [] writeBuffer The buffer that contains the data to be written to the SPI device. UInt16 [] readBuffer The buffer to read the data from the SPI device. | Improve this Doc View Source Write(SpanByte) Writes data to the SPI device. Declaration public void Write(SpanByte buffer) Parameters Type Name Description SpanByte buffer The buffer that contains the data to be written to the SPI device. | Improve this Doc View Source Write(UInt16[]) Writes data to the SPI device. Declaration public void Write(ushort[] buffer) Parameters Type Name Description UInt16 [] buffer The buffer that contains the data to be written to the SPI device. | Improve this Doc View Source WriteByte(Byte) Writes a byte to the SPI device. Declaration public void WriteByte(byte value) Parameters Type Name Description Byte value The byte to be written to the SPI device. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Spi.SpiDeviceAlreadyInUseException.html": {
    "href": "api/System.Device.Spi.SpiDeviceAlreadyInUseException.html",
    "title": "Class SpiDeviceAlreadyInUseException | nanoFramework Documentation",
    "keywords": "Class SpiDeviceAlreadyInUseException Exception thrown when a check in driver's constructor finds a device that already exists with the same settings (SPI bus AND chip select line) Inheritance Object Exception SpiDeviceAlreadyInUseException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Spi Assembly : System.Device.Spi.dll Syntax [Serializable] public class SpiDeviceAlreadyInUseException : Exception Methods | Improve this Doc View Source ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Exception.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Device.Spi.SpiMode.html": {
    "href": "api/System.Device.Spi.SpiMode.html",
    "title": "Enum SpiMode | nanoFramework Documentation",
    "keywords": "Enum SpiMode Defines how data is synchronized between devices on a SPI bus. Clock Polarity (CPOL) determines if clock signal is low or high when in idle state. Clock Phase (CPHA) determines when data is sampled relative to the clock signal. Namespace : System.Device.Spi Assembly : System.Device.Spi.dll Syntax public enum SpiMode Fields Name Description Mode0 CPOL 0, CPHA 0. Polarity is idled low and data is sampled on rising edge of the clock signal. Mode1 CPOL 0, CPHA 1. Polarity is idled low and data is sampled on falling edge of the clock signal. Mode2 CPOL 1, CPHA 0. Polarity is idled high and data is sampled on falling edge of the clock signal. Mode3 CPOL 1, CPHA 1. Polarity is idled high and data is sampled on rising edge of the clock signal. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Device.Spi.SpiSharingMode.html": {
    "href": "api/System.Device.Spi.SpiSharingMode.html",
    "title": "Enum SpiSharingMode | nanoFramework Documentation",
    "keywords": "Enum SpiSharingMode Defines the sharing mode for the SPI bus. Namespace : System.Device.Spi Assembly : System.Device.Spi.dll Syntax public enum SpiSharingMode Fields Name Description Exclusive SPI bus segment is not shared. Shared SPI bus is shared. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Diagnostics.ConditionalAttribute.html": {
    "href": "api/System.Diagnostics.ConditionalAttribute.html",
    "title": "Class ConditionalAttribute | nanoFramework Documentation",
    "keywords": "Class ConditionalAttribute Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined. Inheritance Object Attribute ConditionalAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public sealed class ConditionalAttribute : Attribute Constructors | Improve this Doc View Source ConditionalAttribute(String) Initializes a new instance of the ConditionalAttribute class. Declaration public ConditionalAttribute(string conditionString) Parameters Type Name Description String conditionString A string that specifies the case-sensitive conditional compilation symbol that is associated with the attribute. Properties | Improve this Doc View Source ConditionString Gets the conditional compilation symbol that is associated with the ConditionalAttribute attribute. Declaration public string ConditionString { get; } Property Value Type Description String A string that specifies the case-sensitive conditional compilation symbol that is associated with the ConditionalAttribute attribute. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Diagnostics.Debug.html": {
    "href": "api/System.Diagnostics.Debug.html",
    "title": "Class Debug | nanoFramework Documentation",
    "keywords": "Class Debug Provides a set of methods and properties that help debug your code. Inheritance Object Debug Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax public static class Debug Methods | Improve this Doc View Source Assert(Boolean) Causes a break in execution if the specified assertion (condition) evaluates to false. Declaration [Conditional(\"DEBUG\")] public static void Assert(bool condition) Parameters Type Name Description Boolean condition The condition to be evaluated. If the value is false, program execution stops. | Improve this Doc View Source Assert(Boolean, String) Causes a break in execution if the specified assertion (condition) evaluates to false. Declaration [Conditional(\"DEBUG\")] public static void Assert(bool condition, string message) Parameters Type Name Description Boolean condition The condition to be evaluated. If the value is false, program execution stops. String message The text to be output if the assertion is false. | Improve this Doc View Source Assert(Boolean, String, String) Causes a break in execution if the specified assertion (condition) evaluates to false. Declaration [Conditional(\"DEBUG\")] public static void Assert(bool condition, string message, string detailedMessage) Parameters Type Name Description Boolean condition The condition to be evaluated. If the value is false, program execution stops. String message The text to be output if the assertion is false. String detailedMessage The detailed message to be displayed if the assertion is false. | Improve this Doc View Source Write(String) Writes a message to the trace listeners in the Listeners collection. Declaration [Conditional(\"DEBUG\")] public static void Write(string message) Parameters Type Name Description String message A message to write. Remarks In nanoFramework implementation the message is output to Visual Studio debugger window. | Improve this Doc View Source WriteLine(String) Writes a message followed by a line terminator to the trace listeners in the Listeners collection. Declaration [Conditional(\"DEBUG\")] public static void WriteLine(string message) Parameters Type Name Description String message A message to write. Remarks In nanoFramework implementation the message is output to Visual Studio debugger window."
  },
  "api/System.Diagnostics.DebuggableAttribute.DebuggingModes.html": {
    "href": "api/System.Diagnostics.DebuggableAttribute.DebuggingModes.html",
    "title": "Enum DebuggableAttribute.DebuggingModes | nanoFramework Documentation",
    "keywords": "Enum DebuggableAttribute.DebuggingModes Specifies the debugging mode for the just-in-time (JIT) compiler. Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax public enum DebuggingModes Fields Name Description Default Instructs the just-in-time (JIT) compiler to use its default behaviour, which includes enabling optimizations, disabling Edit and Continue support, and using symbol store sequence points if present. Starting with the .NET Framework version 2.0, JIT tracking information, the Microsoft intermediate language (MSIL) offset to the native-code offset within a method, is always generated. DisableOptimizations Disable optimizations performed by the compiler to make your output file smaller, faster, and more efficient. Optimizations result in code rearrangement in the output file, which can make debugging difficult. Typically optimization should be disabled while debugging. In versions 2.0 or later, combine this value with Default (Default | DisableOptimizations) to enable JIT tracking and disable optimizations. EnableEditAndContinue Enable edit and continue. Edit and continue enables you to make changes to your source code while your program is in break mode. The ability to edit and continue is compiler dependent. IgnoreSymbolStoreSequencePoints Use the implicit MSIL sequence points, not the program database (PDB) sequence points. The symbolic information normally includes at least one Microsoft intermediate language (MSIL) offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. These MSIL offsets are called sequence points. None Starting with the .NET Framework version 2.0, JIT tracking information is always generated, and this flag has the same effect as Default, except that it sets the DebuggableAttribute.IsJITTrackingEnabled property to false. However, because JIT tracking is always enabled, the property value is ignored in version 2.0 or later. Note that, unlike the None flag, the None flag cannot be used to disable JIT optimizations."
  },
  "api/System.Diagnostics.DebuggableAttribute.html": {
    "href": "api/System.Diagnostics.DebuggableAttribute.html",
    "title": "Class DebuggableAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggableAttribute Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited. Inheritance Object Attribute DebuggableAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module)] public sealed class DebuggableAttribute : Attribute Constructors | Improve this Doc View Source DebuggableAttribute(Boolean, Boolean) Initializes a new instance of the DebuggableAttribute class, using the specified tracking and optimization options for the just-in-time (JIT) compiler. Declaration public DebuggableAttribute(bool isJITTrackingEnabled, bool isJITOptimizerDisabled) Parameters Type Name Description Boolean isJITTrackingEnabled true to enable debugging; otherwise, false. Boolean isJITOptimizerDisabled true to disable the optimizer for execution; otherwise, false. | Improve this Doc View Source DebuggableAttribute(DebuggableAttribute.DebuggingModes) Initializes a new instance of the DebuggableAttribute class, using the specified debugging modes for the just-in-time (JIT) compiler. Declaration public DebuggableAttribute(DebuggableAttribute.DebuggingModes modes) Parameters Type Name Description DebuggableAttribute.DebuggingModes modes A bitwise combination of the DebuggableAttribute.DebuggingModes values specifying the debugging mode for the JIT compiler. Properties | Improve this Doc View Source DebuggingFlags Gets the debugging modes for the attribute. Declaration public DebuggableAttribute.DebuggingModes DebuggingFlags { get; } Property Value Type Description DebuggableAttribute.DebuggingModes A bitwise combination of the DebuggableAttribute.DebuggingModes values describing the debugging mode for the just-in-time (JIT) compiler. The default is Default. | Improve this Doc View Source IsJITOptimizerDisabled Gets a value that indicates whether the runtime optimizer is disabled. Declaration public bool IsJITOptimizerDisabled { get; } Property Value Type Description Boolean true if the runtime optimizer is disabled; otherwise, false. | Improve this Doc View Source IsJITTrackingEnabled Gets a value that indicates whether the runtime will track information during code generation for the debugger. Declaration public bool IsJITTrackingEnabled { get; } Property Value Type Description Boolean true if the runtime will track information during code generation for the debugger; otherwise, false. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Diagnostics.Debugger.html": {
    "href": "api/System.Diagnostics.Debugger.html",
    "title": "Class Debugger | nanoFramework Documentation",
    "keywords": "Class Debugger Enables communication with a debugger. This class cannot be inherited. Inheritance Object Debugger Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax public static class Debugger Properties IsAttached Gets a value that indicates whether a debugger is attached to the process. Declaration public static bool IsAttached { get; } Property Value Type Description Boolean true if a debugger is attached; otherwise, false. Methods Break() Signals a breakpoint to an attached debugger. Declaration public static extern void Break()"
  },
  "api/System.Diagnostics.DebuggerBrowsableAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerBrowsableAttribute.html",
    "title": "Class DebuggerBrowsableAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerBrowsableAttribute Determines if and how a member is displayed in the debugger variable windows. This class cannot be inherited. Inheritance Object Attribute DebuggerBrowsableAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public sealed class DebuggerBrowsableAttribute : Attribute Constructors | Improve this Doc View Source DebuggerBrowsableAttribute(DebuggerBrowsableState) Initializes a new instance of the DebuggerBrowsableAttribute class. Declaration public DebuggerBrowsableAttribute(DebuggerBrowsableState state) Parameters Type Name Description DebuggerBrowsableState state One of the DebuggerBrowsableState values that specifies how to display the member. Exceptions Type Condition ArgumentOutOfRangeException Properties | Improve this Doc View Source State Gets the display state for the attribute. Declaration public DebuggerBrowsableState State { get; } Property Value Type Description DebuggerBrowsableState One of the DebuggerBrowsableState values. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Diagnostics.DebuggerBrowsableState.html": {
    "href": "api/System.Diagnostics.DebuggerBrowsableState.html",
    "title": "Enum DebuggerBrowsableState | nanoFramework Documentation",
    "keywords": "Enum DebuggerBrowsableState Provides display instructions for the debugger. Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax public enum DebuggerBrowsableState Fields Name Description Collapsed Show the element as collapsed. Never Never show the element. RootHidden Do not display the root element; display the child elements if the element is a collection or array of items."
  },
  "api/System.Diagnostics.DebuggerDisplayAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerDisplayAttribute.html",
    "title": "Class DebuggerDisplayAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerDisplayAttribute Determines how a class or field is displayed in the debugger variable windows. Inheritance Object Attribute DebuggerDisplayAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Delegate, AllowMultiple = true)] public sealed class DebuggerDisplayAttribute : Attribute Constructors | Improve this Doc View Source DebuggerDisplayAttribute(String) Initializes a new instance of the DebuggerDisplayAttribute class. Declaration public DebuggerDisplayAttribute(string value) Parameters Type Name Description String value The string to be displayed in the value column for instances of the type; an empty string (\"\") causes the value column to be hidden. Properties | Improve this Doc View Source Name Gets or sets the name to display in the debugger variable windows. Declaration public string Name { get; set; } Property Value Type Description String The name to display in the debugger variable windows. | Improve this Doc View Source Target Gets or sets the type of the attribute's target. Declaration public Type Target { get; set; } Property Value Type Description Type The attribute's target type. Exceptions Type Condition ArgumentNullException value | Improve this Doc View Source TargetTypeName Gets or sets the type name of the attribute's target. Declaration public string TargetTypeName { get; set; } Property Value Type Description String The name of the attribute's target type. | Improve this Doc View Source Type Gets or sets the string to display in the type column of the debugger variable windows. Declaration public string Type { get; set; } Property Value Type Description String The string to display in the type column of the debugger variable windows. | Improve this Doc View Source Value Gets the string to display in the value column of the debugger variable windows. Declaration public string Value { get; } Property Value Type Description String The string to display in the value column of the debugger variable. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Diagnostics.DebuggerHiddenAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerHiddenAttribute.html",
    "title": "Class DebuggerHiddenAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerHiddenAttribute Specifies the DebuggerHiddenAttribute. This class cannot be inherited. Inheritance Object Attribute DebuggerHiddenAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property, Inherited = false)] public sealed class DebuggerHiddenAttribute : Attribute Remarks The common language runtime attaches no semantics to this attribute. It is provided for use by source code debuggers. For example, the Visual Studio 2005 debugger does not stop in a method marked with this attribute and does not allow a breakpoint to be set in the method. Other debugger attributes recognized by the Visual Studio 2005 debugger are the DebuggerNonUserCodeAttribute and the DebuggerStepThroughAttribute . Constructors | Improve this Doc View Source DebuggerHiddenAttribute() Initializes a new instance of the DebuggerHiddenAttribute class. Declaration public DebuggerHiddenAttribute() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Diagnostics.DebuggerNonUserCodeAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerNonUserCodeAttribute.html",
    "title": "Class DebuggerNonUserCodeAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerNonUserCodeAttribute Identifies a type or member that is not part of the user code for an application. Inheritance Object Attribute DebuggerNonUserCodeAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property, Inherited = false)] public sealed class DebuggerNonUserCodeAttribute : Attribute Remarks Designer provided types and members that are not part of the code specifically created by the user can complicate the debugging experience. This attribute suppresses the display of these adjunct types and members in the debugger window and automatically steps through, rather than into, designer provided code. When the debugger encounters this attribute when stepping through user code, the user experience is to not see the designer provided code and to step to the next user-supplied code statement. The debugger behaviour when the DebuggerNonUserCodeAttribute is present is similar to using a combination of the DebuggerHiddenAttribute attribute, which hides the code from the debugger, and the DebuggerStepThroughAttribute attribute, which tells the debugger to step through, rather than into, the code it is applied to. Constructors | Improve this Doc View Source DebuggerNonUserCodeAttribute() Initializes a new instance of the DebuggerNonUserCodeAttribute class. Declaration public DebuggerNonUserCodeAttribute() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Diagnostics.DebuggerStepperBoundaryAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerStepperBoundaryAttribute.html",
    "title": "Class DebuggerStepperBoundaryAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerStepperBoundaryAttribute Indicates the code following the attribute is to be executed in run, not step, mode. Inheritance Object Attribute DebuggerStepperBoundaryAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)] public sealed class DebuggerStepperBoundaryAttribute : Attribute Remarks The DebuggerStepperBoundaryAttribute attribute is used as an escape from the effect of a DebuggerNonUserCodeAttribute . When executing within the boundaries of the DebuggerNonUserCodeAttribute , designer-provided code is executed as a step-through until the next user supplied code is encountered. When context switches are made on a thread, the next user-supplied code module stepped into may not relate to the code that was in the process of being debugged. To avoid this debugging experience, use the DebuggerStepperBoundaryAttribute to escape from stepping through code to running code. For example, in Visual Studio 2005, encountering a DebuggerStepperBoundaryAttribute while stepping through code using the F10 key (or Step Over command) has the same effect as pressing the F5 key or using the Start Debugging command. Constructors | Improve this Doc View Source DebuggerStepperBoundaryAttribute() Initializes a new instance of the DebuggerStepperBoundaryAttribute class. Declaration public DebuggerStepperBoundaryAttribute() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Diagnostics.DebuggerStepThroughAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerStepThroughAttribute.html",
    "title": "Class DebuggerStepThroughAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerStepThroughAttribute Identifies a type or member that is not part of the user code for an application. Inheritance Object Attribute DebuggerStepThroughAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)] public sealed class DebuggerStepThroughAttribute : Attribute Remarks Designer provided types and members that are not part of the code specifically created by the user can complicate the debugging experience. This attribute suppresses the display of these adjunct types and members in the debugger window and automatically steps through, rather than into, designer provided code. When the debugger encounters this attribute when stepping through user code, the user experience is to not see the designer provided code and to step to the next user-supplied code statement. The debugger behaviour when the DebuggerNonUserCodeAttribute is present is similar to using a combination of the DebuggerHiddenAttribute attribute, which hides the code from the debugger, and the DebuggerStepThroughAttribute attribute, which tells the debugger to step through, rather than into, the code it is applied to. Constructors | Improve this Doc View Source DebuggerStepThroughAttribute() Initializes a new instance of the DebuggerNonUserCodeAttribute class. Declaration public DebuggerStepThroughAttribute() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Diagnostics.DebuggerTypeProxyAttribute.html": {
    "href": "api/System.Diagnostics.DebuggerTypeProxyAttribute.html",
    "title": "Class DebuggerTypeProxyAttribute | nanoFramework Documentation",
    "keywords": "Class DebuggerTypeProxyAttribute Specifies the display proxy for a type. Inheritance Object Attribute DebuggerTypeProxyAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)] public sealed class DebuggerTypeProxyAttribute : Attribute Remarks Available only in mscorlib build with support for System.Reflection. Constructors | Improve this Doc View Source DebuggerTypeProxyAttribute(String) Initializes a new instance of the DebuggerTypeProxyAttribute class using the type name of the proxy. Declaration public DebuggerTypeProxyAttribute(string typeName) Parameters Type Name Description String typeName The type name of the proxy type. | Improve this Doc View Source DebuggerTypeProxyAttribute(Type) Initializes a new instance of the DebuggerTypeProxyAttribute class using the type of the proxy. Declaration public DebuggerTypeProxyAttribute(Type type) Parameters Type Name Description Type type The proxy type. Exceptions Type Condition ArgumentNullException Properties | Improve this Doc View Source ProxyTypeName Gets the type name of the proxy type. Declaration public string ProxyTypeName { get; } Property Value Type Description String The type name of the proxy type. | Improve this Doc View Source Target Gets or sets the target type for the attribute. Declaration public Type Target { get; set; } Property Value Type Description Type The target type for the attribute. Exceptions Type Condition ArgumentNullException Target is set to null. | Improve this Doc View Source TargetTypeName Gets or sets the name of the target type. Declaration public string TargetTypeName { get; set; } Property Value Type Description String The name of the target type. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Diagnostics.html": {
    "href": "api/System.Diagnostics.html",
    "title": "Namespace System.Diagnostics | nanoFramework Documentation",
    "keywords": "Namespace System.Diagnostics Classes ConditionalAttribute Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined. Debug Provides a set of methods and properties that help debug your code. DebuggableAttribute Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited. Debugger Enables communication with a debugger. This class cannot be inherited. DebuggerBrowsableAttribute Determines if and how a member is displayed in the debugger variable windows. This class cannot be inherited. DebuggerDisplayAttribute Determines how a class or field is displayed in the debugger variable windows. DebuggerHiddenAttribute Specifies the DebuggerHiddenAttribute. This class cannot be inherited. DebuggerNonUserCodeAttribute Identifies a type or member that is not part of the user code for an application. DebuggerStepperBoundaryAttribute Indicates the code following the attribute is to be executed in run, not step, mode. DebuggerStepThroughAttribute Identifies a type or member that is not part of the user code for an application. DebuggerTypeProxyAttribute Specifies the display proxy for a type. Enums DebuggableAttribute.DebuggingModes Specifies the debugging mode for the just-in-time (JIT) compiler. DebuggerBrowsableState Provides display instructions for the debugger."
  },
  "api/System.Double.html": {
    "href": "api/System.Double.html",
    "title": "Struct Double | nanoFramework Documentation",
    "keywords": "Struct Double Represents a double-precision floating-point number. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Double Fields | Improve this Doc View Source Epsilon Represents the smallest positive Double value that is greater than zero. This field is constant. Declaration public const double Epsilon = 4.94065645841247E-324 Field Value Type Description Double Remarks The value of this constant is 4.94065645841247e-324. | Improve this Doc View Source MaxValue Represents the largest possible value of a Double. This field is constant. Declaration public const double MaxValue = 1.7976931348623157E+308 Field Value Type Description Double Remarks The value of this constant is positive 1.7976931348623157E+308. | Improve this Doc View Source MinValue Represents the smallest possible value of a Double. This field is constant. Declaration public const double MinValue = -1.7976931348623157E+308 Field Value Type Description Double Remarks The value of this constant is negative 1.7976931348623157E+308. | Improve this Doc View Source NaN Represents a value that is not a number (NaN). This field is constant. Declaration public const double NaN = NaN Field Value Type Description Double | Improve this Doc View Source NegativeInfinity Represents negative infinity. This field is constant. Declaration public const double NegativeInfinity = -Infinity Field Value Type Description Double | Improve this Doc View Source PositiveInfinity Represents positive infinity. This field is constant. Declaration public const double PositiveInfinity = Infinity Field Value Type Description Double Methods | Improve this Doc View Source CompareTo(Double) Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number. Declaration public int CompareTo(double value) Parameters Type Name Description Double value A double-precision floating-point number to compare. Returns Type Description Int32 A signed number indicating the relative values of this instance and value. Less than zero: This instance is less than value. -or- This instance is not a number ( NaN ) and value is a number. Zero: This instance is equal to value. -or- Both this instance and value are not a number ( NaN ), PositiveInfinity , or NegativeInfinity . Greater than zero: This instance is greater than value. -or- This instance is a number and value is not a number ( NaN ). IsInfinity(Double) Returns a value indicating whether the specified number evaluates to negative or positive infinity Declaration public static extern bool IsInfinity(double d) Parameters Type Name Description Double d A double-precision floating-point number. Returns Type Description Boolean true if d evaluates to PositiveInfinity or NegativeInfinity; otherwise, false. IsNaN(Double) Returns a value that indicates whether the specified value is not a number (NaN). Declaration public static extern bool IsNaN(double d) Parameters Type Name Description Double d A double-precision floating-point number. Returns Type Description Boolean true if d evaluates to NaN; otherwise, false. IsNegativeInfinity(Double) Returns a value indicating whether the specified number evaluates to negative infinity. Declaration public static extern bool IsNegativeInfinity(double d) Parameters Type Name Description Double d A double-precision floating-point number. Returns Type Description Boolean true if d evaluates to NegativeInfinity; otherwise, false. IsPositiveInfinity(Double) Returns a value indicating whether the specified number evaluates to positive infinity. Declaration public static extern bool IsPositiveInfinity(double d) Parameters Type Name Description Double d A double-precision floating-point number. Returns Type Description Boolean true if d evaluates to PositiveInfinity; otherwise, false. | Improve this Doc View Source Parse(String) Converts the string representation of a number to its double-precision floating-point number equivalent. Declaration public static double Parse(string s) Parameters Type Name Description String s A string that contains a number to convert. Returns Type Description Double A double-precision floating-point number that is equivalent to the numeric value or symbol specified in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format. | Improve this Doc View Source TryParse(String, out Double) Converts the string representation of a number to its double-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed. Declaration public static bool TryParse(string s, out double result) Parameters Type Name Description String s A string containing a number to convert. Double result When this method returns, contains the double-precision floating-point number equivalent to the s parameter, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null reference (Nothing in Visual Basic), is not a number in a valid format, or represents a number less than MinValue or greater than MaxValue. This parameter is passed uninitialized. Returns Type Description Boolean true if s was converted successfully; otherwise, false."
  },
  "api/System.Enum.html": {
    "href": "api/System.Enum.html",
    "title": "Class Enum | nanoFramework Documentation",
    "keywords": "Class Enum Provides the base class for enumerations. Inheritance Object ValueType Enum Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class Enum : ValueType Methods HasFlag(Enum) Determines whether one or more bit fields are set in the current instance. Declaration public extern bool HasFlag(Enum flag) Parameters Type Name Description Enum flag An enumeration value. Returns Type Description Boolean true if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, false . Exceptions Type Condition ArgumentException flag is a different type than the current instance. | Improve this Doc View Source ToString() Converts the value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance. Overrides Object.ToString() Remarks Available only in mscorlib build with support for System.Reflection. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.EventArgs.html": {
    "href": "api/System.EventArgs.html",
    "title": "Class EventArgs | nanoFramework Documentation",
    "keywords": "Class EventArgs Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data. Inheritance Object EventArgs CloudToDeviceMessageEventArgs StatusUpdatedEventArgs TwinUpdateEventArgs ConnectionClosedRequestEventArgs ConnectionOpenedEventArgs MqttMsgAuthenticationEventArgs MqttMsgConnectEventArgs MqttMsgPublishedEventArgs MqttMsgPublishEventArgs MqttMsgSubscribedEventArgs MqttMsgSubscribeEventArgs MqttMsgUnsubscribedEventArgs MqttMsgUnsubscribeEventArgs ScrollChangedEventArgs SelectionChangedEventArgs CustomEventArgs RemovableDeviceEventArgs CancelEventArgs NotifyInputEventArgs RoutedEventArgs TouchGestureEventArgs TouchScreenEventArgs SerialDataReceivedEventArgs NetworkAPStationEventArgs NetworkAvailabilityEventArgs RemovableDeviceEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class EventArgs Constructors | Improve this Doc View Source EventArgs() Initializes a new instance of the EventArgs class. Declaration public EventArgs() Fields | Improve this Doc View Source Empty Provides a value to use with events that do not have event data. Declaration public static readonly EventArgs Empty Field Value Type Description EventArgs Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.EventHandler.html": {
    "href": "api/System.EventHandler.html",
    "title": "Delegate EventHandler | nanoFramework Documentation",
    "keywords": "Delegate EventHandler Represents the method that will handle an event that has no event data. Namespace : System Assembly : mscorlib.dll Syntax public delegate void EventHandler(object sender, EventArgs e); Parameters Type Name Description Object sender The source of the event. EventArgs e An object that contains no event data. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.EventHandler-1.html": {
    "href": "api/System.EventHandler-1.html",
    "title": "Delegate EventHandler<TEventArgs> | nanoFramework Documentation",
    "keywords": "Delegate EventHandler<TEventArgs> Represents the method that will handle an event when the event provides data. Namespace : System Assembly : mscorlib.dll Syntax public delegate void EventHandler<TEventArgs>(object sender, TEventArgs e); Parameters Type Name Description Object sender The source of the event. TEventArgs e An object that contains the event data. Type Parameters Name Description TEventArgs The type of the event data generated by the event. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Exception.html": {
    "href": "api/System.Exception.html",
    "title": "Class Exception | nanoFramework Documentation",
    "keywords": "Class Exception Represents errors that occur during application execution. Inheritance Object Exception DeserializationException SerializationException MqttClientException MqttCommunicationException MqttConnectionException MqttTimeoutException ConstraintException ApplicationException DacChannelAlreadyInUseException SpiDeviceAlreadyInUseException SocketException SystemException RegexpSyntaxException I2cDeviceAlreadyInUseException SpiDeviceAlreadyInUseException Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class Exception Constructors | Improve this Doc View Source Exception() Initializes a new instance of the Exception class. Declaration public Exception() | Improve this Doc View Source Exception(String) Initializes a new instance of the Exception class with a specified error message. Declaration public Exception(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source Exception(String, Exception) Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public Exception(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. Fields | Improve this Doc View Source HResult Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception. Declaration protected int HResult Field Value Type Description Int32 The HRESULT value./// Properties | Improve this Doc View Source InnerException Gets the Exception instance that caused the current exception. Declaration public Exception InnerException { get; } Property Value Type Description Exception An instance of Exception that describes the error that caused the current exception. The InnerException property returns the same value as was passed into the constructor, or a null reference (Nothing in Visual Basic) if the inner exception value was not supplied to the constructor. This property is read-only. | Improve this Doc View Source Message Gets a message that describes the current exception. Declaration public virtual string Message { get; } Property Value Type Description String The error message that explains the reason for the exception, or an empty string(\"\"). StackTrace Gets a string representation of the immediate frames on the call stack. Declaration public virtual string StackTrace { get; } Property Value Type Description String A string that describes the immediate frames of the call stack. Methods | Improve this Doc View Source ToString() Creates and returns a string representation of the current exception. Declaration public override string ToString() Returns Type Description String A string representation of the current exception. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.FlagsAttribute.html": {
    "href": "api/System.FlagsAttribute.html",
    "title": "Class FlagsAttribute | nanoFramework Documentation",
    "keywords": "Class FlagsAttribute Indicates that an enumeration can be treated as a bit field; that is, a set of flags. Inheritance Object Attribute FlagsAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Enum)] public class FlagsAttribute : Attribute Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.FormatException.html": {
    "href": "api/System.FormatException.html",
    "title": "Class FormatException | nanoFramework Documentation",
    "keywords": "Class FormatException The exception that is thrown for invalid casting or explicit conversion. Inheritance Object Exception SystemException FormatException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class FormatException : SystemException Constructors | Improve this Doc View Source FormatException() Initializes a new instance of the FormatException class. Declaration public FormatException() | Improve this Doc View Source FormatException(String) Initializes a new instance of the FormatException class with a specified error message. Declaration public FormatException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source FormatException(String, Exception) Initializes a new instance of the FormatException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public FormatException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Func-1.html": {
    "href": "api/System.Func-1.html",
    "title": "Delegate Func<TResult> | nanoFramework Documentation",
    "keywords": "Delegate Func<TResult> Encapsulates a method that has no parameters and returns a value of the type specified by the TResult parameter. Namespace : System Assembly : mscorlib.dll Syntax public delegate TResult Func<out TResult>(); Returns Type Description TResult The return value of the method that this delegate encapsulates. Type Parameters Name Description TResult The type of the return value of the method that this delegate encapsulates. This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see Covariance and Contravariance in Generics . Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Func-2.html": {
    "href": "api/System.Func-2.html",
    "title": "Delegate Func<T, TResult> | nanoFramework Documentation",
    "keywords": "Delegate Func<T, TResult> Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter. Namespace : System Assembly : mscorlib.dll Syntax public delegate TResult Func<in T, out TResult>(T arg); Parameters Type Name Description T arg The parameter of the method that this delegate encapsulates. Returns Type Description TResult The return value of the method that this delegate encapsulates. Type Parameters Name Description T The type of the parameter of the method that this delegate encapsulates. This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see Covariance and Contravariance in Generics . TResult The type of the return value of the method that this delegate encapsulates. This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see Covariance and Contravariance in Generics . Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Func-3.html": {
    "href": "api/System.Func-3.html",
    "title": "Delegate Func<T1, T2, TResult> | nanoFramework Documentation",
    "keywords": "Delegate Func<T1, T2, TResult> Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter. Namespace : System Assembly : mscorlib.dll Syntax public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2); Parameters Type Name Description T1 arg1 The first parameter of the method that this delegate encapsulates. T2 arg2 The second parameter of the method that this delegate encapsulates. Returns Type Description TResult The return value of the method that this delegate encapsulates. Type Parameters Name Description T1 The type of the parameter of the method that this delegate encapsulates. T2 The type of the parameter of the method that this delegate encapsulates. TResult The type of the return value of the method that this delegate encapsulates. This type parameter is covariant.That is, you can use either the type you specified or any type that is more derived.For more information about covariance and contravariance, see Covariance and Contravariance in Generics . Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.GC.html": {
    "href": "api/System.GC.html",
    "title": "Class GC | nanoFramework Documentation",
    "keywords": "Class GC Controls the system garbage collector, a service that automatically reclaims unused memory. Inheritance Object GC Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public static class GC Methods ReRegisterForFinalize(Object) Requests that the system call the finalizer for the specified object for which SuppressFinalize has previously been called. Declaration public static extern void ReRegisterForFinalize(object obj) Parameters Type Name Description Object obj The object that a finalizer must be called for. SuppressFinalize(Object) Requests that the system not call the finalizer for the specified object. Declaration public static extern void SuppressFinalize(object obj) Parameters Type Name Description Object obj The object that a finalizer must not be called for. | Improve this Doc View Source WaitForPendingFinalizers() Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue. Declaration public static void WaitForPendingFinalizers()"
  },
  "api/System.Globalization.CultureInfo.html": {
    "href": "api/System.Globalization.CultureInfo.html",
    "title": "Class CultureInfo | nanoFramework Documentation",
    "keywords": "Class CultureInfo Provides information about a specific culture (called a locale for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers. Inheritance Object CultureInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Globalization Assembly : mscorlib.dll Syntax public class CultureInfo Constructors | Improve this Doc View Source CultureInfo(String) Initializes a new instance of the CultureInfo class based on the culture specified by name. Declaration public CultureInfo(string name) Parameters Type Name Description String name A predefined CultureInfo name, Name of an existing CultureInfo, or Windows-only culture name. Name is not case-sensitive. Properties | Improve this Doc View Source CurrentUICulture Gets the CultureInfo object that represents the current user interface culture used by the Resource Manager to look up culture-specific resources at run time. Declaration public static CultureInfo CurrentUICulture { get; } Property Value Type Description CultureInfo The culture used by the Resource Manager to look up culture-specific resources at run time. | Improve this Doc View Source DateTimeFormat Gets a DateTimeFormatInfo that defines the culturally appropriate format of displaying dates and times. Declaration public virtual DateTimeFormatInfo DateTimeFormat { get; } Property Value Type Description DateTimeFormatInfo A DateTimeFormatInfo that defines the culturally appropriate format of displaying dates and times. | Improve this Doc View Source Name Gets the culture name in the format languagecode2-country/regioncode2. Declaration public virtual string Name { get; } Property Value Type Description String The culture name in the format languagecode2-country/regioncode2. languagecode2 is a lowercase two-letter code derived from ISO 639-1. country/regioncode2 is derived from ISO 3166 and usually consists of two uppercase letters, or a BCP-47 language tag. | Improve this Doc View Source NumberFormat Gets a NumberFormatInfo that defines the culturally appropriate format of displaying numbers, currency, and percentage. Declaration public virtual NumberFormatInfo NumberFormat { get; } Property Value Type Description NumberFormatInfo A NumberFormatInfo that defines the culturally appropriate format of displaying numbers, currency, and percentage. | Improve this Doc View Source Parent Gets the CultureInfo that represents the parent culture of the current CultureInfo. Declaration public virtual CultureInfo Parent { get; } Property Value Type Description CultureInfo The CultureInfo that represents the parent culture of the current CultureInfo. Methods | Improve this Doc View Source ToString() Returns a string containing the name of the current CultureInfo in the format languagecode2-country/regioncode2. Declaration public override string ToString() Returns Type Description String A string containing the name of the current CultureInfo. Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Globalization.DateTimeFormatInfo.html": {
    "href": "api/System.Globalization.DateTimeFormatInfo.html",
    "title": "Class DateTimeFormatInfo | nanoFramework Documentation",
    "keywords": "Class DateTimeFormatInfo Provides culture-specific information about the format of date and time values. Inheritance Object DateTimeFormatInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Globalization Assembly : mscorlib.dll Syntax public sealed class DateTimeFormatInfo Properties | Improve this Doc View Source AbbreviatedDayNames Gets a one-dimensional array of type String containing the culture-specific abbreviated names of the days of the week. Declaration public string[] AbbreviatedDayNames { get; } Property Value Type Description String [] A one-dimensional array of type String containing the culture-specific abbreviated names of the days of the week. The array for InvariantInfo contains \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", and \"Sat\". | Improve this Doc View Source AbbreviatedMonthNames Gets or sets a one-dimensional string array that contains the culture-specific abbreviated names of the months. Declaration public string[] AbbreviatedMonthNames { get; } Property Value Type Description String [] A one-dimensional string array with 13 elements that contains the culture-specific abbreviated names of the months. For 12-month calendars, the 13th element of the array is an empty string. The array for InvariantInfo contains \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", and \"\". | Improve this Doc View Source AMDesignator Gets the string designator for hours that are \"ante meridiem\" (before noon). Declaration public string AMDesignator { get; } Property Value Type Description String The string designator for hours that are ante meridiem. The default for InvariantInfo is \"AM\". | Improve this Doc View Source CurrentInfo Gets a read-only DateTimeFormatInfo object that formats values based on the current culture. Declaration public static DateTimeFormatInfo CurrentInfo { get; } Property Value Type Description DateTimeFormatInfo A read-only DateTimeFormatInfo object based on the CultureInfo object for the current thread. | Improve this Doc View Source DateSeparator Gets the string that separates the components of a date, that is, the year, month, and day. Declaration public string DateSeparator { get; } Property Value Type Description String The string that separates the components of a date, that is, the year, month, and day. The default for InvariantInfo is \"/\". | Improve this Doc View Source DayNames Gets a one-dimensional string array that contains the culture-specific full names of the days of the week. Declaration public string[] DayNames { get; } Property Value Type Description String [] A one-dimensional string array that contains the culture-specific full names of the days of the week. The array for InvariantInfo contains \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", and \"Saturday\". | Improve this Doc View Source FullDateTimePattern Gets the custom format string for a long date and long time value. Declaration public string FullDateTimePattern { get; } Property Value Type Description String The custom format string for a long date and long time value. | Improve this Doc View Source LongDatePattern Gets the custom format string for a long date value. Declaration public string LongDatePattern { get; } Property Value Type Description String The custom format string for a long date value. | Improve this Doc View Source LongTimePattern Gets the custom format string for a long time value. Declaration public string LongTimePattern { get; } Property Value Type Description String The format pattern for a long time value. | Improve this Doc View Source MonthDayPattern Gets the custom format string for a month and day value. Declaration public string MonthDayPattern { get; } Property Value Type Description String The custom format string for a month and day value. | Improve this Doc View Source MonthNames Gets or sets a one-dimensional array of type String containing the culture-specific full names of the months. Declaration public string[] MonthNames { get; } Property Value Type Description String [] A one-dimensional array of type String containing the culture-specific full names of the months. In a 12-month calendar, the 13th element of the array is an empty string. The array for InvariantInfo contains \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", and \"\". | Improve this Doc View Source PMDesignator Gets the string designator for hours that are \"post meridiem\" (after noon). Declaration public string PMDesignator { get; } Property Value Type Description String The string designator for hours that are \"post meridiem\" (after noon). The default for InvariantInfo is \"PM\". | Improve this Doc View Source RFC1123Pattern Gets the custom format string for a time value that is based on the Internet Engineering Task Force (IETF) Request for Comments (RFC) 1123 specification. Declaration public string RFC1123Pattern { get; } Property Value Type Description String The custom format string for a time value that is based on the IETF RFC 1123 specification. | Improve this Doc View Source ShortDatePattern Gets the custom format string for a short date value. Declaration public string ShortDatePattern { get; } Property Value Type Description String The custom format string for a short date value. | Improve this Doc View Source ShortTimePattern Gets the custom format string for a short time value. Declaration public string ShortTimePattern { get; } Property Value Type Description String The custom format string for a short time value. | Improve this Doc View Source SortableDateTimePattern Gets the custom format string for a sortable date and time value. Declaration public string SortableDateTimePattern { get; } Property Value Type Description String The custom format string for a sortable date and time value. | Improve this Doc View Source TimeSeparator Gets the string that separates the components of time, that is, the hour, minutes, and seconds. Declaration public string TimeSeparator { get; } Property Value Type Description String The string that separates the components of time. The default for InvariantInfo is \":\". | Improve this Doc View Source UniversalSortableDateTimePattern Gets the custom format string for a universal, sortable date and time string. Declaration public string UniversalSortableDateTimePattern { get; } Property Value Type Description String The custom format string for a universal, sortable date and time string. | Improve this Doc View Source YearMonthPattern Gets the custom format string for a year and month value. Declaration public string YearMonthPattern { get; } Property Value Type Description String The custom format string for a year and month value. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Globalization.html": {
    "href": "api/System.Globalization.html",
    "title": "Namespace System.Globalization | nanoFramework Documentation",
    "keywords": "Namespace System.Globalization Classes CultureInfo Provides information about a specific culture (called a locale for unmanaged code development). The information includes the names for the culture, the writing system, the calendar used, the sort order of strings, and formatting for dates and numbers. DateTimeFormatInfo Provides culture-specific information about the format of date and time values. NumberFormatInfo Provides culture-specific information for formatting and parsing numeric values."
  },
  "api/System.Globalization.NumberFormatInfo.html": {
    "href": "api/System.Globalization.NumberFormatInfo.html",
    "title": "Class NumberFormatInfo | nanoFramework Documentation",
    "keywords": "Class NumberFormatInfo Provides culture-specific information for formatting and parsing numeric values. Inheritance Object NumberFormatInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Globalization Assembly : mscorlib.dll Syntax public sealed class NumberFormatInfo Properties | Improve this Doc View Source CurrentInfo Gets a read-only NumberFormatInfo that formats values based on the current culture. Declaration public static NumberFormatInfo CurrentInfo { get; } Property Value Type Description NumberFormatInfo A read-only NumberFormatInfo based on the culture of the current thread. | Improve this Doc View Source NegativeSign Gets the string that denotes that the associated number is negative. Declaration public string NegativeSign { get; } Property Value Type Description String The string that denotes that the associated number is negative. The default for InvariantInfo is \"-\". | Improve this Doc View Source NumberDecimalSeparator Gets the string to use as the decimal separator in numeric values. Declaration public string NumberDecimalSeparator { get; } Property Value Type Description String The string to use as the decimal separator in numeric values. The default for InvariantInfo is \".\". | Improve this Doc View Source NumberGroupSeparator Gets the string that separates groups of digits to the left of the decimal in numeric values. Declaration public string NumberGroupSeparator { get; } Property Value Type Description String The string that separates groups of digits to the left of the decimal in numeric values. The default for InvariantInfo is \",\". | Improve this Doc View Source NumberGroupSizes Gets the number of digits in each group to the left of the decimal in numeric values. Declaration public int[] NumberGroupSizes { get; } Property Value Type Description Int32 [] The number of digits in each group to the left of the decimal in numeric values. The default for InvariantInfo is a one-dimensional array with only one element, which is set to 3. Exceptions Type Condition InvalidOperationException | Improve this Doc View Source PositiveSign Gets the string that denotes that the associated number is positive. Declaration public string PositiveSign { get; } Property Value Type Description String The string that denotes that the associated number is positive. The default for InvariantInfo is \"+\". Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Guid.html": {
    "href": "api/System.Guid.html",
    "title": "Struct Guid | nanoFramework Documentation",
    "keywords": "Struct Guid Represents a globally unique identifier (GUID). Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Guid Constructors | Improve this Doc View Source Guid(Byte[]) Initializes a new instance of the Guid structure by using the specified array of bytes. Declaration public Guid(byte[] b) Parameters Type Name Description Byte [] b A 16-element byte array containing values with which to initialize the GUID. | Improve this Doc View Source Guid(Int32, Int16, Int16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte) Initializes a new instance of the Guid structure by using the specified integers and bytes. Declaration public Guid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k) Parameters Type Name Description Int32 a The first 4 bytes of the GUID. Int16 b The next 2 bytes of the GUID. Int16 c The next 2 bytes of the GUID. Byte d The next byte of the GUID. Byte e The next byte of the GUID. Byte f The next byte of the GUID. Byte g The next byte of the GUID. Byte h The next byte of the GUID. Byte i The next byte of the GUID. Byte j The next byte of the GUID. Byte k The next byte of the GUID. Remarks Specifying individual bytes in this manner can be used to circumvent byte order restrictions (big-endian or little-endian byte order) on particular types of computers. | Improve this Doc View Source Guid(String) Creates a new Guid based on the value in the string. The value is made up of hex digits speared by the dash (\"-\"). The string may begin and end with brackets (\"{\", \"}\"). The string must be of the form dddddddd-dddd-dddd-dddd-dddddddddddd. where d is a hex digit. (That is 8 hex digits, followed by 4, then 4, then 4, then 12) such as: \"CA761232-ED42-11CE-BACD-00AA0057B223\" Declaration public Guid(string g) Parameters Type Name Description String g String representation of new Guid . Exceptions Type Condition ArgumentException | Improve this Doc View Source Guid(UInt32, UInt16, UInt16, Byte, Byte, Byte, Byte, Byte, Byte, Byte, Byte) Initializes a new instance of the Guid structure by using the specified integers and bytes. Declaration [CLSCompliant(false)] public Guid(uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k) Parameters Type Name Description UInt32 a The first 4 bytes of the GUID. UInt16 b The next 2 bytes of the GUID. UInt16 c The next 2 bytes of the GUID. Byte d The next byte of the GUID. Byte e The next byte of the GUID. Byte f The next byte of the GUID. Byte g The next byte of the GUID. Byte h The next byte of the GUID. Byte i The next byte of the GUID. Byte j The next byte of the GUID. Byte k The next byte of the GUID. Remarks Specifying the bytes in this manner avoids endianness issues. Fields | Improve this Doc View Source Empty A read-only instance of the Guid class which consists of all zeros. Declaration public static readonly Guid Empty Field Value Type Description Guid Methods | Improve this Doc View Source CompareTo(Object) Compares this instance to a specified object and returns an indication of their relative values. Declaration public int CompareTo(object value) Parameters Type Name Description Object value Guid instance to compare, or null. Returns Type Description Int32 Indication of the relative values (0 = equal, -1 = this instance less, +1 = this instance greater) | Improve this Doc View Source Equals(Object) Returns a value that indicates whether this instance is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with this instance. Returns Type Description Boolean Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code for this instance. Overrides Object.GetHashCode() | Improve this Doc View Source NewGuid() Initializes a new instance of the Guid structure. Declaration public static Guid NewGuid() Returns Type Description Guid A new GUID object. | Improve this Doc View Source ToByteArray() Returns a 16-element byte array that contains the value of this instance. Declaration public byte[] ToByteArray() Returns Type Description Byte [] A 16-element byte array. | Improve this Doc View Source ToString() Returns a string representation of the value of this instance of the Guid structure. Declaration public override string ToString() Returns Type Description String The value of this Guid, formatted by using the \"D\" format specifier as follows: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is \"382c74c3-721d-4f34-80e5-57657b6cbc27\". To convert the hexadecimal digits from a through f to uppercase, call the ToUpper() method on the returned string. Overrides Object.ToString() | Improve this Doc View Source TryParseGuidWithDashes(String, out Guid) Creates a new Guid based on the value in the string. The value is made up of hex digits speared by the dash (\"-\"). The string may begin and end with brackets (\"{\", \"}\"). The string must be of the form dddddddd-dddd-dddd-dddd-dddddddddddd. where d is a hex digit. (That is 8 hex digits, followed by 4, then 4, then 4, then 12) such as: \"CA761232-ED42-11CE-BACD-00AA0057B223\" Declaration public static bool TryParseGuidWithDashes(string guidString, out Guid result) Parameters Type Name Description String guidString Guid string to parse. Guid result Resulting Guid. Returns Type Description Boolean"
  },
  "api/System.html": {
    "href": "api/System.html",
    "title": "Namespace System | nanoFramework Documentation",
    "keywords": "Namespace System Classes AppDomainUnloadedException The exception that is thrown when an attempt is made to access an unloaded application domain. ApplicationException Serves as the base class for application-defined exceptions. ArgumentException The exception that is thrown when one of the arguments provided to a method is not valid. ArgumentNullException The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument. ArgumentOutOfRangeException The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method. Array Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime. Attribute Represents the base class for custom attributes. AttributeUsageAttribute Specifies the usage of another attribute class. This class cannot be inherited. BitConverter Converts base data types to an array of bytes, and an array of bytes to base data types. CLSCompliantAttribute Indicates whether a program element is compliant with the Common Language Specification (CLS). This class cannot be inherited. Convert Converts a base data type to another base data type. DBNull Represents a nonexistent value. This class cannot be inherited. Delegate Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class. Enum Provides the base class for enumerations. EventArgs Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data. Exception Represents errors that occur during application execution. FlagsAttribute Indicates that an enumeration can be treated as a bit field; that is, a set of flags. FormatException The exception that is thrown for invalid casting or explicit conversion. GC Controls the system garbage collector, a service that automatically reclaims unused memory. IndexOutOfRangeException The exception that is thrown when an attempt is made to access an element of an array with an index that is outside the bounds of the array. This class cannot be inherited. InvalidCastException The exception that is thrown for invalid casting or explicit conversion. InvalidOperationException The exception that is thrown when a method call is invalid for the object's current state. MarshalByRefObject Enables access to objects across application domain boundaries in applications that support remoting. Math Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions. MTAThreadAttribute Indicates that the COM threading model for an application is multithreaded apartment (MTA). MulticastDelegate Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list. NonSerializedAttribute Indicates that a field of a serializable class should not be serialized. This class cannot be inherited. NotImplementedException The exception that is thrown when a requested method or operation is not implemented. NotSupportedException The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. NullReferenceException The exception that is thrown when there is an attempt to dereference a null object reference. Object Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy. ObjectDisposedException The exception that is thrown when an operation is performed on a disposed object. ObsoleteAttribute Marks the program elements that are no longer in use. This class cannot be inherited. OutOfMemoryException The exception that is thrown when there is not enough memory to continue the execution of a program. ParamArrayAttribute Indicates that a method will allow a variable number of arguments in its invocation. This class cannot be inherited. Random Represents a random number generator, a device that produces a sequence of numbers that meet certain statistical requirements for randomness. SerializableAttribute Indicates that a class can be serialized. This class cannot be inherited. STAThreadAttribute Indicates that the COM threading model for an application is single-threaded apartment (STA). String Represents text as a sequence of UTF-16 code units. SystemException Serves as the base class for system exceptions namespace. TimeoutException The exception that is thrown when the time allotted for a process or operation has expired. Type Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types. Uri Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI. ValueType Provides the base class for value types. Version Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited. WeakReference Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection. Structs Boolean Represents a Boolean value. Byte Represents an 8-bit unsigned integer. Char Represents a character as a UTF-16 code unit. DateTime Represents an instant in time, typically expressed as a date and time of day. Double Represents a double-precision floating-point number. Guid Represents a globally unique identifier (GUID). Int16 Represents a 16-bit signed integer. Int32 Represents a 32-bit signed integer. Int64 Represents a 64-bit signed integer. IntPtr A platform-specific type that is used to represent a pointer or a handle. RuntimeArgumentHandle This value type is used for constructing System.ArgIterator. RuntimeFieldHandle Represents a field using an internal metadata token. RuntimeMethodHandle RuntimeMethodHandle is a handle to the internal metadata representation of a method. RuntimeTypeHandle Represents a type using an internal metadata token. SByte Represents an 8-bit signed integer. Single Represents a single-precision floating-point number. SpanByte Provides a type- and memory-safe representation of a contiguous region of arbitrary byte array TimeSpan Represents a time interval. TypedReference Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location. UInt16 Represents a 16-bit unsigned integer. UInt32 Represents a 32-bit unsigned integer. UInt64 Represents a 64-bit unsigned integer. UIntPtr A platform-specific type that is used to represent a pointer or a handle. Void Specifies a return value type for a method that does not return a value. Interfaces IAsyncResult Represents the status of an asynchronous operation. ICloneable Defines an interface indicating that an object may be cloned. IComparable Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances. ICustomFormatter Defines a method that supports custom formatting of the value of an object. IDisposable Defines a method to release allocated resources. IFormatProvider Provides a mechanism for retrieving an object to control formatting. IFormattable Provides functionality to format the value of an object into a string representation. Enums AttributeTargets Specifies the application elements on which it is valid to apply an attribute. Base64FormattingOptions Specifies whether relevant Convert.ToBase64CharArray and Convert.ToBase64String methods insert line breaks in their output. DateTimeKind Specifies whether a DateTime object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC. DayOfWeek Specifies the day of the week. TypeCode Specifies the type of an object. Uri.Flags Defines flags kept in m_Flags variable. UriHostNameType Defines host name types for the http and https protocols. method. UriKind Defines the kinds of Uri s for the IsWellFormedUriString(String, UriKind) method and several Uri methods. Delegates Action Encapsulates a method that has no parameters and does not return a value. Action<T> Encapsulates a method that has a single parameter and does not return a value. Action<T1, T2> Encapsulates a method that has a single parameter and does not return a value. AsyncCallback References a method to be called when a corresponding asynchronous operation completes. EventHandler Represents the method that will handle an event that has no event data. EventHandler<TEventArgs> Represents the method that will handle an event when the event provides data. Func<TResult> Encapsulates a method that has no parameters and returns a value of the type specified by the TResult parameter. Func<T, TResult> Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter. Func<T1, T2, TResult> Encapsulates a method that has one parameter and returns a value of the type specified by the TResult parameter."
  },
  "api/System.IAsyncResult.html": {
    "href": "api/System.IAsyncResult.html",
    "title": "Interface IAsyncResult | nanoFramework Documentation",
    "keywords": "Interface IAsyncResult Represents the status of an asynchronous operation. Namespace : System Assembly : mscorlib.dll Syntax public interface IAsyncResult Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ICloneable.html": {
    "href": "api/System.ICloneable.html",
    "title": "Interface ICloneable | nanoFramework Documentation",
    "keywords": "Interface ICloneable Defines an interface indicating that an object may be cloned. Namespace : System Assembly : mscorlib.dll Syntax public interface ICloneable Methods | Improve this Doc View Source Clone() Make a new object which is a copy of the object instanced. Declaration object Clone() Returns Type Description Object A new object that represents a clone of the object. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IComparable.html": {
    "href": "api/System.IComparable.html",
    "title": "Interface IComparable | nanoFramework Documentation",
    "keywords": "Interface IComparable Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances. Namespace : System Assembly : mscorlib.dll Syntax public interface IComparable Methods | Improve this Doc View Source CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration int CompareTo(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. Less than zero : This instance precedes obj in the sort order. Zero : This instance occurs in the same position in the sort order as obj. Greater than zero : This instance follows obj in the sort order. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ICustomFormatter.html": {
    "href": "api/System.ICustomFormatter.html",
    "title": "Interface ICustomFormatter | nanoFramework Documentation",
    "keywords": "Interface ICustomFormatter Defines a method that supports custom formatting of the value of an object. Namespace : System Assembly : mscorlib.dll Syntax public interface ICustomFormatter Remarks Available only in mscorlib build with support for System.Reflection. Methods | Improve this Doc View Source Format(String, Object, IFormatProvider) Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information. Declaration string Format(string format, object arg, IFormatProvider formatProvider) Parameters Type Name Description String format A format string containing formatting specifications. Object arg An object to format. IFormatProvider formatProvider An object that supplies format information about the current instance. Returns Type Description String The string representation of the value of arg, formatted as specified by format and formatProvider. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IDisposable.html": {
    "href": "api/System.IDisposable.html",
    "title": "Interface IDisposable | nanoFramework Documentation",
    "keywords": "Interface IDisposable Defines a method to release allocated resources. Namespace : System Assembly : mscorlib.dll Syntax public interface IDisposable Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration void Dispose() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IFormatProvider.html": {
    "href": "api/System.IFormatProvider.html",
    "title": "Interface IFormatProvider | nanoFramework Documentation",
    "keywords": "Interface IFormatProvider Provides a mechanism for retrieving an object to control formatting. Namespace : System Assembly : mscorlib.dll Syntax public interface IFormatProvider Remarks Available only in mscorlib build with support for System.Reflection. Methods | Improve this Doc View Source GetFormat(Type) Returns an object that provides formatting services for the specified type. Declaration object GetFormat(Type formatType) Parameters Type Name Description Type formatType An object that specifies the type of format object to return. Returns Type Description Object An instance of the object specified by formatType, if the IFormatProvider implementation can supply that type of object; otherwise, null reference (Nothing in Visual Basic). Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IFormattable.html": {
    "href": "api/System.IFormattable.html",
    "title": "Interface IFormattable | nanoFramework Documentation",
    "keywords": "Interface IFormattable Provides functionality to format the value of an object into a string representation. Namespace : System Assembly : mscorlib.dll Syntax public interface IFormattable Remarks Available only in mscorlib build with support for System.Reflection. Methods | Improve this Doc View Source ToString(String, IFormatProvider) Formats the value of the current instance using the specified format. Declaration string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description String format The format to use -or- A null reference(Nothing in Visual Basic) to use the default format defined for the type of the IFormattable implementation. IFormatProvider formatProvider The provider to use to format the value -or- A null reference(Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. Returns Type Description String The value of the current instance in the specified format. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IndexOutOfRangeException.html": {
    "href": "api/System.IndexOutOfRangeException.html",
    "title": "Class IndexOutOfRangeException | nanoFramework Documentation",
    "keywords": "Class IndexOutOfRangeException The exception that is thrown when an attempt is made to access an element of an array with an index that is outside the bounds of the array. This class cannot be inherited. Inheritance Object Exception SystemException IndexOutOfRangeException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class IndexOutOfRangeException : SystemException Constructors | Improve this Doc View Source IndexOutOfRangeException() Initializes a new instance of the IndexOutOfRangeException class. Declaration public IndexOutOfRangeException() | Improve this Doc View Source IndexOutOfRangeException(String) Initializes a new instance of the IndexOutOfRangeException class with a specified error message. Declaration public IndexOutOfRangeException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source IndexOutOfRangeException(String, Exception) Initializes a new instance of the IndexOutOfRangeException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IndexOutOfRangeException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Int16.html": {
    "href": "api/System.Int16.html",
    "title": "Struct Int16 | nanoFramework Documentation",
    "keywords": "Struct Int16 Represents a 16-bit signed integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Int16 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of an Int16. This field is constant. Declaration public const short MaxValue = 32767 Field Value Type Description Int16 Remarks The value of this constant is 32767; that is, hexadecimal 0x7FFF. | Improve this Doc View Source MinValue Represents the smallest possible value of Int16. This field is constant. Declaration public const short MinValue = -32768 Field Value Type Description Int16 Remarks The value of this constant is -32768; that is, hexadecimal 0x8000. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 16-bit signed integer equivalent. Declaration public static short Parse(string s) Parameters Type Name Description String s A string containing a number to convert. Returns Type Description Int16 A 16-bit signed integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.Int32.html": {
    "href": "api/System.Int32.html",
    "title": "Struct Int32 | nanoFramework Documentation",
    "keywords": "Struct Int32 Represents a 32-bit signed integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Int32 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of an Int32. This field is constant. Declaration public const int MaxValue = 2147483647 Field Value Type Description Int32 Remarks The value of this constant is 2,147,483,647; that is, hexadecimal 0x7FFFFFFF. | Improve this Doc View Source MinValue Represents the smallest possible value of Int32. This field is constant. Declaration public const int MinValue = -2147483648 Field Value Type Description Int32 Remarks The value of this constant is -2,147,483,648; that is, hexadecimal 0x80000000. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 32-bit signed integer equivalent. Declaration public static int Parse(string s) Parameters Type Name Description String s A string containing a number to convert. Returns Type Description Int32 A 32-bit signed integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A standard or custom numeric format string Returns Type Description String he string representation of the value of this instance as specified by format."
  },
  "api/System.Int64.html": {
    "href": "api/System.Int64.html",
    "title": "Struct Int64 | nanoFramework Documentation",
    "keywords": "Struct Int64 Represents a 64-bit signed integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Int64 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of an Int64. This field is constant. Declaration public const long MaxValue = 9223372036854775807L Field Value Type Description Int64 Remarks The value of this constant is 9,223,372,036,854,775,807; that is, hexadecimal 0x7FFFFFFFFFFFFFFF. | Improve this Doc View Source MinValue Represents the smallest possible value of an Int64. This field is constant. Declaration public const long MinValue = -9223372036854775808L Field Value Type Description Int64 Remarks The value of this constant is negative 9,223,372,036,854,775,808; that is, hexadecimal 0x8000000000000000. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 64-bit signed integer equivalent. Declaration public static long Parse(string s) Parameters Type Name Description String s A string containing a number to convert. Returns Type Description Int64 A 64-bit signed integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.IntPtr.html": {
    "href": "api/System.IntPtr.html",
    "title": "Struct IntPtr | nanoFramework Documentation",
    "keywords": "Struct IntPtr A platform-specific type that is used to represent a pointer or a handle. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct IntPtr"
  },
  "api/System.InvalidCastException.html": {
    "href": "api/System.InvalidCastException.html",
    "title": "Class InvalidCastException | nanoFramework Documentation",
    "keywords": "Class InvalidCastException The exception that is thrown for invalid casting or explicit conversion. Inheritance Object Exception SystemException InvalidCastException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class InvalidCastException : SystemException Constructors | Improve this Doc View Source InvalidCastException() Initializes a new instance of the InvalidCastException class. Declaration public InvalidCastException() | Improve this Doc View Source InvalidCastException(String) Initializes a new instance of the InvalidCastException class with a specified error message. Declaration public InvalidCastException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source InvalidCastException(String, Exception) Initializes a new instance of the InvalidCastException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public InvalidCastException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.InvalidOperationException.html": {
    "href": "api/System.InvalidOperationException.html",
    "title": "Class InvalidOperationException | nanoFramework Documentation",
    "keywords": "Class InvalidOperationException The exception that is thrown when a method call is invalid for the object's current state. Inheritance Object Exception SystemException InvalidOperationException ProtocolViolationException WebException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class InvalidOperationException : SystemException Constructors | Improve this Doc View Source InvalidOperationException() Initializes a new instance of the InvalidOperationException class. Declaration public InvalidOperationException() | Improve this Doc View Source InvalidOperationException(String) Initializes a new instance of the InvalidOperationException class with a specified error message. Declaration public InvalidOperationException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source InvalidOperationException(String, Exception) Initializes a new instance of the InvalidOperationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public InvalidOperationException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IO.Directory.html": {
    "href": "api/System.IO.Directory.html",
    "title": "Class Directory | nanoFramework Documentation",
    "keywords": "Class Directory Class for managing directories Inheritance Object Directory Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO Assembly : System.IO.FileSystem.dll Syntax public static class Directory Methods | Improve this Doc View Source CreateDirectory(String) Creates directory with the provided path. Declaration public static void CreateDirectory(string path) Parameters Type Name Description String path Path and name of the directory to create. Exceptions Type Condition IOException Path for creating the folder doesn't exist. This method does not create directories recursively. | Improve this Doc View Source Delete(String, Boolean) Deletes directory from storage. Declaration public static void Delete(string path, bool recursive = false) Parameters Type Name Description String path Path to the directory to be removed. Boolean recursive Parameter to be implemented. Exceptions Type Condition IOException This method will throw DirectoryNotEmpty exception if folder is not empty. | Improve this Doc View Source Exists(String) Determines whether the specified directory exists. Declaration public static bool Exists(string path) Parameters Type Name Description String path Path to the directory. Returns Type Description Boolean True if directory under given path exists, otherwise it returns false. Exceptions Type Condition ArgumentNullException Path must be defined. IOException Invalid drive or path to the parent folder doesn't exist. | Improve this Doc View Source GetDirectories(String) List directories from the specified folder. Declaration public static string[] GetDirectories(string path) Parameters Type Name Description String path Returns Type Description String [] When this method completes successfully, it returns an array of absolute paths to the subfolders in the specified directory. Exceptions Type Condition IOException Logical drive or a directory under given path does not exist. | Improve this Doc View Source GetFiles(String) List files from the specified folder. Declaration public static string[] GetFiles(string path) Parameters Type Name Description String path Path to the directory to list files from. Returns Type Description String [] When this method completes successfully, it returns a array of paths of the files in the given folder. Exceptions Type Condition IOException Logical drive or a directory under given path does not exist. | Improve this Doc View Source GetLastWriteTime(String) Determines the time of the last write/modification to directory under given path. Declaration public static DateTime GetLastWriteTime(string path) Parameters Type Name Description String path Returns Type Description DateTime Time of the last write/modification. Exceptions Type Condition IOException Logical drive or a directory under given path does not exist. | Improve this Doc View Source GetLogicalDrives() Determines a list of available logical drives. Declaration public static string[] GetLogicalDrives() Returns Type Description String [] String[] of available drives, ex. \"D:\\\" | Improve this Doc View Source Move(String, String) Moves directory from specified path to a new location. Declaration public static void Move(string sourcePath, string destinationPath) Parameters Type Name Description String sourcePath Name of directory to move. Absolute path. String destinationPath New path and name for the directory. Exceptions Type Condition Exception Source directory not existing or destination folder already existing."
  },
  "api/System.IO.File.html": {
    "href": "api/System.IO.File.html",
    "title": "Class File | nanoFramework Documentation",
    "keywords": "Class File Class for creating FileStream objects, and some basic file management routines such as Delete, etc. Inheritance Object File Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO Assembly : System.IO.FileSystem.dll Syntax public static class File Methods | Improve this Doc View Source Copy(String, String) Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Declaration public static void Copy(string sourceFileName, string destFileName) Parameters Type Name Description String sourceFileName The file to copy. String destFileName The name of the destination file. This cannot be a directory or an existing file. Exceptions Type Condition ArgumentException sourceFileName or destFileName is null or empty | Improve this Doc View Source Copy(String, String, Boolean) Copies an existing file to a new file. Overwriting a file of the same name is allowed. Declaration public static void Copy(string sourceFileName, string destFileName, bool overwrite) Parameters Type Name Description String sourceFileName The file to copy. String destFileName The name of the destination file. This cannot be a directory. Boolean overwrite true if the destination file can be overwritten; otherwise, false. Exceptions Type Condition ArgumentException sourceFileName or destFileName is null or empty | Improve this Doc View Source Create(String) Creates or overwrites a file in the specified path. Declaration public static FileStream Create(string path) Parameters Type Name Description String path The path and name of the file to create. Returns Type Description FileStream | Improve this Doc View Source Delete(String) Deletes the specified file. Declaration public static void Delete(string path) Parameters Type Name Description String path The name of the file to be deleted. Wild-card characters are not supported. Exceptions Type Condition ArgumentNullException Path must be defined. IOException Directory not found. or Not allowed to delete ReadOnly Files. or Not allowed to delete Directories. | Improve this Doc View Source Exists(String) Determines whether the specified file exists. Declaration public static bool Exists(string path) Parameters Type Name Description String path The file to check. Returns Type Description Boolean | Improve this Doc View Source GetAttributes(String) Gets the FileAttributes of the file on the path. Declaration public static FileAttributes GetAttributes(string path) Parameters Type Name Description String path The path to the file. Returns Type Description FileAttributes The FileAttributes of the file on the path. Exceptions Type Condition IOException File not found. | Improve this Doc View Source GetLastWriteTime(String) Determines the time of the last write/modification to file under given path. Declaration public static DateTime GetLastWriteTime(string path) Parameters Type Name Description String path Returns Type Description DateTime Time of the last write/modification. Exceptions Type Condition IOException Logical drive or a file under given path does not exist. | Improve this Doc View Source Move(String, String) Moves a specified file to a new location, providing the option to specify a new file name. Declaration public static void Move(string sourceFileName, string destFileName) Parameters Type Name Description String sourceFileName The name of the file to move. Absolute path. String destFileName The new path and name for the file. Exceptions Type Condition Exception Source File not existing or Destination File already existing. | Improve this Doc View Source SetAttributes(String, FileAttributes) Sets the specified FileAttributes of the file on the specified path. Declaration public static void SetAttributes(string path, FileAttributes fileAttributes) Parameters Type Name Description String path The path to the file. FileAttributes fileAttributes A bitwise combination of the enumeration values."
  },
  "api/System.IO.FileAccess.html": {
    "href": "api/System.IO.FileAccess.html",
    "title": "Enum FileAccess | nanoFramework Documentation",
    "keywords": "Enum FileAccess Contains constants for specifying the access you want for a file. You can have Read, Write or ReadWrite access. Namespace : System.IO Assembly : System.IO.FileSystem.dll Syntax [Flags] public enum FileAccess Fields Name Description Read Specifies read access to the file. Data can be read from the file and the file pointer can be moved. Combine with WRITE for read-write access. ReadWrite Specifies read and write access to the file. Data can be written to the file and the file pointer can be moved. Data can also be read from the file. Write Specifies write access to the file. Data can be written to the file and the file pointer can be moved. Combine with READ for read-write access. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.IO.FileAttributes.html": {
    "href": "api/System.IO.FileAttributes.html",
    "title": "Enum FileAttributes | nanoFramework Documentation",
    "keywords": "Enum FileAttributes Provides attributes for files and directories. Namespace : System.IO Assembly : System.IO.FileSystem.dll Syntax [Flags] public enum FileAttributes Fields Name Description Archive This file is marked to be included in incremental backup operation. Directory The file is a directory. Hidden The file is hidden, and thus is not included in an ordinary directory listing. ReadOnly The file is read-only. System The file is a system file. That is, the file is part of the operating system or is used exclusively by the operating system. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.IO.FileMode.html": {
    "href": "api/System.IO.FileMode.html",
    "title": "Enum FileMode | nanoFramework Documentation",
    "keywords": "Enum FileMode Contains constants for specifying how the OS should open a file. These will control whether you overwrite a file, open an existing file, or some combination thereof. To append to a file, use Append (which maps to OpenOrCreate then we seek to the end of the file). To truncate a file or create it if it doesn't exist, use Create. Namespace : System.IO Assembly : System.IO.FileSystem.dll Syntax public enum FileMode Fields Name Description Append Opens the file if it exists and seeks to the end. Otherwise, creates a new file. Create Creates a new file. If the file already exists, it is overwritten. CreateNew Creates a new file. An exception is raised if the file already exists. Open Opens an existing file. An exception is raised if the file does not exist. OpenOrCreate Opens the file if it exists. Otherwise, creates a new file. Truncate Opens an existing file. Once opened, the file is truncated so that its size is zero bytes. The calling process must open the file with at least WRITE access. An exception is raised if the file does not exist. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.IO.FileShare.html": {
    "href": "api/System.IO.FileShare.html",
    "title": "Enum FileShare | nanoFramework Documentation",
    "keywords": "Enum FileShare Contains constants for controlling file sharing options while opening files. You can specify what access other processes trying to open the same file concurrently can have. Namespace : System.IO Assembly : System.IO.FileSystem.dll Syntax [Flags] public enum FileShare Fields Name Description None No sharing. Any request to open the file (by this process or another process) will fail until the file is closed. Read Allows subsequent opening of the file for reading. If this flag is not specified, any request to open the file for reading (by this process or another process) will fail until the file is closed. ReadWrite Allows subsequent opening of the file for writing or reading. If this flag is not specified, any request to open the file for writing or reading (by this process or another process) will fail until the file is closed. Write Allows subsequent opening of the file for writing. If this flag is not specified, any request to open the file for writing (by this process or another process) will fail until the file is closed. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.IO.FileStream.html": {
    "href": "api/System.IO.FileStream.html",
    "title": "Class FileStream | nanoFramework Documentation",
    "keywords": "Class FileStream Provides a Stream for a file, supporting both synchronous and asynchronous read and write operations. Inheritance Object MarshalByRefObject Stream FileStream Implements IDisposable Inherited Members Stream.Dispose() Stream.Finalize() Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO Assembly : System.IO.FileSystem.dll Syntax public class FileStream : Stream, IDisposable Constructors | Improve this Doc View Source FileStream(String, FileMode) Initializes a new instance of the FileStream class with the specified path and creation mode. Declaration public FileStream(string path, FileMode mode) Parameters Type Name Description String path A relative or absolute path for the file that the current FileStream object will encapsulate. FileMode mode One of the enumeration values that determines how to open or create the file. | Improve this Doc View Source FileStream(String, FileMode, FileAccess) Initializes a new instance of the FileStream class with the specified path, creation mode, and read/write permission. Declaration public FileStream(string path, FileMode mode, FileAccess access) Parameters Type Name Description String path A relative or absolute path for the file that the current FileStream object will encapsulate. FileMode mode One of the enumeration values that determines how to open or create the file. FileAccess access A bitwise combination of the enumeration values that determines how the file can be accessed by the FileStream object. This also determines the values returned by the CanRead and CanWrite properties of the FileStream object. Properties | Improve this Doc View Source CanRead Gets a value that indicates whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description Boolean Overrides Stream.CanRead | Improve this Doc View Source CanSeek Gets a value that indicates whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean Overrides Stream.CanSeek | Improve this Doc View Source CanWrite Gets a value that indicates whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Overrides Stream.CanWrite | Improve this Doc View Source FilePath Gets the full file-system path of the current file, if the file has a path. Declaration public string FilePath { get; } Property Value Type Description String | Improve this Doc View Source Length Gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description Int64 Overrides Stream.Length | Improve this Doc View Source Name Gets the name of the file including the file name extension. Declaration public string Name { get; } Property Value Type Description String The name of the file including the file name extension. | Improve this Doc View Source Position Gets or sets the current position of this stream. Declaration public override long Position { get; set; } Property Value Type Description Int64 Overrides Stream.Position Methods | Improve this Doc View Source Close() Closes the current stream and releases any resources associated with the current stream. Declaration public override void Close() Overrides Stream.Close() | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the FileStream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Stream.Dispose(Boolean) | Improve this Doc View Source Finalize() Destructor Declaration protected void Finalize() | Improve this Doc View Source Flush() Clears buffers for this stream and causes any buffered data to be written to the file. Declaration public override void Flush() Overrides Stream.Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads a block of bytes from the stream and writes the data in a given buffer. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. Int32 offset The byte offset in array at which the read bytes will be placed. Int32 count The maximum number of bytes to read. Returns Type Description Int32 The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached. Overrides Stream.Read(Byte[], Int32, Int32) | Improve this Doc View Source ReadByte() Reads a byte from the file and advances the read position one byte. Declaration public override int ReadByte() Returns Type Description Int32 Overrides Stream.ReadByte() | Improve this Doc View Source Seek(Int64, SeekOrigin) Sets the current position of this stream to the given value. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset The point relative to origin from which to begin seeking. SeekOrigin origin Specifies the beginning, the end, or the current position as a reference point for offset, using a value of type SeekOrigin. Returns Type Description Int64 The new position in the stream. Overrides Stream.Seek(Int64, SeekOrigin) | Improve this Doc View Source SetLength(Int64) Sets the length of this stream to the given value. Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value The new length of the stream. Overrides Stream.SetLength(Int64) | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes a block of bytes to the file stream. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer The buffer containing data to write to the stream. Int32 offset The zero-based byte offset in array from which to begin copying bytes to the stream. Int32 count The maximum number of bytes to write. Overrides Stream.Write(Byte[], Int32, Int32) | Improve this Doc View Source WriteByte(Byte) Writes a byte to the current position in the file stream. Declaration public override void WriteByte(byte value) Parameters Type Name Description Byte value A byte to write to the stream. Overrides Stream.WriteByte(Byte) Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IO.html": {
    "href": "api/System.IO.html",
    "title": "Namespace System.IO | nanoFramework Documentation",
    "keywords": "Namespace System.IO Classes Directory Class for managing directories File Class for creating FileStream objects, and some basic file management routines such as Delete, etc. FileStream Provides a Stream for a file, supporting both synchronous and asynchronous read and write operations. IOException The exception that is thrown when an I/O error occurs. MemoryStream MemoryStream class Path Performs operations on String instances that contain file or directory path information. Stream Provides a generic view of a sequence of bytes. This is an abstract class. Enums FileAccess Contains constants for specifying the access you want for a file. You can have Read, Write or ReadWrite access. FileAttributes Provides attributes for files and directories. FileMode Contains constants for specifying how the OS should open a file. These will control whether you overwrite a file, open an existing file, or some combination thereof. To append to a file, use Append (which maps to OpenOrCreate then we seek to the end of the file). To truncate a file or create it if it doesn't exist, use Create. FileShare Contains constants for controlling file sharing options while opening files. You can specify what access other processes trying to open the same file concurrently can have. IOException.IOExceptionErrorCode Provides values for error codes. SeekOrigin Specifies the position in a stream to use for seeking."
  },
  "api/System.IO.IOException.html": {
    "href": "api/System.IO.IOException.html",
    "title": "Class IOException | nanoFramework Documentation",
    "keywords": "Class IOException The exception that is thrown when an I/O error occurs. Inheritance Object Exception SystemException IOException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO Assembly : mscorlib.dll Syntax public class IOException : SystemException Constructors | Improve this Doc View Source IOException() Initializes a new instance of the IOException class with its message string set to the empty string (\"\"), its HRESULT set to COR_E_IO, and its inner exception set to a null reference. Declaration public IOException() | Improve this Doc View Source IOException(String) Initializes a new instance of the IOException class with its message string set to message, its HRESULT set to COR_E_IO, and its inner exception set to null reference (Nothing in Visual Basic). Declaration public IOException(string message) Parameters Type Name Description String message A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. | Improve this Doc View Source IOException(String, Exception) Initializes a new instance of the IOException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public IOException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. | Improve this Doc View Source IOException(String, Int32) Initializes a new instance of the IOException class with its message string set to message and its HRESULT user-defined. Declaration public IOException(string message, int hresult) Parameters Type Name Description String message A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. Int32 hresult An integer identifying the error that has occurred. Properties | Improve this Doc View Source ErrorCode The error code associated with this IOException object. Declaration public IOException.IOExceptionErrorCode ErrorCode { get; } Property Value Type Description IOException.IOExceptionErrorCode The error code. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IO.IOException.IOExceptionErrorCode.html": {
    "href": "api/System.IO.IOException.IOExceptionErrorCode.html",
    "title": "Enum IOException.IOExceptionErrorCode | nanoFramework Documentation",
    "keywords": "Enum IOException.IOExceptionErrorCode Provides values for error codes. Namespace : System.IO Assembly : mscorlib.dll Syntax public enum IOExceptionErrorCode Fields Name Description DirectoryNotEmpty Directory not empty DirectoryNotFound Directory not found FileNotFound File not found InvalidDriver Invalid driver Others Others PathAlreadyExists Path already exists PathTooLong Path too long TooManyOpenHandles Too many open handles UnauthorizedAccess Unauthorized access VolumeNotFound Volume not found"
  },
  "api/System.IO.MemoryStream.html": {
    "href": "api/System.IO.MemoryStream.html",
    "title": "Class MemoryStream | nanoFramework Documentation",
    "keywords": "Class MemoryStream MemoryStream class Inheritance Object MarshalByRefObject Stream MemoryStream Implements IDisposable Inherited Members Stream.Close() Stream.Dispose() Stream.Finalize() Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO Assembly : System.IO.FileSystem.dll Syntax public class MemoryStream : Stream, IDisposable Constructors | Improve this Doc View Source MemoryStream() Creates an empty memory stream. Declaration public MemoryStream() Remarks Default capacity is 256. | Improve this Doc View Source MemoryStream(Byte[]) Creates a memory stream from a buffer. Declaration public MemoryStream(byte[] buffer) Parameters Type Name Description Byte [] buffer Exceptions Type Condition ArgumentNullException Buffer can't be null. Properties | Improve this Doc View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description Boolean true if the stream supports reading; otherwise, false. Overrides Stream.CanRead | Improve this Doc View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean true if the stream supports seeking; otherwise, false. Overrides Stream.CanSeek | Improve this Doc View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean true if the stream supports writing; otherwise, false. Overrides Stream.CanWrite | Improve this Doc View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description Int64 A long value representing the length of the stream in bytes. Overrides Stream.Length | Improve this Doc View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description Int64 The current position within the stream. Overrides Stream.Position Exceptions Type Condition IOException Can't adjust position out of the buffer size for fixed size buffer ArgumentOutOfRangeException Position can't be negative or higher than the stream allocated size. Methods | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Stream.Dispose(Boolean) | Improve this Doc View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. Int32 offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. Int32 count The maximum number of bytes to be read from the current stream. Returns Type Description Int32 The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Overrides Stream.Read(Byte[], Int32, Int32) Exceptions Type Condition ArgumentException Invalid length. ArgumentNullException IBuffer is null. ArgumentOutOfRangeException Offset is negative or longer than count. | Improve this Doc View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public override int ReadByte() Returns Type Description Int32 The unsigned byte cast to an Int32, or -1 if at the end of the stream. Overrides Stream.ReadByte() | Improve this Doc View Source Seek(Int64, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description Int64 The new position within the current stream. Overrides Stream.Seek(Int64, SeekOrigin) Exceptions Type Condition IOException You cannot Seek before origin or you cannot Seek after a fixed size buffer. ArgumentException \"Invalid seek origin.\" | Improve this Doc View Source SetLength(Int64) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value The desired length of the current stream in bytes. Overrides Stream.SetLength(Int64) | Improve this Doc View Source ToArray() Declaration public virtual byte[] ToArray() Returns Type Description Byte [] | Improve this Doc View Source Write(Byte[], Int32, Int32) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. This method copies count bytes from buffer to the current stream. Int32 offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. Int32 count The number of bytes to be written to the current stream. Overrides Stream.Write(Byte[], Int32, Int32) | Improve this Doc View Source WriteByte(Byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public override void WriteByte(byte value) Parameters Type Name Description Byte value The byte to write to the stream. Overrides Stream.WriteByte(Byte) | Improve this Doc View Source WriteTo(Stream) Writes this MemoryStream to another stream. Declaration public virtual void WriteTo(Stream stream) Parameters Type Name Description Stream stream Stream to write into. Exceptions Type Condition ArgumentNullException if stream is null. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IO.Path.html": {
    "href": "api/System.IO.Path.html",
    "title": "Class Path | nanoFramework Documentation",
    "keywords": "Class Path Performs operations on String instances that contain file or directory path information. Inheritance Object Path Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO Assembly : System.IO.FileSystem.dll Syntax public sealed class Path Fields | Improve this Doc View Source DirectorySeparatorChar Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization. Declaration public static readonly char DirectorySeparatorChar Field Value Type Description Char | Improve this Doc View Source InvalidPathChars Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the Path class. Declaration public static readonly char[] InvalidPathChars Field Value Type Description Char [] Methods | Improve this Doc View Source ChangeExtension(String, String) Changes the extension of a file path. The path parameter specifies a file path, and the extension parameter specifies a file extension (with a leading period, such as \".exe\" or \".cool\" ). The function returns a file path with the same root, directory, and base name parts as path , but with the file extension changed to the specified extension.If path is null, the function returns null. If path does not contain a file extension, the new file extension is appended to the path.If extension is null, any existing extension is removed from path . Declaration public static string ChangeExtension(string path, string extension) Parameters Type Name Description String path The path for which to change file extension. String extension The new file extension (with a leading period), or null to remove the extension. Returns Type Description String | Improve this Doc View Source Combine(String, String) Combines two strings into a path. Declaration public static string Combine(string path1, string path2) Parameters Type Name Description String path1 The first path to combine. String path2 The second path to combine. Returns Type Description String | Improve this Doc View Source GetDirectoryName(String) Returns the directory path of a file path. This method effectively removes the last element of the given file path, i.e.it returns a string consisting of all characters up to but not including the last backslash(\"&quot;) in the file path. The returned value is null if the file path is null or if the file path denotes a root (such as \"&quot;, \"C:\", or \"\\server\\share\"). Declaration public static string GetDirectoryName(string path) Parameters Type Name Description String path The path of a file or directory. Returns Type Description String The directory path of the given path, or null if the given path denotes a root. | Improve this Doc View Source GetExtension(String) Returns the extension of the given path. The returned value includes the period(\".\") character of the extension except when you have a terminal period when you get String.Empty, such as \".exe\" or \".cpp\" . The returned value is null if the given path is null or if the given path does not include an extension. Declaration public static string GetExtension(string path) Parameters Type Name Description String path The path of a file or directory. Returns Type Description String The extension of the given path, or null if the given path does not include an extension. Exceptions Type Condition ArgumentException if path contains invalid characters. | Improve this Doc View Source GetFileName(String) Returns the name and extension parts of the given path. The resulting string contains the characters of path that follow the last backslash (\"&quot;), slash (\"/\"), or colon (\":\") character in path .The resulting string is the entire path if path contains no backslash after removing trailing slashes, slash, or colon characters.The resulting string is null if path is null. Declaration public static string GetFileName(string path) Parameters Type Name Description String path The path of a file or directory. Returns Type Description String The name and extension parts of the given path. Exceptions Type Condition ArgumentException if path contains invalid characters. | Improve this Doc View Source GetFileNameWithoutExtension(String) Returns the file name of the specified path string without the extension. Declaration public static string GetFileNameWithoutExtension(string path) Parameters Type Name Description String path The path of the file. Returns Type Description String | Improve this Doc View Source GetFullPath(String) Returns the absolute path for the specified path string. Declaration public static string GetFullPath(string path) Parameters Type Name Description String path The file or directory for which to obtain absolute path information. Returns Type Description String | Improve this Doc View Source GetInvalidPathChars() Gets an array containing the characters that are not allowed in path names. Declaration public static char[] GetInvalidPathChars() Returns Type Description Char [] An array containing the characters that are not allowed in path names. | Improve this Doc View Source GetPathRoot(String) Tests if a path includes a file extension. The result is true if the characters that follow the last directory separator('\\' or '/') or volume separator(':') in the path include a period(\".\") other than a terminal period.The result is false otherwise. Declaration public static string GetPathRoot(string path) Parameters Type Name Description String path The path of a file or directory. Returns Type Description String The root portion of the given path. Exceptions Type Condition ArgumentException if path contains invalid characters. | Improve this Doc View Source HasExtension(String) Tests if a path includes a file extension. The result is true if the characters that follow the last directory separator('\\' or '/') or volume separator(':') in the path include a period(\".\") other than a terminal period.The result is false otherwise. Declaration public static bool HasExtension(string path) Parameters Type Name Description String path The path to test. Returns Type Description Boolean Boolean indicating whether the path includes a file extension. Exceptions Type Condition ArgumentException if path contains invalid characters. | Improve this Doc View Source IsPathRooted(String) Tests if the given path contains a root. A path is considered rooted if it starts with a backslash(\"&quot;) or a drive letter and a colon (\":\"). Declaration public static bool IsPathRooted(string path) Parameters Type Name Description String path The path to test. Returns Type Description Boolean Boolean indicating whether the path is rooted. Exceptions Type Condition ArgumentException if path contains invalid characters. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IO.Ports.Handshake.html": {
    "href": "api/System.IO.Ports.Handshake.html",
    "title": "Enum Handshake | nanoFramework Documentation",
    "keywords": "Enum Handshake Specifies the control protocol used in establishing a serial port communication for a SerialPort object. Namespace : System.IO.Ports Assembly : System.IO.Ports.dll Syntax public enum Handshake Fields Name Description None No control is used for the handshake. RequestToSend Request-to-Send (RTS) hardware flow control is used. RTS signals that data is available for transmission. If the input buffer becomes full, the RTS line will be set to false. The RTS line will be set to true when more room becomes available in the input buffer. RequestToSendXOnXOff Both the Request-to-Send (RTS) hardware control and the XON/XOFF software controls are used. XOnXOff The XON/XOFF software control protocol is used. The XOFF control is sent to stop the transmission of data. The XON control is sent to resume the transmission. These software controls are used instead of Request to Send (RTS) and Clear to Send (CTS) hardware controls. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.IO.Ports.html": {
    "href": "api/System.IO.Ports.html",
    "title": "Namespace System.IO.Ports | nanoFramework Documentation",
    "keywords": "Namespace System.IO.Ports Classes SerialDataReceivedEventArgs Provides data for the DataReceived event. SerialPort Represents a serial port resource. Enums Handshake Specifies the control protocol used in establishing a serial port communication for a SerialPort object. Parity Specifies the parity bit for a SerialPort object. SerialData Specifies the type of character that was received on the serial port of the SerialPort object. SerialMode Defines values for hardware and software mode of operation. StopBits Specifies the number of stop bits used on the SerialPort object. Delegates SerialDataReceivedEventHandler Represents the method that will handle the System.IO.Ports.SerialPort.DataReceived event of a SerialPort object."
  },
  "api/System.IO.Ports.Parity.html": {
    "href": "api/System.IO.Ports.Parity.html",
    "title": "Enum Parity | nanoFramework Documentation",
    "keywords": "Enum Parity Specifies the parity bit for a SerialPort object. Namespace : System.IO.Ports Assembly : System.IO.Ports.dll Syntax public enum Parity Fields Name Description Even Sets the parity bit so that the count of bits set is an even number. None No parity check occurs. Odd Sets the parity bit so that the count of bits set is an odd number. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.IO.Ports.SerialData.html": {
    "href": "api/System.IO.Ports.SerialData.html",
    "title": "Enum SerialData | nanoFramework Documentation",
    "keywords": "Enum SerialData Specifies the type of character that was received on the serial port of the SerialPort object. Namespace : System.IO.Ports Assembly : System.IO.Ports.dll Syntax public enum SerialData Fields Name Description Chars A character was received and placed in the input buffer. WatchChar The end of file character was received and placed in the input buffer. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.IO.Ports.SerialDataReceivedEventArgs.html": {
    "href": "api/System.IO.Ports.SerialDataReceivedEventArgs.html",
    "title": "Class SerialDataReceivedEventArgs | nanoFramework Documentation",
    "keywords": "Class SerialDataReceivedEventArgs Provides data for the DataReceived event. Inheritance Object EventArgs SerialDataReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO.Ports Assembly : System.IO.Ports.dll Syntax public class SerialDataReceivedEventArgs : EventArgs Properties | Improve this Doc View Source EventType Gets the event type. Declaration public SerialData EventType { get; } Property Value Type Description SerialData Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IO.Ports.SerialDataReceivedEventHandler.html": {
    "href": "api/System.IO.Ports.SerialDataReceivedEventHandler.html",
    "title": "Delegate SerialDataReceivedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate SerialDataReceivedEventHandler Represents the method that will handle the System.IO.Ports.SerialPort.DataReceived event of a SerialPort object. Namespace : System.IO.Ports Assembly : System.IO.Ports.dll Syntax public delegate void SerialDataReceivedEventHandler(object sender, SerialDataReceivedEventArgs e); Parameters Type Name Description Object sender The sender of the event, which is the SerialPort object. SerialDataReceivedEventArgs e A SerialDataReceivedEventArgs object that contains the event data. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IO.Ports.SerialMode.html": {
    "href": "api/System.IO.Ports.SerialMode.html",
    "title": "Enum SerialMode | nanoFramework Documentation",
    "keywords": "Enum SerialMode Defines values for hardware and software mode of operation. Namespace : System.IO.Ports Assembly : System.IO.Ports.dll Syntax public enum SerialMode Fields Name Description Normal Normal Serial mode with handshake define by SerialHandshake. RS485 Used for Half duplex RS485 mode. Puts the port in to half duplex RS485 mode where the RTS is raised while the port is sending data. Once data is completely sent the RTS signal is lowered. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.IO.Ports.SerialPort.html": {
    "href": "api/System.IO.Ports.SerialPort.html",
    "title": "Class SerialPort | nanoFramework Documentation",
    "keywords": "Class SerialPort Represents a serial port resource. Inheritance Object SerialPort Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO.Ports Assembly : System.IO.Ports.dll Syntax public sealed class SerialPort : IDisposable Constructors | Improve this Doc View Source SerialPort(String, Int32, Parity, Int32, StopBits) Initializes a new instance of the SerialPort class using the specified port name, baud rate, parity bit, data bits, and stop bit. Declaration public SerialPort(string portName, int baudRate = 9600, Parity parity = Parity.None, int dataBits = 8, StopBits stopBits = StopBits.One) Parameters Type Name Description String portName The port to use (for example, COM1). Int32 baudRate The baud rate. Parity parity One of the Parity values. Int32 dataBits The data bits value. StopBits stopBits One of the StopBits values. Exceptions Type Condition IOException The specified port could not be found or opened. ArgumentException The specified port is already opened. Properties | Improve this Doc View Source BaseStream Gets the underlying Stream object for a SerialPort object. Declaration public Stream BaseStream { get; } Property Value Type Description Stream Exceptions Type Condition InvalidOperationException The stream is closed. This can occur because the Open() method has not been called or the Close() method has been called. | Improve this Doc View Source BaudRate Gets or sets the serial baud rate. Declaration public int BaudRate { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException The baud rate specified is less than or equal to zero, or is greater than the maximum allowable baud rate for the device. IOException The port is in an invalid state. -or- An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid. BytesToRead Gets the number of bytes of data in the receive buffer. Declaration public int BytesToRead { get; } Property Value Type Description Int32 The number of bytes of data in the receive buffer. Exceptions Type Condition InvalidOperationException The port is not open. | Improve this Doc View Source DataBits Gets or sets the standard length of data bits per byte. Declaration public int DataBits { get; set; } Property Value Type Description Int32 Exceptions Type Condition IOException The port is in an invalid state. -or- An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid. ArgumentOutOfRangeException The data bits value is less than 5 or more than 8. | Improve this Doc View Source Handshake Gets or sets the handshaking protocol for serial port transmission of data using a value from Handshake . Declaration public Handshake Handshake { get; set; } Property Value Type Description Handshake Exceptions Type Condition IOException The port is in an invalid state. -or- An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid. ArgumentOutOfRangeException The value passed is not a valid value in the Handshake enumeration. | Improve this Doc View Source IsOpen Gets a value indicating the open or closed status of the SerialPort object. Declaration public bool IsOpen { get; } Property Value Type Description Boolean Exceptions Type Condition ArgumentNullException The IsOpen value passed is null. ArgumentException The IsOpen value passed is an empty string (\"\"). | Improve this Doc View Source Mode Gets or sets the Serial Mode Declaration public SerialMode Mode { get; set; } Property Value Type Description SerialMode Remarks This is a .NET nanoFramework property only. | Improve this Doc View Source NewLine Gets or sets the value used to interpret the end of a call to the ReadLine() and WriteLine(String) (System.String) methods. Declaration public string NewLine { get; set; } Property Value Type Description String Exceptions Type Condition ArgumentException The property value is empty or the property value is null. | Improve this Doc View Source Parity Gets or sets the parity-checking protocol. Declaration public Parity Parity { get; set; } Property Value Type Description Parity Exceptions Type Condition IOException The port is in an invalid state. -or- An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid. | Improve this Doc View Source PortName Gets the port for communications. Declaration public string PortName { get; } Property Value Type Description String Remarks .NET nanoFramework doesn't support changing the port. | Improve this Doc View Source ReadTimeout Gets or sets the number of milliseconds before a time-out occurs when a read operation does not finish. Declaration public int ReadTimeout { get; set; } Property Value Type Description Int32 Exceptions Type Condition IOException The port is in an invalid state. -or- An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid. ArgumentOutOfRangeException The read time-out value is less than zero and not equal to Timeout . | Improve this Doc View Source ReceivedBytesThreshold Gets or sets the number of bytes in the internal input buffer before a DataReceived event occurs. Declaration public int ReceivedBytesThreshold { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException The ReceivedBytesThreshold value is less than or equal to zero. | Improve this Doc View Source StopBits Gets or sets the standard number of stopbits per byte. Declaration public StopBits StopBits { get; set; } Property Value Type Description StopBits Exceptions Type Condition IOException The port is in an invalid state. -or- An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid. | Improve this Doc View Source WatchChar Sets a character to watch for in the incoming data stream. Declaration public char WatchChar { get; set; } Property Value Type Description Char Remarks This property is specific to .NET nanoFramework. There is no equivalent in the System.IO.Ports API. When calling any of the Read function with a buffer, no matter if the requested quantity of bytes hasn't been read, only the specific amount of data will be returned up to the character. Also if this character is received in the incoming data stream, an event is fired with it's SerialData parameter set to WatchChar . | Improve this Doc View Source WriteTimeout Gets or sets the number of milliseconds before a time-out occurs when a write operation does not finish. Declaration public int WriteTimeout { get; set; } Property Value Type Description Int32 Exceptions Type Condition IOException The port is in an invalid state. -or- An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid. ArgumentOutOfRangeException The WriteTimeout value is less than zero and not equal to Timeout . Methods | Improve this Doc View Source Close() Closes the port connection, sets the IsOpen property to false, and disposes of the internal Stream object. Declaration public void Close() Exceptions Type Condition IOException The port is in an invalid state. -or- An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid. | Improve this Doc View Source Dispose() Dispose the Serial Port Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the SerialPort and optionally releases the managed resources. Declaration protected void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Exceptions Type Condition IOException The port is in an invalid state. -or- An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid. | Improve this Doc View Source GetPortNames() Gets an array of serial port names for the current computer. Declaration public static string[] GetPortNames() Returns Type Description String [] An array of serial port names for the current computer. | Improve this Doc View Source Open() Opens a new serial port connection. Declaration public void Open() Exceptions Type Condition InvalidOperationException The specified port on the current instance of the SerialPort . is already open. ArgumentException One (or more) of the properties set to configure this SerialPort are invalid. Read(Byte[], Int32, Int32) Reads a number of bytes from the SerialPort input buffer and writes those bytes into a byte array at the specified offset. Declaration public extern int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer The byte array to write the input to. Int32 offset The offset in buffer at which to write the bytes. Int32 count The maximum number of bytes to read. Fewer bytes are read if count is greater than the number of bytes in the input buffer. Returns Type Description Int32 The number of bytes read. Exceptions Type Condition ArgumentNullException The buffer passed is null. InvalidOperationException The specified port is not open. ArgumentOutOfRangeException The offset or count parameters are outside a valid region of the buffer being passed. Either offset or count is less than zero. ArgumentException offset plus count is greater than the length of the buffer. TimeoutException No bytes were available to read. | Improve this Doc View Source ReadByte() Synchronously reads one byte from the SerialPort input buffer. Declaration public int ReadByte() Returns Type Description Int32 The byte, cast to an Int32 , or -1 if the end of the stream has been read. Exceptions Type Condition InvalidOperationException The specified port is not open. TimeoutException The operation did not complete before the time-out period ended. -or- No byte was read. ReadExisting() Reads all immediately available bytes, based on the encoding, in both the stream and the input buffer of the SerialPort object. Declaration public extern string ReadExisting() Returns Type Description String The contents of the stream and the input buffer of the SerialPort object. Exceptions Type Condition InvalidOperationException The specified port is not open. ReadLine() Reads up to the NewLine value in the input buffer. Declaration public extern string ReadLine() Returns Type Description String The contents of the input buffer up to the first occurrence of a NewLine value. Exceptions Type Condition InvalidOperationException The specified port is not open. TimeoutException The operation did not complete before the time-out period ended. -or- No bytes were read. Write(Byte[], Int32, Int32) Writes a specified number of bytes to the serial port using data from a buffer. Declaration public extern void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer The byte array that contains the data to write to the port. Int32 offset The zero-based byte offset in the buffer parameter at which to begin copying bytes to the port. Int32 count The number of characters to write. Exceptions Type Condition ArgumentNullException The buffer passed is null. InvalidOperationException The specified port is not open. ArgumentOutOfRangeException The offset or count parameters are outside a valid region of the buffer being passed. Either offset or count is less than zero. ArgumentException offset plus count is greater than the length of the buffer. TimeoutException The operation did not complete before the time-out period ended. | Improve this Doc View Source Write(String) Writes the specified string to the serial port. Declaration public void Write(string text) Parameters Type Name Description String text The string for output. Exceptions Type Condition InvalidOperationException The specified port is not open. ArgumentNullException text is null. TimeoutException The operation did not complete before the time-out period ended. | Improve this Doc View Source WriteLine(String) Writes the specified string and the NewLine value to the output buffer. Declaration public void WriteLine(string text) Parameters Type Name Description String text The string to write to the output buffer. Exceptions Type Condition ArgumentNullException The text parameter is null. InvalidOperationException The specified port is not open. TimeoutException The WriteLine(String) (System.String) method could not write to the stream. Events | Improve this Doc View Source DataReceived Indicates that data has been received through a port represented by the SerialPort object. Declaration public event SerialDataReceivedEventHandler DataReceived Event Type Type Description SerialDataReceivedEventHandler Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.IO.Ports.StopBits.html": {
    "href": "api/System.IO.Ports.StopBits.html",
    "title": "Enum StopBits | nanoFramework Documentation",
    "keywords": "Enum StopBits Specifies the number of stop bits used on the SerialPort object. Namespace : System.IO.Ports Assembly : System.IO.Ports.dll Syntax public enum StopBits Fields Name Description One One stop bit is used. OnePointFive 1.5 stop bits are used. Two Two stop bits are used. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.IO.SeekOrigin.html": {
    "href": "api/System.IO.SeekOrigin.html",
    "title": "Enum SeekOrigin | nanoFramework Documentation",
    "keywords": "Enum SeekOrigin Specifies the position in a stream to use for seeking. Namespace : System.IO Assembly : mscorlib.dll Syntax public enum SeekOrigin Remarks These constants match Win32's FILE_BEGIN, FILE_CURRENT, and FILE_END Fields Name Description Begin Specifies the beginning of a stream. Current Specifies the current position within a stream. End Specifies the end of a stream."
  },
  "api/System.IO.Stream.html": {
    "href": "api/System.IO.Stream.html",
    "title": "Class Stream | nanoFramework Documentation",
    "keywords": "Class Stream Provides a generic view of a sequence of bytes. This is an abstract class. Inheritance Object MarshalByRefObject Stream FileStream MemoryStream NetworkStream Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.IO Assembly : mscorlib.dll Syntax public abstract class Stream : MarshalByRefObject, IDisposable Properties | Improve this Doc View Source CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. Declaration public abstract bool CanRead { get; } Property Value Type Description Boolean true if the stream supports reading; otherwise, false. | Improve this Doc View Source CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. Declaration public abstract bool CanSeek { get; } Property Value Type Description Boolean true if the stream supports seeking; otherwise, false. | Improve this Doc View Source CanTimeout Gets a value that determines whether the current stream can time out. Declaration public virtual bool CanTimeout { get; } Property Value Type Description Boolean A value that determines whether the current stream can time out. | Improve this Doc View Source CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. Declaration public abstract bool CanWrite { get; } Property Value Type Description Boolean true if the stream supports writing; otherwise, false. | Improve this Doc View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public abstract long Length { get; } Property Value Type Description Int64 A long value representing the length of the stream in bytes. | Improve this Doc View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public abstract long Position { get; set; } Property Value Type Description Int64 The current position within the stream. | Improve this Doc View Source ReadTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. Declaration public virtual int ReadTimeout { get; set; } Property Value Type Description Int32 A value, in milliseconds, that determines how long the stream will attempt to read before timing out. Exceptions Type Condition InvalidOperationException | Improve this Doc View Source WriteTimeout Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. Declaration public virtual int WriteTimeout { get; set; } Property Value Type Description Int32 A value, in milliseconds, that determines how long the stream will attempt to write before timing out. Exceptions Type Condition InvalidOperationException Methods | Improve this Doc View Source Close() Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. Instead of calling this method, ensure that the stream is properly disposed. Declaration public virtual void Close() Remarks Stream used to require that all cleanup logic went into Close(), which was thought up before we invented IDisposable. However, we need to follow the IDisposable pattern so that users can write sensible subclasses without needing to inspect all their base classes, and without worrying about version brittleness, from a base class switching to the Dispose pattern. We're moving Stream to the Dispose(bool) pattern - that's where all subclasses should put their cleanup starting in V2. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public abstract void Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public abstract int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. Int32 offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. Int32 count The maximum number of bytes to be read from the current stream. Returns Type Description Int32 The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. | Improve this Doc View Source ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. Declaration public virtual int ReadByte() Returns Type Description Int32 The unsigned byte cast to an Int32, or -1 if at the end of the stream. | Improve this Doc View Source Seek(Int64, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public abstract long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description Int64 The new position within the current stream. | Improve this Doc View Source SetLength(Int64) When overridden in a derived class, sets the length of the current stream. Declaration public abstract void SetLength(long value) Parameters Type Name Description Int64 value The desired length of the current stream in bytes. | Improve this Doc View Source Write(Byte[], Int32, Int32) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public abstract void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. This method copies count bytes from buffer to the current stream. Int32 offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. Int32 count The number of bytes to be written to the current stream. | Improve this Doc View Source WriteByte(Byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. Declaration public virtual void WriteByte(byte value) Parameters Type Name Description Byte value The byte to write to the stream. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.MarshalByRefObject.html": {
    "href": "api/System.MarshalByRefObject.html",
    "title": "Class MarshalByRefObject | nanoFramework Documentation",
    "keywords": "Class MarshalByRefObject Enables access to objects across application domain boundaries in applications that support remoting. Inheritance Object MarshalByRefObject Bitmap Font Stream WebRequest WebResponse Timer WaitHandle DataReader DataWriter InMemoryRandomAccessStream Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class MarshalByRefObject Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Math.html": {
    "href": "api/System.Math.html",
    "title": "Class Math | nanoFramework Documentation",
    "keywords": "Class Math Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions. Inheritance Object Math Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : System.Math.dll Syntax public static class Math Fields | Improve this Doc View Source E Represents the natural logarithmic base, specified by the constant, e. Declaration public const double E = 2.7182818284590451 Field Value Type Description Double Remarks The value of this field is 2.7182818284590452354. | Improve this Doc View Source PI Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π. Declaration public const double PI = 3.1415926535897931 Field Value Type Description Double Remarks The value of this field is 3.14159265358979323846. Methods Abs(Double) Returns the absolute value of a double-precision floating-point number. Declaration public static extern double Abs(double val) Parameters Type Name Description Double val A number that is greater than or equal to Double..::..MinValue, but less than or equal to Double..::..MaxValue. Returns Type Description Double A double-precision floating-point number, x, such that 0 ≤ x ≤ Double..::..MaxValue. | Improve this Doc View Source Abs(Int32) Returns the absolute value of a 32-bit signed integer. Declaration public static int Abs(int val) Parameters Type Name Description Int32 val A number that is greater than Int32..::..MinValue, but less than or equal to Int32..::..MaxValue. Returns Type Description Int32 A 32-bit signed integer, x, such that 0 ≤ x ≤ Int32..::..MaxValue. Abs(Single) Returns the absolute value of a single-precision floating-point number. Declaration public static extern float Abs(float val) Parameters Type Name Description Single val A number that is greater than or equal to MinValue, but less than or equal to MaxValue. Returns Type Description Single A single-precision floating-point number, x, such that 0 ≤ x ≤ MaxValue. Acos(Double) Returns the angle whose cosine is the specified number. Declaration public static extern double Acos(double d) Parameters Type Name Description Double d A number representing a cosine, where d must be greater than or equal to -1, but less than or equal to 1. Returns Type Description Double An angle, θ, measured in radians, such that 0 ≤ θ ≤ π -or- NaN if d < -1 or d > 1 or d equals NaN. | Improve this Doc View Source Acos(Single) Returns the angle whose cosine is the specified number. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Acos(float d) Parameters Type Name Description Single d A number representing a cosine, where d must be greater than or equal to -1, but less than or equal to 1. Returns Type Description Single An angle, θ, measured in radians, such that 0 ≤ θ ≤ π -or- NaN if d < -1 or d > 1 or d equals NaN. Asin(Double) Returns the angle whose sine is the specified number. Declaration public static extern double Asin(double d) Parameters Type Name Description Double d A number representing a sine, where d must be greater than or equal to -1, but less than or equal to 1. Returns Type Description Double An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2 -or- NaN if d < -1 or d> 1 or d equals NaN. | Improve this Doc View Source Asin(Single) Returns the angle whose sine is the specified number. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Asin(float d) Parameters Type Name Description Single d A number representing a sine, where d must be greater than or equal to -1, but less than or equal to 1. Returns Type Description Single An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2 -or- NaN if d < -1 or d> 1 or d equals NaN. Atan(Double) Returns the angle whose tangent is the specified number. Declaration public static extern double Atan(double d) Parameters Type Name Description Double d A number representing a tangent. Returns Type Description Double An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2. -or- NaN if d equals NaN, -π/2 rounded to double precision(-1.5707963267949) if d equals NegativeInfinity, or π/2 rounded to double precision(1.5707963267949) if d equals PositiveInfinity. | Improve this Doc View Source Atan(Single) Returns the angle whose tangent is the specified number. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Atan(float d) Parameters Type Name Description Single d A number representing a tangent. Returns Type Description Single An angle, θ, measured in radians, such that -π/2 ≤ θ ≤ π/2. -or- NaN if d equals NaN, -π/2 rounded to double precision(-1.5707963267949) if d equals NegativeInfinity, or π/2 rounded to double precision(1.5707963267949) if d equals PositiveInfinity. Atan2(Double, Double) Returns the angle whose tangent is the quotient of two specified numbers. Declaration public static extern double Atan2(double y, double x) Parameters Type Name Description Double y The y coordinate of a point. Double x The x coordinate of a point. Returns Type Description Double An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane. | Improve this Doc View Source Atan2(Single, Single) Returns the angle whose tangent is the quotient of two specified numbers. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Atan2(float y, float x) Parameters Type Name Description Single y The y coordinate of a point. Single x The x coordinate of a point. Returns Type Description Single An angle, θ, measured in radians, such that -π ≤ θ ≤ π, and tan(θ) = y / x, where (x, y) is a point in the Cartesian plane. Ceiling(Double) Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number. Declaration public static extern double Ceiling(double d) Parameters Type Name Description Double d A double-precision floating-point number. Returns Type Description Double The smallest integral value that is greater than or equal to d. If d is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned. Note that this method returns a Double instead of an integral type. | Improve this Doc View Source Ceiling(Single) Returns the smallest integral value that is greater than or equal to the specified single-precision floating-point number. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Ceiling(float d) Parameters Type Name Description Single d A single-precision floating-point number. Returns Type Description Single The smallest integral value that is greater than or equal to d. If d is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned. Note that this method returns a Double instead of an integral type. Cos(Double) Returns the cosine of the specified angle. Declaration public static extern double Cos(double a) Parameters Type Name Description Double a An angle, measured in radians. Returns Type Description Double The cosine of a. If a is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN. | Improve this Doc View Source Cos(Single) Returns the cosine of the specified angle. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Cos(float a) Parameters Type Name Description Single a An angle, measured in radians. Returns Type Description Single The cosine of a. If a is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN. Cosh(Double) Returns the hyperbolic cosine of the specified angle. Declaration public static extern double Cosh(double a) Parameters Type Name Description Double a An angle, measured in radians. Returns Type Description Double The hyperbolic cosine of val. If val is equal to NegativeInfinity or PositiveInfinity, PositiveInfinity is returned. If value is equal to NaN, NaN is returned. | Improve this Doc View Source Cosh(Single) Returns the hyperbolic cosine of the specified angle. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Cosh(float a) Parameters Type Name Description Single a An angle, measured in radians. Returns Type Description Single The hyperbolic cosine of val. If val is equal to NegativeInfinity or PositiveInfinity, PositiveInfinity is returned. If value is equal to NaN, NaN is returned. Exp(Double) Returns e raised to the specified power. Declaration public static extern double Exp(double d) Parameters Type Name Description Double d A number specifying a power. Returns Type Description Double The number e raised to the power d. If d equals NaN or PositiveInfinity, that value is returned. If d equals NegativeInfinity, 0 is returned. | Improve this Doc View Source Exp(Single) Returns e raised to the specified power. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Exp(float d) Parameters Type Name Description Single d A number specifying a power. Returns Type Description Single The number e raised to the power d. If d equals NaN or PositiveInfinity, that value is returned. If d equals NegativeInfinity, 0 is returned. Floor(Double) Returns the largest integer less than or equal to the specified double-precision floating-point number. Declaration public static extern double Floor(double d) Parameters Type Name Description Double d A double-precision floating-point number. Returns Type Description Double The largest integer less than or equal to d. If d is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned. | Improve this Doc View Source Floor(Single) Returns the largest integer less than or equal to the specified single-precision floating-point number. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Floor(float d) Parameters Type Name Description Single d A single-precision floating-point number. Returns Type Description Single The largest integer less than or equal to d. If d is equal to NaN, NegativeInfinity, or PositiveInfinity, that value is returned. IEEERemainder(Double, Double) Returns the remainder resulting from the division of a specified number by another specified number. Declaration public static extern double IEEERemainder(double x, double y) Parameters Type Name Description Double x A dividend. Double y A divisor. Returns Type Description Double A number equal to x - (y Q), where Q is the quotient of x / y rounded to the nearest integer (if x / y falls halfway between two integers, the even integer is returned). If x - (y Q) is zero, the value +0 is returned if x is positive, or -0 if x is negative. If y = 0, NaN is returned. | Improve this Doc View Source IEEERemainder(Single, Single) Returns the remainder resulting from the division of a specified number by another specified number. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float IEEERemainder(float x, float y) Parameters Type Name Description Single x A dividend. Single y A divisor. Returns Type Description Single A number equal to x - (y Q), where Q is the quotient of x / y rounded to the nearest integer (if x / y falls halfway between two integers, the even integer is returned). If x - (y Q) is zero, the value +0 is returned if x is positive, or -0 if x is negative. If y = 0, NaN is returned. Log(Double) Returns the natural (base e) logarithm of a specified number. Declaration public static extern double Log(double d) Parameters Type Name Description Double d The number whose logarithm is to be found. Returns Type Description Double The natural logarithm of d; that is, ln d, or log e d | Improve this Doc View Source Log(Single) Returns the natural (base e) logarithm of a specified number. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Log(float d) Parameters Type Name Description Single d The number whose logarithm is to be found. Returns Type Description Single The natural logarithm of d; that is, ln d, or log e d Log10(Double) Returns the base 10 logarithm of a specified number. Declaration public static extern double Log10(double d) Parameters Type Name Description Double d A number whose logarithm is to be found. Returns Type Description Double The base 10 log of d; that is, log 10 d. | Improve this Doc View Source Log10(Single) Returns the base 10 logarithm of a specified number. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Log10(float d) Parameters Type Name Description Single d A number whose logarithm is to be found. Returns Type Description Single The base 10 log of d; that is, log 10 d. Max(Double, Double) Returns the larger of two double-precision floating-point numbers. Declaration public static extern double Max(double x, double y) Parameters Type Name Description Double x The first of two double-precision floating-point numbers to compare. Double y The second of two double-precision floating-point numbers to compare. Returns Type Description Double Parameter x or y, whichever is larger. If x, y, or both x and y are equal to NaN, NaN is returned. | Improve this Doc View Source Max(Int32, Int32) Returns the larger of two 32-bit signed integers. Declaration public static int Max(int val1, int val2) Parameters Type Name Description Int32 val1 The first of two 32-bit signed integers to compare. Int32 val2 The second of two 32-bit signed integers to compare. Returns Type Description Int32 Parameter val1 or val2, whichever is larger. | Improve this Doc View Source Max(Single, Single) Returns the larger of two single-precision floating-point numbers. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Max(float x, float y) Parameters Type Name Description Single x The first of two single-precision floating-point numbers to compare. Single y The second of two single-precision floating-point numbers to compare. Returns Type Description Single Parameter x or y, whichever is larger. If x, y, or both x and y are equal to NaN, NaN is returned. Min(Double, Double) Returns the smaller of two double-precision floating-point numbers. Declaration public static extern double Min(double x, double y) Parameters Type Name Description Double x The first of two double-precision floating-point numbers to compare. Double y The second of two double-precision floating-point numbers to compare. Returns Type Description Double Parameter x or y, whichever is smaller. If x, y, or both x and y are equal to NaN, NaN is returned. | Improve this Doc View Source Min(Int32, Int32) Returns the smaller of two 32-bit signed integers. Declaration public static int Min(int val1, int val2) Parameters Type Name Description Int32 val1 The first of two 32-bit signed integers to compare. Int32 val2 The second of two 32-bit signed integers to compare. Returns Type Description Int32 Parameter val1 or val2, whichever is smaller. | Improve this Doc View Source Min(Single, Single) Returns the smaller of two single-precision floating-point numbers. Declaration public static float Min(float x, float y) Parameters Type Name Description Single x The first of two single-precision floating-point numbers to compare. Single y The second of two single-precision floating-point numbers to compare. Returns Type Description Single Parameter x or y, whichever is smaller. If x, y, or both x and y are equal to NaN, NaN is returned. Pow(Double, Double) Returns a specified number raised to the specified power. Declaration public static extern double Pow(double x, double y) Parameters Type Name Description Double x A double-precision floating-point number to be raised to a power. Double y A double-precision floating-point number that specifies a power. Returns Type Description Double The number x raised to the power y. | Improve this Doc View Source Pow(Single, Single) Returns a specified number raised to the specified power. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Pow(float x, float y) Parameters Type Name Description Single x A single-precision floating-point number to be raised to a power. Single y A single-precision floating-point number that specifies a power. Returns Type Description Single The number x raised to the power y. Round(Double) Rounds a double-precision floating-point value to the nearest integral value. Declaration public static extern double Round(double d) Parameters Type Name Description Double d A double-precision floating-point number to be rounded. Returns Type Description Double The integer nearest d. If the fractional component of d is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a Double instead of an integral type. | Improve this Doc View Source Round(Single) Rounds a single-precision floating-point value to the nearest integral value. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Round(float d) Parameters Type Name Description Single d A single-precision floating-point number to be rounded. Returns Type Description Single The integer nearest d. If the fractional component of d is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a Double instead of an integral type. Sign(Double) Returns a value indicating the sign of a double-precision floating-point number. Declaration public static extern int Sign(double value) Parameters Type Name Description Double value A signed number. Returns Type Description Int32 A number that indicates the sign of value. | Improve this Doc View Source Sign(Single) Returns a value indicating the sign of a single-precision floating-point number. Declaration public static int Sign(float value) Parameters Type Name Description Single value A signed number. Returns Type Description Int32 A number that indicates the sign of value. Sin(Double) Returns the sine of the specified angle. Declaration public static extern double Sin(double a) Parameters Type Name Description Double a An angle, measured in radians. Returns Type Description Double The sine of a. If a is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN. | Improve this Doc View Source Sin(Single) Returns the sine of the specified angle. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Sin(float a) Parameters Type Name Description Single a An angle, measured in radians. Returns Type Description Single The sine of a. If a is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN. Sinh(Double) Returns the hyperbolic sine of the specified angle. Declaration public static extern double Sinh(double value) Parameters Type Name Description Double value An angle, measured in radians. Returns Type Description Double The hyperbolic sine of value. If value is equal to NegativeInfinity, PositiveInfinity, or NaN, this method returns a Double equal to value. | Improve this Doc View Source Sinh(Single) Returns the hyperbolic sine of the specified angle. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Sinh(float value) Parameters Type Name Description Single value An angle, measured in radians. Returns Type Description Single The hyperbolic sine of value. If value is equal to NegativeInfinity, PositiveInfinity, or NaN, this method returns a Double equal to value. Sqrt(Double) Returns the square root of a specified number. Declaration public static extern double Sqrt(double d) Parameters Type Name Description Double d The number whose square root is to be found. Returns Type Description Double The positive square root of d. | Improve this Doc View Source Sqrt(Single) Returns the square root of a specified number. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Sqrt(float d) Parameters Type Name Description Single d The number whose square root is to be found. Returns Type Description Single The positive square root of d. Tan(Double) Returns the tangent of the specified angle. Declaration public static extern double Tan(double a) Parameters Type Name Description Double a An angle, measured in radians. Returns Type Description Double The tangent of a. If a is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN. | Improve this Doc View Source Tan(Single) Returns the tangent of the specified angle. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Tan(float a) Parameters Type Name Description Single a An angle, measured in radians. Returns Type Description Single The tangent of a. If a is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN. Tanh(Double) Returns the hyperbolic tangent of the specified angle. Declaration public static extern double Tanh(double value) Parameters Type Name Description Double value An angle, measured in radians. Returns Type Description Double The hyperbolic tangent of value. If value is equal to NegativeInfinity, this method returns -1. If value is equal to PositiveInfinity, this method returns 1. If value is equal to NaN, this method returns NaN. | Improve this Doc View Source Tanh(Single) Returns the hyperbolic tangent of the specified angle. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Tanh(float value) Parameters Type Name Description Single value An angle, measured in radians. Returns Type Description Single The hyperbolic tangent of value. If value is equal to NegativeInfinity, this method returns -1. If value is equal to PositiveInfinity, this method returns 1. If value is equal to NaN, this method returns NaN. Truncate(Double) Calculates the integral part of a specified double-precision floating-point number. Declaration public static extern double Truncate(double d) Parameters Type Name Description Double d A number to truncate. Returns Type Description Double The integral part of d; that is, the number that remains after any fractional digits have been discarded | Improve this Doc View Source Truncate(Single) Calculates the integral part of a specified single-precision floating-point number. Declaration [Obsolete(\"This method is obsolete. Call using type Double instead.\", true)] public static float Truncate(float d) Parameters Type Name Description Single d A number to truncate. Returns Type Description Single The integral part of d; that is, the number that remains after any fractional digits have been discarded"
  },
  "api/System.MTAThreadAttribute.html": {
    "href": "api/System.MTAThreadAttribute.html",
    "title": "Class MTAThreadAttribute | nanoFramework Documentation",
    "keywords": "Class MTAThreadAttribute Indicates that the COM threading model for an application is multithreaded apartment (MTA). Inheritance Object Attribute MTAThreadAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Method)] public sealed class MTAThreadAttribute : Attribute Constructors | Improve this Doc View Source MTAThreadAttribute() Initializes a new instance of the MTAThreadAttribute class. Declaration public MTAThreadAttribute() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.MulticastDelegate.html": {
    "href": "api/System.MulticastDelegate.html",
    "title": "Class MulticastDelegate | nanoFramework Documentation",
    "keywords": "Class MulticastDelegate Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list. Inheritance Object Delegate MulticastDelegate Inherited Members Delegate.Combine(Delegate, Delegate) Delegate.Method Delegate.GetInvocationList() Delegate.Target Delegate.Remove(Delegate, Delegate) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class MulticastDelegate : Delegate Methods | Improve this Doc View Source Equals(Object) Returns the hash code for this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj A 32-bit signed integer hash code. Returns Type Description Boolean Overrides Delegate.Equals(Object) Operators Equality(MulticastDelegate, MulticastDelegate) Determines whether two MulticastDelegate objects are equal. Declaration public static extern bool operator ==(MulticastDelegate d1, MulticastDelegate d2) Parameters Type Name Description MulticastDelegate d1 The left operand. MulticastDelegate d2 The right operand. Returns Type Description Boolean true if d1 and d2 have the same invocation lists; otherwise, false. Inequality(MulticastDelegate, MulticastDelegate) Determines whether two MulticastDelegate objects are not equal. Declaration public static extern bool operator !=(MulticastDelegate d1, MulticastDelegate d2) Parameters Type Name Description MulticastDelegate d1 The left operand. MulticastDelegate d2 The right operand. Returns Type Description Boolean rue if d1 and d2 do not have the same invocation lists; otherwise, false. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.AuthenticationType.html": {
    "href": "api/System.Net.AuthenticationType.html",
    "title": "Enum AuthenticationType | nanoFramework Documentation",
    "keywords": "Enum AuthenticationType Network authentication type. Currently supports: Basic Authentication Microsoft Live Id Delegate Authentication Namespace : System.Net Assembly : System.Net.Http.dll Syntax public enum AuthenticationType Fields Name Description Basic WindowsLive Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.Dns.html": {
    "href": "api/System.Net.Dns.html",
    "title": "Class Dns | nanoFramework Documentation",
    "keywords": "Class Dns Provides simple domain name resolution functionality. Inheritance Object Dns Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax public static class Dns Methods | Improve this Doc View Source GetHostEntry(String) Resolves a host name or IP address to an IPHostEntry instance. Declaration public static IPHostEntry GetHostEntry(string hostNameOrAddress) Parameters Type Name Description String hostNameOrAddress The host name or IP address to resolve. Returns Type Description IPHostEntry An IPHostEntry instance that contains address information about the host specified in hostNameOrAddress. Remarks The GetHostEntry method queries a DNS server for the IP address that is associated with a host name or IP address. When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host."
  },
  "api/System.Net.EndPoint.html": {
    "href": "api/System.Net.EndPoint.html",
    "title": "Class EndPoint | nanoFramework Documentation",
    "keywords": "Class EndPoint Identifies a network address. This is an abstract class. Inheritance Object EndPoint IPEndPoint Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax [Serializable] public abstract class EndPoint Remarks The EndPoint class provides an abstract base class that represents a network resource or service. Descendant classes combine network connection information to form a connection point to a service. Methods | Improve this Doc View Source Create(SocketAddress) Creates an EndPoint instance from a SocketAddress instance. Declaration public abstract EndPoint Create(SocketAddress socketAddress) Parameters Type Name Description SocketAddress socketAddress The socket address that serves as the endpoint for a connection. Returns Type Description EndPoint A new EndPoint instance that is initialized from the specified SocketAddress instance. | Improve this Doc View Source Serialize() Serializes endpoint information into a SocketAddress instance. Declaration public abstract SocketAddress Serialize() Returns Type Description SocketAddress A SocketAddress instance that contains the endpoint information. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.html": {
    "href": "api/System.Net.html",
    "title": "Namespace System.Net | nanoFramework Documentation",
    "keywords": "Namespace System.Net Classes Dns Provides simple domain name resolution functionality. EndPoint Identifies a network address. This is an abstract class. HttpKnownHeaderNames Contains known HTTP header names. HttpListener Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited. HttpListenerContext Provides access to the request and response objects used by the HttpListener class. This class cannot be inherited. HttpListenerRequest Describes an incoming HTTP request to an HttpListener object. HttpListenerResponse Represents a response to a request being handled by an HttpListener object. HttpVersion Defines the HTTP version numbers that are supported by the and classes. HttpWebRequest Provides an HTTP-specific implementation of the WebRequest class. HttpWebResponse Handles retrieval of HTTP Response headers, and handles data reads. IPAddress Provides an internet protocol (IP) address. IPEndPoint Represents a network endpoint as an IP address and a port number. IPHostEntry Provides a container class for Internet host address information. NetworkCredential Class that keeps user name and password. ProtocolViolationException The exception that is thrown when an error is made while using a network protocol. SocketAddress Stores serialized information from EndPoint derived classes. WebException Defines the exception that is thrown by instances when an error occurs. WebHeaderCollection Contains protocol headers associated with a request or response. Manages name-value pairs for HTTP headers. WebProxy Contains HTTP proxy settings for the WebRequest class. WebRequest Makes a request to a Uniform Resource Identifier (URI). This is an abstract class. WebResponse Provides a response from a Uniform Resource Identifier (URI). This is an abstract class. Interfaces IWebProxy Provides the base interface for implementing proxy access for the class. IWebRequestCreate The interface for creating WebRequest class objects. Enums AuthenticationType Network authentication type. Currently supports: Basic Authentication Microsoft Live Id Delegate Authentication HttpStatusCode Contains the values of status codes defined for HTTP. WebExceptionStatus Defines status codes for the WebException class. Delegates HttpContinueDelegate Represents the method that notifies callers when a continue response is received by the client."
  },
  "api/System.Net.HttpContinueDelegate.html": {
    "href": "api/System.Net.HttpContinueDelegate.html",
    "title": "Delegate HttpContinueDelegate | nanoFramework Documentation",
    "keywords": "Delegate HttpContinueDelegate Represents the method that notifies callers when a continue response is received by the client. Namespace : System.Net Assembly : System.Net.Http.dll Syntax public delegate void HttpContinueDelegate(int StatusCode, WebHeaderCollection httpHeaders); Parameters Type Name Description Int32 StatusCode The numeric value of the HTTP status from the server. WebHeaderCollection httpHeaders The headers returned with the 100-continue response from the server. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.HttpKnownHeaderNames.html": {
    "href": "api/System.Net.HttpKnownHeaderNames.html",
    "title": "Class HttpKnownHeaderNames | nanoFramework Documentation",
    "keywords": "Class HttpKnownHeaderNames Contains known HTTP header names. Inheritance Object HttpKnownHeaderNames Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpKnownHeaderNames Fields | Improve this Doc View Source Accept The Accept HTTP header. Declaration public const string Accept = \"Accept\" Field Value Type Description String | Improve this Doc View Source AcceptCharset The Accept-Charset HTTP header. Declaration public const string AcceptCharset = \"Accept-Charset\" Field Value Type Description String | Improve this Doc View Source AcceptEncoding The Accept-Encoding HTTP header. Declaration public const string AcceptEncoding = \"Accept-Encoding\" Field Value Type Description String | Improve this Doc View Source AcceptLanguage The Accept-Language HTTP header. Declaration public const string AcceptLanguage = \"Accept-Language\" Field Value Type Description String | Improve this Doc View Source AcceptRanges The Accept-Ranges HTTP header. Declaration public const string AcceptRanges = \"Accept-Ranges\" Field Value Type Description String | Improve this Doc View Source Age The Age HTTP header. Declaration public const string Age = \"Age\" Field Value Type Description String | Improve this Doc View Source Allow The Allow HTTP header. Declaration public const string Allow = \"Allow\" Field Value Type Description String | Improve this Doc View Source Authorization The Authorization HTTP header. Declaration public const string Authorization = \"Authorization\" Field Value Type Description String | Improve this Doc View Source CacheControl The Cache-Control HTTP header. Declaration public const string CacheControl = \"Cache-Control\" Field Value Type Description String | Improve this Doc View Source Connection The Connection HTTP header. Declaration public const string Connection = \"Connection\" Field Value Type Description String | Improve this Doc View Source ContentEncoding The Content-Encoding HTTP header. Declaration public const string ContentEncoding = \"Content-Encoding\" Field Value Type Description String | Improve this Doc View Source ContentID The Content-ID HTTP header. Declaration public const string ContentID = \"Content-ID\" Field Value Type Description String | Improve this Doc View Source ContentLanguage The Content-Language HTTP header. Declaration public const string ContentLanguage = \"Content-Language\" Field Value Type Description String | Improve this Doc View Source ContentLength The Content-Length HTTP header. Declaration public const string ContentLength = \"Content-Length\" Field Value Type Description String | Improve this Doc View Source ContentLocation The Content-Location HTTP header. Declaration public const string ContentLocation = \"Content-Location\" Field Value Type Description String | Improve this Doc View Source ContentMD5 The Content-MD5 HTTP header. Declaration public const string ContentMD5 = \"Content-MD5\" Field Value Type Description String | Improve this Doc View Source ContentRange The Content-Range HTTP header. Declaration public const string ContentRange = \"Content-Range\" Field Value Type Description String | Improve this Doc View Source ContentTransferEncoding The Content-Transfer-Encoding HTTP header. Declaration public const string ContentTransferEncoding = \"Content-Transfer-Encoding\" Field Value Type Description String | Improve this Doc View Source ContentType The Content-Type HTTP header. Declaration public const string ContentType = \"Content-Type\" Field Value Type Description String | Improve this Doc View Source Cookie The Cookie HTTP header. Declaration public const string Cookie = \"Cookie\" Field Value Type Description String | Improve this Doc View Source Cookie2 The Cookie2 HTTP header. Declaration public const string Cookie2 = \"Cookie2\" Field Value Type Description String | Improve this Doc View Source Date The Date HTTP header. Declaration public const string Date = \"Date\" Field Value Type Description String | Improve this Doc View Source ETag The ETag HTTP header. Declaration public const string ETag = \"ETag\" Field Value Type Description String | Improve this Doc View Source Expect The Expect HTTP header. Declaration public const string Expect = \"Expect\" Field Value Type Description String | Improve this Doc View Source Expires The Expires HTTP header. Declaration public const string Expires = \"Expires\" Field Value Type Description String | Improve this Doc View Source From The From HTTP header. Declaration public const string From = \"From\" Field Value Type Description String | Improve this Doc View Source Host The Host HTTP header. Declaration public const string Host = \"Host\" Field Value Type Description String | Improve this Doc View Source IfMatch The If-Match HTTP header. Declaration public const string IfMatch = \"If-Match\" Field Value Type Description String | Improve this Doc View Source IfModifiedSince The If-Modified-Since HTTP header. Declaration public const string IfModifiedSince = \"If-Modified-Since\" Field Value Type Description String | Improve this Doc View Source IfNoneMatch The If-None-Match HTTP header. Declaration public const string IfNoneMatch = \"If-None-Match\" Field Value Type Description String | Improve this Doc View Source IfRange The If-Range HTTP header. Declaration public const string IfRange = \"If-Range\" Field Value Type Description String | Improve this Doc View Source IfUnmodifiedSince The If-Unmodified-Since HTTP header. Declaration public const string IfUnmodifiedSince = \"If-Unmodified-Since\" Field Value Type Description String | Improve this Doc View Source KeepAlive The Keep-Alive HTTP header. Declaration public const string KeepAlive = \"Keep-Alive\" Field Value Type Description String | Improve this Doc View Source LastModified The Last-Modified HTTP header. Declaration public const string LastModified = \"Last-Modified\" Field Value Type Description String | Improve this Doc View Source Location The Location HTTP header. Declaration public const string Location = \"Location\" Field Value Type Description String | Improve this Doc View Source MaxForwards The Max-Forwards HTTP header. Declaration public const string MaxForwards = \"Max-Forwards\" Field Value Type Description String | Improve this Doc View Source MimeVersion The MIME-Version HTTP header. Declaration public const string MimeVersion = \"MIME-Version\" Field Value Type Description String | Improve this Doc View Source Pragma The Pragma HTTP header. Declaration public const string Pragma = \"Pragma\" Field Value Type Description String | Improve this Doc View Source ProxyAuthenticate The Proxy-Authenticate HTTP header. Declaration public const string ProxyAuthenticate = \"Proxy-Authenticate\" Field Value Type Description String | Improve this Doc View Source ProxyAuthorization The Proxy-Authorization HTTP header. Declaration public const string ProxyAuthorization = \"Proxy-Authorization\" Field Value Type Description String | Improve this Doc View Source ProxyConnection The Proxy-Connection HTTP header. Declaration public const string ProxyConnection = \"Proxy-Connection\" Field Value Type Description String | Improve this Doc View Source Range The Range HTTP header. Declaration public const string Range = \"Range\" Field Value Type Description String | Improve this Doc View Source Referer The Referer HTTP header. Declaration public const string Referer = \"Referer\" Field Value Type Description String | Improve this Doc View Source RetryAfter The Retry-After HTTP header. Declaration public const string RetryAfter = \"Retry-After\" Field Value Type Description String | Improve this Doc View Source SecWebSocketAccept The Sec-WebSocket-Accept HTTP header. Declaration public const string SecWebSocketAccept = \"Sec-WebSocket-Accept\" Field Value Type Description String | Improve this Doc View Source SecWebSocketKey The Sec-WebSocket-Key HTTP header. Declaration public const string SecWebSocketKey = \"Sec-WebSocket-Key\" Field Value Type Description String | Improve this Doc View Source SecWebSocketProtocol The Sec-WebSocket-Protocol HTTP header. Declaration public const string SecWebSocketProtocol = \"Sec-WebSocket-Protocol\" Field Value Type Description String | Improve this Doc View Source SecWebSocketVersion The Sec-WebSocket-Version HTTP header. Declaration public const string SecWebSocketVersion = \"Sec-WebSocket-Version\" Field Value Type Description String | Improve this Doc View Source Server The Server HTTP header. Declaration public const string Server = \"Server\" Field Value Type Description String | Improve this Doc View Source SetCookie The Set-Cookie HTTP header. Declaration public const string SetCookie = \"Set-Cookie\" Field Value Type Description String | Improve this Doc View Source SetCookie2 The Set-Cookie2 HTTP header. Declaration public const string SetCookie2 = \"Set-Cookie2\" Field Value Type Description String | Improve this Doc View Source TE The TE HTTP header. Declaration public const string TE = \"TE\" Field Value Type Description String | Improve this Doc View Source Trailer The Trailer HTTP header. Declaration public const string Trailer = \"Trailer\" Field Value Type Description String | Improve this Doc View Source TransferEncoding The Transfer-Encoding HTTP header. Declaration public const string TransferEncoding = \"Transfer-Encoding\" Field Value Type Description String | Improve this Doc View Source Upgrade The Upgrade HTTP header. Declaration public const string Upgrade = \"Upgrade\" Field Value Type Description String | Improve this Doc View Source UserAgent The User-Agent HTTP header. Declaration public const string UserAgent = \"User-Agent\" Field Value Type Description String | Improve this Doc View Source Vary The Vary HTTP header. Declaration public const string Vary = \"Vary\" Field Value Type Description String | Improve this Doc View Source Via The Via HTTP header. Declaration public const string Via = \"Via\" Field Value Type Description String | Improve this Doc View Source Warning The Warning HTTP header. Declaration public const string Warning = \"Warning\" Field Value Type Description String | Improve this Doc View Source WWWAuthenticate The WWW-Authenticate HTTP header. Declaration public const string WWWAuthenticate = \"WWW-Authenticate\" Field Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.HttpListener.html": {
    "href": "api/System.Net.HttpListener.html",
    "title": "Class HttpListener | nanoFramework Documentation",
    "keywords": "Class HttpListener Provides a simple, programmatically controlled HTTP protocol listener. This class cannot be inherited. Inheritance Object HttpListener Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpListener Remarks This class enables using a socket to receive data that uses the HTTP protocol. Constructors | Improve this Doc View Source HttpListener(String) Creates an HTTP or HTTPS listener on the standard ports. Declaration public HttpListener(string prefix) Parameters Type Name Description String prefix Prefix ( http or https ) to start listen Remarks In the desktop version of .NET, the constructor for this class has no arguments. | Improve this Doc View Source HttpListener(String, Int32) Creates an HTTP or HTTPS listener on the specified port. Declaration public HttpListener(string prefix, int port) Parameters Type Name Description String prefix The prefix for the service, either \"http\" or \"https\". Int32 port The port to start listening on. If -1, the default port is used (port 80 for http, or port 443 for https). Remarks In the desktop version of .NET, the constructor for this class has no arguments. Properties | Improve this Doc View Source HttpsCert The certificate used if HttpListener implements an https server. Declaration public X509Certificate HttpsCert { get; set; } Property Value Type Description X509Certificate | Improve this Doc View Source IsListening Gets whether the HttpListener service was started and is waiting for client connections. Declaration public bool IsListening { get; } Property Value Type Description Boolean true if the HttpListener was started; otherwise, false . | Improve this Doc View Source MaximumResponseHeadersLength Gets or sets the maximum allowed length of the response headers, in KB. Declaration public int MaximumResponseHeadersLength { get; set; } Property Value Type Description Int32 The length, in kilobytes (1024 bytes), of the response headers. Remarks The length of the response header includes the response status line and any extra control characters that are received as part of the HTTP protocol. A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail. If this property is not explicitly set, it defaults to 4 (KB). | Improve this Doc View Source SslProtocols Gets or sets the TLS/SSL protocol used by the HttpListener class. Declaration public SslProtocols SslProtocols { get; set; } Property Value Type Description SslProtocols One of the values defined in the SslProtocols enumeration. Remarks This property is specific to nanoFramework. There is no equivalent in the .NET API. Methods | Improve this Doc View Source Abort() Shuts down the HttpListener object immediately, discarding all currently queued requests. Declaration public void Abort() Remarks This method disposes of all resources held by this listener. Any pending requests are unable to complete. To shut down the HttpListener object after processing currently queued requests, use the Close() method. After calling this method, you will receive an ObjectDisposedException if you attempt to use this HttpListener . | Improve this Doc View Source Close() Shuts down the HttpListener after processing all currently queued requests. Declaration public void Close() Remarks After calling this method, you can no longer use the HttpListener object. To temporarily pause an HttpListener object, use the Stop() method. | Improve this Doc View Source GetContext() Waits for an incoming request and returns when one is received. Declaration public HttpListenerContext GetContext() Returns Type Description HttpListenerContext An HttpListenerContext object that represents a client request. Examples This example shows how to call the GetContext method. HttpListener myListener = new HttpListener(\"http\", -1); myListener.Start(); while (true) { HttpListenerResponse response = null; try { Debug.Print(\"Waiting for requests\"); HttpListenerContext context = myListener.GetContext(); Exceptions Type Condition SocketException A socket call failed. Check the exception's ErrorCode property to determine the cause of the exception. InvalidOperationException This object has not been started or is currently stopped or The HttpListener does not have any Uniform Resource Identifier (URI) prefixes to respond to. ObjectDisposedException This object is closed. | Improve this Doc View Source Start() Allows this instance to receive incoming requests. Declaration public void Start() Remarks This method must be called before you call the GetContext() method. If the service was already started, the call has no effect. After you have started an HttpListener object, you can use the Stop() method to stop it. | Improve this Doc View Source Stop() Causes this instance to stop receiving incoming requests. Declaration public void Stop() Remarks If this instance is already stopped, calling this method has no effect. After you have stopped an HttpListener object, you can use the Start() method to restart it. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.HttpListenerContext.html": {
    "href": "api/System.Net.HttpListenerContext.html",
    "title": "Class HttpListenerContext | nanoFramework Documentation",
    "keywords": "Class HttpListenerContext Provides access to the request and response objects used by the HttpListener class. This class cannot be inherited. Inheritance Object HttpListenerContext Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpListenerContext Properties | Improve this Doc View Source Request Gets the HttpListenerRequest that represents a client's request for a resource. Declaration public HttpListenerRequest Request { get; } Property Value Type Description HttpListenerRequest An HttpListenerRequest object that represents the client request. | Improve this Doc View Source Response Gets the HttpListenerResponse object that will be sent to the client in response to the client's request. Declaration public HttpListenerResponse Response { get; } Property Value Type Description HttpListenerResponse An HttpListenerResponse object used to send a response back to the client. Methods | Improve this Doc View Source Close() Declaration public void Close() | Improve this Doc View Source Close(Int32) Closes the stream attached to this listener context. Declaration public void Close(int lingerValue) Parameters Type Name Description Int32 lingerValue | Improve this Doc View Source Reset() Declaration public void Reset() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.HttpListenerRequest.html": {
    "href": "api/System.Net.HttpListenerRequest.html",
    "title": "Class HttpListenerRequest | nanoFramework Documentation",
    "keywords": "Class HttpListenerRequest Describes an incoming HTTP request to an HttpListener object. Inheritance Object HttpListenerRequest Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpListenerRequest Remarks When a client makes a request to a Uniform Resource Identifier (URI) handled by an HttpListener object, the HttpListener provides an HttpListenerContext object that contains information about the sender, the request, and the response that is sent to the client. The Request property returns the HttpListenerRequest object that describes the request. The HttpListenerRequest object contains information about the request, such as the request HttpMethod string, UserAgent string, and request body data (see the InputStream property). To reply to the request, you must get the associated response using the Response property. Properties | Improve this Doc View Source AcceptTypes Gets the MIME types accepted by the client. Declaration public string[] AcceptTypes { get; } Property Value Type Description String [] A String array that contains the type names specified in the request's Accept header, or a null reference if the client request did not include an Accept header. | Improve this Doc View Source ContentLength64 Gets the length of the body data included in the request. Declaration public long ContentLength64 { get; } Property Value Type Description Int64 The value from the request's Content-Length header. This value is -1 if the content length is not known. Remarks The Content-Length header expresses the length, in bytes, of the body data that accompanies the request. enumeration. | Improve this Doc View Source ContentType Gets the MIME type of the body data included in the request. Declaration public string ContentType { get; } Property Value Type Description String A String that contains the text of the request's Content-Type header. | Improve this Doc View Source Credentials Return NetworkCredential if user have send user name and password. Declaration public NetworkCredential Credentials { get; } Property Value Type Description NetworkCredential | Improve this Doc View Source Headers Gets the collection of header name/value pairs sent in the request. Declaration public WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection A WebHeaderCollection that contains the HTTP headers included in the request. | Improve this Doc View Source HttpMethod Gets the HTTP method specified by the client. Declaration public string HttpMethod { get; } Property Value Type Description String A String that contains the method used in the request. | Improve this Doc View Source InputStream Gets a stream that contains the body data sent by the client. Declaration public Stream InputStream { get; } Property Value Type Description Stream A readable Stream object that contains the bytes sent by the client in the body of the request. This property returns Null if no data is sent with the request. | Improve this Doc View Source IsAuthenticated Gets a Boolean value that indicates whether the client sending this request is authenticated. Declaration public bool IsAuthenticated { get; } Property Value Type Description Boolean Because authentication is not supported, returns false . Remarks Because authentication is not supported, returns false . | Improve this Doc View Source KeepAlive Gets a Boolean value that indicates whether the client requests a persistent connection. Declaration public bool KeepAlive { get; } Property Value Type Description Boolean true if the connection should be kept open; otherwise, false . Remarks This property is set during parsing of HTTP header. | Improve this Doc View Source LocalEndPoint Gets the server IP address and port number to which the request is directed. Not currently supported. Declaration public IPEndPoint LocalEndPoint { get; } Property Value Type Description IPEndPoint An IPEndPoint that represents the IP address that the request is sent to. | Improve this Doc View Source ProtocolVersion Gets the HTTP version used by the requesting client. Declaration public Version ProtocolVersion { get; } Property Value Type Description Version A Version that identifies the client's version of HTTP. Remarks The capabilities of different HTTP versions are specified in the documents available at http://www.rfc-editor.org . | Improve this Doc View Source RawUrl Gets the URL information (without the host and port) requested by the client. Declaration public string RawUrl { get; } Property Value Type Description String A String that contains the raw URL for this request. Remarks This URL information is the URL requested in the first request line. | Improve this Doc View Source RemoteEndPoint Gets the client IP address and port number from which the request originated. Declaration public IPEndPoint RemoteEndPoint { get; } Property Value Type Description IPEndPoint An IPEndPoint that represents the IP address and port number from which the request originated. | Improve this Doc View Source Url Gets the Uri object requested by the client. Not currently supported. Declaration public Uri Url { get; } Property Value Type Description Uri | Improve this Doc View Source UserAgent Gets the user agent presented by the client. Declaration public string UserAgent { get; } Property Value Type Description String A String object that contains the text of the request's User-Agent header. | Improve this Doc View Source UserHostAddress Gets the server IP address and port number to which the request is directed. Declaration public string UserHostAddress { get; } Property Value Type Description String A String that contains the host address information. | Improve this Doc View Source UserHostName Gets the DNS name and, if provided, the port number specified by the client. Declaration public string UserHostName { get; } Property Value Type Description String A String value that contains the text of the request's Host header. | Improve this Doc View Source UserLanguages Gets the natural languages that are preferred for the response. Declaration public string[] UserLanguages { get; } Property Value Type Description String [] A String array that contains the languages specified in the request's AcceptLanguage header, or null if the client request did not include an AcceptLanguage header. Methods | Improve this Doc View Source Reset() Declaration public void Reset() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.HttpListenerResponse.html": {
    "href": "api/System.Net.HttpListenerResponse.html",
    "title": "Class HttpListenerResponse | nanoFramework Documentation",
    "keywords": "Class HttpListenerResponse Represents a response to a request being handled by an HttpListener object. Inheritance Object HttpListenerResponse Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public sealed class HttpListenerResponse : IDisposable Properties | Improve this Doc View Source ContentEncoding Gets or sets the encoding for this response's OutputStream . Declaration public Encoding ContentEncoding { get; set; } Property Value Type Description Encoding An Encoding object suitable for use with the data in the OutputStream property, or null reference if no encoding is specified. Remarks Only UTF8 encoding is supported. | Improve this Doc View Source ContentLength64 Gets or sets the number of bytes in the body data included in the response. Declaration public long ContentLength64 { get; set; } Property Value Type Description Int64 The value of the response's Content-Length header. | Improve this Doc View Source ContentType Gets or sets the MIME type of the returned content. Declaration public string ContentType { get; set; } Property Value Type Description String A String instance that contains the text of the response's Content-Type header. | Improve this Doc View Source Headers Gets or sets the collection of header name/value pairs that is returned by the server. Declaration public WebHeaderCollection Headers { get; set; } Property Value Type Description WebHeaderCollection A WebHeaderCollection instance that contains all the explicitly set HTTP headers to be included in the response. | Improve this Doc View Source KeepAlive Gets or sets whether the server requests a persistent connection. Declaration public bool KeepAlive { get; set; } Property Value Type Description Boolean true if the server requests a persistent connection; otherwise, false . The default is true . | Improve this Doc View Source OutputStream Gets a Stream object to which a response can be written. Declaration public Stream OutputStream { get; } Property Value Type Description Stream A Stream object to which a response can be written. Remarks The first write to the output stream sends a response to the client. | Improve this Doc View Source ProtocolVersion Gets or sets the HTTP version that is used for the response. Declaration public Version ProtocolVersion { get; set; } Property Value Type Description Version A Version object indicating the version of HTTP used when responding to the client. This property is obsolete. | Improve this Doc View Source RedirectLocation Gets or sets the value of the HTTP Location header in this response. Declaration public string RedirectLocation { get; set; } Property Value Type Description String A String that contains the absolute URL to be sent to the client in the Location header. | Improve this Doc View Source SendChunked Gets or sets whether the response uses chunked transfer encoding. Declaration public bool SendChunked { get; set; } Property Value Type Description Boolean true if the response is set to use chunked transfer encoding; otherwise, false . The default is false . | Improve this Doc View Source StatusCode Gets or sets the HTTP status code to be returned to the client. Declaration public int StatusCode { get; set; } Property Value Type Description Int32 An Int32 value that specifies the HttpStatusCode for the requested resource. The default is OK , indicating that the server successfully processed the client's request and included the requested resource in the response body. | Improve this Doc View Source StatusDescription Gets or sets a text description of the HTTP status code that is returned to the client. Declaration public string StatusDescription { get; set; } Property Value Type Description String The text description of the HTTP status code returned to the client. Methods | Improve this Doc View Source Close() Sends the response to the client and releases the resources held by this HttpListenerResponse instance. Declaration public void Close() Remarks This method flushes data to the client and closes the network connection. | Improve this Doc View Source Detach() Declaration public void Detach() | Improve this Doc View Source Finalize() Called to close the socket if necessary. Declaration protected void Finalize() Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Closes the socket and sends the response if it was not done earlier and the socket is present. Declaration void IDisposable.Dispose() Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.HttpStatusCode.html": {
    "href": "api/System.Net.HttpStatusCode.html",
    "title": "Enum HttpStatusCode | nanoFramework Documentation",
    "keywords": "Enum HttpStatusCode Contains the values of status codes defined for HTTP. Namespace : System.Net Assembly : System.Net.Http.dll Syntax public enum HttpStatusCode Remarks Status codes indicate categories, as follows: 1xx -- Informational. 2xx -- Successful. 3xx -- Redirection. 4xx -- Client Error. 5xx -- Server Error. Fields Name Description Accepted Equivalent to HTTP status 202. Indicates that the request has been accepted for further processing. Ambiguous Equivalent to HTTP status 300. Indicates that the requested information has multiple representations. The default action is to treat this status as a redirect and follow the contents of the Location header associated with this response. If the property is false , Ambiguous will cause an exception to be thrown. Ambiguous is a synonym for MultipleChoices . BadGateway Equivalent to HTTP status 502. Indicates that an intermediate proxy server received a bad response from another proxy or the origin server. BadRequest Equivalent to HTTP status 400. Indicates that the request could not be understood by the server. BadRequest is sent when no other error is applicable, or if the exact error is unknown or does not have its own error code. Conflict Equivalent to HTTP status 409. Indicates that the request could not be carried out because of a conflict on the server. Continue Equivalent to HTTP status 100. Indicates that the client can continue with its request. Created Equivalent to HTTP status 201. Indicates that the request resulted in a new resource created before the response was sent. ExpectationFailed Equivalent to HTTP status 417. Indicates that an expectation given in an Expect header could not be met by the server. Forbidden Equivalent to HTTP status 403. Indicates that the server refuses to fulfill the request. Found Equivalent to HTTP status 302. Indicates that the requested information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method. If the property is false , Found will cause an exception to be thrown. Found is a synonym for Redirect . GatewayTimeout Equivalent to HTTP status 504. Indicates that an intermediate proxy server timed out while waiting for a response from another proxy or the origin server. Gone Equivalent to HTTP status 410. Indicates that the requested resource is no longer available. HttpVersionNotSupported Equivalent to HTTP status 505. Indicates that the requested HTTP version is not supported by the server. InternalServerError Equivalent to HTTP status 500. Indicates that a generic error has occurred on the server. LengthRequired Equivalent to HTTP status 411. Indicates that the required Content-length header is missing. MethodNotAllowed Equivalent to HTTP status 405. Indicates that the request method (POST or GET) is not allowed on the requested resource. Moved Equivalent to HTTP status 301. Indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method. Moved is a synonym for MovedPermanently . MovedPermanently Equivalent to HTTP status 301. Indicates that the requested information has been moved to the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. MovedPermanently is a synonym for Moved . MultipleChoices Equivalent to HTTP status 300. Indicates that the requested information has multiple representations. The default action is to treat this status as a redirect and follow the contents of the Location header associated with this response. If the property is false , MultipleChoices will cause an exception to be thrown. MultipleChoices is a synonym for Ambiguous . NoContent Equivalent to HTTP status 204. Indicates that the request has been successfully processed and that the response is intentionally blank. NonAuthoritativeInformation Equivalent to HTTP status 203. Indicates that the returned metainformation is from a cached copy instead of the origin server and therefore may be incorrect. NotAcceptable Equivalent to HTTP status 406. Indicates that the client has indicated with Accept headers that it will not accept any of the available representations of the resource. NotFound Equivalent to HTTP status 404. Indicates that the requested resource does not exist on the server. NotImplemented Equivalent to HTTP status 501. Indicates that the server does not support the requested function. NotModified Equivalent to HTTP status 304. Indicates that the client's cached copy is up-to-date. The contents of the resource are not transferred. OK Equivalent to HTTP status 200. Indicates that the request succeeded and that the requested information is in the response. This is the most common status code to receive. PartialContent Equivalent to HTTP status 206. Indicates that the response is a partial response as requested by a GET request that includes a byte range. PaymentRequired Equivalent to HTTP status 402. Reserved for future use. PreconditionFailed Equivalent to HTTP status 412. Indicates that a condition set for this request failed, and the request cannot be carried out. Conditions are set with conditional request headers like If-Match, If-None-Match, or If-Unmodified-Since. ProxyAuthenticationRequired Equivalent to HTTP status 407. Indicates that the requested proxy requires authentication. The Proxy-authenticate header contains the details of how to perform the authentication. Redirect Equivalent to HTTP status 302. Indicates that the requested information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will use the GET method. If the property is false , Redirect will cause an exception to be thrown. Redirect is a synonym for Found . RedirectKeepVerb Equivalent to HTTP status 307. Indicates that the request information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will also use the POST method. If the property is false , RedirectKeepVerb will cause an exception to be thrown. RedirectKeepVerb is a synonym for TemporaryRedirect . RedirectMethod Equivalent to HTTP status 303. Automatically redirects the client to the URI specified in the Location header as the result of a POST. The request to the resource specified by the Location header will be made with a GET. If the property is false , RedirectMethod will cause an exception to be thrown. RedirectMethod is a synonym for SeeOther . RequestedRangeNotSatisfiable Equivalent to HTTP status 416. Indicates that the range of data requested from the resource cannot be returned, either because the beginning of the range is before the beginning of the resource, or the end of the range is after the end of the resource. RequestEntityTooLarge Equivalent to HTTP status 413. Indicates that the request is too large for the server to process. RequestTimeout Equivalent to HTTP status 408. Indicates that the client did not send a request within the time the server was expecting the request. RequestUriTooLong Equivalent to HTTP status 414. Indicates that the URI is too long. ResetContent Equivalent to HTTP status 205. Indicates that the client should reset (not reload) the current resource. SeeOther Equivalent to HTTP status 303. Automatically redirects the client to the URI specified in the Location header as the result of a POST. The request to the resource specified by the Location header will be made with a GET. If the property is false , SeeOther will cause an exception to be thrown. SeeOther is a synonym for RedirectMethod . ServiceUnavailable Equivalent to HTTP status 503. Indicates that the server is temporarily unavailable, usually due to high load or maintenance. SwitchingProtocols Equivalent to HTTP status 101. Indicates that the protocol version or protocol is being changed. TemporaryRedirect Equivalent to HTTP status 307. Indicates that the request information is located at the URI specified in the Location header. The default action when this status is received is to follow the Location header associated with the response. When the original request method was POST, the redirected request will also use the POST method. If the property is false , TemporaryRedirect will cause an exception to be thrown. TemporaryRedirect is a synonym for RedirectKeepVerb . Unauthorized Equivalent to HTTP status 401. Indicates that the requested resource requires authentication. The WWW-Authenticate header contains the details of how to perform the authentication. UnsupportedMediaType Equivalent to HTTP status 415. Indicates that the request is an unsupported type. Unused Equivalent to HTTP status 306. This value is a proposed extension to the HTTP/1.1 specification that is not fully specified. UseProxy Equivalent to HTTP status 305. Indicates that the request should use the proxy server at the URI specified in the Location header. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.HttpVersion.html": {
    "href": "api/System.Net.HttpVersion.html",
    "title": "Class HttpVersion | nanoFramework Documentation",
    "keywords": "Class HttpVersion Defines the HTTP version numbers that are supported by the and classes. Inheritance Object HttpVersion Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpVersion Fields | Improve this Doc View Source Version10 Defines a Version instance for HTTP 1.0. Declaration public static readonly Version Version10 Field Value Type Description Version | Improve this Doc View Source Version11 Defines a Version instance for HTTP 1.1. Declaration public static readonly Version Version11 Field Value Type Description Version Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.HttpWebRequest.html": {
    "href": "api/System.Net.HttpWebRequest.html",
    "title": "Class HttpWebRequest | nanoFramework Documentation",
    "keywords": "Class HttpWebRequest Provides an HTTP-specific implementation of the WebRequest class. Inheritance Object MarshalByRefObject WebRequest HttpWebRequest Implements IDisposable Inherited Members WebRequest.Initialize() WebRequest.Dispose() WebRequest.ConnectionGroupName WebRequest.DefaultWebProxy WebRequest.Create(String) WebRequest.Create(Uri) WebRequest.RegisterPrefix(String, IWebRequestCreate) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpWebRequest : WebRequest, IDisposable Remarks This class does the main work of the request: it collects the header information from the user, exposes the Stream for outgoing entity data, and processes the incoming request. Properties | Improve this Doc View Source Accept Gets or sets the value of the Accept HTTP header. Declaration public string Accept { get; set; } Property Value Type Description String The value of the Accept HTTP header. The default value is null . | Improve this Doc View Source Address Gets the URI for this request. Declaration public Uri Address { get; } Property Value Type Description Uri A Uri that identifies the Internet resource that actually responds to the request. The default is the URI used by the WebRequest. Create(Uri) method to initialize the request. Remarks This value is always the same as the RequestUri property, because automatic re-direction isn't supported. | Improve this Doc View Source AllowAutoRedirect Gets a value that indicates whether the request should follow redirection responses. This value is always false , because Autodirect isn't supported. Declaration public bool AllowAutoRedirect { get; } Property Value Type Description Boolean This value is always false , because Autodirect isn't supported. | Improve this Doc View Source AllowWriteStreamBuffering Gets or sets a value that indicates whether to buffer the data sent to the Internet resource. Declaration public bool AllowWriteStreamBuffering { get; set; } Property Value Type Description Boolean true to enable buffering of the data sent to the Internet resource; false to disable buffering. The default is true . | Improve this Doc View Source ContentLength Gets or sets the Content-Length of the request entity body. Declaration public override long ContentLength { get; set; } Property Value Type Description Int64 The number of bytes of data to send to the Internet resource. The default is -1, which indicates the property has not been set and that there is no request data to send. Overrides WebRequest.ContentLength Remarks Getting this property returns the last value set, or -1 if no value has been set. Setting it sets the content length, and the application must write that much data to the stream. This property interacts with HttpWebRequest . SendChunked . | Improve this Doc View Source ContentType Gets or sets the type of the entity body (the value of the content type). Declaration public override string ContentType { get; set; } Property Value Type Description String The value of the Content-type HTTP header. The default value is null . Overrides WebRequest.ContentType Remarks Setting to null clears the content-type. | Improve this Doc View Source ContinueDelegate Gets or sets the delegate used to signal on Continue callback. Declaration public HttpContinueDelegate ContinueDelegate { get; set; } Property Value Type Description HttpContinueDelegate A delegate that implements the callback method that executes when an HTTP Continue response is returned from the Internet resource. The default value is null . Remarks This property gets or sets the delegate method called when an HTTP 100-continue response is received from the Internet resource. | Improve this Doc View Source Credentials Set or Get NetworkCredential if user have send user name and password. Declaration public NetworkCredential Credentials { get; set; } Property Value Type Description NetworkCredential | Improve this Doc View Source DefaultMaximumResponseHeadersLength Gets or sets the default maximum allowed length of the response headers. Declaration public static int DefaultMaximumResponseHeadersLength { get; set; } Property Value Type Description Int32 The default maximum allowed length of the response headers. Remarks On creation of an HttpWebRequest instance, this value is used for the MaximumResponseHeadersLength property. | Improve this Doc View Source Expect Gets or sets the value of the Expect HTTP header. Declaration public string Expect { get; set; } Property Value Type Description String The contents of the Expect HTTP header. The default value is null . Remarks When setting this property, null clears the Expect (except for the 100-continue value). | Improve this Doc View Source HaveResponse Gets whether a response has been received from an Internet resource. Declaration public bool HaveResponse { get; } Property Value Type Description Boolean true if a response has been received; otherwise, false . | Improve this Doc View Source Headers A collection of HTTP headers stored as name/value pairs. Declaration public override WebHeaderCollection Headers { get; set; } Property Value Type Description WebHeaderCollection A WebHeaderCollection that contains the name/value pairs that make up the headers for the HTTP request. Overrides WebRequest.Headers Remarks The following header values are set through properties on the HttpWebRequest class: Accept, Connection, Content-Length, Content-Type, Expect, Range, Referer, Transfer-Encoding, and User-Agent. Trying to set these header values by using WebHeaderCollection. Add(String, String) () will raise an exception. Date and Host are set internally. | Improve this Doc View Source HttpsAuthentCert Gets or sets the root CA certificate used to authenticate with https servers. This certificate is used only for https connections; http connections do not require this. Declaration public X509Certificate HttpsAuthentCert { get; set; } Property Value Type Description X509Certificate | Improve this Doc View Source IfModifiedSince Gets the IfModifiedSince value of HttpKnownHeaderNames . Declaration public DateTime IfModifiedSince { get; } Property Value Type Description DateTime A DateTime that contains the contents of the If-Modified-Since HTTP header. The default value is the current date and time. Remarks The setter for this property isn't supported, because a function that formats the time isn't implemented. null clears the IfModifiedSince header. | Improve this Doc View Source KeepAlive Gets or sets whether to use a persistent connection, if available. Declaration public bool KeepAlive { get; set; } Property Value Type Description Boolean true if the request to the Internet resource should contain a Connection HTTP header with the value Keep-alive; otherwise, false . The default is true . | Improve this Doc View Source MaximumAutomaticRedirections Gets the maximum number of automatic redirections. This value is always zero, because auto-redirection isn't supported. Declaration public int MaximumAutomaticRedirections { get; } Property Value Type Description Int32 This value is always zero, because auto-redirection isn't supported. | Improve this Doc View Source MaximumResponseHeadersLength Gets or sets the maximum allowed length of the response headers. Declaration public int MaximumResponseHeadersLength { get; set; } Property Value Type Description Int32 The length, in kilobytes (1024 bytes), of the response headers. Remarks The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol. A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail. If this property is not explicitly set, it defaults to the value of the DefaultMaximumResponseHeadersLength property. | Improve this Doc View Source Method Gets or sets the HTTP method of this request. Declaration public override string Method { get; set; } Property Value Type Description String The request method to use to contact the Internet resource. The default value is GET. Overrides WebRequest.Method Remarks This method represents the initial origin verb, which is unchanged and unaffected by redirects. | Improve this Doc View Source ProtocolVersion Gets or sets the HTTP protocol version for this request. Declaration public Version ProtocolVersion { get; set; } Property Value Type Description Version The HTTP version to use for the request. The default is Version11 . | Improve this Doc View Source Proxy Gets or sets the proxy for the request. Declaration public override IWebProxy Proxy { get; set; } Property Value Type Description IWebProxy The IWebProxy object to use to proxy the request. null indicates that no proxy will be used. Overrides WebRequest.Proxy | Improve this Doc View Source ReadWriteTimeout Gets or sets a timeout in milliseconds when writing to or reading from a stream. Declaration public int ReadWriteTimeout { get; set; } Property Value Type Description Int32 The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes). Remarks This property is used to control the timeout when calling Read(Byte[], Int32, Int32) and Write(Byte[], Int32, Int32) . This property affects Stream s returned from GetResponse(). GetResponseStream() () and GetResponse(). GetRequestStream() (). | Improve this Doc View Source Referer Gets or sets the value of the Referer HTTP header. Declaration public string Referer { get; set; } Property Value Type Description String The value of the Referer HTTP header. The default value is null . Remarks This header value is misspelled intentionally. | Improve this Doc View Source RequestUri Gets the original Uniform Resource Identifier (URI) of the request. Declaration public override Uri RequestUri { get; } Property Value Type Description Uri A Uri that contains the URI of the Internet resource passed to the WebRequest. Create(Uri) method. Overrides WebRequest.RequestUri Remarks The URI object was created by the constructor and is always non-null. The URI object will always be the base URI, because automatic re-directs aren't supported. | Improve this Doc View Source SendChunked Gets or sets the state of chunk transfer send mode. Declaration public bool SendChunked { get; set; } Property Value Type Description Boolean true to send data to the Internet resource in segments; otherwise, false . The default value is false . Remarks If true , bits are uploaded and written using the Chunked property of HttpWriteMode . | Improve this Doc View Source SslProtocols Gets or sets the TLS/SSL protocol used by the HttpWebRequest class. Declaration public SslProtocols SslProtocols { get; set; } Property Value Type Description SslProtocols One of the values defined in the SslProtocols enumeration. Remarks Setting this property is mandatory when performing HTTPS requests, otherwise the authentication will fail. This property is specific to nanoFramework. There is no equivalent in the .NET API. | Improve this Doc View Source Timeout Gets or sets the timeout value in milliseconds for the GetResponse() and GetRequestStream() methods. Declaration public override int Timeout { get; set; } Property Value Type Description Int32 The number of milliseconds to wait before the request times out. The default is 100,000 milliseconds (100 seconds). Overrides WebRequest.Timeout Remarks Overrides the Timeout property of WebRequest . | Improve this Doc View Source TransferEncoding Gets or sets the TransferEncoding HTTP header. Declaration public string TransferEncoding { get; set; } Property Value Type Description String The value of the Transfer-encoding HTTP header. The default value is null . Remarks null clears the transfer encoding except for the Chunked setting. | Improve this Doc View Source UserAgent Gets or sets the value of the User-Agent HTTP header. Declaration public string UserAgent { get; set; } Property Value Type Description String The value of the User-agent HTTP header. The default value is null . Methods | Improve this Doc View Source AddRange(Int32) Adds a range header to a request for a specific range from the beginning or end of the requested data. Declaration public void AddRange(int range) Parameters Type Name Description Int32 range Start of the range. The end of the range is the end of the existing data. | Improve this Doc View Source AddRange(Int32, Int32) Adds a byte range header to the request for a specified range. Declaration public void AddRange(int from, int to) Parameters Type Name Description Int32 from The start of the range. Int32 to The end of the range. | Improve this Doc View Source AddRange(String, Int32) Adds a range header to a request for a specific range from the beginning or end of the requested data. Declaration public void AddRange(string rangeSpecifier, int range) Parameters Type Name Description String rangeSpecifier The description of the range, such as \"bytes\". Int32 range The range value. | Improve this Doc View Source AddRange(String, Int32, Int32) Adds a range header to a request for a specified range. Declaration public void AddRange(string rangeSpecifier, int from, int to) Parameters Type Name Description String rangeSpecifier The description of the range, such as \"bytes\". Int32 from The start of the range. Int32 to The end of the range. Remarks rangeSpecifier would normally be specified as \"bytes\", since this is the only range specifier recognized by most HTTP servers. Setting rangeSpecifier to some other string allows support for custom range specifiers other than bytes. The byte-range specifier is defined in RFC 2616 by the IETF. | Improve this Doc View Source Dispose(Boolean) Closes a response stream, if present. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Not used. Overrides WebRequest.Dispose(Boolean) | Improve this Doc View Source GetRequestStream() Submits a request with HTTP headers to the server, and returns a Stream object to use to write request data. Declaration public override Stream GetRequestStream() Returns Type Description Stream A Stream to use to write request data. Overrides WebRequest.GetRequestStream() Remarks Used for POST of PUT requests. | Improve this Doc View Source GetResponse() Returns a response from an Internet resource. Overrides the WebRequest . GetResponse() method. Declaration public override WebResponse GetResponse() Returns Type Description WebResponse The response from the Internet resource. Overrides WebRequest.GetResponse() | Improve this Doc View Source Reset() Reset Declaration public void Reset() Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.HttpWebResponse.html": {
    "href": "api/System.Net.HttpWebResponse.html",
    "title": "Class HttpWebResponse | nanoFramework Documentation",
    "keywords": "Class HttpWebResponse Handles retrieval of HTTP Response headers, and handles data reads. Inheritance Object MarshalByRefObject WebResponse HttpWebResponse Implements IDisposable Inherited Members WebResponse.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class HttpWebResponse : WebResponse, IDisposable Remarks This class should never be created directly, but rather should be created by the HttpWebRequest . GetResponse() method. Properties | Improve this Doc View Source ContentEncoding Gets the method that is used to encode the body of the response. Declaration public string ContentEncoding { get; } Property Value Type Description String A string that describes the method that is used to encode the body of the response. Remarks This property contains the value of the Content-Encoding header returned with the response; that is, the encoding used for the response. | Improve this Doc View Source ContentLength Gets the length of the content returned by the request. Declaration public override long ContentLength { get; } Property Value Type Description Int64 The number of bytes returned by the request. Content length does not include header information. Overrides WebResponse.ContentLength Remarks This property contains the value of the Content-Length header that is returned with the response. If the Content-Length header is not set in the response, this property is set to -1. | Improve this Doc View Source ContentType Gets the content type of the response. Declaration public override string ContentType { get; } Property Value Type Description String A string that contains the content type of the response. Overrides WebResponse.ContentType Remarks This property contains the value of the Content-Type header returned with the response. | Improve this Doc View Source Headers Retrieves a response header object. Declaration public override WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection A WebHeaderCollection that contains the header information returned with the response. Overrides WebResponse.Headers | Improve this Doc View Source LastModified Gets the value of the Last-Modified header, which indicates the last time the document was modified. Declaration public DateTime LastModified { get; } Property Value Type Description DateTime A DateTime that contains the date and time that the contents of the response were modified. | Improve this Doc View Source Method Gets the method that is used to return the response. Declaration public string Method { get; } Property Value Type Description String A string that contains the HTTP method that is used to return the response. | Improve this Doc View Source ProtocolVersion Gets the version of the HTTP protocol that is used in the response. Declaration public Version ProtocolVersion { get; } Property Value Type Description Version A Version that contains the HTTP protocol version of the response. | Improve this Doc View Source ResponseUri Gets the final Response URI, that includes any changes that may have transpired from the orginal Request. Declaration public override Uri ResponseUri { get; } Property Value Type Description Uri A Uri that contains the URI of the Internet resource that responded to the request. Overrides WebResponse.ResponseUri | Improve this Doc View Source Server Gets the name of the server that sent the response. Declaration public string Server { get; } Property Value Type Description String A string that contains the name of the server that sent the response. | Improve this Doc View Source StatusCode Gets the status of the HTTP response, as a number. Declaration public HttpStatusCode StatusCode { get; } Property Value Type Description HttpStatusCode One of the HttpStatusCode values. Remarks For status code values, see HttpStatusCode . | Improve this Doc View Source StatusDescription Gets the status description returned with the response. Declaration public string StatusDescription { get; } Property Value Type Description String A string that describes the status of the response. Methods | Improve this Doc View Source Close() Closes the response stream. Declaration public override void Close() Overrides WebResponse.Close() Remarks The Close() method closes the response stream and releases the connection to the resource for reuse by other requests. You should not access any properties of the HttpWebResponse object after the call to the Close() method. You must call either the Close() or the Close() method to close the stream and release the connection for reuse. It is not necessary to call both Close() and Close() , but doing so does not cause an error. Failure to close the stream can cause your application to run out of connections. | Improve this Doc View Source Dispose(Boolean) Closes a response stream, if present. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Not used. Overrides WebResponse.Dispose(Boolean) | Improve this Doc View Source GetResponseHeader(String) Gets the contents of a header that was returned with the response. Declaration public string GetResponseHeader(string headerName) Parameters Type Name Description String headerName HTTP header to search for matching header on. Returns Type Description String The matched entry, if found. | Improve this Doc View Source GetResponseStream() Gets the stream used for reading the body of the response from the server. Declaration public override Stream GetResponseStream() Returns Type Description Stream A network stream to read body of the message. Overrides WebResponse.GetResponseStream() Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.IPAddress.html": {
    "href": "api/System.Net.IPAddress.html",
    "title": "Class IPAddress | nanoFramework Documentation",
    "keywords": "Class IPAddress Provides an internet protocol (IP) address. Inheritance Object IPAddress Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax [Serializable] public class IPAddress Constructors | Improve this Doc View Source IPAddress(Byte[]) Initializes a new instance of the IPAddress class with the address specified as a Byte array. Declaration public IPAddress(byte[] address) Parameters Type Name Description Byte [] address | Improve this Doc View Source IPAddress(Int64) Initializes a new instance of the IPAddress class with the address specified as an Int64. Declaration public IPAddress(long newAddress) Parameters Type Name Description Int64 newAddress Fields | Improve this Doc View Source Any Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only. Declaration public static readonly IPAddress Any Field Value Type Description IPAddress | Improve this Doc View Source Loopback Provides the IP loopback address. This field is read-only. Declaration public static readonly IPAddress Loopback Field Value Type Description IPAddress Properties | Improve this Doc View Source AddressFamily Gets the address family of the IP address. Declaration public AddressFamily AddressFamily { get; } Property Value Type Description AddressFamily Returns InterNetwork for IPv4 or InterNetworkV6 for IPv6. Methods | Improve this Doc View Source Equals(Object) Compares two IP addresses. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An IPAddress instance to compare to the current instance. Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetAddressBytes() Provides a copy of the IPAddress as an array of bytes. Declaration public byte[] GetAddressBytes() Returns Type Description Byte [] A Byte array. | Improve this Doc View Source GetDefaultLocalAddress() Retrieves an IP address that is the local default address. Declaration public static IPAddress GetDefaultLocalAddress() Returns Type Description IPAddress The default IP address. | Improve this Doc View Source Parse(String) Converts an IP address string to an IPAddress instance. Declaration public static IPAddress Parse(string ipString) Parameters Type Name Description String ipString A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6. Returns Type Description IPAddress An IPAddress instance. | Improve this Doc View Source ToString() Converts an Internet address to its standard notation. Declaration public override string ToString() Returns Type Description String A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation. Overrides Object.ToString() Remarks The ToString method converts the IP address that is stored in the Address property to either IPv4 dotted-quad or IPv6 colon-hexadecimal notation. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.IPEndPoint.html": {
    "href": "api/System.Net.IPEndPoint.html",
    "title": "Class IPEndPoint | nanoFramework Documentation",
    "keywords": "Class IPEndPoint Represents a network endpoint as an IP address and a port number. Inheritance Object EndPoint IPEndPoint Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax [Serializable] public class IPEndPoint : EndPoint Constructors | Improve this Doc View Source IPEndPoint(Int64, Int32) Initializes a new instance of the IPEndPoint class with the specified address and port number. Declaration public IPEndPoint(long address, int port) Parameters Type Name Description Int64 address The IP address of the Internet host. Int32 port The port number associated with the address, or 0 to specify any available port. port is in host order. | Improve this Doc View Source IPEndPoint(IPAddress, Int32) Initializes a new instance of the IPEndPoint class with the specified address and port number. Declaration public IPEndPoint(IPAddress address, int port) Parameters Type Name Description IPAddress address Int32 port Fields | Improve this Doc View Source MaxPort Specifies the maximum value that can be assigned to the Port property. The MaxPort value is set to 0x0000FFFF. This field is read-only. Declaration public const int MaxPort = 65535 Field Value Type Description Int32 | Improve this Doc View Source MinPort Specifies the minimum value that can be assigned to the Port property. This field is read-only. Declaration public const int MinPort = 0 Field Value Type Description Int32 Properties | Improve this Doc View Source Address Gets or sets the IP address of the endpoint. Declaration public IPAddress Address { get; } Property Value Type Description IPAddress An IPAddress instance containing the IP address of the endpoint. | Improve this Doc View Source AddressFamily Gets the Internet Protocol (IP) address family. Declaration public AddressFamily AddressFamily { get; } Property Value Type Description AddressFamily Returns InterNetwork . | Improve this Doc View Source Port Gets or sets the port number of the endpoint. Declaration public int Port { get; } Property Value Type Description Int32 An integer value in the range MinPort to MaxPort indicating the port number of the endpoint. Methods | Improve this Doc View Source Create(SocketAddress) Creates an endpoint from a socket address. Declaration public override EndPoint Create(SocketAddress socketAddress) Parameters Type Name Description SocketAddress socketAddress The SocketAddress to use for the endpoint. Returns Type Description EndPoint An EndPoint instance using the specified socket address. Overrides EndPoint.Create(SocketAddress) | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to the current IPEndPoint instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The specified Object to compare with the current IPEndPoint instance. Returns Type Description Boolean true if the objects are equal. Overrides Object.Equals(Object) | Improve this Doc View Source Serialize() Serializes endpoint information into a SocketAddress instance. Declaration public override SocketAddress Serialize() Returns Type Description SocketAddress A SocketAddress instance containing the socket address for the endpoint. Overrides EndPoint.Serialize() | Improve this Doc View Source ToString() Returns the IP address and port number of the specified endpoint. Declaration public override string ToString() Returns Type Description String A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80). Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.IPHostEntry.html": {
    "href": "api/System.Net.IPHostEntry.html",
    "title": "Class IPHostEntry | nanoFramework Documentation",
    "keywords": "Class IPHostEntry Provides a container class for Internet host address information. Inheritance Object IPHostEntry Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax public class IPHostEntry Remarks The IPHostEntry class associates a Domain Name System (DNS) host name with an array of aliases and an array of matching IP addresses. The IPHostEntry class is used as a helper class with the Dns class. Properties | Improve this Doc View Source AddressList Gets or sets a list of IP addresses that are associated with a host. Declaration public IPAddress[] AddressList { get; } Property Value Type Description IPAddress [] An array of type IPAddress that contains IP addresses that resolve to the host names that are contained in the Aliases property. | Improve this Doc View Source HostName Gets or sets the DNS name of the host. Declaration public string HostName { get; } Property Value Type Description String A string that contains the primary host name for the server. Remarks The HostName property contains the primary host name for a server. If the DNS entry for the server defines additional aliases, they will be available in the Aliases property. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.IWebProxy.html": {
    "href": "api/System.Net.IWebProxy.html",
    "title": "Interface IWebProxy | nanoFramework Documentation",
    "keywords": "Interface IWebProxy Provides the base interface for implementing proxy access for the class. Namespace : System.Net Assembly : System.Net.Http.dll Syntax public interface IWebProxy Methods | Improve this Doc View Source GetProxy(Uri) Returns the URI of a proxy. Declaration Uri GetProxy(Uri destination) Parameters Type Name Description Uri destination The destination URI. Returns Type Description Uri A Uri instance that contains the URI of the proxy used to contact destination . | Improve this Doc View Source IsBypassed(Uri) Indicates whether the proxy should not be used for the specified host. Declaration bool IsBypassed(Uri host) Parameters Type Name Description Uri host The host to check, to determine whether the proxy is needed to access it. Returns Type Description Boolean Whether the proxy should not be used for the specified host. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.IWebRequestCreate.html": {
    "href": "api/System.Net.IWebRequestCreate.html",
    "title": "Interface IWebRequestCreate | nanoFramework Documentation",
    "keywords": "Interface IWebRequestCreate The interface for creating WebRequest class objects. Namespace : System.Net Assembly : System.Net.Http.dll Syntax public interface IWebRequestCreate Methods | Improve this Doc View Source Create(Uri) Creates an instance of a class derived from WebRequest . Declaration WebRequest Create(Uri uri) Parameters Type Name Description Uri uri The URI for initialization of the class that is derived from WebRequest . Returns Type Description WebRequest An instance of the class that is derived from WebRequest . Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.NetworkCredential.html": {
    "href": "api/System.Net.NetworkCredential.html",
    "title": "Class NetworkCredential | nanoFramework Documentation",
    "keywords": "Class NetworkCredential Class that keeps user name and password. Inheritance Object NetworkCredential Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class NetworkCredential Constructors | Improve this Doc View Source NetworkCredential() Construct class with empty user name and password Declaration public NetworkCredential() | Improve this Doc View Source NetworkCredential(String, String) Constructs credientials and initializes them by provided user name and pssword Declaration public NetworkCredential(string userName, string password) Parameters Type Name Description String userName String password | Improve this Doc View Source NetworkCredential(String, String, AuthenticationType) Initializes a new instance of the NetworkCredential class. Declaration public NetworkCredential(string userName, string password, AuthenticationType authenticationType) Parameters Type Name Description String userName Name of the user. String password The password. AuthenticationType authenticationType Type of the authentication. Properties | Improve this Doc View Source AuthenticationType Gets or sets the type of the authentication. Declaration public AuthenticationType AuthenticationType { get; set; } Property Value Type Description AuthenticationType The type of the authentication. | Improve this Doc View Source Password Set or get password. Declaration public string Password { get; set; } Property Value Type Description String | Improve this Doc View Source UserName Set or get user name. Declaration public string UserName { get; set; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.NetworkInformation.AddressMode.html": {
    "href": "api/System.Net.NetworkInformation.AddressMode.html",
    "title": "Enum AddressMode | nanoFramework Documentation",
    "keywords": "Enum AddressMode Start up network IP address assigning modes Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public enum AddressMode : byte Remarks This Enum is exclusive of nanoFramework and it does not exist on the UWP API. Fields Name Description AutoIP Auto IP. DHCP IP address from DHCP. Invalid Invalid state. Static Static IP address. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.NetworkInformation.AuthenticationType.html": {
    "href": "api/System.Net.NetworkInformation.AuthenticationType.html",
    "title": "Enum AuthenticationType | nanoFramework Documentation",
    "keywords": "Enum AuthenticationType Specifies the authentication used in a wireless network. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public enum AuthenticationType : byte Fields Name Description EAP Extensible Authentication Protocol. None No protocol. Open Open System authentication, for use with WEP encryption type. PEAP Protected Extensible Authentication Protocol. Shared Shared Key authentication, for use with WEP encryption type. WCN Microsoft Windows Connect Now protocol. WEP Wired Equivalent Privacy protocol. WPA Wi-Fi Protected Access protocol. WPA2 Wi-Fi Protected Access 2 protocol. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.NetworkInformation.EncryptionType.html": {
    "href": "api/System.Net.NetworkInformation.EncryptionType.html",
    "title": "Enum EncryptionType | nanoFramework Documentation",
    "keywords": "Enum EncryptionType Defines the available types of encryption for wireless networks. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public enum EncryptionType : byte Fields Name Description Certificate Certificate encryption. None No encryption. WEP Wired Equivalent Privacy encryption. WPA Wireless Protected Access encryption. WPA_PSK Wireless Protected Access Pre-Shared Key encryption. WPA2 Wireless Protected Access 2 encryption. WPA2_PSK Wireless Protected Access 2 Pre-Shared Key encryption. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.NetworkInformation.html": {
    "href": "api/System.Net.NetworkInformation.html",
    "title": "Namespace System.Net.NetworkInformation | nanoFramework Documentation",
    "keywords": "Namespace System.Net.NetworkInformation Classes IPGlobalProperties Provides information about the network connectivity of the local computer. NetworkAPStationEventArgs Contains argument values for network availability events. NetworkAvailabilityEventArgs Contains argument values for network availability events. NetworkChange Contains information about changes in the availability and address of the network. NetworkInterface Provides information about network interfaces and enables applications to control them. Wireless80211Configuration Configuration of wireless network based on the 802.11 standard. WirelessAPConfiguration Configuration of wireless network SOft AP based on the 802.11 standard. WirelessAPStation Class that encapsulates the details of a connected client. Enums AddressMode Start up network IP address assigning modes AuthenticationType Specifies the authentication used in a wireless network. EncryptionType Defines the available types of encryption for wireless networks. NetworkInterfaceType Specifies the type of network interface used by the device. PhyProtocols Enum of Phy protocols used for connection. RadioType Specifies the type of radio that the wireless network uses. Wireless80211Configuration.ConfigurationOptions Configuration flags used for Wireless configuration. WirelessAPConfiguration.ConfigurationOptions Configuration flags used for Wireless Soft AP configuration. Delegates NetworkAddressChangedEventHandler Indicates a change in the availability of the network. NetworkAPStationChangedEventHandler Indicates a change in the connected clients to Access Point. NetworkAvailabilityChangedEventHandler Provides an event handler that is called when the network address changes."
  },
  "api/System.Net.NetworkInformation.IPGlobalProperties.html": {
    "href": "api/System.Net.NetworkInformation.IPGlobalProperties.html",
    "title": "Class IPGlobalProperties | nanoFramework Documentation",
    "keywords": "Class IPGlobalProperties Provides information about the network connectivity of the local computer. Inheritance Object IPGlobalProperties Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public static class IPGlobalProperties Methods GetIPAddress() Gets the IP address of the network interface. Declaration public static extern IPAddress GetIPAddress() Returns Type Description IPAddress An IPAddress if a valid IP address is available; otherwise, an Any . Remarks This method is exclusive of .NET nanoFramework."
  },
  "api/System.Net.NetworkInformation.NetworkAddressChangedEventHandler.html": {
    "href": "api/System.Net.NetworkInformation.NetworkAddressChangedEventHandler.html",
    "title": "Delegate NetworkAddressChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate NetworkAddressChangedEventHandler Indicates a change in the availability of the network. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public delegate void NetworkAddressChangedEventHandler(object sender, EventArgs e); Parameters Type Name Description Object sender Specifies the object that sent the network availability changed event. EventArgs e Contains the network availability changed event arguments. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.NetworkInformation.NetworkAPStationChangedEventHandler.html": {
    "href": "api/System.Net.NetworkInformation.NetworkAPStationChangedEventHandler.html",
    "title": "Delegate NetworkAPStationChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate NetworkAPStationChangedEventHandler Indicates a change in the connected clients to Access Point. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public delegate void NetworkAPStationChangedEventHandler(int NetworkIndex, NetworkAPStationEventArgs e); Parameters Type Name Description Int32 NetworkIndex Specifies the index of network interface that sent the event. NetworkAPStationEventArgs e Contains the network AP client changed event arguments. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.NetworkInformation.NetworkAPStationEventArgs.html": {
    "href": "api/System.Net.NetworkInformation.NetworkAPStationEventArgs.html",
    "title": "Class NetworkAPStationEventArgs | nanoFramework Documentation",
    "keywords": "Class NetworkAPStationEventArgs Contains argument values for network availability events. Inheritance Object EventArgs NetworkAPStationEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class NetworkAPStationEventArgs : EventArgs Properties | Improve this Doc View Source IsConnected Indicates whether the client has connected or disconnected. Declaration public bool IsConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source StationIndex Returns the Index of the connected Station. Declaration public int StationIndex { get; } Property Value Type Description Int32 Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler.html": {
    "href": "api/System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler.html",
    "title": "Delegate NetworkAvailabilityChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate NetworkAvailabilityChangedEventHandler Provides an event handler that is called when the network address changes. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public delegate void NetworkAvailabilityChangedEventHandler(object sender, NetworkAvailabilityEventArgs e); Parameters Type Name Description Object sender Specifies the object that sent the network address changed event. NetworkAvailabilityEventArgs e Contains the network address changed event arguments. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.NetworkInformation.NetworkAvailabilityEventArgs.html": {
    "href": "api/System.Net.NetworkInformation.NetworkAvailabilityEventArgs.html",
    "title": "Class NetworkAvailabilityEventArgs | nanoFramework Documentation",
    "keywords": "Class NetworkAvailabilityEventArgs Contains argument values for network availability events. Inheritance Object EventArgs NetworkAvailabilityEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class NetworkAvailabilityEventArgs : EventArgs Properties | Improve this Doc View Source IsAvailable Indicates whether the network is currently available. Declaration public bool IsAvailable { get; } Property Value Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.NetworkInformation.NetworkChange.html": {
    "href": "api/System.Net.NetworkInformation.NetworkChange.html",
    "title": "Class NetworkChange | nanoFramework Documentation",
    "keywords": "Class NetworkChange Contains information about changes in the availability and address of the network. Inheritance Object NetworkChange Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public static class NetworkChange Events | Improve this Doc View Source NetworkAddressChanged Event occurs when the IP address of a network interface changes. Declaration public static event NetworkAddressChangedEventHandler NetworkAddressChanged Event Type Type Description NetworkAddressChangedEventHandler Remarks The NetworkChange class raises NetworkAddressChanged events when the address of a network interface, also called a network card or adapter, changes. To have a NetworkChange object call an event-handling method when a NetworkAddressChanged event occurs, you must associate the method with a NetworkAddressChangedEventHandler delegate, and add this delegate to this event. | Improve this Doc View Source NetworkAPStationChanged Event occurs when a station connects or disconnects from Soft Access Point. Declaration public static event NetworkAPStationChangedEventHandler NetworkAPStationChanged Event Type Type Description NetworkAPStationChangedEventHandler Remarks The NetworkChange class raises the NetworkAPStationChanged events when a client connects or disconnects from the Soft AP. To have a NetworkChange object call an event-handling method when a NetworkAPStationChanged event occurs, you must associate the method with a NetworkAPStationChangedEventHandler delegate, and add this delegate to this event. | Improve this Doc View Source NetworkAvailabilityChanged Event occurs when the availability of the network changes. Declaration public static event NetworkAvailabilityChangedEventHandler NetworkAvailabilityChanged Event Type Type Description NetworkAvailabilityChangedEventHandler Remarks The NetworkChange class raises NetworkAvailabilityChanged events when the availability of the network changes. The network is available when at least one network interface is marked \"up\" and is not a tunnel or loopback interface. To have a NetworkChange object call an event-handling method when a NetworkAvailabilityChanged event occurs, you must associate the method with a NetworkAvailabilityChangedEventHandler delegate, and add this delegate to this event."
  },
  "api/System.Net.NetworkInformation.NetworkInterface.html": {
    "href": "api/System.Net.NetworkInformation.NetworkInterface.html",
    "title": "Class NetworkInterface | nanoFramework Documentation",
    "keywords": "Class NetworkInterface Provides information about network interfaces and enables applications to control them. Inheritance Object NetworkInterface Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class NetworkInterface Remarks This class is exclusive of nanoFramework and it does not exist on the UWP API. Constructors | Improve this Doc View Source NetworkInterface(Int32) Initializes a new instance of the NetworkInterface class. Declaration protected NetworkInterface(int interfaceIndex) Parameters Type Name Description Int32 interfaceIndex Properties | Improve this Doc View Source IPv4Address Holds the IP v4 address of the network interface. Declaration public string IPv4Address { get; } Property Value Type Description String | Improve this Doc View Source IPv4DnsAddresses Holds the IPv4 DNS server address. Declaration public string[] IPv4DnsAddresses { get; } Property Value Type Description String [] | Improve this Doc View Source IPv4GatewayAddress Contains the gateway IPv4 address. Declaration public string IPv4GatewayAddress { get; } Property Value Type Description String | Improve this Doc View Source IPv4SubnetMask Retrieves the network interface's IPv4 subnet mask. Declaration public string IPv4SubnetMask { get; } Property Value Type Description String | Improve this Doc View Source IsAutomaticDnsEnabled Retrieves a value indicating whether a network interface can obtain a DNS server address automatically. true if dynamic DNS is enabled, or false if not. Declaration public bool IsAutomaticDnsEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDhcpEnabled Gets a value specifying whether DHCP is enabled for this network interfaces. true if DHCP is enabled, or false if not. Declaration public bool IsDhcpEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source NetworkInterfaceType Retrieves a value specifying the type of network interface being used by the device. Declaration public NetworkInterfaceType NetworkInterfaceType { get; } Property Value Type Description NetworkInterfaceType | Improve this Doc View Source PhysicalAddress Gets or sets the Media Access Control (MAC) address for a network interface. Declaration public byte[] PhysicalAddress { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source SpecificConfigId The ID of the associated configuration, if any. To be used as the foreign key of that configuration. Declaration public uint SpecificConfigId { get; set; } Property Value Type Description UInt32 Remarks If there is no configuration associated it reads as MaxValue . Methods | Improve this Doc View Source EnableAutomaticDns() Enables a network interface to obtain a DNS server address automatically. Declaration public void EnableAutomaticDns() | Improve this Doc View Source EnableDhcp() Enables the Dynamic Host Configuration Protocol (DHCP) for service with this network interface. Declaration public void EnableDhcp() | Improve this Doc View Source EnableStaticIP(String, String, String, String, String, String) Enables an application to set and use a static IPv4 and IPv6 address. Declaration public void EnableStaticIP(string ipv4Address, string ipv4subnetMask, string ipv4gatewayAddress, string ipv6Address, string ipv6SubnetMask, string ipv6GatewayAddress) Parameters Type Name Description String ipv4Address Holds the IPv4 address to use. String ipv4subnetMask Contains the IPv4 address's subnet mask. String ipv4gatewayAddress Specifies the IPv4 address of the gateway. String ipv6Address Holds the IPv6 address to use. String ipv6SubnetMask Contains the IPv6 address's subnet mask. String ipv6GatewayAddress Specifies the IPv6 address of the gateway. | Improve this Doc View Source EnableStaticIPv4(String, String, String) Enables an application to set and use a static IPv4 address. Declaration public void EnableStaticIPv4(string ipv4Address, string ipv4SubnetMask, string ipv4GatewayAddress) Parameters Type Name Description String ipv4Address Holds the IPv4 address to use. String ipv4SubnetMask Contains the IPv4 address's subnet mask. String ipv4GatewayAddress Specifies the IPv4 address of the gateway. | Improve this Doc View Source EnableStaticIPv4Dns(String[]) Enables a network interface to use a specific DNS server IPv4 address. Declaration public void EnableStaticIPv4Dns(string[] dnsAddresses) Parameters Type Name Description String [] dnsAddresses Holds the DNS server address. | Improve this Doc View Source EnableStaticIPv6(String, String, String) Enables an application to set and use a static IPv6 address. Declaration public void EnableStaticIPv6(string ipv6Address, string ipv6SubnetMask, string ipv6GatewayAddress) Parameters Type Name Description String ipv6Address Holds the IPv6 address to use. String ipv6SubnetMask Contains the IPv6 address's subnet mask. String ipv6GatewayAddress Specifies the IPv6 address of the gateway. | Improve this Doc View Source EnableStaticIPv6Dns(String[]) Enables a network interface to use a specific DNS server IPv6 address. Declaration public void EnableStaticIPv6Dns(string[] dnsAddresses) Parameters Type Name Description String [] dnsAddresses Holds the DNS server address. | Improve this Doc View Source GetAllNetworkInterfaces() Retrieves an array of all of the device's network interfaces. Declaration public static NetworkInterface[] GetAllNetworkInterfaces() Returns Type Description NetworkInterface [] An array containing all of the device's network interfaces. GetIsNetworkAvailable() Indicates whether any network connection is available. Declaration public static extern bool GetIsNetworkAvailable() Returns Type Description Boolean true if a network connection is available; otherwise, false . Remarks A network connection is considered to be available if any network interface is marked \"up\" and is not a loopback or tunnel interface. | Improve this Doc View Source ReleaseDhcpLease() Releases the DHCP lease, which releases the IP address bound to a DHCP-enabled network interface. Declaration public void ReleaseDhcpLease() | Improve this Doc View Source RenewDhcpLease() Renews a DHCP lease, which renews the IP address on a DHCP-enabled network interface. Declaration public void RenewDhcpLease() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.NetworkInformation.NetworkInterfaceType.html": {
    "href": "api/System.Net.NetworkInformation.NetworkInterfaceType.html",
    "title": "Enum NetworkInterfaceType | nanoFramework Documentation",
    "keywords": "Enum NetworkInterfaceType Specifies the type of network interface used by the device. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public enum NetworkInterfaceType Remarks This Enum is exclusive of nanoFramework and it does not exist on the UWP API. Fields Name Description Ethernet The network interface uses an Ethernet connection. Ethernet is defined in IEEE standard 802.3. Unknown The network interface type is unknown or not specified. Wireless80211 The network interface uses a wireless LAN connection (IEEE 802.11 standard). WirelessAP The network interface uses a wireless Soft AP connection (IEEE 802.11 standard). Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.NetworkInformation.PhyProtocols.html": {
    "href": "api/System.Net.NetworkInformation.PhyProtocols.html",
    "title": "Enum PhyProtocols | nanoFramework Documentation",
    "keywords": "Enum PhyProtocols Enum of Phy protocols used for connection. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax [Flags] public enum PhyProtocols Fields Name Description PHY802_11b IEEE 802.11b max 11 Mbit/s PHY802_11g IEEE 802.11g max 54 Mbit/s PHY802_11lr Low rate enabled. PHY802_11n IEEE 802.11n max 288.8 Mbit/s for 20mhz channel or 600 for 40Mhz Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.NetworkInformation.RadioType.html": {
    "href": "api/System.Net.NetworkInformation.RadioType.html",
    "title": "Enum RadioType | nanoFramework Documentation",
    "keywords": "Enum RadioType Specifies the type of radio that the wireless network uses. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public enum RadioType : byte Fields Name Description _802_11a 802.11a-compatible radio. _802_11b 802.11b-compatible radio. _802_11g 802.11g-compatible radio. _802_11n 802.11n-compatible radio. NotSpecified Not specified. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.NetworkInformation.Wireless80211Configuration.ConfigurationOptions.html": {
    "href": "api/System.Net.NetworkInformation.Wireless80211Configuration.ConfigurationOptions.html",
    "title": "Enum Wireless80211Configuration.ConfigurationOptions | nanoFramework Documentation",
    "keywords": "Enum Wireless80211Configuration.ConfigurationOptions Configuration flags used for Wireless configuration. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax [Flags] public enum ConfigurationOptions : byte Fields Name Description AutoConnect Will auto connect when AP is available or after being disconnected. This option forces enabling the Wireless station. Disable Disables the Wireless station. Enable Enables the Wireless station. If not set the wireless station is disabled. None No option set. SmartConfig Enables SmartConfig (if available) for this Wireless station. This option forces enabling the Wireless station. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.NetworkInformation.Wireless80211Configuration.html": {
    "href": "api/System.Net.NetworkInformation.Wireless80211Configuration.html",
    "title": "Class Wireless80211Configuration | nanoFramework Documentation",
    "keywords": "Class Wireless80211Configuration Configuration of wireless network based on the 802.11 standard. Inheritance Object Wireless80211Configuration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class Wireless80211Configuration Remarks This class is exclusive of nanoFramework and does not exist on the UWP API. Constructors | Improve this Doc View Source Wireless80211Configuration(UInt32) Initializes a new instance of the Wireless80211Configuration class. Declaration public Wireless80211Configuration(uint id) Parameters Type Name Description UInt32 id The ID of the wireless configuration. Properties | Improve this Doc View Source Authentication Specifies the type of authentication used on the wireless network. Declaration public AuthenticationType Authentication { get; set; } Property Value Type Description AuthenticationType | Improve this Doc View Source Encryption Specifies the type of encryption used on the wireless network. Declaration public EncryptionType Encryption { get; set; } Property Value Type Description EncryptionType | Improve this Doc View Source Id Contains the ID of the wireless configuration. Declaration public uint Id { get; } Property Value Type Description UInt32 | Improve this Doc View Source Options Contains flags for the Wireless connection Declaration public Wireless80211Configuration.ConfigurationOptions Options { get; set; } Property Value Type Description Wireless80211Configuration.ConfigurationOptions | Improve this Doc View Source Password Contains the network passphrase. Declaration public string Password { get; set; } Property Value Type Description String | Improve this Doc View Source Radio Specifies the type of radio used by the wireless network adapter. Declaration public RadioType Radio { get; set; } Property Value Type Description RadioType | Improve this Doc View Source Ssid Contains the network's SSID. Declaration public string Ssid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source GetAllWireless80211Configurations() Retrieves an array of all of the wireless 802.11 network configurations. Declaration public static Wireless80211Configuration[] GetAllWireless80211Configurations() Returns Type Description Wireless80211Configuration [] An array containing all of the wireless 802.11 network configuration stored in the device. | Improve this Doc View Source SaveConfiguration() Saves the wireless 802.11 configuration information. Declaration public void SaveConfiguration() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.NetworkInformation.WirelessAPConfiguration.ConfigurationOptions.html": {
    "href": "api/System.Net.NetworkInformation.WirelessAPConfiguration.ConfigurationOptions.html",
    "title": "Enum WirelessAPConfiguration.ConfigurationOptions | nanoFramework Documentation",
    "keywords": "Enum WirelessAPConfiguration.ConfigurationOptions Configuration flags used for Wireless Soft AP configuration. Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax [Flags] public enum ConfigurationOptions : byte Fields Name Description AutoStart Will automatically start the Soft AP when CLR starts. This option forces enabling the Wireless Soft AP. Disable Disables the Wireless Soft AP. Enable Enables the Wireless Soft AP. If not set the Wireless Soft AP is disabled. HiddenSSID The SSID for the Soft AP will be hidden. None No option set. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.NetworkInformation.WirelessAPConfiguration.html": {
    "href": "api/System.Net.NetworkInformation.WirelessAPConfiguration.html",
    "title": "Class WirelessAPConfiguration | nanoFramework Documentation",
    "keywords": "Class WirelessAPConfiguration Configuration of wireless network SOft AP based on the 802.11 standard. Inheritance Object WirelessAPConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class WirelessAPConfiguration Remarks This class is exclusive of nanoFramework and does not exist on the UWP API. Constructors | Improve this Doc View Source WirelessAPConfiguration(UInt32) Initializes a new instance of the WirelessAPConfiguration class. Declaration public WirelessAPConfiguration(uint id) Parameters Type Name Description UInt32 id The ID of the wireless configuration. Properties | Improve this Doc View Source Authentication Specifies the type of authentication used for the wireless AP. Declaration public AuthenticationType Authentication { get; set; } Property Value Type Description AuthenticationType | Improve this Doc View Source Channel Channel to use for AP. Declaration public byte Channel { get; set; } Property Value Type Description Byte | Improve this Doc View Source Encryption Specifies the type of encryption used for the wireless AP. Declaration public EncryptionType Encryption { get; set; } Property Value Type Description EncryptionType | Improve this Doc View Source Id Contains the ID of the wireless AP configuration. Declaration public uint Id { get; } Property Value Type Description UInt32 | Improve this Doc View Source MaxConnections Maximum number of client connections Declaration public byte MaxConnections { get; set; } Property Value Type Description Byte | Improve this Doc View Source Options Contains flags for the Soft AP Declaration public WirelessAPConfiguration.ConfigurationOptions Options { get; set; } Property Value Type Description WirelessAPConfiguration.ConfigurationOptions | Improve this Doc View Source Password Contains the network passphrase used for clients to connect to Soft AP Declaration public string Password { get; set; } Property Value Type Description String | Improve this Doc View Source Radio Specifies the type of radio used by the wireless network adapter. Declaration public RadioType Radio { get; set; } Property Value Type Description RadioType | Improve this Doc View Source Ssid Contains the Soft AP SSID. Declaration public string Ssid { get; set; } Property Value Type Description String Methods | Improve this Doc View Source DeAuthStation(Int32) DeAuthorise a connected station Declaration public void DeAuthStation(int stationIndex) Parameters Type Name Description Int32 stationIndex The index of station to De-Auth or 0 to De-Auth all stations. | Improve this Doc View Source GetAllWirelessAPConfigurations() Retrieves an array of all of the wireless Soft AP network configurations. Declaration public static WirelessAPConfiguration[] GetAllWirelessAPConfigurations() Returns Type Description WirelessAPConfiguration [] An array containing all of the wireless 802.11 AP network configuration stored in the device. | Improve this Doc View Source GetConnectedStations() Returns an array of information about the connected stations. Declaration public WirelessAPStation[] GetConnectedStations() Returns Type Description WirelessAPStation [] A WirelessAPStation | Improve this Doc View Source GetConnectedStations(Int32) Returns information about the a connected station. Declaration public WirelessAPStation GetConnectedStations(int stationIndex) Parameters Type Name Description Int32 stationIndex The index of station to get information about. Returns Type Description WirelessAPStation An WirelessAPStation . | Improve this Doc View Source SaveConfiguration() Validate and save the wireless Soft AP configuration information. Declaration public void SaveConfiguration() Remarks Checks the length of SSID is 32 or less. Password length is between 8 and 64 if not an open Authentication. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.NetworkInformation.WirelessAPStation.html": {
    "href": "api/System.Net.NetworkInformation.WirelessAPStation.html",
    "title": "Class WirelessAPStation | nanoFramework Documentation",
    "keywords": "Class WirelessAPStation Class that encapsulates the details of a connected client. Inheritance Object WirelessAPStation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.NetworkInformation Assembly : System.Net.dll Syntax public class WirelessAPStation Properties | Improve this Doc View Source MacAddres Returns the MAc address of the connected Client. Declaration public byte[] MacAddres { get; } Property Value Type Description Byte [] | Improve this Doc View Source PhyModes Returns the PHY protocol used for connection. Declaration public PhyProtocols PhyModes { get; } Property Value Type Description PhyProtocols | Improve this Doc View Source Rssi Returns the Received signal strength indication(RSSI) of connected Client. RSSI is a value from 0 to 127 where the higher the number the stronger the signal. Declaration public sbyte Rssi { get; } Property Value Type Description SByte Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.ProtocolViolationException.html": {
    "href": "api/System.Net.ProtocolViolationException.html",
    "title": "Class ProtocolViolationException | nanoFramework Documentation",
    "keywords": "Class ProtocolViolationException The exception that is thrown when an error is made while using a network protocol. Inheritance Object Exception SystemException InvalidOperationException ProtocolViolationException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class ProtocolViolationException : InvalidOperationException Constructors | Improve this Doc View Source ProtocolViolationException() Initializes a new instance of the ProtocolViolationException class. Declaration public ProtocolViolationException() | Improve this Doc View Source ProtocolViolationException(String) Initializes a new instance of the ProtocolViolationException class with the specified message. Declaration public ProtocolViolationException(string message) Parameters Type Name Description String message The error message string. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.Security.CertificateManager.html": {
    "href": "api/System.Net.Security.CertificateManager.html",
    "title": "Class CertificateManager | nanoFramework Documentation",
    "keywords": "Class CertificateManager Provides an interface to the device certificate store to manage X509Certificate . Inheritance Object CertificateManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.Security Assembly : System.Net.dll Syntax public static class CertificateManager Methods AddCaCertificateBundle(Byte[]) Adds a Certificate Authority Root bundle X509Certificate to the store. If there is already a CA Root bundle it will be replaced with this one. Declaration public static extern bool AddCaCertificateBundle(byte[] ca) Parameters Type Name Description Byte [] ca The Certificate Authority certificate bundle to be added store. Returns Type Description Boolean True if the certificate bundle was correctly added to the device certificate store. Remarks This method is exclusive of nanoFramework. There is no equivalent in .NET framework. | Improve this Doc View Source AddCaCertificateBundle(X509Certificate[]) Adds a Certificate Authority Root bundle X509Certificate to the store. If there is already a CA Root bundle it will be replaced with this one. Declaration public static bool AddCaCertificateBundle(X509Certificate[] ca) Parameters Type Name Description X509Certificate [] ca The Certificate Authority certificate bundle to be added store. Returns Type Description Boolean True if the certificate bundle was correctly added to the device certificate store. Remarks This method is exclusive of nanoFramework. There is no equivalent in .NET framework. | Improve this Doc View Source AddCaCertificateBundle(String) Adds a Certificate Authority Root bundle X509Certificate to the store. If there is already a CA Root bundle it will be replaced with this one. Declaration public static bool AddCaCertificateBundle(string ca) Parameters Type Name Description String ca The Certificate Authority certificate bundle to be added store. Returns Type Description Boolean True if the certificate bundle was correctly added to the device certificate store. Remarks This method is exclusive of nanoFramework. There is no equivalent in .NET framework."
  },
  "api/System.Net.Security.html": {
    "href": "api/System.Net.Security.html",
    "title": "Namespace System.Net.Security | nanoFramework Documentation",
    "keywords": "Namespace System.Net.Security Classes CertificateManager Provides an interface to the device certificate store to manage X509Certificate . SslStream Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client. Enums SslProtocols Defines the possible versions of Secure Sockets Layer (SSL). SslVerification The verification scheme to use for authentication."
  },
  "api/System.Net.Security.SslProtocols.html": {
    "href": "api/System.Net.Security.SslProtocols.html",
    "title": "Enum SslProtocols | nanoFramework Documentation",
    "keywords": "Enum SslProtocols Defines the possible versions of Secure Sockets Layer (SSL). Namespace : System.Net.Security Assembly : System.Net.dll Syntax [Flags] public enum SslProtocols Remarks Note: Following the recommendation of the .NET documentation, nanoFramework implementation does not have SSL3 nor Default because those are deprecated and unsecure. Fields Name Description None Allows the operating system to choose the best protocol to use, and to block protocols that are not secure. Unless your app has a specific reason not to, you should use this field. Tls Specifies the TLS 1.0 security protocol. The TLS protocol is defined in IETF RFC 2246. Tls11 Specifies the TLS 1.1 security protocol. The TLS protocol is defined in IETF RFC 4346. Tls12 Specifies the TLS 1.2 security protocol. The TLS protocol is defined in IETF RFC 5246. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.Security.SslStream.html": {
    "href": "api/System.Net.Security.SslStream.html",
    "title": "Class SslStream | nanoFramework Documentation",
    "keywords": "Class SslStream Provides a stream used for client-server communication that uses the Secure Socket Layer (SSL) security protocol to authenticate the server and optionally the client. Inheritance Object MarshalByRefObject Stream NetworkStream SslStream Implements IDisposable Inherited Members NetworkStream._socketType NetworkStream._remoteEndPoint NetworkStream._disposed NetworkStream.CanRead NetworkStream.CanSeek NetworkStream.CanTimeout NetworkStream.CanWrite NetworkStream.ReadTimeout NetworkStream.WriteTimeout NetworkStream.Position NetworkStream.Close(Int32) NetworkStream.Flush() NetworkStream.Seek(Int64, SeekOrigin) NetworkStream.SetLength(Int64) Stream.Close() Stream.Dispose() Stream.Finalize() Stream.ReadByte() Stream.WriteByte(Byte) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.Security Assembly : System.Net.dll Syntax public class SslStream : NetworkStream, IDisposable Constructors | Improve this Doc View Source SslStream(Socket) Initializes a new instance of the SslStream class using the specified Socket. Declaration public SslStream(Socket socket) Parameters Type Name Description Socket socket A valid socket that currently has a TCP connection. Remarks The SslStream maintains the lifetime of the socket. When the SslStream object is disposed, the underlying TCP socket will be closed. Properties | Improve this Doc View Source DataAvailable Gets a value the indicates whether data is available in the stream. (Overrides NetworkStream. . :: . .DataAvailable.) Declaration public override bool DataAvailable { get; } Property Value Type Description Boolean Overrides NetworkStream.DataAvailable | Improve this Doc View Source IsServer Gets a value that indicates whether the local side of the connection used by this SslStream was authenticated as the server. Declaration public bool IsServer { get; } Property Value Type Description Boolean | Improve this Doc View Source Length Gets the length of the stream. (Overrides NetworkStream. . :: . .Length.) Declaration public override long Length { get; } Property Value Type Description Int64 Overrides NetworkStream.Length | Improve this Doc View Source SslVerification Option for SSL verification. The default behaviour is CertificateRequired . Declaration public SslVerification SslVerification { get; set; } Property Value Type Description SslVerification | Improve this Doc View Source UseStoredDeviceCertificate Option to use the certificate stored in the device as client or server certificate. The default option is false . Declaration public bool UseStoredDeviceCertificate { get; set; } Property Value Type Description Boolean Remarks This property is exclusive of .NET nanoFramework. In case there is no device certificate stored, the authentication will use whatever is provided (or not) in the parameter of the method being called. Methods | Improve this Doc View Source AuthenticateAsClient(String, SslProtocols) Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified SSL protocols. Declaration public void AuthenticateAsClient(string targetHost, SslProtocols enabledSslProtocols) Parameters Type Name Description String targetHost The name of the server that will share this SslStream. SslProtocols enabledSslProtocols The SslProtocols value that represents the protocol used for authentication. | Improve this Doc View Source AuthenticateAsClient(String, X509Certificate, SslProtocols) Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collections and SSL protocols. Declaration public void AuthenticateAsClient(string targetHost, X509Certificate clientCertificate, SslProtocols enabledSslProtocols) Parameters Type Name Description String targetHost The name of the server that will share this SslStream. X509Certificate clientCertificate The client certificate. SslProtocols enabledSslProtocols The SslProtocols value that represents the protocol used for authentication. Remarks Instead of providing the client certificate in the clientCertificate parameter the UseStoredDeviceCertificate property can be used to use the certificate stored in the device. | Improve this Doc View Source AuthenticateAsClient(String, X509Certificate, X509Certificate, SslProtocols) Called by clients to authenticate the server and optionally the client in a client-server connection. The authentication process uses the specified certificate collections and SSL protocols. Declaration public void AuthenticateAsClient(string targetHost, X509Certificate clientCertificate, X509Certificate ca, SslProtocols enabledSslProtocols) Parameters Type Name Description String targetHost The name of the server that will share this SslStream. X509Certificate clientCertificate The client certificate. X509Certificate ca Certificate Authority certificate to use for authentication with the server. SslProtocols enabledSslProtocols The SslProtocols value that represents the protocol used for authentication. Remarks Instead of providing the client certificate in the clientCertificate parameter the UseStoredDeviceCertificate property can be used to use the certificate stored in the device. | Improve this Doc View Source AuthenticateAsServer(X509Certificate, Boolean, SslProtocols) Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificates, requirements and security protocol. Declaration public void AuthenticateAsServer(X509Certificate serverCertificate, bool clientCertificateRequired, SslProtocols enabledSslProtocols) Parameters Type Name Description X509Certificate serverCertificate The X509Certificate used to authenticate the server. Boolean clientCertificateRequired A Boolean value that specifies whether the client is asked for a certificate for authentication. Note that this is only a request, if no certificate is provided, the server still accepts the connection request. SslProtocols enabledSslProtocols The protocols that may be used for authentication. Remarks Instead of providing the server certificate in the serverCertificate parameter the UseStoredDeviceCertificate property can be used to use the certificate stored in the device. | Improve this Doc View Source AuthenticateAsServer(X509Certificate, SslProtocols) Called by servers to authenticate the server and optionally the client in a client-server connection using the specified certificate, verification requirements and security protocol. Declaration public void AuthenticateAsServer(X509Certificate serverCertificate, SslProtocols enabledSslProtocols) Parameters Type Name Description X509Certificate serverCertificate The certificate used to authenticate the server. SslProtocols enabledSslProtocols The protocols that may be used for authentication. Remarks Instead of providing the server certificate in the serverCertificate parameter the UseStoredDeviceCertificate property can be used to use the certificate stored in the device. | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the SslStream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides NetworkStream.Dispose(Boolean) | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads data from this stream and stores it in the specified array. Declaration public override int Read(byte[] buffer, int offset, int size) Parameters Type Name Description Byte [] buffer An array that receives the bytes read from this stream. Int32 offset An integer that contains the zero-based location in buffer at which to begin storing the data read from this stream. Int32 size The maximum number of bytes to read from this stream. Returns Type Description Int32 Overrides NetworkStream.Read(Byte[], Int32, Int32) | Improve this Doc View Source Write(Byte[], Int32, Int32) Write the specified number of bytes to the underlying stream using the specified buffer and offset. Declaration public override void Write(byte[] buffer, int offset, int size) Parameters Type Name Description Byte [] buffer An array that supplies the bytes written to the stream. Int32 offset he zero-based location in buffer at which to begin reading bytes to be written to the stream. Int32 size The number of bytes to read from buffer. Overrides NetworkStream.Write(Byte[], Int32, Int32) Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.Security.SslVerification.html": {
    "href": "api/System.Net.Security.SslVerification.html",
    "title": "Enum SslVerification | nanoFramework Documentation",
    "keywords": "Enum SslVerification The verification scheme to use for authentication. Namespace : System.Net.Security Assembly : System.Net.dll Syntax public enum SslVerification Fields Name Description CertificateRequired A certificate is required for authentication. If authenticating as a client, the server certificate is required. If authenticating as a server, the client certificate is required. NoVerification No verification of certificates is required for authentication. VerifyClientOnce Verify the client certificate only once. Applies only to authenticating as a server. VerifyPeer If authenticating as a client, verifies the peer certificate and fails if no certificate is sent. If authenticating as a server, it verifies the peer certificate only if a certificate is sent. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.SocketAddress.html": {
    "href": "api/System.Net.SocketAddress.html",
    "title": "Class SocketAddress | nanoFramework Documentation",
    "keywords": "Class SocketAddress Stores serialized information from EndPoint derived classes. Inheritance Object SocketAddress Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.dll Syntax public class SocketAddress Constructors | Improve this Doc View Source SocketAddress(AddressFamily, Int32) Creates a new instance of the SocketAddress class using the specified address family and buffer size. Declaration public SocketAddress(AddressFamily family, int size) Parameters Type Name Description AddressFamily family An AddressFamily enumerated value. Int32 size The number of bytes to allocate for the underlying buffer. Remarks Use this overload to create a new instance of the SocketAddress class with a particular underlying buffer size. Properties | Improve this Doc View Source Family Gets the address family for the current address. Declaration public AddressFamily Family { get; } Property Value Type Description AddressFamily A value specifying the addressing scheme that is used to resolve the current address. | Improve this Doc View Source Item[Int32] Gets or sets the specified index element in the underlying buffer. Declaration public byte this[int offset] { get; set; } Parameters Type Name Description Int32 offset The array index element of the desired information. Property Value Type Description Byte The value of the specified index element in the underlying buffer. Remarks This property gets or sets the specified byte position in the underlying buffer. | Improve this Doc View Source Size Gets the underlying buffer size of the SocketAddress . Declaration public int Size { get; } Property Value Type Description Int32 The underlying buffer size of the SocketAddress . Remarks This property gets the underlying buffer size of the SocketAddress in bytes. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.Sockets.AddressFamily.html": {
    "href": "api/System.Net.Sockets.AddressFamily.html",
    "title": "Enum AddressFamily | nanoFramework Documentation",
    "keywords": "Enum AddressFamily Specifies the address families that an instance of the Socket Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum AddressFamily Remarks An AddressFamily member specifies the addressing scheme that a Socket will use to resolve an address. For example, InterNetwork indicates that an IP version 4 address is expected when a Socket connects to an endpoint. Fields Name Description AppleTalk AppleTalk address. Atm Native ATM services address. Banyan Banyan address. Ccitt Addresses for CCITT protocols, such as X.25. Chaos Address for MIT CHAOS protocols. Cluster Address for Microsoft cluster products. DataKit Address for Datakit protocols. DataLink Direct data-link interface address. DecNet DECnet address. Ecma European Computer Manufacturers Association (ECMA) address. FireFox FireFox address. HyperChannel NSC Hyperchannel address. Ieee12844 IEEE 1284.4 workgroup address. ImpLink ARPANET IMP address. InterNetwork Address for IP version 4. InterNetworkV6 Internetwork Version 6. Ipx IPX or SPX address. Irda IrDA address. Iso Address for ISO protocols. Lat LAT address. Max MAX address. NetBios NetBios address. NetworkDesigners Address for Network Designers OSI gateway-enabled protocols. NS Address for Xerox NS protocols. Osi Address for OSI protocols. Pup Address for PUP protocols. Sna IBM SNA address. Unix Unix local to host address. Unknown Unknown address family. Unspecified Unspecified address family. VoiceView VoiceView address. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.Sockets.html": {
    "href": "api/System.Net.Sockets.html",
    "title": "Namespace System.Net.Sockets | nanoFramework Documentation",
    "keywords": "Namespace System.Net.Sockets Classes NetworkStream Provides the underlying stream of data for network access. Socket Implements the Berkeley sockets interface. SocketException The exception that is thrown when a socket error occurs. Enums AddressFamily Specifies the address families that an instance of the Socket ProtocolFamily Specifies the type of protocol that an instance of the Socket ProtocolType Specifies the protocols that the Socket class supports. SelectMode Specifies the mode for polling the status of a socket. SocketError Defines socket error constants. SocketFlags This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. SocketOptionLevel Defines socket option levels for the Socket class. SocketOptionName Defines socket option names for the Socket class. SocketType Specifies the type of socket an instance of the Socket class represents."
  },
  "api/System.Net.Sockets.NetworkStream.html": {
    "href": "api/System.Net.Sockets.NetworkStream.html",
    "title": "Class NetworkStream | nanoFramework Documentation",
    "keywords": "Class NetworkStream Provides the underlying stream of data for network access. Inheritance Object MarshalByRefObject Stream NetworkStream SslStream Implements IDisposable Inherited Members Stream.Close() Stream.Dispose() Stream.Finalize() Stream.ReadByte() Stream.WriteByte(Byte) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public class NetworkStream : Stream, IDisposable Constructors | Improve this Doc View Source NetworkStream(Socket) Creates a new instance of the System.Net.Sockets.NetworkStream class for the specified System.Net.Sockets.Socket. Declaration public NetworkStream(Socket socket) Parameters Type Name Description Socket socket The System.Net.Sockets.Socket that the System.Net.Sockets.NetworkStream will use to send and receive data. | Improve this Doc View Source NetworkStream(Socket, Boolean) Initializes a new instance of the System.Net.Sockets.NetworkStream class for the specified System.Net.Sockets.Socket with the specified System.Net.Sockets.Socket ownership. Declaration public NetworkStream(Socket socket, bool ownsSocket) Parameters Type Name Description Socket socket true to indicate that the System.Net.Sockets.NetworkStream will take ownership of the System.Net.Sockets.Socket; otherwise, false. Boolean ownsSocket The System.Net.Sockets.Socket that the System.Net.Sockets.NetworkStream will use to send and receive data. Fields | Improve this Doc View Source _disposed Internal disposed flag Declaration protected bool _disposed Field Value Type Description Boolean | Improve this Doc View Source _remoteEndPoint Internal endpoint ref used for dgram sockets Declaration protected EndPoint _remoteEndPoint Field Value Type Description EndPoint | Improve this Doc View Source _socketType Internal property used to store the socket type Declaration protected int _socketType Field Value Type Description Int32 Properties | Improve this Doc View Source CanRead Gets a value that indicates whether the System.Net.Sockets.NetworkStream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description Boolean true if data can be read from the stream; otherwise, false. The default value is true. Overrides Stream.CanRead Remarks If CanRead is true, NetworkStream allows calls to the Read(Byte[], Int32, Int32) method. Provide the appropriate FileAccess enumerated value in the constructor to set the readability and writability of the NetworkStream . The CanRead property is set when the NetworkStream is initialized. | Improve this Doc View Source CanSeek Gets a value that indicates whether the stream supports seeking. This property is not currently supported.This property always returns false. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean false in all cases to indicate that System.Net.Sockets.NetworkStream cannot seek a specific location in the stream. Overrides Stream.CanSeek | Improve this Doc View Source CanTimeout Indicates whether timeout properties are usable for System.Net.Sockets.NetworkStream. Declaration public override bool CanTimeout { get; } Property Value Type Description Boolean true in all cases. Overrides Stream.CanTimeout | Improve this Doc View Source CanWrite Gets a value that indicates whether the System.Net.Sockets.NetworkStream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean true if data can be written to the System.Net.Sockets.NetworkStream; otherwise, false. The default value is true. Overrides Stream.CanWrite | Improve this Doc View Source DataAvailable Gets a value that indicates whether data is available on the NetworkStream to be read. Declaration public virtual bool DataAvailable { get; } Property Value Type Description Boolean true if data is available on the stream to be read; otherwise, false. | Improve this Doc View Source Length Gets the length of the data available on the stream. This property is not currently supported and always throws a NotSupportedException. Declaration public override long Length { get; } Property Value Type Description Int64 The length of the data available on the stream. Overrides Stream.Length | Improve this Doc View Source Position Gets or sets the current position in the stream. This property is not currently supported and always throws a NotSupportedException. Declaration public override long Position { get; set; } Property Value Type Description Int64 The current position in the stream. Overrides Stream.Position | Improve this Doc View Source ReadTimeout Gets or sets the amount of time that a read operation blocks waiting for data. Declaration public override int ReadTimeout { get; set; } Property Value Type Description Int32 A Int32 that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, Infinite, specifies that the read operation does not time out. Overrides Stream.ReadTimeout | Improve this Doc View Source WriteTimeout Gets or sets the amount of time that a write operation blocks waiting for data. Declaration public override int WriteTimeout { get; set; } Property Value Type Description Int32 A Int32 that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, Infinite, specifies that the write operation does not time out. Overrides Stream.WriteTimeout Methods | Improve this Doc View Source Close(Int32) Closes the NetworkStream after waiting the specified time to allow data to be sent. Declaration public void Close(int timeout) Parameters Type Name Description Int32 timeout A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing. Remarks The Close(Int32) method frees both unmanaged and managed resources associated with the NetworkStream . If the NetworkStream owns the underlying Socket, it is closed as well. | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the NetworkStream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Stream.Dispose(Boolean) Remarks This method is called by the public Dispose method and the Finalize method. Dispose invokes the protected Dispose(Boolean) method with the disposing parameter set to true. Finalize invokes Dispose with disposing set to false. When the disposing parameter is true, this method releases all resources held by any managed objects that this NetworkStream references. This method invokes the Dispose method of each referenced object. | Improve this Doc View Source Flush() Flushes data from the stream. This method is reserved for future use. Declaration public override void Flush() Overrides Stream.Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads data from the NetworkStream. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of type Byte that is the location in memory to store data read from the NetworkStream. Int32 offset The location in buffer to begin storing the data to. Int32 count The number of bytes to read from the NetworkStream. Returns Type Description Int32 The number of bytes read from the NetworkStream. Overrides Stream.Read(Byte[], Int32, Int32) Remarks This method reads data into the buffer parameter and returns the number of bytes successfully read. If no data is available for reading, the Read method returns 0. The Read operation reads as much data as is available, up to the number of bytes specified by the count parameter. If the remote host shuts down the connection, and all available data has been received, the Read method completes immediately and return zero bytes. important Check to see if the NetworkStream is readable by calling the CanRead property. If you attempt to read from a NetworkStream that is not readable, you will get an IOException. | Improve this Doc View Source Seek(Int64, SeekOrigin) Sets the current position of the stream to the given value. This method is not currently supported and always throws a System.NotSupportedException. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset This parameter is not used. SeekOrigin origin This parameter is not used. Returns Type Description Int64 The position in the stream. Overrides Stream.Seek(Int64, SeekOrigin) | Improve this Doc View Source SetLength(Int64) Sets the length of the stream. This method always throws a System.NotSupportedException. Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value This parameter is not used. Overrides Stream.SetLength(Int64) | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes data to the NetworkStream . Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to write to the NetworkStream. Int32 offset The location in buffer from which to start writing data. Int32 count The number of bytes to write to the NetworkStream. Overrides Stream.Write(Byte[], Int32, Int32) Remarks The Write method starts at the specified offset and sends count bytes from the contents of buffer to the network. The Write method blocks until the requested number of bytes is sent or a SocketException is thrown. If you receive a SocketException , use the ErrorCode property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.Sockets.ProtocolFamily.html": {
    "href": "api/System.Net.Sockets.ProtocolFamily.html",
    "title": "Enum ProtocolFamily | nanoFramework Documentation",
    "keywords": "Enum ProtocolFamily Specifies the type of protocol that an instance of the Socket Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum ProtocolFamily Fields Name Description AppleTalk AppleTalk protocol. Atm Native ATM services protocol. Banyan Banyan protocol. Ccitt CCITT protocol, such as X.25. Chaos MIT CHAOS protocol. Cluster Microsoft Cluster products protocol. DataKit DataKit protocol. DataLink Direct data link protocol. DecNet DECNet protocol. Ecma European Computer Manufacturers Association (ECMA) protocol. FireFox FireFox protocol. HyperChannel NSC HyperChannel protocol. Ieee12844 IEEE 1284.4 workgroup protocol. ImpLink ARPANET IMP protocol. InterNetwork IP version 4 protocol. InterNetworkV6 IP version 6 protocol. Ipx IPX or SPX protocol. Irda IrDA protocol. Iso ISO protocol. Lat LAT protocol. Max MAX protocol. NetBios NetBIOS protocol. NetworkDesigners Network Designers OSI gateway enabled protocol. NS Xerox NS protocol. Osi OSI protocol. Pup PUP protocol. Sna IBM SNA protocol. Unix Unix local to host protocol. Unknown Unknown protocol. Unspecified Unspecified protocol. VoiceView VoiceView protocol. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.Sockets.ProtocolType.html": {
    "href": "api/System.Net.Sockets.ProtocolType.html",
    "title": "Enum ProtocolType | nanoFramework Documentation",
    "keywords": "Enum ProtocolType Specifies the protocols that the Socket class supports. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum ProtocolType Fields Name Description Ggp Gateway To Gateway Protocol. Icmp Internet Control Message Protocol. IcmpV6 Internet Control Message Protocol for IPv6. Idp Internet Datagram Protocol. Igmp Internet Group Management Protocol. IP Internet Protocol. IPSecAuthenticationHeader IPv6 Authentication header. For details, see RFC 2292 section 2.2.1, available at http://www.ietf.org . IPSecEncapsulatingSecurityPayload IPv6 Encapsulating Security Payload header. IPv4 Internet Protocol version 4. IPv6 Internet Protocol version 6 (IPv6). IPv6DestinationOptions IPv6 Destination Options header. IPv6FragmentHeader IPv6 Fragment header. IPv6HopByHopOptions Pv6 Hop by Hop Options header. IPv6NoNextHeader IPv6 No next header. IPv6RoutingHeader IPv6 Routing header. Ipx Internet Packet Exchange Protocol. ND Net Disk Protocol (unofficial). Pup PARC Universal Packet Protocol. Raw Raw IP packet protocol. Spx Sequenced Packet Exchange protocol. SpxII Sequenced Packet Exchange version 2 protocol. Tcp Transmission Control Protocol. Udp User Datagram Protocol. Unknown Unknown protocol. Unspecified Unspecified protocol. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.Sockets.SelectMode.html": {
    "href": "api/System.Net.Sockets.SelectMode.html",
    "title": "Enum SelectMode | nanoFramework Documentation",
    "keywords": "Enum SelectMode Specifies the mode for polling the status of a socket. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum SelectMode Fields Name Description SelectError Poll the error status of a socket. SelectRead Poll the read status of a socket. SelectWrite Poll the write status of a socket. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.Sockets.Socket.html": {
    "href": "api/System.Net.Sockets.Socket.html",
    "title": "Class Socket | nanoFramework Documentation",
    "keywords": "Class Socket Implements the Berkeley sockets interface. Inheritance Object Socket Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public class Socket : IDisposable Constructors | Improve this Doc View Source Socket(AddressFamily, SocketType, ProtocolType) Initializes a new instance of the Socket class using the specified address family, socket type and protocol. Declaration public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType) Parameters Type Name Description AddressFamily addressFamily One of the AddressFamily values. SocketType socketType One of the SocketType values. ProtocolType protocolType One of the ProtocolType values. Remarks The addressFamily parameter specifies the addressing scheme that the Socket class uses, the socketType parameter specifies the type of the Socket class, and the protocolType parameter specifies the protocol used by Socket . The three parameters are not independent. Some address families restrict which protocols can be used with them, and often the Socket type is implicit in the protocol. If the combination of address family, Socket type, and protocol type esults in an invalid Socket, this constructor throws a SocketException. Properties | Improve this Doc View Source Available Gets the amount of data that has been received from the network and is available to be read. Declaration public int Available { get; } Property Value Type Description Int32 An integer error code that is associated with this exception. Remarks If you are using a non-blocking Socket , Available is a good way to determine whether data is queued for reading, before calling Receive(Byte[]) . The available data is the total amount of data queued in the network buffer for reading. If no data is queued in the network buffer, Available returns 0. If the remote host shuts down or closes the connection, Available can throw a SocketException . If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. | Improve this Doc View Source LocalEndPoint Gets the local endpoint. Declaration public EndPoint LocalEndPoint { get; } Property Value Type Description EndPoint The EndPoint that the Socket is using for communications. Remarks The LocalEndPoint property gets an EndPoint that contains the local IP address and port number to which your Socket is bound. You must cast this EndPoint to an IPEndPoint before retrieving any information. You can then call the Address method to retrieve the local IPAddress , and the Port method to retrieve the local port number. The LocalEndPoint property is usually set after you make a call to the Bind(EndPoint) method. If you allow the system to assign your socket's local IP address and port number, the LocalEndPoint property will be set after the first I/O operation. For connection-oriented protocols, the first I/O operation would be a call to the Connect or Accept() method. For connectionless protocols, the first I/O operation would be any of the send or receive calls. | Improve this Doc View Source ReceiveTimeout Gets or sets a value that specifies the amount of time after which a synchronous Receive(Byte[]) call will time out. Declaration public int ReceiveTimeout { get; set; } Property Value Type Description Int32 The time-out value, in milliseconds. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period. Remarks This option applies to synchronous Receive(Byte[]) calls only. If the time-out period is exceeded, the Receive(Byte[]) method will throw a SocketException . | Improve this Doc View Source RemoteEndPoint Gets the remote endpoint. Declaration public EndPoint RemoteEndPoint { get; } Property Value Type Description EndPoint The EndPoint with which the Socket is communicating. Remarks If you are using a connection-oriented protocol, the RemoteEndPoint property gets the EndPoint that contains the remote IP address and port number to which the Socket is connected. If you are using a connectionless protocol, RemoteEndPoint contains the default remote IP address and port number with which the Socket will communicate. You must cast this EndPoint to an IPEndPoint before retrieving any information. You can then call the Address method to retrieve the remote IPAddress , and the Port method to retrieve the remote port number. The RemoteEndPoint is set after a call to either Accept() or Connect(EndPoint) . If you try to access this property earlier, RemoteEndPoint will throw a SocketException . If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. | Improve this Doc View Source SendTimeout Gets or sets a value that specifies the amount of time after which a synchronous Send(Byte[]) call will time out. Declaration public int SendTimeout { get; set; } Property Value Type Description Int32 The time-out value, in milliseconds. If you set the property with a value between 1 and 499, the value will be changed to 500. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period. Remarks This option applies to synchronous Send(Byte[]) calls only. If the time-out period is exceeded, the Send(Byte[]) method will throw a SocketException . | Improve this Doc View Source SocketType Gets the type of the Socket . Declaration public SocketType SocketType { get; } Property Value Type Description SocketType One of the SocketType values. Remarks SocketType is read-only and is set when the Socket is created. Methods | Improve this Doc View Source Accept() Creates a new Socket for a newly created connection. Declaration public Socket Accept() Returns Type Description Socket A Socket for a newly created connection. Remarks Accept synchronously extracts the first pending connection request from the connection request queue of the listening socket, and then creates and returns a new Socket . You cannot use this returned Socket to accept any additional connections from the connection queue. However, you can call the RemoteEndPoint method of the returned Socket to identify the remote host's network address and port number. Before calling the Accept method, you must first call the Listen method to listen for and queue incoming connection requests. | Improve this Doc View Source Bind(EndPoint) Associates a Socket with a local endpoint. Declaration public void Bind(EndPoint localEP) Parameters Type Name Description EndPoint localEP The local EndPoint to associate with the Socket . Remarks Use the Bind method if you need to use a specific local endpoint. You must call Bind before you can call the Listen(Int32) method. You do not need to call Bind before using the Connect(EndPoint) method unless you need to use a specific local endpoint. You can use the Bind method on both connectionless and connection-oriented protocols. Before calling Bind, you must first create the local IPEndPoint from which you intend to communicate data. If you do not care which local address is assigned, you can create an IPEndPoint using Any as the address parameter, and the underlying service provider will assign the most appropriate network address. This might help simplify your application if you have multiple network interfaces. If you do not care which local port is used, you can create an IPEndPoint using 0 for the port number. In this case, the service provider will assign an available port number between 1024 and 5000. If you use the above approach, you can discover what local network address and port number has been assigned by calling the LocalEndPoint . If you are using a connection-oriented protocol, LocalEndPoint will not return the locally assigned network address until after you have made a call to the Connect(EndPoint) method. If you are using a connectionless protocol, you will not have access to this information until you have completed a send or receive. If you intend to receive multicast datagrams, you must call the Bind method with a multicast port number. You must call the Bind method if you intend to receive connectionless datagrams using the ReceiveFrom method. | Improve this Doc View Source Close() Closes the Socket connection and releases all associated resources. Declaration public void Close() Remarks The Close method closes the remote host connection and releases all managed and unmanaged resources associated with the Socket. Upon closing, the Connected property is set to false. | Improve this Doc View Source Connect(EndPoint) Establishes a connection to a remote host. Declaration public void Connect(EndPoint remoteEP) Parameters Type Name Description EndPoint remoteEP An EndPoint that represents the remote device. Remarks If you are using a connection-oriented protocol such as TCP, the Connect method synchronously establishes a network connection between LocalEndPoint and the specified remote endpoint. If you are using a connectionless protocol, Connect establishes a default remote host. After you call Connect, you can send data to the remote device with the Send(Byte[]) method, or receive data from the remote device with the Receive(Byte[]) method. If you are using a connectionless protocol such as UDP, you do not have to call Connect before sending and receiving data. You can use SendTo(Byte[], EndPoint) and ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) to synchronously communicate with a remote host. If you do call Connect, any datagrams that arrive from an address other than the specified default will be discarded. If you want to set your default remote host to a broadcast address, you must first call the SetSocketOption(SocketOptionLevel, SocketOptionName, Boolean) method and set the socket option to Broadcast , or Connect will throw a SocketException. If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. If you are using a connection-oriented protocol and did not call Bind before calling Connect, the underlying service provider will assign the local network address and port number. If you are using a connectionless protocol, the service provider will not assign a local network address and port number until you complete a send or receive operation. If you want to change the default remote host, call Connect again with the desired endpoint. | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the Socket , and optionally disposes of the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to releases only unmanaged resources. Remarks This method is called by the public Dispose() method and the Finalize() method. Dispose() invokes the protected Dispose(Boolean) method with the disposing parameter set to true. Finalize() invokes Dispose with disposing set to false. When the disposing parameter is true, this method releases all resources held by any managed objects that this Socket references. This method invokes the Dispose() method of each referenced object. | Improve this Doc View Source Finalize() Deconstructor Declaration protected void Finalize() | Improve this Doc View Source GetSocketOption(SocketOptionLevel, SocketOptionName) Returns the value of a Socket option. Declaration public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName) Parameters Type Name Description SocketOptionLevel optionLevel One of the SocketOptionLevel values. SocketOptionName optionName One of the SocketOptionName values. Returns Type Description Object An object that represents the value of the option. When the optionName parameter is set to Linger the return value is an instance of the LingerOption class. When optionName is set to AddMembership or DropMembership , the return value is an instance of the MulticastOption class. When optionName is any other value, the return value is an integer. Remarks Socket options determine the behavior of the current Socket . Use this overload to get the Linger , AddMembership , and DropMembership options. For the Linger option, use Socket for the optionLevel parameter. For AddMembership and DropMembership , use IP . If you want to set the value of any of the options listed above, use the SetSocketOption(SocketOptionLevel, SocketOptionName, Int32) method. | Improve this Doc View Source GetSocketOption(SocketOptionLevel, SocketOptionName, Byte[]) Returns the specified Socket option setting, represented as a byte array. Declaration public void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] val) Parameters Type Name Description SocketOptionLevel optionLevel One of the SocketOptionLevel values. SocketOptionName optionName One of the SocketOptionName values. Byte [] val An array of type Byte that is to receive the option setting. Remarks Socket options determine the behavior of the current Socket . Upon successful completion of this method, the array specified by the val parameter contains the value of the specified Socket option. When the length of the val array is smaller than the number of bytes required to store the value of the specified Socket option, GetSocketOption(SocketOptionLevel, SocketOptionName) will throw a SocketException. If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. Use this overload for any sockets that are represented by Boolean values or integers. | Improve this Doc View Source Listen(Int32) Places a Socket in a listening state. Declaration public void Listen(int backlog) Parameters Type Name Description Int32 backlog The maximum length of the pending connections queue. Remarks Listen causes a connection-oriented Socket to listen for incoming connection attempts. The backlog parameter specifies the number of incoming connections that can be queued for acceptance. To determine the maximum number of connections you can specify, retrieve the MaxConnections value. Listen does not block. If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. Use Accept() or BeginAccept to accept a connection from the queue. You must call the Bind(EndPoint) method before calling Listen, or Listen will throw a SocketException . | Improve this Doc View Source Poll(Int32, SelectMode) Determines the status of the Socket . Declaration public bool Poll(int microSeconds, SelectMode mode) Parameters Type Name Description Int32 microSeconds The time to wait for a response, in microseconds. SelectMode mode One of the SelectMode values. Returns Type Description Boolean The status of the Socket based on the polling mode value passed in the mode parameter. SelectRead SelectWrite SelectError true if Listen has been called and a connection is pending; -or- true if data is available for reading; -or- true if the connection has been closed, reset, or terminated; otherwise, returns false. true , if processing a Connect, and the connection has succeeded; -or- true if data can be sent; otherwise, returns false. true if processing a Connect(EndPoint) that does not block, and the connection has failed; -or- true if OutOfBandInline is not set and out-of-band data is available; otherwise, returns false. Remarks The Poll method will check the state of the Socket . Specify SelectRead for the selectMode parameter to determine if the Socket is readable. Specify SelectWrite to determine if the Socket is writable. Use SelectError to detect an error condition. Poll will block execution until the specified time period, measured in microseconds, elapses. Set the microSeconds parameter to a negative integer if you would like to wait indefinitely for a response. If you want to check the status of multiple sockets, you might prefer to use the Select method. If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. | Improve this Doc View Source Receive(Byte[]) Receives data from a bound Socket into a receive buffer. Declaration public int Receive(byte[] buffer) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for the received data. Returns Type Description Int32 The number of bytes received. Remarks The Receive(Byte[]) method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive(Byte[]) from both connection-oriented and connectionless sockets. This overload only requires you to provide a receive buffer. The buffer offset defaults to 0, the size defaults to the length of the buffer parameter, and the SocketFlags value defaults to None . If no data is available for reading, the Receive(Byte[]) method will block until data is available, unless a time-out value was set by using ReceiveTimeout . If the time-out value was exceeded, the Receive(Byte[]) call will throw a SocketException . If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the Receive(Byte[]) method will complete immediately and throw a SocketException . You can use the Available property to determine if data is available for reading. When Available is non-zero, retry the receive operation. If you are using a connectionless Socket , Receive(Byte[]) will read the first queued datagram from the destination address you specify in the Connect method. If the datagram you receive is larger than the size of the buffer parameter, buffer gets filled with the first part of the message, the excess data is lost and a SocketException is thrown. | Improve this Doc View Source Receive(Byte[], Int32, Int32, SocketFlags) Receives the specified number of bytes from a bound Socket into the specified offset position of the receive buffer, using the specified SocketFlags . Declaration public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for the received data. Int32 offset The location in buffer to store the received data. Int32 size The number of bytes to receive. SocketFlags socketFlags A bitwise combination of the SocketFlags values. Returns Type Description Int32 The number of bytes received. Remarks The Receive(Byte[]) method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive(Byte[]) from both connection- oriented and connectionless sockets. | Improve this Doc View Source Receive(Byte[], Int32, SocketFlags) Receives the specified number of bytes of data from a bound Socket into a receive buffer, using the specified SocketFlags . Declaration public int Receive(byte[] buffer, int size, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for the received data. Int32 size The number of bytes to receive. SocketFlags socketFlags A bitwise combination of the SocketFlags values. Returns Type Description Int32 The number of bytes received. Remarks The Receive(Byte[]) method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive from both connection-oriented and connectionless sockets. This overload only requires you to provide a receive buffer, the number of bytes you want to receive, and the necessary SocketFlags . If no data is available for reading, the Receive method will block until data is available, unless a time-out value was set by using ReceiveTimeout . If the time-out value was exceeded, the Receive(Byte[]) call will throw a SocketException . If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, The Receive(Byte[]) method will complete immediately and throw a SocketException . You can use the Available property to determine if data is available for reading. When Available is non-zero, retry your receive operation. | Improve this Doc View Source Receive(Byte[], SocketFlags) Receives data from a bound Socket into a receive buffer, using the specified SocketFlags . Declaration public int Receive(byte[] buffer, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for the received data. SocketFlags socketFlags A bitwise combination of the SocketFlags values. Returns Type Description Int32 The number of bytes received. Remarks The Receive(Byte[]) method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive(Byte[]) from both connection-oriented and connectionless sockets. This overload only requires you to provide a receive buffer and the necessary SocketFlags . The buffer offset defaults to 0, and the size defaults to the length of the byte parameter. | Improve this Doc View Source ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) Receives the specified number of bytes of data into the specified location of the data buffer, using the specified SocketFlags , and stores the endpoint. Declaration public int ReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for received data. Int32 offset The position in the buffer parameter to store the received data. Int32 size The number of bytes to receive. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP An EndPoint , passed by reference, that represents the remote server. Returns Type Description Int32 The number of bytes received. Remarks The ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method reads data into the buffer parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent. This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts. With connectionless protocols, ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) will read the first enqueued datagram received into the local network buffer.If the datagram you receive is larger than the size of buffer, the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method will fill buffer with as much of the message as is possible, and throw a SocketException .If you are using an unreliable protocol, the excess data will be lost.If you are using a reliable protocol, the excess data will be retained by the service provider and you can retrieve it by calling the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method with a large enough buffer. If no data is available for reading, the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method will block until data is available.If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method will complete immediately and throw a SocketException . You can use the Available property to determine if data is available for reading. When Available is non-zero, retry the receive operation. Although ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) is intended for connectionless protocols, you can use a connection-oriented protocol as well.If you choose to do so, you must first either establish a remote host connection by calling the Connect method or accept an incoming remote host connection by calling the Accept() method. If you do not establish or accept a connection before calling the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method, you will get a SocketException .You can also establish a default remote host for a connectionless protocol prior to calling the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method.In either of these cases, the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method will ignore the remoteEP parameter and only receive data from the connected or default remote host. With connection-oriented sockets, ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) will read as much data as is available up to the amount of bytes specified by the size parameter. If the remote host shuts down the Socket connection with the Shutdown method, and all available data has been Received, the ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint) method will complete immediately and return zero bytes. | Improve this Doc View Source ReceiveFrom(Byte[], Int32, SocketFlags, ref EndPoint) Receives the specified number of bytes into the data buffer, using the specified SocketFlags , and stores the endpoint. Declaration public int ReceiveFrom(byte[] buffer, int size, SocketFlags socketFlags, ref EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for received data. Int32 size The number of bytes to receive. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP An EndPoint , passed by reference, that represents the remote server. Returns Type Description Int32 The number of bytes received. | Improve this Doc View Source ReceiveFrom(Byte[], ref EndPoint) Receives a datagram into the data buffer and stores the endpoint. Declaration public int ReceiveFrom(byte[] buffer, ref EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for received data. EndPoint remoteEP An EndPoint , passed by reference, that represents the remote server. Returns Type Description Int32 The number of bytes received. Remarks The method reads data into the buffer parameter, returns the number of bytes successfully read, and captures the remote host endpoint from which the data was sent. This method is useful if you intend to receive connectionless datagrams from an unknown host or multiple hosts. This overload only requires you to provide a receive buffer, and an EndPoint that represents the remote host. The buffer offset defaults to 0. The size defaults to the length of the buffer parameter and the socketFlags value defaults to None. important Before calling , you must explicitly Bind(EndPoint) the Socket to a local endpoint using the Bind(EndPoint) method. If you do not, will throw a SocketException . important The AddressFamily of the EndPoint used in needs to match the AddressFamily of the EndPoint used in . | Improve this Doc View Source ReceiveFrom(Byte[], SocketFlags, ref EndPoint) Receives a datagram into the data buffer, using the specified SocketFlags , and stores the endpoint. Declaration public int ReceiveFrom(byte[] buffer, SocketFlags socketFlags, ref EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that is the storage location for received data. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP An EndPoint , passed by reference, that represents the remote server. Returns Type Description Int32 The number of bytes received. | Improve this Doc View Source Send(Byte[]) Sends data to a connected Socket . Declaration public int Send(byte[] buffer) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent Returns Type Description Int32 The number of bytes sent to the Socket . Remarks Send(Byte[]) synchronously sends data to the remote host specified in the Connect(EndPoint) or Accept() method and returns the number of bytes successfully sent. Send(Byte[]) can be used for both connection-oriented and connectionless protocols. This overload requires a buffer that contains the data you want to send. The SocketFlags value defaults to 0, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer. If you are using a connectionless protocol, you must call Connect(EndPoint) before calling this method, or will throw a SocketException . If you are using a connection-oriented protocol, you must either use Connect(EndPoint) to establish a remote host connection, or use Accept() to accept an incoming connection. If you are using a connectionless protocol and plan to send data to several different hosts, you should use the SendTo(Byte[], EndPoint) method. If you do not use the SendTo method, you will have to call Connect before each call to Send. You can use SendTo even after you have established a default remote host with Connect. You can also change the default remote host prior to calling Send by making another call to Connect. If you are using a connection-oriented protocol, will block until all of the bytes in the buffer are sent, unless a time-out was set by using SendTimeout . If the time-out value was exceeded, the call will throw a SocketException . In nonblocking mode, Send may complete successfully even if it sends less than the number of bytes in the buffer. It is your application's responsibility to keep track of the number of bytes sent and to retry the operation until the application sends the bytes in the buffer. There is also no guarantee that the data you send will appear on the network immediately. To increase network efficiency, the underlying system may delay transmission until a significant amount of outgoing data is collected. A successful completion of the Send(Byte[]) method means that the underlying system has had room to buffer your data for a network send. important If you receive a SocketException, use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. important The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode. See Also Socket System.Net.Sockets | Improve this Doc View Source Send(Byte[], Int32, Int32, SocketFlags) Sends the specified number of bytes of data to a connected Socket , starting at the specified offset, and using the specified SocketFlags . Declaration public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent Int32 offset Int32 size SocketFlags socketFlags Returns Type Description Int32 The number of bytes sent to the Socket . Remarks synchronously sends data to the remote host specified in the Connect(EndPoint) or Accept() method and returns the number of bytes successfully sent. can be used for both connection-oriented and connectionless protocols. In this overload, if you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. important The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode. See Also Socket System.Net.Sockets | Improve this Doc View Source Send(Byte[], Int32, SocketFlags) Sends the specified number of bytes of data to a connected Socket , using the specified SocketFlags . Declaration public int Send(byte[] buffer, int size, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent Int32 size SocketFlags socketFlags Returns Type Description Int32 The number of bytes sent to the Socket . Remarks synchronously sends data to the remote host specified in the Connect(EndPoint) or Accept() method and returns the number of bytes successfully sent. can be used for both connection-oriented and connectionless protocols. This overload requires a buffer that contains the data you want to send, the number of bytes you want to send, and a bitwise combination of any SocketFlags . If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. important You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and will throw a SocketException . If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. important The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode. See Also Socket System.Net.Sockets | Improve this Doc View Source Send(Byte[], SocketFlags) Sends data to a connected Socket using the specified SocketFlags . Declaration public int Send(byte[] buffer, SocketFlags socketFlags) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent SocketFlags socketFlags Returns Type Description Int32 The number of bytes sent to the Socket . Remarks synchronously sends data to the remote host specified in the Connect(EndPoint) or Accept() method and returns the number of bytes successfully sent. can be used for both connection-oriented and connectionless protocols. his overload requires a buffer that contains the data you want to send and a bitwise combination of SocketFlags. The buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer. If you specify the DontRoute flag as the socketflags parameter value, the data you are sending will not be routed. important You must ensure that the size of your buffer does not exceed the maximum packet size of the underlying service provider. If it does, the datagram will not be sent and will throw a SocketException . If you receive a SocketException , use the ErrorCode property to obtain the specific error code. After you have obtained this code, refer to the Windows Sockets version 2 API error code documentation in the MSDN library for a detailed description of the error. important The successful completion of a send does not indicate that the data was successfully delivered. If no buffer space is available within the transport system to hold the data to be transmitted, send will block unless the socket has been placed in nonblocking mode. See Also Socket System.Net.Sockets | Improve this Doc View Source SendTo(Byte[], Int32, Int32, SocketFlags, EndPoint) Sends data to the specified endpoint. Declaration public int SendTo(byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent. Int32 offset The EndPoint that represents the destination for the data. Int32 size The number of bytes to send. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP The EndPoint that represents the destination location for the data. Returns Type Description Int32 The number of bytes sent. | Improve this Doc View Source SendTo(Byte[], Int32, SocketFlags, EndPoint) Sends the specified number of bytes of data to the specified endpoint using the specified SocketFlags. Declaration public int SendTo(byte[] buffer, int size, SocketFlags socketFlags, EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent. Int32 size The number of bytes to send. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP The EndPoint that represents the destination location for the data. Returns Type Description Int32 The number of bytes sent. | Improve this Doc View Source SendTo(Byte[], EndPoint) Sends data to the specified endpoint. Declaration public int SendTo(byte[] buffer, EndPoint remoteEP) Parameters Type Name Description Byte [] buffer n array of type Byte that contains the data to be sent. EndPoint remoteEP The EndPoint that represents the destination location for the data. Returns Type Description Int32 The number of bytes sent. Remarks In this overload, the buffer offset defaults to 0, the number of bytes to send defaults to the size of the buffer parameter, and the SocketFlags value defaults to 0. | Improve this Doc View Source SendTo(Byte[], SocketFlags, EndPoint) Sends data to a specific endpoint using the specified SocketFlags . Declaration public int SendTo(byte[] buffer, SocketFlags socketFlags, EndPoint remoteEP) Parameters Type Name Description Byte [] buffer An array of type Byte that contains the data to be sent. SocketFlags socketFlags A bitwise combination of the SocketFlags values. EndPoint remoteEP The EndPoint that represents the destination location for the data. Returns Type Description Int32 The number of bytes sent. Remarks In this overload, the buffer offset defaults to 0, and the number of bytes to send defaults to the size of the buffer. If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. | Improve this Doc View Source SetSocketOption(SocketOptionLevel, SocketOptionName, Boolean) Sets the specified Socket option to the specified Boolean value. Declaration public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue) Parameters Type Name Description SocketOptionLevel optionLevel One of the SocketOptionLevel values. SocketOptionName optionName One of the SocketOptionName values. Boolean optionValue The value of the option, represented as a Boolean. | Improve this Doc View Source SetSocketOption(SocketOptionLevel, SocketOptionName, Byte[]) Sets the specified Socket option to the specified value, represented as a byte array. Declaration public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue) Parameters Type Name Description SocketOptionLevel optionLevel One of the SocketOptionLevel values. SocketOptionName optionName One of the SocketOptionName values. Byte [] optionValue An array of type Byte that represents the value of the option. Remarks Socket options determine the behavior of the current Socket . Use this overload to set those Socket options that require a byte array as an option value. | Improve this Doc View Source SetSocketOption(SocketOptionLevel, SocketOptionName, Int32) Sets the specified Socket option to the specified integer value. Declaration public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue) Parameters Type Name Description SocketOptionLevel optionLevel One of the SocketOptionLevel values. SocketOptionName optionName One of the SocketOptionName values. Int32 optionValue A value of the option. Remarks Socket options determine the behavior of the current Socket . For an option with a Boolean data type, specify a nonzero value to enable the option, and a zero value to disable the option. For an option with an integer data type, specify the appropriate value. Socket options are grouped by level of protocol support. Explicit Interface Implementations | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.Sockets.SocketError.html": {
    "href": "api/System.Net.Sockets.SocketError.html",
    "title": "Enum SocketError | nanoFramework Documentation",
    "keywords": "Enum SocketError Defines socket error constants. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum SocketError Fields Name Description AccessDenied An attempt was made to access a Socket in a way that is forbidden by its access permissions. AddressAlreadyInUse Only one use of an address is normally permitted. AddressFamilyNotSupported The address family specified is not supported. This error is returned if the IPv6 address family was specified and the IPv6 stack is not installed on the local machine. This error is returned if the IPv4 address family was specified and the IPv4 stack is not installed on the local machine. AddressNotAvailable The selected IP address is not valid in this context. AlreadyInProgress The non-blocking Socket already has an operation in progress. ConnectionAborted The connection was aborted by the .NET Framework or the underlying socket provider. ConnectionRefused The remote host is actively refusing a connection. ConnectionReset The connection was reset by the remote peer. DestinationAddressRequired A required address was omitted from an operation on a Socket. Disconnecting A graceful shutdown is in progress. Fault An invalid pointer address was detected by the underlying socket provider. HostDown The operation failed because the remote host is down. HostNotFound No such host is known. The name is not an official host name or alias. HostUnreachable There is no network route to the specified host. InProgress A blocking operation is in progress. Interrupted A blocking Socket call was cancelled. InvalidArgument An invalid argument was supplied to a Socket member. IsConnected The Socket is already connected. MessageSize The datagram is too long. NetworkDown The network is not available. NetworkReset The application tried to set KeepAlive on a connection that has already timed out NetworkUnreachable No route to the remote host exists. NoBufferSpaceAvailable No free buffer space is available for a Socket operation. NoData The requested name or IP address was not found on the name server. NoRecovery The error is unrecoverable or the requested database cannot be located. NotConnected The application tried to send or receive data, and the Socket is not connected. NotInitialized The underlying socket provider has not been initialized. NotSocket A Socket operation was attempted on a non-socket. OperationNotSupported The address family is not supported by the protocol family. ProcessLimit Too many processes are using the underlying socket provider. ProtocolFamilyNotSupported The protocol family is not implemented or has not been configured. ProtocolNotSupported The protocol is not implemented or has not been configured. ProtocolOption An unknown, invalid, or unsupported option or level was used with a Socket. ProtocolType The protocol type is incorrect for this Socket. Shutdown A request to send or receive data was disallowed because the Socket has already been closed. SocketError An unspecified Socket error has occurred. SocketNotSupported The support for the specified socket type does not exist in this address family. Success The operation completed successfully. SystemNotReady The network subsystem is unavailable. TimedOut The connection attempt timed out, or the connected host has failed to respond. TooManyOpenSockets There are too many open sockets in the underlying socket provider. TryAgain The name of the host could not be resolved. Try again later. TypeNotFound The specified class was not found. VersionNotSupported The version of the underlying socket provider is out of range. WouldBlock An operation on a non-blocking socket cannot be completed immediately. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.Sockets.SocketException.html": {
    "href": "api/System.Net.Sockets.SocketException.html",
    "title": "Class SocketException | nanoFramework Documentation",
    "keywords": "Class SocketException The exception that is thrown when a socket error occurs. Inheritance Object Exception SocketException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax [Serializable] public class SocketException : Exception Constructors | Improve this Doc View Source SocketException(SocketError) Initializes a new instance of the SocketException class. Declaration public SocketException(SocketError errorCode) Parameters Type Name Description SocketError errorCode The error code. Properties | Improve this Doc View Source ErrorCode Gets the error code that is associated with this exception. Declaration public int ErrorCode { get; } Property Value Type Description Int32 Remarks The ErrorCode property contains the error code that is associated with the error that caused the exception. The default constructor for SocketException sets the ErrorCode property to the last operating system error that occurred. For more information about socket error codes, see the Windows Sockets version 2 API error code documentation in MSDN. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.Sockets.SocketFlags.html": {
    "href": "api/System.Net.Sockets.SocketFlags.html",
    "title": "Enum SocketFlags | nanoFramework Documentation",
    "keywords": "Enum SocketFlags This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax [Flags] public enum SocketFlags Fields Name Description Broadcast Indicates that the control data did not fit into an internal 64-KB buffer and was truncated. ControlDataTruncated Indicates that the control data did not fit into an internal 64-KB buffer and was truncated. DontRoute Send without using routing tables. MaxIOVectorLength Provides a standard value for the number of WSABUF structures that are used to send and receive data. Multicast Indicates a multicast packet. None Use no flags for this call. OutOfBand Process out-of-band data. Partial Partial send or receive for message. Peek Peek at incoming message. Truncated The message was too large to fit into the specified buffer and was truncated. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.Sockets.SocketOptionLevel.html": {
    "href": "api/System.Net.Sockets.SocketOptionLevel.html",
    "title": "Enum SocketOptionLevel | nanoFramework Documentation",
    "keywords": "Enum SocketOptionLevel Defines socket option levels for the Socket class. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum SocketOptionLevel Fields Name Description IP Indicates socket options apply to IP sockets. IPv6 Indicates socket options apply to IPv6 sockets. Socket Indicates socket options apply to the socket itself. Tcp Indicates socket options apply to TCP sockets. Udp Indicates socket options apply to UDP sockets. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.Sockets.SocketOptionName.html": {
    "href": "api/System.Net.Sockets.SocketOptionName.html",
    "title": "Enum SocketOptionName | nanoFramework Documentation",
    "keywords": "Enum SocketOptionName Defines socket option names for the Socket class. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum SocketOptionName Remarks The SocketOptionName enumeration defines the name of each Socket configuration option. Sockets can be configured with the SetSocketOption(SocketOptionLevel, SocketOptionName, Boolean) method. Fields Name Description AcceptConnection Socket is listening. AddMembership Add an IP group membership. AddSourceMembership Join IP group/source. BlockSource Block IP group/source. Broadcast Permit sending broadcast messages on the socket. BsdUrgent Use urgent data as defined in RFC-1222. This option can be set only once; after it is set, it cannot be turned off. ChecksumCoverage Set or get the UDP checksum coverage. Debug Record debugging information. DontFragment Don't fragment IP datagrams. DontLinger Close socket gracefully without lingering. DontRoute Do not route, send directly to interface addresses. DropMembership Drop an IP group membership. DropSourceMembership Leave IP group/source. Error Get error status and clear. ExclusiveAddressUse Enables a socket to be bound for exclusive access. Expedited Use expedited data as defined in RFC-1222. This option can be set only once; after it is set, it cannot be turned off. HeaderIncluded Header is included with data. HopLimit Specifies the maximum number of router hops for an Internet Protocol version 6 (IPv6) packet. This is similar to Time to Live (TTL) for Internet Protocol version 4. IPOptions IP options. IpTimeToLive IP time to live. KeepAlive Send keep-alives. Linger Linger on close if unsent data is present. MaxConnections Maximum queue length that can be specified by Listen(Int32) . MulticastInterface IP multicast interface. - Additional comments by mbolien: multicast interface You provide it with an SOCKADDR_IN, and that tells the system that it should receive multicast messages on that interface (if you have more than one interface). Binding the socket is not sufficient, since if the Ethernet hardware isnt set up to grab the multicast packets, it wont do good to bind the socket. Kinda like raw sockets. Unless you put the Ethernet card in promiscuous mode, youll only get stuff sent to and from your machine. MulticastLoopback IP Multicast loopback. MulticastTimeToLive IP multicast time to live. NoChecksum Send UDP datagrams with checksum set to zero. NoDelay Disables the Nagle algorithm for send coalescing. OutOfBandInline Receives out-of-band data in the normal data stream. PacketInformation Receive packet information for ipv4. ReceiveBuffer Send low water mark. ReceiveLowWater Receive low water mark. ReceiveTimeout Receive timeout. ReuseAddress Allows the socket to be bound to an address that is already in use. SendBuffer Specifies the total per-socket buffer space reserved for sends. This is unrelated to the maximum message size or the size of a TCP window. SendLowWater Specifies the total per-socket buffer space reserved for receives. This is unrelated to the maximum message size or the size of a TCP window. SendTimeout Send timeout. Type Get socket type. TypeOfService IP type of service and preced. UnblockSource Unblock IP group/source. UpdateAcceptContext Updates an accepted socket's properties by using those of an existing socket. This is equivalent to using the Winsock2 SO_UPDATE_ACCEPT_CONTEXT socket option and is supported only on connection-oriented sockets. UpdateConnectContext Updates a connected socket's properties by using those of an existing socket. This is equivalent to using the Winsock2 SO_UPDATE_CONNECT_CONTEXT socket option and is supported only on connection-oriented sockets. UseLoopback Bypass hardware when possible. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.Sockets.SocketType.html": {
    "href": "api/System.Net.Sockets.SocketType.html",
    "title": "Enum SocketType | nanoFramework Documentation",
    "keywords": "Enum SocketType Specifies the type of socket an instance of the Socket class represents. Namespace : System.Net.Sockets Assembly : System.Net.dll Syntax public enum SocketType Remarks Before a Socket can send and receive data, it must first be created using an AddressFamily , a SocketType, and a ProtocolType. The SocketType enumeration provides several options for defining the type of Socket that you intend to open. Fields Name Description Dgram Supports datagrams, which are connectionless, unreliable messages of a fixed (typically small) maximum length. Messages might be lost or duplicated and might arrive out of order. A Socket of type Dgram requires no connection prior to sending and receiving data, and can communicate with multiple peers. Dgram uses the Datagram Protocol (Udp) and the InterNetworkAddressFamily. Raw Supports access to the underlying transport protocol. Using the SocketTypeRaw, you can communicate using protocols like Internet Control Message Protocol (Icmp) and Internet Group Management Protocol (Igmp). Your application must provide a complete IP header when sending. Received datagrams return with the IP header and options intact. Rdm Supports connectionless, message-oriented, reliably delivered messages, and preserves message boundaries in data. Rdm (Reliably Delivered Messages) messages arrive unduplicated and in order. Furthermore, the sender is notified if messages are lost. If you initialize a Socket using Rdm, you do not require a remote host connection before sending and receiving data. With Rdm, you can communicate with multiple peers. Seqpacket Provides connection-oriented and reliable two-way transfer of ordered byte streams across a network. Seqpacket does not duplicate data, and it preserves boundaries within the data stream. A Socket of type Seqpacket communicates with a single peer and requires a remote host connection before communication can begin. Stream Supports reliable, two-way, connection-based byte streams without the duplication of data and without preservation of boundaries. A Socket of this type communicates with a single peer and requires a remote host connection before communication can begin. Stream uses the Transmission Control Protocol (Tcp) ProtocolType and the InterNetworkAddressFamily. Unknown Specifies an unknown Socket type. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.WebException.html": {
    "href": "api/System.Net.WebException.html",
    "title": "Class WebException | nanoFramework Documentation",
    "keywords": "Class WebException Defines the exception that is thrown by instances when an error occurs. Inheritance Object Exception SystemException InvalidOperationException WebException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class WebException : InvalidOperationException Remarks This class is a subclass of InvalidOperationException that contains a WebExceptionStatus and possibly a reference to a WebResponse . The WebResponse is only present if there is a response from the remote server. Constructors | Improve this Doc View Source WebException() The default constructor. Declaration public WebException() | Improve this Doc View Source WebException(String) Constructs a WebException based on the specified message string. Declaration public WebException(string message) Parameters Type Name Description String message The message string for the exception. | Improve this Doc View Source WebException(String, Exception) Constructs a WebException based on the specified message string and inner exception. Declaration public WebException(string message, Exception innerException) Parameters Type Name Description String message The message string for the exception. Exception innerException The exception that caused this exception. | Improve this Doc View Source WebException(String, Exception, WebExceptionStatus, WebResponse) Constructs a WebException based on the specified message string, inner exception, WebExceptionStatus , and WebResponse . Declaration public WebException(string message, Exception inner, WebExceptionStatus status, WebResponse response) Parameters Type Name Description String message Message string for exception. Exception inner The exception that caused this exception. WebExceptionStatus status The network status of the exception. WebResponse response The WebResponse we have. | Improve this Doc View Source WebException(String, WebExceptionStatus) Constructs a WebException based on the specified message string and WebExceptionStatus . Declaration public WebException(string message, WebExceptionStatus status) Parameters Type Name Description String message The message string for the exception. WebExceptionStatus status The network status of the exception. Properties | Improve this Doc View Source Response Gets the response that the remote host returned. Declaration public WebResponse Response { get; } Property Value Type Description WebResponse If a response is available from the Internet resource, a WebResponse instance that contains the error response from an Internet resource; otherwise, null . | Improve this Doc View Source Status Gets the WebExceptionStatus code. Declaration public WebExceptionStatus Status { get; } Property Value Type Description WebExceptionStatus One of the WebExceptionStatus values. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.WebExceptionStatus.html": {
    "href": "api/System.Net.WebExceptionStatus.html",
    "title": "Enum WebExceptionStatus | nanoFramework Documentation",
    "keywords": "Enum WebExceptionStatus Defines status codes for the WebException class. Namespace : System.Net Assembly : System.Net.Http.dll Syntax public enum WebExceptionStatus Fields Name Description ConnectFailure The remote service point could not be contacted at the transport level. ConnectionClosed The connection was prematurely closed. KeepAliveFailure The connection for a request that specifies the Keep-alive header was closed unexpectedly. NameResolutionFailure The name resolver service could not resolve the host name. Pending An internal asynchronous request is pending. PipelineFailure The request was a piplined request and the connection was closed before the response was received. ProtocolError The response received from the server was complete but indicated a protocol-level error. For example, an HTTP protocol error such as 401 Access Denied would use this status. ProxyNameResolutionFailure The name resolver service could not resolve the proxy host name. ReceiveFailure A complete response was not received from the remote server. RequestCanceled The request was canceled or an unclassifiable error occurred. This is the default value for Status . SecureChannelFailure An error occurred while establishing a connection using SSL. SendFailure A complete request could not be sent to the remote server. ServerProtocolViolation The server response was not a valid HTTP response. Success No error was encountered. Timeout No response was received during the time-out period for a request. TrustFailure A server certificate could not be validated. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Net.WebHeaderCollection.html": {
    "href": "api/System.Net.WebHeaderCollection.html",
    "title": "Class WebHeaderCollection | nanoFramework Documentation",
    "keywords": "Class WebHeaderCollection Contains protocol headers associated with a request or response. Manages name-value pairs for HTTP headers. Inheritance Object WebHeaderCollection Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class WebHeaderCollection Remarks This class includes additional methods, including HTTP parsing of a collection into a buffer that can be sent. Headers are validated when attempting to add them. Constructors | Improve this Doc View Source WebHeaderCollection() Creates an empty collection of WEB headers. Declaration public WebHeaderCollection() Properties | Improve this Doc View Source AllKeys Gets all header names (keys) in the collection. Declaration public string[] AllKeys { get; } Property Value Type Description String [] An array of type String containing all header names in a Web request. | Improve this Doc View Source Count Gets the number of headers in the collection. Declaration public int Count { get; } Property Value Type Description Int32 An Int32 indicating the number of headers in a request. | Improve this Doc View Source Item[String] Returns the string value for the header. Declaration public string this[string header] { get; } Parameters Type Name Description String header The name of the header. Property Value Type Description String A string containing the value. If no value is present, returns null . Methods | Improve this Doc View Source Add(String) Inserts a new header into the collection. Declaration public void Add(string header) Parameters Type Name Description String header A header name/value pair, in the format \"myHeaderName:myValue\". Remarks This method expects a string with the format \"myName:myValue\", and parses the two parts out. If a header with the specified name already exists, the header that is being added is concatenated onto the existing header. Throws an exception if the specified header name is the name of a special header. | Improve this Doc View Source Add(String, String) Inserts a header with the specified name and value into the collection. Declaration public void Add(string name, string value) Parameters Type Name Description String name The name of the header that is being added to the collection. String value The content of the header that is being added (its header-value). If a header with the specified name already exists, this value is concatenated onto the existing header. Remarks If a header with the specified name already exists, the header that is being added is concatenated onto the existing header. Throws an exception if the specified header name is the name of a special header. | Improve this Doc View Source GetValues(String) Returns the values for the specified header name. Declaration public string[] GetValues(string header) Parameters Type Name Description String header The name of the header. Returns Type Description String [] An array of parsed string objects. Remarks Takes a header name and returns a string array representing the individual values for that header. For example, if the headers contain the following line: Accept: text/plain, text/html then GetValues(\"Accept\") returns an array of two strings: \"text/plain\" and \"text/html\". | Improve this Doc View Source IsRestricted(String) Tests whether the specified HTTP header can be set. Declaration public static bool IsRestricted(string headerName) Parameters Type Name Description String headerName Name for the header. Returns Type Description Boolean Remarks Throws an exception if the header name is blank, contains illegal characters, or contains characters that are reserved by the HTTP protocol. | Improve this Doc View Source Remove(String) Removes the specified header from the collection. Declaration public void Remove(string name) Parameters Type Name Description String name The name of the header to remove. Remarks Throws an exception if the specified header name is the name of a special header. | Improve this Doc View Source Set(String, String) Sets the specified header to the specified value. Declaration public void Set(string name, string value) Parameters Type Name Description String name The header to set. String value The content of the header to set. Remarks Includes validation. Throws an exception if the specified header name is the name of a special header. | Improve this Doc View Source ToByteArray() Generates a byte array representation of the headers, that is ready to be sent. Declaration public byte[] ToByteArray() Returns Type Description Byte [] An array of bytes. Remarks This method serializes the headers into a byte array that can be sent over the network. The format looks like: Header-Name1: Header-Value1\\r\\n Header-Name2: Header-Value2\\r\\n ... Header-NameN: Header-ValueN\\r\\n \\r\\n | Improve this Doc View Source ToString() Generates a string representation of the headers, that is ready to be sent except for it being in String format. Declaration public override string ToString() Returns Type Description String A string representation of the headers. Overrides Object.ToString() Remarks The format looks like the following: Header-Name: Header-Value\\r\\n Header-Name2: Header-Value2\\r\\n ... Header-NameN: Header-ValueN\\r\\n \\r\\n Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.WebProxy.html": {
    "href": "api/System.Net.WebProxy.html",
    "title": "Class WebProxy | nanoFramework Documentation",
    "keywords": "Class WebProxy Contains HTTP proxy settings for the WebRequest class. Inheritance Object WebProxy Implements IWebProxy Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public class WebProxy : IWebProxy Constructors | Improve this Doc View Source WebProxy() Initializes an empty instance of the WebProxy class. Declaration public WebProxy() Remarks The URI of the proxy can be set later, using the Address property. | Improve this Doc View Source WebProxy(String) Initializes a new instance of the WebProxy class with the specified URI. Declaration public WebProxy(string Address) Parameters Type Name Description String Address The URI address of the proxy server. Remarks The WebProxy instance is initialized with the Address property set to a Uri instance containing the Address string. For the new instance of the WebProxy class, \"Bypass on local addresses\" is set to false . | Improve this Doc View Source WebProxy(String, Boolean) Initializes a new instance of the WebProxy class with the specified URI and bypass setting. Declaration public WebProxy(string Address, bool BypassOnLocal) Parameters Type Name Description String Address The URI of the proxy server. Boolean BypassOnLocal Indicates whether to bypass the proxy when accessing local addresses. | Improve this Doc View Source WebProxy(String, Int32) Initializes a new instance of the WebProxy class with the specified host and port number. Declaration public WebProxy(string Host, int Port) Parameters Type Name Description String Host The name of the proxy host, such as: contoso Int32 Port The port number on the host to use, such as: 80 Remarks The WebProxy instance is initialized with the Address property set to a Uri instance of the form: http://Host:Port | Improve this Doc View Source WebProxy(Uri) Initializes a new instance of the WebProxy class from the specified Uri instance. Declaration public WebProxy(Uri Address) Parameters Type Name Description Uri Address A Uri instance that contains the address of the proxy server. | Improve this Doc View Source WebProxy(Uri, Boolean) Initializes a new instance of the WebProxy class with the specified Uri instance and bypass setting. Declaration public WebProxy(Uri Address, bool BypassOnLocal) Parameters Type Name Description Uri Address A Uri instance that contains the address of the proxy server. Boolean BypassOnLocal Indicates whether to bypass the WebProxy on local network addresses. Properties | Improve this Doc View Source Address Gets or sets the address of the proxy server. Declaration public Uri Address { get; set; } Property Value Type Description Uri A Uri instance that contains the address of the proxy server. | Improve this Doc View Source BypassProxyOnLocal Gets or sets whether to bypass the proxy server for local addresses. Declaration public bool BypassProxyOnLocal { get; set; } Property Value Type Description Boolean true to bypass the proxy server for local addresses; otherwise, false . Methods | Improve this Doc View Source GetProxy(Uri) Returns the proxied URI for a request. Declaration public Uri GetProxy(Uri destination) Parameters Type Name Description Uri destination The Uri instance of the requested Internet resource. Returns Type Description Uri The Uri instance of the Internet resource, if the resource is on the bypass list; otherwise, the Uri instance of the proxy. | Improve this Doc View Source IsBypassed(Uri) Indicates whether to use the proxy server for the specified host. Declaration public bool IsBypassed(Uri host) Parameters Type Name Description Uri host The Uri instance of the host to check for proxy use. Returns Type Description Boolean true if the proxy server should not be used for the host; otherwise, false . Implements IWebProxy Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.WebRequest.html": {
    "href": "api/System.Net.WebRequest.html",
    "title": "Class WebRequest | nanoFramework Documentation",
    "keywords": "Class WebRequest Makes a request to a Uniform Resource Identifier (URI). This is an abstract class. Inheritance Object MarshalByRefObject WebRequest HttpWebRequest Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public abstract class WebRequest : MarshalByRefObject, IDisposable Remarks This is the base class of all Web resource/protocol objects. This class provides common methods, data and proprties for making the top-level request. Constructors | Improve this Doc View Source WebRequest() Initializes a new instance of the WebRequest class. Declaration protected WebRequest() Properties | Improve this Doc View Source ConnectionGroupName When overridden in a descendant class, gets or sets the name of the connection group for the request. Declaration public virtual string ConnectionGroupName { get; set; } Property Value Type Description String The name of the connection group for the request. Remarks This property serves as a way of grouping connections. | Improve this Doc View Source ContentLength When overridden in a descendant class, gets or sets the content length of the request data being sent. Declaration public virtual long ContentLength { get; set; } Property Value Type Description Int64 The number of bytes of request data being sent. Remarks The content length is the length of the message with the verb. It is useful only with verbs that actually support a message, such as POST; it is not used for the GET verb. | Improve this Doc View Source ContentType When overridden in a descendant class, gets or sets the content type of the request data being sent. Declaration public virtual string ContentType { get; set; } Property Value Type Description String The content type of the request data. Remarks The content length is the length of the message with the verb. It is useful only with verbs that actually support a message, such as POST; it is not used for the GET verb. | Improve this Doc View Source DefaultWebProxy Gets or sets the global HTTP proxy. The DefaultWebProxy property determines the default proxy that all WebRequest instances use if the request supports proxies and no proxy is set explicitly using the Proxy property. Proxies are currently supported by HttpWebRequest. Declaration public static IWebProxy DefaultWebProxy { get; set; } Property Value Type Description IWebProxy | Improve this Doc View Source Headers When overridden in a descendant class, gets or sets the collection of header name/value pairs associated with the request. Declaration public virtual WebHeaderCollection Headers { get; set; } Property Value Type Description WebHeaderCollection A WebHeaderCollection containing the header name/value pairs associated with this request. | Improve this Doc View Source Method When overridden in a descendant class, gets or sets the protocol method to use in this request. Declaration public virtual string Method { get; set; } Property Value Type Description String The protocol method to use in this request. Remarks This property gets or sets the verb to this request, such as GET or POST for HTTP. | Improve this Doc View Source Proxy When overridden in a descendant class, gets or sets the network proxy to use to access this Internet resource. Declaration public virtual IWebProxy Proxy { get; set; } Property Value Type Description IWebProxy The IWebProxy to use to access the Internet resource. | Improve this Doc View Source RequestUri When overridden in a descendant class, gets the URI of the Internet resource associated with the request. Declaration public virtual Uri RequestUri { get; } Property Value Type Description Uri A Uri representing the resource associated with the request. Remarks This property is read-only, since the Uri can be specified only on creation. | Improve this Doc View Source Timeout Gets or sets the length of time, in milliseconds, before the request times out. Declaration public virtual int Timeout { get; set; } Property Value Type Description Int32 The length of time, in milliseconds, until the request times out, or the value Timeout.Infinite to indicate that the request does not time out. The default value is defined by the descendant class. Methods | Improve this Doc View Source Create(String) Initializes a new WebRequest instance for the specified URI scheme, such as http://, https://, or file://. Declaration public static WebRequest Create(string requestUriString) Parameters Type Name Description String requestUriString The URI that identifies the Internet resource. Returns Type Description WebRequest Remarks This is the main creation routine. The specified Uri is looked up in the prefix match table, and the appropriate handler is invoked to create the object. | Improve this Doc View Source Create(Uri) Creates a WebRequest . Declaration public static WebRequest Create(Uri requestUri) Parameters Type Name Description Uri requestUri A Uri containing the URI of the requested resource. Returns Type Description WebRequest Remarks This is the main creation routine. The specified Uri is looked up in the prefix match table, and the appropriate handler is invoked to create the object. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetRequestStream() When overridden in a descendant class, returns a Stream for writing data to the Internet resource. Declaration public virtual Stream GetRequestStream() Returns Type Description Stream A Stream for writing data to the Internet resource. | Improve this Doc View Source GetResponse() When overridden in a descendant class, returns a response to an Internet request. Declaration public virtual WebResponse GetResponse() Returns Type Description WebResponse A WebResponse containing the response to the Internet request. | Improve this Doc View Source Initialize() Initialize has to be called before the class is used. Normally should be called by the constructor above. Declaration public static void Initialize() | Improve this Doc View Source RegisterPrefix(String, IWebRequestCreate) Registers a WebRequest descendant for the specified URI. Declaration public static bool RegisterPrefix(string prefix, IWebRequestCreate creator) Parameters Type Name Description String prefix The complete URI or URI prefix that the WebRequest descendant services. IWebRequestCreate creator The create method that the WebRequest calls to create the WebRequest descendant. Returns Type Description Boolean true . Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Net.WebResponse.html": {
    "href": "api/System.Net.WebResponse.html",
    "title": "Class WebResponse | nanoFramework Documentation",
    "keywords": "Class WebResponse Provides a response from a Uniform Resource Identifier (URI). This is an abstract class. Inheritance Object MarshalByRefObject WebResponse HttpWebResponse Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Net Assembly : System.Net.Http.dll Syntax public abstract class WebResponse : MarshalByRefObject, IDisposable Remarks This is the abstract base class for all WebResponse objects. Constructors | Improve this Doc View Source WebResponse() Initializes a new instance of the WebResponse class. Declaration protected WebResponse() Properties | Improve this Doc View Source ContentLength When overridden in a descendant class, gets or sets the content length of data being received. Declaration public virtual long ContentLength { get; set; } Property Value Type Description Int64 The number of bytes returned from the Internet resource. | Improve this Doc View Source ContentType When overridden in a derived class, gets or sets the content type of the data being received. Declaration public virtual string ContentType { get; set; } Property Value Type Description String A string that contains the content type of the response. | Improve this Doc View Source Headers When overridden in a derived class, gets a collection of header name-value pairs associated with this request. Declaration public virtual WebHeaderCollection Headers { get; } Property Value Type Description WebHeaderCollection An instance of the WebHeaderCollection class that contains header values associated with this response. | Improve this Doc View Source ResponseUri When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request. Declaration public virtual Uri ResponseUri { get; } Property Value Type Description Uri An instance of the Uri class that contains the URI of the Internet resource that actually responded to the request. Remarks This property gets the final Response URI, that includes any changes that may have transpired from the orginal request. Methods | Improve this Doc View Source Close() When overridden by a descendant class, closes the response stream. Declaration public virtual void Close() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetResponseStream() When overridden in a descendant class, returns the data stream from the Internet resource. Declaration public virtual Stream GetResponseStream() Returns Type Description Stream An instance of the Stream class for reading data from the Internet resource. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.NonSerializedAttribute.html": {
    "href": "api/System.NonSerializedAttribute.html",
    "title": "Class NonSerializedAttribute | nanoFramework Documentation",
    "keywords": "Class NonSerializedAttribute Indicates that a field of a serializable class should not be serialized. This class cannot be inherited. Inheritance Object Attribute NonSerializedAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class NonSerializedAttribute : Attribute Constructors | Improve this Doc View Source NonSerializedAttribute() Initializes a new instance of the NonSerializedAttribute class. Declaration public NonSerializedAttribute() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.NotImplementedException.html": {
    "href": "api/System.NotImplementedException.html",
    "title": "Class NotImplementedException | nanoFramework Documentation",
    "keywords": "Class NotImplementedException The exception that is thrown when a requested method or operation is not implemented. Inheritance Object Exception SystemException NotImplementedException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class NotImplementedException : SystemException Constructors | Improve this Doc View Source NotImplementedException() Initializes a new instance of the NotImplementedException class with default properties. Declaration public NotImplementedException() | Improve this Doc View Source NotImplementedException(String) Initializes a new instance of the NotImplementedException class with a specified error message. Declaration public NotImplementedException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source NotImplementedException(String, Exception) Initializes a new instance of the NotImplementedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public NotImplementedException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the inner parameter is not null, the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.NotSupportedException.html": {
    "href": "api/System.NotSupportedException.html",
    "title": "Class NotSupportedException | nanoFramework Documentation",
    "keywords": "Class NotSupportedException The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality. Inheritance Object Exception SystemException NotSupportedException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class NotSupportedException : SystemException Constructors | Improve this Doc View Source NotSupportedException() Initializes a new instance of the NotSupportedException class, setting the Message property of the new instance to a system-supplied message that describes the error. This message takes into account the current system culture. Declaration public NotSupportedException() | Improve this Doc View Source NotSupportedException(String) Initializes a new instance of the NotSupportedException class with a specified error message. Declaration public NotSupportedException(string message) Parameters Type Name Description String message A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. | Improve this Doc View Source NotSupportedException(String, Exception) Initializes a new instance of the NotSupportedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public NotSupportedException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.NullReferenceException.html": {
    "href": "api/System.NullReferenceException.html",
    "title": "Class NullReferenceException | nanoFramework Documentation",
    "keywords": "Class NullReferenceException The exception that is thrown when there is an attempt to dereference a null object reference. Inheritance Object Exception SystemException NullReferenceException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class NullReferenceException : SystemException Constructors | Improve this Doc View Source NullReferenceException() Initializes a new instance of the NullReferenceException class, setting the Message property of the new instance to a system-supplied message that describes the error, such as \"The value 'null' was found where an instance of an object was required.\" This message takes into account the current system culture. Declaration public NullReferenceException() | Improve this Doc View Source NullReferenceException(String) Initializes a new instance of the NullReferenceException class with a specified error message. Declaration public NullReferenceException(string message) Parameters Type Name Description String message A String that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture. | Improve this Doc View Source NullReferenceException(String, Exception) Initializes a new instance of the NullReferenceException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public NullReferenceException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not null, the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Object.html": {
    "href": "api/System.Object.html",
    "title": "Class Object | nanoFramework Documentation",
    "keywords": "Class Object Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy. Inheritance Object Namespace : System Assembly : mscorlib.dll Syntax public class Object Constructors | Improve this Doc View Source Object() Initializes a new instance of the Object class. Declaration public Object() Methods Equals(Object) Determines whether the specified object is equal to the current object. Declaration public extern virtual bool Equals(object obj) Parameters Type Name Description Object obj he object to compare with the current object. Returns Type Description Boolean true if the specified object is equal to the current object; otherwise, false. | Improve this Doc View Source Equals(Object, Object) Determines whether the specified object instances are considered equal. Declaration public static bool Equals(object objA, object objB) Parameters Type Name Description Object objA The first object to compare. Object objB The second object to compare. Returns Type Description Boolean true if the objects are considered equal; otherwise, false. If both objA and objB are null, the method returns true. GetHashCode() Serves as the default hash function. Declaration public extern virtual int GetHashCode() Returns Type Description Int32 A hash code for the current object. GetType() Gets the Type of the current instance. Declaration public extern Type GetType() Returns Type Description Type The exact runtime type of the current instance. Remarks Available only in mscorlib build with support for System.Reflection. MemberwiseClone() Creates a shallow copy of the current Object. Declaration protected extern object MemberwiseClone() Returns Type Description Object A shallow copy of the current Object. ReferenceEquals(Object, Object) Determines whether the specified Object instances are the same instance. Declaration public static extern bool ReferenceEquals(object objA, object objB) Parameters Type Name Description Object objA The first object to compare. Object objB The second object to compare. Returns Type Description Boolean true if objA is the same instance as objB or if both are null; otherwise, false. | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public virtual string ToString() Returns Type Description String A string that represents the current object. Remarks Available only in mscorlib build with support for System.Reflection. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ObjectDisposedException.html": {
    "href": "api/System.ObjectDisposedException.html",
    "title": "Class ObjectDisposedException | nanoFramework Documentation",
    "keywords": "Class ObjectDisposedException The exception that is thrown when an operation is performed on a disposed object. Inheritance Object Exception SystemException ObjectDisposedException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class ObjectDisposedException : SystemException Constructors | Improve this Doc View Source ObjectDisposedException() Initializes a new instance of the ObjectDisposedException class. Declaration public ObjectDisposedException() | Improve this Doc View Source ObjectDisposedException(String) Initializes a new instance of the ObjectDisposedException class with a string containing the name of the disposed object. Declaration public ObjectDisposedException(string message) Parameters Type Name Description String message A string containing the name of the disposed object. | Improve this Doc View Source ObjectDisposedException(String, Exception) Initializes a new instance of the ObjectDisposedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ObjectDisposedException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If innerException is not null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ObsoleteAttribute.html": {
    "href": "api/System.ObsoleteAttribute.html",
    "title": "Class ObsoleteAttribute | nanoFramework Documentation",
    "keywords": "Class ObsoleteAttribute Marks the program elements that are no longer in use. This class cannot be inherited. Inheritance Object Attribute ObsoleteAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)] public sealed class ObsoleteAttribute : Attribute Constructors | Improve this Doc View Source ObsoleteAttribute() Initializes a new instance of the ObsoleteAttribute class with default properties. Declaration public ObsoleteAttribute() | Improve this Doc View Source ObsoleteAttribute(String) Initializes a new instance of the ObsoleteAttribute class with a specified workaround message. Declaration public ObsoleteAttribute(string message) Parameters Type Name Description String message The text string that describes alternative workarounds. | Improve this Doc View Source ObsoleteAttribute(String, Boolean) Initializes a new instance of the ObsoleteAttribute class with a workaround message and a Boolean value indicating whether the obsolete element usage is considered an error. Declaration public ObsoleteAttribute(string message, bool error) Parameters Type Name Description String message The text string that describes alternative workarounds. Boolean error true if the obsolete element usage generates a compiler error; false if it generates a compiler warning. Properties | Improve this Doc View Source IsError Gets a Boolean value indicating whether the compiler will treat usage of the obsolete program element as an error. Declaration public bool IsError { get; } Property Value Type Description Boolean true if the obsolete element usage is considered an error; otherwise, false. The default is false. | Improve this Doc View Source Message Gets the workaround message, including a description of the alternative program elements. Declaration public string Message { get; } Property Value Type Description String The workaround text string. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.OutOfMemoryException.html": {
    "href": "api/System.OutOfMemoryException.html",
    "title": "Class OutOfMemoryException | nanoFramework Documentation",
    "keywords": "Class OutOfMemoryException The exception that is thrown when there is not enough memory to continue the execution of a program. Inheritance Object Exception SystemException OutOfMemoryException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class OutOfMemoryException : SystemException Constructors | Improve this Doc View Source OutOfMemoryException() Initializes a new instance of the OutOfMemoryException class. Declaration public OutOfMemoryException() | Improve this Doc View Source OutOfMemoryException(String) Initializes a new instance of the OutOfMemoryException class with a specified error message. Declaration public OutOfMemoryException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source OutOfMemoryException(String, Exception) Initializes a new instance of the OutOfMemoryException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public OutOfMemoryException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.ParamArrayAttribute.html": {
    "href": "api/System.ParamArrayAttribute.html",
    "title": "Class ParamArrayAttribute | nanoFramework Documentation",
    "keywords": "Class ParamArrayAttribute Indicates that a method will allow a variable number of arguments in its invocation. This class cannot be inherited. Inheritance Object Attribute ParamArrayAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public sealed class ParamArrayAttribute : Attribute Constructors | Improve this Doc View Source ParamArrayAttribute() Initializes a new instance of the ParamArrayAttribute class with default properties. Declaration public ParamArrayAttribute() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Random.html": {
    "href": "api/System.Random.html",
    "title": "Class Random | nanoFramework Documentation",
    "keywords": "Class Random Represents a random number generator, a device that produces a sequence of numbers that meet certain statistical requirements for randomness. Inheritance Object Random Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class Random Remarks Depending on the platform it can be a software dependent pseudo-random generator algorithm or a hardware random generator providing true random numbers. Constructors Random() Initializes a new instance of the Random class. If the provider is algorithm based the initialisation is performed using a time- dependent default seed value. Declaration public extern Random() Random(Int32) Initializes a new instance of the Random class, using the specified seed value. Declaration public extern Random(int seed) Parameters Type Name Description Int32 seed A number used to calculate a starting value for the pseudo-random number sequence. Methods Next() Returns a nonnegative random number. Declaration public extern virtual int Next() Returns Type Description Int32 A 32-bit signed integer greater than or equal to zero and less than MaxValue. Next(Int32) Returns a nonnegative random number less than the specified maximum. Declaration public extern virtual int Next(int maxValue) Parameters Type Name Description Int32 maxValue The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero. Returns Type Description Int32 A 32-bit signed integer greater than or equal to zero, and less than maxValue. NextBytes(Byte[]) Fills the elements of a specified array of bytes with random numbers. Declaration public extern virtual void NextBytes(byte[] buffer) Parameters Type Name Description Byte [] buffer An array of bytes to contain random numbers. NextDouble() Returns a random number between 0.0 and 1.0. Declaration public extern virtual double NextDouble() Returns Type Description Double A double-precision floating point number greater than or equal to 0.0, and less than 1.0. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.Assembly.html": {
    "href": "api/System.Reflection.Assembly.html",
    "title": "Class Assembly | nanoFramework Documentation",
    "keywords": "Class Assembly Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application. Inheritance Object Assembly Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public class Assembly Properties FullName Gets the display name of the assembly. Declaration public virtual string FullName { get; } Property Value Type Description String The display name of the assembly. Methods | Improve this Doc View Source GetAssembly(Type) Gets the currently loaded assembly in which the specified type is defined. Declaration public static Assembly GetAssembly(Type type) Parameters Type Name Description Type type An object representing a type in the assembly that will be returned. Returns Type Description Assembly The assembly in which the specified type is defined. GetExecutingAssembly() Gets the assembly that contains the code that is currently executing. Declaration public static extern Assembly GetExecutingAssembly() Returns Type Description Assembly The assembly that contains the code that is currently executing. | Improve this Doc View Source GetName() Gets an AssemblyName for this assembly. Declaration public AssemblyName GetName() Returns Type Description AssemblyName An object that contains the fully parsed display name for this assembly. | Improve this Doc View Source GetSatelliteAssembly(CultureInfo) Gets the satellite assembly for the specified culture. Declaration public Assembly GetSatelliteAssembly(CultureInfo culture) Parameters Type Name Description CultureInfo culture The specified culture. Returns Type Description Assembly The specified satellite assembly. Exceptions Type Condition ArgumentNullException culture is null. ArgumentException GetType(String) Gets the Type object with the specified name in the assembly instance. Declaration public extern virtual Type GetType(string name) Parameters Type Name Description String name The full name of the type. Returns Type Description Type An object that represents the specified class, or null if the class is not found. | Improve this Doc View Source GetType(String, Boolean) Gets the Type object with the specified name in the assembly instance and optionally throws an exception if the type is not found. Declaration public virtual Type GetType(string name, bool throwOnError) Parameters Type Name Description String name The full name of the type. Boolean throwOnError true to throw an exception if the type is not found; false to return null. Returns Type Description Type An object that represents the specified class. Exceptions Type Condition ArgumentException GetTypes() Gets the types defined in this assembly. Declaration public extern virtual Type[] GetTypes() Returns Type Description Type [] An array that contains all the types that are defined in this assembly. Load(Byte[]) Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller. Declaration public static extern Assembly Load(byte[] rawAssembly) Parameters Type Name Description Byte [] rawAssembly A byte array that is a COFF-based image containing an emitted assembly. Returns Type Description Assembly The loaded assembly. Exceptions Type Condition ArgumentException rawAssembly is not a valid assembly. | Improve this Doc View Source Load(String) Loads an assembly given the long form of its name. Declaration public static Assembly Load(string assemblyString) Parameters Type Name Description String assemblyString The long form of the assembly name. Returns Type Description Assembly The loaded assembly. Exceptions Type Condition ArgumentNullException assemblyString is null. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyCompanyAttribute.html": {
    "href": "api/System.Reflection.AssemblyCompanyAttribute.html",
    "title": "Class AssemblyCompanyAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyCompanyAttribute Defines a company name custom attribute for an assembly manifest. Inheritance Object Attribute AssemblyCompanyAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyCompanyAttribute : Attribute Constructors | Improve this Doc View Source AssemblyCompanyAttribute(String) Initializes a new instance of the AssemblyCompanyAttribute class. Declaration public AssemblyCompanyAttribute(string company) Parameters Type Name Description String company The company name information. Properties | Improve this Doc View Source Company Gets company name information. Declaration public string Company { get; } Property Value Type Description String A string containing the company name. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyConfigurationAttribute.html": {
    "href": "api/System.Reflection.AssemblyConfigurationAttribute.html",
    "title": "Class AssemblyConfigurationAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyConfigurationAttribute Specifies the build configuration, such as retail or debug, for an assembly. Inheritance Object Attribute AssemblyConfigurationAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyConfigurationAttribute : Attribute Constructors | Improve this Doc View Source AssemblyConfigurationAttribute(String) Initializes a new instance of the AssemblyConfigurationAttribute class. Declaration public AssemblyConfigurationAttribute(string configuration) Parameters Type Name Description String configuration The assembly configuration. Properties | Improve this Doc View Source Configuration Gets assembly configuration information. Declaration public string Configuration { get; } Property Value Type Description String A string containing the assembly configuration information. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyCopyrightAttribute.html": {
    "href": "api/System.Reflection.AssemblyCopyrightAttribute.html",
    "title": "Class AssemblyCopyrightAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyCopyrightAttribute Defines a copyright custom attribute for an assembly manifest. Inheritance Object Attribute AssemblyCopyrightAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyCopyrightAttribute : Attribute Constructors | Improve this Doc View Source AssemblyCopyrightAttribute(String) Initializes a new instance of the AssemblyCopyrightAttribute class. Declaration public AssemblyCopyrightAttribute(string copyright) Parameters Type Name Description String copyright The copyright information. Properties | Improve this Doc View Source Copyright Gets copyright information. Declaration public string Copyright { get; } Property Value Type Description String A string containing the copyright information. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyCultureAttribute.html": {
    "href": "api/System.Reflection.AssemblyCultureAttribute.html",
    "title": "Class AssemblyCultureAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyCultureAttribute Specifies which culture the assembly supports. Inheritance Object Attribute AssemblyCultureAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyCultureAttribute : Attribute Constructors | Improve this Doc View Source AssemblyCultureAttribute(String) Initializes a new instance of the AssemblyCultureAttribute class with the culture supported by the assembly being attributed. Declaration public AssemblyCultureAttribute(string culture) Parameters Type Name Description String culture The culture supported by the attributed assembly. Properties | Improve this Doc View Source Culture Gets the supported culture of the attributed assembly. Declaration public string Culture { get; } Property Value Type Description String A string containing the name of the supported culture. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyDefaultAliasAttribute.html": {
    "href": "api/System.Reflection.AssemblyDefaultAliasAttribute.html",
    "title": "Class AssemblyDefaultAliasAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyDefaultAliasAttribute Defines a friendly default alias for an assembly manifest. Inheritance Object Attribute AssemblyDefaultAliasAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyDefaultAliasAttribute : Attribute Constructors | Improve this Doc View Source AssemblyDefaultAliasAttribute(String) Initializes a new instance of the AssemblyDefaultAliasAttribute class. Declaration public AssemblyDefaultAliasAttribute(string defaultAlias) Parameters Type Name Description String defaultAlias The assembly default alias information. Properties | Improve this Doc View Source DefaultAlias Gets default alias information. Declaration public string DefaultAlias { get; } Property Value Type Description String A string containing the default alias information. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyDelaySignAttribute.html": {
    "href": "api/System.Reflection.AssemblyDelaySignAttribute.html",
    "title": "Class AssemblyDelaySignAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyDelaySignAttribute Specifies that the assembly is not fully signed when created. Inheritance Object Attribute AssemblyDelaySignAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyDelaySignAttribute : Attribute Constructors | Improve this Doc View Source AssemblyDelaySignAttribute(Boolean) Initializes a new instance of the AssemblyDelaySignAttribute class. Declaration public AssemblyDelaySignAttribute(bool delaySign) Parameters Type Name Description Boolean delaySign true if the feature this attribute represents is activated; otherwise, false. Properties | Improve this Doc View Source DelaySign Gets a value indicating the state of the attribute. Declaration public bool DelaySign { get; } Property Value Type Description Boolean true if this assembly has been built as delay-signed; otherwise, false. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyDescriptionAttribute.html": {
    "href": "api/System.Reflection.AssemblyDescriptionAttribute.html",
    "title": "Class AssemblyDescriptionAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyDescriptionAttribute Provides a text description for an assembly. Inheritance Object Attribute AssemblyDescriptionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyDescriptionAttribute : Attribute Constructors | Improve this Doc View Source AssemblyDescriptionAttribute(String) Initializes a new instance of the AssemblyDescriptionAttribute class. Declaration public AssemblyDescriptionAttribute(string description) Parameters Type Name Description String description The assembly description. Properties | Improve this Doc View Source Description Gets assembly description information. Declaration public string Description { get; } Property Value Type Description String A string containing the assembly description. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyFileVersionAttribute.html": {
    "href": "api/System.Reflection.AssemblyFileVersionAttribute.html",
    "title": "Class AssemblyFileVersionAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyFileVersionAttribute Instructs a compiler to use a specific version number for the Win32 file version resource. The Win32 file version is not required to be the same as the assembly's version number. Inheritance Object Attribute AssemblyFileVersionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyFileVersionAttribute : Attribute Constructors | Improve this Doc View Source AssemblyFileVersionAttribute(String) Initializes a new instance of the AssemblyFileVersionAttribute class, specifying the file version. Declaration public AssemblyFileVersionAttribute(string version) Parameters Type Name Description String version The file version. Exceptions Type Condition ArgumentNullException version is null Properties | Improve this Doc View Source Version Gets the Win32 file version resource name. Declaration public string Version { get; } Property Value Type Description String A string containing the file version resource name. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyFlagsAttribute.html": {
    "href": "api/System.Reflection.AssemblyFlagsAttribute.html",
    "title": "Class AssemblyFlagsAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyFlagsAttribute Specifies a bitwise combination of AssemblyNameFlags flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited. Inheritance Object Attribute AssemblyFlagsAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyFlagsAttribute : Attribute Remarks Available only in mscorlib build with support for System.Reflection. Constructors | Improve this Doc View Source AssemblyFlagsAttribute(AssemblyNameFlags) Initializes a new instance of the AssemblyFlagsAttribute class with the specified combination of AssemblyNameFlags flags. Declaration public AssemblyFlagsAttribute(AssemblyNameFlags assemblyFlags) Parameters Type Name Description AssemblyNameFlags assemblyFlags A bitwise combination of AssemblyNameFlags flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key. | Improve this Doc View Source AssemblyFlagsAttribute(UInt32) Note: This API is now obsolete. Initializes a new instance of the AssemblyFlagsAttribute class with the specified combination of AssemblyNameFlags flags, cast as an unsigned integer value. Declaration [CLSCompliant(false)] public AssemblyFlagsAttribute(uint flags) Parameters Type Name Description UInt32 flags A bitwise combination of AssemblyNameFlags flags, cast as an unsigned integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key. Properties | Improve this Doc View Source Flags Note: This API is now obsolete. Gets an unsigned integer value representing the combination of AssemblyNameFlags flags specified when this attribute instance was created. Declaration [CLSCompliant(false)] public uint Flags { get; } Property Value Type Description UInt32 An unsigned integer value representing a bitwise combination of AssemblyNameFlags flags. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyInformationalVersionAttribute.html": {
    "href": "api/System.Reflection.AssemblyInformationalVersionAttribute.html",
    "title": "Class AssemblyInformationalVersionAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyInformationalVersionAttribute Defines additional version information for an assembly manifest. Inheritance Object Attribute AssemblyInformationalVersionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyInformationalVersionAttribute : Attribute Constructors | Improve this Doc View Source AssemblyInformationalVersionAttribute(String) Initializes a new instance of the AssemblyInformationalVersionAttribute class. Declaration public AssemblyInformationalVersionAttribute(string informationalVersion) Parameters Type Name Description String informationalVersion The assembly version information. Properties | Improve this Doc View Source InformationalVersion Gets version information. Declaration public string InformationalVersion { get; } Property Value Type Description String A string containing the version information. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyKeyFileAttribute.html": {
    "href": "api/System.Reflection.AssemblyKeyFileAttribute.html",
    "title": "Class AssemblyKeyFileAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyKeyFileAttribute Specifies the name of a file containing the key pair used to generate a strong name. Inheritance Object Attribute AssemblyKeyFileAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyKeyFileAttribute : Attribute Constructors | Improve this Doc View Source AssemblyKeyFileAttribute(String) Initializes a new instance of the AssemblyKeyFileAttribute class with the name of the file containing the key pair to generate a strong name for the assembly being attributed. Declaration public AssemblyKeyFileAttribute(string keyFile) Parameters Type Name Description String keyFile The name of the file containing the key pair. Properties | Improve this Doc View Source KeyFile Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly. Declaration public string KeyFile { get; } Property Value Type Description String A string containing the name of the file that contains the key pair. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyKeyNameAttribute.html": {
    "href": "api/System.Reflection.AssemblyKeyNameAttribute.html",
    "title": "Class AssemblyKeyNameAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyKeyNameAttribute Specifies the name of a key container within the CSP containing the key pair used to generate a strong name. Inheritance Object Attribute AssemblyKeyNameAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyKeyNameAttribute : Attribute Constructors | Improve this Doc View Source AssemblyKeyNameAttribute(String) Initializes a new instance of the AssemblyKeyNameAttribute class with the name of the container holding the key pair used to generate a strong name for the assembly being attributed. Declaration public AssemblyKeyNameAttribute(string keyName) Parameters Type Name Description String keyName The name of the container containing the key pair. Properties | Improve this Doc View Source KeyName Gets the name of the container having the key pair that is used to generate a strong name for the attributed assembly. Declaration public string KeyName { get; } Property Value Type Description String A string containing the name of the container that has the relevant key pair. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyName.html": {
    "href": "api/System.Reflection.AssemblyName.html",
    "title": "Class AssemblyName | nanoFramework Documentation",
    "keywords": "Class AssemblyName Describes an assembly's unique identity in full. Inheritance Object AssemblyName Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public sealed class AssemblyName Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source FullName Gets the full name of the assembly, also known as the display name. Declaration public string FullName { get; } Property Value Type Description String A string that is the full name of the assembly, also known as the display name. | Improve this Doc View Source Name Gets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension. Declaration public string Name { get; } Property Value Type Description String The simple name of the assembly. | Improve this Doc View Source Version Gets or sets the major, minor, build, and revision numbers of the assembly. Declaration public Version Version { get; } Property Value Type Description Version An object that represents the major, minor, build, and revision numbers of the assembly. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyNameFlags.html": {
    "href": "api/System.Reflection.AssemblyNameFlags.html",
    "title": "Enum AssemblyNameFlags | nanoFramework Documentation",
    "keywords": "Enum AssemblyNameFlags Provides information about an Assembly reference. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public enum AssemblyNameFlags Remarks Available only in mscorlib build with support for System.Reflection. Fields Name Description EnableJITcompileOptimizer Specifies that just-in-time (JIT) compiler optimization is disabled for the assembly. This is the exact opposite of the meaning that is suggested by the member name. EnableJITcompileTracking Specifies that just-in-time (JIT) compiler tracking is enabled for the assembly. None Specifies that no flags are in effect. PublicKey Specifies that a public key is formed from the full public key rather than the public key token. Retargetable Specifies that the assembly can be retargeted at runtime to an assembly from a different publisher. This value supports the .NET Framework infrastructure and is not intended to be used directly from your code."
  },
  "api/System.Reflection.AssemblyNativeVersionAttribute.html": {
    "href": "api/System.Reflection.AssemblyNativeVersionAttribute.html",
    "title": "Class AssemblyNativeVersionAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyNativeVersionAttribute Defines the required native version required for an assembly. At deploy time this is used to check if the target device has the correct native version to support this assembly. Inheritance Object Attribute AssemblyNativeVersionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = false)] public sealed class AssemblyNativeVersionAttribute : Attribute Remarks This attribute is specific of nanoFramework. Constructors | Improve this Doc View Source AssemblyNativeVersionAttribute(String) Initializes a new instance of the AssemblyNativeVersionAttribute class. Declaration public AssemblyNativeVersionAttribute(string version) Parameters Type Name Description String version The native version required for the assembly. Properties | Improve this Doc View Source NativeVersion Gets the native version required for the assembly. Declaration public string NativeVersion { get; } Property Value Type Description String A string containing the native version. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyProductAttribute.html": {
    "href": "api/System.Reflection.AssemblyProductAttribute.html",
    "title": "Class AssemblyProductAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyProductAttribute Defines a product name custom attribute for an assembly manifest. Inheritance Object Attribute AssemblyProductAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyProductAttribute : Attribute Constructors | Improve this Doc View Source AssemblyProductAttribute(String) Initializes a new instance of the AssemblyProductAttribute class. Declaration public AssemblyProductAttribute(string product) Parameters Type Name Description String product The product name information. Properties | Improve this Doc View Source Product Gets product name information. Declaration public string Product { get; } Property Value Type Description String A string containing the product name. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyTitleAttribute.html": {
    "href": "api/System.Reflection.AssemblyTitleAttribute.html",
    "title": "Class AssemblyTitleAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyTitleAttribute Specifies a description for an assembly. Inheritance Object Attribute AssemblyTitleAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyTitleAttribute : Attribute Constructors | Improve this Doc View Source AssemblyTitleAttribute(String) Initializes a new instance of the AssemblyTitleAttribute class. Declaration public AssemblyTitleAttribute(string title) Parameters Type Name Description String title The assembly title. Properties | Improve this Doc View Source Title Gets assembly title information. Declaration public string Title { get; } Property Value Type Description String The assembly title. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyTrademarkAttribute.html": {
    "href": "api/System.Reflection.AssemblyTrademarkAttribute.html",
    "title": "Class AssemblyTrademarkAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyTrademarkAttribute Defines a trademark custom attribute for an assembly manifest. Inheritance Object Attribute AssemblyTrademarkAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyTrademarkAttribute : Attribute Constructors | Improve this Doc View Source AssemblyTrademarkAttribute(String) Initializes a new instance of the AssemblyTrademarkAttribute class. Declaration public AssemblyTrademarkAttribute(string trademark) Parameters Type Name Description String trademark The trademark information. Properties | Improve this Doc View Source Trademark Gets trademark information. Declaration public string Trademark { get; } Property Value Type Description String A String containing trademark information. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.AssemblyVersionAttribute.html": {
    "href": "api/System.Reflection.AssemblyVersionAttribute.html",
    "title": "Class AssemblyVersionAttribute | nanoFramework Documentation",
    "keywords": "Class AssemblyVersionAttribute Specifies the version of the assembly being attributed. Inheritance Object Attribute AssemblyVersionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class AssemblyVersionAttribute : Attribute Constructors | Improve this Doc View Source AssemblyVersionAttribute(String) Initializes a new instance of the AssemblyVersionAttribute class with the version number of the assembly being attributed. Declaration public AssemblyVersionAttribute(string version) Parameters Type Name Description String version The version number of the attributed assembly. Properties | Improve this Doc View Source Version Gets the version number of the attributed assembly. Declaration public string Version { get; } Property Value Type Description String A string containing the assembly version number. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.Binder.html": {
    "href": "api/System.Reflection.Binder.html",
    "title": "Class Binder | nanoFramework Documentation",
    "keywords": "Class Binder Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type. Inheritance Object Binder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class Binder Remarks Available only in mscorlib build with support for System.Reflection. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.BindingFlags.html": {
    "href": "api/System.Reflection.BindingFlags.html",
    "title": "Enum BindingFlags | nanoFramework Documentation",
    "keywords": "Enum BindingFlags Specifies flags that control binding and the way in which the search for members and types is conducted by reflection. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public enum BindingFlags Remarks Available only in mscorlib build with support for System.Reflection. Fields Name Description CreateInstance Specifies that reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer. This flag is passed to an InvokeMember method to invoke a constructor. DeclaredOnly Specifies that only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered. Default Specifies that no binding flags are defined. ExactBinding Specifies that types of the supplied arguments must exactly match the types of the corresponding formal parameters. Reflection throws an exception if the caller supplies a non-null Binder object, since that implies that the caller is supplying BindToXXX implementations that will pick the appropriate method. FlattenHierarchy Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned. GetField Specifies that the value of the specified field should be returned. This flag is passed to an InvokeMember method to get a field value. GetProperty Specifies that the value of the specified property should be returned. This flag is passed to an InvokeMember method to invoke a property getter. IgnoreCase Specifies that the case of the member name should not be considered when binding. IgnoreReturn Used in COM interop to specify that the return value of the member can be ignored. Instance Specifies that instance members are to be included in the search. InvokeMethod Specifies that a method is to be invoked. This must not be a constructor or a type initializer. This flag is passed to an InvokeMember method to invoke a method. NonPublic Specifies that non-public members are to be included in the search. OptionalParamBinding Returns the set of members whose parameter count matches the number of supplied arguments. This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs). This flag should only be used with Type.InvokeMember. Public Specifies that public members are to be included in the search. PutDispProperty Specifies that the PROPPUT member on a COM object should be invoked. PROPPUT specifies a property-setting function that uses a value. Use PutDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called. PutRefDispProperty Specifies that the PROPPUTREF member on a COM object should be invoked. PROPPUTREF specifies a property-setting function that uses a reference instead of a value. Use PutRefDispProperty if a property has both PROPPUT and PROPPUTREF and you need to distinguish which one is called. SetField Specifies that the value of the specified field should be set. This flag is passed to an InvokeMember method to set a field value. SetProperty Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying PutDispProperty and PutRefDispProperty. This flag is passed to an InvokeMember method to invoke a property setter. Static Specifies that static members are to be included in the search. SuppressChangeType Not implemented."
  },
  "api/System.Reflection.ConstructorInfo.html": {
    "href": "api/System.Reflection.ConstructorInfo.html",
    "title": "Class ConstructorInfo | nanoFramework Documentation",
    "keywords": "Class ConstructorInfo Discovers the attributes of a class constructor and provides access to constructor metadata. Inheritance Object MemberInfo MethodBase ConstructorInfo Inherited Members MethodBase.IsPublic MethodBase.IsStatic MethodBase.IsFinal MethodBase.IsVirtual MethodBase.IsAbstract MethodBase.Invoke(Object, Object[]) MethodBase.Name MethodBase.DeclaringType Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class ConstructorInfo : MethodBase Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source MemberType Gets a MemberTypes value indicating that this member is a constructor. Declaration public override MemberTypes MemberType { get; } Property Value Type Description MemberTypes A MemberTypes value indicating that this member is a constructor. Overrides MemberInfo.MemberType Methods GetCustomAttributes(Boolean) When overridden in a derived class, returns an array of all custom attributes applied to this member. Declaration public extern override object[] GetCustomAttributes(bool inherit) Parameters Type Name Description Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events. Returns Type Description Object [] An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. Overrides MemberInfo.GetCustomAttributes(Boolean) Remarks This method is not implemented in nanoFramework. Exceptions Type Condition NotImplementedException Invoke(Object[]) Invokes the constructor reflected by the instance that has the specified parameters, providing default values for the parameters not commonly used. Declaration public extern object Invoke(object[] parameters) Parameters Type Name Description Object [] parameters An array of values that matches the number, order and type (under the constraints of the default binder) of the parameters for this constructor. If this constructor takes no parameters, then use either an array with zero elements or null, as in Object[] parameters = new Object[0]. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. Returns Type Description Object An instance of the class associated with the constructor. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.DefaultMemberAttribute.html": {
    "href": "api/System.Reflection.DefaultMemberAttribute.html",
    "title": "Class DefaultMemberAttribute | nanoFramework Documentation",
    "keywords": "Class DefaultMemberAttribute Defines the member of a type that is the default member used by InvokeMember. Inheritance Object Attribute DefaultMemberAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface)] public sealed class DefaultMemberAttribute : Attribute Remarks Available only in mscorlib build with support for System.Reflection. Constructors | Improve this Doc View Source DefaultMemberAttribute(String) Initializes a new instance of the DefaultMemberAttribute class. Declaration public DefaultMemberAttribute(string memberName) Parameters Type Name Description String memberName A String containing the name of the member to invoke. This may be a constructor, method, property, or field. A suitable invocation attribute must be specified when the member is invoked. The default member of a class can be specified by passing an empty String as the name of the member. Properties | Improve this Doc View Source MemberName Gets the name from the attribute. Declaration public string MemberName { get; } Property Value Type Description String A string representing the member name. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.FieldInfo.html": {
    "href": "api/System.Reflection.FieldInfo.html",
    "title": "Class FieldInfo | nanoFramework Documentation",
    "keywords": "Class FieldInfo Discovers the attributes of a field and provides access to field metadata. Inheritance Object MemberInfo FieldInfo Inherited Members MemberInfo.Name MemberInfo.DeclaringType Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class FieldInfo : MemberInfo Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source FieldType Gets the type of this field object. Declaration public abstract Type FieldType { get; } Property Value Type Description Type The type of this field object. | Improve this Doc View Source MemberType Gets a MemberTypes value indicating that this member is a field. Declaration public override MemberTypes MemberType { get; } Property Value Type Description MemberTypes A MemberTypes value indicating that this member is a field. Overrides MemberInfo.MemberType Methods | Improve this Doc View Source GetCustomAttributes(Boolean) When overridden in a derived class, returns an array of all custom attributes applied to this member. Declaration public override object[] GetCustomAttributes(bool inherit) Parameters Type Name Description Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . This parameter is ignored for properties and events. Returns Type Description Object [] An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. Overrides MemberInfo.GetCustomAttributes(Boolean) Remarks This method ignores the inherit parameter for properties and events. | Improve this Doc View Source GetValue(Object) When overridden in a derived class, returns the value of a field supported by a given object. Declaration public abstract object GetValue(object obj) Parameters Type Name Description Object obj The object whose field value will be returned. Returns Type Description Object An object containing the value of the field reflected by this instance. SetValue(Object, Object) Sets the value of the field supported by the given object. Declaration public extern virtual void SetValue(object obj, object value) Parameters Type Name Description Object obj The object whose field value will be set. Object value The value to assign to the field. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.html": {
    "href": "api/System.Reflection.html",
    "title": "Namespace System.Reflection | nanoFramework Documentation",
    "keywords": "Namespace System.Reflection Classes Assembly Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application. AssemblyCompanyAttribute Defines a company name custom attribute for an assembly manifest. AssemblyConfigurationAttribute Specifies the build configuration, such as retail or debug, for an assembly. AssemblyCopyrightAttribute Defines a copyright custom attribute for an assembly manifest. AssemblyCultureAttribute Specifies which culture the assembly supports. AssemblyDefaultAliasAttribute Defines a friendly default alias for an assembly manifest. AssemblyDelaySignAttribute Specifies that the assembly is not fully signed when created. AssemblyDescriptionAttribute Provides a text description for an assembly. AssemblyFileVersionAttribute Instructs a compiler to use a specific version number for the Win32 file version resource. The Win32 file version is not required to be the same as the assembly's version number. AssemblyFlagsAttribute Specifies a bitwise combination of AssemblyNameFlags flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited. AssemblyInformationalVersionAttribute Defines additional version information for an assembly manifest. AssemblyKeyFileAttribute Specifies the name of a file containing the key pair used to generate a strong name. AssemblyKeyNameAttribute Specifies the name of a key container within the CSP containing the key pair used to generate a strong name. AssemblyName Describes an assembly's unique identity in full. AssemblyNativeVersionAttribute Defines the required native version required for an assembly. At deploy time this is used to check if the target device has the correct native version to support this assembly. AssemblyProductAttribute Defines a product name custom attribute for an assembly manifest. AssemblyTitleAttribute Specifies a description for an assembly. AssemblyTrademarkAttribute Defines a trademark custom attribute for an assembly manifest. AssemblyVersionAttribute Specifies the version of the assembly being attributed. Binder Selects a member from a list of candidates, and performs type conversion from actual argument type to formal argument type. ConstructorInfo Discovers the attributes of a class constructor and provides access to constructor metadata. DefaultMemberAttribute Defines the member of a type that is the default member used by InvokeMember. FieldInfo Discovers the attributes of a field and provides access to field metadata. MemberInfo Obtains information about the attributes of a member and provides access to member metadata. MethodBase Provides information about methods and constructors. MethodInfo Discovers the attributes of a method and provides access to method metadata. PropertyInfo Discovers the attributes of a property and provides access to property metadata. Interfaces IReflect Interoperates with the IDispatch interface. Enums AssemblyNameFlags Provides information about an Assembly reference. BindingFlags Specifies flags that control binding and the way in which the search for members and types is conducted by reflection. MemberTypes Marks each type of member that is defined as a derived class of MemberInfo. MethodImplAttributes Specifies flags for the attributes of a method implementation. ProcessorArchitecture Identifies the processor and bits-per-word of the platform targeted by an executable."
  },
  "api/System.Reflection.IReflect.html": {
    "href": "api/System.Reflection.IReflect.html",
    "title": "Interface IReflect | nanoFramework Documentation",
    "keywords": "Interface IReflect Interoperates with the IDispatch interface. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public interface IReflect Remarks Available only in mscorlib build with support for System.Reflection. Methods | Improve this Doc View Source GetField(String, BindingFlags) Returns the FieldInfo object that corresponds to the specified field and binding flag. Declaration FieldInfo GetField(string name, BindingFlags bindingAttr) Parameters Type Name Description String name The name of the field to find. BindingFlags bindingAttr The binding attributes used to control the search. Returns Type Description FieldInfo A FieldInfo object containing the field information for the named object that meets the search constraints specified in bindingAttr. | Improve this Doc View Source GetMethod(String, BindingFlags) Retrieves a MethodInfo object that corresponds to a specified method under specified search constraints. Declaration MethodInfo GetMethod(string name, BindingFlags bindingAttr) Parameters Type Name Description String name The name of the member to find. BindingFlags bindingAttr The binding attributes used to control the search. Returns Type Description MethodInfo A MethodInfo object containing the method information, with the match being based on the method name and search constraints specified in bindingAttr. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.MemberInfo.html": {
    "href": "api/System.Reflection.MemberInfo.html",
    "title": "Class MemberInfo | nanoFramework Documentation",
    "keywords": "Class MemberInfo Obtains information about the attributes of a member and provides access to member metadata. Inheritance Object MemberInfo FieldInfo MethodBase PropertyInfo Type Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class MemberInfo Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source DeclaringType Gets the class that declares this member. Declaration public abstract Type DeclaringType { get; } Property Value Type Description Type The Type object for the class that declares this member. | Improve this Doc View Source MemberType When overridden in a derived class, gets a MemberTypes value indicating the type of the member method, constructor, event, and so on. Declaration public abstract MemberTypes MemberType { get; } Property Value Type Description MemberTypes A MemberTypes value indicating the type of member. | Improve this Doc View Source Name Gets the name of the current member. Declaration public abstract string Name { get; } Property Value Type Description String A String containing the name of this member. Methods | Improve this Doc View Source GetCustomAttributes(Boolean) When overridden in a derived class, returns an array of all custom attributes applied to this member. Declaration public abstract object[] GetCustomAttributes(bool inherit) Parameters Type Name Description Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events. Returns Type Description Object [] An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.MemberTypes.html": {
    "href": "api/System.Reflection.MemberTypes.html",
    "title": "Enum MemberTypes | nanoFramework Documentation",
    "keywords": "Enum MemberTypes Marks each type of member that is defined as a derived class of MemberInfo. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public enum MemberTypes Remarks Available only in mscorlib build with support for System.Reflection. Fields Name Description All Specifies all member types. Constructor Specifies that the member is a constructor Custom Specifies that the member is a custom member type Event Specifies that the member is an event Field Specifies that the member is a field Method Specifies that the member is a method NestedType Specifies that the member is a nested type Property Specifies that the member is a property TypeInfo Specifies that the member is a type"
  },
  "api/System.Reflection.MethodBase.html": {
    "href": "api/System.Reflection.MethodBase.html",
    "title": "Class MethodBase | nanoFramework Documentation",
    "keywords": "Class MethodBase Provides information about methods and constructors. Inheritance Object MemberInfo MethodBase ConstructorInfo MethodInfo Inherited Members MemberInfo.MemberType MemberInfo.GetCustomAttributes(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class MethodBase : MemberInfo Remarks Available only in mscorlib build with support for System.Reflection. Properties DeclaringType Gets the class that declares this member. Declaration public override Type DeclaringType { get; } Property Value Type Description Type The Type object for the class that declares this member. Overrides MemberInfo.DeclaringType IsAbstract Gets a value indicating whether the method is abstract Declaration public bool IsAbstract { get; } Property Value Type Description Boolean true if this method is abstract; otherwise, false. IsFinal GGets a value indicating whether the method is final. Declaration public bool IsFinal { get; } Property Value Type Description Boolean true if this method is final; otherwise, false. IsPublic Gets a value indicating whether this is a public method. Declaration public bool IsPublic { get; } Property Value Type Description Boolean true if this method is public; otherwise, false. IsStatic Gets a value indicating whether the method is static. Declaration public bool IsStatic { get; } Property Value Type Description Boolean true if this method is static; otherwise, false. IsVirtual Gets a value indicating whether the method is virtual Declaration public bool IsVirtual { get; } Property Value Type Description Boolean true if this method is virtual; otherwise, false. Name Gets the name of the current member. Declaration public override string Name { get; } Property Value Type Description String A String containing the name of this member. Overrides MemberInfo.Name Methods Invoke(Object, Object[]) Invokes the method or constructor represented by the current instance, using the specified parameters. Declaration public extern object Invoke(object obj, object[] parameters) Parameters Type Name Description Object obj The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor. Object [] parameters An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, parameters should be null. Returns Type Description Object An object containing the return value of the invoked method, or null in the case of a constructor. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.MethodImplAttributes.html": {
    "href": "api/System.Reflection.MethodImplAttributes.html",
    "title": "Enum MethodImplAttributes | nanoFramework Documentation",
    "keywords": "Enum MethodImplAttributes Specifies flags for the attributes of a method implementation. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public enum MethodImplAttributes Fields Name Description CodeTypeMask This API supports the product infrastructure and is not intended to be used directly from your code. Specifies flags about code type. ForwardRef This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is not defined. IL This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in Microsoft intermediate language (MSIL). InternalCall This API supports the product infrastructure and is not intended to be used directly from your code. Specifies an internal call. Managed This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is implemented in managed code. ManagedMask This API supports the product infrastructure and is not intended to be used directly from your code. Specifies whether the method is implemented in managed or unmanaged code. MaxMethodImplVal This API supports the product infrastructure and is not intended to be used directly from your code. Specifies a range check value. Native This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is native. NoInlining This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method cannot be inlined. OPTIL This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in Optimized Intermediate Language (OPTIL). PreserveSig This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method signature is exported exactly as declared. Runtime This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is provided by the runtime. Synchronized This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is single-threaded through the body. Static methods (Shared in Visual Basic) lock on the type, whereas instance methods lock on the instance. You can also use the C# lock statement or the Visual Basic SyncLock statement for this purpose. Unmanaged This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is implemented in unmanaged code."
  },
  "api/System.Reflection.MethodInfo.html": {
    "href": "api/System.Reflection.MethodInfo.html",
    "title": "Class MethodInfo | nanoFramework Documentation",
    "keywords": "Class MethodInfo Discovers the attributes of a method and provides access to method metadata. Inheritance Object MemberInfo MethodBase MethodInfo Inherited Members MethodBase.IsPublic MethodBase.IsStatic MethodBase.IsFinal MethodBase.IsVirtual MethodBase.IsAbstract MethodBase.Invoke(Object, Object[]) MethodBase.Name MethodBase.DeclaringType MemberInfo.GetCustomAttributes(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class MethodInfo : MethodBase Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source MemberType Gets a MemberTypes value indicating that this member is a method. Declaration public override MemberTypes MemberType { get; } Property Value Type Description MemberTypes A MemberTypes value indicating that this member is a method. Overrides MemberInfo.MemberType | Improve this Doc View Source ReturnType Gets the return type of this method. Declaration public abstract Type ReturnType { get; } Property Value Type Description Type The return type of this method. Remarks To get the return type property, first get the class Type. From the Type, get the MethodInfo. From the MethodInfo, get the ReturnType. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Reflection.ProcessorArchitecture.html": {
    "href": "api/System.Reflection.ProcessorArchitecture.html",
    "title": "Enum ProcessorArchitecture | nanoFramework Documentation",
    "keywords": "Enum ProcessorArchitecture Identifies the processor and bits-per-word of the platform targeted by an executable. Namespace : System.Reflection Assembly : mscorlib.dll Syntax public enum ProcessorArchitecture Fields Name Description Amd64 A 64-bit AMD processor only. IA64 A 64-bit Intel processor only. MSIL Neutral with respect to processor and bits-per-word. None An unknown or unspecified combination of processor and bits-per-word. X86 A 32-bit Intel processor, either native or in the Windows on Windows environment on a 64-bit platform (WOW64)."
  },
  "api/System.Reflection.PropertyInfo.html": {
    "href": "api/System.Reflection.PropertyInfo.html",
    "title": "Class PropertyInfo | nanoFramework Documentation",
    "keywords": "Class PropertyInfo Discovers the attributes of a property and provides access to property metadata. Inheritance Object MemberInfo PropertyInfo Inherited Members MemberInfo.MemberType MemberInfo.Name MemberInfo.DeclaringType MemberInfo.GetCustomAttributes(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Reflection Assembly : mscorlib.dll Syntax public abstract class PropertyInfo : MemberInfo Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source PropertyType Gets the type of this property. Declaration public abstract Type PropertyType { get; } Property Value Type Description Type The type of this property. Methods GetValue(Object, Object[]) Returns the property value of a specified object with optional index values for indexed properties. Declaration public extern virtual object GetValue(object obj, object[] index) Parameters Type Name Description Object obj The object whose property value will be returned. Object [] index Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be null for non-indexed properties. Returns Type Description Object The property value of the specified object. SetValue(Object, Object, Object[]) Sets the property value of a specified object with optional index values for index properties. Declaration public extern virtual void SetValue(object obj, object value, object[] index) Parameters Type Name Description Object obj The object whose property value will be set. Object value The new property value. Object [] index Optional index values for indexed properties. This value should be null for non-indexed properties. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Resources.html": {
    "href": "api/System.Resources.html",
    "title": "Namespace System.Resources | nanoFramework Documentation",
    "keywords": "Namespace System.Resources Classes ResourceManager Represents a resource manager that provides convenient access to culture-specific resources at run time."
  },
  "api/System.Resources.ResourceManager.html": {
    "href": "api/System.Resources.ResourceManager.html",
    "title": "Class ResourceManager | nanoFramework Documentation",
    "keywords": "Class ResourceManager Represents a resource manager that provides convenient access to culture-specific resources at run time. Inheritance Object ResourceManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Resources Assembly : nanoFramework.ResourceManager.dll Syntax public class ResourceManager Constructors | Improve this Doc View Source ResourceManager(String, Assembly) Initializes a new instance of the ResourceManager class that looks up resources contained in files with the specified root name in the given assembly. Declaration public ResourceManager(string baseName, Assembly assembly) Parameters Type Name Description String baseName The root name of the resource file without its extension but including any fully qualified namespace name. For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource. Assembly assembly The main assembly for the resources. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.html",
    "title": "Class AccessedThroughPropertyAttribute | nanoFramework Documentation",
    "keywords": "Class AccessedThroughPropertyAttribute Specifies the name of the property that accesses the attributed field. Inheritance Object Attribute AccessedThroughPropertyAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Field)] public sealed class AccessedThroughPropertyAttribute : Attribute Constructors | Improve this Doc View Source AccessedThroughPropertyAttribute(String) Initializes a new instance of the AccessedThroughPropertyAttribute class with the name of the property used to access the attributed field. Declaration public AccessedThroughPropertyAttribute(string propertyName) Parameters Type Name Description String propertyName The name of the property used to access the attributed field. Properties | Improve this Doc View Source PropertyName Gets the name of the property used to access the attributed field. Declaration public string PropertyName { get; } Property Value Type Description String The name of the property used to access the attributed field. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Runtime.CompilerServices.ExtensionAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.ExtensionAttribute.html",
    "title": "Class ExtensionAttribute | nanoFramework Documentation",
    "keywords": "Class ExtensionAttribute Indicates that a method is an extension method, or that a class or assembly contains extension methods. Inheritance Object Attribute ExtensionAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Method)] public sealed class ExtensionAttribute : Attribute Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Runtime.CompilerServices.html": {
    "href": "api/System.Runtime.CompilerServices.html",
    "title": "Namespace System.Runtime.CompilerServices | nanoFramework Documentation",
    "keywords": "Namespace System.Runtime.CompilerServices Classes AccessedThroughPropertyAttribute Specifies the name of the property that accesses the attributed field. ExtensionAttribute Indicates that a method is an extension method, or that a class or assembly contains extension methods. IndexerNameAttribute Indicates the name by which an indexer is known in programming languages that do not support indexers directly. InternalsVisibleToAttribute Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly. MethodImplAttribute Specifies the details of how a method is implemented. This class cannot be inherited. RuntimeHelpers Provides a set of static methods and properties that provide support for compilers. This class cannot be inherited. Enums MethodCodeType Defines how a method is implemented. MethodImplOptions Defines the details of how a method is implemented."
  },
  "api/System.Runtime.CompilerServices.IndexerNameAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.IndexerNameAttribute.html",
    "title": "Class IndexerNameAttribute | nanoFramework Documentation",
    "keywords": "Class IndexerNameAttribute Indicates the name by which an indexer is known in programming languages that do not support indexers directly. Inheritance Object Attribute IndexerNameAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class IndexerNameAttribute : Attribute Constructors | Improve this Doc View Source IndexerNameAttribute(String) Initializes a new instance of the IndexerNameAttribute class. Declaration public IndexerNameAttribute(string indexerName) Parameters Type Name Description String indexerName The name of the indexer, as shown to other languages. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Runtime.CompilerServices.InternalsVisibleToAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.InternalsVisibleToAttribute.html",
    "title": "Class InternalsVisibleToAttribute | nanoFramework Documentation",
    "keywords": "Class InternalsVisibleToAttribute Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly. Inheritance Object Attribute InternalsVisibleToAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class InternalsVisibleToAttribute : Attribute Constructors | Improve this Doc View Source InternalsVisibleToAttribute(String) Initializes a new instance of the InternalsVisibleToAttribute class with the name of the specified friend assembly. Declaration public InternalsVisibleToAttribute(string assemblyName) Parameters Type Name Description String assemblyName The name of a friend assembly. Properties | Improve this Doc View Source AssemblyName Gets the name of the friend assembly to which all types and type members that are marked with the internal keyword are to be made visible. Declaration public string AssemblyName { get; } Property Value Type Description String A string that represents the name of the friend assembly. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Runtime.CompilerServices.MethodCodeType.html": {
    "href": "api/System.Runtime.CompilerServices.MethodCodeType.html",
    "title": "Enum MethodCodeType | nanoFramework Documentation",
    "keywords": "Enum MethodCodeType Defines how a method is implemented. Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax public enum MethodCodeType Fields Name Description IL This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in Microsoft intermediate language (MSIL). Native This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method is implemented in native code. OPTIL This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is in optimized intermediate language (OPTIL). Runtime This API supports the product infrastructure and is not intended to be used directly from your code. Specifies that the method implementation is provided by the runtime."
  },
  "api/System.Runtime.CompilerServices.MethodImplAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.MethodImplAttribute.html",
    "title": "Class MethodImplAttribute | nanoFramework Documentation",
    "keywords": "Class MethodImplAttribute Specifies the details of how a method is implemented. This class cannot be inherited. Inheritance Object Attribute MethodImplAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, Inherited = false)] public sealed class MethodImplAttribute : Attribute Constructors | Improve this Doc View Source MethodImplAttribute() Initializes a new instance of the MethodImplAttribute class. Declaration public MethodImplAttribute() | Improve this Doc View Source MethodImplAttribute(Int16) Initializes a new instance of the MethodImplAttribute class with the specified MethodImplOptions _value. Declaration public MethodImplAttribute(short _value) Parameters Type Name Description Int16 _value A bitmask representing the desired MethodImplOptions _value which specifies properties of the attributed method. | Improve this Doc View Source MethodImplAttribute(MethodImplOptions) Initializes a new instance of the MethodImplAttribute class with the specified MethodImplOptions _value. Declaration public MethodImplAttribute(MethodImplOptions methodImplOptions) Parameters Type Name Description MethodImplOptions methodImplOptions A MethodImplOptions _value specifying properties of the attributed method. Fields | Improve this Doc View Source MethodCodeType A MethodCodeType _value indicating what kind of implementation is provided for this method. Declaration public MethodCodeType MethodCodeType Field Value Type Description MethodCodeType Properties | Improve this Doc View Source Value Gets the MethodImplOptions _value describing the attributed method. Declaration public MethodImplOptions Value { get; } Property Value Type Description MethodImplOptions Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Runtime.CompilerServices.MethodImplOptions.html": {
    "href": "api/System.Runtime.CompilerServices.MethodImplOptions.html",
    "title": "Enum MethodImplOptions | nanoFramework Documentation",
    "keywords": "Enum MethodImplOptions Defines the details of how a method is implemented. Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax public enum MethodImplOptions Fields Name Description ForwardRef The method is declared, but its implementation is provided elsewhere. InternalCall The call is internal, that is, it calls a method that is implemented within the common language runtime. NoInlining The method cannot be inlined. Inlining is an optimization by which a method call is replaced with the method body. PreserveSig The method signature is exported exactly as declared. Synchronized The method can be executed by only one thread at a time. Static methods lock on the type, whereas instance methods lock on the instance. Only one thread can execute in any of the instance functions, and only one thread can execute in any of a class's static functions. Unmanaged The method is implemented in unmanaged code."
  },
  "api/System.Runtime.CompilerServices.RuntimeHelpers.html": {
    "href": "api/System.Runtime.CompilerServices.RuntimeHelpers.html",
    "title": "Class RuntimeHelpers | nanoFramework Documentation",
    "keywords": "Class RuntimeHelpers Provides a set of static methods and properties that provide support for compilers. This class cannot be inherited. Inheritance Object RuntimeHelpers Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.CompilerServices Assembly : mscorlib.dll Syntax public static class RuntimeHelpers Properties OffsetToStringData Gets the offset, in bytes, to the data in the given string. Declaration public static int OffsetToStringData { get; } Property Value Type Description Int32 The byte offset, from the start of the String object to the first character in the string. Methods GetObjectValue(Object) Boxes a value type. Declaration public static extern object GetObjectValue(object obj) Parameters Type Name Description Object obj The value type to be boxed. Returns Type Description Object A boxed copy of obj if it is a value class; otherwise, obj itself. InitializeArray(Array, RuntimeFieldHandle) Provides a fast way to initialize an array from data that is stored in a module. Declaration public static extern void InitializeArray(Array array, RuntimeFieldHandle fldHandle) Parameters Type Name Description Array array The array to be initialized. RuntimeFieldHandle fldHandle A field handle that specifies the location of the data used to initialize the array. RunClassConstructor(RuntimeTypeHandle) Runs a specified class constructor method. Declaration public static extern void RunClassConstructor(RuntimeTypeHandle type) Parameters Type Name Description RuntimeTypeHandle type A type handle that specifies the class constructor method to run."
  },
  "api/System.Runtime.InteropServices.CharSet.html": {
    "href": "api/System.Runtime.InteropServices.CharSet.html",
    "title": "Enum CharSet | nanoFramework Documentation",
    "keywords": "Enum CharSet Dictates which character set marshaled strings should use. Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax public enum CharSet Fields Name Description Ansi Marshal strings as multiple-byte character strings. Auto Automatically marshal strings appropriately for the target operating system. The default is Unicode on Windows NT, Windows 2000, Windows XP, and the Windows Server 2003 family; the default is Ansi on Windows 98 and Windows Me. Although the common language runtime default is Auto, languages may override this default. For example, by default C# marks all methods and types as Ansi. None This value is obsolete and has the same behavior as CharSet.Ansi. Unicode Marshal strings as Unicode 2-byte characters."
  },
  "api/System.Runtime.InteropServices.ComVisibleAttribute.html": {
    "href": "api/System.Runtime.InteropServices.ComVisibleAttribute.html",
    "title": "Class ComVisibleAttribute | nanoFramework Documentation",
    "keywords": "Class ComVisibleAttribute Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM. Inheritance Object Attribute ComVisibleAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)] public sealed class ComVisibleAttribute : Attribute Constructors | Improve this Doc View Source ComVisibleAttribute(Boolean) Initializes a new instance of the ComVisibleAttribute class. Declaration public ComVisibleAttribute(bool visibility) Parameters Type Name Description Boolean visibility true to indicate that the type is visible to COM; otherwise, false. The default is true. Properties | Improve this Doc View Source Value Gets a value that indicates whether the COM type is visible. Declaration public bool Value { get; } Property Value Type Description Boolean true if the type is visible; otherwise, false. The default value is true. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Runtime.InteropServices.GuidAttribute.html": {
    "href": "api/System.Runtime.InteropServices.GuidAttribute.html",
    "title": "Class GuidAttribute | nanoFramework Documentation",
    "keywords": "Class GuidAttribute Supplies an explicit System.Guid when an automatic GUID is undesirable. Inheritance Object Attribute GuidAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate, Inherited = false)] public sealed class GuidAttribute : Attribute Constructors | Improve this Doc View Source GuidAttribute(String) Initializes a new instance of the GuidAttribute class with the specified GUID. Declaration public GuidAttribute(string guid) Parameters Type Name Description String guid The Guid to be assigned. Properties | Improve this Doc View Source Value Gets the Guid of the class. Declaration public string Value { get; } Property Value Type Description String The Guid of the class. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Runtime.InteropServices.html": {
    "href": "api/System.Runtime.InteropServices.html",
    "title": "Namespace System.Runtime.InteropServices | nanoFramework Documentation",
    "keywords": "Namespace System.Runtime.InteropServices Classes ComVisibleAttribute Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM. GuidAttribute Supplies an explicit System.Guid when an automatic GUID is undesirable. OutAttribute Indicates that data should be marshaled from callee back to caller. StructLayoutAttribute Lets you control the physical layout of the data fields of a class or structure in memory. Enums CharSet Dictates which character set marshaled strings should use. LayoutKind Controls the layout of an object when exported to unmanaged code."
  },
  "api/System.Runtime.InteropServices.LayoutKind.html": {
    "href": "api/System.Runtime.InteropServices.LayoutKind.html",
    "title": "Enum LayoutKind | nanoFramework Documentation",
    "keywords": "Enum LayoutKind Controls the layout of an object when exported to unmanaged code. Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax public enum LayoutKind Fields Name Description Auto The runtime automatically chooses an appropriate layout for the members of an object in unmanaged memory. Objects defined with this enumeration member cannot be exposed outside of managed code. Attempting to do so generates an exception. Explicit The precise position of each member of an object in unmanaged memory is explicitly controlled, subject to the setting of the StructLayoutAttribute.Pack field. Each member must use the FieldOffsetAttribute to indicate the position of that field within the type. Sequential The members of the object are laid out sequentially, in the order in which they appear when exported to unmanaged memory. The members are laid out according to the packing specified in StructLayoutAttribute.Pack, and can be noncontiguous."
  },
  "api/System.Runtime.InteropServices.OutAttribute.html": {
    "href": "api/System.Runtime.InteropServices.OutAttribute.html",
    "title": "Class OutAttribute | nanoFramework Documentation",
    "keywords": "Class OutAttribute Indicates that data should be marshaled from callee back to caller. Inheritance Object Attribute OutAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Parameter)] public sealed class OutAttribute : Attribute Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Runtime.InteropServices.StructLayoutAttribute.html": {
    "href": "api/System.Runtime.InteropServices.StructLayoutAttribute.html",
    "title": "Class StructLayoutAttribute | nanoFramework Documentation",
    "keywords": "Class StructLayoutAttribute Lets you control the physical layout of the data fields of a class or structure in memory. Inheritance Object Attribute StructLayoutAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.InteropServices Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false)] public sealed class StructLayoutAttribute : Attribute Constructors | Improve this Doc View Source StructLayoutAttribute(Int16) Initalizes a new instance of the StructLayoutAttribute class with the specified System.Runtime.InteropServices.LayoutKind enumeration member. Declaration public StructLayoutAttribute(short layoutKind) Parameters Type Name Description Int16 layoutKind A 16-bit integer that represents one of the LayoutKind values that specifes how the class or structure should be arranged. | Improve this Doc View Source StructLayoutAttribute(LayoutKind) Initalizes a new instance of the StructLayoutAttribute class with the specified System.Runtime.InteropServices.LayoutKind enumeration member. Declaration public StructLayoutAttribute(LayoutKind layoutKind) Parameters Type Name Description LayoutKind layoutKind One of the enumeration values that specifes how the class or structure should be arranged. Fields | Improve this Doc View Source CharSet Indicates whether string data fields within the class should be marshaled as LPWSTR or LPSTR by default. Declaration public CharSet CharSet Field Value Type Description CharSet | Improve this Doc View Source Pack Controls the alignment of data fields of a class or structure in memory. Declaration public int Pack Field Value Type Description Int32 | Improve this Doc View Source Size Indicates the absolute size of the class or structure. Declaration public int Size Field Value Type Description Int32 Properties | Improve this Doc View Source Value Gets the LayoutKind value that specifies how the class or structure is arranged. Declaration public LayoutKind Value { get; } Property Value Type Description LayoutKind One of the enumeration values that specifies how the class or structure is arranged. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Runtime.Remoting.html": {
    "href": "api/System.Runtime.Remoting.html",
    "title": "Namespace System.Runtime.Remoting | nanoFramework Documentation",
    "keywords": "Namespace System.Runtime.Remoting Classes RemotingServices Provides several methods for using and publishing remoted objects and proxies. This class cannot be inherited."
  },
  "api/System.Runtime.Remoting.RemotingServices.html": {
    "href": "api/System.Runtime.Remoting.RemotingServices.html",
    "title": "Class RemotingServices | nanoFramework Documentation",
    "keywords": "Class RemotingServices Provides several methods for using and publishing remoted objects and proxies. This class cannot be inherited. Inheritance Object RemotingServices Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.Remoting Assembly : mscorlib.dll Syntax public static class RemotingServices Methods IsTransparentProxy(Object) Returns a Boolean value that indicates whether the given object is a transparent proxy or a real object. Declaration public static extern bool IsTransparentProxy(object proxy) Parameters Type Name Description Object proxy The reference to the object to check. Returns Type Description Boolean A Boolean value that indicates whether the object specified in the proxy parameter is a transparent proxy or a real object."
  },
  "api/System.Runtime.Versioning.html": {
    "href": "api/System.Runtime.Versioning.html",
    "title": "Namespace System.Runtime.Versioning | nanoFramework Documentation",
    "keywords": "Namespace System.Runtime.Versioning Classes TargetFrameworkAttribute Identifies the version of the .NET Framework that a particular assembly was compiled against."
  },
  "api/System.Runtime.Versioning.TargetFrameworkAttribute.html": {
    "href": "api/System.Runtime.Versioning.TargetFrameworkAttribute.html",
    "title": "Class TargetFrameworkAttribute | nanoFramework Documentation",
    "keywords": "Class TargetFrameworkAttribute Identifies the version of the .NET Framework that a particular assembly was compiled against. Inheritance Object Attribute TargetFrameworkAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Runtime.Versioning Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Assembly)] public sealed class TargetFrameworkAttribute : Attribute Constructors | Improve this Doc View Source TargetFrameworkAttribute(String) Initializes an instance of the TargetFrameworkAttribute class by specifying the .NET Framework version against which an assembly was built. Declaration public TargetFrameworkAttribute(string frameworkName) Parameters Type Name Description String frameworkName The version of the .NET Framework against which the assembly was built. Exceptions Type Condition ArgumentNullException Properties | Improve this Doc View Source FrameworkDisplayName Gets the display name of the .NET Framework version against which an assembly was built. Declaration public string FrameworkDisplayName { get; set; } Property Value Type Description String The display name of the .NET Framework version. | Improve this Doc View Source FrameworkName Gets the name of the .NET Framework version against which a particular assembly was compiled. Declaration public string FrameworkName { get; } Property Value Type Description String The name of the .NET Framework version with which the assembly was compiled. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.RuntimeArgumentHandle.html": {
    "href": "api/System.RuntimeArgumentHandle.html",
    "title": "Struct RuntimeArgumentHandle | nanoFramework Documentation",
    "keywords": "Struct RuntimeArgumentHandle This value type is used for constructing System.ArgIterator. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct RuntimeArgumentHandle"
  },
  "api/System.RuntimeFieldHandle.html": {
    "href": "api/System.RuntimeFieldHandle.html",
    "title": "Struct RuntimeFieldHandle | nanoFramework Documentation",
    "keywords": "Struct RuntimeFieldHandle Represents a field using an internal metadata token. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct RuntimeFieldHandle"
  },
  "api/System.RuntimeMethodHandle.html": {
    "href": "api/System.RuntimeMethodHandle.html",
    "title": "Struct RuntimeMethodHandle | nanoFramework Documentation",
    "keywords": "Struct RuntimeMethodHandle RuntimeMethodHandle is a handle to the internal metadata representation of a method. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct RuntimeMethodHandle"
  },
  "api/System.RuntimeTypeHandle.html": {
    "href": "api/System.RuntimeTypeHandle.html",
    "title": "Struct RuntimeTypeHandle | nanoFramework Documentation",
    "keywords": "Struct RuntimeTypeHandle Represents a type using an internal metadata token. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct RuntimeTypeHandle"
  },
  "api/System.SByte.html": {
    "href": "api/System.SByte.html",
    "title": "Struct SByte | nanoFramework Documentation",
    "keywords": "Struct SByte Represents an 8-bit signed integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax [CLSCompliant(false)] public struct SByte Fields | Improve this Doc View Source MaxValue Represents the largest possible value of SByte. This field is constant. Declaration public const sbyte MaxValue = 127 Field Value Type Description SByte Remarks The value of this constant is 127; that is, hexadecimal 0x7F. | Improve this Doc View Source MinValue Represents the smallest possible value of SByte. This field is constant. Declaration public const sbyte MinValue = -128 Field Value Type Description SByte Remarks The value of this constant is -128; that is, hexadecimal 0x80. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 8-bit signed integer equivalent. Declaration [CLSCompliant(false)] public static sbyte Parse(string s) Parameters Type Name Description String s A string that represents a number to convert. The string is interpreted using the NumberStyles.Integer style. Returns Type Description SByte An 8-bit signed integer that is equivalent to the number contained in the s parameter. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a negative sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A standard or custom numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.Security.Cryptography.HMACSHA256.html": {
    "href": "api/System.Security.Cryptography.HMACSHA256.html",
    "title": "Class HMACSHA256 | nanoFramework Documentation",
    "keywords": "Class HMACSHA256 Computes a Hash-based Message Authentication Code (HMAC) by using the System.Security.Cryptography.SHA256 hash function. Inheritance Object HMACSHA256 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Security.Cryptography Assembly : nanoFramework.Azure.Devices.Client.dll Syntax public class HMACSHA256 Constructors | Improve this Doc View Source HMACSHA256(Byte[]) Initializes a new instance of the System.Security.Cryptography.HMACSHA256 class with the specified key data. Declaration public HMACSHA256(byte[] key) Parameters Type Name Description Byte [] key The secret key for System.Security.Cryptography.HMACSHA256 encryption. The key can be any length. However, the recommended size is 64 bytes max. Properties | Improve this Doc View Source Key Gets or sets the key to use in the HMAC calculation. Declaration public byte[] Key { get; set; } Property Value Type Description Byte [] Methods | Improve this Doc View Source ComputeHash(Byte[]) Computes the hash value for the specified byte array. Declaration public byte[] ComputeHash(byte[] buffer) Parameters Type Name Description Byte [] buffer The input to compute the hash code for. Returns Type Description Byte [] The computed hash code. Exceptions Type Condition ArgumentNullException buffer is null. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Security.Cryptography.html": {
    "href": "api/System.Security.Cryptography.html",
    "title": "Namespace System.Security.Cryptography | nanoFramework Documentation",
    "keywords": "Namespace System.Security.Cryptography Classes HMACSHA256 Computes a Hash-based Message Authentication Code (HMAC) by using the System.Security.Cryptography.SHA256 hash function."
  },
  "api/System.Security.Cryptography.X509Certificates.html": {
    "href": "api/System.Security.Cryptography.X509Certificates.html",
    "title": "Namespace System.Security.Cryptography.X509Certificates | nanoFramework Documentation",
    "keywords": "Namespace System.Security.Cryptography.X509Certificates Classes X509Certificate Provides methods that help you use X.509 v.3 certificates. X509Certificate2 Represents an X.509 certificate."
  },
  "api/System.Security.Cryptography.X509Certificates.X509Certificate.html": {
    "href": "api/System.Security.Cryptography.X509Certificates.X509Certificate.html",
    "title": "Class X509Certificate | nanoFramework Documentation",
    "keywords": "Class X509Certificate Provides methods that help you use X.509 v.3 certificates. Inheritance Object X509Certificate X509Certificate2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Security.Cryptography.X509Certificates Assembly : System.Net.dll Syntax public class X509Certificate Remarks ASN.1 DER is the only certificate format supported by this class. Constructors | Improve this Doc View Source X509Certificate() Initializes a new instance of the X509Certificate class. Declaration public X509Certificate() | Improve this Doc View Source X509Certificate(Byte[]) Initializes a new instance of the X509Certificate class defined from a sequence of bytes representing an X.509v3 certificate. Declaration public X509Certificate(byte[] certificate) Parameters Type Name Description Byte [] certificate A byte array containing data from an X.509 certificate. Remarks ASN.1 DER is the only certificate format supported by this class. | Improve this Doc View Source X509Certificate(Byte[], String) Initializes a new instance of the X509Certificate class using a byte array and a password. Declaration public X509Certificate(byte[] certificate, string password) Parameters Type Name Description Byte [] certificate A byte array containing data from an X.509 certificate. String password The password required to access the X.509 certificate data. Remarks ASN.1 DER is the only certificate format supported by this class. | Improve this Doc View Source X509Certificate(String) Initializes a new instance of the X509Certificate class defined from a string with the content of an X.509v3 certificate. Declaration public X509Certificate(string certificate) Parameters Type Name Description String certificate A string containing a X.509 certificate. Remarks ASN.1 DER is the only certificate format supported by this class. This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter. | Improve this Doc View Source X509Certificate(String, String) Initializes a new instance of the X509Certificate class defined from a string with the content of an X.509v3 certificate. Declaration public X509Certificate(string certificate, string password) Parameters Type Name Description String certificate A string containing a X.509 certificate. String password The password required to access the X.509 certificate data. Remarks ASN.1 DER is the only certificate format supported by this class. This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter. Fields | Improve this Doc View Source _effectiveDate Contains the effective date of the certificate. Declaration protected DateTime _effectiveDate Field Value Type Description DateTime | Improve this Doc View Source _expirationDate Contains the expiration date of the certificate. Declaration protected DateTime _expirationDate Field Value Type Description DateTime | Improve this Doc View Source _handle Contains the handle. Declaration protected byte[] _handle Field Value Type Description Byte [] | Improve this Doc View Source _issuer Contains the certificate issuer. Declaration protected string _issuer Field Value Type Description String | Improve this Doc View Source _sessionHandle Contains the session handle. Declaration protected byte[] _sessionHandle Field Value Type Description Byte [] | Improve this Doc View Source _subject Contains the subject. Declaration protected string _subject Field Value Type Description String Properties | Improve this Doc View Source Issuer Gets the name of the certificate authority that issued the X.509v3 certificate. Declaration public virtual string Issuer { get; } Property Value Type Description String The name of the certificate authority that issued the X.509v3 certificate. | Improve this Doc View Source Subject Gets the subject distinguished name from the certificate. Declaration public virtual string Subject { get; } Property Value Type Description String The subject distinguished name from the certificate. Methods | Improve this Doc View Source GetEffectiveDate() Returns the effective date of this X.509v3 certificate. Declaration public virtual DateTime GetEffectiveDate() Returns Type Description DateTime The effective date for this X.509 certificate. Remarks This methods is exclusive of nanoFramework. The equivalent .NET method is GetEffectiveDateString(). | Improve this Doc View Source GetExpirationDate() Returns the expiration date of this X.509v3 certificate. Declaration public virtual DateTime GetExpirationDate() Returns Type Description DateTime The expiration date for this X.509 certificate. Remarks This methods is exclusive of nanoFramework. The equivalent .NET method is GetExpirationDateString(). | Improve this Doc View Source GetRawCertData() Returns the raw data for the entire X.509v3 certificate as an array of bytes. Declaration public virtual byte[] GetRawCertData() Returns Type Description Byte [] A byte array containing the X.509 certificate data. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Security.Cryptography.X509Certificates.X509Certificate2.html": {
    "href": "api/System.Security.Cryptography.X509Certificates.X509Certificate2.html",
    "title": "Class X509Certificate2 | nanoFramework Documentation",
    "keywords": "Class X509Certificate2 Represents an X.509 certificate. Inheritance Object X509Certificate X509Certificate2 Inherited Members X509Certificate._issuer X509Certificate._subject X509Certificate._effectiveDate X509Certificate._expirationDate X509Certificate._handle X509Certificate._sessionHandle X509Certificate.Issuer X509Certificate.Subject X509Certificate.GetEffectiveDate() X509Certificate.GetExpirationDate() X509Certificate.GetRawCertData() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Security.Cryptography.X509Certificates Assembly : System.Net.dll Syntax public class X509Certificate2 : X509Certificate Constructors | Improve this Doc View Source X509Certificate2() Initializes a new instance of the X509Certificate2 class. Declaration public X509Certificate2() | Improve this Doc View Source X509Certificate2(Byte[]) Initializes a new instance of the X509Certificate2 class using information from a byte array. Declaration public X509Certificate2(byte[] rawData) Parameters Type Name Description Byte [] rawData A byte array containing data from an X.509 certificate. | Improve this Doc View Source X509Certificate2(Byte[], Byte[], String) Initializes a new instance of the X509Certificate2 class using a string with the content of an X.509 public certificate, the private key and a password used to access the certificate. Declaration public X509Certificate2(byte[] rawData, byte[] key, string password) Parameters Type Name Description Byte [] rawData A byte array containing data from an X.509 certificate. Byte [] key A byte array containing a PEM private key. String password The password required to access the X.509 certificate data. Remarks This methods is exclusive of nanoFramework. There is no equivalent in .NET framework. | Improve this Doc View Source X509Certificate2(Byte[], String) Initializes a new instance of the X509Certificate2 class using a byte array and a password. Declaration public X509Certificate2(byte[] rawData, string password) Parameters Type Name Description Byte [] rawData A byte array containing data from an X.509 certificate. String password The password required to access the X.509 certificate data. | Improve this Doc View Source X509Certificate2(Byte[], String, String) Initializes a new instance of the X509Certificate2 class using a string with the content of an X.509 public certificate, the private key and a password used to access the certificate. Declaration public X509Certificate2(byte[] rawData, string key, string password) Parameters Type Name Description Byte [] rawData A byte array containing data from an X.509 certificate. String key A string containing a PEM private key. String password The password required to access the X.509 certificate data. Remarks This methods is exclusive of nanoFramework. There is no equivalent in .NET framework. | Improve this Doc View Source X509Certificate2(String) Initializes a new instance of the X509Certificate2 class using a string with the content of an X.509 certificate. Declaration public X509Certificate2(string certificate) Parameters Type Name Description String certificate A string containing a X.509 certificate. Remarks This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter. | Improve this Doc View Source X509Certificate2(String, String) Initializes a new instance of the X509Certificate2 class using a string with the content of an X.509 certificate and a password used to access the certificate. Declaration public X509Certificate2(string certificate, string password) Parameters Type Name Description String certificate A string containing a X.509 certificate. String password The password required to access the X.509 certificate data. Remarks This methods is exclusive of nanoFramework. The equivalent .NET constructor accepts a file name as the parameter. | Improve this Doc View Source X509Certificate2(String, String, String) Initializes a new instance of the X509Certificate2 class using a string with the content of an X.509 public certificate, the private key and a password used to access the certificate. Declaration public X509Certificate2(string certificate, string key, string password) Parameters Type Name Description String certificate A string containing a X.509 certificate. String key A string containing a PEM private key. String password The password required to access the X.509 certificate data. Remarks This methods is exclusive of nanoFramework. There is no equivalent in .NET framework. Properties | Improve this Doc View Source HasPrivateKey Gets a value that indicates whether an X509Certificate2 object contains a private key. Declaration public bool HasPrivateKey { get; } Property Value Type Description Boolean true if the X509Certificate2 object contains a private key; otherwise, false . | Improve this Doc View Source NotAfter Gets the date in local time after which a certificate is no longer valid. Declaration public DateTime NotAfter { get; } Property Value Type Description DateTime A DateTime object that represents the expiration date for the certificate. | Improve this Doc View Source NotBefore Gets the date in local time on which a certificate becomes valid. Declaration public DateTime NotBefore { get; } Property Value Type Description DateTime A DateTime object that represents the effective date of the certificate. | Improve this Doc View Source PrivateKey Gets the private key, null if no private key Declaration public byte[] PrivateKey { get; } Property Value Type Description Byte [] Remarks This will give you access directly to the raw decoded byte array of the private key | Improve this Doc View Source PublicKey Gets the public key Declaration public byte[] PublicKey { get; } Property Value Type Description Byte [] Remarks This will give you access directly to the raw decoded byte array of the public key | Improve this Doc View Source RawData Gets the raw data of a certificate. Declaration public byte[] RawData { get; } Property Value Type Description Byte [] The raw data of the certificate as a byte array. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.SerializableAttribute.html": {
    "href": "api/System.SerializableAttribute.html",
    "title": "Class SerializableAttribute | nanoFramework Documentation",
    "keywords": "Class SerializableAttribute Indicates that a class can be serialized. This class cannot be inherited. Inheritance Object Attribute SerializableAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Delegate, Inherited = false)] public sealed class SerializableAttribute : Attribute Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Single.html": {
    "href": "api/System.Single.html",
    "title": "Struct Single | nanoFramework Documentation",
    "keywords": "Struct Single Represents a single-precision floating-point number. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Single Fields | Improve this Doc View Source Epsilon Represents the smallest positive Single value that is greater than zero. This field is constant. Declaration public const float Epsilon = 1.401298E-45F Field Value Type Description Single | Improve this Doc View Source MaxValue Represents the largest possible value of Single. This field is constant. Declaration public const float MaxValue = 3.40282347E+38F Field Value Type Description Single Remarks The value of this constant is positive 3.40282347E+38. | Improve this Doc View Source MinValue Represents the smallest possible value of Single. This field is constant. Declaration public const float MinValue = -3.40282347E+38F Field Value Type Description Single Remarks The value of this constant is negative 3.402823e38. | Improve this Doc View Source NaN Represents a value that is not a number (NaN). This field is constant. Declaration public const float NaN = NaNF Field Value Type Description Single | Improve this Doc View Source NegativeInfinity Represents negative infinity. This field is constant. Declaration public const float NegativeInfinity = -InfinityF Field Value Type Description Single | Improve this Doc View Source PositiveInfinity Represents positive infinity. This field is constant. Declaration public const float PositiveInfinity = InfinityF Field Value Type Description Single Methods | Improve this Doc View Source CompareTo(Single) Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number. Declaration public int CompareTo(float value) Parameters Type Name Description Single value A single-precision floating-point number to compare. Returns Type Description Int32 A signed number indicating the relative values of this instance and value. Less than zero: This instance is less than value. -or- This instance is not a number ( NaN ) and value is a number. Zero: This instance is equal to value. -or- Both this instance and value are not a number ( NaN ), PositiveInfinity , or NegativeInfinity . Greater than zero: This instance is greater than value. -or- This instance is a number and value is not a number ( NaN ). | Improve this Doc View Source IsInfinity(Single) Returns a value indicating whether the specified number evaluates to negative or positive infinity. Declaration public static bool IsInfinity(float f) Parameters Type Name Description Single f A single-precision floating-point number. Returns Type Description Boolean true if f evaluates to PositiveInfinity or NegativeInfinity ; otherwise, false . | Improve this Doc View Source IsNaN(Single) Returns a value that indicates whether the specified value is not a number ( NaN ). Declaration public static bool IsNaN(float f) Parameters Type Name Description Single f A single-precision floating-point number. Returns Type Description Boolean true if f evaluates to NaN ; otherwise, false . | Improve this Doc View Source IsNegativeInfinity(Single) Returns a value indicating whether the specified number evaluates to negative infinity. Declaration public static bool IsNegativeInfinity(float f) Parameters Type Name Description Single f A single-precision floating-point number. Returns Type Description Boolean true if f evaluates to NegativeInfinity ; otherwise, false . | Improve this Doc View Source IsPositiveInfinity(Single) Returns a value indicating whether the specified number evaluates to positive infinity. Declaration public static bool IsPositiveInfinity(float f) Parameters Type Name Description Single f A single-precision floating-point number. Returns Type Description Boolean true if d evaluates to PositiveInfinity ; otherwise, false . | Improve this Doc View Source Parse(String) Converts the string representation of a number to its single-precision floating-point number equivalent. Declaration public static float Parse(string s) Parameters Type Name Description String s A string that contains a number to convert. Returns Type Description Single A single-precision floating-point number equivalent to the numeric value or symbol specified in s . Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation, using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format. | Improve this Doc View Source TryParse(String, out Single) Converts the string representation of a number to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed. Declaration public static bool TryParse(string s, out float result) Parameters Type Name Description String s A string containing a number to convert. Single result When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in s, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the s parameter is null or Empty, is not a number in a valid format, or represents a number less than MinValue or greater than MaxValue . This parameter is passed uninitialized; any value originally supplied in result will be overwritten. Returns Type Description Boolean true if s was converted successfully; otherwise, false ."
  },
  "api/System.SpanByte.html": {
    "href": "api/System.SpanByte.html",
    "title": "Struct SpanByte | nanoFramework Documentation",
    "keywords": "Struct SpanByte Provides a type- and memory-safe representation of a contiguous region of arbitrary byte array Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax [CLSCompliant(false)] public ref readonly struct SpanByte Constructors | Improve this Doc View Source SpanByte(Byte[]) Creates a new System.SpanByte object over the entirety of a specified array. Declaration public SpanByte(byte[] array) Parameters Type Name Description Byte [] array The array from which to create the System.Span object. | Improve this Doc View Source SpanByte(Byte[], Int32, Int32) Creates a new System.SpanByte object that includes a specified number of elements of an array starting at a specified index. Declaration public SpanByte(byte[] array, int start, int length) Parameters Type Name Description Byte [] array The source array. Int32 start The index of the first element to include in the new System.Span Int32 length The number of elements to include in the new System.Span Exceptions Type Condition ArgumentOutOfRangeException array is null, but start or length is non-zero. -or- start is outside the bounds of the array. -or- start and length exceeds the number of elements in the array. Properties | Improve this Doc View Source Empty Returns an empty System.Span object. Declaration public static readonly SpanByte Empty { get; } Property Value Type Description SpanByte | Improve this Doc View Source IsEmpty Returns a value that indicates whether the current System.Span is empty. true if the current span is empty; otherwise, false. Declaration public readonly bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Gets the element at the specified zero-based index. Declaration public readonly byte this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element. Property Value Type Description Byte The element at the specified index. | Improve this Doc View Source Length Returns the length of the current span. Declaration public readonly int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source CopyTo(SpanByte) Copies the contents of this System.Span into a destination System.Span. Declaration public readonly void CopyTo(SpanByte destination) Parameters Type Name Description SpanByte destination The destination System.Span object. Exceptions Type Condition ArgumentException destination is shorter than the source System.Span. | Improve this Doc View Source Slice(Int32) Forms a slice out of the current span that begins at a specified index. Declaration public readonly SpanByte Slice(int start) Parameters Type Name Description Int32 start The index at which to begin the slice. Returns Type Description SpanByte A span that consists of all elements of the current span from start to the end of the span. Exceptions Type Condition ArgumentOutOfRangeException start is less than zero or greater than System.Span.Length. | Improve this Doc View Source Slice(Int32, Int32) Forms a slice out of the current span starting at a specified index for a specified length. Declaration public readonly SpanByte Slice(int start, int length) Parameters Type Name Description Int32 start The index at which to begin this slice. Int32 length The desired length for the slice. Returns Type Description SpanByte A span that consists of length elements from the current span starting at start. Exceptions Type Condition ArgumentOutOfRangeException start or start + length is less than zero or greater than System.Span.Length. | Improve this Doc View Source ToArray() Copies the contents of this span into a new array. Declaration public readonly byte[] ToArray() Returns Type Description Byte [] An array containing the data in the current span. Operators | Improve this Doc View Source Implicit(Byte[] to SpanByte) Implicit conversion of an array to a span of byte Declaration public static implicit operator SpanByte(byte[] array) Parameters Type Name Description Byte [] array Returns Type Description SpanByte"
  },
  "api/System.STAThreadAttribute.html": {
    "href": "api/System.STAThreadAttribute.html",
    "title": "Class STAThreadAttribute | nanoFramework Documentation",
    "keywords": "Class STAThreadAttribute Indicates that the COM threading model for an application is single-threaded apartment (STA). Inheritance Object Attribute STAThreadAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax [AttributeUsage(AttributeTargets.Method)] public sealed class STAThreadAttribute : Attribute Constructors | Improve this Doc View Source STAThreadAttribute() Initializes a new instance of the STAThreadAttribute class. Declaration public STAThreadAttribute() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.String.html": {
    "href": "api/System.String.html",
    "title": "Class String | nanoFramework Documentation",
    "keywords": "Class String Represents text as a sequence of UTF-16 code units. Inheritance Object String Implements IComparable IEnumerable Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public sealed class String : IComparable, IEnumerable Constructors String(Char, Int32) Initializes a new instance of the String class to the value indicated by a specified Unicode character repeated a specified number of times. Declaration public extern String(char c, int count) Parameters Type Name Description Char c A Unicode character. Int32 count The number of times c occurs. String(Char[]) Initializes a new instance of the String class to the value indicated by an array of Unicode characters. Declaration public extern String(char[] value) Parameters Type Name Description Char [] value An array of Unicode characters. String(Char[], Int32, Int32) Initializes a new instance of the String class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length. Declaration public extern String(char[] value, int startIndex, int length) Parameters Type Name Description Char [] value An array of Unicode characters. Int32 startIndex The starting position within value. Int32 length The number of characters within value to use. Fields | Improve this Doc View Source Empty Represents the empty string. This field is read-only. Declaration public static readonly string Empty Field Value Type Description String Properties Chars[Int32] Gets the Char object at a specified position in the current String object. Declaration public char this[int index] { get; } Parameters Type Name Description Int32 index A position in the current string. Property Value Type Description Char The object at position index. Length Gets the number of characters in the current String object. Declaration public int Length { get; } Property Value Type Description Int32 The number of characters in the current string. Methods Compare(String, String) Compares two specified String objects and returns an integer that indicates their relative position in the sort order. Declaration public static extern int Compare(string strA, string strB) Parameters Type Name Description String strA The first string to compare. String strB The second string to compare. Returns Type Description Int32 A 32-bit signed integer that indicates the lexical relationship between the two comparands. CompareTo(Object) Compares this instance with a specified Object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified Object. Declaration public extern int CompareTo(object value) Parameters Type Name Description Object value An object that evaluates to a String. Returns Type Description Int32 A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter. CompareTo(String) Compares this instance with a specified String object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string. Declaration public extern int CompareTo(string strB) Parameters Type Name Description String strB The string to compare with this instance. Returns Type Description Int32 A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the strB parameter. | Improve this Doc View Source Concat(Object) Creates the string representation of a specified object. Declaration public static string Concat(object arg0) Parameters Type Name Description Object arg0 The object to represent, or null. Returns Type Description String The string representation of the value of arg0, or String.Empty if arg0 is null. | Improve this Doc View Source Concat(Object, Object) Concatenates the string representations of two specified objects. Declaration public static string Concat(object arg0, object arg1) Parameters Type Name Description Object arg0 The first object to concatenate. Object arg1 The second object to concatenate. Returns Type Description String The concatenated string representations of the values of arg0 and arg1. | Improve this Doc View Source Concat(Object, Object, Object) Concatenates the string representations of three specified objects. Declaration public static string Concat(object arg0, object arg1, object arg2) Parameters Type Name Description Object arg0 The first object to concatenate. Object arg1 The second object to concatenate. Object arg2 The third object to concatenate. Returns Type Description String The concatenated string representations of the values of arg0, arg1 and arg2. | Improve this Doc View Source Concat(Object[]) Concatenates the string representations of the elements in a specified Object array. Declaration public static string Concat(params object[] args) Parameters Type Name Description Object [] args An object array that contains the elements to concatenate. Returns Type Description String The concatenated string representations of the values of the elements in args. Exceptions Type Condition ArgumentNullException Concat(String, String) Concatenates two specified instances of String. Declaration public static extern string Concat(string str0, string str1) Parameters Type Name Description String str0 The first string to concatenate. String str1 The second string to concatenate. Returns Type Description String The concatenation of str0 and str1. Concat(String, String, String) Concatenates three specified instances of String. Declaration public static extern string Concat(string str0, string str1, string str2) Parameters Type Name Description String str0 The first string to concatenate. String str1 The second string to concatenate. String str2 The third string to concatenate. Returns Type Description String The concatenation of str0, str1 and str2. Concat(String, String, String, String) Concatenates four specified instances of String. Declaration public static extern string Concat(string str0, string str1, string str2, string str3) Parameters Type Name Description String str0 The first string to concatenate. String str1 The second string to concatenate. String str2 The third string to concatenate. String str3 The fourth string to concatenate. Returns Type Description String The concatenation of str0, str1, str2 and str3. Concat(String[]) Concatenates the elements of a specified String array. Declaration public static extern string Concat(params string[] values) Parameters Type Name Description String [] values An array of string instances. Returns Type Description String The concatenated elements of values. | Improve this Doc View Source Contains(String) Returns a value indicating whether a specified substring occurs within this string. Declaration public bool Contains(string value) Parameters Type Name Description String value The string to seek. Returns Type Description Boolean true if the value parameter occurs within this string, or if value is the empty string (\"\"); otherwise, false . | Improve this Doc View Source EndsWith(String) Determines whether the end of this string instance matches the specified string. Declaration public bool EndsWith(string value) Parameters Type Name Description String value The string to compare to the substring at the end of this instance. Returns Type Description Boolean true if value matches the end of this instance; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether this instance and a specified object, which must also be a String object, have the same value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The string to compare to this instance. Returns Type Description Boolean true if obj is a String and its value is the same as this instance; otherwise, false. If obj is null, the method returns false. Overrides Object.Equals(Object) Equals(String, String) Determines whether two specified String objects have the same value. Declaration public static extern bool Equals(string a, string b) Parameters Type Name Description String a The first string to compare, or null. String b The second string to compare, or null. Returns Type Description Boolean true if the value of a is the same as the value of b; otherwise, false. If both a and b are null, the method returns true. | Improve this Doc View Source Format(String, Object[]) Replaces the format items in a string with the string representations of corresponding objects in a specified array. Declaration public static string Format(string format, params object[] args) Parameters Type Name Description String format A composite format string Object [] args An object array that contains zero or more objects to format. Returns Type Description String A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args. | Improve this Doc View Source GetEnumerator() Not supported in NanoFramework Return an enumerator that iterate on each char of the string. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. IndexOf(Char) Reports the zero-based index of the first occurrence of the specified Unicode character in this string. Declaration public extern int IndexOf(char value) Parameters Type Name Description Char value A Unicode character to seek. Returns Type Description Int32 The zero-based index position of value if that character is found, or -1 if it is not. IndexOf(Char, Int32) Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position. Declaration public extern int IndexOf(char value, int startIndex) Parameters Type Name Description Char value A Unicode character to seek. Int32 startIndex The search starting position. Returns Type Description Int32 The zero-based index position of value from the start of the string if that character is found, or -1 if it is not. IndexOf(Char, Int32, Int32) Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions. Declaration public extern int IndexOf(char value, int startIndex, int count) Parameters Type Name Description Char value A Unicode character to seek. Int32 startIndex The search starting position. Int32 count The number of character positions to examine. Returns Type Description Int32 The zero-based index position of value if that character is found, or -1 if it is not. IndexOf(String) Reports the zero-based index of the first occurrence of the specified string in this instance. Declaration public extern int IndexOf(string value) Parameters Type Name Description String value The string to seek. Returns Type Description Int32 The zero-based index position of value if that string is found, or -1 if it is not. If value is String.Empty, the return value is 0. IndexOf(String, Int32) Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position. Declaration public extern int IndexOf(string value, int startIndex) Parameters Type Name Description String value The string to seek. Int32 startIndex The search starting position. Returns Type Description Int32 The zero-based index position of value from the start of the current instance if that string is found, or -1 if it is not. If value is String.Empty, the return value is startIndex. IndexOf(String, Int32, Int32) Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions. Declaration public extern int IndexOf(string value, int startIndex, int count) Parameters Type Name Description String value The string to seek. Int32 startIndex The search starting position. Int32 count The number of character positions to examine. Returns Type Description Int32 The zero-based index position of value from the start of the current instance if that string is found, or -1 if it is not. If value is String.Empty, the return value is startIndex. IndexOfAny(Char[]) Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. Declaration public extern int IndexOfAny(char[] anyOf) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Returns Type Description Int32 The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found. IndexOfAny(Char[], Int32) Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position. Declaration public extern int IndexOfAny(char[] anyOf, int startIndex) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Int32 startIndex The search starting position. Returns Type Description Int32 The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found. IndexOfAny(Char[], Int32, Int32) Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions. Declaration public extern int IndexOfAny(char[] anyOf, int startIndex, int count) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Int32 startIndex The search starting position. Int32 count The number of character positions to examine. Returns Type Description Int32 The zero-based index position of the first occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found. | Improve this Doc View Source Intern(String) Retrieves the system's reference to the specified String. Declaration public static string Intern(string str) Parameters Type Name Description String str A string to search for in the intern pool. Returns Type Description String The system's reference to str, if it is interned; otherwise, a new reference to a string with the value of str. | Improve this Doc View Source IsInterned(String) Retrieves a reference to a specified String. Declaration public static string IsInterned(string str) Parameters Type Name Description String str The string to search for in the intern pool. Returns Type Description String A reference to str if it is in the common language runtime intern pool; otherwise, null. | Improve this Doc View Source IsNullOrEmpty(String) Indicates whether the specified string is null or an empty string (\"\"). Declaration public static bool IsNullOrEmpty(string value) Parameters Type Name Description String value The string to test. Returns Type Description Boolean true if the value parameter is null or an empty string (\"\"); otherwise, false . LastIndexOf(Char) Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. Declaration public extern int LastIndexOf(char value) Parameters Type Name Description Char value The Unicode character to seek. Returns Type Description Int32 The zero-based index position of value if that character is found, or -1 if it is not. LastIndexOf(Char, Int32) Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string. Declaration public extern int LastIndexOf(char value, int startIndex) Parameters Type Name Description Char value The Unicode character to seek. Int32 startIndex The starting position of the search. The search proceeds from startIndex toward the beginning of this instance. Returns Type Description Int32 The zero-based index position of value if that character is found, or -1 if it is not found or if the current instance equals String.Empty. LastIndexOf(Char, Int32, Int32) Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions. Declaration public extern int LastIndexOf(char value, int startIndex, int count) Parameters Type Name Description Char value The Unicode character to seek. Int32 startIndex The starting position of the search. The search proceeds from startIndex toward the beginning of this instance. Int32 count The number of character positions to examine. Returns Type Description Int32 The zero-based index position of value if that character is found, or -1 if it is not found or if the current instance equals String.Empty. LastIndexOf(String) Reports the zero-based index position of the last occurrence of a specified string within this instance. Declaration public extern int LastIndexOf(string value) Parameters Type Name Description String value The string to seek. Returns Type Description Int32 The zero-based starting index position of value if that string is found, or -1 if it is not. If value is String.Empty, the return value is the last index position in this instance. LastIndexOf(String, Int32) Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string. Declaration public extern int LastIndexOf(string value, int startIndex) Parameters Type Name Description String value The string to seek. Int32 startIndex The search starting position. The search proceeds from startIndex toward the beginning of this instance. Returns Type Description Int32 The zero-based starting index position of value if that string is found, or -1 if it is not found or if the current instance equals String.Empty. If value is String.Empty, the return value is the smaller of startIndex and the last index position in this instance. LastIndexOf(String, Int32, Int32) Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions. Declaration public extern int LastIndexOf(string value, int startIndex, int count) Parameters Type Name Description String value The string to seek. Int32 startIndex The search starting position. The search proceeds from startIndex toward the beginning of this instance. Int32 count The number of character positions to examine. Returns Type Description Int32 The zero-based starting index position of value if that string is found, or -1 if it is not found or if the current instance equals String.Empty. If value is Empty, the return value is the smaller of startIndex and the last index position in this instance. LastIndexOfAny(Char[]) Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. Declaration public extern int LastIndexOfAny(char[] anyOf) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Returns Type Description Int32 The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found. LastIndexOfAny(Char[], Int32) Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string. Declaration public extern int LastIndexOfAny(char[] anyOf, int startIndex) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Int32 startIndex The search starting position. The search proceeds from startIndex toward the beginning of this instance. Returns Type Description Int32 The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found or if the current instance equals String.Empty. LastIndexOfAny(Char[], Int32, Int32) Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions. Declaration public extern int LastIndexOfAny(char[] anyOf, int startIndex, int count) Parameters Type Name Description Char [] anyOf A Unicode character array containing one or more characters to seek. Int32 startIndex The search starting position. The search proceeds from startIndex toward the beginning of this instance. Int32 count The number of character positions to examine. Returns Type Description Int32 The index position of the last occurrence in this instance where any character in anyOf was found; -1 if no character in anyOf was found or if the current instance equals String.Empty. | Improve this Doc View Source PadLeft(Int32, Char) Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length. Declaration public string PadLeft(int totalWidth, char paddingChar = ' ') Parameters Type Name Description Int32 totalWidth The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. Char paddingChar A Unicode padding character. Returns Type Description String | Improve this Doc View Source PadRight(Int32, Char) Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length. Declaration public string PadRight(int totalWidth, char paddingChar = ' ') Parameters Type Name Description Int32 totalWidth The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. Char paddingChar A Unicode padding character. Returns Type Description String Split(Char[]) Splits a string into substrings that are based on the characters in an array. Declaration public extern string[] Split(params char[] separator) Parameters Type Name Description Char [] separator A character array that delimits the substrings in this string, an empty array that contains no delimiters, or null. Returns Type Description String [] An array whose elements contain the substrings from this instance that are delimited by one or more characters in separator. For more information, see the Remarks section. Split(Char[], Int32) Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return. Declaration public extern string[] Split(char[] separator, int count) Parameters Type Name Description Char [] separator A character array that delimits the substrings in this string, an empty array that contains no delimiters, or null. Int32 count The maximum number of substrings to return. Returns Type Description String [] An array whose elements contain the substrings in this instance that are delimited by one or more characters in separator. For more information, see the Remarks section. | Improve this Doc View Source StartsWith(String) Determines whether the beginning of this string instance matches the specified string. Declaration public bool StartsWith(string value) Parameters Type Name Description String value The string to compare. Returns Type Description Boolean true if value matches the beginning of this string; otherwise, false . Exceptions Type Condition ArgumentNullException value is null . Substring(Int32) Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string. Declaration public extern string Substring(int startIndex) Parameters Type Name Description Int32 startIndex The zero-based starting character position of a substring in this instance. Returns Type Description String A string that is equivalent to the substring that begins at startIndex in this instance, or Empty if startIndex is equal to the length of this instance. Substring(Int32, Int32) Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length. Declaration public extern string Substring(int startIndex, int length) Parameters Type Name Description Int32 startIndex The zero-based starting character position of a substring in this instance. Int32 length The number of characters in the substring. Returns Type Description String A string that is equivalent to the substring of length length that begins at startIndex in this instance, or Empty if startIndex is equal to the length of this instance and length is zero. ToCharArray() Copies the characters in this instance to a Unicode character array. Declaration public extern char[] ToCharArray() Returns Type Description Char [] A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length. ToCharArray(Int32, Int32) Copies the characters in a specified substring in this instance to a Unicode character array. Declaration public extern char[] ToCharArray(int startIndex, int length) Parameters Type Name Description Int32 startIndex The starting position of a substring in this instance. Int32 length The length of the substring in this instance. Returns Type Description Char [] A Unicode character array whose elements are the length number of characters in this instance starting from character position startIndex. ToLower() Returns a copy of this string converted to lowercase. Declaration public extern string ToLower() Returns Type Description String A string in lowercase. | Improve this Doc View Source ToString() Returns this instance of String; no actual conversion is performed. Declaration public override string ToString() Returns Type Description String The current string. Overrides Object.ToString() ToUpper() Returns a copy of this string converted to uppercase. Declaration public extern string ToUpper() Returns Type Description String The uppercase equivalent of the current string. Trim() Removes all leading and trailing white-space characters from the current String object. Declaration public extern string Trim() Returns Type Description String The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. Trim(Char[]) Removes all leading and trailing occurrences of a set of characters specified in an array from the current String object. Declaration public extern string Trim(params char[] trimChars) Parameters Type Name Description Char [] trimChars An array of Unicode characters to remove, or null. Returns Type Description String The string that remains after all occurrences of the characters in the trimChars parameter are removed from the start and end of the current string. If trimChars is null or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. TrimEnd(Char[]) Removes all trailing occurrences of a set of characters specified in an array from the current String object. Declaration public extern string TrimEnd(params char[] trimChars) Parameters Type Name Description Char [] trimChars An array of Unicode characters to remove, or null. Returns Type Description String The string that remains after all occurrences of the characters in the trimChars parameter are removed from the end of the current string. If trimChars is null or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. TrimStart(Char[]) Removes all leading occurrences of a set of characters specified in an array from the current String object. Declaration public extern string TrimStart(params char[] trimChars) Parameters Type Name Description Char [] trimChars An array of Unicode characters to remove, or null. Returns Type Description String The string that remains after all occurrences of characters in the trimChars parameter are removed from the start of the current string. If trimChars is null or an empty array, white-space characters are removed instead. Operators Equality(String, String) Determines whether two specified strings have the same value. Declaration public static extern bool operator ==(string a, string b) Parameters Type Name Description String a The first string to compare, or null. String b The second string to compare, or null. Returns Type Description Boolean true if the value of a is the same as the value of b; otherwise, false. Inequality(String, String) Determines whether two specified strings have different values. Declaration public static extern bool operator !=(string a, string b) Parameters Type Name Description String a The first string to compare, or null. String b The second string to compare, or null. Returns Type Description Boolean true if the value of a is different from the value of b; otherwise, false. Implements IComparable IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.SystemException.html": {
    "href": "api/System.SystemException.html",
    "title": "Class SystemException | nanoFramework Documentation",
    "keywords": "Class SystemException Serves as the base class for system exceptions namespace. Inheritance Object Exception SystemException AppDomainUnloadedException ArgumentException FormatException IndexOutOfRangeException InvalidCastException InvalidOperationException IOException NotImplementedException NotSupportedException NullReferenceException ObjectDisposedException OutOfMemoryException ThreadAbortException TimeoutException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class SystemException : Exception Constructors | Improve this Doc View Source SystemException() Initializes a new instance of the SystemException class. Declaration public SystemException() | Improve this Doc View Source SystemException(String) Initializes a new instance of the SystemException class with a specified error message. Declaration public SystemException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source SystemException(String, Exception) Initializes a new instance of the SystemException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public SystemException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.Decoder.html": {
    "href": "api/System.Text.Decoder.html",
    "title": "Class Decoder | nanoFramework Documentation",
    "keywords": "Class Decoder Converts a sequence of encoded bytes into a set of characters. Inheritance Object Decoder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text Assembly : nanoFramework.System.Text.dll Syntax public abstract class Decoder Methods | Improve this Doc View Source Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean) Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array. Declaration public abstract void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed) Parameters Type Name Description Byte [] bytes A byte array to convert. Int32 byteIndex The first element of bytes to convert. Int32 byteCount The number of elements of bytes to convert. Char [] chars An array to store the converted characters. Int32 charIndex The first element of chars in which data is stored. Int32 charCount The maximum number of elements of chars to use in the conversion. Boolean flush true to indicate that no further data is to be converted; otherwise, false. Int32 bytesUsed When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized. Int32 charsUsed When this method returns, contains the number of characters from chars that were produced by the conversion. This parameter is passed uninitialized. Boolean completed When this method returns, contains true if all the characters specified by byteCount were converted; otherwise, false. This parameter is passed uninitialized. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.Encoding.html": {
    "href": "api/System.Text.Encoding.html",
    "title": "Class Encoding | nanoFramework Documentation",
    "keywords": "Class Encoding Represents a character encoding. Inheritance Object Encoding UTF8Encoding Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text Assembly : nanoFramework.System.Text.dll Syntax [Serializable] public abstract class Encoding Properties | Improve this Doc View Source UTF8 Gets an encoding for the UTF-8 format. Declaration public static Encoding UTF8 { get; } Property Value Type Description Encoding An encoding for the UTF-8 format. Methods | Improve this Doc View Source GetBytes(String) When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes. Declaration public virtual byte[] GetBytes(string s) Parameters Type Name Description String s The string containing the characters to encode. Returns Type Description Byte [] A byte array containing the results of encoding the specified set of characters. | Improve this Doc View Source GetBytes(String, Int32, Int32, Byte[], Int32) When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array. Declaration public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) Parameters Type Name Description String s The string containing the set of characters to encode. Int32 charIndex The index of the first character to encode. Int32 charCount The number of characters to encode. Byte [] bytes The byte array to contain the resulting sequence of bytes. Int32 byteIndex The index at which to start writing the resulting sequence of bytes. Returns Type Description Int32 The actual number of bytes written into bytes. Exceptions Type Condition NotImplementedException | Improve this Doc View Source GetChars(Byte[]) When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters. Declaration public virtual char[] GetChars(byte[] bytes) Parameters Type Name Description Byte [] bytes The byte array containing the sequence of bytes to decode. Returns Type Description Char [] A character array containing the results of decoding the specified sequence of bytes. Exceptions Type Condition NotImplementedException | Improve this Doc View Source GetChars(Byte[], Int32, Int32) When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters. Declaration public virtual char[] GetChars(byte[] bytes, int byteIndex, int byteCount) Parameters Type Name Description Byte [] bytes The byte array containing the sequence of bytes to decode. Int32 byteIndex The index of the first byte to decode. Int32 byteCount The number of bytes to decode. Returns Type Description Char [] A character array containing the results of decoding the specified sequence of bytes. Exceptions Type Condition NotImplementedException | Improve this Doc View Source GetDecoder() When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters. Declaration public abstract Decoder GetDecoder() Returns Type Description Decoder A Decoder that converts an encoded sequence of bytes into a sequence of characters. | Improve this Doc View Source GetString(Byte[], Int32, Int32) When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a String . Declaration public virtual string GetString(byte[] bytes, int index, int count) Parameters Type Name Description Byte [] bytes The byte array containing the sequence of bytes to decode. Int32 index The index of the first byte to decode. Int32 count The number of bytes to decode. Returns Type Description String A String that contains the results of decoding the specified sequence of bytes. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.html": {
    "href": "api/System.Text.html",
    "title": "Namespace System.Text | nanoFramework Documentation",
    "keywords": "Namespace System.Text Classes Decoder Converts a sequence of encoded bytes into a set of characters. Encoding Represents a character encoding. StringBuilder A Micro Framework port of the Full Framework StringBuilder. Contributed by Julius Friedman. Represents a mutable string of characters. This class cannot be inherited. UTF8Encoding Represents a UTF-8 encoding of Unicode characters."
  },
  "api/System.Text.RegularExpressions.Capture.html": {
    "href": "api/System.Text.RegularExpressions.Capture.html",
    "title": "Class Capture | nanoFramework Documentation",
    "keywords": "Class Capture Represents the results from a single subexpression capture. System.Text.RegularExpressions. Capture respresents one substring to a single successful catpture Inheritance Object Capture Group Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax [Serializable] public class Capture Properties | Improve this Doc View Source Index Gets the index. Declaration public int Index { get; } Property Value Type Description Int32 | Improve this Doc View Source Length Gets the length. Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Value Gets the value. Declaration public string Value { get; } Property Value Type Description String Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents the current object. Overrides Object.ToString() Remarks Available only in mscorlib build with support for System.Reflection. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.RegularExpressions.CaptureCollection.html": {
    "href": "api/System.Text.RegularExpressions.CaptureCollection.html",
    "title": "Class CaptureCollection | nanoFramework Documentation",
    "keywords": "Class CaptureCollection Capture Collection Inheritance Object CaptureCollection Implements ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax [Serializable] public class CaptureCollection : ICollection, IEnumerable Properties | Improve this Doc View Source Count Gets the number of elements contained in the ICollection. Declaration public int Count { get; } Property Value Type Description Int32 The number of elements contained in the ICollection. | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean true if access to the ICollection is synchronized (thread safe); otherwise, false. | Improve this Doc View Source Item[Int32] Gets a capture element at a specific position. Declaration public Capture this[int i] { get; } Parameters Type Name Description Int32 i The position. Property Value Type Description Capture The capture element. | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public object SyncRoot { get; } Property Value Type Description Object An object that can be used to synchronize access to the ICollection. Methods | Improve this Doc View Source CopyTo(Array, Int32) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration public void CopyTo(Array array, int arrayIndex) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. Implements ICollection IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.RegularExpressions.Group.html": {
    "href": "api/System.Text.RegularExpressions.Group.html",
    "title": "Class Group | nanoFramework Documentation",
    "keywords": "Class Group Group class. Inheritance Object Capture Group Match Inherited Members Capture.Index Capture.Length Capture.Value Capture.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax [Serializable] public class Group : Capture Properties | Improve this Doc View Source Captures Declaration public CaptureCollection Captures { get; } Property Value Type Description CaptureCollection | Improve this Doc View Source Success Gets a value indicating whether the match was successful. Declaration public bool Success { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Synchronized(Group) Synchronized Declaration public static Group Synchronized(Group inner) Parameters Type Name Description Group inner The inner group Returns Type Description Group Group Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.RegularExpressions.GroupCollection.html": {
    "href": "api/System.Text.RegularExpressions.GroupCollection.html",
    "title": "Class GroupCollection | nanoFramework Documentation",
    "keywords": "Class GroupCollection Group Collection class Inheritance Object GroupCollection Implements ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax [Serializable] public class GroupCollection : ICollection, IEnumerable Properties | Improve this Doc View Source Count Gets the number of elements contained in the ICollection. Declaration public int Count { get; } Property Value Type Description Int32 The number of elements contained in the ICollection. | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the ICollection is synchronized (thread safe). Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean true if access to the ICollection is synchronized (thread safe); otherwise, false. | Improve this Doc View Source Item[Int32] Gets the group element at a specific position. Declaration public Group this[int groupnum] { get; } Parameters Type Name Description Int32 groupnum The position Property Value Type Description Group The group element | Improve this Doc View Source Item[String] Gets the group element at a specific position. Declaration public Group this[string groupname] { get; } Parameters Type Name Description String groupname The position Property Value Type Description Group The group element | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the ICollection. Declaration public object SyncRoot { get; } Property Value Type Description Object An object that can be used to synchronize access to the ICollection. Methods | Improve this Doc View Source CopyTo(Array, Int32) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration public void CopyTo(Array array, int arrayIndex) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. Implements ICollection IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.RegularExpressions.html": {
    "href": "api/System.Text.RegularExpressions.html",
    "title": "Namespace System.Text.RegularExpressions | nanoFramework Documentation",
    "keywords": "Namespace System.Text.RegularExpressions Classes Capture Represents the results from a single subexpression capture. System.Text.RegularExpressions. Capture respresents one substring to a single successful catpture CaptureCollection Capture Collection Group Group class. GroupCollection Group Collection class Match Represents the results from a single regular expression match. MatchCollection Regex A lightweight Regular Expression Engine and Parser. Contributed by Julius Friedman RegexCompiler A regular expression compiler class. This class compiles a pattern string into a regular expression program interpretable by the RE evaluator class. The 'recompile' command line tool uses this compiler to pre-compile regular expressions for use with RE. For a description of the syntax accepted by RECompiler and what you can do with regular expressions, see the documentation for the RE matcher class. RegexpSyntaxException Exception thrown to indicate a syntax error in a regular expression. This is a non-checked exception because you should only have problems compiling a regular expression during development. If you are making regular expresion programs dynamically then you can catch it if you wish. But should not be forced to. Enums RegexOptions Options which can be applied to a RegularExpression ReplaceOptions Replace options Delegates MatchEvaluator MAtch evaluator"
  },
  "api/System.Text.RegularExpressions.Match.html": {
    "href": "api/System.Text.RegularExpressions.Match.html",
    "title": "Class Match | nanoFramework Documentation",
    "keywords": "Class Match Represents the results from a single regular expression match. Inheritance Object Capture Group Match Inherited Members Group.Captures Group.Success Group.Synchronized(Group) Capture.Index Capture.Length Capture.Value Capture.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax [Serializable] public class Match : Group Properties | Improve this Doc View Source Empty Gets and empty match. Declaration public static Match Empty { get; } Property Value Type Description Match | Improve this Doc View Source Groups Gets a group collection. Declaration public virtual GroupCollection Groups { get; } Property Value Type Description GroupCollection Methods | Improve this Doc View Source NextMatch() Gets the next match Declaration public Match NextMatch() Returns Type Description Match the next match or this one if not any | Improve this Doc View Source Result(String) Gets the result of the replacement Declaration public virtual string Result(string replacement) Parameters Type Name Description String replacement The replacement string Returns Type Description String The string replaced | Improve this Doc View Source Synchronized(Match) Synchronized the match. Declaration public static Match Synchronized(Match inner) Parameters Type Name Description Match inner The inner match. Returns Type Description Match The syncrhonized match Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.RegularExpressions.MatchCollection.html": {
    "href": "api/System.Text.RegularExpressions.MatchCollection.html",
    "title": "Class MatchCollection | nanoFramework Documentation",
    "keywords": "Class MatchCollection Inheritance Object MatchCollection Implements ICollection IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax [Serializable] public class MatchCollection : ICollection, IEnumerable Properties | Improve this Doc View Source Count Gets the number of matches. Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source IsReadOnly Gets a value that indicates whether the collection is read only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSynchronized Gets a value indicating whether access to the collection is synchronized (thread-safe). Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Gets an individual member of the collection. Declaration public virtual Match this[int i] { get; } Parameters Type Name Description Int32 i Property Value Type Description Match | Improve this Doc View Source SyncRoot Gets an object that can be used to synchronize access to the collection. Declaration public object SyncRoot { get; } Property Value Type Description Object Methods | Improve this Doc View Source CopyTo(Array, Int32) Copies the elements of the ICollection to an Array, starting at a particular Array index. Declaration public void CopyTo(Array array, int arrayIndex) Parameters Type Name Description Array array The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. Int32 arrayIndex | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through a collection. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator An IEnumerator object that can be used to iterate through the collection. Implements ICollection IEnumerable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.RegularExpressions.MatchEvaluator.html": {
    "href": "api/System.Text.RegularExpressions.MatchEvaluator.html",
    "title": "Delegate MatchEvaluator | nanoFramework Documentation",
    "keywords": "Delegate MatchEvaluator MAtch evaluator Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax public delegate string MatchEvaluator(Match match); Parameters Type Name Description Match match The match to evaluate Returns Type Description String The evaluation Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.RegularExpressions.Regex.html": {
    "href": "api/System.Text.RegularExpressions.Regex.html",
    "title": "Class Regex | nanoFramework Documentation",
    "keywords": "Class Regex A lightweight Regular Expression Engine and Parser. Contributed by Julius Friedman Inheritance Object Regex Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax public sealed class Regex Constructors | Improve this Doc View Source Regex() Internal use only. Constructs a regular expression matcher with no initial program. This is likely to be an uncommon practice, but is still supported. Declaration public Regex() | Improve this Doc View Source Regex(String) Constructs a regular expression matcher from a String by compiling it using a new instance of RECompiler. If you will be compiling many expressions, you may prefer to use a single RECompiler object instead. Declaration public Regex(string pattern) Parameters Type Name Description String pattern he regular expression pattern to compile. | Improve this Doc View Source Regex(String, RegexOptions) Constructs a regular expression matcher from a String by compiling it using a new instance of RECompiler. If you will be compiling many expressions, you may prefer to use a single RECompiler object instead. Declaration public Regex(string pattern, RegexOptions matchFlags) Parameters Type Name Description String pattern The regular expression pattern to compile. RegexOptions matchFlags The MatchOptions Properties | Improve this Doc View Source CacheSize The size of the Regex Cache indicating how many RegexProgram's will be stored in the Stack for later use. Declaration public static int CacheSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Options The Match Options of this Regular Expression Declaration public RegexOptions Options { get; set; } Property Value Type Description RegexOptions Methods | Improve this Doc View Source Escape(String) Escapes a minimal set of characters (, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters. Declaration public static string Escape(string input) Parameters Type Name Description String input The input string to escape Returns Type Description String The escaped input string | Improve this Doc View Source GetMatches(String) Returns an array of Strings, whose ToString representation matches a regular expression. This method works like the Perl function of the same name. Given a regular expression of \"a*b\" and an array of String objects of [foo, aab, zzz, aaaab], the array of Strings returned by grep would be [aab, aaaab]. Declaration public string[] GetMatches(string search) Parameters Type Name Description String search string to search Returns Type Description String [] Array of Strings whose value matches this regular expression | Improve this Doc View Source GetMatches(String[]) Returns an array of Strings, whose ToString representation matches a regular expression. This method works like the Perl function of the same name. Given a regular expression of \"a*b\" and an array of String objects of [foo, aab, zzz, aaaab], the array of Strings returned by grep would be [aab, aaaab]. Declaration public string[] GetMatches(string[] search) Parameters Type Name Description String [] search Array of string to search Returns Type Description String [] Array of Strings whose value matches this regular expression | Improve this Doc View Source GetMatches(String[], Int32, Int32) Returns an array of Strings, whose ToString representation matches a regular expression. This method works like the Perl function of the same name. Given a regular expression of \"a*b\" and an array of String objects of [foo, aab, zzz, aaaab], the array of Strings returned by grep would be [aab, aaaab]. Declaration public string[] GetMatches(string[] search, int start, int length) Parameters Type Name Description String [] search Array of string to search Int32 start Start index Int32 length The length Returns Type Description String [] Array of Strings whose value matches this regular expression | Improve this Doc View Source IsMatch(String) Matches the current regular expression program against a String. Declaration public bool IsMatch(string search) Parameters Type Name Description String search String to match against Returns Type Description Boolean True if search string matched | Improve this Doc View Source IsMatch(String, Int32) Matches the current regular expression program against a character array,starting at a given index. Declaration public bool IsMatch(string search, int i) Parameters Type Name Description String search String to match against Int32 i Index to start searching at Returns Type Description Boolean True if string matched | Improve this Doc View Source Match(String) Searches the specified input string for the first occurrence of the regular expression specified in the Regex constructor. Declaration public Match Match(string input) Parameters Type Name Description String input Returns Type Description Match A Match | Improve this Doc View Source Match(String, Int32) Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string. Declaration public Match Match(string input, int startat) Parameters Type Name Description String input Int32 startat Returns Type Description Match | Improve this Doc View Source Match(String, String) Searches the specified input string for the first occurrence of the specified regular expression. Declaration public static Match Match(string input, string pattern) Parameters Type Name Description String input The string to match against String pattern The pattern to match Returns Type Description Match A Match representing the first match from the input against the pattern | Improve this Doc View Source Match(String, String, RegexOptions) Searches the specified input string for the first occurrence of the specified regular expression. Declaration public static Match Match(string input, string pattern, RegexOptions options) Parameters Type Name Description String input The string to match against String pattern The pattern to match RegexOptions options RegexOptions to utilize during the Match process Returns Type Description Match A Match representing the first match from the input against the pattern with the specified options | Improve this Doc View Source Matches(String) Searches the specified input string for all occurrences of a regular expression. Declaration public MatchCollection Matches(string input) Parameters Type Name Description String input The input string to match against Returns Type Description MatchCollection A Collection of Matches from the input | Improve this Doc View Source Matches(String, Int32) Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string. Declaration public MatchCollection Matches(string input, int startat) Parameters Type Name Description String input The string to match against Int32 startat The position to start matching at Returns Type Description MatchCollection A Collection of Matches from the input | Improve this Doc View Source Matches(String, String) Searches the specified input string for all occurrences of a regular expression. Declaration public static MatchCollection Matches(string input, string pattern) Parameters Type Name Description String input The string to match against String pattern The pattern to match Returns Type Description MatchCollection A Collection of Matches from the input | Improve this Doc View Source Matches(String, String, RegexOptions) Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string. Declaration public static MatchCollection Matches(string input, string pattern, RegexOptions options) Parameters Type Name Description String input The string to match against String pattern The pattern to match RegexOptions options RegexOptions to utilize during the Match process Returns Type Description MatchCollection A Collection of Matches from the input | Improve this Doc View Source Replace(String, String) Substitutes a string for this regular expression in another string. This method works like the Perl function of the same name. Given a regular expression of \"a*b\", a String to substituteIn of \"aaaabfooaaabgarplyaaabwackyb\" and the substitution String \"-\", the resulting String returned by Substring would be \"-foo-garply-wacky-\". Declaration public string Replace(string substituteIn, string substitution) Parameters Type Name Description String substituteIn String to substitute within String substitution String to substitute for all matches of this regular expression. Returns Type Description String The string substituteIn with zero or more occurrences of the current regular expression replaced with the substitution String (if this regular expression object doesn't match at any position, the original String is returned unchanged). | Improve this Doc View Source Replace(String, String, Int32, Int32) Substitutes a string for this regular expression in another string. This method works like the Perl function of the same name. Given a regular expression of \"a*b\", a String to substituteIn of \"aaaabfooaaabgarplyaaabwackyb\" and the substitution String \"-\", the resulting String returned by subst would be \"-foo-garply-wacky-\". It is also possible to reference the contents of a parenthesized expression with $0, $1, ... $9. A regular expression of \"http://[\\\\.\\\\w\\\\-\\\\?/~_@&=%]+\", a String to substituteIn of \"visit us: http://www.apache.org!\" and the substitution String \"<a href=\\\"$0\\\">$0</a>\", the resulting String returned by subst would be \"visit us: <a href=\\\"http://www.apache.org\\\">http://www.apache.org</a>!\". Note: $0 represents the whole match. Declaration public string Replace(string substituteIn, string substitution, int maxOccurances, int start) Parameters Type Name Description String substituteIn String to substitute within String substitution String to substitute for matches of this regular expression Int32 maxOccurances Maximum number of occurrences Int32 start Start index Returns Type Description String The string substituteIn with zero or more occurrences of the current regular expression replaced with the substitution String (if this regular expression object doesn't match at any position, the original String is returned unchanged). | Improve this Doc View Source Split(String) Splits a string into an array of strings on regular expression boundaries. This function works the same way as the Perl function of the same name. Given a regular expression of \"[ab]+\" and a string to split of \"xyzzyababbayyzabbbab123\", the result would be the array of Strings \"[xyzzy, yyz, 123]\". Please note that the first string in the resulting array may be an empty string. This happens when the very first character of input string is matched by the pattern. Declaration public string[] Split(string s) Parameters Type Name Description String s String to split on this regular exression Returns Type Description String [] Array of strings | Improve this Doc View Source Split(String, Int32) Splits a string into an array of strings on regular expression boundaries. This function works the same way as the Perl function of the same name. Given a regular expression of \"[ab]+\" and a string to split of \"xyzzyababbayyzabbbab123\", the result would be the array of Strings \"[xyzzy, yyz, 123]\". Please note that the first string in the resulting array may be an empty string. This happens when the very first character of input string is matched by the pattern. Declaration public string[] Split(string s, int maxMatches) Parameters Type Name Description String s String to split on this regular exression Int32 maxMatches The maximum number of matches to split Returns Type Description String [] Array of strings | Improve this Doc View Source Split(String, Int32, Int32, Int32) Splits a string into an array of strings on regular expression boundaries. This function works the same way as the Perl function of the same name. Given a regular expression of \"[ab]+\" and a string to split of \"xyzzyababbayyzabbbab123\", the result would be the array of Strings \"[xyzzy, yyz, 123]\". Please note that the first string in the resulting array may be an empty string. This happens when the very first character of input string is matched by the pattern. Declaration public string[] Split(string s, int maxMatches, int start, int length) Parameters Type Name Description String s String to split on this regular expression. Int32 maxMatches The maximum number of matches to split. Int32 start The offset in the string to start at. Int32 length The maximum length in the string that should parsed. Returns Type Description String [] Array of strings | Improve this Doc View Source Split(String, String, RegexOptions) Splits the input string at the positions defined by a specified regular expression pattern. Specified options modify the matching operation. Declaration public static string[] Split(string pattern, string split, RegexOptions options) Parameters Type Name Description String pattern The pattern to match against String split The string to split RegexOptions options The options to utilize during matching Returns Type Description String [] The result of splitting the input string against the pattern | Improve this Doc View Source Split(String, RegexOptions, String, Int32, Int32) Splits the input string at the positions defined by a specified regular expression pattern. Specified options modify the matching operation. Declaration public static string[] Split(string pattern, RegexOptions options, string split, int start, int maxOccurances) Parameters Type Name Description String pattern The pattern to match against RegexOptions options The options to utilize during matching String split The string to split Int32 start the start position in the input Int32 maxOccurances the maximum amount of splits to perform Returns Type Description String [] | Improve this Doc View Source Split(Regex, String, Int32, Int32) Splits the input string at the positions defined by a specified regular expression pattern. Specified options modify the matching operation. Declaration public static string[] Split(Regex regex, string input, int count, int startat) Parameters Type Name Description Regex regex The Regex to use to Split the input string String input The input string Int32 count The amount of Splits to perform Int32 startat The start index in the input Returns Type Description String [] The result of splitting the input string against the Regexp | Improve this Doc View Source ToFullRegularExpression(String) Converts a 'simplified' regular expression to a full regular expression Declaration public static string ToFullRegularExpression(string simplePattern) Parameters Type Name Description String simplePattern The pattern to convert Returns Type Description String The full regular expression | Improve this Doc View Source ToString() Provides a string representation of the pattern this Regular Expression is matching Declaration public override string ToString() Returns Type Description String The Pattern of this Regular Expression Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.RegularExpressions.RegexCompiler.html": {
    "href": "api/System.Text.RegularExpressions.RegexCompiler.html",
    "title": "Class RegexCompiler | nanoFramework Documentation",
    "keywords": "Class RegexCompiler A regular expression compiler class. This class compiles a pattern string into a regular expression program interpretable by the RE evaluator class. The 'recompile' command line tool uses this compiler to pre-compile regular expressions for use with RE. For a description of the syntax accepted by RECompiler and what you can do with regular expressions, see the documentation for the RE matcher class. Inheritance Object RegexCompiler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax public class RegexCompiler Constructors | Improve this Doc View Source RegexCompiler() Constructor. Creates (initially empty) storage for a regular expression program. Declaration public RegexCompiler() Properties | Improve this Doc View Source Instructions Gets the instructions. Declaration public char[] Instructions { get; } Property Value Type Description Char [] | Improve this Doc View Source Pattern Gets the pattern Declaration public string Pattern { get; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.RegularExpressions.RegexOptions.html": {
    "href": "api/System.Text.RegularExpressions.RegexOptions.html",
    "title": "Enum RegexOptions | nanoFramework Documentation",
    "keywords": "Enum RegexOptions Options which can be applied to a RegularExpression Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax [Flags] public enum RegexOptions Fields Name Description Compiled CultureInvariant ECMAScript ExplicitCapture IgnoreCase IgnorePatternWhitespace Multiline None Singleline Timed Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Text.RegularExpressions.RegexpSyntaxException.html": {
    "href": "api/System.Text.RegularExpressions.RegexpSyntaxException.html",
    "title": "Class RegexpSyntaxException | nanoFramework Documentation",
    "keywords": "Class RegexpSyntaxException Exception thrown to indicate a syntax error in a regular expression. This is a non-checked exception because you should only have problems compiling a regular expression during development. If you are making regular expresion programs dynamically then you can catch it if you wish. But should not be forced to. Inheritance Object Exception RegexpSyntaxException Inherited Members Exception.HResult Exception.ToString() Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax public class RegexpSyntaxException : Exception Constructors | Improve this Doc View Source RegexpSyntaxException(String) Constructor Declaration public RegexpSyntaxException(string s) Parameters Type Name Description String s Further description of the syntax error Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.RegularExpressions.ReplaceOptions.html": {
    "href": "api/System.Text.RegularExpressions.ReplaceOptions.html",
    "title": "Enum ReplaceOptions | nanoFramework Documentation",
    "keywords": "Enum ReplaceOptions Replace options Namespace : System.Text.RegularExpressions Assembly : System.Text.RegularExpressions.dll Syntax [Flags] public enum ReplaceOptions Fields Name Description ReplaceAll Flag bit that indicates that subst should replace all occurrences of this regular expression. ReplaceBackrefrences Flag bit that indicates that subst should replace backreferences ReplaceFirst Flag bit that indicates that subst should only replace the first occurrence of this regular expression. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Text.StringBuilder.html": {
    "href": "api/System.Text.StringBuilder.html",
    "title": "Class StringBuilder | nanoFramework Documentation",
    "keywords": "Class StringBuilder A Micro Framework port of the Full Framework StringBuilder. Contributed by Julius Friedman. Represents a mutable string of characters. This class cannot be inherited. Inheritance Object StringBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text Assembly : nanoFramework.System.Text.dll Syntax public sealed class StringBuilder Constructors | Improve this Doc View Source StringBuilder() Initializes a new instance of the StringBuilder class. Declaration public StringBuilder() | Improve this Doc View Source StringBuilder(Int32) Initializes a new instance of the StringBuilder class using the specified capacity. Declaration public StringBuilder(int capacity) Parameters Type Name Description Int32 capacity The suggested starting size of this instance. | Improve this Doc View Source StringBuilder(Int32, Int32) Initializes a new instance of the StringBuilder class that starts with a specified capacity and can grow to a specified maximum. Declaration public StringBuilder(int capacity, int maxCapacity) Parameters Type Name Description Int32 capacity The suggested starting size of the StringBuilder. Int32 maxCapacity The maximum number of characters the current string can contain. | Improve this Doc View Source StringBuilder(String) Initializes a new instance of the StringBuilder class using the specified string. Declaration public StringBuilder(string value) Parameters Type Name Description String value The string used to initialize the value of the instance. If value is null, the new StringBuilder will contain the empty string (that is, it contains Empty). | Improve this Doc View Source StringBuilder(String, Int32) Initializes a new instance of the StringBuilder class using the specified string and capacity. Declaration public StringBuilder(string value, int capacity) Parameters Type Name Description String value The string used to initialize the value of the instance. If value is null, the new StringBuilder will contain the empty string (that is, it contains Empty). Int32 capacity The suggested starting size of the StringBuilder. | Improve this Doc View Source StringBuilder(String, Int32, Int32, Int32) Initializes a new instance of the StringBuilder class from the specified substring and capacity. Declaration public StringBuilder(string value, int startIndex, int length, int capacity) Parameters Type Name Description String value The string that contains the substring used to initialize the value of this instance. If value is null, the new StringBuilder will contain the empty string (that is, it contains Empty). Int32 startIndex The position within value where the substring begins. Int32 length The number of characters in the substring. Int32 capacity The suggested starting size of the StringBuilder. Properties | Improve this Doc View Source Capacity Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance. Declaration public int Capacity { get; set; } Property Value Type Description Int32 The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from Length to MaxCapacity. Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source Item[Int32] Gets or sets the character at the specified character position in this instance. Declaration public char this[int index] { get; set; } Parameters Type Name Description Int32 index The position of the character. Property Value Type Description Char The Unicode character at position index. | Improve this Doc View Source Length Gets or sets the length of the current StringBuilder object. Declaration public int Length { get; set; } Property Value Type Description Int32 The length of this instance. Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source MaxCapacity Gets the maximum capacity of this instance. Declaration public int MaxCapacity { get; } Property Value Type Description Int32 The maximum number of characters this instance can hold. Methods | Improve this Doc View Source Append(Boolean) Appends the string representation of a specified Boolean value to this instance. Declaration public StringBuilder Append(bool value) Parameters Type Name Description Boolean value The Boolean value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Byte) Appends the string representation of a specified 8-bit unsigned integer to this instance. Declaration public StringBuilder Append(byte value) Parameters Type Name Description Byte value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Char) Appends the string representation of a specified Unicode character to this instance. Declaration public StringBuilder Append(char value) Parameters Type Name Description Char value The UTF-16-encoded code unit to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Char, Int32) Appends a specified number of copies of the string representation of a Unicode character to this instance. Declaration public StringBuilder Append(char value, int repeatCount) Parameters Type Name Description Char value The character to append. Int32 repeatCount The number of times to append value. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Char[]) Appends the string representation of the Unicode characters in a specified array to this instance. Declaration public StringBuilder Append(char[] value) Parameters Type Name Description Char [] value The array of characters to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Char[], Int32, Int32) Appends the string representation of a specified subarray of Unicode characters to this instance Declaration public StringBuilder Append(char[] value, int startIndex, int charCount) Parameters Type Name Description Char [] value A character array. Int32 startIndex The starting position in value. Int32 charCount The number of characters to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Double) Appends the string representation of a specified double-precision floating-point number to this instance. Declaration public StringBuilder Append(double value) Parameters Type Name Description Double value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Int16) Appends the string representation of a specified 16-bit signed integer to this instance. Declaration public StringBuilder Append(short value) Parameters Type Name Description Int16 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Int32) Appends the string representation of a specified 32-bit signed integer to this instance. Declaration public StringBuilder Append(int value) Parameters Type Name Description Int32 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Int64) Appends the string representation of a specified 64-bit unsigned integer to this instance. Declaration public StringBuilder Append(long value) Parameters Type Name Description Int64 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Object) Appends the string representation of a specified object to this instance. Declaration public StringBuilder Append(object value) Parameters Type Name Description Object value The object to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(SByte) Appends the string representation of a specified 8-bit signed integer to this instance. Declaration public StringBuilder Append(sbyte value) Parameters Type Name Description SByte value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(Single) Appends the string representation of a specified double-precision floating-point number to this instance. Declaration public StringBuilder Append(float value) Parameters Type Name Description Single value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(String) Appends a copy of the specified string to this instance. Declaration public StringBuilder Append(string value) Parameters Type Name Description String value The string to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(String, Int32, Int32) Appends a copy of a specified substring to this instance. Declaration public StringBuilder Append(string value, int startIndex, int count) Parameters Type Name Description String value The string that contains the substring to append. Int32 startIndex The starting position of the substring within value. Int32 count The number of characters in value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(UInt16) Appends the string representation of a specified 16-bit unsigned integer to this instance. Declaration public StringBuilder Append(ushort value) Parameters Type Name Description UInt16 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(UInt32) Appends the string representation of a specified 32-bit unsigned integer to this instance. Declaration public StringBuilder Append(uint value) Parameters Type Name Description UInt32 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source Append(UInt64) Appends the string representation of a specified 64-bit unsigned integer to this instance. Declaration public StringBuilder Append(ulong value) Parameters Type Name Description UInt64 value The value to append. Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source AppendLine() Appends the default line terminator to the end of the current StringBuilder object. Declaration public StringBuilder AppendLine() Returns Type Description StringBuilder A reference to this instance after the append operation has completed. | Improve this Doc View Source AppendLine(String) Appends a copy of the specified string followed by the default line terminator to the end of the current StringBuilder object. Declaration public StringBuilder AppendLine(string str) Parameters Type Name Description String str A reference to this instance after the append operation has completed. Returns Type Description StringBuilder | Improve this Doc View Source Clear() Removes all characters from the current StringBuilder instance. Declaration public StringBuilder Clear() Returns Type Description StringBuilder An object whose Length is 0 (zero). | Improve this Doc View Source Insert(Int32, Char[], Int32, Int32) Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position. Declaration public StringBuilder Insert(int index, char[] value, int startIndex, int charCount) Parameters Type Name Description Int32 index The position in this instance where insertion begins. Char [] value A character array. Int32 startIndex The starting index within value. Int32 charCount The number of characters to insert. Returns Type Description StringBuilder A reference to this instance after the insert operation has completed. | Improve this Doc View Source Insert(Int32, String, Int32) Inserts one or more copies of a specified string into this instance at the specified character position. Declaration public StringBuilder Insert(int index, string value, int count) Parameters Type Name Description Int32 index The position in this instance where insertion begins. String value The string to insert. Int32 count The number of times to insert value. Returns Type Description StringBuilder A reference to this instance after insertion has completed. | Improve this Doc View Source Remove(Int32, Int32) Removes the specified range of characters from this instance. Declaration public StringBuilder Remove(int startIndex, int length) Parameters Type Name Description Int32 startIndex The zero-based position in this instance where removal begins. Int32 length The number of characters to remove. Returns Type Description StringBuilder A reference to this instance after the excise operation has completed. | Improve this Doc View Source Replace(Char, Char) Replaces all occurrences of a specified character in this instance with another specified character. Declaration public StringBuilder Replace(char oldChar, char newChar) Parameters Type Name Description Char oldChar The character to replace. Char newChar The character that replaces oldChar. Returns Type Description StringBuilder A reference to this instance with oldChar replaced by newChar. | Improve this Doc View Source Replace(Char, Char, Int32, Int32) Replaces, within a substring of this instance, all occurrences of a specified character with another specified character. Declaration public StringBuilder Replace(char oldChar, char newChar, int startIndex, int count) Parameters Type Name Description Char oldChar The character to replace. Char newChar The character that replaces oldChar. Int32 startIndex The position in this instance where the substring begins. Int32 count The length of the substring. Returns Type Description StringBuilder A reference to this instance with oldChar replaced by newChar in the range from startIndex to startIndex + count -1. | Improve this Doc View Source Replace(String, String) Replaces all occurrences of a specified string in this instance with another specified string. Declaration public StringBuilder Replace(string oldValue, string newValue) Parameters Type Name Description String oldValue The string to replace. String newValue The string that replaces oldValue, or null. Returns Type Description StringBuilder A reference to this instance with all instances of oldValue replaced by newValue. | Improve this Doc View Source Replace(String, String, Int32, Int32) Replaces, within a substring of this instance, all occurrences of a specified string with another specified string. Declaration public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count) Parameters Type Name Description String oldValue The string to replace. String newValue The string that replaces oldValue, or null. Int32 startIndex The position in this instance where the substring begins. Int32 count The length of the substring. Returns Type Description StringBuilder A reference to this instance with all instances of oldValue replaced by newValue in the range from startIndex to startIndex + count - 1. | Improve this Doc View Source ToString() Converts the value of this instance to a String. (Overrides Object.ToString().) Declaration public override string ToString() Returns Type Description String A string whose value is the same as this instance. Overrides Object.ToString() | Improve this Doc View Source ToString(Int32, Int32) Converts the value of a substring of this instance to a String. Declaration public string ToString(int startIndex, int length) Parameters Type Name Description Int32 startIndex The starting position of the substring in this instance. Int32 length The length of the substring. Returns Type Description String A string whose value is the same as the specified substring of this instance. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Text.UTF8Encoding.html": {
    "href": "api/System.Text.UTF8Encoding.html",
    "title": "Class UTF8Encoding | nanoFramework Documentation",
    "keywords": "Class UTF8Encoding Represents a UTF-8 encoding of Unicode characters. Inheritance Object Encoding UTF8Encoding Inherited Members Encoding.GetString(Byte[], Int32, Int32) Encoding.UTF8 Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Text Assembly : nanoFramework.System.Text.dll Syntax public class UTF8Encoding : Encoding Constructors | Improve this Doc View Source UTF8Encoding() Represents a UTF-8 encoding of Unicode characters. Declaration public UTF8Encoding() Methods GetBytes(String) Declaration public extern override byte[] GetBytes(string s) Parameters Type Name Description String s Returns Type Description Byte [] Overrides Encoding.GetBytes(String) GetBytes(String, Int32, Int32, Byte[], Int32) Encodes a set of characters from the specified String into the specified byte array. Declaration public extern override int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex) Parameters Type Name Description String s The String containing the set of characters to encode. Int32 charIndex The index of the first character to encode. Int32 charCount The number of characters to encode. Byte [] bytes The byte array to contain the resulting sequence of bytes. Int32 byteIndex The index at which to start writing the resulting sequence of bytes. Returns Type Description Int32 The actual number of bytes written into bytes . Overrides Encoding.GetBytes(String, Int32, Int32, Byte[], Int32) GetChars(Byte[]) Decodes a sequence of bytes from the specified byte array into a set of characters. Declaration public extern override char[] GetChars(byte[] bytes) Parameters Type Name Description Byte [] bytes The byte array containing the sequence of bytes to decode. Returns Type Description Char [] The actual number of characters returned. Overrides Encoding.GetChars(Byte[]) GetChars(Byte[], Int32, Int32) Decodes a sequence of bytes from the specified byte array into a set of characters. Declaration public extern override char[] GetChars(byte[] bytes, int byteIndex, int byteCount) Parameters Type Name Description Byte [] bytes The byte array containing the sequence of bytes to decode. Int32 byteIndex The index of the first byte to decode. Int32 byteCount The number of bytes to decode. Returns Type Description Char [] The actual number of characters returned. Overrides Encoding.GetChars(Byte[], Int32, Int32) | Improve this Doc View Source GetDecoder() Obtains a decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters. Declaration public override Decoder GetDecoder() Returns Type Description Decoder A decoder that converts a UTF-8 encoded sequence of bytes into a sequence of Unicode characters. Overrides Encoding.GetDecoder() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Threading.AutoResetEvent.html": {
    "href": "api/System.Threading.AutoResetEvent.html",
    "title": "Class AutoResetEvent | nanoFramework Documentation",
    "keywords": "Class AutoResetEvent Notifies a waiting thread that an event has occurred. This class cannot be inherited. Inheritance Object MarshalByRefObject WaitHandle AutoResetEvent Inherited Members WaitHandle.WaitTimeout WaitHandle.WaitOne(Int32, Boolean) WaitHandle.WaitOne() WaitHandle.WaitAll(WaitHandle[], Int32, Boolean) WaitHandle.WaitAll(WaitHandle[]) WaitHandle.WaitAny(WaitHandle[], Int32, Boolean) WaitHandle.WaitAny(WaitHandle[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public sealed class AutoResetEvent : WaitHandle Constructors AutoResetEvent(Boolean) Initializes a new instance of the AutoResetEvent class with a Boolean value indicating whether to set the initial state to signaled. Declaration public extern AutoResetEvent(bool initialState) Parameters Type Name Description Boolean initialState true to set the initial state to signaled; false to set the initial state to non-signaled. Methods Reset() Sets the state of the event to nonsignaled, causing threads to block. Declaration public extern bool Reset() Returns Type Description Boolean true if the operation succeeds; otherwise, false. Set() Sets the state of the event to signaled, allowing one or more waiting threads to proceed. Declaration public extern bool Set() Returns Type Description Boolean true if the operation succeeds; otherwise, false. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Threading.html": {
    "href": "api/System.Threading.html",
    "title": "Namespace System.Threading | nanoFramework Documentation",
    "keywords": "Namespace System.Threading Classes AutoResetEvent Notifies a waiting thread that an event has occurred. This class cannot be inherited. Interlocked Provides atomic operations for variables that are shared by multiple threads. ManualResetEvent Notifies one or more waiting threads that an event has occurred. This class cannot be inherited. Monitor Provides a mechanism that synchronizes access to objects. Thread Creates and controls a thread, sets its priority, and gets its status. ThreadAbortException The exception that is thrown when a call is made to the Abort method. This class cannot be inherited. Timeout Contains constants that specify infinite time-out intervals. This class cannot be inherited. Timer Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited. WaitHandle Encapsulates operating system specific objects that wait for exclusive access to shared resources. Structs SpinWait Provides support for spin-based waiting. Enums ThreadPriority Specifies the scheduling priority of a Thread. ThreadState Specifies the execution states of a Thread. Delegates ThreadStart Represents the method that executes on a Thread. TimerCallback Represents the method that handles calls from a Timer."
  },
  "api/System.Threading.Interlocked.html": {
    "href": "api/System.Threading.Interlocked.html",
    "title": "Class Interlocked | nanoFramework Documentation",
    "keywords": "Class Interlocked Provides atomic operations for variables that are shared by multiple threads. Inheritance Object Interlocked Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public static class Interlocked Methods CompareExchange(ref Int32, Int32, Int32) Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value. Declaration public static extern int CompareExchange(ref int location1, int value, int comparand) Parameters Type Name Description Int32 location1 The destination, whose value is compared with comparand and possibly replaced. Int32 value The value that replaces the destination value if the comparison results in equality. Int32 comparand The value that is compared to the value at location1. Returns Type Description Int32 The original value in location1. Decrement(ref Int32) Decrements a specified variable and stores the result, as an atomic operation. Declaration public static extern int Decrement(ref int location) Parameters Type Name Description Int32 location The variable whose value is to be decremented. Returns Type Description Int32 The decremented value. Exchange(ref Int32, Int32) Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation. Declaration public static extern int Exchange(ref int location1, int value) Parameters Type Name Description Int32 location1 The variable to set to the specified value. Int32 value The value to which the location1 parameter is set. Returns Type Description Int32 The original value of location1. Increment(ref Int32) Increments a specified variable and stores the result, as an atomic operation. Declaration public static extern int Increment(ref int location) Parameters Type Name Description Int32 location The variable whose value is to be incremented. Returns Type Description Int32 The incremented value."
  },
  "api/System.Threading.ManualResetEvent.html": {
    "href": "api/System.Threading.ManualResetEvent.html",
    "title": "Class ManualResetEvent | nanoFramework Documentation",
    "keywords": "Class ManualResetEvent Notifies one or more waiting threads that an event has occurred. This class cannot be inherited. Inheritance Object MarshalByRefObject WaitHandle ManualResetEvent Inherited Members WaitHandle.WaitTimeout WaitHandle.WaitOne(Int32, Boolean) WaitHandle.WaitOne() WaitHandle.WaitAll(WaitHandle[], Int32, Boolean) WaitHandle.WaitAll(WaitHandle[]) WaitHandle.WaitAny(WaitHandle[], Int32, Boolean) WaitHandle.WaitAny(WaitHandle[]) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public sealed class ManualResetEvent : WaitHandle Constructors ManualResetEvent(Boolean) Initializes a new instance of the ManualResetEvent class with a Boolean value indicating whether to set the initial state to signaled. Declaration public extern ManualResetEvent(bool initialState) Parameters Type Name Description Boolean initialState true to set the initial state signaled; false to set the initial state to nonsignaled. Methods Reset() Sets the state of the event to nonsignaled, causing threads to block. Declaration public extern bool Reset() Returns Type Description Boolean true if the operation succeeds; otherwise, false. Set() Sets the state of the event to signaled, allowing one or more waiting threads to proceed. Declaration public extern bool Set() Returns Type Description Boolean true if the operation succeeds; otherwise, false. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Threading.Monitor.html": {
    "href": "api/System.Threading.Monitor.html",
    "title": "Class Monitor | nanoFramework Documentation",
    "keywords": "Class Monitor Provides a mechanism that synchronizes access to objects. Inheritance Object Monitor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public static class Monitor Methods Enter(Object) Acquires an exclusive lock on the specified object. Declaration public static extern void Enter(object obj) Parameters Type Name Description Object obj The object on which to acquire the monitor lock. Exit(Object) Releases an exclusive lock on the specified object. Declaration public static extern void Exit(object obj) Parameters Type Name Description Object obj The object on which to release the lock."
  },
  "api/System.Threading.SpinWait.html": {
    "href": "api/System.Threading.SpinWait.html",
    "title": "Struct SpinWait | nanoFramework Documentation",
    "keywords": "Struct SpinWait Provides support for spin-based waiting. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System.Threading Assembly : mscorlib.dll Syntax public struct SpinWait Remarks SpinWait encapsulates common spinning logic. On single-processor machines, yields are always used instead of busy waits, and on computers with Intel™ processors employing Hyper-Threading™ technology, it helps to prevent hardware thread starvation. SpinWait encapsulates a good mixture of spinning and true yielding. SpinWait is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads. SpinWait is not generally useful for ordinary applications. In most cases, you should use the synchronization classes provided by the .NET Framework, such as Monitor . For most purposes where spin waiting is required, however, the SpinWait type should be preferred over the SpinWait(Int32) method. While SpinWait is designed to be used in concurrent applications, it is not designed to be used from multiple threads concurrently. SpinWait's members are not thread-safe. If multiple threads must spin, each should use its own instance of SpinWait. Methods SpinOnce() Performs a single spin. Declaration public extern void SpinOnce() Remarks This is typically called in a loop, and may change in behavior based on the number of times a SpinOnce() has been called thus far on this instance. SpinUntil(Int32) Spins until the specified timeout is expired. Declaration public static extern void SpinUntil(int millisecondsTimeout) Parameters Type Name Description Int32 millisecondsTimeout The number of milliseconds to wait. Exceptions Type Condition ArgumentOutOfRangeException millisecondsTimeout is a negative number other than -1, which represents an infinite time-out. SpinUntil(TimeSpan) Spins until the specified timeout is expired. Declaration public static extern void SpinUntil(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout A TimeSpan that represents the number of milliseconds to wait. Exceptions Type Condition ArgumentOutOfRangeException timeout is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than MaxValue ."
  },
  "api/System.Threading.Thread.html": {
    "href": "api/System.Threading.Thread.html",
    "title": "Class Thread | nanoFramework Documentation",
    "keywords": "Class Thread Creates and controls a thread, sets its priority, and gets its status. Inheritance Object Thread Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public sealed class Thread Constructors Thread(ThreadStart) Initializes a new instance of the Thread class. Declaration public extern Thread(ThreadStart start) Parameters Type Name Description ThreadStart start A ThreadStart delegate that represents the methods to be invoked when this thread begins executing. Properties CurrentThread Gets the currently running thread. Declaration public static Thread CurrentThread { get; } Property Value Type Description Thread A Thread that is the representation of the currently running thread. IsAlive Gets a value indicating the execution status of the current thread. Declaration public bool IsAlive { get; } Property Value Type Description Boolean true if this thread has been started and has not terminated normally or aborted; otherwise, false. ManagedThreadId Gets a unique identifier for the current managed thread. Declaration public int ManagedThreadId { get; } Property Value Type Description Int32 An integer that represents a unique identifier for this managed thread. Priority Gets or sets a value indicating the scheduling priority of a thread. Declaration public ThreadPriority Priority { get; set; } Property Value Type Description ThreadPriority One of the ThreadPriority values. The default value is ThreadPriority.Normal. ThreadState Gets a value containing the states of the current thread. Declaration public ThreadState ThreadState { get; } Property Value Type Description ThreadState One of the ThreadState values indicating the state of the current thread. The initial value is Unstarted. Methods Abort() Raises a ThreadAbortException in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread. Declaration public extern void Abort() Join() Blocks the calling thread until the thread represented by this instance terminates, while continuing to perform standard COM and SendMessage pumping. Declaration public extern void Join() Join(Int32) Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping. Declaration public extern bool Join(int millisecondsTimeout) Parameters Type Name Description Int32 millisecondsTimeout The number of milliseconds to wait for the thread to terminate. Returns Type Description Boolean true if the thread has terminated; false if the thread has not terminated after the amount of time specified by the millisecondsTimeout parameter has elapsed. Join(TimeSpan) Blocks the calling thread until the thread represented by this instance terminates or the specified time elapses, while continuing to perform standard COM and SendMessage pumping. Declaration public extern bool Join(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout A TimeSpan set to the amount of time to wait for the thread to terminate. Returns Type Description Boolean true if the thread terminated; false if the thread has not terminated after the amount of time specified by the timeout parameter has elapsed. Resume() Obsolete : Resumes a thread that has been suspended. Declaration public extern void Resume() Sleep(Int32) Suspends the current thread for the specified number of milliseconds. Declaration public static extern void Sleep(int millisecondsTimeout) Parameters Type Name Description Int32 millisecondsTimeout The number of milliseconds for which the thread is suspended. If the value of the millisecondsTimeout argument is zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended. Remarks The thread will not be scheduled for execution by the operating system for the amount of time specified. You can specify Timeout.Infinite for the millisecondsTimeout parameter to suspend the thread indefinitely. However, we recommend that you use other System.Threading classes such as AutoResetEvent , ManualResetEvent , Monitor or WaitHandle instead to synchronize threads or manage resources. The system clock ticks at a specific rate called the clock resolution. The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks. | Improve this Doc View Source Sleep(TimeSpan) Suspends the current thread for the specified amount of time. Declaration public static void Sleep(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout The amount of time for which the thread is suspended. If the value of the timeout argument is Zero, the thread relinquishes the remainder of its time slice to any thread of equal priority that is ready to run. If there are no other threads of equal priority that are ready to run, execution of the current thread is not suspended. Remarks The thread will not be scheduled for execution by the operating system for the amount of time specified. You can specify Infinite for the timeout parameter to suspend the thread indefinitely. However, we recommend that you use other System.Threading classes such as AutoResetEvent , ManualResetEvent , Monitor or WaitHandle instead to synchronize threads or manage resources. The system clock ticks at a specific rate called the clock resolution. The actual timeout might not be exactly the specified timeout, because the specified timeout will be adjusted to coincide with clock ticks. SpinWait(Int32) Causes a thread to wait the number of times defined by the iterations parameter. Declaration public static extern void SpinWait(int iterations) Parameters Type Name Description Int32 iterations A 32-bit signed integer that defines how long a thread is to wait. Remarks The SpinWait(Int32) method is useful for implementing locks. Classes in the .NET Framework, such as Monitor use this method internally. SpinWait(Int32) essentially puts the processor into a very tight loop, with the loop count specified by the iterations parameter. The duration of the wait therefore depends on the speed of the processor. Contrast this with the Sleep(Int32) method. A thread that calls Sleep(Int32) yields the rest of its current slice of processor time, even if the specified interval is zero. Specifying a non-zero interval for Sleep(Int32) removes the thread from consideration by the thread scheduler until the time interval has elapsed. Start() Causes the operating system to change the state of the current instance to ThreadState.Running. Declaration public extern void Start() Suspend() Either suspends the thread, or if the thread is already suspended, has no effect. Declaration public extern void Suspend() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Threading.ThreadAbortException.html": {
    "href": "api/System.Threading.ThreadAbortException.html",
    "title": "Class ThreadAbortException | nanoFramework Documentation",
    "keywords": "Class ThreadAbortException The exception that is thrown when a call is made to the Abort method. This class cannot be inherited. Inheritance Object Exception SystemException ThreadAbortException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public sealed class ThreadAbortException : SystemException Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Threading.ThreadPriority.html": {
    "href": "api/System.Threading.ThreadPriority.html",
    "title": "Enum ThreadPriority | nanoFramework Documentation",
    "keywords": "Enum ThreadPriority Specifies the scheduling priority of a Thread. Namespace : System.Threading Assembly : mscorlib.dll Syntax public enum ThreadPriority Fields Name Description AboveNormal The Thread can be scheduled after threads with Highest priority and before those with Normal priority. BelowNormal The Thread can be scheduled after threads with Normal priority and before those with Lowest priority. Highest The Thread can be scheduled before threads with any other priority. Lowest The Thread can be scheduled after threads with any other priority. Normal The Thread can be scheduled after threads with AboveNormal priority and before those with BelowNormal priority. Threads have Normal priority by default."
  },
  "api/System.Threading.ThreadStart.html": {
    "href": "api/System.Threading.ThreadStart.html",
    "title": "Delegate ThreadStart | nanoFramework Documentation",
    "keywords": "Delegate ThreadStart Represents the method that executes on a Thread. Namespace : System.Threading Assembly : mscorlib.dll Syntax public delegate void ThreadStart(); Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Threading.ThreadState.html": {
    "href": "api/System.Threading.ThreadState.html",
    "title": "Enum ThreadState | nanoFramework Documentation",
    "keywords": "Enum ThreadState Specifies the execution states of a Thread. Namespace : System.Threading Assembly : mscorlib.dll Syntax public enum ThreadState Fields Name Description Aborted The thread state includes AbortRequested and the thread is now dead, but its state has not yet changed to Stopped. AbortRequested The Thread.Abort method has been invoked on the thread, but the thread has not yet received the pending System.Threading.ThreadAbortException that will attempt to terminate it. Background The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the Thread.IsBackground property. Running The thread has been started, it is not blocked, and there is no pending ThreadAbortException. Stopped The thread has stopped. StopRequested The thread is being requested to stop. This is for internal use only. Suspended The thread has been suspended. SuspendRequested The thread is being requested to suspend. Unstarted The Thread.Start method has not been invoked on the thread. WaitSleepJoin The thread is blocked. This could be the result of calling Thread.Sleep or Thread.Join, of requesting a lock � for example, by calling Monitor.Enter or Monitor.Wait or of waiting on a thread synchronization object such as ManualResetEvent."
  },
  "api/System.Threading.Timeout.html": {
    "href": "api/System.Threading.Timeout.html",
    "title": "Class Timeout | nanoFramework Documentation",
    "keywords": "Class Timeout Contains constants that specify infinite time-out intervals. This class cannot be inherited. Inheritance Object Timeout Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public static class Timeout Fields | Improve this Doc View Source Infinite A constant used to specify an infinite waiting period, for threading methods that accept an Int32 parameter. Declaration public const int Infinite = -1 Field Value Type Description Int32 Remarks The value of this field is -1 (0xFFFFFFFF). | Improve this Doc View Source InfiniteTimeSpan A constant used to specify an infinite waiting period, for methods that accept a TimeSpan parameter. Declaration public static readonly TimeSpan InfiniteTimeSpan Field Value Type Description TimeSpan Remarks For threading methods that accept a timeout parameter of type TimeSpan , such as Sleep(TimeSpan) and Join(TimeSpan) , this value is used to suspend the thread indefinitely. However, in most cases, we recommend that you use other System.Threading classes such as AutoResetEvent , ManualResetEvent , Monitor or WaitHandle instead to synchronize threads or manage resources. The value of this field is -00:00:00.0010000, or -1 millisecond."
  },
  "api/System.Threading.Timer.html": {
    "href": "api/System.Threading.Timer.html",
    "title": "Class Timer | nanoFramework Documentation",
    "keywords": "Class Timer Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited. Inheritance Object MarshalByRefObject Timer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public sealed class Timer : MarshalByRefObject, IDisposable Constructors Timer(TimerCallback, Object, Int32, Int32) Initializes a new instance of the Timer class, using a 32-bit signed integer to specify the time interval. Declaration public extern Timer(TimerCallback callback, object state, int dueTime, int period) Parameters Type Name Description TimerCallback callback A TimerCallback delegate representing a method to be executed. Object state An object containing information to be used by the callback method, or null. Int32 dueTime The amount of time to delay before callback is invoked, in milliseconds. Specify Timeout.Infinite to prevent the timer from starting. Specify zero (0) to start the timer immediately. Int32 period The time interval between invocations of callback, in milliseconds. Specify Timeout.Infinite to disable periodic signaling. Timer(TimerCallback, Object, TimeSpan, TimeSpan) Initializes a new instance of the Timer class, using TimeSpan values to measure time intervals. Declaration public extern Timer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period) Parameters Type Name Description TimerCallback callback A delegate representing a method to be executed. Object state An object containing information to be used by the callback method, or null. TimeSpan dueTime The amount of time to delay before the callback parameter invokes its methods. Specify negative one (-1) milliseconds to prevent the timer from starting. Specify zero (0) to start the timer immediately. TimeSpan period The time interval between invocations of the methods referenced by callback. Specify negative one (-1) milliseconds to disable periodic signaling. Methods Change(Int32, Int32) Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals. Declaration public extern bool Change(int dueTime, int period) Parameters Type Name Description Int32 dueTime The amount of time to delay before the invoking the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. Int32 period The time interval between invocations of the callback method specified when the Timer was constructed, in milliseconds. Specify Timeout.Infinite to disable periodic signaling. Returns Type Description Boolean true if the timer was successfully updated; otherwise, false. Change(TimeSpan, TimeSpan) Changes the start time and the interval between method invocations for a timer, using TimeSpan values to measure time intervals. Declaration public extern bool Change(TimeSpan dueTime, TimeSpan period) Parameters Type Name Description TimeSpan dueTime A TimeSpan representing the amount of time to delay before invoking the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. TimeSpan period The time interval between invocations of the callback method specified when the Timer was constructed. Specify negative one (-1) milliseconds to disable periodic signaling. Returns Type Description Boolean true if the timer was successfully updated; otherwise, false. Dispose() Releases all resources used by the current instance of Timer. Declaration public extern void Dispose() Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Threading.TimerCallback.html": {
    "href": "api/System.Threading.TimerCallback.html",
    "title": "Delegate TimerCallback | nanoFramework Documentation",
    "keywords": "Delegate TimerCallback Represents the method that handles calls from a Timer. Namespace : System.Threading Assembly : mscorlib.dll Syntax public delegate void TimerCallback(object state); Parameters Type Name Description Object state Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Threading.WaitHandle.html": {
    "href": "api/System.Threading.WaitHandle.html",
    "title": "Class WaitHandle | nanoFramework Documentation",
    "keywords": "Class WaitHandle Encapsulates operating system specific objects that wait for exclusive access to shared resources. Inheritance Object MarshalByRefObject WaitHandle AutoResetEvent ManualResetEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Threading Assembly : mscorlib.dll Syntax public abstract class WaitHandle : MarshalByRefObject Fields | Improve this Doc View Source WaitTimeout Indicates that a WaitAny operation timed out before any of the wait handles were signaled. This field is constant. Declaration public const int WaitTimeout = 258 Field Value Type Description Int32 Methods | Improve this Doc View Source WaitAll(WaitHandle[]) Waits for all the elements in the specified array to receive a signal. Declaration public static bool WaitAll(WaitHandle[] waitHandles) Parameters Type Name Description WaitHandle [] waitHandles A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object. Returns Type Description Boolean true when every element in waitHandles has received a signal; otherwise the method never returns. | Improve this Doc View Source WaitAll(WaitHandle[], Int32, Boolean) Waits for all the elements in the specified array to receive a signal, using an Int32 value to specify the time interval and specifying whether to exit the synchronization domain before the wait. Declaration public static bool WaitAll(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext) Parameters Type Name Description WaitHandle [] waitHandles A WaitHandle array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates). Int32 millisecondsTimeout The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely. Boolean exitContext true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. Returns Type Description Boolean true when every element in waitHandles has received a signal; otherwise, false. | Improve this Doc View Source WaitAny(WaitHandle[]) Waits for any of the elements in the specified array to receive a signal. Declaration public static int WaitAny(WaitHandle[] waitHandles) Parameters Type Name Description WaitHandle [] waitHandles A WaitHandle array containing the objects for which the current instance will wait. Returns Type Description Int32 The array index of the object that satisfied the wait. | Improve this Doc View Source WaitAny(WaitHandle[], Int32, Boolean) Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval, and specifying whether to exit the synchronization domain before the wait. Declaration public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext) Parameters Type Name Description WaitHandle [] waitHandles A WaitHandle array containing the objects for which the current instance will wait. Int32 millisecondsTimeout The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely. Boolean exitContext true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. Returns Type Description Int32 The array index of the object that satisfied the wait, or WaitTimeout if no object satisfied the wait and a time interval equivalent to millisecondsTimeout has passed. | Improve this Doc View Source WaitOne() Blocks the current thread until the current WaitHandle receives a signal. Declaration public virtual bool WaitOne() Returns Type Description Boolean true if the current instance receives a signal. If the current instance is never signaled, WaitOne never returns. WaitOne(Int32, Boolean) Blocks the current thread until the current WaitHandle receives a signal, using a 32-bit signed integer to specify the time interval and specifying whether to exit the synchronization domain before the wait. Declaration public extern virtual bool WaitOne(int millisecondsTimeout, bool exitContext) Parameters Type Name Description Int32 millisecondsTimeout The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely. Boolean exitContext true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it afterward; otherwise, false. Returns Type Description Boolean true if the current instance receives a signal; otherwise, false. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.TimeoutException.html": {
    "href": "api/System.TimeoutException.html",
    "title": "Class TimeoutException | nanoFramework Documentation",
    "keywords": "Class TimeoutException The exception that is thrown when the time allotted for a process or operation has expired. Inheritance Object Exception SystemException TimeoutException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Exception.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class TimeoutException : SystemException Constructors | Improve this Doc View Source TimeoutException() Initializes a new instance of the TimeoutException class. Declaration public TimeoutException() | Improve this Doc View Source TimeoutException(String) Initializes a new instance of the TimeoutException class with a specified error message. Declaration public TimeoutException(string message) Parameters Type Name Description String message The message that describes the error. | Improve this Doc View Source TimeoutException(String, Exception) Initializes a new instance of the TimeoutException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public TimeoutException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.TimeSpan.html": {
    "href": "api/System.TimeSpan.html",
    "title": "Struct TimeSpan | nanoFramework Documentation",
    "keywords": "Struct TimeSpan Represents a time interval. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct TimeSpan Remarks A TimeSpan object represents a time interval (duration of time or elapsed time) that is measured as a positive or negative number of days, hours, minutes, seconds, and fractions of a second. The TimeSpan structure can also be used to represent the time of day, but only if the time is unrelated to a particular date. Otherwise, the DateTime structure should be used instead. The value of a TimeSpan object is the number of ticks that equal the represented time interval. A tick is equal to 100 nanoseconds, or one ten-millionth of a second. The value of a TimeSpan object can range from MinValue to MaxValue . Constructors TimeSpan(Int32, Int32, Int32) Initializes a new instance of the TimeSpan structure to a specified number of hours, minutes, and seconds. Declaration public extern TimeSpan(int hours, int minutes, int seconds) Parameters Type Name Description Int32 hours Number of hours. Int32 minutes Number of minutes. Int32 seconds Number of seconds. TimeSpan(Int32, Int32, Int32, Int32) Initializes a new instance of the TimeSpan structure to a specified number of days, hours, minutes, and seconds. Declaration public extern TimeSpan(int days, int hours, int minutes, int seconds) Parameters Type Name Description Int32 days Number of days. Int32 hours Number of hours. Int32 minutes Number of minutes. Int32 seconds Number of seconds. TimeSpan(Int32, Int32, Int32, Int32, Int32) Initializes a new instance of the TimeSpan structure to a specified number of days, hours, minutes, seconds and milliseconds. Declaration public extern TimeSpan(int days, int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description Int32 days Number of days. Int32 hours Number of hours. Int32 minutes Number of minutes. Int32 seconds Number of seconds. Int32 milliseconds Number of milliseconds. | Improve this Doc View Source TimeSpan(Int64) Initializes a new instance of the TimeSpan structure to the specified number of ticks. Declaration public TimeSpan(long ticks) Parameters Type Name Description Int64 ticks A time period expressed in 100-nanosecond units. Fields | Improve this Doc View Source MaxValue Represents the maximum TimeSpan value. This field is read-only. Declaration public static readonly TimeSpan MaxValue Field Value Type Description TimeSpan | Improve this Doc View Source MinValue Represents the minimum TimeSpan value. This field is read-only. Declaration public static readonly TimeSpan MinValue Field Value Type Description TimeSpan | Improve this Doc View Source TicksPerDay Represents the number of ticks in 1 day. This field is constant. Declaration public const long TicksPerDay = 864000000000L Field Value Type Description Int64 | Improve this Doc View Source TicksPerHour Represents the number of ticks in 1 hour. This field is constant. Declaration public const long TicksPerHour = 36000000000L Field Value Type Description Int64 | Improve this Doc View Source TicksPerMillisecond Represents the number of ticks in 1 millisecond. This field is constant. Declaration public const long TicksPerMillisecond = 10000L Field Value Type Description Int64 | Improve this Doc View Source TicksPerMinute Represents the number of ticks in 1 minute. This field is constant. Declaration public const long TicksPerMinute = 600000000L Field Value Type Description Int64 | Improve this Doc View Source TicksPerSecond Represents the number of ticks in 1 second. Declaration public const long TicksPerSecond = 10000000L Field Value Type Description Int64 | Improve this Doc View Source Zero Represents the zero TimeSpan value. This field is read-only. Declaration public static readonly TimeSpan Zero Field Value Type Description TimeSpan Properties | Improve this Doc View Source Days Gets the days component of the time interval represented by the current TimeSpan structure. Declaration public readonly int Days { get; } Property Value Type Description Int32 The day component of this instance. The return value can be positive or negative. | Improve this Doc View Source Hours Gets the hours component of the time interval represented by the current TimeSpan structure. Declaration public readonly int Hours { get; } Property Value Type Description Int32 The hour component of this instance. The return value ranges from -23 through 23. | Improve this Doc View Source Milliseconds Gets the milliseconds component of the time interval represented by the current TimeSpan structure. Declaration public readonly int Milliseconds { get; } Property Value Type Description Int32 The millisecond component of this instance. The return value ranges from -999 through 999. | Improve this Doc View Source Minutes Gets the minutes component of the time interval represented by the current TimeSpan structure. Declaration public readonly int Minutes { get; } Property Value Type Description Int32 The minute component of this instance. The return value ranges from -59 through 59. | Improve this Doc View Source Seconds Gets the seconds component of the time interval represented by the current TimeSpan structure. Declaration public readonly int Seconds { get; } Property Value Type Description Int32 The second component of this instance. The return value ranges from -59 through 59. | Improve this Doc View Source Ticks Gets the number of ticks that represent the value of the current TimeSpan structure. Declaration public readonly long Ticks { get; } Property Value Type Description Int64 The number of ticks contained in this instance. | Improve this Doc View Source TotalDays Gets the value of the current TimeSpan structure expressed in whole and fractional days. Declaration public readonly double TotalDays { get; } Property Value Type Description Double The total number of days represented by this instance. | Improve this Doc View Source TotalHours Gets the value of the current TimeSpan structure expressed in whole and fractional hours. Declaration public readonly double TotalHours { get; } Property Value Type Description Double The total number of hours represented by this instance. | Improve this Doc View Source TotalMilliseconds Gets the value of the current TimeSpan structure expressed in whole and fractional milliseconds. Declaration public readonly double TotalMilliseconds { get; } Property Value Type Description Double The total number of milliseconds represented by this instance. | Improve this Doc View Source TotalMinutes Gets the value of the current TimeSpan structure expressed in whole and fractional minutes. Declaration public readonly double TotalMinutes { get; } Property Value Type Description Double The total number of minutes represented by this instance. | Improve this Doc View Source TotalSeconds Gets the value of the current TimeSpan structure expressed in whole and fractional seconds. Declaration public readonly double TotalSeconds { get; } Property Value Type Description Double The total number of seconds represented by this instance. Methods | Improve this Doc View Source Add(TimeSpan) Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance. Declaration public TimeSpan Add(TimeSpan ts) Parameters Type Name Description TimeSpan ts The time interval to add. Returns Type Description TimeSpan A new object that represents the value of this instance plus the value of ts. Compare(TimeSpan, TimeSpan) Compares two TimeSpan values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value. Declaration public static extern int Compare(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Int32 One of the following values : -1 if t1 is shorter than t2. 0 if t1 is equal to t2. 1 if t1 is longer than t2. CompareTo(Object) Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object. Declaration public extern int CompareTo(object value) Parameters Type Name Description Object value An object to compare, or null. Returns Type Description Int32 One of the following values : -1 if This instance is shorter than value. 0 if This instance is equal to value. 1 if This instance is longer than value or value is null. | Improve this Doc View Source Duration() Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object. Declaration public TimeSpan Duration() Returns Type Description TimeSpan A new object whose value is the absolute value of the current TimeSpan object. Equals(Object) Returns a value indicating whether this instance is equal to a specified object. Declaration public extern override bool Equals(object value) Parameters Type Name Description Object value An object to compare with this instance. Returns Type Description Boolean true if value is a TimeSpan object that represents the same time interval as the current TimeSpan structure; otherwise, false. Overrides ValueType.Equals(Object) Equals(TimeSpan, TimeSpan) Returns a value that indicates whether two specified instances of TimeSpan are equal. Declaration public static extern bool Equals(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the values of t1 and t2 are equal; otherwise, false. | Improve this Doc View Source FromDays(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of days. Declaration public static TimeSpan FromDays(long value) Parameters Type Name Description Int64 value A number of days that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source FromHours(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of hours. Declaration public static TimeSpan FromHours(long value) Parameters Type Name Description Int64 value A number of hours that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source FromMilliseconds(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of milliseconds. Declaration public static TimeSpan FromMilliseconds(long value) Parameters Type Name Description Int64 value A number of milliseconds that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source FromMinutes(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of minute. Declaration public static TimeSpan FromMinutes(long value) Parameters Type Name Description Int64 value A number of minute that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source FromSeconds(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of seconds. Declaration public static TimeSpan FromSeconds(long value) Parameters Type Name Description Int64 value A number of seconds that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source FromTicks(Int64) Returns a TimeSpan that represents a specified time, where the specification is in units of ticks. Declaration public static TimeSpan FromTicks(long value) Parameters Type Name Description Int64 value A number of ticks that represent a time. Returns Type Description TimeSpan An object that represents value. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source Negate() Returns a new TimeSpan object whose value is the negated value of this instance. Declaration public TimeSpan Negate() Returns Type Description TimeSpan A new object with the same numeric value as this instance, but with the opposite sign. | Improve this Doc View Source Subtract(TimeSpan) Returns a new TimeSpan object whose value is the difference between the specified TimeSpan object and this instance. Declaration public TimeSpan Subtract(TimeSpan ts) Parameters Type Name Description TimeSpan ts The time interval to be subtracted. Returns Type Description TimeSpan A new time interval whose value is the result of the value of this instance minus the value of ts. ToString() Converts the value of the current TimeSpan object to its equivalent string representation. Declaration public extern override string ToString() Returns Type Description String The string representation of the current TimeSpan value. Overrides Object.ToString() Remarks The returned string is formatted with the \"c\" format specifier and has the following format: [-][d.]hh:mm:ss[.fffffff] Operators | Improve this Doc View Source Addition(TimeSpan, TimeSpan) Adds two specified TimeSpan instances. Declaration public static TimeSpan operator +(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to add. TimeSpan t2 The second time interval to add. Returns Type Description TimeSpan An object whose value is the sum of the values of t1 and t2. | Improve this Doc View Source Equality(TimeSpan, TimeSpan) Indicates whether two TimeSpan instances are equal Declaration public static bool operator ==(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the values of t1 and t2 are equal; otherwise, false. | Improve this Doc View Source GreaterThan(TimeSpan, TimeSpan) Indicates whether a specified TimeSpan is greater than another specified TimeSpan. Declaration public static bool operator>(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the value of t1 is greater than the value of t2; otherwise, false. | Improve this Doc View Source GreaterThanOrEqual(TimeSpan, TimeSpan) Indicates whether a specified TimeSpan is greater than or equal to another specified TimeSpan. Declaration public static bool operator >=(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the value of t1 is greater than or equal to the value of t2; otherwise, false. | Improve this Doc View Source Inequality(TimeSpan, TimeSpan) Indicates whether two TimeSpan instances are not equal. Declaration public static bool operator !=(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the values of t1 and t2 are not equal; otherwise, false. | Improve this Doc View Source LessThan(TimeSpan, TimeSpan) Indicates whether a specified TimeSpan is less than another specified TimeSpan. Declaration public static bool operator <(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the value of t1 is less than the value of t2; otherwise, false. | Improve this Doc View Source LessThanOrEqual(TimeSpan, TimeSpan) Indicates whether a specified TimeSpan is less than or equal to another specified TimeSpan. Declaration public static bool operator <=(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The first time interval to compare. TimeSpan t2 The second time interval to compare. Returns Type Description Boolean true if the value of t1 is less than or equal to the value of t2; otherwise, false. | Improve this Doc View Source Subtraction(TimeSpan, TimeSpan) Subtracts a specified TimeSpan from another specified TimeSpan. Declaration public static TimeSpan operator -(TimeSpan t1, TimeSpan t2) Parameters Type Name Description TimeSpan t1 The minuend. TimeSpan t2 The subtrahend. Returns Type Description TimeSpan An object whose value is the result of the value of t1 minus the value of t2. | Improve this Doc View Source UnaryNegation(TimeSpan) Returns a TimeSpan whose value is the negated value of the specified instance. Declaration public static TimeSpan operator -(TimeSpan t) Parameters Type Name Description TimeSpan t The time interval to be negated. Returns Type Description TimeSpan An object that has the same numeric value as this instance, but the opposite sign. | Improve this Doc View Source UnaryPlus(TimeSpan) Returns the specified instance of TimeSpan. Declaration public static TimeSpan operator +(TimeSpan t) Parameters Type Name Description TimeSpan t The time interval to return. Returns Type Description TimeSpan The time interval specified by t."
  },
  "api/System.Type.html": {
    "href": "api/System.Type.html",
    "title": "Class Type | nanoFramework Documentation",
    "keywords": "Class Type Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types. Inheritance Object MemberInfo Type Implements IReflect Inherited Members MemberInfo.MemberType MemberInfo.Name MemberInfo.GetCustomAttributes(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class Type : MemberInfo, IReflect Remarks Available only in mscorlib build with support for System.Reflection. Properties | Improve this Doc View Source Assembly Gets the Assembly in which the type is declared. For generic types, gets the Assembly in which the generic type is defined. Declaration public abstract Assembly Assembly { get; } Property Value Type Description Assembly An Assembly instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type. | Improve this Doc View Source AssemblyQualifiedName Gets the assembly-qualified name of the type, which includes the name of the assembly from which this Type object was loaded. Declaration public abstract string AssemblyQualifiedName { get; } Property Value Type Description String The assembly-qualified name of the Type, which includes the name of the assembly from which the Type was loaded, or null if the current instance represents a generic type parameter. | Improve this Doc View Source BaseType Gets the type from which the current Type directly inherits. Declaration public abstract Type BaseType { get; } Property Value Type Description Type The Type from which the current Type directly inherits, or null if the current Type represents the Object class or an interface. DeclaringType Gets the type that declares the current nested type or generic type parameter. Declaration public override Type DeclaringType { get; } Property Value Type Description Type A Type object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, null. Overrides MemberInfo.DeclaringType | Improve this Doc View Source FullName Gets the fully qualified name of the type, including its namespace but not its assembly. Declaration public abstract string FullName { get; } Property Value Type Description String The fully qualified name of the type, including its namespace but not its assembly; or null if the current instance represents a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters. IsAbstract Gets a value indicating whether the Type is abstract and must be overridden. Declaration public bool IsAbstract { get; } Property Value Type Description Boolean true if the Type is abstract; otherwise, false. IsArray Gets a value that indicates whether the type is an array. Declaration public bool IsArray { get; } Property Value Type Description Boolean true if the current type is an array; otherwise, false. IsClass Gets a value indicating whether the Type is a class or a delegate; that is, not a value type or interface. Declaration public bool IsClass { get; } Property Value Type Description Boolean true if the Type is a class; otherwise, false. IsEnum Gets a value indicating whether the current Type represents an enumeration. Declaration public bool IsEnum { get; } Property Value Type Description Boolean true if the current Type represents an enumeration; otherwise, false. IsInterface Gets a value indicating whether the Type is an interface; that is, not a class or a value type. Declaration public bool IsInterface { get; } Property Value Type Description Boolean true if the Type is an interface; otherwise, false. IsNotPublic Gets a value indicating whether the Type is not declared public. Declaration public bool IsNotPublic { get; } Property Value Type Description Boolean true if the Type is not declared public and is not a nested type; otherwise, false. IsPublic Gets a value indicating whether the Type is declared public. Declaration public bool IsPublic { get; } Property Value Type Description Boolean true if the Type is declared public and is not a nested type; otherwise, false. IsSerializable Gets a value indicating whether the Type is serializable. Declaration public bool IsSerializable { get; } Property Value Type Description Boolean true if the Type is serializable; otherwise, false. IsValueType Gets a value indicating whether the Type is a value type. Declaration public bool IsValueType { get; } Property Value Type Description Boolean true if the Type is a value type; otherwise, false. Methods GetConstructor(Type[]) Searches for a public instance constructor whose parameters match the types in the specified array. Declaration public extern ConstructorInfo GetConstructor(Type[] types) Parameters Type Name Description Type [] types An array of Type objects representing the number, order, and type of the parameters for the desired constructor. -or- An empty array of Type objects, to get a constructor that takes no parameters.Such an empty array is provided by the static field Type.EmptyTypes. Returns Type Description ConstructorInfo An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, null. | Improve this Doc View Source GetElementType() When overridden in a derived class, returns the Type of the object encompassed or referred to by the current array, pointer or reference type. Declaration public abstract Type GetElementType() Returns Type Description Type The Type of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current Type is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method. | Improve this Doc View Source GetField(String) Searches for the public field with the specified name. Declaration public FieldInfo GetField(string name) Parameters Type Name Description String name The string containing the name of the data field to get. Returns Type Description FieldInfo An object representing the public field with the specified name, if found; otherwise, null. | Improve this Doc View Source GetField(String, BindingFlags) Searches for the specified field, using the specified binding constraints. Declaration public abstract FieldInfo GetField(string name, BindingFlags bindingAttr) Parameters Type Name Description String name The string containing the name of the data field to get. BindingFlags bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null. Returns Type Description FieldInfo An object representing the field that matches the specified requirements, if found; otherwise, null. | Improve this Doc View Source GetFields() Returns all the public fields of the current Type. Declaration public FieldInfo[] GetFields() Returns Type Description FieldInfo [] An array of FieldInfo objects representing all the public fields defined for the current Type. -or- An empty array of type FieldInfo, if no public fields are defined for the current Type. | Improve this Doc View Source GetFields(BindingFlags) When overridden in a derived class, searches for the fields defined for the current Type, using the specified binding constraints. Declaration public abstract FieldInfo[] GetFields(BindingFlags bindingAttr) Parameters Type Name Description BindingFlags bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null. Returns Type Description FieldInfo [] An array of FieldInfo objects representing all the public fields defined for the current Type. -or- An empty array of type FieldInfo, if no public fields are defined for the current Type. | Improve this Doc View Source GetInterfaces() When overridden in a derived class, gets all the interfaces implemented or inherited by the current Type. Declaration public abstract Type[] GetInterfaces() Returns Type Description Type [] An array of Type objects representing all the interfaces implemented or inherited by the current Type. -or- An empty array of type Type, if no interfaces are implemented or inherited by the current Type. GetMethod(String) Searches for the public method with the specified name. Declaration public extern MethodInfo GetMethod(string name) Parameters Type Name Description String name The string containing the name of the public method to get. Returns Type Description MethodInfo An object that represents the public method with the specified name, if found; otherwise, null. GetMethod(String, BindingFlags) Searches for the specified method, using the specified binding constraints. Declaration public extern MethodInfo GetMethod(string name, BindingFlags bindingAttr) Parameters Type Name Description String name The string containing the name of the method to get. BindingFlags bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null. Returns Type Description MethodInfo An object representing the method that matches the specified requirements, if found; otherwise, null. GetMethod(String, Type[]) Searches for the specified public method whose parameters match the specified argument types. Declaration public extern MethodInfo GetMethod(string name, Type[] types) Parameters Type Name Description String name The string containing the name of the public method to get. Type [] types An array of Type objects representing the number, order, and type of the parameters for the desired constructor. -or- An empty array of Type objects, to get a constructor that takes no parameters.Such an empty array is provided by the static field Type.EmptyTypes. Returns Type Description MethodInfo An object representing the public method whose parameters match the specified argument types, if found; otherwise, null. | Improve this Doc View Source GetMethods() Returns all the public methods of the current Type. Declaration public MethodInfo[] GetMethods() Returns Type Description MethodInfo [] An array of MethodInfo objects representing all the public methods defined for the current Type. -or- An empty array of type MethodInfo, if no public methods are defined for the current Type. | Improve this Doc View Source GetMethods(BindingFlags) When overridden in a derived class, searches for the methods defined for the current Type, using the specified binding constraints. Declaration public abstract MethodInfo[] GetMethods(BindingFlags bindingAttr) Parameters Type Name Description BindingFlags bindingAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted or Zero, to return null. Returns Type Description MethodInfo [] An array of MethodInfo objects representing all the public methods defined for the current Type. -or- An empty array of type MethodInfo, if no public methods are defined for the current Type. | Improve this Doc View Source GetType(String) Gets the Type with the specified name, performing a case-sensitive search. Declaration public static Type GetType(string typeName) Parameters Type Name Description String typeName The assembly-qualified name of the type to get. See AssemblyQualifiedName. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace. Returns Type Description Type The type with the specified name, if found; otherwise, null. GetTypeFromHandle(RuntimeTypeHandle) Gets the type referenced by the specified type handle. Declaration public static extern Type GetTypeFromHandle(RuntimeTypeHandle handle) Parameters Type Name Description RuntimeTypeHandle handle The object that refers to the type. Returns Type Description Type The type referenced by the specified RuntimeTypeHandle, or null if the Value property of handle is null. InvokeMember(String, BindingFlags, Binder, Object, Object[]) Invokes the specified member, using the specified binding constraints and matching the specified argument list. Declaration public extern object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args) Parameters Type Name Description String name The string containing the name of the constructor, method, property, or field member to invoke. -or- An empty string (\"\") to invoke the default member. -or- For IDispatch members, a string representing the DispID, for example \"[DispID=3]\". BindingFlags invokeAttr A bitmask comprised of one or more BindingFlags that specify how the search is conducted. The access can be one of the BindingFlags such as Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup need not be specified. If the type of lookup is omitted, BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static are used. Binder binder An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection. -or- A null reference(Nothing in Visual Basic), to use the DefaultBinder.Note that explicitly defining a Binder object may be required for successfully invoking method overloads with variable arguments. Object target The object on which to invoke the specified member. Object [] args An array containing the arguments to pass to the member to invoke. Returns Type Description Object An object representing the return value of the invoked member. IsInstanceOfType(Object) Determines whether the specified object is an instance of the current Type. Declaration public extern virtual bool IsInstanceOfType(object o) Parameters Type Name Description Object o The object to compare with the current type. Returns Type Description Boolean true if the current Type is in the inheritance hierarchy of the object represented by o, or if the current Type is an interface that o implements. false if neither of these conditions is the case, if o is null, or if the current Type is an open generic type (that is, ContainsGenericParameters returns true). | Improve this Doc View Source IsSubclassOf(Type) Determines whether the current Type derives from the specified Type. Declaration public virtual bool IsSubclassOf(Type c) Parameters Type Name Description Type c The type to compare with the current type. Returns Type Description Boolean true if the current Type derives from c; otherwise, false. This method also returns false if c and the current Type are equal. | Improve this Doc View Source ToString() Returns a String representing the name of the current Type. Declaration public override string ToString() Returns Type Description String A String representing the name of the current Type. Overrides Object.ToString() Implements IReflect Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.TypeCode.html": {
    "href": "api/System.TypeCode.html",
    "title": "Enum TypeCode | nanoFramework Documentation",
    "keywords": "Enum TypeCode Specifies the type of an object. Namespace : System Assembly : mscorlib.dll Syntax public enum TypeCode Fields Name Description Boolean A simple type representing Boolean values of true or false. Byte An integral type representing unsigned 8-bit integers with values between 0 and 255. Char An integral type representing unsigned 16-bit integers with values between 0 and 65535. The set of possible values for the Char type corresponds to the Unicode character set. DateTime A type representing a date and time value. DBNull A database null (column) value. Decimal A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits. Double A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits. Empty A null reference. Int16 An integral type representing signed 16-bit integers with values between -32768 and 32767. Int32 An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647. Int64 An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807. Object A general type representing any reference or value type not explicitly represented by another TypeCode. SByte An integral type representing signed 8-bit integers with values between -128 and 127. Single A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits. String A sealed class type representing Unicode character strings. UInt16 An integral type representing unsigned 16-bit integers with values between 0 and 65535. UInt32 An integral type representing unsigned 32-bit integers with values between 0 and 4294967295. UInt64 An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615."
  },
  "api/System.TypedReference.html": {
    "href": "api/System.TypedReference.html",
    "title": "Struct TypedReference | nanoFramework Documentation",
    "keywords": "Struct TypedReference Describes objects that contain both a managed pointer to a location and a runtime representation of the type that may be stored at that location. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct TypedReference"
  },
  "api/System.UInt16.html": {
    "href": "api/System.UInt16.html",
    "title": "Struct UInt16 | nanoFramework Documentation",
    "keywords": "Struct UInt16 Represents a 16-bit unsigned integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax [CLSCompliant(false)] public struct UInt16 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of UInt16. This field is constant. Declaration public const ushort MaxValue = 65535 Field Value Type Description UInt16 Remarks The value of this constant is 65535; that is, hexadecimal 0xFFFF. | Improve this Doc View Source MinValue Represents the smallest possible value of UInt16. This field is constant. Declaration public const ushort MinValue = 0 Field Value Type Description UInt16 Remarks The value of this constant is 0. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 16-bit unsigned integer equivalent. Declaration [CLSCompliant(false)] public static ushort Parse(string s) Parameters Type Name Description String s A string that represents the number to convert. Returns Type Description UInt16 A 16-bit unsigned integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, which consists of a sequence of digits ranging from 0 to 9, without a sign or leading zeros. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.UInt32.html": {
    "href": "api/System.UInt32.html",
    "title": "Struct UInt32 | nanoFramework Documentation",
    "keywords": "Struct UInt32 Represents a 32-bit unsigned integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax [CLSCompliant(false)] public struct UInt32 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of UInt32. This field is constant. Declaration public const uint MaxValue = 4294967295U Field Value Type Description UInt32 Remarks The value of this constant is 4,294,967,295; that is, hexadecimal 0xFFFFFFFF. | Improve this Doc View Source MinValue Represents the smallest possible value of UInt32. This field is constant. Declaration public const uint MinValue = 0U Field Value Type Description UInt32 Remarks The value of this constant is 0. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 32-bit unsigned integer equivalent. Declaration [CLSCompliant(false)] public static uint Parse(string s) Parameters Type Name Description String s A string representing the number to convert. Returns Type Description UInt32 A 32-bit unsigned integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.UInt64.html": {
    "href": "api/System.UInt64.html",
    "title": "Struct UInt64 | nanoFramework Documentation",
    "keywords": "Struct UInt64 Represents a 64-bit unsigned integer. Inherited Members ValueType.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax [CLSCompliant(false)] public struct UInt64 Fields | Improve this Doc View Source MaxValue Represents the largest possible value of UInt64. This field is constant. Declaration public const ulong MaxValue = 18446744073709551615UL Field Value Type Description UInt64 Remarks The value of this constant is 18,446,744,073,709,551,615; that is, hexadecimal 0xFFFFFFFFFFFFFFFF. | Improve this Doc View Source MinValue Represents the smallest possible value of UInt64. This field is constant. Declaration public const ulong MinValue = 0UL Field Value Type Description UInt64 Remarks The value of this constant is 0. Methods | Improve this Doc View Source Parse(String) Converts the string representation of a number to its 64-bit unsigned integer equivalent. Declaration [CLSCompliant(false)] public static ulong Parse(string s) Parameters Type Name Description String s A string that represents the number to convert. Returns Type Description UInt64 A 64-bit unsigned integer equivalent to the number contained in s. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source ToString() Converts the numeric value of this instance to its equivalent string representation. Declaration public override string ToString() Returns Type Description String The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9, without a sign or leading zeroes. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Converts the numeric value of this instance to its equivalent string representation using the specified format. Declaration public string ToString(string format) Parameters Type Name Description String format A numeric format string. Returns Type Description String The string representation of the value of this instance as specified by format."
  },
  "api/System.UIntPtr.html": {
    "href": "api/System.UIntPtr.html",
    "title": "Struct UIntPtr | nanoFramework Documentation",
    "keywords": "Struct UIntPtr A platform-specific type that is used to represent a pointer or a handle. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct UIntPtr"
  },
  "api/System.Uri.Flags.html": {
    "href": "api/System.Uri.Flags.html",
    "title": "Enum Uri.Flags | nanoFramework Documentation",
    "keywords": "Enum Uri.Flags Defines flags kept in m_Flags variable. Namespace : System Assembly : System.Net.Http.dll Syntax protected enum Flags Fields Name Description LoopbackHost Flag value for loopback host Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.Uri.html": {
    "href": "api/System.Uri.html",
    "title": "Class Uri | nanoFramework Documentation",
    "keywords": "Class Uri Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI. Inheritance Object Uri Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : System.Net.Http.dll Syntax public class Uri Constructors | Improve this Doc View Source Uri(String) Initializes a new instance of the Uri class with the specified URI. Declaration public Uri(string uriString) Parameters Type Name Description String uriString A URI. Remarks This constructor parses the URI string, therefore it can be used to validate a URI. Exceptions Type Condition Exception The uriString is null. ArgumentNullException The uriString is empty. -or- The scheme specified in uriString is not correctly formed. -or- uriString contains too many slashes. -or- The password specified in uriString is not valid. -or- The host name specified in uriString is not valid. -or- The file name specified in uriString is not valid. -or- The user name specified in uriString is not valid. -or- The host or authority name specified in uriString cannot be terminated by backslashes. -or- The port number specified in uriString is not valid or cannot be parsed. -or- The length of uriString exceeds 65534 characters. -or- The length of the scheme specified in uriString exceeds 1023 characters. -or- There is an invalid character sequence in uriString . -or- The MS-DOS path specified in uriString must start with c:\\\\. | Improve this Doc View Source Uri(String, UriKind) Constructs Uri from string and enumeration that tell what is the type of Uri. Declaration public Uri(string uriString, UriKind kind) Parameters Type Name Description String uriString String to construct Uri from UriKind kind Type of Uri to construct Fields | Improve this Doc View Source HttpDefaultPort Default port for http protocol - 80 Declaration public const int HttpDefaultPort = 80 Field Value Type Description Int32 | Improve this Doc View Source HttpsDefaultPort Default port for https protocol - 443 Declaration public const int HttpsDefaultPort = 443 Field Value Type Description Int32 | Improve this Doc View Source m_AbsolutePath Member varialbe that keeps absolute path. Declaration protected string m_AbsolutePath Field Value Type Description String | Improve this Doc View Source m_absoluteUri Member variable that keeps absolute uri (generated in method ParseUriString) Declaration protected string m_absoluteUri Field Value Type Description String | Improve this Doc View Source m_Flags Member variable that keeps internal flags/ Declaration protected int m_Flags Field Value Type Description Int32 | Improve this Doc View Source m_host Member varialbe that keeps host name ( http and https ). Declaration protected string m_host Field Value Type Description String | Improve this Doc View Source m_hostNameType Type of the host. Declaration protected UriHostNameType m_hostNameType Field Value Type Description UriHostNameType | Improve this Doc View Source m_isAbsoluteUri Member varialbe that keeps boolean if Uri is absolute. Declaration protected bool m_isAbsoluteUri Field Value Type Description Boolean | Improve this Doc View Source m_isUnc Member varialbe that tells if path is UNC ( Universal Naming Convention ) In this class it is always false, but can be changed in derived classes. Declaration protected bool m_isUnc Field Value Type Description Boolean | Improve this Doc View Source m_OriginalUriString Member varialbe that keeps original string passed to Uri constructor. Declaration protected string m_OriginalUriString Field Value Type Description String | Improve this Doc View Source m_port Member variable that keeps port used by this uri. Declaration protected int m_port Field Value Type Description Int32 | Improve this Doc View Source m_scheme Member varialbe that keeps scheme of Uri. Declaration protected string m_scheme Field Value Type Description String | Improve this Doc View Source UnknownPort Constant to indicate that port for this protocol is unknown Declaration protected const int UnknownPort = -1 Field Value Type Description Int32 | Improve this Doc View Source UriSchemeHttp Specifies that the URI is accessed through the Hypertext Transfer Protocol (HTTP). This field is read-only. Declaration public const string UriSchemeHttp = \"http\" Field Value Type Description String | Improve this Doc View Source UriSchemeHttps Specifies that the URI is accessed through the Secure Hypertext Transfer Protocol (HTTPS). This field is read-only. Declaration public const string UriSchemeHttps = \"https\" Field Value Type Description String Properties | Improve this Doc View Source AbsolutePath Gets a local operating-system representation of a file name. Declaration public string AbsolutePath { get; } Property Value Type Description String A String containing the local operating-system representation of a file name. Exceptions Type Condition InvalidOperationException This instance represents a relative URI, and this property is valid only for absolute URIs. | Improve this Doc View Source AbsoluteUri Gets a string containing the absolute uri or entire uri of this instance. Declaration public string AbsoluteUri { get; } Property Value Type Description String A String containing the entire URI. | Improve this Doc View Source Host Gets the host component of this instance. Declaration public string Host { get; } Property Value Type Description String A String containing the host name. This is usually the DNS host name or IP address of the server. | Improve this Doc View Source HostNameType Gets the type of the host name specified in the URI. Declaration public UriHostNameType HostNameType { get; } Property Value Type Description UriHostNameType A member of the UriHostNameType enumeration. | Improve this Doc View Source IsAbsoluteUri Gets whether the Uri instance is absolute. Declaration public bool IsAbsoluteUri { get; } Property Value Type Description Boolean true if the Uri instance is absolute; otherwise, false . | Improve this Doc View Source IsLoopback Gets whether the specified Uri refers to the local host. Declaration public bool IsLoopback { get; } Property Value Type Description Boolean true if the host specified in the Uri is the local computer; otherwise, false . | Improve this Doc View Source IsUnc Gets whether the specified Uri is a universal naming convention (UNC) path. Declaration public bool IsUnc { get; } Property Value Type Description Boolean true if the Uri is a UNC path; otherwise, false . Exceptions Type Condition InvalidOperationException This instance represents a relative URI, and this property is valid only for absolute URIs. | Improve this Doc View Source OriginalString Gets the original URI string that was passed to the Uri constructor. Declaration public string OriginalString { get; } Property Value Type Description String | Improve this Doc View Source Port Gets the port number of this URI. Declaration public int Port { get; } Property Value Type Description Int32 An Int32 value containing the port number for this URI. Exceptions Type Condition InvalidOperationException This instance represents a relative URI, and this property is valid only for absolute URIs. | Improve this Doc View Source Scheme Gets the scheme name for this URI. Declaration public string Scheme { get; } Property Value Type Description String A String containing the scheme for this URI, converted to lowercase. Exceptions Type Condition InvalidOperationException This instance represents a relative URI, and this property is valid only for absolute URIs. Methods | Improve this Doc View Source ConstructAbsoluteUri(String) Constructs an absolute Uri from a URI string. Declaration protected void ConstructAbsoluteUri(string uriString) Parameters Type Name Description String uriString A URI. Remarks See Uri(String) . | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description Object o Returns Type Description Boolean Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() | Improve this Doc View Source IsAlpha(Char) Checks to see if the character value is an alpha character. Declaration protected bool IsAlpha(char testChar) Parameters Type Name Description Char testChar The character to evaluate. Returns Type Description Boolean true if the character is Alpha; otherwise, false . | Improve this Doc View Source IsAlphaNumeric(Char) Checks to see if the character value is an alpha or numeric. Declaration protected bool IsAlphaNumeric(char testChar) Parameters Type Name Description Char testChar The character to evaluate. Returns Type Description Boolean true if the character is Alpha or numeric; otherwise, false . | Improve this Doc View Source IsHex(Char) Checks to see if the character value is Hex. Declaration protected bool IsHex(char testChar) Parameters Type Name Description Char testChar The character to evaluate. Returns Type Description Boolean true if the character is a valid Hex character; otherwise, false . | Improve this Doc View Source IsIPv4(String) Returns if host name is IP adress 4 bytes. Like 192.1.1.1 Declaration protected bool IsIPv4(string host) Parameters Type Name Description String host string with host name Returns Type Description Boolean True if name is string with IPv4 address | Improve this Doc View Source IsIPv6(String) Declaration protected bool IsIPv6(string host) Parameters Type Name Description String host Returns Type Description Boolean | Improve this Doc View Source IsWellFormedUriString(String, UriKind) Indicates whether the string is well-formed by attempting to construct a URI with the string. Declaration public static bool IsWellFormedUriString(string uriString, UriKind uriKind) Parameters Type Name Description String uriString A URI. UriKind uriKind The type of the URI in uriString . Returns Type Description Boolean true if the string was well-formed in accordance with RFC 2396 and RFC 2732; otherwise false . | Improve this Doc View Source ParseSchemeSpecificPart(String, Int32) Parse Scheme-specific part of uri for host, port and absolute path Briefed syntax abstracted from .NET FX: Group 1 - http, https, ftp, file, gopher, nntp, telnet, ldap, net.tcp and net.pipe Must be rooted. The 1st segment is authority. Empty path should be replace as '/' Group 2 - file Reminder: Treat all '&apos; as '/' If it starts with only one '/', host should be empty Otherwise, all leading '/' should be ignored before searching for 1st segment. The 1st segment is host Group 3 - news and uuid Authority always be empty. Everything goes to path. Group 4 - mailto and all other shemes The 1st segment is authority iff it was not rooted. Group 5 - all other schemes The 1st segment is authority iff it was rooted. Empty path should be replace as '/' Declaration protected bool ParseSchemeSpecificPart(string sUri, int iStart) Parameters Type Name Description String sUri Scheme-specific part of uri Int32 iStart Returns Type Description Boolean | Improve this Doc View Source ParseUriString(String) Internal method parses a URI string into Uri variables Declaration protected void ParseUriString(string uriString) Parameters Type Name Description String uriString A Uri. Exceptions Type Condition ArgumentNullException The uriString is null. Exception See constructor description. | Improve this Doc View Source Split(String, Int32, out String, out String, Boolean) Declaration protected void Split(string sUri, int iStart, out string sAuthority, out string sPath, bool bReplaceEmptyPath) Parameters Type Name Description String sUri Int32 iStart String sAuthority String sPath Boolean bReplaceEmptyPath | Improve this Doc View Source ValidateRelativePath(String) Parses relative Uri into variables. Declaration protected void ValidateRelativePath(string uri) Parameters Type Name Description String uri A Uri. Exceptions Type Condition ArgumentNullException The uri is null. Exception See constructor description. | Improve this Doc View Source ValidateUriPart(String, Int32) Validates that part of Uri after sheme is valid for unknown Uri scheme Declaration protected void ValidateUriPart(string uriString, int startIndex) Parameters Type Name Description String uriString Uri string Int32 startIndex Index in the string where Uri part ( after scheme ) starts | Improve this Doc View Source ValidateUrn(String) Parses urn string into Uri variables. Parsing is restricted to basic urn:NamespaceID, urn:uuid formats only. Declaration protected void ValidateUrn(string uri) Parameters Type Name Description String uri A Uri. Exceptions Type Condition ArgumentNullException The uri is null. Exception See the constructor description. Operators | Improve this Doc View Source Equality(Uri, Uri) Declaration public static bool operator ==(Uri lhs, Uri rhs) Parameters Type Name Description Uri lhs Uri rhs Returns Type Description Boolean | Improve this Doc View Source Inequality(Uri, Uri) Declaration public static bool operator !=(Uri lhs, Uri rhs) Parameters Type Name Description Uri lhs Uri rhs Returns Type Description Boolean Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.UriHostNameType.html": {
    "href": "api/System.UriHostNameType.html",
    "title": "Enum UriHostNameType | nanoFramework Documentation",
    "keywords": "Enum UriHostNameType Defines host name types for the http and https protocols. method. Namespace : System Assembly : System.Net.Http.dll Syntax public enum UriHostNameType Fields Name Description Basic The host is set, but the type cannot be determined. Dns The host name is a domain name system (DNS) style host name. IPv4 The host name is an Internet Protocol (IP) version 4 host address. IPv6 The host name is an Internet Protocol (IP) version 6 host address. Unknown The type of the host name is not supplied. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.UriKind.html": {
    "href": "api/System.UriKind.html",
    "title": "Enum UriKind | nanoFramework Documentation",
    "keywords": "Enum UriKind Defines the kinds of Uri s for the IsWellFormedUriString(String, UriKind) method and several Uri methods. Namespace : System Assembly : System.Net.Http.dll Syntax public enum UriKind Fields Name Description Absolute The Uri is an absolute Uri. Relative The Uri is a relative Uri. RelativeOrAbsolute The kind of the Uri is indeterminate. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/System.ValueType.html": {
    "href": "api/System.ValueType.html",
    "title": "Class ValueType | nanoFramework Documentation",
    "keywords": "Class ValueType Provides the base class for value types. Inheritance Object ValueType Enum Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public abstract class ValueType Methods Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public extern override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current instance. Returns Type Description Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides Object.Equals(Object) Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Version.html": {
    "href": "api/System.Version.html",
    "title": "Class Version | nanoFramework Documentation",
    "keywords": "Class Version Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited. Inheritance Object Version Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public sealed class Version Constructors | Improve this Doc View Source Version(Int32, Int32) Initializes a new instance of the Version class using the specified major and minor values. Declaration public Version(int major, int minor) Parameters Type Name Description Int32 major The major version number. Int32 minor The minor version number. Exceptions Type Condition ArgumentOutOfRangeException | Improve this Doc View Source Version(Int32, Int32, Int32, Int32) Initializes a new instance of the Version class with the specified major, minor, build, and revision numbers. Declaration public Version(int major, int minor, int build, int revision) Parameters Type Name Description Int32 major The major version number. Int32 minor The minor version number. Int32 build The build number. Int32 revision The revision number. Exceptions Type Condition ArgumentOutOfRangeException Properties | Improve this Doc View Source Build Gets the value of the build component of the version number for the current Version object. Declaration public int Build { get; } Property Value Type Description Int32 The build version number. | Improve this Doc View Source Major Gets the value of the major component of the version number for the current Version object. Declaration public int Major { get; } Property Value Type Description Int32 The major version number. | Improve this Doc View Source Minor Gets the value of the minor component of the version number for the current Version object. Declaration public int Minor { get; } Property Value Type Description Int32 The minor version number. | Improve this Doc View Source Revision Gets the value of the revision component of the version number for the current Version object. Declaration public int Revision { get; } Property Value Type Description Int32 The revision version number. Methods | Improve this Doc View Source Equals(Object) Returns a value indicating whether the current Version object is equal to a specified object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An object to compare with the current Version object, or null. Returns Type Description Boolean true if the current Version object and obj are both Version objects, and every component of the current Version object matches the corresponding component of obj; otherwise, false. Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer hash code. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Converts the value of the current Version object to its equivalent String representation. Declaration public override string ToString() Returns Type Description String The String representation of the values of the major, minor, build, and revision components of the current Version object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined: major.minor[.build[.revision]] Overrides Object.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Void.html": {
    "href": "api/System.Void.html",
    "title": "Struct Void | nanoFramework Documentation",
    "keywords": "Struct Void Specifies a return value type for a method that does not return a value. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : mscorlib.dll Syntax public struct Void"
  },
  "api/System.WeakReference.html": {
    "href": "api/System.WeakReference.html",
    "title": "Class WeakReference | nanoFramework Documentation",
    "keywords": "Class WeakReference Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection. Inheritance Object WeakReference Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System Assembly : mscorlib.dll Syntax public class WeakReference Constructors WeakReference(Object) Initializes a new instance of the WeakReference class, referencing the specified object. Declaration public extern WeakReference(object target) Parameters Type Name Description Object target The object to track or null. Properties IsAlive Gets an indication whether the object referenced by the current WeakReference object has been garbage collected. Declaration public virtual bool IsAlive { get; } Property Value Type Description Boolean true if the object referenced by the current WeakReference object has not been garbage collected and is still accessible; otherwise, false. Target Gets or sets the object (the target) referenced by the current WeakReference object. Declaration public virtual object Target { get; set; } Property Value Type Description Object null if the object referenced by the current WeakReference object has been garbage collected; otherwise, a reference to the object referenced by the current WeakReference object. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/System.Web.html": {
    "href": "api/System.Web.html",
    "title": "Namespace System.Web | nanoFramework Documentation",
    "keywords": "Namespace System.Web Classes HttpUtility Utilities to encode and decode url"
  },
  "api/System.Web.HttpUtility.html": {
    "href": "api/System.Web.HttpUtility.html",
    "title": "Class HttpUtility | nanoFramework Documentation",
    "keywords": "Class HttpUtility Utilities to encode and decode url Inheritance Object HttpUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Web Assembly : System.Net.Http.dll Syntax public class HttpUtility Methods | Improve this Doc View Source HexToInt(Char) Get the int value of a char Declaration public static int HexToInt(char h) Parameters Type Name Description Char h a char Returns Type Description Int32 The int value of the char | Improve this Doc View Source UrlDecode(Byte[], Int32, Int32, Encoding) Decode an encoded URL Declaration public static string UrlDecode(byte[] bytes, int offset, int count, Encoding e) Parameters Type Name Description Byte [] bytes The array of bytes to decode Int32 offset The position in the byte to begin decoding Int32 count The number of bytes to decode Encoding e The Encoding object that specifies the encoding scheme Returns Type Description String The decoded URL | Improve this Doc View Source UrlDecode(Byte[], Encoding) Decode an encoded URL Declaration public static string UrlDecode(byte[] bytes, Encoding e) Parameters Type Name Description Byte [] bytes The array of bytes to decode Encoding e The Encoding object that specifies the encoding scheme Returns Type Description String The decoded URL | Improve this Doc View Source UrlDecode(String) Decode an UTF8 encoded URL Declaration public static string UrlDecode(string url) Parameters Type Name Description String url The encoded URL Returns Type Description String The decoded URL | Improve this Doc View Source UrlDecode(String, Encoding) Decode an URL using the specified encoding Declaration public static string UrlDecode(string str, Encoding e) Parameters Type Name Description String str The string to encode Encoding e The Encoding object that specifies the encoding scheme Returns Type Description String The encoded string | Improve this Doc View Source UrlDecodeToBytes(Byte[]) Decode bytes array to byte array Declaration public static byte[] UrlDecodeToBytes(byte[] bytes) Parameters Type Name Description Byte [] bytes The array of bytes to decode Returns Type Description Byte [] | Improve this Doc View Source UrlDecodeToBytes(Byte[], Int32, Int32) Decode bytes array to byte array Declaration public static byte[] UrlDecodeToBytes(byte[] bytes, int offset, int count) Parameters Type Name Description Byte [] bytes The array of bytes to decode Int32 offset The position in the byte array at which to begin decoding Int32 count The number of bytes to decode Returns Type Description Byte [] | Improve this Doc View Source UrlDecodeToBytes(String) Decode bytes array to byte array in UTF8 Declaration public static byte[] UrlDecodeToBytes(string str) Parameters Type Name Description String str The string to encode Returns Type Description Byte [] | Improve this Doc View Source UrlDecodeToBytes(String, Encoding) Decode bytes array to byte array Declaration public static byte[] UrlDecodeToBytes(string str, Encoding e) Parameters Type Name Description String str The string to encode Encoding e The Encoding object that specifies the encoding scheme Returns Type Description Byte [] | Improve this Doc View Source UrlEncode(Byte[]) Encode an URL Declaration public static string UrlEncode(byte[] bytes) Parameters Type Name Description Byte [] bytes The array of bytes to encode Returns Type Description String The encoded string URLL | Improve this Doc View Source UrlEncode(Byte[], Int32, Int32) Encode an URL Declaration public static string UrlEncode(byte[] bytes, int offset, int count) Parameters Type Name Description Byte [] bytes The array of bytes to encode Int32 offset The position in the byte array at which to begin encoding Int32 count The number of bytes to encode Returns Type Description String The encoded string URL | Improve this Doc View Source UrlEncode(String) Encode an URL using UTF8 Declaration public static string UrlEncode(string str) Parameters Type Name Description String str The URL string to encode Returns Type Description String The encoded string URL | Improve this Doc View Source UrlEncode(String, Encoding) Encode an URL Declaration public static string UrlEncode(string str, Encoding e) Parameters Type Name Description String str The URL string to encode Encoding e The Encoding object that specifies the encoding scheme Returns Type Description String The encoded string URL | Improve this Doc View Source UrlEncodeToBytes(Byte[]) Encode a byte array URL into a byte array Declaration public static byte[] UrlEncodeToBytes(byte[] bytes) Parameters Type Name Description Byte [] bytes The array of bytes to encode Returns Type Description Byte [] The encoded byte array | Improve this Doc View Source UrlEncodeToBytes(Byte[], Int32, Int32) Encode a byte array URL into a byte array Declaration public static byte[] UrlEncodeToBytes(byte[] bytes, int offset, int count) Parameters Type Name Description Byte [] bytes The array of bytes to encode Int32 offset The position in the byte array at which to begin encoding Int32 count The number of bytes to encode Returns Type Description Byte [] The encoded byte array | Improve this Doc View Source UrlEncodeToBytes(String, Encoding) Encode an URL into a byte array Declaration public static byte[] UrlEncodeToBytes(string str, Encoding e) Parameters Type Name Description String str The URL string to encode Encoding e Returns Type Description Byte [] The encoded byte array Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/TestAppv5._0.html": {
    "href": "api/TestAppv5._0.html",
    "title": "Namespace TestAppv5._0 | nanoFramework Documentation",
    "keywords": "Namespace TestAppv5._0 Classes Program"
  },
  "api/TestAppv5._0.Program.html": {
    "href": "api/TestAppv5._0.Program.html",
    "title": "Class Program | nanoFramework Documentation",
    "keywords": "Class Program Inheritance Object Program Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TestAppv5._0 Assembly : TestAppv5.0.dll Syntax public class Program Methods | Improve this Doc View Source Main() Declaration public static void Main() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/TestMqtt.html": {
    "href": "api/TestMqtt.html",
    "title": "Namespace TestMqtt | nanoFramework Documentation",
    "keywords": "Namespace TestMqtt Classes Program"
  },
  "api/TestMqtt.Program.html": {
    "href": "api/TestMqtt.Program.html",
    "title": "Class Program | nanoFramework Documentation",
    "keywords": "Class Program Inheritance Object Program Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : TestMqtt Assembly : TestMqtt.dll Syntax public class Program Methods | Improve this Doc View Source Main() Declaration public static void Main() | Improve this Doc View Source SetupAndConnectNetwork() Declaration public static void SetupAndConnectNetwork() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Adc.AdcChannel.html": {
    "href": "api/Windows.Devices.Adc.AdcChannel.html",
    "title": "Class AdcChannel | nanoFramework Documentation",
    "keywords": "Class AdcChannel Represents a single ADC channel. Inheritance Object AdcChannel Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Adc Assembly : Windows.Devices.Adc.dll Syntax public sealed class AdcChannel : IAdcChannel, IDisposable Properties | Improve this Doc View Source Controller Gets the ADC controller for this channel. Declaration public AdcController Controller { get; } Property Value Type Description AdcController The ADC controller. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source ReadRatio() Reads the value as a percentage of the max value possible for this controller. Declaration public double ReadRatio() Returns Type Description Double The value as percentage of the max value. | Improve this Doc View Source ReadValue() Reads the digital representation of the analog value from the ADC. Declaration public int ReadValue() Returns Type Description Int32 The digital value. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Adc.AdcChannelMode.html": {
    "href": "api/Windows.Devices.Adc.AdcChannelMode.html",
    "title": "Enum AdcChannelMode | nanoFramework Documentation",
    "keywords": "Enum AdcChannelMode Describes the channel modes that the ADC controller can use for input. Namespace : Windows.Devices.Adc Assembly : Windows.Devices.Adc.dll Syntax public enum AdcChannelMode Fields Name Description Differential Difference between two pins. SingleEnded Simple value of a particular pin. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.Adc.AdcController.html": {
    "href": "api/Windows.Devices.Adc.AdcController.html",
    "title": "Class AdcController | nanoFramework Documentation",
    "keywords": "Class AdcController Represents an ADC controller on the system Inheritance Object AdcController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Adc Assembly : Windows.Devices.Adc.dll Syntax public sealed class AdcController : IAdcController Properties | Improve this Doc View Source ChannelCount The number of channels available on the ADC controller. Declaration public int ChannelCount { get; } Property Value Type Description Int32 Number of channels. | Improve this Doc View Source ChannelMode Gets or sets the channel mode for the ADC controller. Declaration public AdcChannelMode ChannelMode { get; set; } Property Value Type Description AdcChannelMode The ADC channel mode. | Improve this Doc View Source MaxValue Gets the maximum value that the controller can report. Declaration public int MaxValue { get; } Property Value Type Description Int32 The maximum value. | Improve this Doc View Source MinValue The minimum value the controller can report. Declaration public int MinValue { get; } Property Value Type Description Int32 The minimum value. | Improve this Doc View Source ResolutionInBits Gets the resolution of the controller as number of bits it has. For example, if we have a 10-bit ADC, that means it can detect 1024 (2^10) discrete levels. Declaration public int ResolutionInBits { get; } Property Value Type Description Int32 The number of bits the ADC controller has. Methods | Improve this Doc View Source GetDefault() Gets the default ADC controller on the system. Declaration public static AdcController GetDefault() Returns Type Description AdcController The default ADC controller on the system, or null if the system has no ADC controller. GetDeviceSelector() Retrieves an string of all the ADC controllers on the system. Declaration public static extern string GetDeviceSelector() Returns Type Description String | Improve this Doc View Source IsChannelModeSupported(AdcChannelMode) Verifies that the specified channel mode is supported by the controller. Declaration public bool IsChannelModeSupported(AdcChannelMode channelMode) Parameters Type Name Description AdcChannelMode channelMode The channel mode. Returns Type Description Boolean True if the specified channel mode is supported, otherwise false. | Improve this Doc View Source OpenChannel(Int32) Opens a connection to the specified ADC channel. Declaration public AdcChannel OpenChannel(int channelNumber) Parameters Type Name Description Int32 channelNumber The channel to connect to. Returns Type Description AdcChannel The ADC channel. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Adc.html": {
    "href": "api/Windows.Devices.Adc.html",
    "title": "Namespace Windows.Devices.Adc | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.Adc Classes AdcChannel Represents a single ADC channel. AdcController Represents an ADC controller on the system Enums AdcChannelMode Describes the channel modes that the ADC controller can use for input."
  },
  "api/Windows.Devices.Gpio.GpioChangeCount.html": {
    "href": "api/Windows.Devices.Gpio.GpioChangeCount.html",
    "title": "Struct GpioChangeCount | nanoFramework Documentation",
    "keywords": "Struct GpioChangeCount Represents a near-simultaneous sampling of the number of times a pin has changed value, and the time at which this count was sampled. This structure can be used to determine the number of pin value changes over a period of time. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public struct GpioChangeCount Fields | Improve this Doc View Source Count The number of times the transition of polarity specified by GpioChangeCounter.Polarity occured on the pin. Declaration public ulong Count Field Value Type Description UInt64 | Improve this Doc View Source RelativeTime The time at which this count was sampled. The time is sampled close to (but not simultaneously with) the count. This timestamp can be used to determine the elapsed time between two GpioChangeCount records. It does not correspond to any absolute or system time. Declaration public TimeSpan RelativeTime Field Value Type Description TimeSpan Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Gpio.GpioChangeCounter.html": {
    "href": "api/Windows.Devices.Gpio.GpioChangeCounter.html",
    "title": "Class GpioChangeCounter | nanoFramework Documentation",
    "keywords": "Class GpioChangeCounter Counts changes of a specified polarity on a general-purpose I/O (GPIO) pin. Inheritance Object GpioChangeCounter Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public sealed class GpioChangeCounter : IDisposable Remarks When the pin is an input, interrupts are used to detect pin changes unless the MCU supports a counter in hardware. Changes of the pin are enabled for the specified polarity, and the count is incremented when a change occurs. When the pin is an output, the count will increment whenever the specified transition occurs on the pin. For example, if the pin is configured as an output and counting is enabled for rising edges, writing a 0 and then a 1 will cause the count to be incremented. Constructors | Improve this Doc View Source GpioChangeCounter(GpioPin) Initializes a new instance of the GpioChangeCounter class associated with the specified pin. Only a single GpioChangeCounter may be associated with a pin at any given time. Declaration public GpioChangeCounter(GpioPin pin) Parameters Type Name Description GpioPin pin The pin on which to count changes. This pin must have been opened in Exclusive mode, and cannot be associated with another GpioChangeCounter. Remarks The following exceptions can be thrown by this method: E_INVALIDARG : TThe pin is already associated with a change counter.That change counter must be disposed before the pin can be associated with a new change counter. E_ACCESSDENIED : The pin is not opened in Exclusive mode. Properties | Improve this Doc View Source IsStarted Gets whether pin change counting is currently active. Declaration public bool IsStarted { get; } Property Value Type Description Boolean TRUE if this pin change counting is active and FALSE otherwise. | Improve this Doc View Source Polarity Gets or sets the polarity of transitions that will be counted. The polarity may only be changed when pin counting is not started. Declaration public GpioChangePolarity Polarity { get; set; } Property Value Type Description GpioChangePolarity Remarks The default polarity value is Falling. See GpioChangePolarity for more information on polarity values. Counting a single edge can be considerably more efficient than counting both edges. The following exceptions can be thrown when setting the polarity: E_INVALID_OPERATION :Change counting is currently active. Polarity can only be set before calling Start() or after calling Stop(). Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Read() Reads the current count of polarity changes. Before counting has been started, this will return 0. Declaration public GpioChangeCount Read() Returns Type Description GpioChangeCount A GpioChangeCount structure containing a count and an associated timestamp. Remarks The following exception can be thrown by this method: E_OBJECT_DISPOSED : The change counter or the associated pin has been disposed. | Improve this Doc View Source Reset() Resets the count to 0 and returns the previous count. Declaration public GpioChangeCount Reset() Returns Type Description GpioChangeCount A GpioChangeCount structure containing a count and an associated timestamp. Remarks The following exception can be thrown by this method: E_OBJECT_DISPOSED : The change counter or the associated pin has been disposed. | Improve this Doc View Source Start() Declaration public void Start() | Improve this Doc View Source Stop() Stop counting changes in pin polarity. This method may only be called when change counting is currently active. Declaration public void Stop() Remarks Calling Stop() may enable or reconfigure interrupts for the pin. The following exceptions can be thrown by this method: E_INVALID_OPERATION : Change counting has not been started. E_OBJECT_DISPOSED : The change counter or the associated pin has been disposed. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Gpio.GpioChangePolarity.html": {
    "href": "api/Windows.Devices.Gpio.GpioChangePolarity.html",
    "title": "Enum GpioChangePolarity | nanoFramework Documentation",
    "keywords": "Enum GpioChangePolarity Represents the polarity of changes that are relevant to the associated action. Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioChangePolarity Fields Name Description Both Transitions from both low to high and high to low should trigger the associated action. Falling Transitions from high to low should trigger the associated action. Rising Transitions from low to high should trigger the associated action. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.Gpio.GpioController.html": {
    "href": "api/Windows.Devices.Gpio.GpioController.html",
    "title": "Class GpioController | nanoFramework Documentation",
    "keywords": "Class GpioController Represents the default general-purpose I/O (GPIO) controller for the system. Inheritance Object GpioController Implements IGpioController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public sealed class GpioController : IGpioController Remarks To get a GpioController object, use the GetDefault() method. Properties PinCount Gets the number of pins on the general-purpose I/O (GPIO) controller. Declaration public int PinCount { get; } Property Value Type Description Int32 The number of pins on the GPIO controller. Some pins may not be available in user mode. For information about how the pin numbers correspond to physical pins, see the documentation for your circuit board. Methods | Improve this Doc View Source GetDefault() Gets the default general-purpose I/O (GPIO) controller for the system. Declaration public static GpioController GetDefault() Returns Type Description GpioController The default GPIO controller for the system, or null if the system has no GPIO controller. | Improve this Doc View Source OpenPin(Int32) Opens a connection to the specified general-purpose I/O (GPIO) pin in exclusive mode. Declaration public GpioPin OpenPin(int pinNumber) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. The pin number must be in range available to usermode applications Pin numbers start at 0, and increase to the maximum pin number, which is one less than the value returned by GpioController.PinCount. Which pins are available to usermode depends on the circuit board on which the code is running.For information about how pin numbers correspond to physical pins, see the documentation for your circuit board. Returns Type Description GpioPin The opened GPIO pin. Remarks The following exceptions can be thrown by this method: E_INVALIDARG (0x80070057)An invalid parameter was specified. This error will be returned if the pin number is out of range. Pin numbers start at 0 and increase to the maximum pin number, which is one less than the value returned by PinCount . HRESULT_FROM_WIN32(ERROR_NOT_FOUND) (0x80070490)The pin is not available to usermode applications; it is reserved by the system. See the documentation for your circuit board to find out which pins are available to usermode applications. HRESULT_FROM_WIN32(ERROR_SHARING_VIOLATION) (0x80070020)The pin is currently open in an incompatible sharing mode. For example: The pin is already open in GpioSharingMode.Exclusive mode. The pin is already open in GpioSharingMode.SharedReadOnly mode when you request to open it in GpioSharingMode.Exclusive mode. HRESULT_FROM_WIN32(ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE) (0x80073bde)The pin is currently muxed to a different function; for example I2C, SPI, or UART. Ensure the pin is not in use by another function. HRESULT_FROM_WIN32(ERROR_GEN_FAILURE) (0x8007001f)The GPIO driver returned an error. Ensure that the GPIO driver is running and configured correctly. | Improve this Doc View Source OpenPin(Int32, GpioSharingMode) Opens the specified general-purpose I/O (GPIO) pin in the specified mode. Declaration public GpioPin OpenPin(int pinNumber, GpioSharingMode sharingMode) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. The pin number must be in range available to usermode applications Pin numbers start at 0, and increase to the maximum pin number, which is one less than the value returned by GpioController.PinCount. Which pins are available to usermode depends on the circuit board on which the code is running.For information about how pin numbers correspond to physical pins, see the documentation for your circuit board. GpioSharingMode sharingMode The mode in which you want to open the GPIO pin, which determines whether other connections to the pin can be opened while you have the pin open. Returns Type Description GpioPin The opened GPIO pin. Remarks The following exceptions can be thrown by this method: E_INVALIDARG (0x80070057)An invalid parameter was specified. This error will be returned if the pin number is out of range. Pin numbers start at 0 and increase to the maximum pin number, which is one less than the value returned by PinCount . HRESULT_FROM_WIN32(ERROR_NOT_FOUND) (0x80070490)The pin is not available to usermode applications; it is reserved by the system. See the documentation for your circuit board to find out which pins are available to usermode applications. HRESULT_FROM_WIN32(ERROR_SHARING_VIOLATION) (0x80070020)The pin is currently open in an incompatible sharing mode. For example: The pin is already open in GpioSharingMode.Exclusive mode. The pin is already open in GpioSharingMode.SharedReadOnly mode when you request to open it in GpioSharingMode.Exclusive mode. HRESULT_FROM_WIN32(ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE) (0x80073bde)The pin is currently muxed to a different function; for example I2C, SPI, or UART. Ensure the pin is not in use by another function. HRESULT_FROM_WIN32(ERROR_GEN_FAILURE) (0x8007001f)The GPIO driver returned an error. Ensure that the GPIO driver is running and configured correctly. | Improve this Doc View Source TryOpenPin(Int32, GpioSharingMode, out GpioPin, out GpioOpenStatus) Opens the specified general-purpose I/O (GPIO) pin in the specified mode, and gets a status value that you can use to handle a failure to open the pin programmatically. Declaration public bool TryOpenPin(int pinNumber, GpioSharingMode sharingMode, out GpioPin pin, out GpioOpenStatus openStatus) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. Some pins may not be available in user mode. For information about how the pin numbers correspond to physical pins, see the documentation for your circuit board. GpioSharingMode sharingMode The mode in which you want to open the GPIO pin, which determines whether other connections to the pin can be opened while you have the pin open. GpioPin pin The opened GPIO pin if the return value is true; otherwise null. GpioOpenStatus openStatus An enumeration value that indicates either that the attempt to open the GPIO pin succeeded, or the reason that the attempt to open the GPIO pin failed. Returns Type Description Boolean True if the method successfully opened the pin; otherwise false. If the method returns true, the pin parameter receives an instance of a GpioPin, and the openStatus parameter receives GpioOpenStatus.PinOpened.If the method returns false, the pin parameter is null and the openStatus parameter receives the reason that the operation failed. Explicit Interface Implementations | Improve this Doc View Source IGpioController.OpenPin(Int32) Declaration IGpioPin IGpioController.OpenPin(int pinNumber) Parameters Type Name Description Int32 pinNumber Returns Type Description IGpioPin | Improve this Doc View Source IGpioController.OpenPin(Int32, GpioSharingMode) Declaration IGpioPin IGpioController.OpenPin(int pinNumber, GpioSharingMode sharingMode) Parameters Type Name Description Int32 pinNumber GpioSharingMode sharingMode Returns Type Description IGpioPin | Improve this Doc View Source IGpioController.TryOpenPin(Int32, GpioSharingMode, out IGpioPin, out GpioOpenStatus) Declaration bool IGpioController.TryOpenPin(int pinNumber, GpioSharingMode sharingMode, out IGpioPin pin, out GpioOpenStatus openStatus) Parameters Type Name Description Int32 pinNumber GpioSharingMode sharingMode IGpioPin pin GpioOpenStatus openStatus Returns Type Description Boolean Implements IGpioController Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Gpio.GpioOpenStatus.html": {
    "href": "api/Windows.Devices.Gpio.GpioOpenStatus.html",
    "title": "Enum GpioOpenStatus | nanoFramework Documentation",
    "keywords": "Enum GpioOpenStatus Describes the possible results of opening a pin with the GpioPin.TryOpenPin method. Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioOpenStatus Fields Name Description MuxingConflict The pin is currently opened for a different function, such as I2C, SPI, or UART. Ensure the pin is not in use by another function. PinOpened The GPIO pin was successfully opened. PinUnavailable The pin is reserved by the system and is not available to apps that run in user mode. SharingViolation The pin is currently open in an incompatible sharing mode. For example: The pin is already open in GpioSharingMode.Exclusive mode. The pin is already open in GpioSharingMode.SharedReadOnly mode when you request to open it in GpioSharingMode.Exclusive mode. UnknownError The pin could not be opened. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.Gpio.GpioPin.html": {
    "href": "api/Windows.Devices.Gpio.GpioPin.html",
    "title": "Class GpioPin | nanoFramework Documentation",
    "keywords": "Class GpioPin Represents a general-purpose I/O (GPIO) pin. Inheritance Object GpioPin Implements IGpioPin IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public sealed class GpioPin : IGpioPin, IDisposable Properties | Improve this Doc View Source DebounceTimeout Gets or sets the debounce timeout for the general-purpose I/O (GPIO) pin, which is an interval during which changes to the value of the pin are filtered out and do not generate ValueChanged events. Declaration public TimeSpan DebounceTimeout { get; set; } Property Value Type Description TimeSpan The debounce timeout for the GPIO pin, which is an interval during which changes to the value of the pin are filtered out and do not generate ValueChanged events. If the length of this interval is 0, all changes to the value of the pin generate ValueChanged events. | Improve this Doc View Source PinNumber Gets the pin number of the general-purpose I/O (GPIO) pin. Declaration public int PinNumber { get; } Property Value Type Description Int32 The pin number of the GPIO pin. | Improve this Doc View Source SharingMode Gets the sharing mode in which the general-purpose I/O (GPIO) pin is open. Declaration public GpioSharingMode SharingMode { get; } Property Value Type Description GpioSharingMode The sharing mode in which the GPIO pin is open. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetDriveMode() Gets the current drive mode for the general-purpose I/O (GPIO) pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Declaration public GpioPinDriveMode GetDriveMode() Returns Type Description GpioPinDriveMode An enumeration value that indicates the current drive mode for the GPIO pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. | Improve this Doc View Source IsDriveModeSupported(GpioPinDriveMode) Gets whether the general-purpose I/O (GPIO) pin supports the specified drive mode. Declaration public bool IsDriveModeSupported(GpioPinDriveMode driveMode) Parameters Type Name Description GpioPinDriveMode driveMode The drive mode that you want to check for support. Returns Type Description Boolean True if the GPIO pin supports the drive mode that driveMode specifies; otherwise false. If you specify a drive mode for which this method returns false when you call SetDriveMode(GpioPinDriveMode) , SetDriveMode(GpioPinDriveMode) generates an exception. Read() Reads the current value of the general-purpose I/O (GPIO) pin. Declaration public extern GpioPinValue Read() Returns Type Description GpioPinValue The current value of the GPIO pin. If the pin is configured as an output, this value is the last value written to the pin. | Improve this Doc View Source SetDriveMode(GpioPinDriveMode) Sets the drive mode of the general-purpose I/O (GPIO) pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Declaration public void SetDriveMode(GpioPinDriveMode value) Parameters Type Name Description GpioPinDriveMode value An enumeration value that specifies drive mode to use for the GPIO pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Remarks The following exceptions can be thrown by this method: E_INVALIDARG : The GPIO pin does not support the specified drive mode. E_ACCESSDENIED : The pin is open in shared read-only mode.Close the pin and reopen it in exclusive mode to change the drive mode of the pin. Toggle() Toggles the output of the general purpose I/O (GPIO) pin if the pin is configured as an output. Declaration public extern void Toggle() Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. | Improve this Doc View Source Write(GpioPinValue) Drives the specified value onto the general purpose I/O (GPIO) pin according to the current drive mode for the pin if the pin is configured as an output, or updates the latched output value for the pin if the pin is configured as an input. Declaration public void Write(GpioPinValue value) Parameters Type Name Description GpioPinValue value The enumeration value to write to the GPIO pin. If the GPIO pin is configured as an output, the method drives the specified value onto the pin according to the current drive mode for the pin. If the GPIO pin is configured as an input, the method updates the latched output value for the pin. The latched output value is driven onto the pin when the configuration for the pin changes to output. Remarks The following exceptions can be thrown by this method: E_ACCESSDENIED : The GPIO pin is open in shared read-only mode. To write to the pin, close the pin and reopen the pin in exclusive mode. Events | Improve this Doc View Source ValueChanged Occurs when the value of the general-purpose I/O (GPIO) pin changes, either because of an external stimulus when the pin is configured as an input, or when a value is written to the pin when the pin in configured as an output. Declaration public event GpioPinValueChangedEventHandler ValueChanged Event Type Type Description GpioPinValueChangedEventHandler Implements IGpioPin IDisposable Extension Methods GpioPinExtensions.SetAlternateFunction(GpioPin, Int32) LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Gpio.GpioPinDriveMode.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinDriveMode.html",
    "title": "Enum GpioPinDriveMode | nanoFramework Documentation",
    "keywords": "Enum GpioPinDriveMode Describes whether a general-purpose I/O (GPIO) pin is configured as an input or an output, and how values are driven onto the pin Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioPinDriveMode Fields Name Description Input Configures the GPIO pin in floating mode, with high impedance. InputPullDown Configures the GPIO pin as high impedance with a pull-down resistor to ground. InputPullUp Configures the GPIO pin as high impedance with a pull-up resistor to the voltage charge connection (VCC). Output Configures the GPIO pin in strong drive mode, with low impedance. OutputOpenDrain Configures the GPIO in open drain mode. OutputOpenDrainPullUp Configures the GPIO pin in open drain mode with resistive pull-up mode. OutputOpenSource Configures the GPIO pin in open collector mode. OutputOpenSourcePullDown Configures the GPIO pin in open collector mode with resistive pull-down mode. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.Gpio.GpioPinEdge.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinEdge.html",
    "title": "Enum GpioPinEdge | nanoFramework Documentation",
    "keywords": "Enum GpioPinEdge Describes the possible types of change that can occur to the value of the general-purpose I/O (GPIO) pin for the GpioPin.ValueChanged event. Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioPinEdge Fields Name Description FallingEdge The value of the GPIO pin changed from high to low. RisingEdge The value of the GPIO pin changed from low to high. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.Gpio.GpioPinExtensions.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinExtensions.html",
    "title": "Class GpioPinExtensions | nanoFramework Documentation",
    "keywords": "Class GpioPinExtensions nanoFramework extensions for GpioPin . Inheritance Object GpioPinExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public static class GpioPinExtensions Methods | Improve this Doc View Source SetAlternateFunction(GpioPin, Int32) Sets the pin to the specified alternate function. Declaration public static void SetAlternateFunction(this GpioPin pin, int alternateFunction) Parameters Type Name Description GpioPin pin Int32 alternateFunction The value of the alternate function. Remarks This extension is exclusive of nanoFramework and it may not be supported in all platforms. WARNING: Use with caution! There is no validation on the execution of this call and there is the potential for breaking things, so be sure to know what you are doing when using it. Platforms supporting this feature: Cortex-M and ESP32. Platforms not supporting this feature: none."
  },
  "api/Windows.Devices.Gpio.GpioPinValue.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinValue.html",
    "title": "Enum GpioPinValue | nanoFramework Documentation",
    "keywords": "Enum GpioPinValue Describes the possible values for a general-purpose I/O (GPIO) pin. Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioPinValue Fields Name Description High The value of the GPIO pin is high. Low The value of the GPIO pin is low. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.Gpio.GpioPinValueChangedEventArgs.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinValueChangedEventArgs.html",
    "title": "Class GpioPinValueChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class GpioPinValueChangedEventArgs Provides data about the ValueChanged event that occurs when the value of the general-purpose I/O (GPIO) pin changes, either because of an external stimulus when the pin is configured as an input, or when a value is written to the pin when the pin in configured as an output. Inheritance Object GpioPinValueChangedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public sealed class GpioPinValueChangedEventArgs Constructors | Improve this Doc View Source GpioPinValueChangedEventArgs(GpioPinEdge) Creats a new instance of the GpioPinValueChangedEventArgs class Declaration public GpioPinValueChangedEventArgs(GpioPinEdge edge) Parameters Type Name Description GpioPinEdge edge An enumeration value that indicates the type of change that occurred to the value of the GPIO pin for the GpioPin.ValueChanged event. Properties | Improve this Doc View Source Edge Gets the type of change that occurred to the value of the general-purpose I/O (GPIO) pin for the ValueChanged event. Declaration public GpioPinEdge Edge { get; } Property Value Type Description GpioPinEdge An enumeration value that indicates the type of change that occurred to the value of the GPIO pin for the GpioPin.ValueChanged event. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Gpio.GpioPinValueChangedEventHandler.html": {
    "href": "api/Windows.Devices.Gpio.GpioPinValueChangedEventHandler.html",
    "title": "Delegate GpioPinValueChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate GpioPinValueChangedEventHandler Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public delegate void GpioPinValueChangedEventHandler(object sender, GpioPinValueChangedEventArgs e); Parameters Type Name Description Object sender GpioPinValueChangedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Gpio.GpioSharingMode.html": {
    "href": "api/Windows.Devices.Gpio.GpioSharingMode.html",
    "title": "Enum GpioSharingMode | nanoFramework Documentation",
    "keywords": "Enum GpioSharingMode Describes the modes in which you can open a general-purpose I/O (GPIO) pin. These modes determine whether other connections to the GPIO pin can be opened while you have the pin open. Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public enum GpioSharingMode Fields Name Description Exclusive Opens the GPIO pin exclusively, so that no other connection to the pin can be opened. SharedReadOnly Opens the GPIO pin as shared, so that other connections in SharedReadOnly mode to the pin can be opened. You can only perform operations that do not change the state of the GPIO pin in shared mode. Operations that you can perform on the GPIO pin in shared mode include: Calling the GpioPin.Read method. Calling the GpioPin.GetDriveMode method. Getting the values of properties, such as GpioPin.PinNumber and GpioPin.DebounceTimeout. Registering an event handler for the GpioPin.ValueChanged event. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.Gpio.html": {
    "href": "api/Windows.Devices.Gpio.html",
    "title": "Namespace Windows.Devices.Gpio | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.Gpio Classes GpioChangeCounter Counts changes of a specified polarity on a general-purpose I/O (GPIO) pin. GpioController Represents the default general-purpose I/O (GPIO) controller for the system. GpioPin Represents a general-purpose I/O (GPIO) pin. GpioPinExtensions nanoFramework extensions for GpioPin . GpioPinValueChangedEventArgs Provides data about the ValueChanged event that occurs when the value of the general-purpose I/O (GPIO) pin changes, either because of an external stimulus when the pin is configured as an input, or when a value is written to the pin when the pin in configured as an output. Structs GpioChangeCount Represents a near-simultaneous sampling of the number of times a pin has changed value, and the time at which this count was sampled. This structure can be used to determine the number of pin value changes over a period of time. Interfaces IGpioController IGpioPin Enums GpioChangePolarity Represents the polarity of changes that are relevant to the associated action. GpioOpenStatus Describes the possible results of opening a pin with the GpioPin.TryOpenPin method. GpioPinDriveMode Describes whether a general-purpose I/O (GPIO) pin is configured as an input or an output, and how values are driven onto the pin GpioPinEdge Describes the possible types of change that can occur to the value of the general-purpose I/O (GPIO) pin for the GpioPin.ValueChanged event. GpioPinValue Describes the possible values for a general-purpose I/O (GPIO) pin. GpioSharingMode Describes the modes in which you can open a general-purpose I/O (GPIO) pin. These modes determine whether other connections to the GPIO pin can be opened while you have the pin open. Delegates GpioPinValueChangedEventHandler"
  },
  "api/Windows.Devices.Gpio.IGpioController.html": {
    "href": "api/Windows.Devices.Gpio.IGpioController.html",
    "title": "Interface IGpioController | nanoFramework Documentation",
    "keywords": "Interface IGpioController Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public interface IGpioController Properties | Improve this Doc View Source PinCount Gets the number of pins on the general-purpose I/O (GPIO) controller. Declaration int PinCount { get; } Property Value Type Description Int32 The number of pins on the GPIO controller. Some pins may not be available in user mode. For information about how the pin numbers correspond to physical pins, see the documentation for your circuit board. Methods | Improve this Doc View Source OpenPin(Int32) Opens a connection to the specified general-purpose I/O (GPIO) pin in exclusive mode. Declaration IGpioPin OpenPin(int pinNumber) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. The pin number must be in range available to usermode applications Pin numbers start at 0, and increase to the maximum pin number, which is one less than the value returned by GpioController.PinCount. Which pins are available to usermode depends on the circuit board on which the code is running.For information about how pin numbers correspond to physical pins, see the documentation for your circuit board. Returns Type Description IGpioPin An interface to the opened GPIO pin. | Improve this Doc View Source OpenPin(Int32, GpioSharingMode) Opens a connection to the specified general-purpose I/O (GPIO) pin in exclusive mode. Declaration IGpioPin OpenPin(int pinNumber, GpioSharingMode sharingMode) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. The pin number must be in range available to usermode applications Pin numbers start at 0, and increase to the maximum pin number, which is one less than the value returned by GpioController.PinCount. Which pins are available to usermode depends on the circuit board on which the code is running.For information about how pin numbers correspond to physical pins, see the documentation for your circuit board. GpioSharingMode sharingMode The mode in which you want to open the GPIO pin, which determines whether other connections to the pin can be opened while you have the pin open. Returns Type Description IGpioPin An interface to the opened GPIO pin. | Improve this Doc View Source TryOpenPin(Int32, GpioSharingMode, out IGpioPin, out GpioOpenStatus) Opens the specified general-purpose I/O (GPIO) pin in the specified mode, and gets a status value that you can use to handle a failure to open the pin programmatically. Declaration bool TryOpenPin(int pinNumber, GpioSharingMode sharingMode, out IGpioPin pin, out GpioOpenStatus openStatus) Parameters Type Name Description Int32 pinNumber The pin number of the GPIO pin that you want to open. Some pins may not be available in user mode. For information about how the pin numbers correspond to physical pins, see the documentation for your circuit board. GpioSharingMode sharingMode The mode in which you want to open the GPIO pin, which determines whether other connections to the pin can be opened while you have the pin open. IGpioPin pin The opened GPIO pin if the return value is true; otherwise null. GpioOpenStatus openStatus An enumeration value that indicates either that the attempt to open the GPIO pin succeeded, or the reason that the attempt to open the GPIO pin failed. Returns Type Description Boolean True if the method successfully opened the pin; otherwise false. If the method returns true, the pin parameter receives an instance of a GpioPin, and the openStatus parameter receives GpioOpenStatus.PinOpened.If the method returns false, the pin parameter is null and the openStatus parameter receives the reason that the operation failed. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Gpio.IGpioPin.html": {
    "href": "api/Windows.Devices.Gpio.IGpioPin.html",
    "title": "Interface IGpioPin | nanoFramework Documentation",
    "keywords": "Interface IGpioPin Namespace : Windows.Devices.Gpio Assembly : Windows.Devices.Gpio.dll Syntax public interface IGpioPin Properties | Improve this Doc View Source DebounceTimeout Gets or sets the debounce timeout for the general-purpose I/O (GPIO) pin, which is an interval during which changes to the value of the pin are filtered out and do not generate ValueChanged events. Declaration TimeSpan DebounceTimeout { get; set; } Property Value Type Description TimeSpan The debounce timeout for the GPIO pin, which is an interval during which changes to the value of the pin are filtered out and do not generate ValueChanged events. If the length of this interval is 0, all changes to the value of the pin generate ValueChanged events. | Improve this Doc View Source PinNumber Gets the pin number of the general-purpose I/O (GPIO) pin. Declaration int PinNumber { get; } Property Value Type Description Int32 The pin number of the GPIO pin. | Improve this Doc View Source SharingMode Gets the sharing mode in which the general-purpose I/O (GPIO) pin is open. Declaration GpioSharingMode SharingMode { get; } Property Value Type Description GpioSharingMode The sharing mode in which the GPIO pin is open. Methods | Improve this Doc View Source GetDriveMode() Gets the current drive mode for the general-purpose I/O (GPIO) pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Declaration GpioPinDriveMode GetDriveMode() Returns Type Description GpioPinDriveMode An enumeration value that indicates the current drive mode for the GPIO pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. | Improve this Doc View Source IsDriveModeSupported(GpioPinDriveMode) Gets whether the general-purpose I/O (GPIO) pin supports the specified drive mode. Declaration bool IsDriveModeSupported(GpioPinDriveMode driveMode) Parameters Type Name Description GpioPinDriveMode driveMode The drive mode that you want to check for support. Returns Type Description Boolean True if the GPIO pin supports the drive mode that driveMode specifies; otherwise false. If you specify a drive mode for which this method returns false when you call SetDriveMode(GpioPinDriveMode) , SetDriveMode(GpioPinDriveMode) generates an exception. | Improve this Doc View Source Read() Reads the current value of the general-purpose I/O (GPIO) pin. Declaration GpioPinValue Read() Returns Type Description GpioPinValue The current value of the GPIO pin. If the pin is configured as an output, this value is the last value written to the pin. | Improve this Doc View Source SetDriveMode(GpioPinDriveMode) Sets the drive mode of the general-purpose I/O (GPIO) pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Declaration void SetDriveMode(GpioPinDriveMode value) Parameters Type Name Description GpioPinDriveMode value An enumeration value that specifies drive mode to use for the GPIO pin. The drive mode specifies whether the pin is configured as an input or an output, and determines how values are driven onto the pin. Remarks The following exceptions can be thrown by this method: E_INVALIDARG : The GPIO pin does not support the specified drive mode. E_ACCESSDENIED : The pin is open in shared read-only mode. Close the pin and reopen it in exclusive mode to change the drive mode of the pin. | Improve this Doc View Source Write(GpioPinValue) Drives the specified value onto the general purpose I/O (GPIO) pin according to the current drive mode for the pin if the pin is configured as an output, or updates the latched output value for the pin if the pin is configured as an input. Declaration void Write(GpioPinValue value) Parameters Type Name Description GpioPinValue value The enumeration value to write to the GPIO pin. If the GPIO pin is configured as an output, the method drives the specified value onto the pin according to the current drive mode for the pin. If the GPIO pin is configured as an input, the method updates the latched output value for the pin. The latched output value is driven onto the pin when the configuration for the pin changes to output. Remarks The following exceptions can be thrown by this method: E_ACCESSDENIED : The GPIO pin is open in shared read-only mode. To write to the pin, close the pin and reopen the pin in exclusive mode. Events | Improve this Doc View Source ValueChanged Occurs when the value of the general-purpose I/O (GPIO) pin changes, either because of an external stimulus when the pin is configured as an input, or when a value is written to the pin when the pin in configured as an output. Declaration event GpioPinValueChangedEventHandler ValueChanged Event Type Type Description GpioPinValueChangedEventHandler Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.I2c.html": {
    "href": "api/Windows.Devices.I2c.html",
    "title": "Namespace Windows.Devices.I2c | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.I2c Classes I2cConnectionSettings Represents the connection settings you want to use for an inter-integrated circuit (I2C) device. I2cController Represents the I2C controller for the system. I2cDevice Represents a communications channel to a device on an inter-integrated circuit (I2C) bus. I2cDeviceAlreadyInUseException Exception thrown when a check in driver's constructor finds a device that already exists with the same settings (I2C bus AND slave address) Structs I2cTransferResult Provides information about whether the data transfers that the ReadPartial, WritePartial, or WriteReadPartial method performed succeeded, and the actual number of bytes the method transferred. Interfaces II2cDeviceStatics Provides ways to open a communications channel to a device on an inter-integrated circuit (I2C) bus. Enums I2cBusSpeed Describes the bus speeds that are available for connecting to an inter-integrated circuit (I2C) device. The bus speed is the frequency at which to clock the I2C bus when accessing the device. I2cSharingMode Describes the modes in which you can connect to an inter-integrated circuit (I2C) bus address. These modes determine whether other connections to the I2C bus address can be opened while you are connected to the I2C bus address. I2cTransferStatus Describes whether the data transfers that the ReadPartial, WritePartial, or WriteReadPartial method performed succeeded, or provides the reason that the transfers did not succeed."
  },
  "api/Windows.Devices.I2c.I2cBusSpeed.html": {
    "href": "api/Windows.Devices.I2c.I2cBusSpeed.html",
    "title": "Enum I2cBusSpeed | nanoFramework Documentation",
    "keywords": "Enum I2cBusSpeed Describes the bus speeds that are available for connecting to an inter-integrated circuit (I2C) device. The bus speed is the frequency at which to clock the I2C bus when accessing the device. Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public enum I2cBusSpeed Fields Name Description FastMode A fast speed of 400 kHz. StandardMode The standard speed of 100 kilohertz (kHz). This speed is the default. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.I2c.I2cConnectionSettings.html": {
    "href": "api/Windows.Devices.I2c.I2cConnectionSettings.html",
    "title": "Class I2cConnectionSettings | nanoFramework Documentation",
    "keywords": "Class I2cConnectionSettings Represents the connection settings you want to use for an inter-integrated circuit (I2C) device. Inheritance Object I2cConnectionSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public sealed class I2cConnectionSettings Constructors | Improve this Doc View Source I2cConnectionSettings(Int32) Creates and initializes a new instance of the I2cConnectionSettings class for inter-integrated circuit (I2C) device with specified bus address, using the default settings of the standard mode for the bus speed and exclusive sharing mode. Declaration public I2cConnectionSettings(int slaveAddress) Parameters Type Name Description Int32 slaveAddress The bus address of the inter-integrated circuit (I2C) device to which the settings of the I2cConnectionSettings should apply. Only 7-bit addressing is supported, so the range of values that are valid is from 8 to 119 (that's 0x08 and 0x77). Properties | Improve this Doc View Source BusSpeed Gets or sets the bus speed to use for connecting to an inter-integrated circuit (I2C) device. The bus speed is the frequency at which to clock the I2C bus when accessing the device. Declaration public I2cBusSpeed BusSpeed { get; set; } Property Value Type Description I2cBusSpeed The bus speed to use for connecting to anI2C device. | Improve this Doc View Source SharingMode Gets or sets the sharing mode to use to connect to the inter-integrated circuit (I2C) bus address. This mode determines whether other connections to the I2C bus address can be opened while you are connect to the I2C bus address. Declaration public I2cSharingMode SharingMode { get; set; } Property Value Type Description I2cSharingMode The sharing mode to use to connect to the I2C bus address. | Improve this Doc View Source SlaveAddress Gets or sets the bus address of the inter-integrated circuit (I2C) device. Declaration public int SlaveAddress { get; set; } Property Value Type Description Int32 The bus address of the I2C device. Only 7-bit addressing is supported, so the range of values that are valid is from 8 to 119 (that's 0x08 and 0x77). Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.I2c.I2cController.html": {
    "href": "api/Windows.Devices.I2c.I2cController.html",
    "title": "Class I2cController | nanoFramework Documentation",
    "keywords": "Class I2cController Represents the I2C controller for the system. Inheritance Object I2cController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public sealed class I2cController Methods | Improve this Doc View Source GetDefault() Gets the default I2C controller on the system. Declaration public static I2cController GetDefault() Returns Type Description I2cController The default I2C controller on the system, or null if the system has no I2C controller. | Improve this Doc View Source GetDevice(I2cConnectionSettings) Gets the I2C device with the specified settings. Declaration public I2cDevice GetDevice(I2cConnectionSettings settings) Parameters Type Name Description I2cConnectionSettings settings Returns Type Description I2cDevice The desired connection settings. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.I2c.I2cDevice.html": {
    "href": "api/Windows.Devices.I2c.I2cDevice.html",
    "title": "Class I2cDevice | nanoFramework Documentation",
    "keywords": "Class I2cDevice Represents a communications channel to a device on an inter-integrated circuit (I2C) bus. Inheritance Object I2cDevice Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public sealed class I2cDevice : IDisposable Properties | Improve this Doc View Source ConnectionSettings Gets the connection settings used for communication with the inter-integrated circuit (I2C) device. Declaration public I2cConnectionSettings ConnectionSettings { get; } Property Value Type Description I2cConnectionSettings The connection settings used for communication with the inter-integrated circuit (I2C) device. | Improve this Doc View Source DeviceId Gets the plug and play device identifier of the inter-integrated circuit (I2C) bus controller for the device. Declaration public string DeviceId { get; } Property Value Type Description String The plug and play device identifier of the inter-integrated circuit (I2C) bus controller for the device. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FromId(String, I2cConnectionSettings) Retrieves an I2cDevice object for the inter-integrated circuit (I2C) bus controller that has the specified plug and play device identifier, using the specified connection settings. Declaration public static I2cDevice FromId(string i2cBus, I2cConnectionSettings settings) Parameters Type Name Description String i2cBus The plug and play device identifier of the I2C bus controller for which you want to create an I2cDevice object. I2cConnectionSettings settings The connection settings to use for communication with the I2C bus controller that deviceId specifies. Returns Type Description I2cDevice An operation that returns the I2cDevice object. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: FromIdAsync. Exceptions Type Condition I2cDeviceAlreadyInUseException T | Improve this Doc View Source GetDeviceSelector() Retrieves an Advanced Query Syntax (AQS) string for all of the inter-integrated circuit (I2C) bus controllers on the system. You can use this string with the DeviceInformation.FindAll method to get DeviceInformation objects for those bus controllers. Declaration public static string GetDeviceSelector() Returns Type Description String An AQS string for all of the I2C bus controllers on the system, which you can use with the DeviceInformation.FindAllAsync method to get DeviceInformation objects for those bus controllers. | Improve this Doc View Source GetDeviceSelector(String) Retrieves an Advanced Query Syntax (AQS) string for the inter-integrated circuit (I2C) bus that has the specified friendly name. You can use this string with the DeviceInformation.FindAll method to get a DeviceInformation object for that bus. Declaration public static string GetDeviceSelector(string friendlyName) Parameters Type Name Description String friendlyName A friendly name for the particular I2C bus on a particular hardware platform for which you want to get the AQS string. Returns Type Description String An AQS string for the I2C bus that friendlyName specifies, which you can use with the DeviceInformation.FindAllAsync method to get a DeviceInformation object for that bus. | Improve this Doc View Source Read(Byte[]) Reads data from the inter-integrated circuit (I2C) bus on which the device is connected into the specified buffer. Declaration public void Read(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer to which you want to read the data from the I2C bus. The length of the buffer determines how much data to request from the device. | Improve this Doc View Source ReadPartial(Byte[]) Reads data from the inter-integrated circuit (I2C) bus on which the device is connected into the specified buffer, and returns information about the success of the operation that you can use for error handling. Declaration public I2cTransferResult ReadPartial(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer to which you want to read the data from the I2C bus. The length of the buffer determines how much data to request from the device. Returns Type Description I2cTransferResult A structure that contains information about the success of the read operation and the actual number of bytes that the operation read into the buffer. | Improve this Doc View Source Write(Byte[]) Writes data to the inter-integrated circuit (I2C) bus on which the device is connected, based on the bus address specified in the I2cConnectionSetting s object that you used to create the I2cDevice object. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer A buffer that contains the data that you want to write to the I2C device. This data should not include the bus address. | Improve this Doc View Source WritePartial(Byte[]) Writes data to the inter-integrated circuit (I2C) bus on which the device is connected, and returns information about the success of the operation that you can use for error handling. Declaration public I2cTransferResult WritePartial(byte[] buffer) Parameters Type Name Description Byte [] buffer A buffer that contains the data that you want to write to the I2C device. This data should not include the bus address. Returns Type Description I2cTransferResult A structure that contains information about the success of the write operation and the actual number of bytes that the operation wrote into the buffer. | Improve this Doc View Source WriteRead(Byte[], Byte[]) Performs an atomic operation to write data to and then read data from the inter-integrated circuit (I2C) bus on which the device is connected, and sends a restart condition between the write and read operations. Declaration public void WriteRead(byte[] writeBuffer, byte[] readBuffer) Parameters Type Name Description Byte [] writeBuffer A buffer that contains the data that you want to write to the I2C device. This data should not include the bus address. Byte [] readBuffer The buffer to which you want to read the data from the I2C bus. The length of the buffer determines how much data to request from the device. | Improve this Doc View Source WriteReadPartial(Byte[], Byte[]) Performs an atomic operation to write data to and then read data from the inter-integrated circuit (I2C) bus on which the device is connected, and returns information about the success of the operation that you can use for error handling. Declaration public I2cTransferResult WriteReadPartial(byte[] writeBuffer, byte[] readBuffer) Parameters Type Name Description Byte [] writeBuffer A buffer that contains the data that you want to write to the I2C device. This data should not include the bus address. Byte [] readBuffer The buffer to which you want to read the data from the I2C bus. The length of the buffer determines how much data to request from the device. Returns Type Description I2cTransferResult A structure that contains information about whether both the read and write parts of the operation succeeded and the sum of the actual number of bytes that the operation wrote and the actual number of bytes that the operation read. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.I2c.I2cDeviceAlreadyInUseException.html": {
    "href": "api/Windows.Devices.I2c.I2cDeviceAlreadyInUseException.html",
    "title": "Class I2cDeviceAlreadyInUseException | nanoFramework Documentation",
    "keywords": "Class I2cDeviceAlreadyInUseException Exception thrown when a check in driver's constructor finds a device that already exists with the same settings (I2C bus AND slave address) Inheritance Object Exception I2cDeviceAlreadyInUseException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax [Serializable] public class I2cDeviceAlreadyInUseException : Exception Methods | Improve this Doc View Source ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Exception.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.I2c.I2cSharingMode.html": {
    "href": "api/Windows.Devices.I2c.I2cSharingMode.html",
    "title": "Enum I2cSharingMode | nanoFramework Documentation",
    "keywords": "Enum I2cSharingMode Describes the modes in which you can connect to an inter-integrated circuit (I2C) bus address. These modes determine whether other connections to the I2C bus address can be opened while you are connected to the I2C bus address. Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public enum I2cSharingMode Fields Name Description Exclusive Connects to the I2C bus address exclusively, so that no other connection to the I2C bus address can be made while you remain connected. This mode is the default mode. Shared Connects to the I2C bus address in shared mode, so that other connections to the I2C bus address can be made while you remain connected. You can perform all operations on shared connections, but use such connections with care. When multiple client apps change the global state of the I2C device, race conditions can result. An example use case for using a shared connection is a sensor that obtains readings without changing the state of the device. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.I2c.I2cTransferResult.html": {
    "href": "api/Windows.Devices.I2c.I2cTransferResult.html",
    "title": "Struct I2cTransferResult | nanoFramework Documentation",
    "keywords": "Struct I2cTransferResult Provides information about whether the data transfers that the ReadPartial, WritePartial, or WriteReadPartial method performed succeeded, and the actual number of bytes the method transferred. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public struct I2cTransferResult Properties | Improve this Doc View Source BytesTransferred The actual number of bytes that the operation actually transferred. The following table describes what this value represents for each method. Declaration public uint BytesTransferred { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source Status An enumeration value that indicates if the read or write operation transferred the full number of bytes that the method requested, or the reason that the full transfer did not succeed. For WriteReadPartial, the value indicates whether the data for both the write and the read operations was entirely transferred. Declaration public I2cTransferStatus Status { get; set; } Property Value Type Description I2cTransferStatus Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.I2c.I2cTransferStatus.html": {
    "href": "api/Windows.Devices.I2c.I2cTransferStatus.html",
    "title": "Enum I2cTransferStatus | nanoFramework Documentation",
    "keywords": "Enum I2cTransferStatus Describes whether the data transfers that the ReadPartial, WritePartial, or WriteReadPartial method performed succeeded, or provides the reason that the transfers did not succeed. Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public enum I2cTransferStatus Fields Name Description ClockStretchTimeout The transfer failed due to the clock being stretched for too long. Ensure the clock line is not being held low. FullTransfer The data was entirely transferred. For WriteReadPartial, the data for both the write and the read operations was entirely transferred. For this status code, the value of the I2cTransferResult.BytesTransferred member that the method returns is the same as the size of the buffer you specified when you called the method, or is equal to the sum of the sizes of two buffers that you specified for WriteReadPartial. PartialTransfer The I2C device negatively acknowledged the data transfer before all of the data was transferred. For this status code, the value of the I2cTransferResult.BytesTransferred member that the method returns is the number of bytes actually transferred. For WriteReadPartial, the value is the sum of the number of bytes that the operation wrote and the number of bytes that the operation read. SlaveAddressNotAcknowledged The bus address was not acknowledged. For this status code, the value of the I2cTransferResult.BytesTransferred member that the method returns of the method is 0. UnknownError The transfer failed for an unknown reason. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.I2c.II2cDeviceStatics.html": {
    "href": "api/Windows.Devices.I2c.II2cDeviceStatics.html",
    "title": "Interface II2cDeviceStatics | nanoFramework Documentation",
    "keywords": "Interface II2cDeviceStatics Provides ways to open a communications channel to a device on an inter-integrated circuit (I2C) bus. Namespace : Windows.Devices.I2c Assembly : Windows.Devices.I2c.dll Syntax public interface II2cDeviceStatics Methods | Improve this Doc View Source FromId(String, I2cConnectionSettings) Retrieves an I2cDevice object asynchronously for the inter-integrated circuit (I2C) bus controller that has the specified plug and play device identifier, using the specified connection settings. Declaration I2cDevice FromId(string deviceId, I2cConnectionSettings settings) Parameters Type Name Description String deviceId The plug and play device identifier of the I2C bus controller for which you want to create an I2cDevice object. I2cConnectionSettings settings The connection settings to use for communication with the I2C bus controller that deviceId specifies. Returns Type Description I2cDevice An operation that returns the I2cDevice object. | Improve this Doc View Source GetDeviceSelector() Retrieves an Advanced Query Syntax (AQS) string for all of the inter-integrated circuit (I2C) bus controllers on the system. You can use this string with the DeviceInformation.FindAllAsync method to get DeviceInformation objects for those bus controllers. Declaration string GetDeviceSelector() Returns Type Description String An AQS string for all of the I2C bus controllers on the system, which you can use with the DeviceInformation.FindAll method to get DeviceInformation objects for those bus controllers. | Improve this Doc View Source GetDeviceSelector(String) Retrieves an Advanced Query Syntax (AQS) string for the inter-integrated circuit (I2C) bus that has the specified friendly name. You can use this string with the DeviceInformation.FindAll method to get a DeviceInformation object for that bus. Declaration string GetDeviceSelector(string friendlyName) Parameters Type Name Description String friendlyName A friendly name for the particular I2C bus on a particular hardware platform for which you want to get the AQS string. Returns Type Description String An AQS string for the I2C bus that friendlyName specifies, which you can use with the DeviceInformation.FindAll method to get a DeviceInformation object for that bus. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Pwm.html": {
    "href": "api/Windows.Devices.Pwm.html",
    "title": "Namespace Windows.Devices.Pwm | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.Pwm Classes PwmController Represents a PWM controller connected to the system. PwmPin Represents a single PWM pin on the system. Enums PwmPulsePolarity Describes which polarity the PWM signal should start in."
  },
  "api/Windows.Devices.Pwm.PwmController.html": {
    "href": "api/Windows.Devices.Pwm.PwmController.html",
    "title": "Class PwmController | nanoFramework Documentation",
    "keywords": "Class PwmController Represents a PWM controller connected to the system. Inheritance Object PwmController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Pwm Assembly : Windows.Devices.Pwm.dll Syntax public sealed class PwmController : IPwmController Properties | Improve this Doc View Source ActualFrequency Gets the actual frequency of the PWM. Declaration public double ActualFrequency { get; } Property Value Type Description Double The frequency in Hz. MaxFrequency Gets the maximum frequency offered by the controller. Declaration public double MaxFrequency { get; } Property Value Type Description Double The maximum frequency in Hz. MinFrequency Gets the minimum frequency offered by the controller. Declaration public double MinFrequency { get; } Property Value Type Description Double The minimum frequency in Hz. PinCount Gets the number of pins available on the system. Declaration public int PinCount { get; } Property Value Type Description Int32 The number of pins. Methods | Improve this Doc View Source FromId(String) Initializes a PWM controller instance based on the given DeviceInformation ID. Declaration public static PwmController FromId(string deviceId) Parameters Type Name Description String deviceId The acquired DeviceInformation ID. Returns Type Description PwmController PwmController | Improve this Doc View Source GetDefault() Gets the default PWM controller on the system. Declaration public static PwmController GetDefault() Returns Type Description PwmController The default PWM controller on the system, or null if the system has no PWM controller. GetDeviceSelector() Retrieves an Advanced Query Syntax (AQS) string for all the PWM controllers on the system. You can use this string with the DeviceInformation.FindAllAsync method to get DeviceInformation objects for those controllers. Declaration public static extern string GetDeviceSelector() Returns Type Description String | Improve this Doc View Source OpenPin(Int32) Opens the pin for use. Declaration public PwmPin OpenPin(int pinNumber) Parameters Type Name Description Int32 pinNumber Which pin to open. Returns Type Description PwmPin The requested pin now available for use. | Improve this Doc View Source SetDesiredFrequency(Double) Sets the PWM frequency. Declaration public double SetDesiredFrequency(double desiredFrequency) Parameters Type Name Description Double desiredFrequency Then value of the desired frequency in Hz. Returns Type Description Double The actual frequency that was set. This will be the closest supported match as determined by the provider. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Pwm.PwmPin.html": {
    "href": "api/Windows.Devices.Pwm.PwmPin.html",
    "title": "Class PwmPin | nanoFramework Documentation",
    "keywords": "Class PwmPin Represents a single PWM pin on the system. Inheritance Object PwmPin Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Pwm Assembly : Windows.Devices.Pwm.dll Syntax public sealed class PwmPin : IPwmPin, IDisposable Properties | Improve this Doc View Source Controller Gets the PWM controller in use by this pin. Declaration public PwmController Controller { get; } Property Value Type Description PwmController The controller. | Improve this Doc View Source IsStarted Gets the started state of the pin. Declaration public bool IsStarted { get; } Property Value Type Description Boolean True if the PWM has started on this pin, otherwise false. | Improve this Doc View Source Polarity Gets or sets the polarity of the pin. Declaration public PwmPulsePolarity Polarity { get; set; } Property Value Type Description PwmPulsePolarity The pin polarity. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source GetActiveDutyCyclePercentage() Retrieves the duty cycle percentage for this pin. Declaration public double GetActiveDutyCyclePercentage() Returns Type Description Double The duty cycle percentage, between 0.0 and 1.0. | Improve this Doc View Source SetActiveDutyCyclePercentage(Double) Sets the duty cycle percentage for this pin. Declaration public void SetActiveDutyCyclePercentage(double dutyCyclePercentage) Parameters Type Name Description Double dutyCyclePercentage The desired duty cycle percentage, represented as a value between 0.0 and 1.0. | Improve this Doc View Source Start() Starts the PWM on this pin. Declaration public void Start() | Improve this Doc View Source Stop() Stops the PWM on this pin. Declaration public void Stop() Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Pwm.PwmPulsePolarity.html": {
    "href": "api/Windows.Devices.Pwm.PwmPulsePolarity.html",
    "title": "Enum PwmPulsePolarity | nanoFramework Documentation",
    "keywords": "Enum PwmPulsePolarity Describes which polarity the PWM signal should start in. Namespace : Windows.Devices.Pwm Assembly : Windows.Devices.Pwm.dll Syntax public enum PwmPulsePolarity Fields Name Description ActiveHigh Configures the PWM signal to start in the active high state. ActiveLow Configures the PWM signal to start in the active low state. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.SerialCommunication.ErrorReceivedEventArgs.html": {
    "href": "api/Windows.Devices.SerialCommunication.ErrorReceivedEventArgs.html",
    "title": "Class ErrorReceivedEventArgs | nanoFramework Documentation",
    "keywords": "Class ErrorReceivedEventArgs Represents the object that is passed as a parameter to the event handler that is invoked when error occurs on the serial port. Inheritance Object ErrorReceivedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public sealed class ErrorReceivedEventArgs Remarks ErrorReceivedEventArgs is used to determine the type of error condition. When error occurs on the port, the previously registered ErrorReceived event handler is invoked. That event handler's parameter is a ErrorReceivedEventArgs object. After the event handler is invoked, you can determine the error condition by using the Error property. Properties | Improve this Doc View Source Error Gets the character type received that caused the event on the serial port. Declaration public SerialError Error { get; } Property Value Type Description SerialError One of the values defined in the SerialError enumeration. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.SerialCommunication.html": {
    "href": "api/Windows.Devices.SerialCommunication.html",
    "title": "Namespace Windows.Devices.SerialCommunication | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.SerialCommunication Classes ErrorReceivedEventArgs Represents the object that is passed as a parameter to the event handler that is invoked when error occurs on the serial port. PinChangedEventArgs Represents the object that is passed as a parameter to the event handler that is invoked when the state of a signal line changes on the serial port. SerialDataReceivedEventArgs Provides data for the DataReceived event. SerialDevice Represents a serial port. The object provides methods and properties that an app can use to find the port (in the system). Enums SerialData Specifies the type of character that was received on the Windows.Devices.SerialCommunication.SerialDeviceInputStream serial port of a SerialDevice object. SerialError Defines values for error conditions that can occur on the serial port. SerialHandshake Defines values for hardware and software flow control protocols used in serial communication. The values are used by Handshake property on the SerialDevice object. SerialMode Defines values for hardware and software mode of operation. SerialParity Defines values for the parity bit for the serial data transmission. The values are used by the Parity property on the SerialDevice object. SerialPinChange Defines values for types of signal state changes on the serial port. SerialStopBitCount Defines values that indicate the number of stop bits used in a transmission. The values are used by the StopBits property on the SerialDevice object. Delegates SerialDataReceivedEventHandler"
  },
  "api/Windows.Devices.SerialCommunication.PinChangedEventArgs.html": {
    "href": "api/Windows.Devices.SerialCommunication.PinChangedEventArgs.html",
    "title": "Class PinChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class PinChangedEventArgs Represents the object that is passed as a parameter to the event handler that is invoked when the state of a signal line changes on the serial port. Inheritance Object PinChangedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public sealed class PinChangedEventArgs Remarks At times, the state of a signal line can change on the serial port. For example, when the break state is enabled on the serial port causing data transmission to stop. The event is reported by invoking the app-implemented PinChanged event handler. That event handler's parameter is a PinChangedEventArgs object. Inspect the PinChange property to determine the type of signal line. Those values are defined in the SerialPinChange enumeration. Properties | Improve this Doc View Source PinChange Gets the type of signal change that caused the event on the serial port. Declaration public SerialPinChange PinChange { get; } Property Value Type Description SerialPinChange One of the values defined in SerialPinChange enumeration. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.SerialCommunication.SerialData.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialData.html",
    "title": "Enum SerialData | nanoFramework Documentation",
    "keywords": "Enum SerialData Specifies the type of character that was received on the Windows.Devices.SerialCommunication.SerialDeviceInputStream serial port of a SerialDevice object. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialData Remarks This enum is specific to nanoFramework. There is no equivalent in the UWP API. Fields Name Description Chars A character was received and placed in the input stream. WatchChar The character to watch was received and placed in the input stream. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.SerialCommunication.SerialDataReceivedEventArgs.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialDataReceivedEventArgs.html",
    "title": "Class SerialDataReceivedEventArgs | nanoFramework Documentation",
    "keywords": "Class SerialDataReceivedEventArgs Provides data for the DataReceived event. Inheritance Object SerialDataReceivedEventArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public class SerialDataReceivedEventArgs Remarks This method is specific to nanoFramework. There is no equivalent method in the UWP API. Properties | Improve this Doc View Source EventType Gets or sets the event type. Declaration public SerialData EventType { get; } Property Value Type Description SerialData Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.SerialCommunication.SerialDataReceivedEventHandler.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialDataReceivedEventHandler.html",
    "title": "Delegate SerialDataReceivedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate SerialDataReceivedEventHandler Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public delegate void SerialDataReceivedEventHandler(object sender, SerialDataReceivedEventArgs e); Parameters Type Name Description Object sender SerialDataReceivedEventArgs e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.SerialCommunication.SerialDevice.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialDevice.html",
    "title": "Class SerialDevice | nanoFramework Documentation",
    "keywords": "Class SerialDevice Represents a serial port. The object provides methods and properties that an app can use to find the port (in the system). Inheritance Object SerialDevice Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public sealed class SerialDevice : IDisposable Properties | Improve this Doc View Source BaudRate Gets or sets the baud rate. Declaration public uint BaudRate { get; set; } Property Value Type Description UInt32 The baud rate of the serial port. Remarks The property is set on the SerialDevice object that represents the serial port. The baud rate must be supported by the serial port. | Improve this Doc View Source BytesReceived Represents the number of bytes received by the last read operation of the input stream. Declaration public uint BytesReceived { get; } Property Value Type Description UInt32 The number of bytes received by the last read operation of the input stream. BytesToRead Gets the number of bytes of data available in the input stream. Declaration public uint BytesToRead { get; } Property Value Type Description UInt32 The number of bytes of data in the input stream. Remarks This property is specific to nanoFramework. There is no equivalent one in the UWP API. | Improve this Doc View Source DataBits The number of data bits in each character value that is transmitted or received, and does not include parity bits or stop bits. Declaration public ushort DataBits { get; set; } Property Value Type Description UInt16 The number of data bits in each character value that is transmitted or received. Remarks DataBits corresponds to the WordLength member of the SERIAL_LINE_CONTROL structure. | Improve this Doc View Source Handshake Gets or sets the handshaking protocol for flow control. Declaration public SerialHandshake Handshake { get; set; } Property Value Type Description SerialHandshake One of the values defined in SerialHandshake enumeration. | Improve this Doc View Source InputStream Input stream that contains the data received on the serial port. Declaration public IInputStream InputStream { get; } Property Value Type Description IInputStream Input stream that contains the data received. Remarks To access data received on the port, get the input stream from SerialDevice object, and then use the DataReader to read data. | Improve this Doc View Source Mode Declaration public SerialMode Mode { get; set; } Property Value Type Description SerialMode | Improve this Doc View Source OutputStream Gets an output stream to which the app can write data to transmit through the serial port. Declaration public IOutputStream OutputStream { get; } Property Value Type Description IOutputStream Remarks To write data, first get the output stream from the SerialDevice object by using OutputStream property and then use the DataWriter object to write the actual buffer. | Improve this Doc View Source Parity Gets or sets the parity bit for error-checking. Declaration public SerialParity Parity { get; set; } Property Value Type Description SerialParity One of the values defined in SerialParity enumeration. Remarks In serial communication, the parity bit is used as an error-checking procedure. In data transmission that uses parity checking, the bit format is 7 data bits-x-1 stop bit, where x is the parity bit. That bit indicates whether the number of 1s in the data byte is even or odd. The parity bit can be E (even), O (odd), M (mark), or S (space). Those values are defined in the SerialParity enumeration. For example, if the format is 7-E-1 and the data bits are 0001000, the parity bit is set to 1 to make sure there are even number of 1s. | Improve this Doc View Source PortName Gets the port name for serial communications. Declaration public string PortName { get; } Property Value Type Description String The communication port name. For example \"COM1\". | Improve this Doc View Source ReadTimeout Gets or sets the time-out value for a read operation. Declaration public TimeSpan ReadTimeout { get; set; } Property Value Type Description TimeSpan The span of time before a time-out occurs when a read operation does not finish. | Improve this Doc View Source StopBits Gets or sets the standard number of stop bits per byte. Declaration public SerialStopBitCount StopBits { get; set; } Property Value Type Description SerialStopBitCount One of the values defined in the SerialStopBitCount enumeration. Remarks In serial communication, a transmission begins with a start bit, followed by 8 bits of data, and ends with a stop bit. The purpose of the stop bit is to separate each unit of data or to indicate that no data is available for transmission. | Improve this Doc View Source WatchChar Sets a character to watch for in the incoming data stream. Declaration public char WatchChar { set; } Property Value Type Description Char Remarks This property is specific to nanoFramework. There is no equivalent in the UWP API. When calling Load(UInt32) in the InputStream the operation will return immediately if this character is received in the incoming data stream. No matter if the requested quantity of bytes hasn't been read. Also if this character is received in the incoming data stream, the DataReceived event is fired with it's SerialData parameter set to WatchChar . | Improve this Doc View Source WriteTimeout Gets or sets the time-out value for a write operation. Declaration public TimeSpan WriteTimeout { get; set; } Property Value Type Description TimeSpan The span of time before a time-out occurs when a write operation does not finish. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FromId(String) Creates a SerialDevice object. Declaration public static SerialDevice FromId(string deviceId) Parameters Type Name Description String deviceId The device instance path of the device. To obtain that value, get the DeviceInformation.Id property value. Returns Type Description SerialDevice Returns an SerialDevice object. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: FromIdAsync. GetDeviceSelector() Gets all the available Serial devices available on the system. Declaration public static extern string GetDeviceSelector() Returns Type Description String String containing all the serial devices available in the system. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API returns an Advanced Query Syntax (AQS) string. Events | Improve this Doc View Source DataReceived Indicates that data has been received through a SerialDevice object. Declaration public event SerialDataReceivedEventHandler DataReceived Event Type Type Description SerialDataReceivedEventHandler Remarks This event is specific to nanoFramework. There is no equivalent method in the UWP API. Data events can be caused by any of the items in the SerialData enumeration. Because the operating system determines whether to raise this event or not, not all parity errors may be reported. The DataReceived event is also raised if the WatchChar character is received, regardless of the number of bytes available in the InputStream . The DataReceived event is not guaranteed to be raised for every byte received. Use the BytesReceived property or the available bytes property of the InputStream to determine how much data is available to be read from the InputStream . Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.SerialCommunication.SerialError.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialError.html",
    "title": "Enum SerialError | nanoFramework Documentation",
    "keywords": "Enum SerialError Defines values for error conditions that can occur on the serial port. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialError Fields Name Description BufferOverrun A character-buffer overrun has occurred. The next character is lost. Frame The hardware detected a framing error. ReceiveFull An input buffer overflow has occurred. There is either no room in the input buffer, or a character was received after the end-of-file (EOF) character. ReceiveParity The hardware detected a parity error. TransmitFull The application tried to transmit a character, but the output buffer was full. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.SerialCommunication.SerialHandshake.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialHandshake.html",
    "title": "Enum SerialHandshake | nanoFramework Documentation",
    "keywords": "Enum SerialHandshake Defines values for hardware and software flow control protocols used in serial communication. The values are used by Handshake property on the SerialDevice object. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialHandshake Fields Name Description None No protocol is used for the handshake. RequestToSend When the port is receiving data and if the read buffer is full, the Request-to-Send (RTS) line is set to false. When buffer is available, the line is set to true. When the serial port is transmitting data, CTS line is set to false and the port does not send data until there is room in the write buffer. RequestToSendXOnXOff Both RequestToSend and XOnXOff controls are used for flow control. XOnXOff The serial port sends an Xoff control to inform the sender to stop sending data. When ready, the port sends an Xon control to inform he sender that the port is now ready to receive data. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.SerialCommunication.SerialMode.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialMode.html",
    "title": "Enum SerialMode | nanoFramework Documentation",
    "keywords": "Enum SerialMode Defines values for hardware and software mode of operation. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialMode Fields Name Description Normal Normal Serial mode with handshake define by SerialHandshake. RS485 Used for Half duplex RS485 mode. Puts the port in to half duplex RS485 mode where the RTS is raised while the port is sending data. Once data is completely sent the RTS signal is lowered. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.SerialCommunication.SerialParity.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialParity.html",
    "title": "Enum SerialParity | nanoFramework Documentation",
    "keywords": "Enum SerialParity Defines values for the parity bit for the serial data transmission. The values are used by the Parity property on the SerialDevice object. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialParity Fields Name Description Even Sets the parity bit so that the total count of data bits set is an even number. Mark Leaves the parity bit set to 1. None No parity check occurs. Odd Sets the parity bit so that the total count of data bits set is an odd number. Space Leaves the parity bit set to 0. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.SerialCommunication.SerialPinChange.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialPinChange.html",
    "title": "Enum SerialPinChange | nanoFramework Documentation",
    "keywords": "Enum SerialPinChange Defines values for types of signal state changes on the serial port. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialPinChange Fields Name Description BreakSignal Change in the break signal state. CarrierDetect Change in the Carrier Detect line for the port. ClearToSend Change in the Clear-to-Send line for the port. DataSetReady Change in the state of the Data Set Ready (DSR) signal. RingIndicator Change in the ring indicator state. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.SerialCommunication.SerialStopBitCount.html": {
    "href": "api/Windows.Devices.SerialCommunication.SerialStopBitCount.html",
    "title": "Enum SerialStopBitCount | nanoFramework Documentation",
    "keywords": "Enum SerialStopBitCount Defines values that indicate the number of stop bits used in a transmission. The values are used by the StopBits property on the SerialDevice object. Namespace : Windows.Devices.SerialCommunication Assembly : Windows.Devices.SerialCommunication.dll Syntax public enum SerialStopBitCount Fields Name Description One One stop bit is used. OnePointFive 1.5 stop bits are used. Two Two stop bits are used. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.Spi.DataBitOrder.html": {
    "href": "api/Windows.Devices.Spi.DataBitOrder.html",
    "title": "Enum DataBitOrder | nanoFramework Documentation",
    "keywords": "Enum DataBitOrder Defines the bit order of the data in the buffer to be transmitted/received to/from the SPI bus. Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public enum DataBitOrder Remarks This enum is specific to nanoFramework. Doesn't have correspondence in the UWP API. Fields Name Description LSB Data is in LSB (least significant bit) order. MSB Data is in MSB (most significant bit) order. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.Spi.html": {
    "href": "api/Windows.Devices.Spi.html",
    "title": "Namespace Windows.Devices.Spi | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.Spi Classes SpiBusInfo Represents the info about a SPI bus. SpiConnectionSettings Represents the settings for the connection with a device. SpiController Represents the SPI controller on the system. SpiDevice Represents a device connected through the SPI bus. SpiDeviceAlreadyInUseException Exception thrown when a check in driver's constructor finds a device that already exists with the same settings (SPI bus AND chip select line) Interfaces ISpiDeviceStatics Represents SPI device statistics common to SPI devices. Enums DataBitOrder Defines the bit order of the data in the buffer to be transmitted/received to/from the SPI bus. SpiMode Defines the SPI communication mode. The communication mode defines the clock edge on which the master out line toggles, the master in line samples, and the signal clock's signal steady level (named SCLK). Each mode is defined with a pair of parameters called clock polarity (CPOL) and clock phase (CPHA). SpiSharingMode Defines the sharing mode for the SPI bus."
  },
  "api/Windows.Devices.Spi.ISpiDeviceStatics.html": {
    "href": "api/Windows.Devices.Spi.ISpiDeviceStatics.html",
    "title": "Interface ISpiDeviceStatics | nanoFramework Documentation",
    "keywords": "Interface ISpiDeviceStatics Represents SPI device statistics common to SPI devices. Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public interface ISpiDeviceStatics Methods | Improve this Doc View Source FromId(String, SpiConnectionSettings) Opens a device with the connection settings provided. Declaration SpiDevice FromId(string busId, SpiConnectionSettings settings) Parameters Type Name Description String busId The id of the bus. SpiConnectionSettings settings The connection settings. Returns Type Description SpiDevice The SPI device. | Improve this Doc View Source GetBusInfo(String) Retrieves the info about a certain bus. Declaration SpiBusInfo GetBusInfo(string busId) Parameters Type Name Description String busId The id of the bus. Returns Type Description SpiBusInfo The bus info requested. | Improve this Doc View Source GetDeviceSelector() Gets all the SPI buses found on the system. Declaration string GetDeviceSelector() Returns Type Description String String containing all the buses found on the system. | Improve this Doc View Source GetDeviceSelector(String) Gets all the SPI buses found on the system that match the input parameter. Declaration string GetDeviceSelector(string friendlyName) Parameters Type Name Description String friendlyName Input parameter specifying an identifying name for the desired bus. This usually corresponds to a name on the schematic. Returns Type Description String String containing all the buses that have the input in the name. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Spi.SpiBusInfo.html": {
    "href": "api/Windows.Devices.Spi.SpiBusInfo.html",
    "title": "Class SpiBusInfo | nanoFramework Documentation",
    "keywords": "Class SpiBusInfo Represents the info about a SPI bus. Inheritance Object SpiBusInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public sealed class SpiBusInfo Properties | Improve this Doc View Source ChipSelectLineCount Gets the number of chip select lines available on the bus. Declaration public int ChipSelectLineCount { get; } Property Value Type Description Int32 Number of chip select lines. | Improve this Doc View Source MaxClockFrequency Maximum clock cycle frequency of the bus. Declaration public int MaxClockFrequency { get; } Property Value Type Description Int32 The clock cycle in Hz. | Improve this Doc View Source MinClockFrequency Minimum clock cycle frequency of the bus. Declaration public int MinClockFrequency { get; } Property Value Type Description Int32 The clock cycle in Hz. | Improve this Doc View Source SupportedDataBitLengths Gets the bit lengths that can be used on the bus for transmitting data. Declaration public int[] SupportedDataBitLengths { get; } Property Value Type Description Int32 [] The supported data lengths. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Spi.SpiConnectionSettings.html": {
    "href": "api/Windows.Devices.Spi.SpiConnectionSettings.html",
    "title": "Class SpiConnectionSettings | nanoFramework Documentation",
    "keywords": "Class SpiConnectionSettings Represents the settings for the connection with a device. Inheritance Object SpiConnectionSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public sealed class SpiConnectionSettings Constructors | Improve this Doc View Source SpiConnectionSettings(Int32) Initializes new instance of SpiConnectionSettings. Declaration public SpiConnectionSettings(int chipSelectLine) Parameters Type Name Description Int32 chipSelectLine The chip select line on which the connection will be made. Properties | Improve this Doc View Source BitOrder Gets or sets the DataBitOrder for the data in the buffers. This setting is only used when the DataBitLength is set to 16. Declaration public DataBitOrder BitOrder { get; set; } Property Value Type Description DataBitOrder The bit order mode. Remarks This field is specific to nanoFramework. Doesn't have correspondence in the UWP API. | Improve this Doc View Source ChipSelectLine Gets the chip select line for the connection to the SPI device. Declaration public int ChipSelectLine { get; } Property Value Type Description Int32 The chip select line. | Improve this Doc View Source ClockFrequency Gets or sets the clock frequency for the connection. Declaration public int ClockFrequency { get; set; } Property Value Type Description Int32 Value of the clock frequency in Hz. | Improve this Doc View Source DataBitLength Gets or sets the bit length for data on this connection. Declaration public int DataBitLength { get; set; } Property Value Type Description Int32 The data bit length. | Improve this Doc View Source Mode Gets or sets the SpiMode for this connection. Declaration public SpiMode Mode { get; set; } Property Value Type Description SpiMode The communication mode. | Improve this Doc View Source SharingMode Gets or sets the sharing mode for the SPI connection. Declaration public SpiSharingMode SharingMode { get; set; } Property Value Type Description SpiSharingMode The sharing mode. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Spi.SpiController.html": {
    "href": "api/Windows.Devices.Spi.SpiController.html",
    "title": "Class SpiController | nanoFramework Documentation",
    "keywords": "Class SpiController Represents the SPI controller on the system. Inheritance Object SpiController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public sealed class SpiController Methods | Improve this Doc View Source GetDefault() Gets the default SPI controller on the system. Declaration public static SpiController GetDefault() Returns Type Description SpiController The default SPI controller on the system, or null if the system has no SPI controller. | Improve this Doc View Source GetDevice(SpiConnectionSettings) Gets the SPI device with the specified settings. Declaration public SpiDevice GetDevice(SpiConnectionSettings settings) Parameters Type Name Description SpiConnectionSettings settings The desired connection settings. Returns Type Description SpiDevice The SPI device. Exceptions Type Condition NotSupportedException Thrown if the chip select pin is already in use ArgumentOutOfRangeException Thrown if the maximum number of devices on SPI bus is reached ArgumentException Thrown if invalid SPI bus SystemException Thrown if GPIO pin already in use. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Spi.SpiDevice.html": {
    "href": "api/Windows.Devices.Spi.SpiDevice.html",
    "title": "Class SpiDevice | nanoFramework Documentation",
    "keywords": "Class SpiDevice Represents a device connected through the SPI bus. Inheritance Object SpiDevice Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public sealed class SpiDevice : IDisposable Properties | Improve this Doc View Source ConnectionSettings Gets the connection settings for the device. Declaration public SpiConnectionSettings ConnectionSettings { get; } Property Value Type Description SpiConnectionSettings The connection settings. | Improve this Doc View Source DeviceId Gets the unique ID associated with the device. Declaration public string DeviceId { get; } Property Value Type Description String The ID. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FromId(String, SpiConnectionSettings) Opens a device with the connection settings provided. Declaration public static SpiDevice FromId(string busId, SpiConnectionSettings settings) Parameters Type Name Description String busId The id of the bus. SpiConnectionSettings settings The connection settings. Returns Type Description SpiDevice The SPI device requested. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: FromIdAsync. Exceptions Type Condition NotSupportedException Thrown if the chip select pin is already in use ArgumentOutOfRangeException Thrown if the maximum number of devices on SPI bus is reached ArgumentException Thrown if invalid SPI bus SystemException Thrown if GPIO pin already in use. | Improve this Doc View Source GetBusInfo(String) Retrieves the info about a certain bus. Declaration public static SpiBusInfo GetBusInfo(string busId) Parameters Type Name Description String busId The id of the bus. Returns Type Description SpiBusInfo The bus info requested. | Improve this Doc View Source GetDeviceSelector() Gets all the SPI buses found on the system. Declaration public static string GetDeviceSelector() Returns Type Description String String containing all the buses found on the system. | Improve this Doc View Source GetDeviceSelector(String) Gets all the SPI buses found on the system that match the input parameter. Declaration public static string GetDeviceSelector(string friendlyName) Parameters Type Name Description String friendlyName Input parameter specifying an identifying name for the desired bus. This usually corresponds to a name on the schematic. Returns Type Description String String containing all the buses that have the input in the name. | Improve this Doc View Source Read(Byte[]) Reads from the connected device. Declaration public void Read(byte[] buffer) Parameters Type Name Description Byte [] buffer Array containing data read from the device. | Improve this Doc View Source Read(UInt16[]) Reads from the connected device. Declaration public void Read(ushort[] buffer) Parameters Type Name Description UInt16 [] buffer Array containing data read from the device. | Improve this Doc View Source TransferFullDuplex(Byte[], Byte[]) Transfer data using a full duplex communication system. Full duplex allows both the master and the slave to communicate simultaneously. Declaration public void TransferFullDuplex(byte[] writeBuffer, byte[] readBuffer) Parameters Type Name Description Byte [] writeBuffer Array containing data to write to the device. Byte [] readBuffer Array containing data read from the device. | Improve this Doc View Source TransferFullDuplex(UInt16[], UInt16[]) Transfer data using a full duplex communication system. Full duplex allows both the master and the slave to communicate simultaneously. Declaration public void TransferFullDuplex(ushort[] writeBuffer, ushort[] readBuffer) Parameters Type Name Description UInt16 [] writeBuffer Array containing data to write to the device. UInt16 [] readBuffer Array containing data read from the device. | Improve this Doc View Source TransferSequential(Byte[], Byte[]) Transfer data sequentially to the device. Declaration public void TransferSequential(byte[] writeBuffer, byte[] readBuffer) Parameters Type Name Description Byte [] writeBuffer Array containing data to write to the device. Byte [] readBuffer Array containing data read from the device. | Improve this Doc View Source TransferSequential(UInt16[], UInt16[]) Transfer data sequentially to the device. Declaration public void TransferSequential(ushort[] writeBuffer, ushort[] readBuffer) Parameters Type Name Description UInt16 [] writeBuffer Array containing data to write to the device. UInt16 [] readBuffer Array containing data read from the device. | Improve this Doc View Source Write(Byte[]) Writes to the connected device. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer Array containing the data to write to the device. | Improve this Doc View Source Write(UInt16[]) Writes to the connected device. Declaration public void Write(ushort[] buffer) Parameters Type Name Description UInt16 [] buffer Array containing the data to write to the device. Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Spi.SpiDeviceAlreadyInUseException.html": {
    "href": "api/Windows.Devices.Spi.SpiDeviceAlreadyInUseException.html",
    "title": "Class SpiDeviceAlreadyInUseException | nanoFramework Documentation",
    "keywords": "Class SpiDeviceAlreadyInUseException Exception thrown when a check in driver's constructor finds a device that already exists with the same settings (SPI bus AND chip select line) Inheritance Object Exception SpiDeviceAlreadyInUseException Inherited Members Exception.HResult Exception.Message Exception.InnerException Exception.StackTrace Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax [Serializable] public class SpiDeviceAlreadyInUseException : Exception Methods | Improve this Doc View Source ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides Exception.ToString() Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.Spi.SpiMode.html": {
    "href": "api/Windows.Devices.Spi.SpiMode.html",
    "title": "Enum SpiMode | nanoFramework Documentation",
    "keywords": "Enum SpiMode Defines the SPI communication mode. The communication mode defines the clock edge on which the master out line toggles, the master in line samples, and the signal clock's signal steady level (named SCLK). Each mode is defined with a pair of parameters called clock polarity (CPOL) and clock phase (CPHA). Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public enum SpiMode Fields Name Description Mode0 CPOL = 0, CPHA = 0. Mode1 CPOL = 0, CPHA = 1. Mode2 CPOL = 1, CPHA = 0. Mode3 CPOL = 1, CPHA = 1. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.Spi.SpiSharingMode.html": {
    "href": "api/Windows.Devices.Spi.SpiSharingMode.html",
    "title": "Enum SpiSharingMode | nanoFramework Documentation",
    "keywords": "Enum SpiSharingMode Defines the sharing mode for the SPI bus. Namespace : Windows.Devices.Spi Assembly : Windows.Devices.Spi.dll Syntax public enum SpiSharingMode Fields Name Description Exclusive SPI bus segment is not shared. Shared SPI bus is shared. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.WiFi.AvailableNetworksChangedEventHandler.html": {
    "href": "api/Windows.Devices.WiFi.AvailableNetworksChangedEventHandler.html",
    "title": "Delegate AvailableNetworksChangedEventHandler | nanoFramework Documentation",
    "keywords": "Delegate AvailableNetworksChangedEventHandler Event raised when a scan completes on this Wi-Fi adapter. Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public delegate void AvailableNetworksChangedEventHandler(WiFiAdapter sender, object e); Parameters Type Name Description WiFiAdapter sender Object e Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.WiFi.html": {
    "href": "api/Windows.Devices.WiFi.html",
    "title": "Namespace Windows.Devices.WiFi | nanoFramework Documentation",
    "keywords": "Namespace Windows.Devices.WiFi Classes WiFiAdapter Provides a means to scan for nearby WiFi access points, enumerate those that are found, and connect to an access point. WiFiAvailableNetwork Describes an available Wi-Fi network. WiFiConnectionResult Describes the results of an attempt to connect to a Wi-Fi network. WiFiNetworkReport Contains the result of a network scan operation. Enums WiFiConnectionStatus Status of the connection attempt. WiFiNetworkKind Describes the kinds of Wi-Fi networks. WiFiReconnectionKind Describes whether to automatically reconnect to this network. Delegates AvailableNetworksChangedEventHandler Event raised when a scan completes on this Wi-Fi adapter."
  },
  "api/Windows.Devices.WiFi.WiFiAdapter.html": {
    "href": "api/Windows.Devices.WiFi.WiFiAdapter.html",
    "title": "Class WiFiAdapter | nanoFramework Documentation",
    "keywords": "Class WiFiAdapter Provides a means to scan for nearby WiFi access points, enumerate those that are found, and connect to an access point. Inheritance Object WiFiAdapter Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public sealed class WiFiAdapter : IDisposable Properties | Improve this Doc View Source NetworkInterface Gets the network interface number associatted with this Wi-Fi adapter Declaration public int NetworkInterface { get; } Property Value Type Description Int32 | Improve this Doc View Source NetworkReport Gets a list of available networks populated by the last Wi-Fi scan on this WiFiNetworkAdapter. Declaration public WiFiNetworkReport NetworkReport { get; } Property Value Type Description WiFiNetworkReport Methods | Improve this Doc View Source Connect(String, WiFiReconnectionKind, String) Connect this Wi-Fi device to the specified network (using SSID string), with the specified passphrase and reconnection policy. Declaration public WiFiConnectionResult Connect(string ssid, WiFiReconnectionKind reconnectionKind, string passwordCredential) Parameters Type Name Description String ssid Describes the Wi-Fi network to be connected. WiFiReconnectionKind reconnectionKind Specifies how to reconnect if the connection is lost. String passwordCredential The passphrase to be used to connect to the access point. Returns Type Description WiFiConnectionResult On successful conclusion of the operation, returns an object that describes the result of the connect operation. | Improve this Doc View Source Connect(WiFiAvailableNetwork, WiFiReconnectionKind, String) Connect this Wi-Fi device to the specified network, with the specified passphrase and reconnection policy. Declaration public WiFiConnectionResult Connect(WiFiAvailableNetwork availableNetwork, WiFiReconnectionKind reconnectionKind, string passwordCredential) Parameters Type Name Description WiFiAvailableNetwork availableNetwork Describes the Wi-Fi network to be connected. WiFiReconnectionKind reconnectionKind Specifies how to reconnect if the connection is lost. String passwordCredential The passphrase to be used to connect to the access point. Returns Type Description WiFiConnectionResult On successful conclusion of the operation, returns an object that describes the result of the connect operation. | Improve this Doc View Source Disconnect() Disconnects any active Wi-Fi connection through this adapter. Declaration public void Disconnect() | Improve this Doc View Source Dispose() Dispose WiFiAdapter Declaration public void Dispose() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source FindAllAdapters() A static method that enumerates all the Wi-Fi adapters in the system. Declaration public static WiFiAdapter[] FindAllAdapters() Returns Type Description WiFiAdapter [] On successful completion, returns an array of WiFiAdapter objects | Improve this Doc View Source ScanAsync() Directs this adapter to initiate an asynchronous network scan. Declaration public void ScanAsync() Remarks On successful completion, returns a list of networks scanned by this adapter signalled by the AvailableNetworksChanged event. Use NetworkReport to retrive the list of available Networks. Events | Improve this Doc View Source AvailableNetworksChanged Event raised when a scan completes on this Wi-Fi adapter. Declaration public event AvailableNetworksChangedEventHandler AvailableNetworksChanged Event Type Type Description AvailableNetworksChangedEventHandler Implements IDisposable Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.WiFi.WiFiAvailableNetwork.html": {
    "href": "api/Windows.Devices.WiFi.WiFiAvailableNetwork.html",
    "title": "Class WiFiAvailableNetwork | nanoFramework Documentation",
    "keywords": "Class WiFiAvailableNetwork Describes an available Wi-Fi network. Inheritance Object WiFiAvailableNetwork Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public class WiFiAvailableNetwork Properties | Improve this Doc View Source Bsid Gets the MAC address of the access point. Declaration public string Bsid { get; } Property Value Type Description String | Improve this Doc View Source NetworkKind Gets a value describing the kind of network being described. Declaration public WiFiNetworkKind NetworkKind { get; } Property Value Type Description WiFiNetworkKind | Improve this Doc View Source NetworkRssiInDecibelMilliwatts Gets the signal strength of the network in Ddm Declaration public double NetworkRssiInDecibelMilliwatts { get; } Property Value Type Description Double | Improve this Doc View Source SignalBars Gets the strength of the signal as a number of bars. Declaration public byte SignalBars { get; } Property Value Type Description Byte | Improve this Doc View Source Ssid Gets the SSID (name) of the network. Declaration public string Ssid { get; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.WiFi.WiFiConnectionResult.html": {
    "href": "api/Windows.Devices.WiFi.WiFiConnectionResult.html",
    "title": "Class WiFiConnectionResult | nanoFramework Documentation",
    "keywords": "Class WiFiConnectionResult Describes the results of an attempt to connect to a Wi-Fi network. Inheritance Object WiFiConnectionResult Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public class WiFiConnectionResult Properties | Improve this Doc View Source ConnectionStatus Gets the connection result value. Declaration public WiFiConnectionStatus ConnectionStatus { get; } Property Value Type Description WiFiConnectionStatus Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.WiFi.WiFiConnectionStatus.html": {
    "href": "api/Windows.Devices.WiFi.WiFiConnectionStatus.html",
    "title": "Enum WiFiConnectionStatus | nanoFramework Documentation",
    "keywords": "Enum WiFiConnectionStatus Status of the connection attempt. Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public enum WiFiConnectionStatus Fields Name Description AccessRevoked Connection failed because access to the network has been revoked. InvalidCredential Connection failed because an invalid credential was presented. NetworkNotAvailable Connection failed because the network is not available. Success Connection succeeded. Timeout Connection failed because the connection attempt timed out. UnspecifiedFailure Connection failed for a reason other than those in this list. UnsupportedAuthenticationProtocol Connection failed because the authentication protocol is not supported. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.WiFi.WiFiNetworkKind.html": {
    "href": "api/Windows.Devices.WiFi.WiFiNetworkKind.html",
    "title": "Enum WiFiNetworkKind | nanoFramework Documentation",
    "keywords": "Enum WiFiNetworkKind Describes the kinds of Wi-Fi networks. Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public enum WiFiNetworkKind Fields Name Description Adhoc An independent (IBSS) network. Any Either an infrastructure or independent network. Infrastructure An infrastructure network. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Devices.WiFi.WiFiNetworkReport.html": {
    "href": "api/Windows.Devices.WiFi.WiFiNetworkReport.html",
    "title": "Class WiFiNetworkReport | nanoFramework Documentation",
    "keywords": "Class WiFiNetworkReport Contains the result of a network scan operation. Inheritance Object WiFiNetworkReport Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public class WiFiNetworkReport Properties | Improve this Doc View Source AvailableNetworks A list of available networks. Declaration public WiFiAvailableNetwork[] AvailableNetworks { get; } Property Value Type Description WiFiAvailableNetwork [] Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Devices.WiFi.WiFiReconnectionKind.html": {
    "href": "api/Windows.Devices.WiFi.WiFiReconnectionKind.html",
    "title": "Enum WiFiReconnectionKind | nanoFramework Documentation",
    "keywords": "Enum WiFiReconnectionKind Describes whether to automatically reconnect to this network. Namespace : Windows.Devices.WiFi Assembly : Windows.Devices.Wifi.dll Syntax public enum WiFiReconnectionKind Fields Name Description Automatic Reconnect automatically. Manual Allow user to reconnect manually. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Storage.CreationCollisionOption.html": {
    "href": "api/Windows.Storage.CreationCollisionOption.html",
    "title": "Enum CreationCollisionOption | nanoFramework Documentation",
    "keywords": "Enum CreationCollisionOption Specifies what to do if a file or folder with the specified name already exists in the current folder when you create a new file or folder. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public enum CreationCollisionOption Fields Name Description FailIfExists Raise an exception of type System.Exception if the file or folder already exists. Methods that don't explicitly pass a value from the CreationCollisionOption enumeration use the FailIfExists value as the default when you try to create, rename, copy, or move a file or folder. GenerateUniqueName Automatically append a number to the base of the specified name if the file or folder already exists. For example, if MyFile.txt already exists, then the new file is named MyFile(2).txt.If MyFolder already exists, then the new folder is named MyFolder(2). OpenIfExists Return the existing item if the file or folder already exists. ReplaceExisting Replace the existing item if the file or folder already exists. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Storage.Devices.html": {
    "href": "api/Windows.Storage.Devices.html",
    "title": "Namespace Windows.Storage.Devices | nanoFramework Documentation",
    "keywords": "Namespace Windows.Storage.Devices Classes SDCard Class to allow a single SDCard to be mounted on the system. Only allows for 1 device to be mounted, either via MMC or SPI"
  },
  "api/Windows.Storage.Devices.SDCard.html": {
    "href": "api/Windows.Storage.Devices.SDCard.html",
    "title": "Class SDCard | nanoFramework Documentation",
    "keywords": "Class SDCard Class to allow a single SDCard to be mounted on the system. Only allows for 1 device to be mounted, either via MMC or SPI Inheritance Object SDCard Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage.Devices Assembly : Windows.Storage.dll Syntax public static class SDCard Properties | Improve this Doc View Source IsMounted Indcates if the SDscard has been mounted Declaration public static bool IsMounted { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source MountMMC(Boolean) Mount the SDcard device on the MMC interface Declaration public static void MountMMC(bool Data1bit) Parameters Type Name Description Boolean Data1bit If true denotes 1 bit data path will be used otherwise it will be 4 bits. Remarks This will try to mount the SDCard on the specified interface. If the Card is not present or the card is unable to be read then an exception will be thrown. | Improve this Doc View Source MountSpi(String, Int32) Mount the SPI SDcard device on the specified SPI bus Declaration public static void MountSpi(string SpiController, int ChipSelect) Parameters Type Name Description String SpiController The name for the SPI device, i.e \"SPI1\" Int32 ChipSelect The GPIO pin used for chip select on SDcard. Remarks This will try to mount the SDCard on the specified interface. If the Card is not present or the card is unable to be read then an exception will be thrown. | Improve this Doc View Source Unmount() Unmount the mounted SDcard. Declaration public static void Unmount()"
  },
  "api/Windows.Storage.FileAttributes.html": {
    "href": "api/Windows.Storage.FileAttributes.html",
    "title": "Enum FileAttributes | nanoFramework Documentation",
    "keywords": "Enum FileAttributes Describes the attributes of a file or folder. This enumeration has a System.FlagsAttribute attribute that allows a bitwise combination of its member values. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public enum FileAttributes Fields Name Description Archive The item is archived. Directory The item is a directory. LocallyIncomplete The item is locally incomplete. Windows only. Normal The item is normal. That is, the item doesn't have any of the other values in the enumeration. ReadOnly The item is read-only. Temporary The item is a temporary file. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Storage.FileIO.html": {
    "href": "api/Windows.Storage.FileIO.html",
    "title": "Class FileIO | nanoFramework Documentation",
    "keywords": "Class FileIO Provides helper methods for reading and writing files that are represented by objects of type IStorageFile. Inheritance Object FileIO Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public static class FileIO Methods | Improve this Doc View Source ReadBuffer(IStorageFile) Reads the contents of the specified file and returns a buffer. Declaration public static IBuffer ReadBuffer(IStorageFile file) Parameters Type Name Description IStorageFile file The file to read. Returns Type Description IBuffer When this method completes, it returns an object (type IBuffer ) that represents the contents of the file. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be ReadBufferAsync(IStorageFile). | Improve this Doc View Source ReadText(IStorageFile) Reads the contents of the specified file and returns text. Declaration public static string ReadText(IStorageFile file) Parameters Type Name Description IStorageFile file The file to read. Returns Type Description String When this method completes successfully, it returns the contents of the file as a text string. Remarks The encoding will always be Utf8 which is the only supported encoding in nanoFramework. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be ReadTextAsync(IStorageFile). | Improve this Doc View Source WriteBuffer(IStorageFile, IBuffer) Writes data from a buffer to the specified file. Declaration public static void WriteBuffer(IStorageFile file, IBuffer buffer) Parameters Type Name Description IStorageFile file The file that the buffer of data is written to. IBuffer buffer The buffer that contains the data to write. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be WriteBuffer(IStorageFile, IBuffer). WriteBytes(IStorageFile, Byte[]) Writes an array of bytes of data to the specified file. Declaration public static extern void WriteBytes(IStorageFile file, byte[] buffer) Parameters Type Name Description IStorageFile file The file that the byte is written to. Byte [] buffer The array of bytes to write. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be WriteBytesAsync(IStorageFile, Byte[]). WriteText(IStorageFile, String) Writes text to the specified file. Declaration public static extern void WriteText(IStorageFile file, string contents) Parameters Type Name Description IStorageFile file The file that the text is written to. String contents The text to write. Remarks The encoding will always be Utf8 which is the only supported encoding in nanoFramework. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be WriteTextAsync(IStorageFile, String)."
  },
  "api/Windows.Storage.html": {
    "href": "api/Windows.Storage.html",
    "title": "Namespace Windows.Storage | nanoFramework Documentation",
    "keywords": "Namespace Windows.Storage Classes FileIO Provides helper methods for reading and writing files that are represented by objects of type IStorageFile. KnownFolders Provides access to common locations that contain user content. This includes content from a user's local libraries (such as Documents, Pictures, Music, and Videos), HomeGroup, removable devices, and media server devices. RemovableDeviceEventArgs Contains argument values for Removable Devices events. StorageEventManager Event manager for Storage events. StorageFile Represents a file. Provides information about the file and its content, and ways to manipulate them. StorageFolder Manages folders and their contents and provides information about them. StorageProvider Contains info about the service that stores files and folders. Files and folders may be stored either by the local file system or by a remote service like Microsoft OneDrive. Interfaces IStorageFile Represents a file. Provides information about the file and its contents, and ways to manipulate them. IStorageFolder Manipulates folders and their contents, and provides information about them. IStorageItem Manipulates storage items (files and folders) and their contents, and provides information about them. IStorageProvider Enums CreationCollisionOption Specifies what to do if a file or folder with the specified name already exists in the current folder when you create a new file or folder. FileAttributes Describes the attributes of a file or folder. This enumeration has a System.FlagsAttribute attribute that allows a bitwise combination of its member values. KnownFolderId Provides values that identify storage folders. RemovableDeviceEventArgs.RemovableDeviceEvent Specifies the type of event occurred with the Removable Device specified. Delegates RemovableDeviceEventHandler Provides an event handler that is called when a Removable Device event occurs."
  },
  "api/Windows.Storage.IStorageFile.html": {
    "href": "api/Windows.Storage.IStorageFile.html",
    "title": "Interface IStorageFile | nanoFramework Documentation",
    "keywords": "Interface IStorageFile Represents a file. Provides information about the file and its contents, and ways to manipulate them. Inherited Members IStorageItem.Attributes IStorageItem.DateCreated IStorageItem.Name IStorageItem.Path IStorageItem.Rename(String) Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public interface IStorageFile : IStorageItem Properties | Improve this Doc View Source ContentType Gets the MIME type of the contents of the file. Declaration string ContentType { get; } Property Value Type Description String | Improve this Doc View Source FileType Gets the type (file name extension) of the file. Declaration string FileType { get; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.IStorageFolder.html": {
    "href": "api/Windows.Storage.IStorageFolder.html",
    "title": "Interface IStorageFolder | nanoFramework Documentation",
    "keywords": "Interface IStorageFolder Manipulates folders and their contents, and provides information about them. Inherited Members IStorageItem.Attributes IStorageItem.DateCreated IStorageItem.Name IStorageItem.Path IStorageItem.Rename(String) Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public interface IStorageFolder : IStorageItem Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.IStorageItem.html": {
    "href": "api/Windows.Storage.IStorageItem.html",
    "title": "Interface IStorageItem | nanoFramework Documentation",
    "keywords": "Interface IStorageItem Manipulates storage items (files and folders) and their contents, and provides information about them. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public interface IStorageItem Properties | Improve this Doc View Source Attributes Gets the attributes of a file. Declaration FileAttributes Attributes { get; } Property Value Type Description FileAttributes The file attributes. | Improve this Doc View Source DateCreated Gets the date and time that the current folder was created. Declaration DateTime DateCreated { get; } Property Value Type Description DateTime Remarks This is the nanoFrameowrk equivalent of UWP DateCreated of type DateTimeOffset. | Improve this Doc View Source Name Gets the name of the item including the file name extension if there is one. Declaration string Name { get; } Property Value Type Description String | Improve this Doc View Source Path Gets the full file-system path of the item, if the item has a path. Declaration string Path { get; } Property Value Type Description String Methods | Improve this Doc View Source Rename(String) Renames the current item. Declaration void Rename(string desiredName) Parameters Type Name Description String desiredName The desired, new name of the item. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.IStorageProvider.html": {
    "href": "api/Windows.Storage.IStorageProvider.html",
    "title": "Interface IStorageProvider | nanoFramework Documentation",
    "keywords": "Interface IStorageProvider Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public interface IStorageProvider Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.KnownFolderId.html": {
    "href": "api/Windows.Storage.KnownFolderId.html",
    "title": "Enum KnownFolderId | nanoFramework Documentation",
    "keywords": "Enum KnownFolderId Provides values that identify storage folders. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public enum KnownFolderId Fields Name Description InternalDevices Internal devices. RemovableDevices Removable devices folder. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Storage.KnownFolders.html": {
    "href": "api/Windows.Storage.KnownFolders.html",
    "title": "Class KnownFolders | nanoFramework Documentation",
    "keywords": "Class KnownFolders Provides access to common locations that contain user content. This includes content from a user's local libraries (such as Documents, Pictures, Music, and Videos), HomeGroup, removable devices, and media server devices. Inheritance Object KnownFolders Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public static class KnownFolders Properties | Improve this Doc View Source InternalDevices Gets the internal devices folder. Declaration public static StorageFolder InternalDevices { get; } Property Value Type Description StorageFolder | Improve this Doc View Source RemovableDevices Gets the removable devices folder. Declaration public static StorageFolder RemovableDevices { get; } Property Value Type Description StorageFolder"
  },
  "api/Windows.Storage.RemovableDeviceEventArgs.html": {
    "href": "api/Windows.Storage.RemovableDeviceEventArgs.html",
    "title": "Class RemovableDeviceEventArgs | nanoFramework Documentation",
    "keywords": "Class RemovableDeviceEventArgs Contains argument values for Removable Devices events. Inheritance Object EventArgs RemovableDeviceEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public class RemovableDeviceEventArgs : EventArgs Properties | Improve this Doc View Source Event The RemovableDeviceEventArgs.RemovableDeviceEvent occurred. Declaration public RemovableDeviceEventArgs.RemovableDeviceEvent Event { get; } Property Value Type Description RemovableDeviceEventArgs.RemovableDeviceEvent | Improve this Doc View Source Path The path of the Removable Device. Declaration public string Path { get; } Property Value Type Description String Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.RemovableDeviceEventArgs.RemovableDeviceEvent.html": {
    "href": "api/Windows.Storage.RemovableDeviceEventArgs.RemovableDeviceEvent.html",
    "title": "Enum RemovableDeviceEventArgs.RemovableDeviceEvent | nanoFramework Documentation",
    "keywords": "Enum RemovableDeviceEventArgs.RemovableDeviceEvent Specifies the type of event occurred with the Removable Device specified. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public enum RemovableDeviceEvent Remarks This enum is specific to nanoFramework. There is no equivalent in the UWP API. Fields Name Description Inserted A Removable Device has been inserted. Removed A Removable Device has been removed. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Storage.RemovableDeviceEventHandler.html": {
    "href": "api/Windows.Storage.RemovableDeviceEventHandler.html",
    "title": "Delegate RemovableDeviceEventHandler | nanoFramework Documentation",
    "keywords": "Delegate RemovableDeviceEventHandler Provides an event handler that is called when a Removable Device event occurs. Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public delegate void RemovableDeviceEventHandler(object sender, RemovableDeviceEventArgs e); Parameters Type Name Description Object sender Specifies the object that sent the Removable Device event. RemovableDeviceEventArgs e Contains the Removable Device event arguments. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Search.CommonFileQuery.html": {
    "href": "api/Windows.Storage.Search.CommonFileQuery.html",
    "title": "Enum CommonFileQuery | nanoFramework Documentation",
    "keywords": "Enum CommonFileQuery Specifies how to sort the files in the query results and determines whether the query is shallow or deep. Query results for deep queries include all files in all of the subfolders of the current folder, sorted according to the specified option. Namespace : Windows.Storage.Search Assembly : Windows.Storage.dll Syntax public enum CommonFileQuery Fields Name Description DefaultQuery A shallow list of files in the current folder, similar to the list that File Explorer provides. You can use this option for any storage location. OrderByDate A deep, flat list of files in a folder and its subfolders, sorted by System.ItemDate. You can use this option only for folders in a library or the HomeGroup folder. OrderByMusicProperties A deep, flat list of files in a folder and its subfolders, sorted by music properties. You can use this option only for folders in a library or the HomeGroup folder. OrderByName A deep, flat list of files in a folder and its subfolders, sorted by System.ItemNameDisplay. You can use this option for any storage location. OrderBySearchRank A deep, flat list of files in a folder and its subfolders, sorted by System.Search.Rank followed by System.DateModified. You can use this option for any storage location. OrderByTitle A deep, flat list of files in a folder and its subfolders, sorted by System.Title. You can use this option only for folders in a library or the HomeGroup folder. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Storage.Search.html": {
    "href": "api/Windows.Storage.Search.html",
    "title": "Namespace Windows.Storage.Search | nanoFramework Documentation",
    "keywords": "Namespace Windows.Storage.Search Enums CommonFileQuery Specifies how to sort the files in the query results and determines whether the query is shallow or deep. Query results for deep queries include all files in all of the subfolders of the current folder, sorted according to the specified option."
  },
  "api/Windows.Storage.StorageEventManager.html": {
    "href": "api/Windows.Storage.StorageEventManager.html",
    "title": "Class StorageEventManager | nanoFramework Documentation",
    "keywords": "Class StorageEventManager Event manager for Storage events. Inheritance Object StorageEventManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public static class StorageEventManager Events | Improve this Doc View Source RemovableDeviceInserted Event that occurs when a Removable Device is inserted. Declaration public static event RemovableDeviceEventHandler RemovableDeviceInserted Event Type Type Description RemovableDeviceEventHandler Remarks The StorageEventManager class raises RemovableDeviceEventArgs events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed. To have a StorageEventManager object call an event-handling method when a RemovableDeviceInserted event occurs, you must associate the method with a RemovableDeviceEventHandler delegate, and add this delegate to this event. | Improve this Doc View Source RemovableDeviceRemoved Event that occurs when a Removable Device is removed. Declaration public static event RemovableDeviceEventHandler RemovableDeviceRemoved Event Type Type Description RemovableDeviceEventHandler Remarks The StorageEventManager class raises RemovableDeviceEventArgs events when Removable Devices (typically SD Cards and USB mass storage device) are inserted and removed. To have a StorageEventManager object call an event-handling method when a RemovableDeviceRemoved event occurs, you must associate the method with a RemovableDeviceEventHandler delegate, and add this delegate to this event."
  },
  "api/Windows.Storage.StorageFile.html": {
    "href": "api/Windows.Storage.StorageFile.html",
    "title": "Class StorageFile | nanoFramework Documentation",
    "keywords": "Class StorageFile Represents a file. Provides information about the file and its content, and ways to manipulate them. Inheritance Object StorageFile Implements IStorageFile IStorageItem Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public sealed class StorageFile : IStorageFile, IStorageItem Properties | Improve this Doc View Source Attributes Gets the attributes of a file. Declaration public FileAttributes Attributes { get; } Property Value Type Description FileAttributes The file attributes. | Improve this Doc View Source ContentType Gets the MIME type of the contents of the file. Declaration public string ContentType { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source DateCreated Gets the date and time that the current folder was created. Declaration public DateTime DateCreated { get; } Property Value Type Description DateTime Remarks This is the nanoFrameowrk equivalent of UWP DateCreated of type DateTimeOffset. | Improve this Doc View Source DisplayName Gets the user-friendly name of the current folder. Declaration public string DisplayName { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source DisplayType Gets the user-friendly description of the type of the folder; for example, JPEG image. Declaration public string DisplayType { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source FileType Gets the type (file name extension) of the file. Declaration public string FileType { get; } Property Value Type Description String | Improve this Doc View Source FolderRelativeId Gets an identifier for the file. This ID is unique for the query result or StorageFolder that contains the file and can be used to distinguish between items that have the same name. Declaration public string FolderRelativeId { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source IsAvailable Indicates if the file is local, is cached locally, or can be downloaded. Declaration public bool IsAvailable { get; } Property Value Type Description Boolean True if the file is local, is cached locally, or can be downloaded. Otherwise, false. Remarks This property is always true in nanoFramework. | Improve this Doc View Source Name Gets the name of the file including the file name extension. Declaration public string Name { get; } Property Value Type Description String The name of the file including the file name extension. | Improve this Doc View Source Path Gets the full file-system path of the current file, if the file has a path. Declaration public string Path { get; } Property Value Type Description String Methods | Improve this Doc View Source Delete() Delete the current file. Declaration public void Delete() Remarks If the file doesn't exist this method will throw an exception. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be DeleteAsync(). | Improve this Doc View Source GetFileFromPath(String) Gets a StorageFile object to represent the file at the specified path. Declaration public static StorageFile GetFileFromPath(string path) Parameters Type Name Description String path The path of the file to get a StorageFile to represent. Returns Type Description StorageFile Returns the file as a StorageFile. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFileFromPathAsync(String). | Improve this Doc View Source Rename(String) Renames the current file. Declaration public void Rename(string desiredName) Parameters Type Name Description String desiredName The desired new name of the current file. Remarks If the name you specify is invalid or already exists, this method throws an exception This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be RenameAsync(String desiredName). Implements IStorageFile IStorageItem Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.StorageFolder.html": {
    "href": "api/Windows.Storage.StorageFolder.html",
    "title": "Class StorageFolder | nanoFramework Documentation",
    "keywords": "Class StorageFolder Manages folders and their contents and provides information about them. Inheritance Object StorageFolder Implements IStorageFolder IStorageItem Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public sealed class StorageFolder : IStorageFolder, IStorageItem Properties | Improve this Doc View Source Attributes Gets the attributes of the current folder. Declaration public FileAttributes Attributes { get; } Property Value Type Description FileAttributes The attributes of the current folder. | Improve this Doc View Source DateCreated Gets the date and time that the current folder was created. Declaration public DateTime DateCreated { get; } Property Value Type Description DateTime Remarks This is the nanoFrameowrk equivalent of UWP DateCreated of type DateTimeOffset. | Improve this Doc View Source DisplayName Gets the user-friendly name of the current folder. Declaration public string DisplayName { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source DisplayType Gets the user-friendly description of the type of the folder. Declaration public string DisplayType { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source FolderRelativeId Gets an identifier for the current folder. This ID is unique for the query result or StorageFolder that contains the current folder or file group, and can be used to distinguish between items that have the same name. Declaration public string FolderRelativeId { get; } Property Value Type Description String Remarks This property is not available in nanoFramework. | Improve this Doc View Source Name Gets the name of the current folder. Declaration public string Name { get; } Property Value Type Description String The name of the current folder. | Improve this Doc View Source Path Gets the full path of the current folder in the file system, if the path is available. Declaration public string Path { get; } Property Value Type Description String Methods | Improve this Doc View Source CreateFile(String) Creates a new file with the specified name in the current folder. Declaration public StorageFile CreateFile(string desiredName) Parameters Type Name Description String desiredName The name of the new file to create in the current folder. Returns Type Description StorageFile When this method completes, it returns a StorageFile that represents the new file. Remarks This method uses the FailIfExists value from the CreationCollisionOption enumeration by default. That is, this method raises an exception if a subfolder with the same name already exists in the current folder. If you want to handle a folder name collision in a different way, call the CreateFile(String, CreationCollisionOption) method. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be CreateFileAsync(String). | Improve this Doc View Source CreateFile(String, CreationCollisionOption) Creates a new file with the specified name in the current folder. Declaration public StorageFile CreateFile(string desiredName, CreationCollisionOption options) Parameters Type Name Description String desiredName The name of the new file to create in the current folder. CreationCollisionOption options One of the enumeration values that determines how to handle the collision if a file with the specified desiredName already exists in the current folder. Returns Type Description StorageFile When this method completes, it returns a StorageFile that represents the new file. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be CreateFileAsync(String, CreationCollisionOption). | Improve this Doc View Source CreateFolder(String) Creates a new subfolder with the specified name in the current folder. Declaration public StorageFolder CreateFolder(string desiredName) Parameters Type Name Description String desiredName The name of the new subfolder to create in the current folder. Returns Type Description StorageFolder When this method completes, it returns a StorageFolder that represents the new subfolder. Remarks This method uses the FailIfExists value from the CreationCollisionOption enumeration by default. That is, this method raises an exception if a subfolder with the same name already exists in the current folder. If you want to handle a folder name collision in a different way, call the CreateFolder(String, CreationCollisionOption) method. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be CreateFolderAsync(String). | Improve this Doc View Source CreateFolder(String, CreationCollisionOption) Creates a new subfolder with the specified name in the current folder. This method also specifies what to do if a subfolder with the same name already exists in the current folder. Declaration public StorageFolder CreateFolder(string desiredName, CreationCollisionOption options) Parameters Type Name Description String desiredName The name of the new subfolder to create in the current folder. CreationCollisionOption options One of the enumeration values that determines how to handle the collision if a subfolder with the specified desiredName already exists in the current folder. Returns Type Description StorageFolder When this method completes, it returns a StorageFolder that represents the new subfolder. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be CreateFolderAsync(String, CreationCollisionOption). | Improve this Doc View Source Delete() Delete the current folder. Declaration public void Delete() Remarks If the folder doesn't exist then this method will throw an exception. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be DeleteAsync(). | Improve this Doc View Source GetFiles() Gets the files in the current folder. Declaration public StorageFile[] GetFiles() Returns Type Description StorageFile [] When this method completes successfully, it returns a list of the files in the current folder. The list is of type StorageFile . Each file in the list is represented by a StorageFile object. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFilesAsync(). | Improve this Doc View Source GetFiles(CommonFileQuery) Gets the files in the current folder. Also gets the files from the subfolders of the current folder when the value of the query argument is something other than DefaultQuery . Files are sorted based on the specified value from the CommonFileQuery enumeration. Declaration public StorageFile[] GetFiles(CommonFileQuery query) Parameters Type Name Description CommonFileQuery query One of the enumeration values that specifies how to sort the files and determines whether the query is shallow or deep. Returns Type Description StorageFile [] When this method completes successfully, it returns a flat list of files, sorted as specified by query. The list is of type StorageFile . Each file in the list is represented by a StorageFile object. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFilesAsync(CommonFileQuery). | Improve this Doc View Source GetFiles(CommonFileQuery, UInt32, UInt32) Gets an index-based range of files from the list of all files in the current folder. Also gets the files from the subfolders of the current folder when the value of the query argument is something other than DefaultQuery . Files are sorted based on the specified value from the CommonFileQuery enumeration. Declaration public StorageFile[] GetFiles(CommonFileQuery query, uint startIndex, uint maxItemsToRetrieve) Parameters Type Name Description CommonFileQuery query One of the enumeration values that specifies how to sort the files and determines whether the query is shallow or deep. UInt32 startIndex The zero-based index of the first file in the range to retrieve. UInt32 maxItemsToRetrieve The maximum number of files to retrieve. Returns Type Description StorageFile [] When this method completes successfully, it returns a flat list of files, sorted as specified by query. The list is of type StorageFile . Each file in the list is represented by a StorageFile object. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFilesAsync(CommonFileQuery, UInt32, UInt32). | Improve this Doc View Source GetFolder(String) Gets the subfolder with the specified name from the current folder. Declaration public StorageFolder GetFolder(string name) Parameters Type Name Description String name The name (or path relative to the current folder) of the subfolder to get. Returns Type Description StorageFolder When this method completes successfully, it returns a StorageFolder that represents the specified subfolder. Remarks If the folder doesn't exist it will throw an exception. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFolderAsync(String name). | Improve this Doc View Source GetFolders() Gets the subfolders in the current folder. Declaration public StorageFolder[] GetFolders() Returns Type Description StorageFolder [] When this method completes successfully, it returns a list of the subfolders in the current folder. The list is of type StorageFolder. Each folder in the list is represented by a StorageFolder object. Remarks This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be GetFoldersAsync(). | Improve this Doc View Source IsCommonFileQuerySupported(CommonFileQuery) Indicates whether the current folder supports the specified CommonFileQuery . Declaration public bool IsCommonFileQuerySupported(CommonFileQuery query) Parameters Type Name Description CommonFileQuery query The value to test. Returns Type Description Boolean True if the folder supports the specified CommonFileQuery otherwise, false. | Improve this Doc View Source Rename(String) Renames the current folder. Declaration public void Rename(string desiredName) Parameters Type Name Description String desiredName The desired, new name for the current folder. Remarks If the name you specify is invalid or a folder with the same name already exists, this method throws an exception. If the target device doesn't support folders then this will also throw an exception. This method is exclusive of nanoFramework and it's not available in the UWP API. The equivalent method would be RenameAsync(String desiredName). Implements IStorageFolder IStorageItem Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.StorageProvider.html": {
    "href": "api/Windows.Storage.StorageProvider.html",
    "title": "Class StorageProvider | nanoFramework Documentation",
    "keywords": "Class StorageProvider Contains info about the service that stores files and folders. Files and folders may be stored either by the local file system or by a remote service like Microsoft OneDrive. Inheritance Object StorageProvider Implements IStorageProvider Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage Assembly : Windows.Storage.dll Syntax public sealed class StorageProvider : IStorageProvider Properties | Improve this Doc View Source DisplayName Gets a user-friendly name for the current provider of files and folders. Declaration public string DisplayName { get; } Property Value Type Description String The user-friendly name for the provider. This name is localized to the current system locale. | Improve this Doc View Source Id Gets an identifier for the current provider of files and folders. Declaration public string Id { get; } Property Value Type Description String The identifier for the provider. Remarks The ID can be Local, Network, or OneDrive depending on your provider. Implements IStorageProvider Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Streams.ByteOrder.html": {
    "href": "api/Windows.Storage.Streams.ByteOrder.html",
    "title": "Enum ByteOrder | nanoFramework Documentation",
    "keywords": "Enum ByteOrder Specifies the byte order of a stream. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public enum ByteOrder Remarks nanoFramework API only supports LittleEndian order. Fields Name Description LittleEndian The least significant byte (lowest address) is stored first. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Storage.Streams.DataReader.html": {
    "href": "api/Windows.Storage.Streams.DataReader.html",
    "title": "Class DataReader | nanoFramework Documentation",
    "keywords": "Class DataReader Inheritance Object MarshalByRefObject DataReader Implements IDisposable IDataReader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public sealed class DataReader : MarshalByRefObject, IDisposable, IDataReader Constructors | Improve this Doc View Source DataReader(IInputStream) Creates and initializes a new instance of the data reader. Declaration public DataReader(IInputStream inputStream) Parameters Type Name Description IInputStream inputStream The input stream. Properties | Improve this Doc View Source ByteOrder Gets or sets the byte order of the data in the input stream. Declaration public ByteOrder ByteOrder { get; } Property Value Type Description ByteOrder One of the enumeration values. Remarks nanoFramework doesn't this feature. ByteOrder is always LittleEndian . | Improve this Doc View Source InputStreamOptions Gets or sets the read options for the input stream. Declaration public InputStreamOptions InputStreamOptions { get; set; } Property Value Type Description InputStreamOptions One of the enumeration values. | Improve this Doc View Source UnconsumedBufferLength Gets the size of the buffer that has not been read. Declaration public uint UnconsumedBufferLength { get; } Property Value Type Description UInt32 The size of the buffer that has not been read, in bytes. | Improve this Doc View Source UnicodeEncoding Gets or sets the Unicode character encoding for the input stream. Declaration public UnicodeEncoding UnicodeEncoding { get; } Property Value Type Description UnicodeEncoding One of the enumeration values. Remarks nanoFramework doesn't this feature. UnicodeEncoding is always Utf8 . Methods | Improve this Doc View Source DetachStream() Detaches a stream that was previously attached to the reader. Declaration public IInputStream DetachStream() Returns Type Description IInputStream The detached stream. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source FromBuffer(IBuffer) Creates a new instance of the data reader with data from the specified buffer. Declaration public static DataReader FromBuffer(IBuffer buffer) Parameters Type Name Description IBuffer buffer The buffer. Returns Type Description DataReader The data reader. | Improve this Doc View Source Load(UInt32) Loads data from the input stream. Declaration public uint Load(uint count) Parameters Type Name Description UInt32 count The count of bytes to load into the intermediate buffer. Returns Type Description UInt32 The operation. | Improve this Doc View Source ReadBoolean() Reads a Boolean value from the input stream. Declaration public bool ReadBoolean() Returns Type Description Boolean The value. | Improve this Doc View Source ReadBuffer(UInt32) Reads a buffer from the input stream. Declaration public IBuffer ReadBuffer(uint length) Parameters Type Name Description UInt32 length The length of the buffer, in bytes. Returns Type Description IBuffer The buffer. | Improve this Doc View Source ReadByte() Reads a byte value from the input stream. Declaration public byte ReadByte() Returns Type Description Byte The value. | Improve this Doc View Source ReadBytes(Byte[]) Reads an array of byte values from the input stream. Declaration public void ReadBytes(byte[] value) Parameters Type Name Description Byte [] value The array of values. | Improve this Doc View Source ReadDateTime() Reads a date and time value from the input stream. Declaration public DateTime ReadDateTime() Returns Type Description DateTime The value. | Improve this Doc View Source ReadDouble() Reads a floating-point value from the input stream. Declaration public double ReadDouble() Returns Type Description Double The value. | Improve this Doc View Source ReadGuid() Reads a GUID value from the input stream. Declaration public Guid ReadGuid() Returns Type Description Guid The value. | Improve this Doc View Source ReadInt16() Reads a 16-bit integer value from the input stream. Declaration public short ReadInt16() Returns Type Description Int16 The value. | Improve this Doc View Source ReadInt32() Reads a 32-bit integer value from the input stream. Declaration public int ReadInt32() Returns Type Description Int32 The value. | Improve this Doc View Source ReadInt64() Reads a 64-bit integer value from the input stream. Declaration public long ReadInt64() Returns Type Description Int64 The value. | Improve this Doc View Source ReadSingle() Reads a floating-point value from the input stream. Declaration public float ReadSingle() Returns Type Description Single The value. | Improve this Doc View Source ReadString(UInt32) Reads a string value from the input stream. Declaration public string ReadString(uint codeUnitCount) Parameters Type Name Description UInt32 codeUnitCount The length of the string. Returns Type Description String The value. | Improve this Doc View Source ReadTimeSpan() Reads a time interval from the input stream. Declaration public TimeSpan ReadTimeSpan() Returns Type Description TimeSpan The value. | Improve this Doc View Source ReadUInt16() Reads a 16-bit unsigned integer from the input stream. Declaration public ushort ReadUInt16() Returns Type Description UInt16 The value. | Improve this Doc View Source ReadUInt32() Reads a 32-bit unsigned integer from the input stream. Declaration public uint ReadUInt32() Returns Type Description UInt32 The value. | Improve this Doc View Source ReadUInt64() Reads a 64-bit unsigned integer from the input stream. Declaration public ulong ReadUInt64() Returns Type Description UInt64 The value. Implements IDisposable IDataReader Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Streams.DataWriter.html": {
    "href": "api/Windows.Storage.Streams.DataWriter.html",
    "title": "Class DataWriter | nanoFramework Documentation",
    "keywords": "Class DataWriter Writes data to an output stream. Inheritance Object MarshalByRefObject DataWriter Implements IDisposable IDataWriter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public sealed class DataWriter : MarshalByRefObject, IDisposable, IDataWriter Constructors | Improve this Doc View Source DataWriter() Creates and initializes a new instance of the data writer. Declaration public DataWriter() | Improve this Doc View Source DataWriter(IOutputStream) Creates and initializes a new instance of the data writer to an output stream. Declaration public DataWriter(IOutputStream outputStream) Parameters Type Name Description IOutputStream outputStream The new output stream instance. Properties | Improve this Doc View Source ByteOrder Gets or sets the byte order of the data in the output stream. Declaration public ByteOrder ByteOrder { get; } Property Value Type Description ByteOrder One of the enumeration values. Remarks nanoFramework doesn't this feature. ByteOrder is always LittleEndian . | Improve this Doc View Source UnicodeEncoding Gets or sets the Unicode character encoding for the output stream. Declaration public UnicodeEncoding UnicodeEncoding { get; } Property Value Type Description UnicodeEncoding One of the enumeration values. Remarks nanoFramework doesn't this feature. UnicodeEncoding is always Utf8 . | Improve this Doc View Source UnstoredBufferLength Gets the size of the buffer that has not been used. Declaration public uint UnstoredBufferLength { get; } Property Value Type Description UInt32 The available buffer length, in bytes. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Flush() Flushes data. Declaration public bool Flush() Returns Type Description Boolean The stream flush operation. Remarks The Flush method ensures that the data has reached the target storage medium that the stream represents. For example, to improve application responsiveness and throughput, a file stream might respond to a write operation by copying the buffer into another temporary storage medium and returning immediately, while the target device begins writing the data concurrently. The Flush method doesn't complete until all data specified in previous write calls has reached the target storage medium. If the data can't be written, or an error occurred during a write operation, the method returns false. The Flush method may produce latencies and does not always guarantee durable and coherent storage of data.It's generally recommended to avoid this method if possible. This method is specific to nanoFramework. The equivalent method in the UWP API is: FlushAsync. | Improve this Doc View Source MeasureString(String) Gets the size of a string. Declaration public uint MeasureString(string value) Parameters Type Name Description String value The string. Returns Type Description UInt32 The size of the string, in bytes. | Improve this Doc View Source Store() Commits data in the buffer to a backing store. Declaration public uint Store() Returns Type Description UInt32 The store data operation. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: StoreAsync. | Improve this Doc View Source WriteBoolean(Boolean) Writes a Boolean value to the output stream. Declaration public void WriteBoolean(bool value) Parameters Type Name Description Boolean value The value to write. | Improve this Doc View Source WriteBuffer(IBuffer) Writes a number of bytes from a buffer to the output stream. Declaration public void WriteBuffer(IBuffer buffer) Parameters Type Name Description IBuffer buffer The value to write. | Improve this Doc View Source WriteBuffer(IBuffer, UInt32, UInt32) Writes a range of bytes from a buffer to the output stream. Declaration public void WriteBuffer(IBuffer buffer, uint start, uint count) Parameters Type Name Description IBuffer buffer The buffer. UInt32 start The starting byte to be written. UInt32 count The number of bytes to write. | Improve this Doc View Source WriteByte(Byte) Writes a byte value to the output stream. Declaration public void WriteByte(byte value) Parameters Type Name Description Byte value The value to write. | Improve this Doc View Source WriteBytes(Byte[]) Writes an array of byte values to the output stream. Declaration public void WriteBytes(byte[] value) Parameters Type Name Description Byte [] value The value to write. | Improve this Doc View Source WriteDateTime(DateTime) Writes a date and time value to the output stream. Declaration public void WriteDateTime(DateTime value) Parameters Type Name Description DateTime value The value to write. | Improve this Doc View Source WriteDouble(Double) Writes a floating-point value to the output stream. Declaration public void WriteDouble(double value) Parameters Type Name Description Double value The value to write. | Improve this Doc View Source WriteGuid(Guid) Writes a GUID value to the output stream. Declaration public void WriteGuid(Guid value) Parameters Type Name Description Guid value The value to write. | Improve this Doc View Source WriteInt16(Int16) Writes a 16-bit integer value to the output stream. Declaration public void WriteInt16(short value) Parameters Type Name Description Int16 value The value to write. | Improve this Doc View Source WriteInt32(Int32) Writes a 32-bit integer value to the output stream. Declaration public void WriteInt32(int value) Parameters Type Name Description Int32 value The value to write. | Improve this Doc View Source WriteInt64(Int64) Writes a 64-bit integer value to the output stream. Declaration public void WriteInt64(long value) Parameters Type Name Description Int64 value The value to write. | Improve this Doc View Source WriteSingle(Single) Write a floating-point value to the output stream. Declaration public void WriteSingle(float value) Parameters Type Name Description Single value The value to write. | Improve this Doc View Source WriteString(String) Writes a string value to the output stream. Declaration public uint WriteString(string value) Parameters Type Name Description String value The value to write. Returns Type Description UInt32 The length of the string. | Improve this Doc View Source WriteTimeSpan(TimeSpan) Writes a time interval value to the output stream. Declaration public void WriteTimeSpan(TimeSpan value) Parameters Type Name Description TimeSpan value The value to write. | Improve this Doc View Source WriteUInt16(UInt16) Writes a 16-bit unsigned integer value to the output stream. Declaration public void WriteUInt16(ushort value) Parameters Type Name Description UInt16 value The value to write. | Improve this Doc View Source WriteUInt32(UInt32) Writes a 32-bit unsigned integer value to the output stream. Declaration public void WriteUInt32(uint value) Parameters Type Name Description UInt32 value The value to write. | Improve this Doc View Source WriteUInt64(UInt64) Writes a 64-bit unsigned integer value to the output stream. Declaration public void WriteUInt64(ulong value) Parameters Type Name Description UInt64 value The value to write. Implements IDisposable IDataWriter Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Streams.html": {
    "href": "api/Windows.Storage.Streams.html",
    "title": "Namespace Windows.Storage.Streams | nanoFramework Documentation",
    "keywords": "Namespace Windows.Storage.Streams Classes DataReader DataWriter Writes data to an output stream. InMemoryRandomAccessStream Provides random access of data in input and output streams that are stored in memory instead of on disk. Interfaces IBuffer Represents a referenced array of bytes used by byte stream read and write interfaces. Buffer is the class implementation of this interface. IDataReader Provides read access to an input stream. IDataWriter Provides write access to an output stream. IInputStream Represents a sequential stream of bytes to be read. IOutputStream Represents a sequential stream of bytes to be written. IRandomAccessStream Supports random access of data in input and output streams. Enums ByteOrder Specifies the byte order of a stream. InputStreamOptions Specifies the read options for an input stream. UnicodeEncoding Specifies the type of character encoding for a stream."
  },
  "api/Windows.Storage.Streams.IBuffer.html": {
    "href": "api/Windows.Storage.Streams.IBuffer.html",
    "title": "Interface IBuffer | nanoFramework Documentation",
    "keywords": "Interface IBuffer Represents a referenced array of bytes used by byte stream read and write interfaces. Buffer is the class implementation of this interface. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IBuffer Properties | Improve this Doc View Source Capacity Gets the maximum number of bytes that the buffer can hold. Declaration uint Capacity { get; } Property Value Type Description UInt32 The maximum number of bytes that the buffer can hold. | Improve this Doc View Source Length Gets the number of bytes currently in use in the buffer. Declaration uint Length { get; set; } Property Value Type Description UInt32 The number of bytes currently in use in the buffer which is less than or equal to the capacity of the buffer. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Streams.IDataReader.html": {
    "href": "api/Windows.Storage.Streams.IDataReader.html",
    "title": "Interface IDataReader | nanoFramework Documentation",
    "keywords": "Interface IDataReader Provides read access to an input stream. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IDataReader Properties | Improve this Doc View Source ByteOrder Gets or sets the byte order of the data in the input stream. Declaration ByteOrder ByteOrder { get; } Property Value Type Description ByteOrder One of the enumeration values. Remarks nanoFramework doesn't this feature. ByteOrder is always LittleEndian . | Improve this Doc View Source InputStreamOptions Gets or sets the read options for the input stream. Declaration InputStreamOptions InputStreamOptions { get; set; } Property Value Type Description InputStreamOptions One of the enumeration values. | Improve this Doc View Source UnconsumedBufferLength Gets the size of the buffer that has not been read. Declaration uint UnconsumedBufferLength { get; } Property Value Type Description UInt32 The size of the buffer that has not been read, in bytes. | Improve this Doc View Source UnicodeEncoding Gets or sets the Unicode character encoding for the input stream. Declaration UnicodeEncoding UnicodeEncoding { get; } Property Value Type Description UnicodeEncoding One of the enumeration values. Remarks nanoFramework doesn't this feature. UnicodeEncoding is always Utf8 . Methods | Improve this Doc View Source DetachStream() Detaches a stream that was previously attached to the reader. Declaration IInputStream DetachStream() Returns Type Description IInputStream The detached stream. | Improve this Doc View Source Load(UInt32) Loads data from the input stream. Declaration uint Load(uint count) Parameters Type Name Description UInt32 count The count of bytes to load into the intermediate buffer. Returns Type Description UInt32 The asynchronous operation. | Improve this Doc View Source ReadBoolean() Reads a Boolean value from the input stream. Declaration bool ReadBoolean() Returns Type Description Boolean The value. | Improve this Doc View Source ReadBuffer(UInt32) Reads a buffer from the input stream. Declaration IBuffer ReadBuffer(uint length) Parameters Type Name Description UInt32 length The length of the buffer, in bytes. Returns Type Description IBuffer The buffer. | Improve this Doc View Source ReadByte() Reads a byte value from the input stream. Declaration byte ReadByte() Returns Type Description Byte The value. | Improve this Doc View Source ReadBytes(Byte[]) Reads an array of byte values from the input stream. Declaration void ReadBytes(byte[] value) Parameters Type Name Description Byte [] value The array of values. | Improve this Doc View Source ReadDateTime() Reads a date and time value from the input stream. Declaration DateTime ReadDateTime() Returns Type Description DateTime The value. | Improve this Doc View Source ReadDouble() Reads a floating-point value from the input stream. Declaration double ReadDouble() Returns Type Description Double The value. | Improve this Doc View Source ReadGuid() Reads a GUID value from the input stream. Declaration Guid ReadGuid() Returns Type Description Guid The value. | Improve this Doc View Source ReadInt16() Reads a 16-bit integer value from the input stream. Declaration short ReadInt16() Returns Type Description Int16 The value. | Improve this Doc View Source ReadInt32() Reads a 32-bit integer value from the input stream. Declaration int ReadInt32() Returns Type Description Int32 The value. | Improve this Doc View Source ReadInt64() Reads a 64-bit integer value from the input stream. Declaration long ReadInt64() Returns Type Description Int64 The value. | Improve this Doc View Source ReadSingle() Reads a floating-point value from the input stream. Declaration float ReadSingle() Returns Type Description Single The value. | Improve this Doc View Source ReadString(UInt32) Reads a string value from the input stream. Declaration string ReadString(uint codeUnitCount) Parameters Type Name Description UInt32 codeUnitCount The length of the string. Returns Type Description String The value. | Improve this Doc View Source ReadTimeSpan() Reads a time interval from the input stream. Declaration TimeSpan ReadTimeSpan() Returns Type Description TimeSpan The value. | Improve this Doc View Source ReadUInt16() Reads a 16-bit unsigned integer from the input stream. Declaration ushort ReadUInt16() Returns Type Description UInt16 The value. | Improve this Doc View Source ReadUInt32() Reads a 32-bit unsigned integer from the input stream. Declaration uint ReadUInt32() Returns Type Description UInt32 The value. | Improve this Doc View Source ReadUInt64() Reads a 64-bit unsigned integer from the input stream. Declaration ulong ReadUInt64() Returns Type Description UInt64 The value. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Streams.IDataWriter.html": {
    "href": "api/Windows.Storage.Streams.IDataWriter.html",
    "title": "Interface IDataWriter | nanoFramework Documentation",
    "keywords": "Interface IDataWriter Provides write access to an output stream. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IDataWriter Properties | Improve this Doc View Source ByteOrder Gets or sets the byte order of the data in the output stream. Declaration ByteOrder ByteOrder { get; } Property Value Type Description ByteOrder One of the enumeration values. Remarks nanoFramework doesn't this feature. ByteOrder is always LittleEndian . | Improve this Doc View Source UnicodeEncoding Gets or sets the Unicode character encoding for the output stream. Declaration UnicodeEncoding UnicodeEncoding { get; } Property Value Type Description UnicodeEncoding One of the enumeration values. Remarks nanoFramework doesn't this feature. UnicodeEncoding is always Utf8 . | Improve this Doc View Source UnstoredBufferLength Gets the size of the buffer that has not been used. Declaration uint UnstoredBufferLength { get; } Property Value Type Description UInt32 The available buffer length, in bytes. Methods | Improve this Doc View Source Flush() Flushes data. Declaration bool Flush() Returns Type Description Boolean The stream flush operation. Remarks The Flush method ensures that the data has reached the target storage medium that the stream represents. For example, to improve application responsiveness and throughput, a file stream might respond to a write operation by copying the buffer into another temporary storage medium and returning immediately, while the target device begins writing the data concurrently. The Flush method doesn't complete until all data specified in previous write calls has reached the target storage medium. If the data can't be written, or an error occurred during a write operation, the method returns false. The Flush method may produce latencies and does not always guarantee durable and coherent storage of data.It's generally recommended to avoid this method if possible. | Improve this Doc View Source MeasureString(String) Gets the size of a string. Declaration uint MeasureString(string value) Parameters Type Name Description String value The string. Returns Type Description UInt32 The size of the string, in bytes. | Improve this Doc View Source Store() Commits data in the buffer to a backing store. Declaration uint Store() Returns Type Description UInt32 The store data operation. | Improve this Doc View Source WriteBoolean(Boolean) Writes a Boolean value to the output stream. Declaration void WriteBoolean(bool value) Parameters Type Name Description Boolean value The value to write. | Improve this Doc View Source WriteBuffer(IBuffer) Writes a number of bytes from a buffer to the output stream. Declaration void WriteBuffer(IBuffer buffer) Parameters Type Name Description IBuffer buffer The value to write. | Improve this Doc View Source WriteBuffer(IBuffer, UInt32, UInt32) Writes a range of bytes from a buffer to the output stream. Declaration void WriteBuffer(IBuffer buffer, uint start, uint count) Parameters Type Name Description IBuffer buffer The buffer. UInt32 start The starting byte to be written. UInt32 count The number of bytes to write. | Improve this Doc View Source WriteByte(Byte) Writes a byte value to the output stream. Declaration void WriteByte(byte value) Parameters Type Name Description Byte value The value to write. | Improve this Doc View Source WriteBytes(Byte[]) Writes an array of byte values to the output stream. Declaration void WriteBytes(byte[] value) Parameters Type Name Description Byte [] value The value to write. | Improve this Doc View Source WriteDateTime(DateTime) Writes a date and time value to the output stream. Declaration void WriteDateTime(DateTime value) Parameters Type Name Description DateTime value The value to write. | Improve this Doc View Source WriteDouble(Double) Writes a floating-point value to the output stream. Declaration void WriteDouble(double value) Parameters Type Name Description Double value The value to write. | Improve this Doc View Source WriteGuid(Guid) Writes a GUID value to the output stream. Declaration void WriteGuid(Guid value) Parameters Type Name Description Guid value The value to write. | Improve this Doc View Source WriteInt16(Int16) Writes a 16-bit integer value to the output stream. Declaration void WriteInt16(short value) Parameters Type Name Description Int16 value The value to write. | Improve this Doc View Source WriteInt32(Int32) Writes a 32-bit integer value to the output stream. Declaration void WriteInt32(int value) Parameters Type Name Description Int32 value The value to write. | Improve this Doc View Source WriteInt64(Int64) Writes a 64-bit integer value to the output stream. Declaration void WriteInt64(long value) Parameters Type Name Description Int64 value The value to write. | Improve this Doc View Source WriteSingle(Single) Write a floating-point value to the output stream. Declaration void WriteSingle(float value) Parameters Type Name Description Single value The value to write. | Improve this Doc View Source WriteString(String) Writes a string value to the output stream. Declaration uint WriteString(string value) Parameters Type Name Description String value The value to write. Returns Type Description UInt32 The length of the string. | Improve this Doc View Source WriteTimeSpan(TimeSpan) Writes a time interval value to the output stream. Declaration void WriteTimeSpan(TimeSpan value) Parameters Type Name Description TimeSpan value The value to write. | Improve this Doc View Source WriteUInt16(UInt16) Writes a 16-bit unsigned integer value to the output stream. Declaration void WriteUInt16(ushort value) Parameters Type Name Description UInt16 value The value to write. | Improve this Doc View Source WriteUInt32(UInt32) Writes a 32-bit unsigned integer value to the output stream. Declaration void WriteUInt32(uint value) Parameters Type Name Description UInt32 value The value to write. | Improve this Doc View Source WriteUInt64(UInt64) Writes a 64-bit unsigned integer value to the output stream. Declaration void WriteUInt64(ulong value) Parameters Type Name Description UInt64 value The value to write. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Streams.IInputStream.html": {
    "href": "api/Windows.Storage.Streams.IInputStream.html",
    "title": "Interface IInputStream | nanoFramework Documentation",
    "keywords": "Interface IInputStream Represents a sequential stream of bytes to be read. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IInputStream Methods | Improve this Doc View Source Read(IBuffer, UInt32, InputStreamOptions) Reads data from the stream. Declaration uint Read(IBuffer buffer, uint count, InputStreamOptions options) Parameters Type Name Description IBuffer buffer A buffer that is used to return the array of bytes that are read. The return value contains the buffer that holds the results. UInt32 count The number of bytes to read that is less than or equal to the Capacity value. InputStreamOptions options Specifies the type of the asynchronous read operation. Returns Type Description UInt32 The number of bytes that were actually read. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: ReadAsync(IBuffer buffer, UInt32 count, InputStreamOptions options). Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Streams.InMemoryRandomAccessStream.html": {
    "href": "api/Windows.Storage.Streams.InMemoryRandomAccessStream.html",
    "title": "Class InMemoryRandomAccessStream | nanoFramework Documentation",
    "keywords": "Class InMemoryRandomAccessStream Provides random access of data in input and output streams that are stored in memory instead of on disk. Inheritance Object MarshalByRefObject InMemoryRandomAccessStream Implements IRandomAccessStream IDisposable IInputStream IOutputStream Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public sealed class InMemoryRandomAccessStream : MarshalByRefObject, IRandomAccessStream, IDisposable, IInputStream, IOutputStream Constructors | Improve this Doc View Source InMemoryRandomAccessStream() Creates a new instance of the InMemoryRandomAccessStream class. Declaration public InMemoryRandomAccessStream() Properties | Improve this Doc View Source CanRead Gets a value that indicates whether the stream can be read from. Declaration public bool CanRead { get; } Property Value Type Description Boolean True if the stream can be read from. Otherwise, false. | Improve this Doc View Source CanWrite Gets a value that indicates whether the stream can be written to. Declaration public bool CanWrite { get; } Property Value Type Description Boolean True if the stream can be written to. Otherwise, false. | Improve this Doc View Source Length Gets the number of bytes currently in use in the buffer. Declaration public ulong Length { get; } Property Value Type Description UInt64 he number of bytes currently in use in the buffer, which is less than or equal to the capacity of the buffer. | Improve this Doc View Source Position Gets the byte offset of the stream. Declaration public ulong Position { get; } Property Value Type Description UInt64 The number of bytes from the start of the stream. Remarks The initial offset of a IRandomAccessStream is 0. This offset is affected by both IInputStream and IOutputStream operations. | Improve this Doc View Source Size Gets or sets the size of the random access stream. Declaration public ulong Size { get; set; } Property Value Type Description UInt64 The size of the stream. | Improve this Doc View Source UnstoredBufferLength Gets the size of the buffer that has not been used. Declaration public uint UnstoredBufferLength { get; set; } Property Value Type Description UInt32 The available buffer length, in bytes. Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Flush() Flushes data in a sequential stream. Declaration public bool Flush() Returns Type Description Boolean The stream flush operation. Remarks The Flush method may produce latencies and does not always guarantee durable and coherent storage of data. It's generally recommended to avoid this method if possible. This method is specific to nanoFramework. The equivalent method in the UWP API is: FlushAsync. | Improve this Doc View Source Read(IBuffer, UInt32, InputStreamOptions) Reads data from the stream. Declaration public uint Read(IBuffer buffer, uint count, InputStreamOptions options) Parameters Type Name Description IBuffer buffer A buffer that is used to return the array of bytes that are read. The return value contains the buffer that holds the results. UInt32 count The number of bytes to read that is less than or equal to the Capacity value. InputStreamOptions options Specifies the type of the asynchronous read operation. Returns Type Description UInt32 The number of bytes that were actually read. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: ReadAsync(IBuffer buffer, UInt32 count, InputStreamOptions options). | Improve this Doc View Source Seek(UInt64) Sets the position of the stream to the specified value. Declaration public void Seek(ulong position) Parameters Type Name Description UInt64 position The new position of the stream. Remarks Warning! This method does not check the position to make sure the value is valid for the stream. If the position is invalid for the stream, the ReadAsync and WriteAsync methods will return an error if you call them. | Improve this Doc View Source Store() Declaration public uint Store() Returns Type Description UInt32 | Improve this Doc View Source Write(Byte[]) Writes data in a sequential stream. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer A buffer that contains the data to be written. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: WriteAsync. Implements IRandomAccessStream IDisposable IInputStream IOutputStream Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Streams.InputStreamOptions.html": {
    "href": "api/Windows.Storage.Streams.InputStreamOptions.html",
    "title": "Enum InputStreamOptions | nanoFramework Documentation",
    "keywords": "Enum InputStreamOptions Specifies the read options for an input stream. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public enum InputStreamOptions Fields Name Description None No options are specified. Partial The asynchronous read operation completes when one or more bytes is available. ReadAhead The asynchronous read operation may optionally read ahead and prefetch additional bytes. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "api/Windows.Storage.Streams.IOutputStream.html": {
    "href": "api/Windows.Storage.Streams.IOutputStream.html",
    "title": "Interface IOutputStream | nanoFramework Documentation",
    "keywords": "Interface IOutputStream Represents a sequential stream of bytes to be written. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IOutputStream Properties | Improve this Doc View Source UnstoredBufferLength Gets the size of the buffer that has not been used. Declaration uint UnstoredBufferLength { get; set; } Property Value Type Description UInt32 The available buffer length, in bytes. Methods | Improve this Doc View Source Flush() Flushes data in a sequential stream. Declaration bool Flush() Returns Type Description Boolean The stream flush operation. Remarks The Flush method may produce latencies and does not always guarantee durable and coherent storage of data. It's generally recommended to avoid this method if possible. This method is specific to nanoFramework. The equivalent method in the UWP API is: FlushAsync. | Improve this Doc View Source Store() Declaration uint Store() Returns Type Description UInt32 | Improve this Doc View Source Write(Byte[]) Writes data in a sequential stream. Declaration void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer A byte array buffer that contains the data to be written. Remarks This method is specific to nanoFramework. The equivalent method in the UWP API is: WriteAsync(IBuffer buffer). Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Streams.IRandomAccessStream.html": {
    "href": "api/Windows.Storage.Streams.IRandomAccessStream.html",
    "title": "Interface IRandomAccessStream | nanoFramework Documentation",
    "keywords": "Interface IRandomAccessStream Supports random access of data in input and output streams. Inherited Members IDisposable.Dispose() IInputStream.Read(IBuffer, UInt32, InputStreamOptions) IOutputStream.UnstoredBufferLength IOutputStream.Flush() IOutputStream.Write(Byte[]) IOutputStream.Store() Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public interface IRandomAccessStream : IDisposable, IInputStream, IOutputStream Properties | Improve this Doc View Source CanRead Gets a value that indicates whether the stream can be read from. Declaration bool CanRead { get; } Property Value Type Description Boolean True if the stream can be read from. Otherwise, false. | Improve this Doc View Source CanWrite Gets a value that indicates whether the stream can be written to. Declaration bool CanWrite { get; } Property Value Type Description Boolean True if the stream can be written to. Otherwise, false. | Improve this Doc View Source Position Gets the byte offset of the stream. Declaration ulong Position { get; } Property Value Type Description UInt64 The number of bytes from the start of the stream. Remarks The initial offset of a IRandomAccessStream is 0. This offset is affected by both IInputStream and IOutputStream operations. | Improve this Doc View Source Size Gets or sets the size of the random access stream. Declaration ulong Size { get; set; } Property Value Type Description UInt64 The size of the stream. Methods | Improve this Doc View Source Seek(UInt64) Sets the position of the stream to the specified value. Declaration void Seek(ulong position) Parameters Type Name Description UInt64 position The new position of the stream. Remarks Warning! This method does not check the position to make sure the value is valid for the stream. If the position is invalid for the stream, the ReadAsync and WriteAsync methods will return an error if you call them. Extension Methods LogDispatcher.GetCurrentClassLogger(Object)"
  },
  "api/Windows.Storage.Streams.UnicodeEncoding.html": {
    "href": "api/Windows.Storage.Streams.UnicodeEncoding.html",
    "title": "Enum UnicodeEncoding | nanoFramework Documentation",
    "keywords": "Enum UnicodeEncoding Specifies the type of character encoding for a stream. Namespace : Windows.Storage.Streams Assembly : Windows.Storage.Streams.dll Syntax public enum UnicodeEncoding Remarks nanoFramework API only supports UTF8 encoding. Fields Name Description Utf8 The encoding is UTF-8. Extension Methods LogDispatcher.GetCurrentClassLogger()"
  },
  "content/architecture/class-libraries.html": {
    "href": "content/architecture/class-libraries.html",
    "title": "Class Libraries | nanoFramework Documentation",
    "keywords": "Class Libraries About this document This document describes the design and organization of .NET nanoFramework Class Libraries, offers some explanation on the choices that were made and how to add a new Class Library. The examples bellow are related with ChibiOS (which is the currently reference implementation for .NET nanoFramework ). Libraries Follow the list of the existing libraries, respective NuGet package and CMake enable option: Class Library NuGet package name Stable Preview CMake option Base Class Library (also know as mscorlib) nanoFramework.CoreLibrary (always included) Base Class Library (without Reflection) nanoFramework.CoreLibrary (always included, -DNF_FEATURE_SUPPORT_REFLECTION=OFF) nanoFramework.Devices.Can nanoFramework.Devices.Can -DAPI_nanoFramework.Devices.Can=ON nanoFramework.Devices.OneWire nanoFramework.Devices.OneWire -DAPI_nanoFramework.Devices.OneWire=ON nanoFramework.Graphics nanoFramework.Graphics -DAPI_nanoFramework.Graphics=ON nanoFramework.M5Stack nanoFramework.M5Stack -DAPI_nanoFramework.M5Stack=ON nanoFramework.Hardware.Esp32 nanoFramework.Hardware.Esp32 -DAPI_Hardware.Esp32=ON nanoFramework.Hardware.Esp32.Rmt nanoFramework.Hardware.Esp32.Rmt -DAPI_Hardware.Esp32.Rmt=ON nanoFramework.Hardware.Stm32 nanoFramework.Hardware.Stm32 -DAPI_Hardware.Stm32=ON nanoFramework.Hardware.TI nanoFramework.Hardware.TI -DAPI_Hardware.TI=ON nanoFramework.ResourceManager nanoFramework.ResourceManager -DAPI_nanoFramework.ResourceManager=ON nanoFramework.Runtime.Events nanoFramework.Runtime.Events (always included) nanoFramework.Runtime.Native nanoFramework.Runtime.Native (always included) nanoFramework.Networking.Sntp nanoFramework.Networking.Sntp (included when network option is ON) nanoFramework.TI.EasyLink nanoFramework.TI.EasyLink -DAPI_nanoFramework.TI.EasyLink=ON Windows.Devices.Adc nanoFramework.Windows.Devices.Adc -DAPI_Windows.Devices.Adc=ON System.Device.Dac nanoFramework.System.Device.Dac -DAPI_System.Device.Dac=ON System.Device.I2c nanoFramework.System.Device.I2c -DAPI_System.Device.I2c=ON Windows.Devices.I2c nanoFramework.Windows.Devices.I2c -DAPI_Windows.Devices.I2c=ON System.Device.Gpio nanoFramework.System.Device.Gpio -DAPI_System.Device.Gpio=ON Windows.Device.Gpio nanoFramework.Windows.Devices.Gpio -DAPI_Windows.Devices.Gpio=ON Windows.Devices.Pwm nanoFramework.Windows.Devices.Pwm -DAPI_Windows.Devices.Pwm=ON System.IO.Ports nanoFramework.System.IO.Ports -DAPI_System.IO.Ports=ON Windows.Devices.SerialCommunication nanoFramework.Windows.Devices.SerialCommunication -DAPI_Windows.Devices.SerialCommunication=ON System.Device.Spi nanoFramework.System.Device.Spi -DAPI_System.Device.Spi=ON Windows.Devices.Spi nanoFramework.Windows.Devices.Spi -DAPI_Windows.Devices.Spi=ON Windows.Devices.WiFi nanoFramework.Windows.Devices.WiFi -DAPI_Windows.Devices.WiFi=ON Windows.Storage nanoFramework.Windows.Storage -DNF_FEATURE_HAS_SDCARD=ON and/or -DNF_FEATURE_HAS_USB_MSD=ON Windows.Storage.Streams nanoFramework.Windows.Storage.Streams -DAPI_=ON System.IO.FileSystem nanoFramework.System.IO.FileSystem -DAPI_System.IO.FileSystem=ON System.Collections nanoFramework.System.Collections no native code System.Math nanoFramework.System.Math -DAPI_System.Math=ON System.Net nanoFramework.System.Net -DAPI_System.Net=ON System.Net.Http nanoFramework.System.Net.Http no native code System.Net.Http.Client nanoFramework.System.Net.Http.Client no native code System.Net.Http.Server nanoFramework.System.Net.Http.Server no native code System.Text nanoFramework.System.Text no native code System.Text.RegularExpressions nanoFramework.System.Text.RegularExpressions no native code System.Threading nanoFramework.System.Threading no native code Other libraries Class Library NuGet package name Stable Preview AMQP Net Lite AMQPNetLite.nanoFramework AMQP Net Lite (micro) AMQPNetMicro.nanoFramework nanoFramework.Azure.Devices nanoFramework.Azure.Devices.Client nanoFramework.Logging nanoFramework.Logging nanoFramework.Json nanoFramework.Json nanoFramework.m2mqtt nanoFramework.m2mqtt nanoFramework.NetWorkHelper nanoFramework.NetWorkHelper nanoFramework.TestFramework nanoFramework.TestFramework nanoFramework.WebServer nanoFramework.WebServer Distribution strategy To ease the burden of distributing and updating the class libraries we've choose to use Nuget to handle all this. It has the added benefit of dealing with the dependency management, version and such. So, for each class library, there is a Nuget package that includes the assembly and documentation files. The Nuget package takes care of making sure that the required dependency(ies) and correct version(s) are added to a managed (C#) project, making a developer's life much easier. How to add a new class library Follow the procedure to add a new class library to a .NET nanoFramework target image. The example is for adding System.Device.Gpio library. In Visual Studio start a new project for a .NET nanoFramework C# Class library. Source code here Implement all the required methods, enums, properties in that project. It's recommended that you add XML comments there (and enable the automated documentation generation in the project properties). Add the NuGet packaging project to distribute the managed assembly and documentation. We have a second NuGet package that includes all the build artefacts, generated stubs, dump files and such. This is to be used in automated testing and distribution of follow-up projects or build steps. Upon a successfully build of the managed project the skeleton with the stubs should be available in the respective folder. Because .NET nanoFramework aims to be target independent, the native implementation of a class library can be split in two parts: Declaration and common code bits (these always exist) inside the src folder. This is the place where the stubs must be placed: Common System.Device.Gpio . The specific implementation bits that are platform dependent and that will live 'inside' each platform RTOS folder: ChibiOS System.Device.Gpio . ESP32 FreeRTOS System.Device.Gpio . TI-RTOS System.Device.Gpio . Add the CMake as a module to the modules folder here . The name of the module should follow the assembly name (Find System.Device.Gpio .cmake). Mind the CMake rules for the naming: start with Find followed by the module name and cmake extension. The CMake for the System.Device.Gpio module is here . In the CMake NF_NativeAssemblies.cmake add an option for the API. The option name must follow the pattern API_ namespace . The option for System.Device.Gpio is API_System.Device.Gpio. In the CMake NF_NativeAssemblies.cmake find the macro ParseApiOptions and add a block for the API. Just copy/paste an existing one and replace the namespace with the one that you are adding. Update the template file for the CMake variants here to include the respective option. For the System.Device.Gpio example you would add to the OPTION1... and OPTION2... (under linkage ) the following line: \"API_System.Device.Gpio\" : \"OFF\" If the API requires enabling hardware or SoC peripherals in the target HAL/PAL make the required changes to the appropriate files. For System.Device.Gpio in ChibiOS there is nothing to enable because the GPIO subsystem is always enabled. In contrast, for the System.Device.Spi, the SPI subsystem has to be enabled at the halconf.h file and also (at driver level) in mcuconf.h the SPI peripherals have to be individually enabled (e.g. #define STM32_SPI_USE_SPI1 TRUE ). Note: To ease the overall configuration of an API and related hardware (and when it makes sense) the API option (API_System.Device.Gpio) can be extended to automatically enable the HAL subsystem. This happens with the Windows.Devices.Spi API. The CMake option is mirrored in the general CMakeLists.txt in order to be used in CMakes and headers. This mirror property is HAL_USE_SPI_OPTION . It's being defined here and not in the individual halconf.h files as usual. To make this work the CMake property has to be added to the CMake template file of the platform target_platform.h.in . When adding/enabling new APIs and depending on how the drivers and the library are coded, some static variables will be added to the BSS RAM area. Because of that extra space that is taken by those variables the Managed Heap size may have to be adjusted to make room for those. To do this find the __clr_managed_heap_size__ in the general CMakeLists.txt of that target and decrease the value there as required. Some APIs depend of others. This happens for example with System.Device.Gpio that requires nanoFramework.Runtime.Events in order to generate the interrupts for the changed pin values. To make this happen the option to include the required API(s) has to be enabled in the main CMakeLists.txt inside the if clause of the dependent API. Just like if the option was enabled at the CMake command line. Check this by searching for API_nanoFramework.Runtime.Events inside the if(API_System.Device.Gpio) . How to include a class library in the build To include a class library in the build for a target image you have to add to the CMake an option for the API. For the System.Device.Gpio example the option would be -DAPI_System.Device.Gpio=ON . You can also add this to your own cmake-variants.json file. To exclude a class library just set the option to OFF or simply don't include it in the command."
  },
  "content/architecture/date-and-time.html": {
    "href": "content/architecture/date-and-time.html",
    "title": "Date and Time | nanoFramework Documentation",
    "keywords": "Date and Time About this document This document describes how .NET nanoFramework handles Date & Time and the available option regarding this matter. UTC and local time Time (and date) is fundamental for the inner works of .NET nanoFramework . But an application running on top of it can make use of it, or not, thus making relevant the discussion and evaluation of the related features and associated code. Because .NET nanoFramework runs on constrained resources platforms inclusion of features that increase both RAM and FLASH usage has to be considered and evaluated. DateTime supports the use of Local and UTC times by its DateTime.Kind property. Supporting this requires adding several blocks such as: an API for setting the platform timezone, handling the huge number of available timezones, managing the daylight savings changes, manage conversion to/from the different kinds, etc. Considering all the above, .NET nanoFramework addresses this matter providing the absolute minimal viable options. There is support for DateTime (obviously) but all DateTime are considered UTC. There is no support for DateTime.Kind.Local , setting timezone or converting to/from the different kinds. If an application requires this, it has to implement it at its own level. Time source The time base source is, by default, the SysTick available in the CMSIS RTOS API. This is the source of the time when a DateTime object is instantiated. Because almost all hardware platforms capable of running .NET nanoFramework include an hardware RTC this peripheral can be used as the source for time objects. Note that for all other internals of .NET nanoFramework the CMSIS RTOS API SysTick keeps being used as the time base. This option is exposed to the board designer by the NF_FEATURE_RTC configuration option. Setting it to ON when calling CMake brings in the RTC subsystem and all the calls to DateTime make use of the time base provided by this peripheral. RTC and hardware Leveraging the RTC hardware peripheral allows several interesting/valuable features: more accurate timekeeping (when compared with a regular timer); possibility for timekeeping in sleep/deep sleep modes; setting alarms to wake-up the system at a future time;"
  },
  "content/architecture/deployment.html": {
    "href": "content/architecture/deployment.html",
    "title": "Application deployment | nanoFramework Documentation",
    "keywords": "Application deployment About this document This document describes how a managed .NET nanoFramework application is deployed to a target device. Deployment preparation The pre-requisites for deploying a managed .NET nanoFramework application to a target device are very simple: a collection with the PE files for the target application and the referenced assemblies needs to be compiled. This collection of PE files is a blob with the binary contents of those files. Deployment The deployment stage consists on erasing the required deployment blocks on the device (FLASH sectors) and programming them with the blob containing the binary versions of the PE files. .NET nanoFramework follows a simplified and high level approach to this. It's up to the programming application to manage the device memory, meaning that it will tell the device exactly where and what is going into the memory. Also there is no \"reuse\" of what might be already deployed on the device. All the PE files are always deployed. This has the advantage of not requiring the extra steps of reading back what's in the device, checking the exact versions and deciding if a certain PE file will fit on a flash block. The downside is that sometimes this causes unnecessary flash erase and write cycles. Considering that a typical modern SoC flash endurance limit is in the range of 100k to 1M cycles this is negligible and acceptable for a device used for development purposes."
  },
  "content/architecture/floating-point-calculations.html": {
    "href": "content/architecture/floating-point-calculations.html",
    "title": "Floating-point calculations | nanoFramework Documentation",
    "keywords": "Floating-point calculations About this document This document describes the specificities and available implementations of System.Math class library in .NET nanoFramework . Available APIs and floating-point implementations The .NET System.Math APIs are available with double parameters. No sweat for the CPUs where the code usually runs. When we move to embedded systems that's a totally different story. A few more details to properly set context: double type : represents a double-precision 64-bit number with values ranging from negative 1.79769313486232e308 to positive 1.79769313486232e308. Precision ~15-17 digits. Size 8 bytes. float type : represents a single-precision 32-bit number with values ranging from negative 3.402823e38 to positive 3.402823e38. Precision ~6-9 digits. Size 4 bytes. Comparison of floating-point numeric types . There are all sorts of variants and combinations on how to deal with FP and DP in the embedded world. From hardware support on the CPU to libraries that perform those calculations at the expense of more code and execution speed. .NET nanoFramework targets 32-bit MCUs, therefore support for 64-bits calculations requires extra code and processing. Adding to the above, the extra precision provided by the double type is seldom required on typical embedded application use cases. Considering all this and the ongoing quest to save flash space we've decided to provide two flavours for the System.Math API: the standard one with double type parameters and the alternative, lightweight one, with float type parameters. This has zero impact on API and code reuse as both coexist. The only difference is on the firmware image. There is a build option ( DP_FLOATINGPOINT ) to build the image with DP floating point, when that extra precision is required. A NotImplementedException will be throw when there is no native support for an API. The remedy is to call the API with the other parameter type. // this is OK when running on a image that has DP floating point support Math.Pow(1.01580092094650000000000000, 0.19029495718363400000000000000); // this is the correct usage when running on a image WITHOUT support for DP floating point Math.Pow(1.0158009209465f, 0.190294957183634f);"
  },
  "content/architecture/HAL.html": {
    "href": "content/architecture/HAL.html",
    "title": "HAL architecture | nanoFramework Documentation",
    "keywords": "HAL architecture About this document This document describes the .NET nanoFramework HAL design, some explanation on the choices that were made and the options that are available to customize it."
  },
  "content/architecture/index.html": {
    "href": "content/architecture/index.html",
    "title": ".NET nanoFramework Architecture | nanoFramework Documentation",
    "keywords": ".NET nanoFramework Architecture Simplifications and trade-offs Generating stubs for a native project, NANOCLR macros, Arguments and return types Class Libraries Date and Time Floating point calculations Application deployment Thread execution Native interrupt handlers Wire Protocol PE File format As a summary, we can represent the nanoFramework architecture like this: nanoFramework is build on an Hardware Abstraction Layer (HAL). The HAL allow to access the hardware in a consistant and standard way. This allow to have a set of functions that are exposed the same way to the Platform Abstraction Layer (PAL) and specific drivers. The CLR is built on the PAL and offers multiple libraries. The one which is always used is mscorlib (System and few other namespaces). The modularity of nanoFramework allows to add as many namespaces, classes as you want. They'll all be linked to the CLR."
  },
  "content/architecture/memory-map-structure.html": {
    "href": "content/architecture/memory-map-structure.html",
    "title": "Memory Map Structure | nanoFramework Documentation",
    "keywords": "Memory Map Structure This document needs to be created. If you are willing to help, feel free to propose a PR!"
  },
  "content/architecture/nanoclr-stub-args.html": {
    "href": "content/architecture/nanoclr-stub-args.html",
    "title": "Generating stubs for a native project, NANOCLR macros, Arguments and return types | nanoFramework Documentation",
    "keywords": "Generating stubs for a native project, NANOCLR macros, Arguments and return types When you want to use native code and creating an associated managed code C# library, you should start by reading this article . This article will give you all the steps to create your managed C# project, generate the stubs and have everything glued together. Once this is done, you'll still have to understand couple of elements related to the NANOCLR macros and the arguments and type conversions. NANOCLR macros Once you generate the stubs, you'll have functions that looks like: HRESULT Library_sys_dev_pwm_native_System_Device_Pwm_PwmChannel::NativeInit___VOID( CLR_RT_StackFrame &stack ) { NANOCLR_HEADER(); NANOCLR_SET_AND_LEAVE(stack.NotImplementedStub()); NANOCLR_NOCLEANUP(); } Every native code that is surfaced with the managed C# code will be generated with pre setup NANOCLR macros. They call all be found in src\\CLR\\Include\\nanoCLR_Interop.h . With all the elements below, you will be able to understand how to best use them. NANOCLR_HEADER The NANOCLR_HEADER is always present at the top of each generated function. It's purpose is ti create the HRESULT hr variable. NANOCLR_CLEANUP or NANOCLR_NOCLEANUP, LABEL or NOLABEL the CLEANUP family includes 4 declinations and few more elements: #define NANOCLR_LEAVE() goto nanoCLR_Cleanup // Note: this is a bit simplified version when Debug is not used #define NANOCLR_RETURN() return hr #define NANOCLR_CLEANUP() hr = S_OK; nanoCLR_Cleanup: #define NANOCLR_CLEANUP_END() NANOCLR_RETURN() #define NANOCLR_NOCLEANUP() NANOCLR_CLEANUP(); NANOCLR_CLEANUP_END() #define NANOCLR_NOCLEANUP_NOLABEL() hr = S_OK; NANOCLR_RETURN() So to demystify and understand which one to use, the NANOCLR_NOCLEANUP_NOLABEL(); is equivalent to: hr = S_OK; return hr; . So if you don't have to clean anything, that your code is straight forward, that's the general case you can use. Looking at the NANOCLR_NOCLEANUP one, you'll have something added in the equivalent, a label: hr = S_OK; nanoCLR_Cleanup:; return hr; . As you see the label has been added and looking at few more definition, the NANOCLR_LEAVE macro is goto nanoCLR_Cleanup meaning, anything that needs some check and may leave earlier than a straight forward way will need to have the label version used. The variation with CLEANUP_END is here to just return hr, it's as well one that can be used when you have nothing to check. While the NANOCLR_CLEANUP one sets the hr to ok and place the label. It can't be used alone, the NANOCLR_LEAVE will have to be used after. NANOCLR_SET_AND_LEAVE, NANOCLR_CHECK_HRESULT and NANOCLR_EXIT_ON_SUCCESS Those NANOCLR_CHECK_HRESULT and NANOCLR_EXIT_ON_SUCCESS macros allow you to check if a call to a function or an expression has failed or succeeded and then, as we've seen previously, go to nanoCLR_Cleanup . This is used a lot when you are calling other similar function returning as well an HRESULT . #define NANOCLR_CHECK_HRESULT(expr) { if(FAILED(hr = (expr))) NANOCLR_LEAVE(); } #define NANOCLR_EXIT_ON_SUCCESS(expr) { if(SUCCEEDED(hr = (expr))) NANOCLR_LEAVE(); } #define NANOCLR_SET_AND_LEAVE(expr) { hr = (expr); NANOCLR_LEAVE(); } The NANOCLR_SET_AND_LEAVE function will just set the HRESULT and go to nanoCLR_Cleanup . You will find a detailed list of typical HRESULT in the src\\CLR\\Include\\nf_errors_exceptions.h file. FAILED and SUCCEEDED are defined like this: #define SUCCEEDED(Status) ((HRESULT)(Status) >= 0) #define FAILED(Status) ((HRESULT)(Status)<0) NANOCLR_MSG_SET_AND_LEAVE and NANOCLR_MSG1_SET_AND_LEAVE Those 2 macros are defined like this: #define NANOCLR_MSG_SET_AND_LEAVE(expr, msg) { hr = (expr); NANOCLR_LEAVE(); } #define NANOCLR_MSG1_SET_AND_LEAVE(expr, msg, arg) { hr = (expr); NANOCLR_LEAVE(); } So they allow you to setup the return element and leave. Those are so far used only in the src\\CLR\\Core\\TypeSystem.cpp file. That said, nothing prevent you to use them as well. CLR_RT_StackFrame &stack At every call to one of those native functions, the stack is passed thru a structure called CLR_RT_StackFrame. The definition can be found in src\\CLR\\Include\\nanoCLR_Runtime.h . It would be too long to go thru all the functions and properties. In this description we will focus only on few elements. If your function is in a static class In, this case, the stack class that you'll get it's is the \"static instance\" of the C# class. The pointer to the class instance is only available for non static calls. The reason for this is that the execution engine adds a pointer to the class instance to the IL stack, when there is an instance of it. Getting and checking the stack in a non static class The pattern to use is the following: CLR_RT_HeapBlock* pThis = stack.This(); FAULT_ON_NULL(pThis); FAULT_ON_NULL is a macro similar to the onces presented in the previous section which will check of the stack is null or not. In case of null it will go to the nanoCLR_Cleanup label and set the HRESULT to a null fault. The definition can be found in src\\CLR\\Include\\nanoCLR_Interop.h . #define FAULT_ON_NULL(ptr) if(!(ptr)) NANOCLR_SET_AND_LEAVE(CLR_E_NULL_REFERENCE) #define FAULT_ON_NULL_ARG(ptr) if(!(ptr)) NANOCLR_SET_AND_LEAVE(CLR_E_ARGUMENT_NULL) You can use those macro for arguments too. We will see this in one of the following section. Getting any exposed field from the stack Once you've checked that the stack is valid, you can get a pointer to any of the class fields. Here is a typical example: int pinNumber = (int)(pThis[Library_sys_dev_pwm_native_System_Device_Pwm_PwmChannel::FIELD___pinNumber].NumericByRef().u4); The stack is a CLR_RT_HeapBlock . This type is the core type that allows you get access to a Heap Block, which are the objects that are placed in the IL stack. The pattern to use is the array one: pthis[the_field_to_get] where you have to make sure the field does exist. To avoid any issue, it is recommended to use the long names like Library_sys_dev_pwm_native_System_Device_Pwm_PwmChannel::FIELD___pinNumber . But if it's in the same class, you don't need the long naming, pThis[FIELD___pinNumber] will just work as well. Then the NumericByRef() allows you to get a numerical number and u4 to convert it as a uint32 . For numerics, you have as well NumericByRefConst() allowing to convert as a constant. Then you have u for non signed, 1, 2, 4 and 8 for the number of bytes. i for signed, r4 for float and r8 for double . Pro tip: the generated function definition contains the types and the return type. Example: NativeSetActiveDutyCyclePercentage___VOID__U4 is void as return and U4 so uint32 for the first argument. This is done on purpose to help managing the return type and arguments. Arg0, Arg1, ArgsN Helpers functions available to access the arguments. We will look at this in this section. Static class In a static class, the stack.Arg0() points the first Heap Block passed on the IL stack. As explained before, do not use CLR_RT_HeapBlock* pThis = stack.This(); because that won't be a pointer to a class instance (again: this is a call to a static method, therefore there is no instance of the class). Non static class In a non static class, stack.Arg0() is equivalent to stack.This() . The first parameter passed from the C# method can be accessed with Arg1() and the following ones with equivalent calls that have the same index as the parameter. Dereferencing an array As an example, this time, let's use a function with an array: HRESULT Library_sys_dev_spi_native_System_Device_Spi_SpiDevice::NativeTransfer___VOID__SZARRAY_U2__SZARRAY_U2__BOOLEAN(CLR_RT_StackFrame &stack) In this function, the return type is void, it's a non static one, the first and third arguments are SZARRAY , the second and fourth U2 . Still in this example, you will access the first array like this: CLR_RT_HeapBlock_Array *writeBuffer; uint8_t *writeData = NULL; writeBuffer = stack.Arg1().DereferenceArray(); if (writeBuffer != NULL) { writeData = (unsigned char *)writeBuffer->GetFirstElementUInt16(); // Do something as it's not null } The DereferenceArray() array function will allow you to get an array and to get access to the first element (in this case it's a UInt16 array), you can use GetFirstElementUInt16() . Array have their own heap types: CLR_RT_HeapBlock_Array . As you can guess you have other Element functions for the various system types. Dereferencing an object Similar to the array, you can dereference an object, a class or a structure. You will then be able to access its fields. Let's use the SpanByte structure as an example. CLR_RT_HeapBlock *writeSpanByte; CLR_RT_HeapBlock_Array *writeBuffer; uint8_t *writeData = NULL; int16_t writeSize = 0; int16_t writeOffset = 0; writeSpanByte = stack.Arg1().Dereference(); if (writeSpanByte != NULL) { // get buffer writeBuffer = writeSpanByte[SpanByte::FIELD___array].DereferenceArray(); if (writeBuffer != NULL) { // Get the write offset, only the elements defined by the span must be written, not the whole // array writeOffset = writeSpanByte[SpanByte::FIELD___start].NumericByRef().s4; // use the span length as write size, only the elements defined by the span must be written writeSize = writeSpanByte[SpanByte::FIELD___length].NumericByRef().s4; writeData = (unsigned char *)writeBuffer->GetElement(writeOffset); } } SpanByte contains internal fields which are a byte array, a start int32 and length int32 elements. Giving the start and length of the buffer to use. So the pattern is actually to get a reference on the SpanByte, check if not null, get an array reference on the array, check if not nul and you can then have the size of the array. The GetElement() function will point you in the element you need. ArgN You only have 8 defined Arg, when you need to access them further, you can use ArgN(the_number_to_access) . Note: it is recommended to move to a class or structure when you start getting too many arguments. Getting a string The pattern to get a string from the stack is to use the function RecoverString() if will give you a string. const char* szText = stack.Arg1().RecoverString(); // You can well check if it's a valid non null string like any other heap element: FAULT_ON_NULL(szText); Setting a result You can setup a return result using the family functions SetResult_ . System types are directly available like U1 or R4 or any other mentioned before. for example stack.SetResult_U1(42) will place 42 as the return value for a function returning a byte type. SetResult_Object allows you to return any valid object, class or structure. To return a string, SetResult_String is your best friend. Note that this function returns an HRESULT and should be checked."
  },
  "content/architecture/native-interrupt-handlers.html": {
    "href": "content/architecture/native-interrupt-handlers.html",
    "title": "Thread execution | nanoFramework Documentation",
    "keywords": "Thread execution About this document This document describes how thread execution works with the .NET nanoFramework CLR. Native interrupt handlers The functions implementing interrupt handlers for native code need to be wrapped by the macros NATIVE_INTERRUPT_START and NATIVE_INTERRUPT_END that take care of setting/resetting the appropriate System_State flags."
  },
  "content/architecture/pe-file.html": {
    "href": "content/architecture/pe-file.html",
    "title": ".NET nanoFramework PE File Format | nanoFramework Documentation",
    "keywords": ".NET nanoFramework PE File Format The .NET nanoFramework PE data format is based on the ECMA-335 specification. Specifically sections II.22 - II.24. Due to the constraints of the systems .NET nanoFramework targets the PE file format is not an exact match/implementation of the ECMA-335 specification. .NET nanoFramework PE file format is essentially an extended subset of the format defined in ECMA-335. Major differences from ECMA-335 The number and size of the metadata tables is limited in .NET nanoFramework to keep the overall memory footprint as low as possible. The Windows PE32/COFF header, tables and information is stripped out. Switch instruction branch table index is limited to 8 bits. Table indexes are limited to 12 bits. This also means that the metadata tokens are 16 bits and not 32 so the actual IL instruction stream is different for .NET nanoFramework . Resources are handled in a very different manner with their own special table in the assembly header. File Data Structure The PE file starts with an Assembly header which is the top level structure of every .NET nanoFramework PE file. On disk the AssemblyHeader structure is at offset 0 of the .PE file. On the device the AssemblyHeader is aligned at a 32 bit boundary within a well known ROM/FLASH region (the Deployment region) with the first assembly at offset 0 of the region. Immediately following the assembly header is the metadata table data. Since there are no fixed requirements that an assembly requires all possible tables or what the number of entries in each table will be, the exact size and location of the start of each table's data is entirely described within the header including the end of the assembly, which is used to compute the start location of any subsequent assemblies in memory. +-----------------+ <--- Aligned to 32 bit boundary in memory | AssemblyHeader | +-----------------+ | Metadata | +-----------------+ | { padding } | +-----------------+ <--- Aligned to 32 bit boundary in memory | AssemblyHeader | +-----------------+ | Metadata | +-----------------+ | { padding } | +-----------------+ <--- Aligned to 32 bit boundary in memory | ... | Structures for the other table entries AssemblyRef Table Attribute Table ExceptionHandler Table FieldRef Table MethodDef Table MethodRef Table Resources Table TypeDef Table TypeRef Table TypeSpec Table GenericParam Table (new in v2.0) MethodSpec Table (new in v2.0) Common PE Types and Enumerations Note 1: The structures above are packed with 1 byte boundary. Note 2: the documentation for the PE file format was taken from the original one at .NET Micro Framework."
  },
  "content/architecture/pe-file/AssemblyHeader.html": {
    "href": "content/architecture/pe-file/AssemblyHeader.html",
    "title": "AssemblyHeader (CLR_RECORD_ASSEMBLY) | nanoFramework Documentation",
    "keywords": "AssemblyHeader (CLR_RECORD_ASSEMBLY) The AssemblyHeader structure contains a number of verification markers and CRCs to validate the legitimacy of the assembly at runtime. Additionally, the Assembly header contains the location information for the MetadataTables and BLOB storage areas. The Structure of the AssemblyHeader is as follows: Name Type Description Marker uint8_t[8] Id marker for an assembly HeaderCRC uint32_t CRC32 of the AssemblyHeader structure itself AssemblyCRC uint32_t CRC32 of the complete assembly Flags AssemblyHeaderFlags Flags for the assembly NativeMethodsChecksum uint32_t Native Method Checksum NativeMethodsOffset uint32_t Native Methods Offset Version VersionInfo Version information data structure for this assembly AssemblyName uint16_t String table index for the Assembly's name StringTableVersion uint16_t String table version StartOfTables uint32_t[16] Array of offsets into the PE file for the metadata tables NumberOfPatchedMethods uint32_t Number of patched methods PaddingOfTables uint8_t[16] amount of alignment padding for each metadata table Field Details The following sections describe the individual fields of the AssemblyHeader structure. Marker The assembly marker is an eight character marker consisting of a string non zero terminated ASCII encoded characters. This is used to clearly identify a .NET nanoFramework PE file on disk and in memory at runtime. It also indicates the version of this data structure, thus any modifications to this structure in future releases MUST use a new marker string. Version Marker Description 1.0 'NFMRK1' Marker for version 1.0 2.0 'NFMRK2' Marker for version 2.0 (after adding support for generics) HeaderCRC ANSI X3.66 32 bit CRC for the AssemblyHeader. This is computed assuming the HeaderCRC is 0. AssemblyCRC ANSI X3.66 32 bit CRC for the entire contents of the Assembly PE data starting from PaddingOfTables Flags The flags property are meant to contain a bit flags value. They are not used in .NET nanoFramework and were kept for historical reasons and structure compatibility. NativeMethodsChecksum The NativeMethodsChecksum is a unique value that is matched against the native methods table stored in the CLR firmware to ensure the methods match. The actual algorithm used for computing this checksum are documented in the [NativeMethodsChecksum Algorithm] document. Though, it worth noting that the actual algorithm doesn't matter. Nothing in the runtime will compute this value. The runtime only compares the assembly's value with the one for the native code registered for a given assembly to ensure they match. As long as the tool generating the assembly and the native method stubs header and code files use the same value then the actual algorithm is mostly irrelevant. The most important aspect of the algorithm chosen is that any change to any type or method signature of any type with native methods MUST generate a distinct checksum value. The current MetadataProcessor algorithm constructs a mangled string name for the native methods (used to generate the stubs), sorts them all and runs a CRC32 across them to get a distinct value. Since the CRC is based on the fully qualified method name and the types of all parameters any change of the signatures will generate a new value - denoting a mismatch. Version The Version field holds the assembly's version number. (as opposed to the version of the AssemblyHeaderStructure itself). This is used by the debugger for version checks at deployment time. The runtime itself doesn't use versions to resolve references, as only one version of an assembly can be loaded at a time. Thus assembly references in the PE format don't include a version. AssemblyName String Table index for the name of the assembly StringTableVersion Should be equal to 1 StartOfTables Fixed array of offsets to the table data for each of the different tables. The entries in this array are offsets from the start of the assembly header itself (e.g. the file seek offset if the PE image is from a file) Name .NET nanoFramework Source Element Name Description AssemblyRef CLR_RECORD_ASSEMBLYREF Table of Assembly references TypeRef CLR_RECORD_TYPEREF Reference to a type in another assembly FieldRef CLR_RECORD_FIELDREF Reference to a field of a type in another assembly MethodRef CLR_RECORD_METHODREF Reference to a method of a type in another assembly TypeDef CLR_RECORD_TYPEDEF Type definition for a type in this assembly FieldDef CLR_RECORD_FIELDDEF Field definition for a type in this assembly MethodDef CLR_RECORD_METHODDEF Method definition for a type in this assembly GenericParam CLR_RECORD_GENERICPARAM Generic parameter definition (new in v2.0) MethodSpec CLR_RECORD_METHODSPEC Method specification (new in v2.0) Attributes CLR_RECORD_ATTRIBUTE Attribute types defined in this assembly TypeSpec CLR_RECORD_TYPESPEC TypeSpecifications (signatures) used in this assembly Resources CLR_RECORD_RESOURCE Resource items in a resource file bound to this assembly ResourcesData <blob> Blob table data for the resources Strings <blob> Blob table data for the strings Signatures <blob> Blob table data for the metadata signatures ByteCode <blob> Blob table data for the IL byte code instructions ResourcesFiles CLR_RECORD_RESOURCE_FILE Resource files descriptors for resource files bound to this assembly EndOfAssembly <N/A> Technically, this is not a table. Instead this entry contains the offset to the end of the assembly, which is useful for finding the next assembly in a DAT region NumberOfPatchedMethods Should be equal to 0. Not supported in .NET nanoFramework PaddingOfTables For every table, a number of bytes that were padded to the end of the table to align the next table to a 32bit boundary. The start of each table is aligned to a 32bit boundary, and ends at a 32bit boundary. Some of these tables will, therefore, have no padding, and all will have values in the range [0-3]. This isn't the most compact form to hold this information, but it only costs 16 bytes/assembly. Trying to only align some of the tables is just much more hassle than it's worth. This field itself must also be aligned on a 32 bit boundary. This padding is used to compute the size of a given table (including the blob data) using the following formula: TableSize = StartOfTables[ tableindex + 1 ] - StartOfTables[ tableindex ] - PaddingOfTables[ tableindex ]"
  },
  "content/architecture/pe-file/AssemblyRefTableEntry.html": {
    "href": "content/architecture/pe-file/AssemblyRefTableEntry.html",
    "title": "AssemblyRefTableEntry (CLR_RECORD_ASSEMBLYREF) | nanoFramework Documentation",
    "keywords": "AssemblyRefTableEntry (CLR_RECORD_ASSEMBLYREF) The assembly Reference table contains references to other assemblies. The runtime will lookup the assembly by name and version when resolving the reference to an assembly header. The format of the AssemblyRefTableEntry is as follows: Name Type Description Name StringTableIndex index into the string table blob for the name of the referenced assembly Version VersionInfo VersionInfo structure for the version of the assembly (Checked at runtime for an EXACT match)"
  },
  "content/architecture/pe-file/AttributeTableEntry.html": {
    "href": "content/architecture/pe-file/AttributeTableEntry.html",
    "title": "AttributeTableEntry (CLR_RECORD_ATTRIBUTE) | nanoFramework Documentation",
    "keywords": "AttributeTableEntry (CLR_RECORD_ATTRIBUTE) The Attribute table contains entries with the following structure Name Type Description OwnerType TableKind One of TableKind::TypeDef , TableKind::MethodDef , or TableKind::FieldDef OwnerIndex uint16_t Index into the table specified by OwnerType Constructor MethodDefOrRef Binary token for a MethodRef or MethodDef that represents the constructor of the Attribute Data SigTableIndex Index into the signature table that defines the parts of the attribute Signature Table Usage (TODO: Define valid signature table sequences for an attribute)"
  },
  "content/architecture/pe-file/Common-PE-Types-and-Enumerations.html": {
    "href": "content/architecture/pe-file/Common-PE-Types-and-Enumerations.html",
    "title": "Philosophy | nanoFramework Documentation",
    "keywords": "Philosophy The PE File format is expressed in terms of a number of common types. In code these are generally realized as an enumeration, typedef or type alias of some sort o help ensure both clarity of code and correctness of use. This additional clarity and type safety is preferred over use of raw primitive types directly as they onvey no real meaning beyond their basic ranges making correct use of the code less obvious and more error prone. Table Index Many PE data structures store Index into a particular table index as a field. This table defines the type names used to store the index and which table it is Index into. Name underlying type Description StringTableIndex unsigned 16 bit integer Index into the string table (see: StringTables ) for more details) TypeDefTableIndex unsigned 16 bit integer Index into the type definition table TypeRefTableIndex unsigned 16 bit integer Index into the type reference table FieldDefTableIndex unsigned 16 bit integer Index into the field definition table MethodDefTableIndex unsigned 16 bit integer Index into the method definition table SigTableIndex unsigned 16 bit integer Index into the signature table (see: SignatureBlobs for more details) GenericParamTableIndex unsigned 8 bit integer Index into the generic params table (OK to use 1 byte index because we won't support more than 255 generic parameters) MethodSpecTableIndex unsigned 16 bit integer Index into the method specification table EmptyIndex Constant Since Index values are used to access members of a table and since (in C, C++, and many other languages) tables are indexed with the first element as index == 0 the value 0 is not useable as a constant to indicate \"none\" or \"null\". Thus a dedicated value is used for .NET nanoFramework metadata tables. Any index with the value 0xFFFF is considered the EmptyIndex and this is normally defined as a manifest constant for the entire code base to test against. Table Kind The CLR_TABLESENUM enumeration identifies a specific table in the assembly metadata. Name Value Description AssemblyRef 0x0000 Assembly reference table TypeRef 0x0001 Type Reference Table FieldRef 0x0002 Field Reference table MethodRef 0x0003 Method Reference Table TypeDef 0x0004 Type Definition Table FieldDef 0x0005 Field Definition Table MethodDef 0x0006 Method Definition Table GenericParam 0x0007 Generic Parameters Table MethodSpec 0x0008 Method Specification Table Attributes 0x0009 Attribute Table TypeSpec 0x000A Type Specification Table Resources 0x000B Resources Table ResourcesData 0x000C Resource Data Blob Table Strings 0x000D String Blob table Signatures 0x000E Signature Blob table ByteCode 0x000F IL Byte Code Stream Blob Table ResourcesFiles 0x0010 Resource Files Table EndOfAssembly 0x0011 End of Assembly Table (Used to quickly find the end of the assembly when scanning assemblies) Max 0x0012 End of enumeration valid enumeration values must be less than this value Miscellaneous Types Name underlying type Description MetadataOffset unsigned 16 bit integer Offset from the start of the IL instruction stream blob data MetadataPtr pointer to a const byte Pointer to the interior of the IL instruction stream blob data Tokens Many instructions in IL and fields of data structures contain a token. Tokens in IL Metadata reference some other piece of metadata in the assembly. Tokens contain the table the token refers to along with Index into the table into a single primitive integral value. In .NET nanoFramework PE files there are two kinds of tokens MetadataToken and a more compact BinaryToken. Metadata Token A metadata token is an unsigned 32 bit value where the Most significant byte is the table kind and the least significant 16 bits are the table index (In .NET nanoFramework PE format a table index is 16bits only thus there are 8 bits of unused data in a MetadataToken) Binary Token A Binary Token is a compact form of representing Index to one or more tables. .NET nanoFramework follows the convention specified by ECMA-335 (I I.24.2.66) for coded index where the least significant bits are used to determine which of the possible tables and the remaining bits provide the index of the table entry. Except for a few tags that, because of legacy code, use the most significant bits. Because of it's small size only the 2 bytes version is used. The following table provides the type name aliases for the various combinations of tables used in .NET nanoFramework PE metadata. TypeRefOrAssemblyRef: (1 bit to encode tag) Tag AssemblyRef 0 TypeRef 1 TypeDefOrRef: (2 bits to encode tag) Tag TypeDef 0 TypeRef 1 TypeSpec 2 MethodDefOrRef: (1 bit to encode tag) Tag MethodDef 0 MemberRef 1 MemberRefParent: (3 bits to encode tag) Tag TypeDef 0 TypeRef 1 ModuleRef 2 MethodDef 3 TypeSpec 4 TypeOrMethodDef: (1 bit to encode tag) Tag TypeDef 0 MethodDef 1 FieldRefOrFieldDef: (1 bit to encode tag) Tag FieldDef 0 FieldRef 1 VersionInfo Many .NET nanoFramework PE data structures include a version. The versions, when presented for readability are typically represented as a quad of 4 integer values separated by a '.' (i.e. 1.2.3.4) the following table defines the Version info structure used in the PE file to represent a version. Name Type Description Major unsigned 16 bit integer Major component of the common version quad Minor unsigned 16 bit integer Minor component of the common version quad Build unsigned 16 bit integer Build component of the common version quad Revision unsigned 16 bit integer Revision component of the common version quad DataType The DataType enumeration corresponds to the ECMA-335 ELEMENT_TYPE_xxxx, however the actual numeric values are not the same as the interpreter uses only a reduced sub-set of the standard values. Name Description Void 0 byte void value Boolean 1 byte boolean value I1 8 bit signed integer U1 8 bit unsigned integer CHAR 16 bit UTF-16 character I2 16 bit signed integer U2 16 bit unsigned integer I4 32 bit signed integer U4 32 bit unsigned integer R4 32 bit IEEE-754 floating point value I8 64 bit signed integer U8 64 bit unsigned integer R8 64 bit IEEE-754 floating point value DateTime 8 bytes - Shortcut for System.DateTime TimeSpan 8 bytes - Shortcut for System.TimeSpan String 4 bytes - short cut for reference to System.String Object 4 bytes - Shortcut for reference to System.Object Class CLASS <class Token> ValueType VALUETYPE <class Token> SZArray Shortcut for single dimension zero lower bound array SZARRAY <type> ByRef BYREF <type> Var VAR Generic parameter in a generic type definition, represented as number (new in v2.0) GenericInst GENERICINST Generic type instantiation (new in v2.0) MVar MVAR Generic parameter in a generic method definition, represented as number (new in v2.0)"
  },
  "content/architecture/pe-file/ExceptionHandlerTableEntry.html": {
    "href": "content/architecture/pe-file/ExceptionHandlerTableEntry.html",
    "title": "ExceptionHandlerTableEntry (CLR_RECORD_EH) | nanoFramework Documentation",
    "keywords": "ExceptionHandlerTableEntry (CLR_RECORD_EH) The Exception Handler table contains entries for the exception handling blocks within a method. If a method has the MethodDefFlags::HasExceptionHandlers flag set then the last byte of the ByteCode table for the method is the number of Exception handlers for the method. The exception handlers precede the count in the byte code stream (e.g. with a negative offset from the size). Important Note This means that instances of this structure stored in a PE image may be stored at an address that is NOT correctly aligned for the structure. Thus consumers should always copy the data into a properly aligned buffer. REVIEW: In a future revision of the PE binary format this should be managed by inserting padding into the ByteCode stream so that copying and dealing with unaligned data isn't needed. Name Type Description Mode ExceptionHandlerMode Mode for the exception handler ClassToken( 1 ) TypeDefOrRef Class token for the handler FilterStart MetadataOffset Offset into the IL ByteCode stream for the filter code TryStart MetadataOffset Offset into the IL ByteCode stream for the starting range this handler covers TryEnd MetadataOffset Offset into the IL ByteCode stream for the end of the range this handler covers HandlerStart MetadataOffset Offset into the IL ByteCode stream for the start of the exception handler HandlerEnd MetadataOffset Offset into the IL ByteCode stream for the end of the exception handler Notes *: The Mode, ClassToken and FilterStart form a discriminated union with the mode as the discriminator and the ClassToken and FilterStart sharing the same memory location. That is the ClassToken and FilterStart are representable as a C/C++ anonymous union. Start and End offsets are inclusive ExceptionHandlerMode The exception handler mode determines the specific mode for the exception handler, the base type for the enumeration is a uint16_t Name Value Description Catch 0x0000 Exception handler is a catch handler for a specific type CatchAll 0x0001 Exception handler catches all exceptions, regardless of type Finally 0x0002 Exception handler is a Finally block Filter 0x0003 Exception handler is a filter block"
  },
  "content/architecture/pe-file/FieldDefTableEntry.html": {
    "href": "content/architecture/pe-file/FieldDefTableEntry.html",
    "title": "FieldRefTableEntry (CLR_RECORD_FIELDDEF) | nanoFramework Documentation",
    "keywords": "FieldRefTableEntry (CLR_RECORD_FIELDDEF) The FieldDef Table consists of the following columns: Name Type Description Name StringTableIndex Index into string table for the name of the type Sig SigTableIndex Index into signature table describing the type of this field DefaultValue SigTableIndex Index into signature table describing the initial value of this field Flags uint16_t Flags defining intrinsic attributes and access modifiers for the field"
  },
  "content/architecture/pe-file/FieldRefTableEntry.html": {
    "href": "content/architecture/pe-file/FieldRefTableEntry.html",
    "title": "FieldRefTableEntry (CLR_RECORD_FIELDREF) | nanoFramework Documentation",
    "keywords": "FieldRefTableEntry (CLR_RECORD_FIELDREF) The FieldRef Table consists of the following columns: Name Type Description Name StringTableIndex Index into string table for the name of the type Owner TypeRefTableIndex Index into TypeRef table for the type containing this field Sig SigTableIndex Index into signature table describing the type of this field"
  },
  "content/architecture/pe-file/GenericParamTableEntry.html": {
    "href": "content/architecture/pe-file/GenericParamTableEntry.html",
    "title": "GenericParamTableEntry (CLR_RECORD_GENERICPARAM) | nanoFramework Documentation",
    "keywords": "GenericParamTableEntry (CLR_RECORD_GENERICPARAM) The GenericParam Table (new in v2.0) consists of the following columns: Name Type Description Number uint16_t 2-byte index of the generic parameter, numbered left -to-right, from zero. Flags uint16_t 2-byte bitmask of type GenericParamAttributes Owner TypeOrMethodDef Index into the TypeDef or MethodDef table, specifying the Type or Method to which this generic parameter applies; more precisely, a TypeOrMethodDef. Name StringTableIndex Index into string table giving the name for the generic parameter."
  },
  "content/architecture/pe-file/index.html": {
    "href": "content/architecture/pe-file/index.html",
    "title": ".NET nanoFramework PE File Format | nanoFramework Documentation",
    "keywords": ".NET nanoFramework PE File Format The .NET nanoFramework PE data format is based on the ECMA-335 specification. Specifically sections II.22 - II.24. Due to the constraints of the systems .NET nanoFramework targets the PE file format is not an exact match/implementation of the ECMA-335 specification. .NET nanoFramework PE file format is essentially an extended subset of the format defined in ECMA-335. Major differences from ECMA-335 The number and size of the metadata tables is limited in .NET nanoFramework to keep the overall memory footprint as low as possible. The Windows PE32/COFF header, tables and information is stripped out. Switch instruction branch table index is limited to 8 bits. Table indexes are limited to 12 bits. This also means that the metadata tokens are 16 bits and not 32 so the actual IL instruction stream is different for .NET nanoFramework . Resources are handled in a very different manner with their own special table in the assembly header. File Data Structure The PE file starts with an Assembly header which is the top level structure of every .NET nanoFramework PE file. On disk the AssemblyHeader structure is at offset 0 of the .PE file. On the device the AssemblyHeader is aligned at a 32 bit boundary within a well known ROM/FLASH region (the Deployment region) with the first assembly at offset 0 of the region. Immediately following the assembly header is the metadata table data. Since there are no fixed requirements that an assembly requires all possible tables or what the number of entries in each table will be, the exact size and location of the start of each table's data is entirely described within the header including the end of the assembly, which is used to compute the start location of any subsequent assemblies in memory. +-----------------+ <--- Aligned to 32 bit boundary in memory | AssemblyHeader | +-----------------+ | Metadata | +-----------------+ | { padding } | +-----------------+ <--- Aligned to 32 bit boundary in memory | AssemblyHeader | +-----------------+ | Metadata | +-----------------+ | { padding } | +-----------------+ <--- Aligned to 32 bit boundary in memory | ... | Structures for the other table entries AssemblyRef Table Attribute Table ExceptionHandler Table FieldRef Table MethodDef Table MethodRef Table Resources Table TypeDef Table TypeRef Table TypeSpec Table GenericParam Table (new in v2.0) MethodSpec Table (new in v2.0) Common PE Types and Enumerations Note 1: The structures above are packed with 1 byte boundary. Note 2: the documentation for the PE file format was taken from the original one at .NET Micro Framework."
  },
  "content/architecture/pe-file/MethodDefTableEntry.html": {
    "href": "content/architecture/pe-file/MethodDefTableEntry.html",
    "title": "MethodDefTableEntry (CLR_RECORD_METHODDEF) | nanoFramework Documentation",
    "keywords": "MethodDefTableEntry (CLR_RECORD_METHODDEF) The MethodRef table contains entries with the following structure Name Type Description Name StringTableIndex Index into String table for the name of the method RVA MetadataOffset Offset into the IL byte code blob table for the opcodes of the method Flags MethodDefFlags Flags to indicate intrinsic attributes and semantics of the method RetVal DataType DataType of the return value for the method ArgumentsCount uint8_t Count of arguments to the method LocalsCount uint8_t Count of local variables for the method LengthEvalStack uint8_t Length of the evaluation stack for the method Locals SigTableIndex Index into Signature table to describe the locals for the method FirstGenericParam GenericParamTableIndex Index into GenericParam table for the first generic parameter of the method GenericParamCount uint8_t Count of generic parameters for the method Signature SigTableIndex Index into Signature table that describes the method itself Signature Table Usage The method Def has multiple references to the signature table each describes some aspect of the method in distinct ways. This section describes the sequence of entries in the signature and their meanings for a method definition. Locals Signature Table (TODO: Define allowed sequence chains for local signatures. ECMA uses diagrams for this - consider using SVG here) Method Signature (TODO: Define allowed sequence chains for the method's signature. ECMA uses diagrams for this - consider using SVG here)"
  },
  "content/architecture/pe-file/MethodRefTableEntry.html": {
    "href": "content/architecture/pe-file/MethodRefTableEntry.html",
    "title": "MethodRefTableEntry (CLR_RECORD_METHODREF) | nanoFramework Documentation",
    "keywords": "MethodRefTableEntry (CLR_RECORD_METHODREF) The MethodRef table contains entries with the following structure Name Type Description Name StringTableIndex Index into string table for the name of the method Container TypeRefTableIndex Index into TypeRef table for the type containing the method Sig SignatureTableIndex Index into signature table for signature of the method"
  },
  "content/architecture/pe-file/MethodSpecTableEntry.html": {
    "href": "content/architecture/pe-file/MethodSpecTableEntry.html",
    "title": "MethodSpecTableEntry (CLR_RECORD_METHODSPEC) | nanoFramework Documentation",
    "keywords": "MethodSpecTableEntry (CLR_RECORD_METHODSPEC) The MethodSpec Table (new in v2.0) consists of the following columns: Name Type Description Method MethodDefOrRef Index into the MethodDef table or MemberRef table , specifying to which generic method this row refers; that is, which generic method this row is an instantiation of; more precisely, a MethodDefOrRef. Instantiation SignatureTableIndex Index into signature table holding the signature of this instantiation"
  },
  "content/architecture/pe-file/ResourcesTableEntry.html": {
    "href": "content/architecture/pe-file/ResourcesTableEntry.html",
    "title": "ResourcesTableEntry (CLR_RECORD_RESOURCE) | nanoFramework Documentation",
    "keywords": "ResourcesTableEntry (CLR_RECORD_RESOURCE) The Resources table is used to describe the resources bound to an assembly Name Type Description Id uint16_t Id of the resource Kind ResourceKind Kind of the resource Flags uint8_t Flags for the resource Offset ResourcesDataTableIndex Index into the ResourcesData blob table ResourceKind Name Value Description Invalid 0x00 Invalid entry Bitmap 0x01 The resource is a Bitmap Font 0x02 The resource is a Font in the TinyCLR Font format String 0x03 The resource is a String Binary 0x04 The resource is a binary blob Manifest Constants Name Value Description SentinelId 0x7FFF Sentinel marker (See Notes for details) FlagsPaddingMask 0x03 Mask for lower two bits of flags to retrieve padding (See Notes for details) Notes The last entry in the Resources table will have: Field Value Id SentinelId Kind Invalid Offset Size of the ResourceData table Flags 0 This is used to ensure that the preceding entry can use the offset of the last entry to compute the size of its data in the ResourceData blob table. The lower two bits of the flags is the padding applied to align this entries data in the ResourcesData blob table. That is, the size of the previous entries data is the offset of this entry minus the offset of the previous entry minus the padding for this entry. Or to put that another way, to compute the size of a resource requires a reference to the next entry in the table. With the next entry the size is computable using the following formula: sizeOfResource = next.Offset - Offset + ( next.Flags & FlagsPaddingMask )"
  },
  "content/architecture/pe-file/SignatureTable.html": {
    "href": "content/architecture/pe-file/SignatureTable.html",
    "title": "SignatureTable | nanoFramework Documentation",
    "keywords": "SignatureTable TDB"
  },
  "content/architecture/pe-file/StringTable.html": {
    "href": "content/architecture/pe-file/StringTable.html",
    "title": "StringTable | nanoFramework Documentation",
    "keywords": "StringTable TDB"
  },
  "content/architecture/pe-file/TypeDefTableEntry.html": {
    "href": "content/architecture/pe-file/TypeDefTableEntry.html",
    "title": "TypeDefTableEntry (CLR_RECORD_TYPEDEF) | nanoFramework Documentation",
    "keywords": "TypeDefTableEntry (CLR_RECORD_TYPEDEF) The MethodRef table contains entries with the following structure: Name Type Description Name StringTableIndex Index into string table with the name of the type NameSpace StringTableIndex Index into string table with the name of the namespace containing the type Extends TypeDefOrRef Index into the TypeDef table , TypeRef table , or TypeSpec table tables, more precisely, a TypeDefOrRef EnclosingType TypeDefOrRef Index into the TypeDef table , more precisely, a TypeDefOrRef if this is a nested type. Interfaces SignatureTableIndex Index into signature blob table for the set of interfaces implemented by this type FirstMethod MethodDefTableIndex Index into MethodDef table for the first method of the type VirtualMethodCount uint8_t Count of virtual methods in the type InstanceMethodCount uint8_t Count of instance methods in the type StaticMethodCount uint8_t Count of static methods in the type DataType DataType Data type identity for the type FirstStaticField FieldDefTableIndex Index into FieldDef for the first static field of the type FirstInstanceField FieldDefTableIndex Index into FieldDef for the first instance field of the type StaticFieldsCount uint8_t Count of static fields in the type InstanceFieldsCount uint8_t Count of instance fields for the type FirstGenericParam GenericParamTableIndex Index into GenericParam table for the first generic parameter for the type GenericParamCount uint8_t Count of generic parameters for the type Flags TypeDefFlags Flags defining intrinsic attributes and access modifiers for the type TypeDefFlags The TypeDefFlags enumeration provides a set of flag values for various intrinsic attributes and accessibility traits of a type definition. Name Value Description None 0 No special attributes or semantics ScopeMask 0x0007 Mask to extract the accessibility scope values NotPublic 0x0000 Class is not public scope. Public 0x0001 Class is public scope. NestedPublic 0x0002 Class is nested with public visibility. NestedPrivate 0x0003 Class is nested with private visibility. NestedFamily 0x0004 Class is nested with family visibility. NestedAssembly 0x0005 Class is nested with assembly visibility. NestedFamANDAssem 0x0006 Class is nested with family and assembly visibility. NestedFamORAssem 0x0007 Class is nested with family or assembly visibility. Serializable 0x0008 Type is serializable SemanticsMask 0x0030 Mask to extract the bits pertaining to type semantics Class 0x0000 Class Semantics (in particular the value of this field is that bits 4 and 5 are 0) ValueType 0x0010 Value type semantics Interface 0x0020 Interface semantics Enum 0x0030 Enum semantics Abstract 0x0040 Type is abstract Sealed 0x0080 Type is sealed SpecialName 0x0100 Type is a well known special name Delegate 0x0200 Type is a delegate MulticastDelegate 0x0400 Type is a multicast delegate Patched 0x0800 (TODO) BeforeFieldInit 0x1000 (TODO) HasSecurity 0x2000 (TODO) HasFinalizer 0x4000 (TODO) HasAttributes 0x8000 (TODO)"
  },
  "content/architecture/pe-file/TypeRefTableEntry.html": {
    "href": "content/architecture/pe-file/TypeRefTableEntry.html",
    "title": "TypeRefTableEntry (CLR_RECORD_TYPEREF) | nanoFramework Documentation",
    "keywords": "TypeRefTableEntry (CLR_RECORD_TYPEREF) The TypeRef Table consists of the following columns: Name Type Description Name StringTableIndex Index into string table for the name of the type Namespace StringTableIndex Index into string table for the namespace Scope TypeRefOrAssemblyRef Binary token for either the TypeRef table or the AssemblyRef table"
  },
  "content/architecture/pe-file/TypeSpecTableEntry.html": {
    "href": "content/architecture/pe-file/TypeSpecTableEntry.html",
    "title": "TypeSpecTableEntry (CLR_RECORD_TYPESPEC) | nanoFramework Documentation",
    "keywords": "TypeSpecTableEntry (CLR_RECORD_TYPESPEC) The TypeSpec table is used to describe composite types, like an array. Name Type Description Sig SigTableIndex Index into signature table for the TypeSpec Signature Table Usage (TODO: Define valid signature table sequences for a TypeSpec)"
  },
  "content/architecture/simplifications-and-trade-offs.html": {
    "href": "content/architecture/simplifications-and-trade-offs.html",
    "title": "Simplifications and trade-offs in .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Simplifications and trade-offs in .NET nanoFramework About this document This document describes the simplifications and trade-offs introduced in .NET nanoFramework when comparing it to the full framework. Enums We are oversimplifying enums . They are special classes which basically contain fields which are constants. ECMA-335 allows several simplifications that our CLR takes advantage of. That's made perfectly clear in the standard by this statement in II.14.3 \"These restrictions allow a very efficient implementation of enums.\" Since there is no real value in storing the value names and the constants they represent we choose not to do it. This saves an entry in the Fields table and the corresponding ones in the signatures table and also in the strings table (for the value name). At minimum, this would cost 8 + 2 + (n) bytes in the PE file. Mostly depending on the size of the string with the names. Because of this, we don't have support for Enum.GetNames() , Enum.GetValues() and Enum.IsDefined() . But we have HasFlag() ! Notes: These could be made available, at the expense of increasing the PE size. For Enum.IsDefined() you can always use a switch instruction in your code to create something similar depending on your use case. Multidimensional arrays Because of the underlying complexity and memory usage, multidimensional arrays are not supported. Only jagged arrays . At the end of the day, these are pretty much equivalent, so if you need multidimensional arrays, you just need to adapt your code to what's available. String.Format and numeric.ToString Functions .Net nanoFramework supports a subset of the Standard numeric format strings (D/F/G/N/X) and Composite formatting (left and right alignment). It does NOT support any of the Custom numeric format strings . Strings in nanoFramework are all constrained to UTF-8, so there are limits to the characters that can be displayed. The following format specifiers are supported: Specifier Examples D-Decimal Decimal unit test output F-Fixed-point Fixed-point unit test output G-General General unit test output N-Number Number unit test output X-Hexadecimal Hexadecimal unit test output Generics .NET nanoFramework doesn't support generics. We are actively working on it! (You can track the progress by following this GitHub issue) This is something that can easily go unnoticed as there are already some classes in mscorlib to support this. And, for the vast majority of the code, there will be no compiler error."
  },
  "content/architecture/string-format-examples.html": {
    "href": "content/architecture/string-format-examples.html",
    "title": "String.Format for numerics examples | nanoFramework Documentation",
    "keywords": "String.Format for numerics examples About this document This document provides examples of numeric formatting in the nanoFramework CLR. The examples are part of the Unit Test Framework and can be found in the CoreLibrary repository as part of the Arithmetic unit tests . When running the unit test for a specifier the example data is gathered and displayed in the Test Output after a successful test run. Each format specifier is attempted for the signed integers (SByte, Int16, Int32, Int64), unsigned integers (Byte, UInt16, UInt32, UInt64) and floating-point (Single/Double) number types. Negative numbers are not attempted for unsigned integer types (n/a will appear), and the value must be within the range of the integer type (i.e. must be between -128 and +128 for SByte) otherwise n/a will appear. The Decimal and Hexadecimal types ONLY support integer number types. For all of the examples both upper and lower case versions of the specifier are tested, however only lower case g and x have any effect on the output. D-Decimal Decimal Format Specifier Value Format SByte Int16 Int32 Int64 Byte UInt16 UInt32 UInt64 123 D 123 123 123 123 123 123 123 123 123 d 123 123 123 123 123 123 123 123 129 D n/a 129 129 129 129 129 129 129 129 d n/a 129 129 129 129 129 129 129 -129 D n/a -129 -129 -129 n/a n/a n/a n/a -129 d n/a -129 -129 -129 n/a n/a n/a n/a 128 D n/a 128 128 128 128 128 128 128 128 d n/a 128 128 128 128 128 128 128 -128 D -128 -128 -128 -128 n/a n/a n/a n/a -128 d -128 -128 -128 -128 n/a n/a n/a n/a -128 D2 -128 -128 -128 -128 n/a n/a n/a n/a -128 d2 -128 -128 -128 -128 n/a n/a n/a n/a 1234 D2 n/a 1234 1234 1234 n/a 1234 1234 1234 1234 d2 n/a 1234 1234 1234 n/a 1234 1234 1234 -1234 D n/a -1234 -1234 -1234 n/a n/a n/a n/a -1234 d n/a -1234 -1234 -1234 n/a n/a n/a n/a 1234 D6 n/a 001234 001234 001234 n/a 001234 001234 001234 1234 d6 n/a 001234 001234 001234 n/a 001234 001234 001234 -1234 D6 n/a -001234 -001234 -001234 n/a n/a n/a n/a -1234 d6 n/a -001234 -001234 -001234 n/a n/a n/a n/a F-Fixed-point Fixed-point Format Specifier Value Format SByte Int16 Int32 Int64 Byte UInt16 UInt32 UInt64 Single Double 123 F 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123 f 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 129 F n/a 129.00 129.00 129.00 129.00 129.00 129.00 129.00 129.00 129.00 129 f n/a 129.00 129.00 129.00 129.00 129.00 129.00 129.00 129.00 129.00 -129 F n/a -129.00 -129.00 -129.00 n/a n/a n/a n/a -129.00 -129.00 -129 f n/a -129.00 -129.00 -129.00 n/a n/a n/a n/a -129.00 -129.00 128 F n/a 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128 f n/a 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128 F4 n/a 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128 f4 n/a 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 -128 F -128.00 -128.00 -128.00 -128.00 n/a n/a n/a n/a -128.00 -128.00 -128 f -128.00 -128.00 -128.00 -128.00 n/a n/a n/a n/a -128.00 -128.00 -128 F2 -128.00 -128.00 -128.00 -128.00 n/a n/a n/a n/a -128.00 -128.00 -128 f2 -128.00 -128.00 -128.00 -128.00 n/a n/a n/a n/a -128.00 -128.00 1234 F2 n/a 1234.00 1234.00 1234.00 n/a 1234.00 1234.00 1234.00 1234.00 1234.00 1234 f2 n/a 1234.00 1234.00 1234.00 n/a 1234.00 1234.00 1234.00 1234.00 1234.00 -1234 F n/a -1234.00 -1234.00 -1234.00 n/a n/a n/a n/a -1234.00 -1234.00 -1234 f n/a -1234.00 -1234.00 -1234.00 n/a n/a n/a n/a -1234.00 -1234.00 1234 F6 n/a 1234.000000 1234.000000 1234.000000 n/a 1234.000000 1234.000000 1234.000000 1234.000000 1234.000000 1234 f6 n/a 1234.000000 1234.000000 1234.000000 n/a 1234.000000 1234.000000 1234.000000 1234.000000 1234.000000 -1234 F6 n/a -1234.000000 -1234.000000 -1234.000000 n/a n/a n/a n/a -1234.000000 -1234.000000 -1234 f6 n/a -1234.000000 -1234.000000 -1234.000000 n/a n/a n/a n/a -1234.000000 -1234.000000 123.78 F3 n/a n/a n/a n/a n/a n/a n/a n/a 123.780 123.780 123.78 f3 n/a n/a n/a n/a n/a n/a n/a n/a 123.780 123.780 123.78 F1 n/a n/a n/a n/a n/a n/a n/a n/a 123.8 123.8 123.78 f1 n/a n/a n/a n/a n/a n/a n/a n/a 123.8 123.8 1234.8999 F3 n/a n/a n/a n/a n/a n/a n/a n/a 1234.900 1234.900 1234.8999 f3 n/a n/a n/a n/a n/a n/a n/a n/a 1234.900 1234.900 G-General General Format Specifier Value Format SByte Int16 Int32 Int64 Byte UInt16 UInt32 UInt64 Single Double 123 G 123 123 123 123 123 123 123 123 123 123 123 g 123 123 123 123 123 123 123 123 123 123 129 G n/a 129 129 129 129 129 129 129 129 129 129 g n/a 129 129 129 129 129 129 129 129 129 -129 G n/a -129 -129 -129 n/a n/a n/a n/a -129 -129 -129 g n/a -129 -129 -129 n/a n/a n/a n/a -129 -129 128 G n/a 128 128 128 128 128 128 128 128 128 128 g n/a 128 128 128 128 128 128 128 128 128 128 G4 n/a 128 128 128 128 128 128 128 128 128 128 g4 n/a 128 128 128 128 128 128 128 128 128 -128 G -128 -128 -128 -128 n/a n/a n/a n/a -128 -128 -128 g -128 -128 -128 -128 n/a n/a n/a n/a -128 -128 -128 G2 -1.3E+02 -1.3E+02 -1.3E+02 -1.3E+02 n/a n/a n/a n/a -1.3E+02 -1.3E+02 -128 g2 -1.3e+02 -1.3e+02 -1.3e+02 -1.3e+02 n/a n/a n/a n/a -1.3e+02 -1.3e+02 1234 G2 n/a 1.2E+03 1.2E+03 1.2E+03 n/a 1.2E+03 1.2E+03 1.2E+03 1.2E+03 1.2E+03 1234 g2 n/a 1.2e+03 1.2e+03 1.2e+03 n/a 1.2e+03 1.2e+03 1.2e+03 1.2e+03 1.2e+03 -1234 G n/a -1234 -1234 -1234 n/a n/a n/a n/a -1234 -1234 -1234 g n/a -1234 -1234 -1234 n/a n/a n/a n/a -1234 -1234 1234 G6 n/a 1234 1234 1234 n/a 1234 1234 1234 1234 1234 1234 g6 n/a 1234 1234 1234 n/a 1234 1234 1234 1234 1234 -1234 G6 n/a -1234 -1234 -1234 n/a n/a n/a n/a -1234 -1234 -1234 g6 n/a -1234 -1234 -1234 n/a n/a n/a n/a -1234 -1234 123.78 G3 n/a n/a n/a n/a n/a n/a n/a n/a 124 124 123.78 g3 n/a n/a n/a n/a n/a n/a n/a n/a 124 124 123.7841 G5 n/a n/a n/a n/a n/a n/a n/a n/a 123.78 123.78 123.7841 g5 n/a n/a n/a n/a n/a n/a n/a n/a 123.78 123.78 123.7851 G5 n/a n/a n/a n/a n/a n/a n/a n/a 123.79 123.79 123.7851 g5 n/a n/a n/a n/a n/a n/a n/a n/a 123.79 123.79 123.78 G5 n/a n/a n/a n/a n/a n/a n/a n/a 123.78 123.78 123.78 g5 n/a n/a n/a n/a n/a n/a n/a n/a 123.78 123.78 123.78 G4 n/a n/a n/a n/a n/a n/a n/a n/a 123.8 123.8 123.78 g4 n/a n/a n/a n/a n/a n/a n/a n/a 123.8 123.8 1234.8999 G5 n/a n/a n/a n/a n/a n/a n/a n/a 1234.9 1234.9 1234.8999 g5 n/a n/a n/a n/a n/a n/a n/a n/a 1234.9 1234.9 1234.8999 G6 n/a n/a n/a n/a n/a n/a n/a n/a 1234.9 1234.9 1234.8999 g6 n/a n/a n/a n/a n/a n/a n/a n/a 1234.9 1234.9 1234.8999 G7 n/a n/a n/a n/a n/a n/a n/a n/a 1234.9 1234.9 1234.8999 g7 n/a n/a n/a n/a n/a n/a n/a n/a 1234.9 1234.9 -1234.901 G7 n/a n/a n/a n/a n/a n/a n/a n/a -1234.901 -1234.901 -1234.901 g7 n/a n/a n/a n/a n/a n/a n/a n/a -1234.901 -1234.901 N-Number Number Format Specifier Value Format SByte Int16 Int32 Int64 Byte UInt16 UInt32 UInt64 Single Double 123 N 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123 n 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 123.00 129 N n/a 129.00 129.00 129.00 129.00 129.00 129.00 129.00 129.00 129.00 129 n n/a 129.00 129.00 129.00 129.00 129.00 129.00 129.00 129.00 129.00 -129 N n/a -129.00 -129.00 -129.00 n/a n/a n/a n/a -129.00 -129.00 -129 n n/a -129.00 -129.00 -129.00 n/a n/a n/a n/a -129.00 -129.00 128 N n/a 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128 n n/a 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128.00 128 N4 n/a 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128 n4 n/a 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 128.0000 -128 N -128.00 -128.00 -128.00 -128.00 n/a n/a n/a n/a -128.00 -128.00 -128 n -128.00 -128.00 -128.00 -128.00 n/a n/a n/a n/a -128.00 -128.00 -128 N2 -128.00 -128.00 -128.00 -128.00 n/a n/a n/a n/a -128.00 -128.00 -128 n2 -128.00 -128.00 -128.00 -128.00 n/a n/a n/a n/a -128.00 -128.00 1234 N2 n/a 1,234.00 1,234.00 1,234.00 n/a 1,234.00 1,234.00 1,234.00 1,234.00 1,234.00 1234 n2 n/a 1,234.00 1,234.00 1,234.00 n/a 1,234.00 1,234.00 1,234.00 1,234.00 1,234.00 -1234 N n/a -1,234.00 -1,234.00 -1,234.00 n/a n/a n/a n/a -1,234.00 -1,234.00 -1234 n n/a -1,234.00 -1,234.00 -1,234.00 n/a n/a n/a n/a -1,234.00 -1,234.00 1234 N6 n/a 1,234.000000 1,234.000000 1,234.000000 n/a 1,234.000000 1,234.000000 1,234.000000 1,234.000000 1,234.000000 1234 n6 n/a 1,234.000000 1,234.000000 1,234.000000 n/a 1,234.000000 1,234.000000 1,234.000000 1,234.000000 1,234.000000 -1234 N6 n/a -1,234.000000 -1,234.000000 -1,234.000000 n/a n/a n/a n/a -1,234.000000 -1,234.000000 -1234 n6 n/a -1,234.000000 -1,234.000000 -1,234.000000 n/a n/a n/a n/a -1,234.000000 -1,234.000000 1234.567 N2 n/a n/a n/a n/a n/a n/a n/a n/a 1,234.57 1,234.57 1234.567 n2 n/a n/a n/a n/a n/a n/a n/a n/a 1,234.57 1,234.57 -1234.567 N2 n/a n/a n/a n/a n/a n/a n/a n/a -1,234.57 -1,234.57 -1234.567 n2 n/a n/a n/a n/a n/a n/a n/a n/a -1,234.57 -1,234.57 123456.78 N2 n/a n/a n/a n/a n/a n/a n/a n/a 123,456.78 123,456.78 123456.78 n2 n/a n/a n/a n/a n/a n/a n/a n/a 123,456.78 123,456.78 1234567.1210 N2 n/a n/a n/a n/a n/a n/a n/a n/a 1,234,567.12 1,234,567.12 1234567.1210 n2 n/a n/a n/a n/a n/a n/a n/a n/a 1,234,567.12 1,234,567.12 X-Hexadecimal Hexadecimal Format Specifier Value Format SByte Int16 Int32 Int64 Byte UInt16 UInt32 UInt64 0 X2 00 00 00 00 00 00 00 00 0 x2 00 00 00 00 00 00 00 00 +0 X 0 0 0 0 0 0 0 0 +0 x 0 0 0 0 0 0 0 0 -0 X 0 0 0 0 0 0 0 0 -0 x 0 0 0 0 0 0 0 0 12 X C C C C C C C C 12 x c c c c c c c c 12 X2 0C 0C 0C 0C 0C 0C 0C 0C 12 x2 0c 0c 0c 0c 0c 0c 0c 0c 127 X 7F 7F 7F 7F 7F 7F 7F 7F 127 x 7f 7f 7f 7f 7f 7f 7f 7f 129 X n/a 81 81 81 81 81 81 81 129 x n/a 81 81 81 81 81 81 81 128 X4 n/a 0080 0080 0080 0080 0080 0080 0080 128 x4 n/a 0080 0080 0080 0080 0080 0080 0080 1234 X n/a 4D2 4D2 4D2 n/a 4D2 4D2 4D2 1234 x n/a 4d2 4d2 4d2 n/a 4d2 4d2 4d2 1234 X6 n/a 0004D2 0004D2 0004D2 n/a 0004D2 0004D2 0004D2 1234 x6 n/a 0004d2 0004d2 0004d2 n/a 0004d2 0004d2 0004d2 -127 X 81 FF81 FFFFFF81 FFFFFFFFFFFFFF81 n/a n/a n/a n/a -127 x 81 ff81 ffffff81 ffffffffffffff81 n/a n/a n/a n/a -128 X 80 FF80 FFFFFF80 FFFFFFFFFFFFFF80 n/a n/a n/a n/a -128 x 80 ff80 ffffff80 ffffffffffffff80 n/a n/a n/a n/a -128 X4 0080 FF80 FFFFFF80 FFFFFFFFFFFFFF80 n/a n/a n/a n/a -128 x4 0080 ff80 ffffff80 ffffffffffffff80 n/a n/a n/a n/a -129 X n/a FF7F FFFFFF7F FFFFFFFFFFFFFF7F n/a n/a n/a n/a -129 x n/a ff7f ffffff7f ffffffffffffff7f n/a n/a n/a n/a -1234 X n/a FB2E FFFFFB2E FFFFFFFFFFFFFB2E n/a n/a n/a n/a -1234 x n/a fb2e fffffb2e fffffffffffffb2e n/a n/a n/a n/a -1234 X6 n/a 00FB2E FFFFFB2E FFFFFFFFFFFFFB2E n/a n/a n/a n/a -1234 x6 n/a 00fb2e fffffb2e fffffffffffffb2e n/a n/a n/a n/a"
  },
  "content/architecture/thread-execution.html": {
    "href": "content/architecture/thread-execution.html",
    "title": "Thread execution in nanoFramework | nanoFramework Documentation",
    "keywords": "Thread execution in nanoFramework About this document This document describes how thread execution works with the .NET nanoFramework CLR. Introduction to Threads Oversimplifying it a .NET nanoFramework thread is (in terms of execution) basically a stream of IL instructions that are translated by the interpreter making things happen. This execution occurs in a cooperative fashion, meaning that a thread is allowed to run for a certain amount of time, after that it stops and the execution is passed to the next thread that meets the required conditions to run. Thread execution The .NET nanoFramework CLR and interpreter run on a RTOS thread. When the RTOS works in a cooperative fashion (opposed to a preemptive fashion) the thread is expected to relinquish control to the RTOS so that context switching can occur and the next RTOS thread is given the opportunity to run. This context switching in .NET nanoFramework is expected to occur after each time slot that a .NET nanoFramework thread is allowed to run. It's up to the target board developer to provide the correct way to relinquish the control of the threads execution according to the RTOS running beneath. This may not be required by all RTOS's. For example when by default the RTOS works in a preemptive fashion, the thread execution occurs in a round robin fashion among the various RTOS threads. The execution relinquish to the underlying RTOS, so that the 'next' RTOS thread and other RTOS services can run is performed inside the Events_WaitForEvents function that is implemented for each target platform. For the current version of .NET nanoFramework this is accomplished in the following ways: For targets running with ChibiOS (a CMSIS compliant RTOS) a call to osDelay(10) is sufficient and allows the kernel to run all the other threads with the same (or higher) priority. For the ESP32 target - which is running with FreeRTOS - a call to vTaskDelay(0) is sufficient and allows the kernel to run all the other threads with the same (or higher) priority."
  },
  "content/architecture/unit-test.html": {
    "href": "content/architecture/unit-test.html",
    "title": "Unit Test for nanoFramework architecture | nanoFramework Documentation",
    "keywords": "Unit Test for nanoFramework architecture This document gives explanation on how the nanoFramework Unit Test platform is build and how everything is working together. The all up architecture can be described like that: nanoFramework test platform is relaying on Visual Studio test platform (vstest) and uses the concept of Adapter. You'll fine more details information here . In short, vstest offers extensibility for an integration into Visual Studio but as well as in command line for capacity to run on pipelines. We've been building a specific component, nanoFramework.TestAdapter for this purpose. It does implement the 2 interfaces described into the detailed information and a third one to use specific parameters like time out, if the tests has to run on real hardware or in the Win32 nanoCLR. The architecture is the exact same if the tests are on the Win32 nanoCLR or done on real hardware. The only difference is the output console which in the case of a real hardware is pulled from the serial debug port. One of the interface is called ITestDiscoverer which is used by the Visual Studio to gather the possible tests. vstest will call the adapter for any build that is triggered and pass the dll or exe generated matching specific build condition (as so far we don't have TFM, we're using a hack and target Framework40). Our nanoFramework TestAdapter is then parsing the directories to find the nfproj, parsing the cs files looking at the specific Test attributes defined for nanoFramework. A list is built out of this and passed back. This hack is done thru a file called with the extension .runsettings and the minium elements you need are (not: IsRealHardware to false to run on Win32 nanoCLR, true for a real hardware): <?xml version=\"1.0\" encoding=\"utf-8\"?> <RunSettings> <!-- Configurations that affect the Test Framework --> <RunConfiguration> <MaxCpuCount>1</MaxCpuCount> <ResultsDirectory>.\\TestResults</ResultsDirectory><!-- Path relative to solution directory --> <TestSessionTimeout>120000</TestSessionTimeout><!-- Milliseconds --> <TargetFrameworkVersion>Framework40</TargetFrameworkVersion> </RunConfiguration> <nanoFrameworkAdapter> <Logging>None</Logging> <IsRealHardware>True</IsRealHardware> </nanoFrameworkAdapter> </RunSettings> Visual Studio will then display them. In this case, they are still not run once discovered except if you've selected this option. When you start building them, another interface is triggered ITestExecutor . In the case you're running in the context of Visual Studio, the list of test (individual or full list) is passed and this is where the nanoFramework.nanoCLR.Win32.exe is launched as a process passing the nanoFramework.UnitTestLauncher.pe , mscorlib.pe , nanoFramework.TestFramework.pe and of course you own testlibrary to the executable. The nanoFramework Unit Test launcher will then use reflection to load the test assembly and execute the tests with first the Setup ones, then the TestMethod and finally the Cleanup ones. The output of this process is redirected to the TestAdapter which then parse it. Important note: the UnitTestLauncher must be build and deploy in debug! If not, it will never be able to output anything in the console. To run the test on a real hardware, it's just about adding an entry line into the runsettings file like above. Once the tests finishes to run, the status is returned. Simple string output with the status of the test, the name of the method and the time it run or the exception. Test passed: MethodName, 1234 or Test failed: MethodName, Detailed exception . This is passed back to vstest and then displayed into Visual Studio. If the vstest.console.exe is used, the executor will be just a list of dll and exe, the discovery phase is called internally and a list of tests and their status is then returned using the same principal. Distributing everything in a transparent way NuGet is our best friend! We've package all what you need in there! The Win32 nanoCLR executable, the mscorelib and of course the Unit Test launcher and the test Framework. If you add it to your project, you'll just need to add a .runsettings file into your project directory with the elements described in the previous section. We've been building a Unit Test nanoFramewok project as well in Visual Studio, that's the easiest way! It will add automatically the NuGet and the .runsettings to the project. Where to look next The current status and information about usage is available under Unit Test main menu entry."
  },
  "content/architecture/wire-protocol.html": {
    "href": "content/architecture/wire-protocol.html",
    "title": "Wire Protocol | nanoFramework Documentation",
    "keywords": "Wire Protocol About this document This document describes the Wire Protocol used by .NET nanoFramework for debug and the booter stage. The protocol follows the implementation of the .NET Micro Framework Wire Protocol. The intention is to review it later in order to improve and simplify it. Wire Protocol Message The message basic structure is comprised by: Signature which is basically a marker to detect the start of a new message packet. Has a fixed length. Header with several fields to cary packet sequence, flags, commands, CRC, etc. Has a fixed length. CRC32 of header (for verification calculation this CRC32 field has to be zeroed). CRC32 of payload, when it exists (for verification calculation this CRC32 field has to be zeroed). Command code. Sequence number of the message. Sequence reply. Carries the sequence number of the message that the message is a reply to. Flags. Size of the payload. Payload for carrying data. Optional and its size is variable. You can check the details on `WireProtocol.h](@ src\\CLR\\WireProtocol\\WireProtocol.h) Data channels Currently .NET nanoFramework Wire Protocol supports only serial channels. The plan is to add support for USB (using CDC class device) and TCP. To ease the port to new HAL/platforms the code is architecture so that only minimal changes are required to add support for new implementations. Receiving and transmitting data The code is architecture to receive and transmit data over a serial stream. Preferably (and to use the reference implementation provided without much changes) the interface/API of the serial stream should: Allow checking if there is data available for reading. Allow reading sequentially (FIFO fashion) the input stream for a definite number of bytes. Having a timeout for the read operation is ideal to prevent bad/incomplete read operations. Allow writing to the transmit stream a definite number of bytes. Ideally in a non-blocking fashion to prevent bad/incomplete write operations. Receiver workflow Follows a high-level description on how the Wire Protocol component works. RTOS thread - ReceiverThread(...) in WireProtocol_ReceiverThread (@ src\\CLR\\WireProtocol\\WireProtocol_ReceiverThread.c) - that loops continuously checking for available data in the receiving channel. On available data the reception of the message is initialized (WP_Message_Initialize) and prepared (WP_Message_PrepareReception) so the reception can actually occur and be processed by calling WP_Message_Process. During the reception states the input stream is read ( WP_ReceiveBytes(...) in WireProtocol_HAL_Interface (@ src\\CLR\\WireProtocol\\WireProtocol_HAL_Interface.c)) so the message header is received and it's integrity checked. Follows the reception and the integrity check of the payload, if there is any. After a successful reception of the header (and payload, if any) the Process state machine in WireProtocol_Message (@ src\\CLR\\WireProtocol\\WireProtocol_Message.c)) reaches the ReceiveState_CompletePayload state and calls the ProcessPayload(...) function. Inside ProcessPayload(...) the lookup table for the commands that are implemented is searched and, if the command is found, the respective handler is called. According to the command its processing can require extra processing or gathering data. Invariably the handler execution end with a call to ReplyToCommand(...) where the reply is sent back to the host device. When executing ReplyToCommand(...) the output stream is written ( WP_TransmitMessage(...) in WireProtocol_HAL_Interface (@ src\\CLR\\WireProtocol\\WireProtocol_HAL_Interface.c)) with the reply message. Wire Protocol Commands Processing a command is carried in a handler function. The collection of the commands that are implemented is listed in c_Lookup_Request . This lookup structure is basically an array with the command code along with a pointer to the respective handler. It resides in WireProtocol_App_Interface.c . The actual command implementation resides in WireProtocol_Commands.c . How to add support for a new command There are two groups of commands: monitor commands and debug commands. In order to add a new monitor command you have to: Add the function declaration and any required structure and/or type definition in WireProtocol_MonitorCommands.h (@ src\\CLR\\WireProtocol\\WireProtocol_MonitorCommands.h) Add a weak prototype in WireProtocol_MonitorCommands.c (@ src\\CLR\\WireProtocol\\WireProtocol_MonitorCommands.c) The actual code for the command handler function (and any required helper functions or extra processing) is added at target level. For the reference implementation for nanoBooter in ChibiOS check WireProtocol_MonitorCommands.c (@ targets\\CMSIS-OS\\ChibiOS\\nanoBooter\\WireProtocol_MonitorCommands.c) To add the command to the collection of the supported monitor commands un-comment or add the respective line in the c_Lookup_Request variable in WireProtocol_App_Interface.c for both nanoBooter (@ targets\\CMSIS-OS\\ChibiOS\\nanoBooter\\WireProtocol_MonitorCommands.c) and/or nanoCLR] (@ targets\\CMSIS-OS\\ChibiOS\\nanoCLR\\WireProtocol_MonitorCommands.c). Because this declaration uses a macro to add the declaration of a command, make sure the existing naming pattern is strictly followed. This architecture tries to bring flexibility by making it easy to have different monitor commands for nanoBooter and nanoCLR and also having them implemented in different ways, if necessary. To ease code portability from .NET Micro Framework code base and maintain an understandable implementation the naming has been maintained or minimally adapted from the original C++ code. Try to follow this as much as possible when implementing new commands or porting the original C++ code to C. How to add support for new channels Current Wire Protocol implementation has support for transmission over serial port (UART/USART) and serial over USB (USB CDC device class). Support for TCP channel is planned at a later stage. When adding support for new channels the functions WP_ReceiveBytes(...) and WP_TransmitMessage(...) in WireProtocol_HAL_Interface.c are the ones that need to be reworked. This implementation is target and board specific so it resides in the board folder. Check the reference implementation for the ST_STM32F4_DISCOVERY board here (@ targets\\CMSIS-OS\\ChibiOS\\ST_STM32F4_DISCOVERY\\common\\WireProtocol_HAL_Interface.c). On both, the relevant part is that they read/write to a serial stream a specified number of bytes. Preferably non blocking calls with a timeout. Please read the comments inside of each of those functions for the details. The last piece that needs to be adjusted is the code inside the ReceiverThread(...) which is the RTOS thread that is running the Wire Protocol component. That thread is basically a loop with a wait state were the checks for existing data to be read on the input stream. On data available the WP_Message_Process(...) function is called. HAL interface The Wire Protocol requires the following functions in order to interface with the HAL. Weak implementations of each function are part of the core code. WP_TransmitMessage(...) in WireProtocol_HAL_Interface.c (@ src\\CLR\\WireProtocol\\WireProtocol_HAL_Interface.c) WP_ReceiveBytes(...) in WireProtocol_HAL_Interface.c (@ src\\CLR\\WireProtocol\\WireProtocol_HAL_Interface.c) WP_CheckAvailableIncomingData(...) in WireProtocol_HAL_Interface.c (@ src\\CLR\\WireProtocol\\WireProtocol_HAL_Interface.c) An implementation for an STM32F4_DISCOVERY board with ChibiOS (including its HAL) is provided as a reference. Please check it at WireProtocol_HAL_Interface (@ targets\\CMSIS-OS\\ChibiOS\\ST_STM32F4_DISCOVERY\\common\\WireProtocol_HAL_Interface.c). When porting .NET nanoFramework to another RTOS or HAL follow the reference implementation to ease the port work. Application interface The Wire Protocol requires the following functions in order to interface with it's client app. Weak implementations of each function are part of the core code. WP_App_ProcessHeader(...) in WireProtocol_App_Interface.c () WP_App_ProcessPayload(...) in WireProtocol_App_Interface.c () Actual implementations of these are to be provided by nanoBooter and nanoCLR. Please check the reference implementation for ChibiOS at WireProtocol_App_Interface.c (@ targets\\CMSIS-OS\\ChibiOS\\nanoBooter\\WireProtocol_App_Interface.c). Debugging Wire Protocol communications To ease debugging of Wire Protocol sessions there are available a set of CMake options to adjust the output of the Wire Protocol state machine and TX/Rx operations. The available options are: NF_WP_TRACE_ERRORS: Enable error tracing. NF_WP_TRACE_HEADERS: Enable packet headers tracing. NF_WP_TRACE_STATE: Enable tracing of the current state of the Wire Protocol sate machine. NF_WP_TRACE_NODATA: Enable tracing of empty or incomplete packets. NF_WP_TRACE_ALL: Enable all the options above. In case this setting is chosen it takes precedence over all the other and replaces when on. CRC32 validations In order to ensure Wire Protocol communications integrity the message header and payload have each a CRC32 field which is filled in with the CRC32 hash of the respective section. This allows the receiver to validate the integrity of both the header and the payload. A target can choose not to implement that. The Wire Protocol layer in the debugger is able to automatically handle both situations. To have a target image built without implementing CRC32 validation the option NF_WP_IMPLEMENTS_CRC32=OFF has to be passed to CMake."
  },
  "content/building/build-esp32.html": {
    "href": "content/building/build-esp32.html",
    "title": "How to Build, Flash and Debug the ESP32 nanoCLR on Windows using Visual Code | nanoFramework Documentation",
    "keywords": "How to Build, Flash and Debug the ESP32 nanoCLR on Windows using Visual Code About this document This document describes how to build the required images for .NET nanoFramework for ESP32 targets. The build is based on CMake tool to ease the development in all major platforms. Using Dev Container If you want a simple, efficient way, we can recommend you to use Dev Container to build your image. This has few requirements as well like Docker Desktop and Remote Container extension in VS Code but it is already all setup and ready to run! If you prefer to install all the tools needed on your Windows machine, you should continue this tutorial. Prerequisites You'll need: Visual Studio Code .Additional extensions and setup steps follow below. Set up Visual Code Visual Studio Code Extensions . C/C++ - C/C++ IntelliSense, debugging, and code browsing (by Microsoft) . CMake Tools - Extended CMake support in Visual Studio Code (by Microsoft) CMake (Minimum required version is 3.15) Python 3.6.8 Required for uploading the nanoCLR to the ESP32. Ensure the Windows default app to open .py files is Python. A build system for CMake to generate the build files to. We recommend Ninja . ESP-IDF Tools . Driver for the USB to UART Bridge. This depends on the ESP32 hardware. After installing it, use Windows Device Manager to determine the COM port as this is needed to complete the setup. Follows the most common drivers (all these are available along with ESP-IDF tools installer): CP210x USB to UART Bridge VCP Drivers used in the standard ESP32 DevKitC. FTDI Virtual COM Port Drivers . Overview - Step 1 : Create a directory structure such as the following: `C:\\nanoFramework` - Step 2 : Download and install Visual Studio Code . - Step 3 : Clone nf-interpreter repository into C:\\nanoFramework\\nf-interpreter . See next section for more info. - Step 4 : Install ESP-IDF Tools by using the installer provided by Espressif. - Step 5 : Review and adjust several JSON files to match your environment (as documented below) - Step 6 : Restart Visual Studio Code (due to json changes) .NET nanoFramework GitHub repo If you intend to change the nanoCLR and create Pull Requests then you will need to fork the nanoFramework/nf-interpreter to your own GitHub repo and clone the forked GitHub repo to your Windows system using an Git client such as Fork or the GitHub Desktop application . The develop branch is the default working branch. When working on a fix or experimenting a new feature you should do it on another branch. See the Contributing guide for specific instructions on the suggested contributing workflow. If you don't intend to make changes to the nanoBooter and nanoCLR, you can clone nanoFramework/nf-interpreter directly from here. Make sure to put this folder high enough on your drive, that you won't trigger long filename issues. CMake does not support filenames in excess of 250 characters. Setting up the build environment After cloning the repo, you need to setup the build environment. You can use the power shell script or follow the step-by-step instructions. Manual install of the build environment (If you already have installed ESP-IDF Tools you can skip this step.) - Step 1 : Install ESP-IDF Tools by using the installer provided by Espressif here . The installer includes all the pre-requisites. - Step 2 : After launching the installer you have to follow the wizard and follow the instruction there. Follows some aspects worth mentioning. - Step 3 : Location of the IDF repository. You can set this to a location of your choosing. After the installer completes, you'll find a git clone of the ESP-IDF at this location. - Step 4 : Location of the IDF toolchain and other tools. The default it's at the user folder. Feel free to change this to another location of your choosing. - Step 5 : At the options screen, know that you don't have to install all the tools there. Follow the recomended option to be able to build .NET nanoFramework. Also note that you may want to install the toolchains only for the chip serie(s) that you're planning to build for. - Step 6 : The install step may prompt you for permission on installing drivers and launch secondary installers. And be aware that it can take a while to complete... - Step 7 : After the installer completes, open a command prompt at the IDF repository location with elevated permisssion and execute the script install . This will hopefully install all the requirements and prerequisites. - Step 8 : Now execute the script export . This will hopefully update the path environement variable of your machine. You can check the success of the operation by opening another cmd prompt and print the content of the path variable. - Step 9 : Calling the above scripts it's not 100% guaranteed to effectivelly install everything and updates the path. This can be because of permission issues, updating the path variable and others. Here's the image of the path on a machine where the update was succesfull so you can compare it. - Step 10 : Also worth checking if the following environment variables have also been setup: IDF_PATH : must point to the location where the ESP-IDF repo was cloned (see step 3. above). IDF_PYTHON_ENV_PATH : must point to Python install location. IDF_TOOLS_PATH : must point to the location where the ESP-IDF tools where installed (see step 3. above). ⚠️ Having the path properly setup it's absolutely mandatory in order to be able to build. ⚠️ Set up Visual Studio Code - Step 1 : Install the extensions: - [C/C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) - [CMake Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools) - Step 2 : Run the PowerShell script Initialize-VSCode.ps1 that's on the install-scripts folder. This will adjust the required settings, build launch configuration for debugging and setup the tasks to ease your developer work. ```ps .\\Initialize-VSCode.ps1 ``` - You can force the environment variables to be updated by adding `-Force` to the command line. - The PowerShell relies on the environment variables described above to properly setup the various VS Code working files. In case you have not used the automated install and the variable are not available you'll have to manually edit `tasks.json`, `launch.json`, `cmake-variants.json` and `settings.json` to replace the relevant paths. **!!mind to always use forward slashes in the paths!!** - More info available on the [Tweaking cmake-variants.TEMPLATE.json](../building/cmake-tools-cmake-variants.md) documentation page. - Step 3 : Save any open files and RESTART VS Code. Have you RESTARTED VS Code? You really have to do it otherwise this won't work. Build nanoCLR - Step 1 : Launch Visual Studio from the repository folder, or load it from the File menu, select Open Folder and browse to the repo folder. VS Code could prompt you asking \"Would you like to configure this project?\". Ignore the prompt as you need to select the build variant first. Next time VS Code open it should load the workspace automatically. - Step 2 : In the status bar at the bottom left, click on the No Kit Selected and select [Unspecified] . - Step 3 : In the status bar at the bottom left, click on the CMake:Debug ESP32_PSRAM_REV0: Ready and select Debug . Wait for it to finish Configuring the project (progress bar shown in right bottom corner). This can take a while the first time. Also note that you should choose the build target that's appropriate for the board that you have. More details on this on the documentation about the available targets here . - Step 4 : In the status bar click Build or hit F7. - Step 5 : Wait for the build to finish with Build finished with exit code 0 output message. - Step 6 : In the build folder you'll find several files: - nanoCLR.bin - nanoCLR.elf - partitions_4mb.elf Note: If there are errors during the build process it is possible to end up with a partial build in the build folder, and the CMake/Ninja build process declaring a successful build despite the .bin targets not being created, and a CMake clean not helping. In this case deleting the contents of the build folder should allow the build to complete once you resolve the issues that cause the original failure. Common Build Issues The above may have some errors if: CMake is not installed properly, not in the PATH or cannot be found for some reason. Ninja is not recognized: check settings.json or your PATH environment variable and restart Visual Studio Code. COMPILATION object file not found: check that your paths don't exceed 140 chars. Put the solution folder high enough on drive. Make sure to 'Build all' first time. Reopen VS Code if you have changed anything on the cmake-variants.json . Clean the build folder by deleting it's contents and restart VS Code. Flash nanoCLR into ESP32 - Step 1 : The third file that gets flashed into the ESP32 is the bootloader.bin which will be located here build/bootloader/bootloader.bin after a successful build. - Step 2 : Connect your development board. - Step 3 : Some ESP32 boards require to be put into \"download mode\". Most don't even need this. Check the documentation for your variant. One of the most common options are: hold down the GPIO0 pin to GND or holding down the respective button during power up. - Step 4 : Download the image to device. - In Visual Studio Code go to menu \"Terminal\" -> \"Run Task\" and select \"Flash nanoCLR to ESP32 from the list. - As an alternative enter the command in command palette: ```cmd Tasks: Run task ``` and if you flash the board for the first time ```cmd Erase ESP32 ``` and then ```cmd Flash nanoCLR to ESP32 ``` It will ask you for the COM port where it's connected. - An other alternative is using [nanoff](../getting-started-guides/getting-started-managed.md#uploading-the-firmware-to-the-board-using-nanofirmwareflasher) tool: ```console nanoff --target ESP32_PSRAM_REV0 --serialport <YourCOMPort> --image nanoCLR.bin --address 0x00010000 ``` - An other alternative would be to use Espressif's own [esptool.py](https://github.com/espressif/esptool) tool: ```console esptool.py --chip auto --port <YourCOMPort> --baud 1500000 --before \"default_reset\" --after \"hard_reset\" write_flash -z --flash_mode \"dio\" --flash_freq \"40m\" --flash_size detect 0x1000 <YourPathTo>/nf-interpreter/build/bootloader/bootloader.bin 0x10000 <YourPathTo>/nf-interpreter/build/nanoCLR.bin 0x8000 <YourPathTo>/nf-interpreter/build/<PartitionFilePassingToYourBoard>.bin ``` Start with a 'Hello World' C# application Watch the video tutorial here and follow the step that should be done in Visual Studio 2017 Community Edition. Skip the steps that describing uploading the nanoCLR into the STM32 Nucleo board. Debugging nanoCLR If you want to debug the nanoCLR code on the ESP32 chip you'll need an JTAG debugging adapter. ESP32 WROVER KIT already includes one. For other boards you can use the Olimex ARM-USB-OCD-H JTAG debugging adapter or a Segger JLink. There are preset configurations for these adapters. You can now debug nanoCLR on the ESP32 by pressing F5 in Visual Studio Code. Notes on JTAG debugging on ESP32 The JTAG connections on ESP32 DEVKITC are: TDI -> GPIO12 TCK -> GPIO13 TMS -> GPIO14 TDO -> GPIO15 TRST -> EN / RST (Reset) GND -> GND See Gojimmypi for description of JTAG connections here . If flashing nanoCLR via a COM port (default), then be aware that you need to disconnect the JTAG to avoid it preventing the bootloader from running, and therefore being unable to reprogram the ESP23. e.g. if you see the following pattern repeating, unplug the USB-OCD-H, and then the programming will proceed. ```txt esptool.py v2.1 Connecting........_____....._____... ``` You may have to add the IRAM_ATTR attribute to a function that you want to debug, so it can be loaded in RAM. When launched the debugger will normally stop at the main task. Its not possible to set a break point on code that is not yet loaded so either step down to a point that it is loaded or temporarily set the method with the IRAM_ATTR attribute. For more information on JTAG debugging see Espressif documentation . Debugging nanoCLR without special hardware If you do not have access to any special hardware required for debug methods mentioned above you still may use some old-school technique: just place some temporary code at interesting places to get the required information. Using steps below you will get that information in Visual Studio's standard debug output window. Certainly Visual Studio must be debugging something to have that window in working state. So this hack will work only in cases when you want to debug a nanoCLR code which can be executed via managed code. Step 1 : Write some managed code which results in a nanoCLR call executing the code you are interested in. Step 2 : Choose one or more places in nanoCLR code where you want to know something. e.g.: What is the value of a variable? Which part of an if-else statement gets executed? Step 3 : Put the following temporary code there: ```cpp { char temporaryStringBuffer[64]; int realStringSize=snprintf(temporaryStringBuffer, sizeof(temporaryStringBuffer), \"interestingValue: %d\\r\\n\", interestingValue); CLR_EE_DBG_EVENT_BROADCAST( CLR_DBG_Commands_c_Monitor_Message, realStringSize, temporaryStringBuffer, WP_Flags_c_NonCritical | WP_Flags_c_NoCaching ); } ``` Or simply: ```cpp CLR_EE_DBG_EVENT_BROADCAST( CLR_DBG_Commands_c_Monitor_Message, 12, \"Hello World!\", WP_Flags_c_NonCritical | WP_Flags_c_NoCaching ); ``` Step 4 : The boring part: rebuild and re-flash firmware and your program. Step 5 : Start debugging in Visual Studio and keep eye on it's debug output window. You will get your messages there when the related temporary code gets executed! Step 6 : Iterate steps 2-5 till you find out what you were interested in. Step 7 : Do not forget to remove all those temporary code blocks before you accidentally commit it!"
  },
  "content/building/build-instructions.html": {
    "href": "content/building/build-instructions.html",
    "title": "Building .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Building .NET nanoFramework .NET nanoFramework build system is based in CMake. Please read the instructions specific to each target series. STM32 ESP32 NXP Using Dev Container About this document This document describes how to build the required images for .NET nanoFramework to be flashed in a SoC or MCU. The build is based on CMake tool to ease the development in all major platforms. Using Dev Container If you want a simple, efficient way, we can recommend you to use Dev Container to build your image. This has few requirements as well like Docker Desktop and Remote Container extension in VS Code but it is already all setup and ready to run! If you prefer to install all the tools needed on your Windows machine, you should continue this tutorial. Prerequisites You'll need: GNU ARM Embedded Toolchain CMake (Minimum required version is 3.7) A build system for CMake to generate the build files to. If you have Visual Studio (full version) you can use the included NMake. A nice alternative is Ninja . This is lightweight build system, designed for speed and it works on Windows and Linux machines. See here how to setup Ninja to build .NET nanoFramework . If you are using VS Code as your development platform we suggest that you use the CMake Tools extension. This will allow you to run the builds without leaving VS Code. Visual Studio Code CMake Extension CMake Tools Extension In case you specify an RTOS and you want its source to be downloaded from the official repository, you'll need: For FreeRTOS a SVN client. Tortoise SVN seems to be a popular choice for Windows machines. For ChibiOS a Git client. GitHub Desktop seems to be a popular choice for Windows machines. Preparation It's highly recommended that run the build outside the source tree. This prevents you from cluttering the source tree with CMake artifacts, temporary files etc. In fact this is enforced and checked by the CMake script. In case you need to clean up or start a fresh build all you have to do is simply delete the contents of the build directory. As a suggestion we recommend that you create a directory named build in the repository root and run CMake from there. Build a .NET nanoFramework image The build script accepts the a number of parameters (some of them are mandatory). Please check the details about each parameter here . Note 1: The RTOS currently supported (except for ESP32 target) is ChibiOS. If no source path is specified the source files will be downloaded from nanoFramework GitHub fork. Note 2: the very first build will take more or less time depending on the download speed of the Internet connection of the machine were the build is running. This is because the source code of the RTOS of your choice will be downloaded from its repository. On the subsequent builds this won't happen. You can specify any generator that is supported in the platform where you are building. For more information on this check CMake documentation here . Building from the command prompt If you are building from the command prompt, just go to your build directory and run CMake from there with the appropriate parameters. The following is a working example: cmake \\ -DTOOLCHAIN_PREFIX=\"E:/GNU_Tools_ARM_Embedded/5_4_2016q3\" \\ -DCMAKE_TOOLCHAIN_FILE=CMake/toolchain.arm-none-eabi.cmake \\ -DCHIBIOS_BOARD=ST_NUCLEO_F091RC \\ -DTARGET_SERIES=STM32F0xx \\ -DNF_FEATURE_DEBUGGER=TRUE \\ -DAPI_Windows.Devices.Gpio=ON \\ -DNF_FEATURE_RTC=ON \\ -G \"NMake Makefiles\" ../ This will call CMake (on your build directory that is assumed to be under the repository root) specifying the location of the toolchain install, that the target board is named ST_NUCLEO_F091RC, that STM32F0xx is the series name that it belongs to, debugger feature is to be included, Windows.Devices.Gpio API is to be included and that the build files suitable for NMake are to be generated. Another example: cmake \\ -DTOOLCHAIN_PREFIX=\"E:/GNU_Tools_ARM_Embedded/5_4_2016q3\" \\ -DCMAKE_TOOLCHAIN_FILE=CMake/toolchain.arm-none-eabi.cmake \\ -DCHIBIOS_SOURCE=E:/GitHub/ChibiOS \\ -DCHIBIOS_BOARD=ST_NUCLEO144_F746ZG \\ -DTARGET_SERIES=STM32F7xx \\ -DNF_FEATURE_DEBUGGER=TRUE \\ -DAPI_Windows.Devices.Gpio=ON \\ -DNF_FEATURE_RTC=ON \\ -G \"NMake Makefiles\" ../ This will call CMake (on your build directory that is assumed to be under the repository root) specifying the location of the toolchain install, specifying that ChibiOS sources to be used are located in the designated path (mind the forward slash and no ending slash), that the target board is named ST_NUCLEO144_F746ZG, that STM32F7xx is the series name that it belongs to, debugger feature is to be included, Windows.Devices.Gpio API is to be included, RTC is used and that the build files suitable for NMake are to be generated. After successful completion you'll have the build files ready to be used in the target build tool. Building from VS Code (using CMake Tools extension) We've added the required files and configurations to help you launch your build from VS Code. Follows a brief explanation on the files you might want to tweak. settings.json (inside .vscode folder) here you can change the generator that CMake uses to generate the build. The default is \"cmake.generator\": \"NMake Makefiles\" . The recommendation is to use Ninja as the build tool because it's way faster than NMake. You'll also need to set the use of CMake Server to true, like this: \"cmake.useCMakeServer\" : true . launch.json (inside .vscode folder) here you can set up your launch configurations, such as gdb path or OpenOCD configuration. We've made available Gists with launch.json for several of the reference targets. Grab yours from here . ⚠️ Remember to update paths and other preferences according to your setup and machine configuration. 😉 cmake-variants.json (at the repository root) here you can add several build flavors. You can even add variants to each one. Check the documentation extension here . We've made available Gists with cmake-variants.json for each of the reference targets. Grab yours from here . ⚠️ Remember to update paths and other preferences according to your setup and machine configuration. 😉 To launch the build in VS Code check the status bar at the bottom. Select the build flavor and then click the build button (or hit F7). .NET nanoFramework build deliverables After a successful build you can find the .NET nanoFramework image files in the build directory. Those are: nanoBooter image (not available for ESP32 builds): nanoBooter.bin (raw binary format) nanoBooter.hex (Intel hex format) nanoBooter.s19 (Motorola S-record format, equivalent to srec) nanoBooter.lst (source code listing intermixed with disassembly) nanoBooter.map (image map) nanoCLR image: nanoCLR.bin (raw binary format) nanoCLR.hex (Intel hex format) nanoCLR.s19 (Motorola S-record format, equivalent to srec) nanoCLR.lst (source code listing intermixed with disassembly) nanoCLR.map (image map) BUILD_VERSION matching When working with self built nanoCLR you may get the following message while deploying a new app: Found assemblies mismatches when checking for deployment pre-check. This is because the BUILD_VERSION value of your custom built nanoCLR doesn't match the one nanoframework.CoreLibrary expects. BUILD_VERSION can be set cmake-variants.json. The value defaults to \"0.9.99.999\" . Change that to the one you need at the moment, like \"1.6.1.28\" . Don't forget to: make this change under appropriate target block, as described here make sure you understood that VSCode have to be reloaded to these json changes have effect. make sure you understood that the build folder have to be removed to these changes have effect. re-select the CMake target (VSCode bottom line) to reconfigure the build."
  },
  "content/building/build-in-visual-studio.html": {
    "href": "content/building/build-in-visual-studio.html",
    "title": "Building .NET nanoFramework in Visual Studio | nanoFramework Documentation",
    "keywords": "Building .NET nanoFramework in Visual Studio Developing firmware for the nanoframework using Visual Studio 2019 community edition (See below for VS2017) The development process described below for VS2017 was initially focused on the STM32/ChibiOS target, with the Espressif ESP32 added later. In this update we will use the ESP32 as our example, for STM32 specific information refer to the VS2017 section. The very long file names used in the ChibiOS builds can result in exceeding the Windows 250 character path limit. Sometimes CMake will complain about this, or you may get seemingly random failed builds. The previous workaround for this was to place your source in a top-level directory. As an alternative we have been using the Windows SUBST command to access the source via ashorted drive mapped path. There are some tools provided to automate this process. First set up a working build environment with VS Code (Recommended) While it is possible to set up a successful build and debug environment using VS 2019, setting up the VS Code environment first is highly recommended. This is the most used and tested path, and should you run into any obstacles along the way you will most likely be able to get assistance from other users. Once that is up and running, you can switch to your preferred IDE! Follow along with one of the guides here: Getting started with VS Code and ESP32 Getting started with VS Code and STM32 Install Visual Studio 2019 Community and workloads You should now have the pieces in place to build, deploy and debug the nanoFramework interpreter, and you may have already installed Visual Studio and tried running some of the managed code examples. We now need to hook these pieces up with Visual Studio so we can use it to run the build/deploy/debug process. Install the following : Software Workload/Component Visual Studio 2019 community edition Linux development with C++ option C++ CMake tools for Windows and Linux option Embedded and IoT Development tools Configuration Files VS Code and VS2019/2017 keep the majority of their configuration files in \"hidden\" directories (in the sense that Unix/Linux hides directory names beginning with a period). For VS Code this is named \".vscode\" and for VS2019 it is named \".vs\" , which helps to keep them from treading on each others toes. The VS2019 IDE normally hides the contents of this directory in Solution Explorer , but if you go to the task-bar at the top of the Solution Explorer pane and hover over the icons you will find Show All Files . When selected, these files appear below in \"Local Settings (.vs)\" The two configuration files in .vs are tasks.vs.json and launch.vs.json . When you clone the nf-interpreter repository there will be two files names tasks.vs.SAMPLE.json and launch.vs.SAMPLE.json , which you can copy as the appropriate name and then modify to suit your configuration if required. Note that these are SAMPLE rather than TEMPLATE files as they are not used as a basis for automatic configuration, but are there as an example of something that is known to work. Unlike VS2017, VS2019 currently rewrites your JSON configuration files,and in doing so will remove any comments you have added. This may strictly follow the JSON spec., but for human readable configuration files is a Really Bad Thing! Hopefully MS will realize this and change the behaviour, perhaps taking on a more reasoned format such as JSON5 tasks.vs.json This adds some entries to the Right-Click context menu for items in the Solution Explorer pane, for example CMakeLists.txt . The sample file is set up for the ESP32, and uses esptool.py to erase or program Flash on the device. You may need to modify the \"port\" setting near the top of the file from COM3 to the port your ESP32 is connected to. launch.vs.json This is used to launch the debugger, using GDB locally with OpenOCD acting as the GDB server providing a connection to your device. The example for ESP32 is using a SEGGER JLINK device to connect to the ESP32 JTAG pins, while the STM32 example uses the STM32 STLINK interface on the STM769IDiscovery board. Note that we haven't been able to get the debug system working purely using the VS2019 resources, and we call a Windows batch file \"startocd.bat\" to handle the OpenOCD configuration details. Take a look at that file and modify it to suit your configuration. (It can have comments as VS doesn't mess with it!) When you have something that works please let us know and we can add it as another option to the file. GDB requires / separators in the path passed for the executable file and symbols, rather than the windows backslash \\ , and at present neither VS Code or VS2017/2019 can do that for us when expanding variables, hence the need to add a hard-coded file path. For VS Code we have a neat little extension nf to take care of that for us, but at this stage no such solution for VS. CMakeSettings.json This is the main configuration file for setting build options for the nf-interpreter , and is located in the root directory. Currently the repository has the actual file rather than a SAMPLE version, something we need to review as we don't want updates overwriting your local modifications! You may prefer to work from a local branch that keeps your changes safe, rather than the develop branch. I currently use a branch SaveLocalSettings to build,with a small script that automatically pulls and merges upstream develop changes into it. Note that VS2019 will walk all over this file! But on the up-side it does give you a nice GUI interface for changing the options included in your build and generating the system, something not present in VS2017. To access this Right-Click on CMakeSettings.json in Solution Explorer , and select the option \"CMake Settings for nanoFramework\" . Helper Batch Scripts RunCmd.bat Helper script to run a command in a separate console window, with a timeout after the command completes before closing the window. This was required when programming ESP32 boards requiring manual intervention (button press). Esptool.py sends a sequence of ___...___...___... during which you may need to hold the boot button and press reset, however VS2019 buffers the output window so you don't see this until it is too late. First parameter n is timeout in seconds. n = 0 - wait for user input after command completes n > 0 - wait for n seconds after command completes N < 0 - wait only if command completed with error SetNFRoot.bat This script is used to help overcome the problem of file paths exceeding the Windows 250 character limit when building nf-interpreter . It does this by usingthe Windows SUBST command to map an unused drive letter to the source root directory. If a mapping already exists, it will be re-used. The environment variable nfRoot is set to this location, which can be accessed from within Visual Studio. For example, if my source root is located at D:\\usr_chronos\\Sandbox\\NanoFramework\\nf-interpreter\\ D:\\usr_chronos\\Sandbox\\NanoFramework\\nf-interpreter>SetNFRoot.bat Found free drive letter: B: Created new subst for D:\\usr_chronos\\Sandbox\\NanoFramework\\nf-interpreter\\ on B: You can remove it with subst B: /D Using short path B:\\ for D:\\usr_chronos\\Sandbox\\NanoFramework\\nf-interpreter\\ B:\\ Now we can refer to the source root as B:\\ and build from there, giving as a substantially shorter path. The script output (see above) is sent to stderr rather than stdout , except for the final B:\\ , meaning it can be used as a command variable expansion in VS, as well as an environment variable expansion, ie ${env.nfRoot} or ${cmd.SetNFRoot.bat} startocd.bat This script is called by GDB to start OpenOCD as a separate process, you can add additional entries to the bottom of the script following the existing pattern. The label is passed from a line in launch.vs.json , default is for ESP32 with J-Link. The script currently starts C:/nanoFramework_Tools/Tools/openocd/bin/openocd.exe for the STM32_STLINK label, which is what you will have installed if you followed the STM32 instructions, but I've actually had better results using the ESP32 version of OpenOCD with the STM32. If you have that version installed just comment out the line following the :STM32_STLINK label. Build Locations We are able to build in separate locations to suit the target type and configuration we are working on. The current layout is to use the Build subdirectory to contain all the separate build types folders, so Build\\ESP32 for ESP32 vanilla build, Build\\ESP32_test for a test build, etc. The STM32 builds are most likely to require a shortened build path, so we can use \"${env.nfRoot}Build/${name}\" in our CMakeSettings.json file STM769IDiscovery section. The build will then be done in \"B:\\Build\\STM769IDiscovery\" . Debugging Once the program has been built and loaded into flash, you can launch the debugger. You need to select the launch configuration from the dropdown, as shown: Note that the launch configuration, here ESP32 nanoCLR - Segger JLink , may not show up for selection in the dropdown immediately, in some cases it takes some minutes to be available. We assume VS2019 is doing something in the background, if anyone knows the cause or a way to speed this up please let us know! You can then commence debugging from the top DEBUG menu. OpenOCD should open in its own console window, connect to the target device, and display something similar to this: In the VS2019 IDE output Window you should see: =thread-group-added,id=\"i1\" GNU gdb (crosstool-NG crosstool-ng-1.22.0-80-g6c4433a5) 7.10 Copyright (C) 2015 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type \"show copying\" and \"show warranty\" for details. This GDB was configured as \"--host=i686-host_pc-mingw32 --target=xtensa-esp32-elf\". Type \"show configuration\" for configuration details. For bug reporting instructions, please see: <http://www.gnu.org/software/gdb/bugs/>. Find the GDB manual and other documentation resources online at: <http://www.gnu.org/software/gdb/documentation/>. For help, type \"help\". Type \"apropos word\" to search for commands related to \"word\". Warning: Debuggee TargetArchitecture not detected, assuming x86_64. =cmd-param-changed,param=\"pagination\",value=\"off\" @\"Detected debug stubs @ 3ffcbaa0 on core0 of target 'esp32'\\n\" @\"Target halted. PRO_CPU: PC=0x400D1F4C (active) APP_CPU: PC=0x4000C276 \\n\" [New Thread 1073557668] [New Thread 1073555768] [New Thread 1073561472] [New Thread 1073560324] [New Thread 1073548060] [New Thread 1073544580] [New Thread 1073546588] [New Thread 1073549192] [Switching to Thread 1073553736] Temporary breakpoint 1, app_main () at ../../targets/FreeRTOS_ESP32/ESP32_WROOM_32/nanoCLR/app_main.c:50 50 { =breakpoint-deleted,id=\"1\" The processor has now stopped at the temporary breakpoint inserted by our launch.vs.json startup sequence, showing as an Exception at the entry point in the source code window. You can now step through the code, observe variables, set breakpoints and so on. Summary This documentation is a work in progress, as is Visual Studio support for this type of project. Your feedback and contributions are welcome! Feedback Developing firmware for the nanoframework using Visual Studio 2017 community edition (See above for VS2019) The instructions for VS2019 are more current and can in the most case be used for VS2017 as well 🚧 IMPORTANT : The firmware build for Visual Studio is under construction. 🚧 Some compromises were required to get this to a working stage. I made a decision to put the code at the top level to reduce path length of files which caused warnings of the potential to overflow the command line. Hard coded paths are used to ensure it works with the current CMake coding and the Microsoft usage of CMake There are some issues with the CMakeSettings.json file with path separators. Directory structure for the project Two top level directories have been created to support the development with Visual Studio. c:\\nanoFramework\\nf-interpreter c:\\nanoFramework_Tools c:\\nanoFramework\\nf-interpreter The nf-interpreter repository is cloned to this directory. c:\\nanoFramework\\nf-interpreter\\Build This directory contains the build output, the files in here are transient. When the CMake cache is deleted, files in this directory are deleted. The files in this directory are only visible when selecting \"Show All Files\". These files are not part of the GIT repository. At the end of a successful build the build outputs are copied to the \\Build directory. Note: It is sometimes necessary to delete the contents of these folders if Visual Studio misbehaves. Using Visual Studio with CMake results in what appears to be inconsistencies at times. Sometime the CMake server goes away, shutting down Visual Studio and restarting usually fixes the problem. Note: After clearing the Cmake cache, on occasions the build/chibios_source directory is left empty or only containing the .git file due to some conflict. The current CMakeLists.txt file finds the directory and does not re-copy the code. It is necessary to manually delete the directory from file explorer and generate the cache for the copy to run. _ c:\\nanoFramework_Tools\\ Manually create this directory to contain the following folders. c:\\nanoFramework_Tools\\ChibiOS Copy of the ChibiOS repository cloned from https://github.com/nanoframework/chibios.git C:\\nanoFramework_Tools\\Tools\\openocd Copy of the OpenOCD installation https://github.com/xpack-dev-tools/openocd-xpack/releases C:\\nanoFramework_Tools\\Tools\\ Place a copy of the hex2dfu.exe tool here Major configuration files Main CMakeSettings.json Configuration file used by Visual Studio. This is the standard configuration file for CMake development. This file can contain more than one configuration. In addition to setting the compiler toolchain, additional variables are defined to select the target hardware and operating system to build. Note : Work in progress CMakeLists.txt This is the standard CMakeLists.txt file for the nf-intepreter Main launch.vs.json Sets up the debugging environment using the gdbserver debugging via configurations. The example references the openocd application. Setup and Installation Software Component Notes Link Visual Studio 2017 community edition Linux development with C++ option Visual C++ tools for Cmake and Linux option Embedded and IoT Development GCC version 6.3.1. December/2018 GCC Tool Chain - Version 7-2018-q2-update GNU Arm Embedded Toolchain https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads GCC Toolchain NOTES Version 6.3.1 installed by Visual Studio has a problem with fallthrough, Version 8, has a problem with structures ( an issue has been raised to fix this) The following GCC version has been download, installed and tested. GNU Arm Embedded Toolchain - Version 7-2018-q2-update https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads # In CMakeSettings.json the following variables determine the build tool. { \"name\": \"TOOLCHAIN_PREFIX\", \"value\": \"C:/Program Files (x86)/GNU Tools Arm Embedded/7 2018-q2-update\" // \"value\": \"${env.GCCPATH}\" // Standard Visual Studio Install of GCC 6.3.1 }, In CMakeSettings.json the VISUAL_STUDIO variable sets up a workaround for a problem with the build system. If you use the add_custom_command with POST_BUILD then the build compiles but does not link due to a 'cmd.exe' not recognized' { \"name\": \"VISUAL_STUDIO\", \"value\": \"TRUE\" }, To avoid the problem the custom command to copy the build outputs is not run. An equivalent of this can be run by executing CopyBuildOutput.cmd manually from the command prompt. Debugging the solution The launch.vs.json file contains an example configuration for setup to debug the STM32769IDiscovery board. Additonal configurations can be added, although the implementation of the options does not seem consistent with the VSCODE version and some options do not appear to work properly. Also, the whole system is a bit flakey. The openocd program is run as sub process of Visual Studio,and if it runs into problems the system fails, and you must run up task manager to end the openocd.exe task listed as a process of Visual Studio. Diagnosing problems with the debug and launch.vs.json You can get a better understanding of problems that may be occuring with the gdb/openocd debug setup. In Visual Studio select the Command Window Ctrl+Alt+A, and turn on debug logging with the following command. debug.midebuglog /On:c:\\Temp\\debug.log Run a debugging session to collect data and turn it off with the following command. debug.midebuglog /Off This will give you a log of the operation and communications occuring. ( Good luck!) An example snippet displays error for \"Monitor reset halt ( not quite sure why?) 8: (1976730) ->^done 8: (1976730) <-1005-interpreter-exec console \"monitor reset halt\" 8: (1976730) ->(gdb)` 8: (1976741) ->&\"\\\"monitor\\\" command not supported by this target.\\n\" 8: (1976742) ->1005^error,msg=\"\\\"monitor\\\" command not supported by this target.\" 8: (1976742) ->(gdb) 8: (1976742) 1005: elapsed time 11 8: (1976742) <-1006-interpreter-exec console \"monitor reset init\" 8: (1976742) ->&\"\\n\" 8: (1976742) ->^done 8: (1976742) ->(gdb) Feedback If you are using this your feedback is greatly appreciated. Please join our Discord community and start chatting about this."
  },
  "content/building/build-nxp.html": {
    "href": "content/building/build-nxp.html",
    "title": "How to Build, Flash and Debug the NXP nanoBooter and nanoCLR on Windows using Visual Studio Code | nanoFramework Documentation",
    "keywords": "How to Build, Flash and Debug the NXP nanoBooter and nanoCLR on Windows using Visual Studio Code About this document This document describes how to build the required images for .NET nanoFramework for NXP targets. The build is based on CMake tool to ease the development in all major platforms. Using Dev Container If you want a simple, efficient way, we can recommend you to use Dev Container to build your image. This has few requirements as well like Docker Desktop and Remote Container extension in VS Code but it is already all setup and ready to run! If you prefer to install all the tools needed on your Windows machine, you should continue this tutorial. Prerequisites You'll need: Visual Studio Code Visual Studio Code Extensions . C/C++ - C/C++ IntelliSense, debugging, and code browsing (by Microsoft) . CMake Tools - Extended CMake support in Visual Studio Code (by Microsoft) . Cortex Debug ) - Debug tool made explicity for ARM Cortex-M cores (needed for J-Link), if you're using on board programmer you don't need it. CMake (Minimum required version is 3.15) A build system for CMake to generate the build files to. We recommend Ninja . GNU ARM Embedded Toolchain OpenOCD. Suggest the xPack OpenOCD that kindly maintains a Windows distribution. All the above can be installed by the Power Shell script .\\install-nf-tools.ps1 -TargetSeries NXP from the install-scripts folder within the nf-interpreter project (cloned or downloaded). If you prefer you can do it manually (NOT RECOMMENDED for obvious reasons). Overview To simplify: this guide we will put all our tools and source in easily accessible folders and not at the default install paths (you do not have to do the same). Create a directory structure such as the following: C:\\nftools C:\\nanoFramework Download and install Visual Studio Code . Clone nf-interpreter repository into C:\\nanoFramework\\nf-interpreter . See next section for more info. Run the PowerShell script that's on the install-scripts folder that will download and install all the required tools. .\\install-stm32-tools.ps1 -Path 'C:\\nftools' For best results, run in an elevated command prompt, otherwise setting system environnement variables will fail. Review and adjust several JSON files to match your environment (as documented below) Restart Visual Studio Code (due to json changes) The setup is a lot easier than it seems. The setup scripts do almost everything. .NET nanoFramework GitHub repo If you intend to change the nanoBooter or nanoCLR and create Pull Requests then you will need to fork the nanoFramework/nf-interpreter to your own GitHub repo and clone the forked GitHub repo to your Windows system using an Git client such as the GitHub Desktop application . The develop branch is the default working branch. When working on a fix or experimenting a new feature you should do it on another branch. See the Contributing guide for specific instructions on the suggested contributing workflow. If you don't intend to make changes to the nanoBooter and nanoCLR, you can clone nanoFramework/nf-interpreter directly from here. Make sure to put this folder high enough on your drive, that you won't trigger long filename issues. CMake does not support filenames in excess of 250 characters. Setting up the build environment in Windows To simplify, this guide we will put all our tools and source in easily accessible folders and not at the default install paths (you do not have to do the same): Create a directory structure such as the following: C:\\nftools C:\\nanoFramework Download and install Visual Studio Code. Download and install CMake to C:\\nftools\\CMake . Download Ninja and place the executable in C:\\nftools\\Ninja . Download and install the GNU ARM Embedded Toolchain to C:\\nftools\\GNU_ARM_Toolchain . Finally, clone nf-interpreter into C:\\nanoFramework\\nf-interpreter . See next section for more info. Set up MCUXpresso IDE For programming eval board using on board LPC-Link programmer you will need to set up MCUXpresso IDE which provides us with redlink software. Redlink copies flash image to core RAM and from there it's flashed into external HyperFlash or QSPI flash. Register and download MCUXpresso IDE form nxp website . Install MCUXpresso IDE. Remember to set proper paths while setting up launch.json file in next steps. Setting up the build environment After cloning the repo, you need to setup the build environment. You can use the power shell script or follow the step-by-step instructions. Automated Install of the build environment Run Power Shell as an Administrator and run set-executionpolicy RemoteSigned to enable execution of the signed script. On Windows, one may use the .\\install-nf-tools.ps1 Power Shell script located in the repository install-scripts folder to download/install CMake, the toolchain, OpenOCD (for JTAG debugging) and Ninja. You may need to use Run as Administrator for power shell to permit installing modules to unzip the downloaded archives. The script will download the zips and installers into the repository zips folder and extract them into sub-folders of the nanoFramework tools folder C:\\nftools or install the tool. Open Power Shell in the install-scripts folder of the repository and run the script. Example Power Shell command line: .\\install-nf-tools.ps1 -TargetSeries NXP You can force the environment variables to be updated by adding -Force to the command line. The script will create the following sub-folders (see manual install below): C:\\nftools C:\\nftools\\GNU_Tools_ARM_Embedded\\8-2019-q3-update C:\\nftools\\ninja C:\\nftools\\hex2dfu C:\\nftools\\openocd The following Environment Variables will be created for the current Windows User. NF_TOOLS_PATH = C:\\nftools GNU_GCC_TOOLCHAIN_PATH = C:\\nftools\\GNU_Tools_ARM_Embedded\\8-2019-q3-update NINJA_PATH = C:\\nftools\\ninja Set up Visual Studio Code Step1 : Install the extensions: C/C++ CMake Tools Step2 : Run the PowerShell script Initialize-VSCode.ps1 that's on the install-scripts folder. This will adjust the required settings, build launch configuration for debugging and setup the tasks to ease your developer work. .\\Initialize-VSCode.ps1 You can force the environment variables to be updated by adding -Force to the command line. The PowerShell relies on the environment variables described above to properly setup the various VS Code working files. In case you have not used the automated install and the variable are not available you'll have to manually edit tasks.json , launch.json , cmake-variants.json and settings.json to replace the relevant paths. Step3 : If you want to use onboard programmer edit the file named settings.json inside the .vscode folder and paste the following (mind to update the path to your setup). { \"cortex-debug.armToolchainPath\": \"c:/nftools/GNU_ARM_Toolchain/8 2019-q3-update/bin\", \"cortex-debug.JLinkGDBServerPath\": \"c:/Program Files (x86)/SEGGER/JLink/JLinkGDBServerCL.exe\" } Step4 : Save any open files and exit VS Code. Build nanoCLR Step1 : Launch Visual Studio Code from the repository folder, or load it from the File menu, select Open Folder and browse to the repo folder. VS Code could prompt you asking \"Would you like to configure this project?\". Ignore the prompt as you need to select the build variant first. Step2 : Reopen VS Code. It should load the workspace automatically. In the status bar at the bottom left, click on the No Kit Selected and select [Unspecified] . Step3 : In the status bar at the bottom left, click on the CMake:Debug NXP_MIMXRT1060_EVK: Ready and select Debug . Wait for it to finish Configuring the project (progress bar shown in right bottom corner). This can take a while the first time. Step4 : In the status bar click Build or hit F7. Step5 : Wait for the build to finish with Build finished with exit code 0 output message. Step6 : In the build folder you'll find several files: nanoBooter.bin nanoBooter.elf nanoBooter.hex nanoCLR.bin nanoCLR.elf nanoCLR.hex Note: If there are errors during the build process it is possible to end up with a partial build in the build folder, and the CMake/Ninja build process declaring a successful build despite the .bin targets not being created, and a CMake clean not helping. In this case deleting the contents of the build folder should allow the build to complete once you resolve the issues that cause the original failure. Common Build Issues The above may have some errors if: CMake is not installed properly, not in the PATH or cannot be found for some reason. Ninja is not recognized: check settings.json or your PATH environment variable and restart Visual Studio Code. COMPILATION object file not found: check that your paths don't exceed 140 chars. Put the solution folder high enough on drive. Make sure to 'Build all' first time. Reopen VS Code if you have changed anything on the cmake-variants.json . Clean the build folder by deleting it's contents and restart VS Code. Flash the NXP target Connect the Target board to your PC using an USB cable. Open Visual Studio Code and go to Debug and Run (CTRL+SHIFT+D). Run debug (green rectangle or F5 default shortcut), firstly on nanoBooter then nanoCLR. Note: You don't have to re-flash nanoBooter every time you flash nanoCLR. Debugging with Cortex Debug with J-Link (Optional) If you want to view CPU register values in real time and use more advanced debugging tool. It's possible to use Cortex Debug extension. Please refer to guides available at SEGGER's wiki. Next Steps See Getting Started for instructions on creating and running a 'Hello World' managed application on your nanoFramework board."
  },
  "content/building/build-stm32.html": {
    "href": "content/building/build-stm32.html",
    "title": "How to Build, Flash and Debug the STM32 nanoBooter and nanoCLR on Windows using Visual Studio Code | nanoFramework Documentation",
    "keywords": "How to Build, Flash and Debug the STM32 nanoBooter and nanoCLR on Windows using Visual Studio Code About this document This document describes how to build the required images for .NET nanoFramework for STM32 targets. The build is based on CMake tool to ease the development in all major platforms. Using Dev Container If you want a simple, efficient way, we can recommend you to use Dev Container to build your image. This has few requirements as well like Docker Desktop and Remote Container extension in VS Code but it is already all setup and ready to run! If you prefer to install all the tools needed on your Windows machine, you should continue this tutorial. Prerequisites You'll need: Visual Studio Code Visual Studio Code Extensions . C/C++ - C/C++ IntelliSense, debugging, and code browsing (by Microsoft) . CMake Tools - Extended CMake support in Visual Studio Code (by Microsoft) CMake (Minimum required version is 3.15) A build system for CMake to generate the build files to. We recommend Ninja . GNU ARM Embedded Toolchain OpenOCD. Suggest the xPack OpenOCD that kindly maintains a Windows distribution.- ChibiOS - Technically you do not need to download this, the build scripts will do this automatically if you do not specify a path to ChibiOS in the cmake-variants.json (more info here ). All the the above can be installed by the Power Shell script .\\install-nf-tools.ps1 -TargetSeries STM32 from the install-scripts folder within the nf-interpreter project (cloned or downloaded). If you prefer you can do it manually (NOT RECOMMENDED for obvious reasons). Overview To simplify: this guide we will put all our tools and source in easily accessible folders and not at the default install paths (you do not have to do the same). Create a directory structure such as the following: C:\\nftools C:\\nanoFramework Download and install Visual Studio Code . Clone nf-interpreter repository into C:\\nanoFramework\\nf-interpreter . See next section for more info. Run the PowerShell script that's on the install-scripts folder that will download and install all the required tools. .\\install-nf-tools.ps1 -TargetSeries STM32 -Path 'C:\\nftools' For best results, run in an elevated command prompt, otherwise setting system environnement variables will fail. Review and adjust several JSON files to match your environment (as documented below) Restart Visual Studio Code (due to json changes) The setup is a lot easier than it seems. The setup scripts do almost everything. .NET nanoFramework GitHub repo If you intend to change the nanoBooter or nanoCLR and create Pull Requests then you will need to fork the nanoFramework/nf-interpreter to your own GitHub repo and clone the forked GitHub repo to your Windows system using an Git client such as the GitHub Desktop application . The develop branch is the default working branch. When working on a fix or experimenting a new feature you should do it on another branch. See the Contributing guide for specific instructions on the suggested contributing workflow. If you don't intend to make changes to the nanoBooter and nanoCLR, you can clone nanoFramework/nf-interpreter directly from here. Make sure to put this folder high enough on your drive, that you won't trigger long filename issues. CMake does not support filenames in excess of 250 characters. Setting up the build environment After cloning the repo, you need to setup the build environment. You can use the power shell script or follow the step-by-step instructions. Automated Install of the build environment Run Power Shell as an Administrator and run set-executionpolicy RemoteSigned to enable execution of the signed script. On Windows, one may use the .\\install-nf-tools.ps1 Power Shell script located in the repository install-scripts folder to download/install CMake, the toolchain, OpenOCD (for JTAG debugging) and Ninja. You may need to use Run as Administrator for power shell to permit installing modules to unzip the downloaded archives. The script will download the zips and installers into the repository zips folder and extract them into sub-folders of the nanoFramework tools folder C:\\nftools or install the tool. Open Power Shell in the install-scripts folder of the repository and run the script. Example Power Shell command line: .\\install-nf-tools.ps1 -TargetSeries STM32 You can force the environment variables to be updated by adding -Force to the command line. The script will create the following sub-folders (see manual install below): C:\\nftools C:\\nftools\\GNU_Tools_ARM_Embedded\\8-2019-q3-update C:\\nftools\\ninja C:\\nftools\\hex2dfu C:\\nftools\\openocd The following Environment Variables will be created for the current Windows User. NF_TOOLS_PATH = C:\\nftools GNU_GCC_TOOLCHAIN_PATH = C:\\nftools\\GNU_Tools_ARM_Embedded\\8-2019-q3-update HEX2DFU_PATH = C:\\nftools\\hex2dfu NINJA_PATH = C:\\nftools\\ninja Set up Visual Studio Code Step 1: Install the extensions: C/C++ CMake Tools Step 2: Run the PowerShell script Initialize-VSCode.ps1 that's on the install-scripts folder. This will adjust the required settings, build launch configuration for debugging and setup the tasks to ease your developer work. .\\Initialize-VSCode.ps1 You can force the environment variables to be updated by adding -Force to the command line. The PowerShell relies on the environment variables described above to properly setup the various VS Code working files. In case you have not used the automated install and the variable are not available you'll have to manually edit tasks.json , launch.json , cmake-variants.json and settings.json to replace the relevant paths. Step 3: Save any open files and exit VS Code. Build nanoCLR Step 1: Launch Visual Studio Code from the repository folder, or load it from the File menu, select Open Folder and browse to the repo folder. VS Code could prompt you asking \"Would you like to configure this project?\". Ignore the prompt as you need to select the build variant first. Step 2: Reopen VS Code. It should load the workspace automatically. In the status bar at the bottom left, click on the No Kit Selected and select [Unspecified] . Step 3: In the status bar at the bottom left, click on the CMake:Debug ST_STM32F429I_DISCOVERY: Ready and select Debug . Wait for it to finish Configuring the project (progress bar shown in right bottom corner). This can take a while the first time. Step 4: In the status bar click Build or hit F7. Step 5: Wait for the build to finish with Build finished with exit code 0 output message. Step 6: In the build folder you'll find several files: nanoBooter.bin nanoBooter.elf nanoBooter.hex nanoCLR.bin nanoCLR.elf nanoCLR.hex Note: If there are errors during the build process it is possible to end up with a partial build in the build folder, and the CMake/Ninja build process declaring a successful build despite the .bin targets not being created, and a CMake clean not helping. In this case deleting the contents of the build folder should allow the build to complete once you resolve the issues that cause the original failure. Common Build Issues The above may have some errors if: CMake is not installed properly, not in the PATH or cannot be found for some reason. Ninja is not recognized: check settings.json or your PATH environment variable and restart Visual Studio Code. COMPILATION object file not found: check that your paths don't exceed 140 chars. Put the solution folder high enough on drive. Make sure to 'Build all' first time. Reopen VS Code if you have changed anything on the cmake-variants.json . Clean the build folder by deleting it's contents and restart VS Code. Flash the STM32 target There are two options to flash the nanoBooter & nanoCLR images to a target. The first one uses the C/C++ tools in VS Code along with OpenOCD. This is the way to do it if you're planning to debug the code. The second uses a stand alone tool from STM that just flashes the images into the target. Useful if you don't plan to do any debugging. Starting a debug session in VS Code Assuming that you have a valid launch.json configuration for the target that you've build, you can go to the Run section. Choose the launch configuration for nanoBooter corresponding to your target. Click on the Start Debugging (green arrow). (this will flash the nanoBooter into the target's flash memory) Stop the debug session. Choose the launch configuration for nanoCLR corresponding to your target. Click on the Start Debugging (green arrow). (this will flash the nanoBooter into the target's flash memory) Stop the debug session. Note: You don't have to re-flash nanoBooter every time you flash nanoCLR as it won't be erased. Using STM32CubeProgrammer Utility Follow the instructions here to install STM32CubeProgrammer and flash nanoBooter.hex and nanoCLR.hex images to the board. Also this is not mandatory as all this can be handled by VS Code. Next Steps See Getting Started for instructions on creating and running a 'Hello World' managed application on your nanoFramework board."
  },
  "content/building/build-win32.html": {
    "href": "content/building/build-win32.html",
    "title": "Building .NET nanoFramework - WIN32 | nanoFramework Documentation",
    "keywords": "Building .NET nanoFramework - WIN32 The WIN32 version meant to be used for high level debugging, feature testing and Unit Testing for other projects. It's a VC++ solution which can be build using Visual Studio. Building Clone the nf-interpreter repository. Open targets\\win32\\nanoCLR.sln solution with VS. Build the solution. Make sure nanoCLR is the start project. Use either directly from the command line or starting a debug session. To load assemblies use the following syntax: -load <path-to-the-PE-file-1> -load <path-to-the-PE-file-2> ..."
  },
  "content/building/chibios-hal/gcc-linker-script.html": {
    "href": "content/building/chibios-hal/gcc-linker-script.html",
    "title": "GCC linker script for ChibiOS boards | nanoFramework Documentation",
    "keywords": "GCC linker script for ChibiOS boards About this document This document describes the GCC linker script for .NET nanoFramework boards using ChibiOS HAL/PAL and some explanations on how to customize and adapt it to a new target board. Linker script file naming To make it very clear on what file belongs to what image, the linker script files names carry a suffix of '_booter' for the nanoBooter and '_CLR' for the nanoCLR. These linker scripts are used by the linker at the link stage and are added to the build on the CMakeLists.txt global to a target board. When adding a new target board make sure that you set each linker script file to the appropriate target (in CMake, that is). It's also recommended that each linker script file is located in the respective nanoBooter or nanoCLR folder (these being inside a target board folder, that is). Configurations for nanoBooter link script The nanoBooter image is located at the default boot address of the target Soc/MCU. It's recommended that that the region length is set to match the FLASH space reserved for the nanoBooter. This adds an extra check because when the build and link occurs, if the image is too large to fit that space an error is generated and corrective actions can be taken. To illustrate this we are going to look into the linker script for the ST_NUCLEO_F091RC board. This is file STM32F091xC_booter.ld (@ targets/CMSIS-OS/ChibiOS/ST_NUCLEO_F091RC/nanoBooter/STM32F091xC_booter.ld). The only configuration here is the length of the flash region that should be set to the FLASH space reserved for the nanoBooter. In the example it can be seen that the nanoBooter image will start at address 0x08000000, with a maximum size of 16K. Configurations for nanoCLR link script The nanoCLR image is located at the designated address of the available FLASH space, typically right after the space reserved for the nanoBooter. It's recommended that that the region length is set to match the FLASH space reserved for the nanoCLR. This adds an extra check because when the build and link occurs, if the image is too large to fit that space an error is generated and corrective actions can be taken. To illustrate this we are going to look into the linker script for the ST_NUCLEO_F091RC board. This is file STM32F091xC_CLR.ld (@ targets/CMSIS-OS/ChibiOS/ST_NUCLEO_F091RC/nanoCLR/STM32F091xC_CLR.ld). The flash region configuration depends on two factors: the space reserved for nanoBooter image and the space reserved for application deployment. In the example it can be seen that nanoCLR image will start at address 0x08004000 and has a maximum size of 256k - 16k - 100k. That's the size reserved for nanoBooter and the size reserved for the application deployment. On this particular example (because this SoC requires that the vector table is copied to RAM) the ram0 region needs to be tweaked so it starts after the space reserved for the vector table. The end result is ram0 starting at 0x200000C0 with a length of 32k - 0xC0. Tips When designing the address map make sure that the address region boundaries match the FLASH memory blocks . This is very important in order to be able to perform image updates. This is valid for nanoBooter, nanoCLR and application deployment. The link script accepts several number format. Use the one that is convenient for what you are specifying. Follow some examples. For an absolute address (such as the start of a FLASH block) use the hexadecimal notation like in 0x08000000. When specifying the size of a region use the k and M suffixes, like 16k for a block with 16k Bytes (4096 bytes), or 1M. This makes it much easier to copy/paste from the device data sheet. It's OK to use mathematical expressions. For example, when setting the available space for the nanoCLR image don't bother with doing the math, just put there 1M - 16k."
  },
  "content/building/cmake/chibios-build.html": {
    "href": "content/building/cmake/chibios-build.html",
    "title": "CMake file for building ChibiOS from sources | nanoFramework Documentation",
    "keywords": "CMake file for building ChibiOS from sources About this document This document describes the purpose and workflow for the CMake configuration files to build ChibiOS from the repository sources. Building ChibiOS from sources might be needed when debugging a .NET nanoFramework feature that interacts with it. Purpose The purpose of the configuration files collections is to create a CMake package for ChibiOS and build it. Reasoning The sources from ChibiOS can be downloaded from their GitHub mirror repository or, if already available in the build machine, can be copied to the build folder. When invoking CMake these options are passed specifying RTOS=CHIBIRTOS and CHIBI_SOURCE=path-to-the-local-repository-folder . Note: when specifying the location of a local clone make sure that the correct branch is checked out. Workflow ChibiOS HAL is based on boards . The collection of supported boards and the respective configurations live in hal/boards directory. .NET nanoFramework includes an 'overlay' for ChibiOS were supported boards can be added. This collection is also checked for the target board. The collection of supported boards and the respective configurations implemented in the 'overlay' live in /targets/CMSIS-OS/ChibiOS/nf-overlay/os/hal/boards directory. A .NET nanoFramework target can also include the ChibiOS board definitions. This is the advisable approach for OEM boards. In this case the board.c and board.h files have to be included right in the target directory. Support for each board in .NET nanoFramework is required. This is were the configuration details and components/features are specified and/or configured. CMakes checks if the target board is available in the targets collection. The collection of board support is at /targets/CMSIS-OS/ChibiOS. After successfully finding the board support in both ChibiOS and .NET nanoFramework targets, CMake checks the TARGET_SERIES in the list of supported series in order to figure out the series for later use. Please check the code at FindCHIBIOS.cmake for details. (NOTE: the current code has been validated for STM boards only) The FindCHIBIOS.cmake includes the specifics for the target series and the respective GCC options. The file naming logic is: CHIBIOS_ STM32F0xx _sources.cmake: common source files for the series (with the series name in bold) CHIBIOS_ STM32F0xx _GCC_options.cmake: GCC options for the series (with the series name in bold) When adding a new vendor/series/board follow these general guidelines: When in doubt try to follow the make files of the repo. They'll give you all the details that you need in order to replicate that in the CMake files. Check if the series file exists. If not, create it and add the source files and include directories. Check if the target series name is contained in the CHIBIOS_SUPPORTED_SERIES list. If not add the series name there. Check if the linker file name is listed in the series file. If not, add it."
  },
  "content/building/cmake/ninja-build.html": {
    "href": "content/building/cmake/ninja-build.html",
    "title": "Using Ninja to build .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Using Ninja to build .NET nanoFramework Inside VS Code using CMake Tools To setup the CMake tools to build using Ninja you have to follow the following steps: Download and place the Ninja executable in a folder. Edit the settings.json file that VS Code places inside the .vscode folder Find a line for \"cmake.generator\" . If you don't have one just add it like this: \"cmake.generator\": \"Ninja\", Find a line for \"cmake.configureSettings\" . This is were the full path to the Nina executable should be set. Mind the forward slashes. If you don't have one just add a block like this: \"cmake.configureSettings\": { \"CMAKE_MAKE_PROGRAM\": \"E:/ninja/ninja.exe\" }, And that is it! Hit F7 or click the build configuration options for CMake Tools at the bottom toolbar. Performance comparison A simple test to compare the performance of NMake and Ninja was carried. It's a complete build (nanoBooter and nanoCLR) for a STM32F429I_DISCOVERY target with debugger and GPIO enabled. Build tool Time to complete build NMake 3m 17sec Ninja 1m 19sec"
  },
  "content/building/cmake-tools-cmake-variants.html": {
    "href": "content/building/cmake-tools-cmake-variants.html",
    "title": "CMake variants for CMake tools | nanoFramework Documentation",
    "keywords": "CMake variants for CMake tools About this document This document describes how to use and modify the cmake-variants.TEMPLATE.json file to suit your needs. Note : the current revision of the document only focuses on using ChibiOS RTOS. Other RTOSes will follow in a future revision. What is it cmake-variants.TEMPLATE.json is a template containing a minimal set of configuration examples needed to build nanoFramework for you board. Its content describes what kind of build you will get, which toolchain(s) you will use, which type of MCU is on the board, and some other options that will be described later in this document. How to use it First, you have to either rename the file or copy the contents to cmake-variants.json . Then, you will have to modify the content to match your environment. Later, when you change something in the cmake-variants.json you have to close and reopen VS Code and also wipe the build folder, then start again. Brief description There are two sets of parameters that need to be present in this file: the build type : 'debug' or 'release', for example the board's environment : MCU, toolchain, RTOS You should not have to modify the BuildType section unless you have good reasons to do so. However, the Linkage section is the one you will have to take care of. For each board you want to build, you will have to create a dedicated section in the Linkage area, precisely describing the MCU, the toolchain, the build type and the RTOS you will use. Content explained The following explains each line of the linkage section. Text highlighted in bold is an information that you will have to provide. Note : Mind the forward slash ('/') in paths strings ! \" OPTION1_NAME_HERE \" Replace this text with a distinctive option name. e.g. \"STM32F429_Disco\" \"short\": \" summary-here \" Replace the summary-here text with one word describing shortly your board. e.g. \"F429Disco\" \"long\": \" description-here \" This is a more complete description of the configuration \"BUILD_VERSION\" : \" version-number-for-the-build-format-is-N.N.N.N \" This can be used to prevent a board from updating if working on a custom firmware This can be used to workaround \" Found assemblies mismatches when checking for deployment pre-check \" error during deployment. \"CMAKE_TOOLCHAIN_FILE\" : \" CMake/toolchain.arm-none-eabi-OR-xtensa-esp32-elf.cmake \" This is the toolchain file for the target being built. Currently there we support GNU GCC and Xtensa for ESP32. \"TOOLCHAIN_PREFIX\" : \" absolute-to-gcc-toolchain-mind-the-forward-slash \" This is the path to your gcc toolchain compiler. Use forward slashes and do not provide executable name here \"TOOL_HEX2DFU_PREFIX\" : \" absolute-path-to-hex2dfu-utility-mind-the-forward-slash \" This is the path to the HEX2DFU utility. Use forward slashes and do not provide executable name here. \"ESP32_IDF_PATH\" : \" absolute-path-to-esp-idf-mind-the-forward-slash \" This the path to the ESP32 IDF utility. Use forward slashes and do not provide executable name here. \"ESP32_LIBS_PATH\" : \" absolute-path-to-the-ESP32-libs-folder-mind-the-forward-slashes \" This is the path to the folder where the ESP32 libraries can be found. Use forward slashes. \"EXECUTABLE_OUTPUT_PATH\" : \" ${workspaceRoot}/build \" This is the default and recommended path which will expand to the build folder when building from VS Code. When building from the command line or from Visual Studio this is not required. \"TARGET_SERIES\" : \" STM32F7xx \" For STM32 MCUs represents the target series (STM32F4XX, STM32L4XX, and so on) -For ESP32 matches the target name: \"ESP32_WROOM_32\" \"USE_RNG\" : \" ON \" Option to enable the use of the hardware true random generator unit, if present. Default is ON as the majority of the targets have this feature. \"DP_FLOATINGPOINT\" : \" OFF \" Enables support for double-precision floating point. The default is single-precision. Set to ON to enable double precision floating point. \"SUPPORT_ANY_BASE_CONVERSION\" : \" OFF \" Defines which bases are supported when performing string to value conversions. When ON support for any base is enabled. When OFF (the default) the image will be compiled with support for base 10 and base 16 only. \"RTOS\" : \" one-of-valid-rtos-options \" Defines the RTOS that will be used to build nanoFramework. It can be CHIBIOS or FREERTOS_ESP32. Currently ChibiOS is supported for all STM32 targets and FreeRTOS is supported for ESP32 targets. \"RTOS_SOURCE_FOLDER\" : \" absolute-path-to-chosen-rtos-source-mind-the-forward-slash \" Path to an optional local installation of an RTOS e.g. ChibiOS source files. If no path is given, then CMake will download the sources automatically from the RTOS repository when required. \"CHIBIOS_BOARD\" : \" valid-chibios-board-name-from-boards-collection \" Name of your board, chosen from the available boards collection that can be found in the \\os\\hal\\boards folder of the ChibiOS installation (or distant repository) \"SWO_OUTPUT\" : \" OFF \" Allows specifying whether to include, or not, support for Cortex-M Single Wire Output (SWO). Default is OFF. Check the documentation here for more details on how to use SWO. \"NF_BUILD_RTM\" : \" OFF \" Sets if the build is of R eady T o M arket type. Meaning that all debug helpers and code blocks will be removed from compilation and the build will be compiled and linked with all possible code reducing options enabled. \"NF_WP_TRACE_ERRORS\" : \" OFF \" Enable error tracing in Wire Protocol. \"NF_WP_TRACE_HEADERS\" : \" OFF \" Enable packet headers tracing in Wire Protocol. \"NF_WP_TRACE_STATE\" : \" OFF \" Enable state tracing in Wire Protocol. \"NF_WP_TRACE_NODATA\" : \" OFF \" Enable tracing of empty or incomplete packets in Wire Protocol. \"NF_WP_TRACE_ALL\" : \" OFF \" Enable all tracing options for Wire Protocol. \"NF_WP_IMPLEMENTS_CRC32\" : \" ON \" Enable CRC32 calculations for Wire Protocol. See details here . \"NF_FEATURE_DEBUGGER\" : \" OFF \" Defines is support for debuggin managed applications is enabled. Default is OFF. \"NF_FEATURE_RTC\" : \" OFF \" Allows you to specify whether to use the real time clock unit of the hardware for date & time functions. Depends on target availability. Default is OFF. \"NF_FEATURE_USE_APPDOMAINS\" : \" OFF \" Allows you to specify whether to include, or not, support for Application Domains. Default is OFF. More information about this is available in the documentation here . Note that the complete removal of support for this feature is being considered (see issue here ). \"NF_FEATURE_WATCHDOG\" : \" ON \" Allows you to define it the hardware watchdog should be disabled. This setting can only be set to OFF for STM32 targets. ESP32 build enables this by default so there is no way to disable it. Default is ON, so the hardware watchdog will be enabled by default. \"NF_FEATURE_HAS_CONFIG_BLOCK\" : \" OFF \" Allows the developer to set if the targets platform has configuration block. This requires the the block storage definition and the linker files add support for that. Default is OFF meaning that that the target DOES NOT have configuration block. \"NF_PLATFORM_NO_CLR_TRACE\" : \" OFF \" Allows you to define if trace messages and checks are added to CLR or not. These checks are usually valuable when debugging issues within the CLR. Can and should be removed for RTM build flavours. Default is OFF meaning that all the standard trace and checks are added to the CLR. \"NF_CLR_NO_IL_INLINE\" : \" OFF \" Allows you to define if CLR will use IL inlining. Default is OFF meaning that CLR will inline IL. \"NF_INTEROP_ASSEMBLIES\" : [ \"Assembly1-Namespace\", \"Assembly2-Namespace\" ] Lists the name of the Interop assembly(ies) to be added to the build. Leave empty or don't add it if no Interop assembly is to be added. \"NF_NETWORKING_SNTP\" : \" ON \" Allows you to specify whether SNTP is enabled. Requires networking feature to be enabled. Default is ON. \"NF_SECURITY_MBEDTLS\" : \" OFF \" Enables support for secure sockets using mbedTLS. Default is OFF. \"MBEDTLS_SOURCE\" : \" OFF \" Path to an optional local with mbedTLS source files. \"API_nanoFramework.Devices.OneWire\" : \" OFF \" Allows you to specify whether support for Devices.OneWire is available to your application. Default is OFF. \"API_System.Devices.Dac\" : \" OFF \" Allows you to specify whether DAC functions are available to your application. Default is OFF. \"API_System.Math\" : \" OFF \" Allows you to specify whether System.Math support is available to your application. Default is OFF. \"API_System.Net\" : \" OFF \" Allows you to specify whether System.Net support is available to your application. Default is OFF. \"API_nanoFramework.Devices.Can\" : \" OFF \" Allows you to specify whether CAN bus functions are available to your application. Default is OFF. \"API_nanoFramework.Devices.OneWire\" : \" OFF \" Allows you to specify whether 1-Wire functions are available to your application. Default is OFF. \"API_Windows.Devices.Adc\" : \" OFF \" Allows you to specify whether ADC functions are available to your application. Default is OFF. \"API_Windows.Devices.Gpio\" : \" OFF \" Allows you to specify whether GPIO functions are available to your application. Default is OFF. \"API_Windows.Devices.I2c\" : \" OFF \" Allows you to specify whether I2C functions are available to your application. Default is OFF. \"API_Windows.Devices.Pwm\" : \" OFF \" Allows you to specify whether PWM functions are available to your application. Default is OFF. \"API_Windows.Devices.SerialCommunication\" : \" OFF \" Allows you to specify whether Serial Communication functions are available to your application. Default is OFF. \"API_Windows.Devices.Spi\" : \" OFF \" Allows you to specify whether SPI functions are available to your application. Default is OFF. \"API_Windows.Networking.Sockets\" : \" OFF \" Allows you to specify whether Networking Sockets functions are available to your application. Default is OFF. \"API_Windows.Storage\" : \" OFF \" Allows you to specify whether Windows.Storage functions are available to your application. Default is OFF. \"API_Hardware.Esp32\" : \" OFF \" Allows you to specify whether Hardware.Esp32 functions are available to your application. Default is OFF. Note that this API is exclusive of ESP32 targets and can't be used with any other. \"API_Hardware.Stm32\" : \" OFF \" Allows you to specify whether Hardware.Stm32 functions are available to your application. Default is OFF. Note that this API is exclusive of STM32 targets and can't be used with any other. Working example The following linkage section is a real example used to build nanoFramework for the MBN Quail board. It is using the minimal mandatory information : \"MBNQUAIL\": { \"oneWordSummary$\": \"QUAIL\", \"description$\": \"MBN Quail\", \"settings\": { \"TOOLCHAIN_PREFIX\" : \"C:/Program Files (x86)/GNU Tools ARM Embedded/5.4 2016q3\", \"TARGET_CHIP\" : \"STM32F427VIT\", \"TARGET_SERIES\" : \"STM32F4xx\", \"RTOS\" : \"CHIBIOS\", \"RTOS_SOURCE_FOLDER\" : \"C:/dev/ChibiOS_16.1.7\", \"CHIBIOS_BOARD\" : \"MBN_QUAIL\" \"NF_FEATURE_DEBUGGER\" : \"TRUE\", \"NF_FEATURE_RTC\" : \"ON\", \"NF_FEATURE_USE_APPDOMAINS\" : \"OFF\", \"NF_FEATURE_USE_NETWORKING\" : \"OFF\", \"API_Windows.Devices.Gpio\" : \"ON\" }, \"buildType\": \"Debug\" }, Templates To make your life easier, we provide templates with pre-configured cmake-variants.json for the various reference targets. Just grab them from our Gist. ST_STM32F4_DISCOVERY ST_STM32F429I_DISCOVERY ST_NUCLEO_F091RC ST_NUCLEO144_F746ZG ST_STM32F769I_DISCOVERY MBN_QUAIL NETDUINO3_WIFI ESP32_WROOM_32 TI_CC3220SF_LAUNCHXL"
  },
  "content/building/index.html": {
    "href": "content/building/index.html",
    "title": "Building .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Building .NET nanoFramework Building .NET nanoFramework Build using local source for RTOS CMake variants for CMake tools Building in Visual Studio ChibiOS HAL GCC linker script for ChibiOS boards CMake Building with ChibiOS Building using Ninja Using Dev Container If you want a simple, efficient way, we can recommend you to use Dev Container to build your image. This has few requirements as well like Docker Desktop and Remote Container extension in VS Code but it is already all setup and ready to run!"
  },
  "content/building/rtos-source-for-build.html": {
    "href": "content/building/rtos-source-for-build.html",
    "title": "Building .NET nanoFramework with local RTOS source vs RTOS source from repository | nanoFramework Documentation",
    "keywords": "Building .NET nanoFramework with local RTOS source vs RTOS source from repository When building .NET nanoFramework for a CMSIS target (currently only ChibiOS is supported) the developer has two options: either using a local path for the RTOS source code or downloading it from the official repository. This document aims to give you an brief overview of the differences between these two so you can choose the option that best fits your use scenario. Source from official repository When running CMake, if the parameter -DCHIBIOS_SOURCE is not not specified CMake will connect to nanoFrameworks ChibiOS mirror on GitHub and will clone the source from there. The time for this operation to complete will mostly depend on the speed of your internet connection. ChibiOS will be cached within the build directory so the full download won't happen again unless the build directory is cleared. A check for any changes in the repo is made whenever a build is run. If there are any, the changes will be downloaded and merged. This option is good for automated builds or when you don't have (or don't want) the repo cloned to your local storage device. Another advantage is that you don't have to manage the updates to the local clone yourself. An obvious disadvantage is that if the build folder is cleaned (required when switching between target boards) the 'cached' repo will be gone and a full download will occur when the project is next built. Source from local clone When running CMake, if the parameter -DCHIBIOS_SOURCE=\".....\" is specified a local clone located at the designated path will be used when the build occurs. The only timing penalty is the one necessary for CMake to copy the contents of the local ChibiOS repo to the build cache folder. This is a one time operation and it won't happen again unless the build folder is cleaned up. This option is good when you have a local clone of the repo and you don't want to increase the build time with checks on the repo and downloading it or wish to target a different branch (such as master ). The downside is that you have to manage the update process for the ChibiOS repo yourself. Another important aspect to consider is the branch to manually checkout . Not doing this is synonym of using the 'master' branch that contains the development files and is not a stable version, which is probably not what you want to use. So, make sure that you checkout the branch matching the currently supported stable version. In doubt ask in the Discord channel. Also here, if the build folder is cleaned the 'cached' repo will be gone."
  },
  "content/building/using-dev-container.html": {
    "href": "content/building/using-dev-container.html",
    "title": "Using Dev Container to build targets | nanoFramework Documentation",
    "keywords": "Using Dev Container to build targets Dev Container is a way to use VS Code with a separated container. This allows to work on a separated environment than your normal Windows/Linux/Mac. This has the advantage of being isolated from the application installed, so you don't have to \"pollute\" your own environment with tools you may not need for other purpose. The other advantage is the ability to be pre setup, build at first request, pulling all the needed tools, repository, documents and settings that you'll need in your development. We offer the possibility to use such a Dev Container to build any of the supported target in a very simple and straight forward way. Requirements Step 0 : Make sure your have cloned nf-interpreter nanoFramework directory. The stable branch is develop . Step 1 : Make sure you have VS Code installed. Step 2 : Make sure you have Docker Desktop installed. Step 3 : Optional but strongly recommended for performance reasons: activate Windows Subsystem for Linux 2 on your Windows host machine. note: that may require a reboot Step 4 : Check Docker configuration and make sure you are signed in. In the bellow picture, the top right corner should have you Docker account. If you are not signed in, you'll get an error. And if you're using WSL2 (recommended), the checkbox for the WSL2 support should be checked. Step 5 : Make sure you have the Remote - Containers extension installed. Step 6 : copy the file in .\\vscode\\cmake-variants-DEVCONTAINER.json to .\\vscode\\cmake-variants.json Step 7 : Open the full nf-interpreter directory with VS Code. Step 8 : Chose your container. Go to the file .devcontainer/devcontainer.json and choose the container you want. You will find the details in the file itself: // Adjust this file to chose the platform you want using the prebuild containers // - Dockerfile.All = you can build anything but it's a very large container // - Dockerfile.AzureRTOS = for AzureRTOS targets // - Dockerfile.ChibiOS = for ChibiOS based targets (ex: STM32, Netduino, Orgpal) // - Dockerfile.ESP32 = for ESP32 targets // - Dockerfile.TI = for TI targets // If you prefer, you can use the source files and adjust them they are located, with the same names in ./sources. This will alow you to customize them and add anything you may need on top. \"dockerFile\": \"Dockerfile.ChibiOS\", Note: as a beginner, we recommend you to use the pre built containers. If you are familiar with containers and need to adjust resources in them, then use the one which you can build yourself. Use the one in the ./sources subdirectory. So the file name will be for example ./source/Dockerfile.All to use the container containing everything and build it from the source. Error: if you get error message like \"Bad Cmake executable \"\". Is it installed or settings contain the correct path (cmake.cmakePath)? The solution: uninstall the Cmake and Cmake tool from Visual Studio Code and restart Visual Studio Code. Step 9 : Once prompted or thru the menu, open the dev container. This is illustrating how to do this: note: in our case, the dev container is called nanoFramework . Step 10 : At that point, like in the previous illustration, when clicking on the logs, you should see activities. Be patient. Yes, super patient. Step 11 : We told you to be patient, go for a tea, or a coffee. This part is resource intensive, most of your memory and processor will be used. Step 12 : More patience, yes, all the needed tools and directory are cloned, all the needed settings are cloned as well. This may take a very long time if you have a low bandwidth Internet. See the advance section to understand how you can skip some of the elements if you are only interested in a very specific board. Step 13 : It will be over when your VS Code will give you access to the files and will look like this: Step 14 : Select the target you want to build, click on CMake: [Unknown]: Ready The first time you'll do this, you will be asked to select a kit, choose the unspecified one: Then you can pick the target you want to build: Step 15 : This will actually prepare all what is needed in the build folder. Important : this may take up to 1h or more depending on the target and the performance of your machine. So be patient! While the project will be in preparation, you'll get the small window on the right: Step 16 : did we already told you to be patient? :-) If you still have the little windows from the previous image, be patient! once done, go to the next step. Step 17 : Hit F7 this will trigger the build. The build will take some time as well. If all goes right, it will finish with a code 0 with something like: [build] Build finished with exit code 0 Tips and tricks Some build may fail for size reasons Build may fail if your image is too big. This is the case sometime when you select debug on some devices like the ST Nucleo one. You'll then get a build fail which looks like this: [build] Memory region Used Size Region Size %age Used [build] flash0: 18984 B 18 KB 102.99% [build] flash1: 0 GB 0 GB [build] flash2: 0 GB 0 GB [build] flash3: 0 GB 0 GB [build] flash4: 0 GB 0 GB [build] flash5: 0 GB 0 GB [build] flash6: 0 GB 0 GB [build] flash7: 0 GB 0 GB [build] config: 0 GB 0 GB [build] deployment: 0 GB 0 GB [build] ramvt: 0 GB 0 GB [build] ram0: 8528 B 32720 B 26.06% [build] ram1: 0 GB 0 GB [build] ram2: 0 GB 0 GB [build] ram3: 0 GB 0 GB [build] ram4: 0 GB 0 GB [build] ram5: 0 GB 0 GB [build] ram6: 0 GB 0 GB [build] ram7: 0 GB 0 GB [build] bootclpbrd: 48 B 48 B 100.00% [build] collect2: error: ld returned 1 exit status Making changes in your .vscode\\cmake-variants.json file Every time you make a change in the .vscode\\cmake-variants.json file, you will have to leave the container bit clicking on the bottom left and then select Reopen locally and again select Reopen in dev container . You usually do this operation to adjust what you want to add in your target. More generally, any change in any of the file from the .vscode folder will require to exit and restart the dev container. Advance scenarios A Dev Container consist of a Dockerfile and a devcontainer.json file. You can of course customize both and personalize your environnement. This section will give you couple of hints for this. Customize your devcontainer.json file There are quite some elements you can customize, one of them is the mounting folders you want to be able to access in your container. For example, we've couple of usual folders where you can for example store your bash history or mount more folders: \"mounts\": [ \"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind\", // Mount .azure folder for seamless az cli auth \"source=${env:HOME}${env:USERPROFILE}/.azure,target=/home/vscode/.azure,type=bind\", // Keep command history \"source=nano-bashhistory,target=/home/vscode/commandhistory,type=volume\", ] You have quite a large number of elements you can customize including the extension that will be installed: // Add the IDs of extensions you want installed when the container is created. \"extensions\": [ \"ms-vsliveshare.vsliveshare-pack\", \"streetsidesoftware.code-spell-checker\", \"twxs.cmake\", \"ms-vscode.cmake-tools\" ] Restricting the platforms you want to download The Dockerfile contains all the elements needed to build any of the target. If you have a limited bandwidth or you are only interested in a limited number of targets, you can restrict what is cloned and installed. Everything is commented, so if for example, you are sure you'll never target any TI boards, you can comment what is related to TI. In this example, you'll comment all this: #RUN git clone --branch 4.10.00.07 https://github.com/nanoframework/SimpleLink_CC32xx_SDK.git ./sources/SimpleLinkCC32 \\ # && git clone --branch 3.61.00.16 https://github.com/nanoframework/TI_XDCTools.git ./sources/TI_XDCTools \\ # && git clone --branch 4.20.01.04 https://github.com/nanoframework/SimpleLink_CC13x2_26x2_SDK.git ./sources/SimpleLinkCC13 \\ # && git clone --branch 1.5.0 https://github.com/nanoframework/TI_SysConfig.git ./sources/TI_SysConfig You will note as well that you have 2 images, one for downloading and expending the tools, the other ones where the core tools are installed and the elements downloaded from the download image are copied. You could of course optimize both images to reduce to the strict minimum you require. This is recommended for advance users only having a minimum of understanding of the required components. Non root user The default Dev Container is running with root privileges. While this is ok in a context of a simple usage where you are just using it for this task once time to time, if you start using more regularly, you may want to lower the privileges and run thru a standard user. For this, you'll have to uncomment the last line: // Uncomment to connect as a non-root user. See https: //aka.ms/vscode-remote/containers/non-root. ,\"remoteUser\": \"vscode\" in the main Dockerfile, uncomment the files and add the script non-root-user.sh : ARG USERNAME=vscode ARG USER_UID=1000 ARG USER_GID=$USER_UID Flashing image Using Docker Desktop from Windows 10 you cannot flash compiled image to your device directly because of the limitations of serial port exposal to container. The instructions about \"Terminal\" -> \"Run Task\" -> \"Flash nanoCRL ...\" available on other document pages here wont work. You can flash the compiled nanoCLR.bin file with nanoff tool. Example: nanoff --platform esp32 --serialport COM3 --image nanoCLR.bin --address 0x00010000"
  },
  "content/case-studies/index.html": {
    "href": "content/case-studies/index.html",
    "title": "Case studies | nanoFramework Documentation",
    "keywords": "Case studies Here you can find Case Studies illustrating real products using .NET nanoFramework . Oil Fields Monitoring"
  },
  "content/case-studies/oil-fields-monitoring-orgpal.html": {
    "href": "content/case-studies/oil-fields-monitoring-orgpal.html",
    "title": "Oil Fields Monitoring | nanoFramework Documentation",
    "keywords": "Oil Fields Monitoring Company : OrgPal Telemetry Application Industry : Oil Field Product website Energy field services and operations requires compliance, accurate and frequent monitoring. For oil and gas companies the challenge is finding a cost-effective, reliable system and not all telemetry systems are created equal. Zan Gligorov , CEO of OrgPal Telemetry , explains the reasoning behind their choice. Our objective was to create a modern, simple, easy-to-install and use device that could easily integrate with the hundreds of sensors from the most modern to already existing across oil fields in North America. Our hardware met those goals, but we needed a great firmware to match it, and nanoFramework made that possible. Many solutions use different components from many manufacturers to integrate a solution, leading to a costly solution and even more costly maintenance option. The technology is not compatible by design, only function and given that they are deployed in distant hostile environments with limited or no access to terrestrial communications - and no electrical power supply - maintenance becomes very costly over time. Because nanoFramework is so feature rich yet easy to use, has small footprint (it fits on tiny MCU's), our solution is efficient with the lowest power consumption in the industry. We were able to use a very high power STM32 MCU, integrate a complete satellite with antenna, on board flash/file system, USB, cellular support, RTC and more for a very powerful remote measurement system, with low energy footprint. The resulting PalThree based solution is a game-changer for the industry. Checkout these photos bellow. Tanks in staging area Close up on tank with PalThree Tank fitted with PalThree deployed in the desert Solar panel that is powering PalThree PalThree in product enclosure"
  },
  "content/community-targets/brainpad2.html": {
    "href": "content/community-targets/brainpad2.html",
    "title": "BrainPad2 | nanoFramework Documentation",
    "keywords": "BrainPad2 The board used in this community contribution is a STM32F401RE based board from GHI Electronics called BrainPad. These pins can be used for: 1 x TX/RX 4 x PWM 4 X ADC 1 x I2C 1 x SPI Further information can be found here or here where schema can be found. Managed helpers Checkout as well the C# managed helpers for this board."
  },
  "content/community-targets/esp32-ULX3S.html": {
    "href": "content/community-targets/esp32-ULX3S.html",
    "title": "ULX3S specific articles | nanoFramework Documentation",
    "keywords": "ULX3S specific articles See the Main Radiona ULX3S page , and emard's source . The full ULX3S schematic is available here . See in particular the ESP32 connections: The red LED (D22) is on GPIO5."
  },
  "content/community-targets/GHI_FEZ_CERB40_NF.html": {
    "href": "content/community-targets/GHI_FEZ_CERB40_NF.html",
    "title": "GHI FEZ CERBb40 NF | nanoFramework Documentation",
    "keywords": "GHI FEZ CERBb40 NF Board introduction The board here used is a GHI Fez Cerb40 based upon an STM32F405RGT6 supporting a 1MB Flash and up to 192KB RAM in a LQFP64 package. On this board the LSE is soldered in case you have a board without the LSE please make sure you have it configured correctly in both the mcuconf.h files for nanoBooter as well as nanoCLR. The available pins have been set as can be read in the board.h file and it is there where you can set the pin usage for your required use. Visiting the official site here and per datasheet looking at Table 9. Alternate function mapping you will find possible alternative uses of the various pins. In its initial release the following pin configuration and usage has been verified. Looking at the board from the above (MCU visible) and with the USB connector at the top we have pin 1 on the left hand side. PCB Pin MCU Usage Comment Date 01 VCC 3.3V 02 GND 03 PA8 04 PA13 05 PA7 SPI1 MISO 06 PA6 SPI1 MOSI 07 PC10 08 PA14 09 PC11 10 PB4 11 PB9 I2C1 SDA Confirmed and working 2018-02-07 12 PB3 13 PD2 14 PC12 15 VBAT 16 PB8 I2C1 SCL Confirmed and working 2018-02-07 17 LODR 18 PB7 UART1 RX Confirmed and working 2018-02-09 19 PB6 UART1 TX Confirmed and working 2018-02-09 20 PB5 GPIO, PWM GPIO confirmed, PWM not done yet 2018-02-07 21 Reset Confirmed 2018-02-07 22 PC0 A0 23 PC1 A1 24 PC2 A2 25 PC3 A3 26 PA0 UART2 CTS 27 PA1 UART2 RTS 28 PA2 UART2 TX Confirmed and working 2018-02-08 29 PA3 UART2 RX Confirmed and working 2018-02-09 30 PA4 31 PA5 SPI1 SCK 32 PB10 I2C2 SCL Confirmed and working 2018-02-07 33 PB11 I2C2 SDA Confirmed and working 2018-02-07 34 PB14 35 PB15 36 PC6 37 PC7 38 PC8 39 PC9 40 USB For more information on the board specifics you can have a look at the GHI Electronics Cerb40 page NOTE: this configuration was successfully tested in a GHI_FEZ_CERB40_NF board using the Serial over USB connection on USB port 1 that creates a virtual COM port. Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/I2M_ELECTRON_NF.html": {
    "href": "content/community-targets/I2M_ELECTRON_NF.html",
    "title": "I2M Electron nf | nanoFramework Documentation",
    "keywords": "I2M Electron nf Electron community board The board used in this community contribution is a STM32F411CEU6 based board from IngenuityMicro called Electron. The board has only 12 pins of which 3 are already used for 3.3V, 5V and GND, leaving use of only 9 pins. These pins can be used for: 1 x TX/RX 4 x PWM 4 X ADC 1 x I2C 1 x SPI In addition, the board has two on-board LEDs connected to PA1 and PA8 and are tested for use as GPIO, PWM. Further information can be found on the store website . Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/I2M_OXYGEN_NF.html": {
    "href": "content/community-targets/I2M_OXYGEN_NF.html",
    "title": "I2M Oxygen | nanoFramework Documentation",
    "keywords": "I2M Oxygen The board used in this community contribution is a STM32F411CEU6 based board from IngenuityMicro called Oxygen. The board has 20 pins for your use. The pins on the opposite side of the USB connector can be used for several add-on boards for f.e. BLE, WiFi (ESP8266). The pins can be used for several purposes, GPIO, PWM, I2C, SPI, SERIAL, etc. Further details how the pin out is supposed to work can be found in the resources folder, of course since we know now what MCU pins go to what PCB pins we can change the board.h depending on what you want to achieve with the board. For more information you nay want to have a look at https://github.com/piwi1263/Molecules Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/index.html": {
    "href": "content/community-targets/index.html",
    "title": "Community provided target boards | nanoFramework Documentation",
    "keywords": "Community provided target boards There is a GitHub repository that holds target boards provided by community members. Check it here . These boards are NOT maintained by the core team and any related questions or issues about them should be addressed to the target owner . STMicroelectronics boards ESP32 ULX3S GHI FEZ Cerb40 Ingenuity Micro Electron Ingenuity Micro Oxygen ST_NUCLEO144_F412ZG_NF ST_NUCLEO144_F439ZI ST_NUCLEO144_F746ZG ST_NUCLEO64_F401RE_NF ST_NUCLEO64_F411RE_NF ST_STM32F4_DISCOVERY ST_STM32F411_DISCOVERY TI CC1352P1_LAUNCHXL PYBStick Standard 26 BrainPad2 QUAIL"
  },
  "content/community-targets/mbn-quail.html": {
    "href": "content/community-targets/mbn-quail.html",
    "title": "Mikrobus Net QUAIL | nanoFramework Documentation",
    "keywords": "Mikrobus Net QUAIL Product page Firmware images (ready to deploy)"
  },
  "content/community-targets/pybstick2x.html": {
    "href": "content/community-targets/pybstick2x.html",
    "title": "PYBStick Standard 26 | nanoFramework Documentation",
    "keywords": "PYBStick Standard 26 The board used in this community contribution is a STM32F411RE based board from MCHobby and Garatronic. This board has multiple functions and they are pre setup like this in the picture. Please note that only SPI1 is pre setup, the 2 I2C are available, all ADC can be used. Only UART2 (RX PA3, TX PA2) is setup. Here are the corresponding pin number for ADC: S8 = PA2 = ADC1 channel 0 S10 = PA3 = ADC1 channel 1 S12 = PA0 = ADC1 channel 2 S26 = PA4 = ADC1 channel 3 S23 = PA5 = ADC1 channel 4 S19 = PA7 = ADC1 channel 5 Temperature (not accurate) = ADC1 channel 6 Reference voltage (1.21 V) = ADC1 channel 7 Battery voltage =ADC1 channel 8 Pins for SPI1: S23 = PA5 = Clock S21 = PB4 = MISO S19 = PA7 = MOSI You can use any chip select. S26 = PA4 is a hardware one Pins for I2C1: S3 = PB9 = SDA S5 = PB8 = SCL Pins for I2C2: S11 = PB3 = SDA S13 = PB10 = SCL Pins for UART2 = COM2 S8 = PA2 = TX S10 = PA3 = RX Pins for PWM: S8 = PA2 S10 = PA3 S12 = PA0 S16 = PB13 S18 = PB14 S3 = PB9 S5 = PB8 S7 = PB6 S19 = PA7 S21 = PB4 Note: none of the TIM2 pins are activated Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/ST_NUCLEO144_F412ZG_NF.html": {
    "href": "content/community-targets/ST_NUCLEO144_F412ZG_NF.html",
    "title": "ST Nucleo F412ZG | nanoFramework Documentation",
    "keywords": "ST Nucleo F412ZG The board used in this community contribution is the NUCLEO144_F412ZG board from ST. The board can be purchased from various sources and should be about 20 euros. Further information on the Nucleo144 boards can be found in the user manuals UM1727 or UM1974 on the ST side ( www.st.com ). Some basic information abstracted from ST: STM32F412ZGT6 100MHz Cortex-M4F core microcontroller with 1MB Flash memory, 256KB SRAM Adaptive real-time accelerator (ART Accelerator™) allowing 0-wait state execution from Flash memory Full access to all GPIO with ST Zio connector (Arduino Uno v3 connectivity support) ST morpho extension pin headers for access to all GPIO ST-LINK/V2-1 debugger/programmer with SWD connector Up to 17 serial communication interfaces: USART, IrDA, I²C, SPI, LIN, CAN, USB, I²S, SDIO Flexible board power supply USB OTG or FS Device with micro-AB connector True random number generator CRC calculation unit RTC with subsecond accuracy and hardware calendar 96-bit unique ID 3 x LEDs: Power LED, USB communication, User LED User and Reset pushbuttons 32.768 KHz crystal oscillator Since the board has two MicroUSB connectors so you can use one for flashing the nanoFramework firmware and use for debugging purposes on the ST Link side and the other for a connection that can be used against VS to be recognized as a nanoFramework device to run your C# managed application. Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/st_nucleo144_f439zi.html": {
    "href": "content/community-targets/st_nucleo144_f439zi.html",
    "title": "STM NUCLEO144 F439ZI board | nanoFramework Documentation",
    "keywords": "STM NUCLEO144 F439ZI board The board used in this community contribution is the NUCLEO144 F439ZI board from STM. The board can be purchased from various sources and should be about 23 euros. Further information on this board and links for the user and programming manuals can be found at the product page in ST website . Some basic information abstracted from ST: STM32 microcontroller in LQFP144 package External SMPS to generate Vcore logic supply (only available on '-P' suffixed boards) Ethernet compliant with IEEE-802.3-2002 (depending on STM32 support) USB OTG or full-speed device (depending on STM32 support) 3 user LEDs User and reset push-buttons 32.768 kHz crystal oscillator Board connectors: USB with Micro-AB SWD Ethernet RJ45 (depending on STM32 support) ST Zio connector including Arduino™ Uno V3 ST morpho Flexible power-supply options: ST-LINK USB VBUS or external sources On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration capability: mass storage, virtual COM port and debug port Flashing and debugging This board has two micro USB connectors. One is exposing the embedded ST-Link interface that is used for flashing the nanoFramework firmware and for performing debugging on the nanoCLR code. The second is used to connect the device with Visual Studio allowing to deploy and debug your C# managed applications. Floating point The current build is set to add support for single-precision floating point. Meaning that System.Math API supports only the float overloads. The double ones will throw a NotImplementedException . Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/ST_NUCLEO64_F401RE_NF.html": {
    "href": "content/community-targets/ST_NUCLEO64_F401RE_NF.html",
    "title": "ST Nucleo 64 F401RE NF | nanoFramework Documentation",
    "keywords": "ST Nucleo 64 F401RE NF The board used in this community contribution is the NUCLEO64_F401RE board from ST. The board can be purchased from various sources and should be about 20 euros. Further information on the Nucleo64 boards can be found in the user manual UM1724 on the ST side ( www.st.com ). The board used here is of revision c as can be found on the board's lower backside sticker. The board MB1136 C-02 is configured to use ST-LINK MCO as clock input for HSE so we have an HSE of 8 MHz. Plus X2 is mounted so we do have an LSE as well. This is reflected in the mcuconf.h in both nanoBooter and nanoCLR paths. If it is chosen to activate LSE as this is a for more accurate clock for RTC, the board.h file needs to be adjusted accordingly to use 32768 frequency for LSE. I prepared a custom made a 4-wire jumper to USB cable by cutting off one end (Type A part) and figuring out the required D+, D-, 5V and GND. These need to be connected as follows: USB V5 -> Can be ignored USB GND -> GND on CN7 USB D- -> PA11 on CN10 (outer row 7th pin from top) USB D+ -> PA12 on CN10 (outer row 6th pin from top) Once these are connected and nanoFramework is flashed using the STM32 ST-LINK Utility the device should be visible in the Printf via SWO viewer function in the ST-LINK utility. Please set the frequency to match to what has been set in mcuconf.h (for the STM32F401RE it is 84MHz) and the Stimulus port to 0 and than hit start. If the board doesn't show then a reset (Black button on board) should do it. We can now fire up Visual Studio and view the Device explorer window the board should be visible there as well. Select the board (if not done already) and hit the device capabilities button. The board specifics can than be seen in the output window. Now you can start your adventure in the nanoFramework world and use one of the samples and adjust to the board specific features. Try to make a sample of yourself and publish it on f.e. www.hackster.io to show your achievement. For your convenience I've listed below the features and on what pins they can be found to help you out for an easy start. Arduino header pins D0 = COM2 RX D1 = COM2 TX D2 - D9 can be used for an intermix of GPIO and PWM D14 = I2C1 SDA D15 = I2C1 SCL A0 - A5 for Analog signal, please be aware the MCU has only one 12-bit ADC. Connector CN7 1 = SPI3 SCK 2 = SPI3 MISO 3 = SPI3 MOSI Connector CN10 26 = SPI2 MOSI 28 = SPI2 MISO 30 = SPI2 SCK NOTE: This configuration was successfully tested on a NUCLEO64_F401RE board. Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/ST_NUCLEO64_F411RE_NF.html": {
    "href": "content/community-targets/ST_NUCLEO64_F411RE_NF.html",
    "title": "ST Nucleo 64 F411RE NF | nanoFramework Documentation",
    "keywords": "ST Nucleo 64 F411RE NF The board used in this community contribution is the NUCLEO64_F411RE board from ST. The board can be purchased from various sources and should be about 20 euros. Further information on the Nucleo64 boards can be found in the user manual UM1724 on the ST side ( www.st.com ). The board used here is of revision c as can be found on the board's lower backside sticker. The board MB1136 C-02 is configured to use ST-LINK MCO as clock input for HSE so we have an HSE of 8 MHz. Plus X2 is mounted we do have an LSE as well. This is reflected in the mcuconf.h in both nanoBooter and nanoCLR paths. If it is chosen to activate LSE as this is a more accurate clock for RTC then board.h file needs to be adjusted accordingly to use 32768 frequency for LSE. Serial port 2 (USART2) is used to communicate thru the ST-Link connector, so only one Mini-USB cable is used to start the nanoFramework adventure. The nanoFramework firmware can be flashed using the nanoFramework Firmware Flasher (nanoff) in the package manager console. If you are not familiar with nanoff look on https://github.com/nanoframework/nanoFirmwareFlasher for more info. The firmware can still be flashed using the STM32 ST-LINK Utility if you prefer. The device should be visible in the Printf via SWO viewer function in the ST-LINK utility. Please set the frequency to match to what has been set in mcuconf.h (here 96000000) and the Stimulus port to 0 and than hit start. If the board doesn't show then a reset (Black button on board) could be of help or a power cycle by disconnecting, connecting the Mini-USB cable and try ST-LINK Utility again. In Visual Studio and with nanoFramework extension being installed, open the Device Explorer window and the board should be visible. Select the board and press the Device Capability button. The board specifics should be visible in the output window. Now you can start your adventure in the nanoFramework world and use one of the samples and adjust to the board specific features. Try to make a sample of yourself and publish it on f.e. www.hackster.io to show your achievement. For your convenience listed below are the features currently set and on what pins they can be found to help you out for an easy start. Arduino header pins D0, D1 can not be used as serial connection is used for nanoFramework communication. Plus the required solder bridges are not fitted by default. D2 - D10 can be used for an intermix of GPIO and PWM D11 - D13 are setup and configured for SPI1 however the on board LED (LD2) is connected to D13 as well and might be of influence. In that case solder bridge SB21 needs to be removed. D14 = I2C1 SDA D15 = I2C1 SCL A0 = ADC1 Channel 1 A1 = ADC1 Channel 2 A2 = ADC1 Channel 3 A3 = ADC1 Channel 4 A4 = ADC1 Channel 5 A5 = ADC1 Channel 6 Connector CN7 1 = SPI3 SCK 2 = SPI3 MISO 3 = SPI3 MOSI 17 = USART1 TX 21 = USART1 RX Connector CN10 12 = USART6 RX 14 = USART6 TX 26 = SPI2 MOSI 28 = SPI2 MISO 30 = SPI2 SCK NOTE: This configuration was successfully tested on a NUCLEO64_F411RE board. Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/stm32f411-discovery.html": {
    "href": "content/community-targets/stm32f411-discovery.html",
    "title": "STMicroelectronics STM32F411DISCOVERY | nanoFramework Documentation",
    "keywords": "STMicroelectronics STM32F411DISCOVERY The STM32F411 Discovery board offers the following features: STM32F411VET6 microcontroller featuring 512 KB of Flash memory, 128 KB of RAM in an LQFP100 package On-board ST-LINK/V2 with selection mode switch to use the kit as a standalone STLINK/V2 (with SWD connector for programming and debugging) Board power supply: through USB bus or from an external 5 V supply voltage External application power supply: 3 V and 5 V L3GD20, ST MEMS motion sensor, 3-axis digital output gyroscope. LSM303DLHC, ST MEMS system-in-package featuring a 3D digital linear acceleration sensor and a 3D digital magnetic sensor. MP45DT02, ST MEMS audio sensor, omnidirectional digital microphone CS43L22, audio DAC with integrated class D speaker driver Eight LEDs: LD1 (red/green) for USB communication LD2 (red) for 3.3 V power on Four user LEDs: LD3 (orange), LD4 (green), LD5 (red) and LD6 (blue) Two USB OTG LEDs: LD7 (green) VBus and LD8 (red) over-current Two pushbuttons (user and reset) USB OTG with micro-AB connector Extension header for LQFP100 I/Os for a quick connection to the prototyping board and an easy probing More info about the board can be found at the product website Hardware The STM32F411E-DISC0 Discovery board contains the following components: STM32F411VET6 in LQFP100 package ARM® 32-bit Cortex® -M4 CPU with FPU 100 MHz max CPU frequency VDD from 1.7 V to 3.6 V 512 KB Flash 128 KB SRAM GPIO with external interrupt capability 1x12-bit, 2.4 MSPS ADC with 16 channels DMA Controller Up to 11 Timers (six 16-bit, two 32-bit, two watchdog timers and a SysTick timer) USART/UART (3) I2C (3) SPI/I2S (5) SDIO USB 2.0 full-speed device/host/OTG controller with on-chip PHY CRC calculation unit 96-bit unique ID RTC More information about STM32F411VE can be found here: STM32F411VE website STM32F411x reference manual Supported features There are 5 GPIO controllers on the discovery board responsible for the pin usage, their configuration can be found in the header file responsible for it Basic peripherals available in nanoFramework: USART 1, USART2 I2C1, I2C3 SPI1, SPI2 5 ADC channels I2S3 OTG User Button 4 User LEDs Gyroscope Acceleration sensor Magnetic sensor Audio DAC Please note that I2C1, SPI1 and I2S3 are used by the on board sensors, audio DAC and can not be used for generic use therefore I2C3 and SPI2 have been made available. For more details on what pins the on board sensors can be addressed please refer to the board's user manual and the previous mentioned header file or the corresponding configuration file in the board's root folder. MCU Clock usage On this board there is no LSE (Low Speed External) XTal fitted. When looking at the board's picture you'll see that there is no X3 (right side and above the main MCU). In case an LSE is soldered do not forget to reflect that in the mcuconf.h files. Serial port There is no VCP support for the on board ST-Link/V2. That's why a seperate UART-2-USB adapter/converter has to be connected in order to communicate with Visual Studio. This is done thru nanoFramework's wire protocol which is assigned to USART2. Pins PA2, PA3 and a GND pin are needed to establish a serial connection between the discovery board and Visual Studio. Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/stm32f4-discovery.html": {
    "href": "content/community-targets/stm32f4-discovery.html",
    "title": "STMicroelectronics STM32F4DISCOVERY | nanoFramework Documentation",
    "keywords": "STMicroelectronics STM32F4DISCOVERY Product page The board used in this community contribution is the STM32F4DISCOVERY board from STM. The board can be purchased from various sources and should be about 20 euros. Further information on this board and links for the user and programming manuals can be found at the product page in ST website . Some basic information abstracted from ST: STM32F407VGT6 microcontroller featuring 32-bit ARM®Cortex®-M4 with FPU core, 1-Mbyte Flash memory, 192-kbyte RAM in an LQFP100 package On-board ST-LINK/V2 on STM32F4DISCOVERY (old reference) or ST-LINK/V2-A on STM32F407G-DISC1 (new order code) USB ST-LINK with re-enumeration capability and three different interfaces: Debug port Virtual Com port (with new order code only) Mass storage (with new order code only) Board power supply: through USB bus or from an external 5 V supply voltage External application power supply: 3 V and 5 V LIS302DL or LIS3DSH ST MEMS 3-axis accelerometer MP45DT02 ST-MEMS audio sensor omni-directional digital microphone CS43L22 audio DAC with integrated class D speaker driver Eight LEDs: LD1 (red/green) for USB communication LD2 (red) for 3.3 V power on Four user LEDs, LD3 (orange), LD4 (green), LD5 (red) and LD6 (blue) 2 USB OTG LEDs LD7 (green) VBUS and LD8 (red) over-current Two push-buttons (user and reset) USB OTG FS with micro-AB connector Extension header for all LQFP100 I/Os for quick connection to prototyping board and easy probing Flashing and debugging This board has one mini USB connector exposing the embedded ST-Link interface that is used for flashing the nanoFramework firmware and for performing debugging on the nanoCLR code. The second USB connector (a micro USB one) is used to connect the device with Visual Studio allowing to deploy and debug your C# managed applications. ADC configurations The following ADC channels (and respective GPIO pins) are available to the managed API, in the respective index: PC1, ADC1 IN11 PC2 ADC1 IN12 PA6 ADC2 IN6 PA7 ADC2 IN7 PB0 ADC2 IN8 Temp Sensor ADC1 VrefInt ADC1 Vbatt ADC1 I2C configurations I2C buses available: I2C1 SCL pin: GPIOB_8 SDA pin: GPIOB_9 Floating point The current build is set to add support for single-precision floating point. Meaning that System.Math API supports only the float overloads. The double ones will throw a NotImplementedException . Firmware images (ready to deploy) Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/st-nucleo144-f746zg.html": {
    "href": "content/community-targets/st-nucleo144-f746zg.html",
    "title": "STMicroelectronics NUCLEO144-F746ZG | nanoFramework Documentation",
    "keywords": "STMicroelectronics NUCLEO144-F746ZG Product page The board used in this community contribution is the NUCLEO144 F746ZG board from STM. The board can be purchased from various sources and should be about 23 euros. Further information on this board and links for the user and programming manuals can be found at the product page in ST website . Some basic information abstracted from ST: STM32 microcontroller in LQFP144 package External SMPS to generate Vcore logic supply (only available on '-P' suffixed boards) Ethernet compliant with IEEE-802.3-2002 (depending on STM32 support) USB OTG or full-speed device (depending on STM32 support) 3 user LEDs -2 user and reset push-buttons 32.768 kHz crystal oscillator Board connectors: USB with Micro-AB SWD Ethernet RJ45 (depending on STM32 support) ST Zio connector including Arduino™ Uno V3 ST morpho Flexible power-supply options: ST-LINK USB VBUS or external sources On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration capability: mass storage, virtual COM port and debug port Flashing and debugging This board has two micro USB connectors. One is exposing the embedded ST-Link interface that is used for flashing the nanoFramework firmware and for performing debugging on the nanoCLR code. The second is used to connect the device with Visual Studio allowing to deploy and debug your C# managed applications. Floating point The current build is set to add support for single-precision floating point. Meaning that System.Math API supports only the float overloads. The double ones will throw a NotImplementedException . Firmware images (ready to deploy) Managed helpers Checkout the C# managed helpers available for this board."
  },
  "content/community-targets/ti-cc1352p1-launchxl.html": {
    "href": "content/community-targets/ti-cc1352p1-launchxl.html",
    "title": "TI CC1352P1-LAUNCHXL | nanoFramework Documentation",
    "keywords": "TI CC1352P1-LAUNCHXL Product page Features CC1352R mcu CC3220SF single-chip wireless microcontroller Dual-Core Architecture: User-Dedicated Application MCU Subsystem Dedicated software controlled radio controller Powerful 48-MHz Arm® Cortex®-M4F processor Embedded Memory: 352kB of in-system Programmable Flash 256KB of ROM for protocols and library functions 8KB of Cache SRAM (Alternatively available as general-purpose RAM) 80KB of ultra-low leakage SRAM Peripherals: Digital peripherals can be routed to any GPIO 4× 32-bit or 8× 16-bit general-purpose timers 12-Bit ADC, 200 kSamples/s, 8 channels 2× comparators with internal reference DAC (1× continuous time, 1× ultra-low power) Programmable current source 2× UART 2× SSI (SPI, MICROWIRE, TI) I2C I2S Real-Time Clock (RTC) AES 128- and 256-bit Crypto Accelerator ECC and RSA Public Key Hardware Accelerator SHA2 Accelerator (Full suite up to SHA-512) True Random Number Generator (TRNG) Capacitive sensing, up to 8 channels Integrated temperature and battery monitor Radio section Multi-band sub-1 GHz and 2.4 GHz RF transceiver compatible with Bluetooth 5 Low Energy and IEEE 802.15.4 PHY and MAC Excellent receiver sensitivity: –121 dBm for SimpleLink long-range mode –110 dBm at 50 kbps, –105 dBm for Bluetooth 125-kbps (LE Coded PHY) Output power up to +14 dBm (Sub-1 GHz) and +5 dBm (2.4 GHz) with temperature compensation Suitable for systems targeting compliance with worldwide radio frequency regulations ETSI EN 300 220 Receiver Category 1.5 and 2, EN 300 328, EN 303 131, EN 303 204 (Europe) EN 300 440 Category 2 FCC CFR47 Part 15 ARIB STD-T108 and STD-T66 Wide standard support Output power up to +20 dBm with temperature compensation Wireless protocols Thread Zigbee® Bluetooth® 5 Low Energy IEEE 802.15.4g IPv6-enabled smart objects (6LoWPAN), Wireless M-Bus Wi-SUN® KNX RF proprietary systems SimpleLink™ TI 15.4-Stack (Sub-1 GHz) Dynamic Multiprotocol Manager (DMM) Launchpad board LaunchPad with 2.4GHz and Sub-1GHz radio for wireless applications with integrated PCB trace antenna Broad band antenna supports both 868 MHz ISM band for Europe and 915 MHz ISM band for US with a single board On-board emulator gets you started with instant code development in CCS Cloud Can be used with both LaunchPad kit and SmartRF™ Studio applications Access all I/O signals with the BoosterPack plug-in module connectors Compatible with LCD BoosterPack Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️"
  },
  "content/contributing/api-review-process.html": {
    "href": "content/contributing/api-review-process.html",
    "title": "API review process | nanoFramework Documentation",
    "keywords": "API review process We're working on it! Stay tuned! Raise PR and that will help us finding good recommendations."
  },
  "content/contributing/cla.html": {
    "href": "content/contributing/cla.html",
    "title": "nanoFramework Individual Contributor License Agreement | nanoFramework Documentation",
    "keywords": "nanoFramework Individual Contributor License Agreement Thank you for your interest in contributing to nanoFramework (\"We\" or \"Us\"). This contributor agreement (\"Agreement\") documents the rights granted by contributors to Us. To make this document effective, please sign electronically using the CLA assistant tool. This is a legally binding document, so please read it carefully before agreeing to it. The Agreement may cover more than one software project managed by Us. 1. Definitions \"You\" means the individual who Submits a Contribution to Us. \"Contribution\" means any work of authorship that is Submitted by You to Us in which You own or assert ownership of the Copyright. If You do not own the Copyright in the entire work of authorship, please follow the instructions in . \"Copyright\" means all rights protecting works of authorship owned or controlled by You, including copyright, moral and neighboring rights, as appropriate, for the full term of their existence including any extensions by You. \"Material\" means the work of authorship which is made available by Us to third parties. When this Agreement covers more than one software project, the Material means the work of authorship to which the Contribution was Submitted. After You Submit the Contribution, it may be included in the Material. \"Submit\" means any form of electronic, verbal, or written communication sent to Us or our representatives, including but not limited to electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, Us for the purpose of discussing and improving the Material, but excluding communication that is conspicuously marked or otherwise designated in writing by You as \"Not a Contribution.\" \"Submission Date\" means the date on which You Submit a Contribution to Us. \"Effective Date\" means the date You execute this Agreement or the date You first Submit a Contribution to Us, whichever is earlier. 2. Grant of Rights 2.1 Copyright License (a) You retain ownership of the Copyright in Your Contribution and have the same rights to use or license the Contribution which You would have had without entering into the Agreement. (b) To the maximum extent permitted by the relevant law, You grant to Us a perpetual, worldwide, non-exclusive, transferable, royalty-free, irrevocable license under the Copyright covering the Contribution, with the right to sublicense such rights through multiple tiers of sublicensees, to reproduce, modify, display, perform and distribute the Contribution as part of the Material; provided that this license is conditioned upon compliance with Section 2.3. 2.2 Patent License For patent claims including, without limitation, method, process, and apparatus claims which You own, control or have the right to grant, now or in the future, You grant to Us a perpetual, worldwide, non-exclusive, transferable, royalty-free, irrevocable patent license, with the right to sublicense these rights to multiple tiers of sublicensees, to make, have made, use, sell, offer for sale, import and otherwise transfer the Contribution and the Contribution in combination with the Material (and portions of such combination). This license is granted only to the extent that the exercise of the licensed rights infringes such patent claims; and provided that this license is conditioned upon compliance with Section 2.3. 2.3 Outbound License As a condition on the grant of rights in Sections 2.1 and 2.2, We agree to license the Contribution only under the terms of the license or licenses which We are using on the Submission Date for the Material (including any rights to adopt any future version of a license if permitted). 2.4 Moral Rights If moral rights apply to the Contribution, to the maximum extent permitted by law, You waive and agree not to assert such moral rights against Us or our successors in interest, or any of our licensees, either direct or indirect. 2.5 Our Rights You acknowledge that We are not obligated to use Your Contribution as part of the Material and may decide to include any Contribution We consider appropriate. 2.6 Reservation of Rights Any rights not expressly licensed under this section are expressly reserved by You. 3. Agreement You confirm that: (a) You have the legal authority to enter into this Agreement. (b) You own the Copyright and patent claims covering the Contribution which are required to grant the rights under Section 2. (c) The grant of rights under Section 2 does not violate any grant of rights which You have made to third parties, including Your employer. If You are an employee, You have had Your employer approve this Agreement or sign the Entity version of this document. If You are less than eighteen years old, please have Your parents or guardian sign the Agreement. (d) You have followed the instructions in , if You do not own the Copyright in the entire work of authorship Submitted. 4. Disclaimer EXCEPT FOR THE EXPRESS WARRANTIES IN SECTION 3, THE CONTRIBUTION IS PROVIDED \"AS IS\". MORE PARTICULARLY, ALL EXPRESS OR IMPLIED WARRANTIES INCLUDING, WITHOUT LIMITATION, ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE EXPRESSLY DISCLAIMED BY YOU TO US. TO THE EXTENT THAT ANY SUCH WARRANTIES CANNOT BE DISCLAIMED, SUCH WARRANTY IS LIMITED IN DURATION TO THE MINIMUM PERIOD PERMITTED BY LAW. 5. Consequential Damage Waiver TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT WILL YOU BE LIABLE FOR ANY LOSS OF PROFITS, LOSS OF ANTICIPATED SAVINGS, LOSS OF DATA, INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL AND EXEMPLARY DAMAGES ARISING OUT OF THIS AGREEMENT REGARDLESS OF THE LEGAL OR EQUITABLE THEORY (CONTRACT, TORT OR OTHERWISE) UPON WHICH THE CLAIM IS BASED. 6. Miscellaneous 6.1 This Agreement will be governed by and construed in accordance with the laws of excluding its conflicts of law provisions. Under certain circumstances, the governing law in this section might be superseded by the United Nations Convention on Contracts for the International Sale of Goods (\"UN Convention\") and the parties intend to avoid the application of the UN Convention to this Agreement and, thus, exclude the application of the UN Convention in its entirety to this Agreement. 6.2 This Agreement sets out the entire agreement between You and Us for Your Contributions to Us and overrides all other agreements or understandings. 6.3 If You or We assign the rights or obligations received through this Agreement to a third party, as a condition of the assignment, that third party must agree in writing to abide by all the rights and obligations in the Agreement. 6.4 The failure of either party to require performance by the other party of any provision of this Agreement in one situation shall not affect the right of a party to require such performance at any time in the future. A waiver of performance under a provision in one situation shall not be considered a waiver of the performance of the provision in the future or a waiver of the provision in its entirety. 6.5 If any provision of this Agreement is found void and unenforceable, such provision will be replaced to the extent possible with a provision that comes closest to the meaning of the original provision and which is enforceable. The terms and conditions set forth in this Agreement shall apply notwithstanding any failure of essential purpose of this Agreement or any limited remedy to the maximum extent possible under law."
  },
  "content/contributing/coding-contributions.html": {
    "href": "content/contributing/coding-contributions.html",
    "title": "Coding contributions to .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Coding contributions to .NET nanoFramework API review process Contribution workflow C# Coding Style C/C++ Coding Style GitHub Labels Project priorities Contribution License Agreement Developing native code Debug with VS Code Debug class libraries and startup Use a viewer to watch output from Cortex-M SWO"
  },
  "content/contributing/contributing-individuals.html": {
    "href": "content/contributing/contributing-individuals.html",
    "title": "Individuals contributing or helping .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Individuals contributing or helping .NET nanoFramework .NET nanoFramework was started from individual contributions and keeps growing based on those. That's very important for the project and we sure would love to have you onboard! The project needs people with skills on C/C++ and C# and Azure DevOps. No need to be a subject matter expert! Even the smallest contribution matters. We welcome embedded system developers familiar with platforms we target, including: ESP32, STM32, TI CC32xx and NXP. Or are familiar with RTOSes, including: FreeRTOS, ChibiOS and TI SimpleLink. C# developers with general coding experiencing, coding Visual Studio extension development, coding with Visual Studio debugging components, willing to write unit tests. Technical writers that want to get experience, gain knowledge on a new platform or technology or just wanting to contribute voluntarily. Designers, video editors, web designers and people with marketing and PR skills. Basically the project can benefit from good communication, presenting good and nice looking materials, provide great and engaging training materials. Code of conduct This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community. Contributing guide Please read our Contribution Workflow to get an idea on the matter and hopefully get you started on your first Pull Request! ;)"
  },
  "content/contributing/contributing-organizations.html": {
    "href": "content/contributing/contributing-organizations.html",
    "title": "Organizations contributing or helping .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Organizations contributing or helping .NET nanoFramework Organizations contributing to .NET nanoFramework These companies and organizations contribute to the develop effort of .NET nanoFramework . Eclo Solutions that allows José Simões and other developers of it's team to work for .NET nanoFramework on their work hours, along with providing Azure infrastructure to run nfbot and that has paid .NET nanoFramework bills during the early stages. Global Control 5 Ltd. which has contributed with NXP port and the NXP_MIMXRT1060_EVK reference target. OrgPal that has commissioned the development of several .NET nanoFramework features. Organizations helping .NET nanoFramework These companies and organizations support the community and the project. .NET Foundation hosts the project under the .NET umbrella . ChibiOS that provides us with an awesome RTOS that's used in our STM32 targets. GitHub that hosts our git repositories. Icons 8 that allows to use their icons on our Visual Studio extension. Cloudsmith provides us free hosting and distribution for our firmware images and other utils used in the build process. Cloudsmith is a fully hosted, cloud-native, universal package management solution, that enables your organization to create, store and share packages in any format, to any place, with total confidence. Microsoft through free Azure DevOps that runs our CD & CI infrastructure. Sonar Cloud by providing free access to their Continuous Code Quality analysis tools. Projects and communities supporting .NET nanoFramework AMQP.Net Lite the awesome AMQP library developed by Xin Chen . Nerdbank.GitVersioning package from Andrew Arnott that provides semver-compatible git commit information and that we use on all our class libraries."
  },
  "content/contributing/contributing-workflow.html": {
    "href": "content/contributing/contributing-workflow.html",
    "title": "Contribution Workflow | nanoFramework Documentation",
    "keywords": "Contribution Workflow You can contribute to .NET nanoFramework with issues and PRs. Simply filing issues for problems you encounter is a great way to contribute. Contributing implementations is greatly appreciated. Getting Started If you are looking at getting your feet wet with some simple (but still beneficial) changes, check out up-for-grabs issues on the .NET nanoFramework Home repo. For new ideas, please always start with an issue before starting development of an implementation. See project priorities to understand the team's approach to engagement on general improvements to the product. You do not need to file an issue for trivial changes (e.g. typo fixes). Just create a PR for those changes. Making a change Make a quality change. Consider and document (preferably with tests) as many usage scenarios as you can to ensure that your change will work correctly in the myriad of ways it might get used. There are several issues to keep in mind when making a change. Typos Typos are embarrassing! We will accept most PRs that fix typos. In order to make it easier to review your PR, please focus on a given component with your fixes or on one type of typo across the entire repository. If it's going to take >30 mins to review your PR, then we will probably ask you to chunk it up. Coding Style Changes We would like to have .NET nanoFramework in full conformance with the style guidelines described here C/C++ Coding Style and here C# Coding Style . We plan to do that with tooling, in a holistic way. In the meantime, please: DO NOT send PRs for style changes. DO give priority to the current style of the project or file you're changing even if it diverges from the general guidelines. Commit Messages Please format commit messages as follows (based on this excellent post ): Summarize change in 50 characters or less Provide more detail after the first line. Leave one blank line below the summary and wrap all lines at 72 characters or less. If the change fixes an issue, leave another blank line after the final paragraph and indicate which issue is fixed in the specific format below. Fix #42 Also do your best to factor commits appropriately, i.e. not too large with unrelated things in the same commit, and not too small with the same small change applied N times in N different commits. If there was some accidental reformatting or whitespace changes during the course of your commits, please rebase them away before submitting the PR. Signing off your commit messages We recommend (although is not mandatory) that you include a Signed-off-by line in the commit message: Signed-off-by: Joe Smith <joe.smith@email.com> The project requires that the name used is your real name. Neither anonymous contributions nor those utilizing pseudonyms will be accepted. Contributor License Agreement Why a CLA The Contributor License Agreement helps ensure everyone that .NET nanoFramework is here to stay. Specifically, our Contributor License Agreements (CLAs) grant the contributor and .NET nanoFramework joint copyright interest in contributed code. Further, it provides assurance from the contributor that contributions are original work that does not violate any third-party license agreement. The agreement between contributors and project is explicit, so developers and users can be confident in the legal status of the source code and their right to use it. Our CLA's All contributions to .NET nanoFramework (no matter if that's code, bug fixes, configuration changes, documentation, or anything else) requires that the contributor(s) complete and sign a Contributor License Agreement. You can read it here . .NET nanoFramework team and community members will provide feedback on your change. Community feedback is highly valued. You will often see the absence of team feedback if the community has already provided good review feedback. PR Feedback .NET nanoFramework team and community members will provide feedback on your change. Community feedback is highly valued. You will often see the absence of team feedback if the community has already provided good review feedback. One or more .NET nanoFramework team members will review every PR prior to merge. They will often reply with \"LGTM, modulo comments\". That means that the PR will be merged once the feedback is resolved. \"LGTM\" == \"looks good to me\". There are lots of thoughts and approaches for how to efficiently discuss changes. It is best to be clear and explicit with your feedback. Please be patient with people who might not understand the finer details about your approach to feedback. Also don't think that comments and requests for changes means that your contribution is not appreciated and people can be stalling or discouraging you. You may have done a wonderful job on the task at hand but, as it's still part of a very large software project, there could be implications on aspects that you might not be aware of, or that it's impacting or causing side effects on other parts. Keep an open mind and positive attitude! 😉 .NET nanoFramework project uses many labels for categorizing issues and pull requests. Check here the full list. Working on an open issue When you want to work on an open issue (including up-for-grabs ) we recommend the following. Issues labeled with investigating : if the current status doesn't seem updated or clear, add a comment asking for clarification before start any work on it. Issues labeled with under-review : if the current status doesn't seem updated or clear, add a comment asking for a clarification before start any work on it. Issues labeled with up-for-grabs : add a comment stating your interest and the issue will be assigned to you and the label switched to in progress . Suggested Workflow We use and recommend the following workflow: Create an issue for your work. You can skip this step for trivial changes. Reuse an existing issue on the topic, if there is one. Get agreement from the team and the community that your proposed change is a good one. If your change adds a new API, follow the API Review Process . Clearly state that you are going to take on implementing it, if that's the case. You can request that the issue be assigned to you. Note: The issue filer and the implementer don't have to be the same person. Create a personal fork of the repository on GitHub (if you already have one you can jump straight to step 5 bellow). Forking the repository is a simple click on the \"Fork\" button (at the top right corner) on the repositories page in GitHub. Clone that new fork to your local system. This operation depends heavily on what local client you are going to use in order to manage your local clone. There are a number of clients, from Git command line to more sophisticated and GUI clients. GitHub has it's own desktop client . There is an extension for Visual Studio . Visual Studio Code has it's owned Git client baked in. There is also the popular Tower and many others. If you are using a GUI client don't bother with the the git command lines shown bellow. Cloning locally is a simple click on the green \"Clone or Download\" button (at the top right corner) that shows on your personal fork in GitHub. You can also perform this operation locally. Directly from your Git client or from the git command line: git clone https://github.com/<your-github-id-here>/<nf-repo-name-here>.git Configure a remote upstream to the master repository. git remote add upstream https://github.com/nanoframework/<nf-repo-name-here>.git Make sure that your develop branch is in sync with the master develop branch. git checkout develop git pull upstream develop Create a branch off of develop branch. git checkout -b <branch-name-here> develop We suggest that you name the branch so that it clearly communicates your intentions, such as issue-123 or githubhandle-issue . Don't use a branch name starting with develop because that may be mistaken with the develop branches on the master repository. Branches are useful since they isolate your changes from incoming changes from upstream. They also enable you to create multiple PRs from the same fork. Work your way through the changes and commit them using your Git client or the command line as you prefer. Please follow our Commit Messages guidance. Include Signed-off-by line, e.g. git commit -s Add new tests corresponding to your change, if applicable. Build the repository with your changes. Make sure that the builds are clean. Make sure that the tests are all passing, including any new tests that you've added. If you've been working in this branch and changes have been made in upstream develop, you should rebase the working branch on the upstream develop branch so that your work shows on top of any other changes. If you have just created your working branch you can skip this step. git rebase upstream/develop Push your changes to your fork on GitHub (if you haven't already). git push origin <branch-name-here> Create a pull request (PR) against the upstream repository's develop branch. Creating a PR is a simple click on the \"Pull Request\" button that shows on your personal fork in GitHub. There is a template for the PR message. We ask you to follow it. It has the required topics and placeholders for what is required to make it clear. Also acts as a check list for you as the submitter. When starting a PR GitHub will show you if you repo is up to date with the master one and if a merge is OK. If there are differences showing you have to go back to you local clone and merge those into your local clone. After doing that it's advisable to re-run the build and tests because there could have been changed brought in that affected your code. After the above succeeds you have to push the changes up to origin repeating step 10 above. Note 1: It is OK for your PR to include a large number of commits. If that's the case, once your change is accepted, you can be asked to squash your commits into one or some appropriately small number of commits before your PR is merged. Note 2: It is OK to create your PR as \"[WIP]\" on the upstream repo before the implementation is done. This can be useful if you'd like to start the feedback process concurrent with your implementation. State that this is the case in the initial PR comment. Note 3: If you are working on a feature that has high impact or it's something experimental, your original PR can have it's target branch moved into a new develop branch in the master repo, something like develop-shiny-awesome-feature . General git resources If you are coming from another version control system git can feel daunting, awkward, confusing and may cause you frustration. ⚠️ Be warned about that! ⚠️ 😜 We suggest that you go through some basic tutorial and give it a try on a test repo that you setup for yourself. Here are a few resources that we've compiled to get you up to speed. No claims that these are, by any stretch, the only or the better ones! You can find a bunch of these out there! GitHub trial site . Gives you a nice tour of git. Get your feet wet without even installing software! GitHub help page Deals with basic usage, concepts and terms of git and github. Good to get a first idea. Git Reference . Nice and concise reference of the essential functions of git. Takes about 30min to read through, you'll come out smarter at the end. The git community book . This book is meant to help you learn how to use Git as quickly and easily as possible. Escape a git mess step-by-step . Humorous and handy workflow to help you when you get stuck with git and your blood pressure starts to rise."
  },
  "content/contributing/cs-coding-style.html": {
    "href": "content/contributing/cs-coding-style.html",
    "title": "C# Coding Style | nanoFramework Documentation",
    "keywords": "C# Coding Style For non code files (xml etc) our current best guidance is consistency. When editing files, keep new code and changes consistent with the style in the files. For new files, it should conform to the style for that component. Last, if there's a completely new component, anything that is reasonably broadly accepted is fine. The general rule we follow is \"use Visual Studio defaults\". For details check the Naming Guidelines of .NET guide. We use Allman style braces, where each brace begins on a new line. A single line statement block can go without braces but the block must be properly indented on its own line and it must not be nested in other statement blocks that use braces. We use four spaces of indentation (no tabs). We use _camelCase for internal and private fields and use readonly where possible. Prefix static fields with s_ and thread static fields with t_ . When used on static fields, readonly should come after static (i.e. static readonly not readonly static ). We avoid this. unless absolutely necessary. We always specify the visibility, even if it's the default (i.e. private string _foo not string _foo ). Visibility should be the first modifier (i.e. public abstract not abstract public ). Namespace imports should be specified at the top of the file, outside of namespace declarations and should be sorted alphabetically. Avoid more than one empty line at any time. For example, do not have two blank lines between members of a type. Avoid spurious free spaces. For example avoid if (someVar == 0)... , where the dots mark the spurious free spaces. Consider enabling \"View White Space (Ctrl+E, S)\" if using Visual Studio, to aid detection. If a file happens to differ in style from these guidelines (e.g. private members are named m_member rather than _member ), the existing style in that file takes precedence. We only use var when it's obvious what the variable type is (i.e. var stream = new FileStream(...) not var stream = OpenStandardInput() ). We use language keywords instead of BCL types (i.e. int, string, float instead of Int32, String, Single , etc) for both type references as well as method calls (i.e. int.Parse instead of Int32.Parse ). We use PascalCasing to name all our constant local variables and fields. The only exception is for interop code where the constant value should exactly match the name and value of the code you are calling via interop. We use nameof(...) instead of \"...\" whenever possible and relevant. Fields should be specified at the top within type declarations. We have provided a Visual Studio 2013 vssettings file nnnnn.vssettings at the root of each repository, enabling C# auto-formatting conforming to the above guidelines. Note that rules 7 and 8 are not covered by the vssettings, since these are not rules currently supported by VS formatting. Example File ObservableLinkedList`1.cs: using System; using System.Collections; using System.Collections.Generic; using System.Collections.Specialized; using System.ComponentModel; using System.Diagnostics; using Microsoft.Win32; namespace System.Collections.Generic { public partial class ObservableLinkedList<T> : INotifyCollectionChanged, INotifyPropertyChanged { private ObservableLinkedListNode<T> _head; private int _count; public ObservableLinkedList(IEnumerable<T> items) { if (items == null) throw new ArgumentNullException(nameof(items)); foreach (T item in items) { AddLast(item); } } public event NotifyCollectionChangedEventHandler CollectionChanged; public int Count { get { return _count; } } public ObservableLinkedListNode AddLast(T value) { var newNode = new LinkedListNode<T>(this, value); InsertNodeBefore(_head, node); } protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e) { NotifyCollectionChangedEventHandler handler = CollectionChanged; if (handler != null) { handler(this, e); } } private void InsertNodeBefore(LinkedListNode<T> node, LinkedListNode<T> newNode) { ... } ... } } ObservableLinkedList`1.ObservableLinkedListNode.cs: using System; namespace System.Collections.Generics { partial class ObservableLinkedList<T> { public class ObservableLinkedListNode { private readonly ObservableLinkedList<T> _parent; private readonly T _value; internal ObservableLinkedListNode(ObservableLinkedList<T> parent, T value) { Debug.Assert(parent != null); _parent = parent; _value = value; } public T Value { get { return _value; } } } ... } }"
  },
  "content/contributing/cxx-coding-style.html": {
    "href": "content/contributing/cxx-coding-style.html",
    "title": "C/C++ Coding Style | nanoFramework Documentation",
    "keywords": "C/C++ Coding Style For C/C++ files ( .c, .cpp and *.h), we use clang-format (version 3.10) to ensure code styling. The rules and config files are included in the nf-interpreter repository. Using Visual Studio Code If you are using Visual Studio Code we suggest that you install the Clang-Format extension . To have this extension working you need to have the clang-format.exe installed on your system. LLVM.org doesn't provide a separate installer for this tool so follows a quick and dirty way of getting it. Install the Clang-Format extension. Install the LLVM package from here . Take note of the path where you choose to install it. Back in VS Code, open the settings and adjust the entry for clang-format.executable with the path to the executable. The new setting file will have a new entry with something similar to the following: \"clang-format.executable\" : \"C:/Program Files/LLVM/bin/clang-format.exe\" You might have something slightly different in your setup. Just remember the following: add that setting, the path that you've copied before, change it to have forward slashes and add the clang-format.exe at the end. After following the above steps successfully you can now right click on any C, C++ or H file and hit 'Format Document'. The VS Code extension will take care that the document is properly formatted according to the coding style guidelines. When you have the extension installed, you can request VS Code to automatically format a file on save by adding the following to your vscode settings.json file: { \"editor.formatOnSave\": true } WARNING : you need to avoid automatic formating on 3rd party .h files as the foramatting can introduce many changes that add no value and make it very difficult to subsequintly compare the .h file with the orginal or with a template file when the external 3rd party software is updated. You can turn clang auto format 'off' and 'on' around code you don't what reformatted. Typically at the top of the file below the Copright notice turn off clang-formating with: // clang-format off and at the end of the file remember to turn it back on with: // clang-format on Using Visual Studio If you are using Visual Studio we suggest that you install the ClangFormat extension ."
  },
  "content/contributing/developer-guide.html": {
    "href": "content/contributing/developer-guide.html",
    "title": "Developer Guidelines | nanoFramework Documentation",
    "keywords": "Developer Guidelines We're working on it! Stay tuned! Raise PR and that will help us finding good recommendations. Until then, here follows some unsorted tips. These are not a full reference, but they give some clues on where to look next. Quick note about compatibility between managed and native parts There is an interface mechanism between the managed libraries and the firmware. This interface is structured around the methods decorated with the MethodImpl(MethodImplOptions.InternalCall) attribute. During the build of a managed library a checksum value generated taking into account the methods name, parameters and return types. That checksum, is used to characterize the library interface and it's stored in stub files. Changes can happen at both ends without any compatibility issues, as long as the interface does change. More details about checksum value can be found in NativeMethodsChecksum AssemblyHeader field description. More details about whole versioning can be found in NuGet, assembly and native versions blog post. How to call native code from managed code Assuming you want to call from nanoframework's mscorlib (source can be found in CoreLibrary repository) C# code (e.g. System.Number class) some implementation you would like to place in it's nanoCLR (source in nf-interpreter repository) C++ code. Follow steps below: Build the nf-CoreLibrary solution without making any changes. Copy these folders somewhere for later use: nanoFramework.CoreLibrary\\bin\\Debug\\Stubs nanoFramework.CoreLibrary.NoReflection\\bin\\Debug\\Stubs Declare your C++ function in your C# class: [MethodImpl(MethodImplOptions.InternalCall)] private static extern String FormatNative( Object value, bool isInteger, String format, String numberDecimalSeparator, String negativeSign, String numberGroupSeparator, int[] numberGroupSizes); Add code which calls the function above as you wish. If you change the assembly signature (via adding or modifying an extern function) you should bump the assembly version in the AssemblyInfo.cs file: [assembly: AssemblyNativeVersion(\"100.5.0.5\")] Build the solution. Compare the nanoFramework.CoreLibrary\\bin\\Debug\\Stubs folder's actual state with the saved one. The files which should have changed: corlib_native.cpp corlib_native.h your class's C++ counterpart, corlib_native_System_Number.cpp in the example Do the same with nanoFramework.CoreLibrary.NoReflection\\bin\\Debug\\Stubs too. Apply the changes you found to the same files under nf-interpreter/src/CLR/CorLib . DO NOT overwrite the files there! The files under nf-interpreter may have additional declarations, etc. Open the file and look for #if (NANOCLR_REFLECTION == lines. There could be more of them. Copy over the diff meaningfully: changes from the nanoFramework.CoreLibrary\\bin\\Debug\\Stubs are going inside the NANOCLR_REFLECTION == TRUE blocks changes from the nanoFramework.CoreLibrary.NoReflection\\bin\\Debug\\Stubs are going inside the NANOCLR_REFLECTION == FALSE blocks. You will find that a stub for the function you declared above will be generated with this signature: HRESULT Library_corlib_native_System_Number:: FormatNative___STATIC__STRING__OBJECT__BOOLEAN__STRING__STRING__STRING__STRING__SZARRAY_I4(CLR_RT_StackFrame &stack) Now you can implement your function. How to handle the C++ parameter values received from a C# call Lets see the example method discussed in the (#How-to-call-native-code-from-managed-code) tip. The generated (by lib-CoreLibrary solution build, where you declared your needs as an extern function) C++ stub will have a CLR_RT_StackFrame &stack parameter. The values can be accessed as follows: object value // get ref to value container CLR_RT_HeapBlock *value; value = &(stack.Arg0()); // perform unboxing operation if necessary CLR_RT_TypeDescriptor desc; NANOCLR_CHECK_HRESULT(desc.InitializeFromObject(*value)); NANOCLR_CHECK_HRESULT(value->PerformUnboxing(desc.m_handlerCls)); // get the CLR_DataType of the value in container, like DATATYPE_U1 for a Byte or DATATYPE_R8 for Double CLR_DataType dataType = value->DataType(); // retrieving the real value depends on dataType above int32_t int32Value = value->NumericByRef().s4; bool isInteger // get value bool isInteger; isInteger = (bool)stack.Arg1().NumericByRef().u1; String format // get value char *format; format = (char *)stack.Arg2().RecoverString(); int[] numberGroupSizes // get ref to value container CLR_RT_HeapBlock_Array *numberGroupSizes; numberGroupSizes = stack.Arg6().DereferenceArray(); // get number of elements CLR_UINT32 numOfElements = numberGroupSizes->m_numOfElements; // get the 5th element // cast necessary, because GetElement declared as CLR_INT8*, // but the C# code call placed items of Int32 type into array. int the5thEelement = *((CLR_INT32 *)numberGroupSizes->GetElement(5)); Returning from C++ function for C# code Values should be returned via the CLR_RT_StackFrame &stack parameter. String char * ret; // ... assign value to ret ... // use helper methods to set return value NANOCLR_SET_AND_LEAVE(stack.SetResult_String(ret)); Returning with an Exception // see other CLR_E_* defined values NANOCLR_SET_AND_LEAVE(CLR_E_FAIL); Not sure on the differences, but there is a NotImplementedStub helper on CLR_RT_StackFrame &stack parameter may be used too: NANOCLR_SET_AND_LEAVE(stack.NotImplementedStub()); Example managed-native development cycle The managed-native border crossing development cycle could have significant time penalty. Without any shortcuts the required steps are: The native code changes should be compiled The native code changes should be downloaded to the device The managed code should be compiled The managed code should be downloaded to the device The code should be executed. So two builds, two downloads required and two development environments involved. Below you can find a suggestion which can be used in cases when the physical device's capabilities (lik GPIO ports, etc.) not affected by the development, only it's execution of the nanoCLR (like the number ToString() implementation) required. It saved me a lot of time. Write you managed code which requires native code support (see (#How-to-call-native-code-from-managed-code)) but DO NOT declare native part as an extern method. Just declare it as a \"normal\" private method. Add some simple implementation what supports the actual development state of your managed code, like return a constant what the currently implemented managed feature would expect from native call. Finish your managed coding agains this stub. You can either write tests for your code too because you have an \"emulated\" native behaviour. No need to leave the managed code development environment meanwhile. Replace the stub with the correct extern declaration. Rebuild solution to get the appropriate corlib changes as described in (#How-to-call-native-code-from-managed-code). Switch to native code development environment. Add minimal implementation to the extern counterpart C++ function: just extract parameters from their CLR form to C++ form (see (#How to handle in C++ parameter values received from C# call)). The goal is: convert the managed-call-specific things into native C++. Forward call with the extracted parameters to a private func with same logical signature. Now you have a \"clean\" C++ function without any CLR specific parameter handling logic. Debug once . Check that your \"clean\" C++ func receives all the parameters appropriatelly from managed call. Implement the body of \"clean\" C++ function. At this moment you are not depending on managed call so you can write anywhere and with any development method, using tests to call your function without any need to setup extensive CLR objects just to test the code you are just developing. E.g. you can write and debug your code on https://www.onlinegdb.com/ ."
  },
  "content/contributing/developing-native/arm-swo.html": {
    "href": "content/contributing/developing-native/arm-swo.html",
    "title": "Using ARM Cortex-M Single Wire Output (SWO) | nanoFramework Documentation",
    "keywords": "Using ARM Cortex-M Single Wire Output (SWO) About this document This document describes how to use Cortex-M SWO to output data from .NET nanoFramework . Prerequisites You'll need: Target board with SWO pin free and configured in it's reset state (meaning not used by GPIO or any other peripheral and not configured in any alternate mode). If using a stock board it's also convenient to check the schematics if any hardware changes are required. STM F429I_DISCOVERY board requires solder bridge SB9 to be soldered STM F769I-DISCO board requires a 0 Ohm resistor on R92 (or just soldering the pads toghether) Software capable of driving and outputting data from an SWO source. ST-Link is an excellent tool for this purpose. Set .NET nanoFramework build options to include support for SWO (either setting \"SWO_OUTPUT\" : \"ON\" in cmake-variants.json or launching CMake with -DSWO_OUPUT=ON). Outputting SWO Step 1 : Load the target flash with a .NET nanoFramework image build with SWO option Step 2 : On ST-Link menu choose ST-Link -> Printf via SWO viewer Step 3 : After SWO viewer windows loads, set the Sytem clock to match the target and the Stimulus port to 0 . Step 4 : Click the Start button and watch the output in the main window area."
  },
  "content/contributing/developing-native/debugging-class-libraries.html": {
    "href": "content/contributing/developing-native/debugging-class-libraries.html",
    "title": "Guidelines for debugging .NET nanoFramework class libraries native code | nanoFramework Documentation",
    "keywords": "Guidelines for debugging .NET nanoFramework class libraries native code About this document This document provides guidelines useful when debugging class libraries native code. It doesn't care if the developer is using VS Code or other IDE. How does an assembly load successfully The assemblies with the class libraries and the managed application are loaded at startup from the deployment area in the FLASH memory. When the LoadDeploymentAssemblies() is called the deployment area is sweep and all 'candidate' assemblies are validated. The validation steps are basically checking the start token, a valid header and the CRC32 of the full assembly. Only the ones that pass the complete set of validation make it to the assembly collection. After this step a call to g_CLR_RT_TypeSystem.ResolveAll() happens in which the type system tries to resolve all the assemblies. This means that all the required types and methods (from all the assemblies) are available and in the correct versions. Next comes the g_CLR_RT_TypeSystem.PrepareForExecution() which is only called if all the assemblies could be resolved along with the required types. Starting the execution engine The managed application actually starts to be executed with a call to g_CLR_RT_ExecutionEngine.Execute() . As long the managed code is being executed this will never exit. When the execution ends, because of a serious exception or because there is no managed application to execute the code flow hits the CLR_EE_DBG_IS( RebootPending ) line (bellow the the call to the execution engine call). Summarizing So, by setting break points at, or after, the above calls one can understand and perform a check if the assemblies are being loaded and/or the managed application being executed. If something goes wrong (for instance) with an assembly failing to load the developer has to go deeper in order to find out the root cause. But that's a matter for another piece of documentation."
  },
  "content/contributing/developing-native/vscode-debug-instructions.html": {
    "href": "content/contributing/developing-native/vscode-debug-instructions.html",
    "title": "Instructions for debugging .NET nanoFramework native code in VS Code | nanoFramework Documentation",
    "keywords": "Instructions for debugging .NET nanoFramework native code in VS Code About this document This document describes how to debug .NET nanoFramework native code using VS Code. Prerequisites You'll need: GNU ARM Embedded Toolchain Visual Studio Code C/C++ extension OpenOCD. Suggest the xPack OpenOCD that kindly maintains a Windows distribution. Preparation You'll need a binary image with debug information to be loaded in the SoC or MCU. Assuming you are using VS Code to launch your builds, you'll have this image ready to be loaded in the MCU. (see Build instructions documentation ) In order to launch the debug session you'll need to setup the launch.json file, located in the .vscode folder. We've provided a template file launch.TEMPLATE.json (inside .vscode folder on the repository) to get you started with this. Just copy it and rename to launch.json . Here's what you need to change in order to adapt the template file to your setup and make it more suitable to your working style and preferences. name: here you can name each of the launch configurations to help choosing the appropriate one when launching the debug session. These could be for example: \"nanoBooter in Discovery 4\", \"nanoCLR in Nucleo F091RC\", \"test featureXYZ in Discovery 4\". miDebuggerPath: full path to the gdb executable (this one is inside the GCC tool-chain folder) program: full path to the .elf output file that results from a successful build setupCommands (fourth 'text' entry): full path to the final image (the .hex file) setupCommands (fifth 'text' entry): the same as the program entry above (the .elf file) debugServerPath: full path to the OpenOCD executable debugServerArgs: full path to the scripts directory on the OpenOCD installation AND the appropriate .cfg files for the interface and the board. Note 1: VS Code parser seems to have trouble parsing and replacing the ${workspaceRoot} for some OpenOCD commands. That's the reason why you see there the ${workspaceRoot} variable and in other places the full path were that variable would make sense to be at. Just use what's there to keep OpenOCD happy. Note 2: Always mind the forward slash in the paths above, otherwise you'll get into troubles with strange and unclear errors from OpenOCD. Templates To make your life easier, we provide templates with pre-configured launch.json for the various reference targets. Just grab them from our Gist. ST_STM32F4_DISCOVERY ST_STM32F429I_DISCOVERY ST_NUCLEO_F091RC ST_NUCLEO144_F746ZG ST_STM32F769I_DISCOVERY TI_CC3220SF_LAUNCHXL Launch the debug session Using VS Code menu View > Debug, clicking on the debug icon on the left hand toolbar or hitting the CTRL+SHIT+D shortcut you'll reach the debug view. There you'll find the launch configurations for debug that we've setup above (see the drop down at the top) and the familiar green play button (or F5 if you prefer). When a debug session is active you can find a lot of familiar stuff: debug toolbar with the usual operations (pause, step over, into, out, restart and stop) variables list call stack that you can use to navigate up and down breakpoint list to manage those watch expressions support for 'mouse over' a variable which will display a context with the variable content ability to set/remove breakpoints by clicking near the line number other handy tools and options using the right click on the various objects"
  },
  "content/contributing/financial-sponsors.html": {
    "href": "content/contributing/financial-sponsors.html",
    "title": "Financial sponsors | nanoFramework Documentation",
    "keywords": "Financial sponsors .NET nanoFramework uses 'Open Collective' to manage our funding in a completely transparent manner. Funding is necessary for us to manage things like infrastructure costs, carry out PR (including advertising the project to the embedded systems industry, hobbyist communities and academia), marketing work, development and maintenance tasks that no one volunteers to do, supporting projects that we depend on, etc... To this end, we have setup an 'Open Collective' to manage our funding in a completely transparent manner. To make a donation you can use either Open Collective or GitHub Sponsors. Click on the appropriate button bellow. Sponsors Sponsors will get their logo and link to a website on our GitHub readme and also on our home page. Backers Backers are individuals who contribute with money to help support nanoFramework. Every little bit helps and we appreciate all contributions, even the smallest ones."
  },
  "content/contributing/index.html": {
    "href": "content/contributing/index.html",
    "title": "Contributing to .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Contributing to .NET nanoFramework Financial contributions People contributing to nanoFramework do so in the spirit of Open Source, our community, developers using nanoFramework and, most importantly, pushing the embedded systems world forward together in a community effort. Funding is necessary for us to manage things like infrastructure costs, carry out PR (including advertising the project to the embedded systems industry, hobbyist communities and academia), marketing work, development and maintenance tasks that no one volunteers to do, supporting projects that we depend on, etc... To this end, we have setup an 'Open Collective' to manage our funding in a completely transparent manner. To make a donation you can use either Open Collective or GitHub Sponsors. Click on the appropriate button bellow. How can I help Anyone can help the project in a number of ways: Choose to use or ask your employer to use nanoFramework in projects. If you are a teacher or work in training, use nanoFramework in your courses, classes and workshops. If you are a maker, publish your projects on platforms such as Hackster.io , spread the word by tweeting about us, mentioning us on the forums and communities where you are engaged in. Contribute to our various repositories, from the nf-interpreter (where the firmware images that running on the targets devices), to the various class libraries, Visual Studio extension and other various utilities. Use nanoFramework in your projects and report back bugs that you find and/or suggest better ways to accomplish something or even new features that can improve the framework. Help writing, translating and maintaining the documentation for the various components, getting started guides, tutorials and target devices. Hangout on our Discord community and answer questions, provide guidance and mentorship and welcome new members to the community. Help in managing, triaging and answering GitHub issues. Contribute web designs and creative designs for our project website and/or other graphic and visual needs. Become a backer or supporter through our Open Collective or GitHub Sponsors . Commissioning new features and sponsoring bug fixes. Branding and social networking. Encouraging employers You can ask your employer to improve your (and the company) productivity by using nanoFramework in projects. Explain to them how nanoFramework can help developing an embedded system project, no matter if it's a proof of concept for a potential customer or if it's a complex IoT device. How easy is to use the tools available for a smooth debugging experience. Executives CTO's, VPs and business owners can also help nanoFramework ! nanoFramework along with C# and Visual Studio can give your team a tremendous productivity boost. Imagine slashing the number of hours required to complete a project and making it's maintenance easier. If you're not willing to take our word for it, perhaps you will if it comes from a reputable source in the industry like Altium. Check out this article from their blog, where industry expert Mark Harris goes through a deep analysis on the benefits of using high level programming languages like C# and nanoFramework for embedded projects. It includes some interesting numbers on costs, budgets and estimates. Sponsorship Besides monetary contribution, companies can support nanoFramework by providing their developers time. This can come from developers that are between projects or tasks and are not actively working on a company project in certain period. Or maybe there is a project already using nanoFramework for which a specific feature is not available yet or requires improvements. Developers working on it can use their time to code that and contribute back to the project. Developers The project needs people with skills on C/C++ and C# and Azure DevOps. No need to be a subject matter expert! Even the smallest contribution matters. We welcome embedded system developers familiar with platforms we target, including: ESP32, STM32, TI CC32xx and NXP. Or that are familiar with RTOSes, including: FreeRTOS, ChibiOS and TI SimpleLink. C# developers with general coding experiencing, coding Visual Studio extension development, coding with Visual Studio debugging components, willing to write unit tests. Commissioning new features A great way to get something back from your financial contribution is to commission new features. If your company is working on a new product or project and .NET nanoFramework is missing a feature, could use a couple of APIs that don't exist or even an entire library, just reach out to Eclo Solutions to design and build it. If it's not a secret or something too specific, whit your permission, it can be merged to the codebase and benefit the ecosystem and the entire community. Sponsor bug fixes Sometimes bugs hang in the queue for too much sometime. The common triage criteria are the seriousness of the issue (how severely and wide is the impact) and the estimate on how long it takes to fix it. If there is a bug that's being a show stopper for you or your project you can sponsor it's resolution. We'll provide an estimate on the cost to fix it. Brand advocates and social networking Besides financial contributions or coding there is a lot more that you can do to help the project. .NET nanoFramework can be an awesome framework to work with and empowers developers with a tremendous productivity boost, but... if just a handful of people know about that? Marketing and advertising cost money that we don't have. You can help by spreading the word. Do you maintain a blog? Or do you have a bunch of followers on Twitter or LinkedIn? A post about .NET nanoFramework and mentioning @nanoframework can take the project further. GitHub stars it's an easy and simple contribution to the project. Please spare a few seconds and head over to our GitHub organization and give them a star. It increases the project visibility and it's an indication on how big it's the community around it. Writing a review and classifying our extensions on the Visual Studio marketplace has a positive impact on the project visibility and helps towards increasing the reputation. Providing a testimonial with an endorsement to the project or highlighting a feature or a situation where it has stand out it's another way of contributing to the project. Email, tweet or send a message on Discord. If you want it to be featured on the web site please include your name, title, company and picture. Other sections about contributing to .NET nanoFramework Coding contributions API review process Contribution workflow C# Coding Style C/C++ Coding Style GitHub Labels Project priorities Contribution License Agreement Developing native code Debug with VS Code Debug class libraries and startup Use a viewer to watch output from Cortex-M SWO"
  },
  "content/contributing/labels.html": {
    "href": "content/contributing/labels.html",
    "title": "Labels | nanoFramework Documentation",
    "keywords": "Labels .NET nanoFramework project uses many labels for categorizing issues and pull requests. Label Meaning on Issue Meaning on Pull Request bug The issue concerns a bug in the code The issue concerns a bug in the code enhancement The issue is an improvement to the code The pull request is an improvement to the code up-for-grabs The issue has been discussed and it's ready for someone to start working on it. It's not assigned to a particular person. If you want to work on it, just add a comment saying so and it's yours! Normally not applicable (see comments if observed on a pull request) investigating The issue is being investigated by the team or by a community member. If the status is not clear, better ask for an update about it. n/a question The issue is a question Normally not applicable (see comments if observed on a pull request) code review n/a The pull request is under review needs discussion The issue needs further discussion before an actionable decision can be made The pull request needs further discussion before an actionable decision can be made pull request A pull request intended to address the issue has been created, but not yet merged n/a blocked The issue cannot be fixed until another issue, which may be external, is addressed The pull request cannot be merged until another issue, which may be external, is addressed do not merge n/a The pull request should not be merged at this time. This could indicate a work-in-progress, a problem in the implementation code, or cases where the pull request depends on (is blocked by) another issue or pull request which has not been addressed. merge OK n/a The pull request has been reviewed and meets all the contribution requirements so it's ready to be merged in progress A developer is currently working on the issue A developer is currently making updates to the code in the pull request fixed The issue has been resolved The pull request describes a new issue (i.e. no separate issue exists), and the content of the pull request was merged to fix the issue duplicate Another issue or pull request contains the original report for this topic Another pull request was submitted to correct the issue. This is generally only applied to pull requests after another pull request to correct the issue is merged. wontfix The issue will not be corrected. The current behaviour could be by design, out of scope, or cannot be changed due to the breaking changes policy for the project (see comments for details). The pull request will not be merged due to a fundamental issue (see description for this label on issues) documentation The issue is related with documentation The pull request is related with documentation feature-request The issue contains a new feature request Normally not applicable (see comments if observed on a pull request) FEEDBACK REQUESTED Feedback from the community is requested. Please step in and add your comment, that is if you have anything relevant to say about it. Normally not applicable (see comments if observed on a pull request) help wanted If this issue has any work assigned or has already started to be addressed in a pull request help is welcomed. If you are willing to help add a comment to coordinate with the people already working on it. Help is welcomed for this pull request. If you are willing to help add a comment to coordinate with the people already working on it. DONE The work on the issue is completed n/a under review The issue (probably a feature request) is under review and a decision hasn't been made n/a trivial The work required to complete this issue is considered to be very simple and it shouldn't pose any significant challenge. It can be completed in a very short time. It doesn't require any particular skills or deep knowledge on the matter or the project. n/a non trivial The work required to complete this issue is considered to be somewhat complex. It requires a particular skill set or deep knowledge on the matter or about the matter or the project architecture. n/a area-Config-and-Build The issue is related with the configuration and build of .NET nanoFramework The pull request is related with the configuration and build of .NET nanoFramework area-Infrastructure-and-Organization The issue is related with the infrastructure or the overall organization of the .NET nanoFramework project The pull request with the infrastructure or the overall organization of the .NET nanoFramework project area-Interpreter The issue is related with the Interpreter component of .NET nanoFramework The pull request is related with the Interpreter component of .NET nanoFramework"
  },
  "content/contributing/markdown-creation.html": {
    "href": "content/contributing/markdown-creation.html",
    "title": "Rules for creating Markdown in the repository | nanoFramework Documentation",
    "keywords": "Rules for creating Markdown in the repository This document explains a couple of rules to create a proper Markdown file in the documentation repository. Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages. Markdown files are text based. If you want to learn about possibilities (headers, lists, tables, code and such) this cheat sheet is always helpful: Markdown Cheatsheet · adam-p/markdown-here Wiki · GitHub . There are a number of them. Using Markdown is different than using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown isn’t like that. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different. That said, as explained in the section below , you can have a nice preview when you open the repository with VS Code. You can find more information, a full documentation here . Images and attachments All images should be stored in /images and its sub directories. Reason: we are using DocFX to generate a static website. We only move attachments and pictures from /images . The rest is ignored. Naming conventions Please to follow those simple rules: Try to only use lowercase in your file names Don't use spaces, use - or _ Use only ASCII 7 characters from the alphabet and numerical Links It's ok to use external links. For internal links on documentation, please use relative link to the file. For example if you are in /content/esp32 and want to reference the document build-esp32.md which is located in /content/building , the link will be ../building/build-esp32.md . Practical Tips & Tricks Preview in VS Code When editing markdown in VS Code , there is a preview button on the top right that will open a live preview window on the left. So you can type and see the result at the same time. This is usually a great way to avoid basic mistakes, making sure your images are showing up properly for example. Typora as an alternative tool Typora is an online editor to help you generate proper Markdown. It can help you creating your first Markdown, get use to it. It also has great features like the ability to create table from a copy/paste of a web page. Be sensitive of the fact this is an online tool and of the confidentiality of the information you may put into this tool. Run markdownlint before pushing To make sure before you push, run the markdownlint tool on your md-file and solve all messages. This tool will be run in the pipeline to validate your Markdown files. Check more details below . If you're using VS Code you can install an extension with a markdown linter such as markdownlint . With it, you'll immediately get visual feedback on any formatting issues. Important : There won't be any merge possible if the Markdown file is not properly formed. So it is very important to run the linter before you do a PR and fix all the issues. Use a spell checker You have plenty of Spell checker extensions, they will reduce the numbers of mistakes. We can recommend you in VS Code, Spell Right or Code Spell Checker extensions. Patterns for enumerations It can be a bit frustrating when working on markdown and when you try to work with enumerations. One of the key point to keep in mind is that enumerations in markdown and in generals are made to be grouped. Once you need a lot of text or code blocks in between, enumerations are not really the best. So here are couple of patterns. # This is the one and only main title ## You can have as many title 2 as you want 1. My enumeration starts with 1 - I have sub bullets which can be enums as well - And another one 1. This one will have number 2 1. And you can guess, this one is 3 1. Now, this one is 1 again as there is a career return between both enums 1. And 2 again If you are trying to get a large block of text with paragraphs and block of code, use the Step # pattern like this: - Step 1: do something Here you may have a lot of blabla, some text code block, images, etc. - Step 2: do the next step Same here, a lot of things here. - Step 3: you can continue this pattern Adding an Emoji into markdown file It can be a great way to bring essential content to the point if you add some Emojis into markdown content. To add them use the next shortcuts depends on your operational system: on Mac: CTRL + CMD + Space on Windows: Win + ; (semi-colon) or Win + . (period) Moving files In general, try not to move the files. There are a lot of links in files pointing to each others. In case you want to change files, here is a process to catch broken link: Once you'll do a PR, the the DockLinkChecker will run part of the build pipeline. Open the DocFX task result and check the logs, it will contain broken links Correct the broken files Push back the changes If you still have some, they'll still show up! No need to add any TOC The documentation is built automatically using DocFX. DocFX companion tools will take care of creating the TOC for you. So please do not add it. TheToDocFxCreation tool will create it for you. Tables Please make sure you respect as well the rules for tables. You need to have a | at the beginning and end of each column. The second line should contains at least 3 dashes, so --- per column. You can have more and you can use the : pattern to align the column as you'd like. The DockLinkChecker will check that your tables are properly formed as well during a PR. Markdownlint To help developers and anyone who needs to create Markdown, we propose to use Markedownlint which is easy and the most used linter for Markdown documents. Markdownlint-cli is an easy to use cli based out of Markdownlint. Rules A comprehensive list of rules are available here . We will use a quite strict approach except for the line length rule MD013 which we won't apply and html tags. Please avoid using html tags at all. As we do integrate few external images sources which are hard to align properly, we are not applying this rule. But we will be vigilant in PR to make sure there is none checked in which is not critical. A configuration file is present in the root directory of the project for your convenience. The file is .markdownlint.json and contain: { \"MD013\": false, \"MD033\": false } Then simply run the following command from the root folder: markdownlint -f path_to_your_file.md Note that the -f parameter will fix all basics errors and save you some time. Using VS Code extensions There are couple of VS Code extensions to help you in this task as well. We can recommend Prettier which will catch some of them as well. Azure DevOps pipeline Markdownlinter is also part of the Azure DevOps code quality pipeline which will automatically run upon PRs. If there is any issue, it will fail and gives you all the issues. You will have to fix them for a merge. See the tips and tricks as well!"
  },
  "content/contributing/project-priorities.html": {
    "href": "content/contributing/project-priorities.html",
    "title": "Project priorities | nanoFramework Documentation",
    "keywords": "Project priorities We're working hard to have a wide support od targets, a proper way of building them, deploying them and of course documentation. We have our Discord channel where our top priority is to help each others, answer questions. So join us on Discord ! Any help is always appreciated, we love your PR! Keep them coming in :-)"
  },
  "content/esp32/esp32_firmware_versions.html": {
    "href": "content/esp32/esp32_firmware_versions.html",
    "title": "ESP32 Firmware versions | nanoFramework Documentation",
    "keywords": "ESP32 Firmware versions The firmware versions are:- Firmware name WiFi Ethernet Bluetooth PSRAM(Large heap) ESP32 version WROOM_32 ✔️ ✔️ 0 -> 3 WROOM_32_BLE ✔️ ✔️ 0 -> 3 WROOM_32_V3_BLE ✔️ ✔️ ✔️ version 3 only ESP_WROVER_KIT ✔️ ✔️ 2Mb heap + Graphics 0 -> 3 EP32_PICO ✔️ ✔️ 0 -> 3 ESP32_LILYGO ✔️ ✔️ ✔️ 0 -> 3 WROOM_32 Default version which supports all ESP32 versions but doesn't support Bluetooth BLE due to memory constraints in the IRAM section caused by PSRAM fixes for version 1 chips. WROOM_32_BLE Same as the WROOM32 but drops PSRAM support to include Bluetooth BLE WROOM_32_V3_BLE This version is specific to ESP32 V3 and includes all support including PSRAM and Bluetooth. ESP32_PICO Specific to ESP32 Pico. Same as WROOM_32_BLE but with a changed serial link speed. ESP32_LILYGO Specific to LILYGO boards. Same as WROOM32_BLE but also includes Ethernet support."
  },
  "content/esp32/esp32_pin_out.html": {
    "href": "content/esp32/esp32_pin_out.html",
    "title": "ESP32 Pin out | nanoFramework Documentation",
    "keywords": "ESP32 Pin out ESP32 Pin out differ depending of the physical hardware. What is common is the GPIO numbering. So refer to the documentation of your specific board to find out the physical relation. You can find all the details for the default mapping in this file The default mapping defines how the pins are configured on start up. These pins configurations can be configured/redefined using the nanoFramework.Hardware.Esp32 assembly. Example configuration // Define MOSI pin for SPI2 as GPIO 15 Configuration.SetPinFunction(15, DeviceFunction.SPI2_MOSI); // Define LED PWM channel 1 GPIO 16 Configuration.SetPinFunction(16, DeviceFunction.PWM1); // Redefine I2C2 data pin from GPIO 25 to GPIO 17 Configuration.SetPinFunction(17, DeviceFunction.I2C2_DATA); ESP32 Default Mapping NP = Pin is undefined at startup I2C There are 2 I2C bus available: I2C# Data Clock I2C1 GPIO 18 GPIO 19 I2C2 GPIO 25 GPIO 26 SPI There are 2 SPI possible configurations: SPI# MOSI MISO Clock SPI1 GPIO 23 GPIO 25 GPIO 19 SPI2 NP NP NP Serial ports You have 2 serial ports available, COM1 is reserved for debugging when enabled. COM# Transfer (Tx) Reception (Rx) RTS CTS COM1 GPIO 1 GPIO 3 GPIO 19 GPIO 22 COM2 NP NP NP NP COM3 NP NP NP NP PWM channels There are 16 PWM channels on ESP32 For all channels the GPIO pins are undefined at startup. The first 8 PWM (PWM0 to PWM7) are using a low precision timer, the last 8 ones (PWM8 to PWM15) a high resolution timer. You should setup the pin to select the timer resolution you need. Note that PWM goes in pair. So PWM0 and PWM1 (2 and 3, and so on) will share the same frequency. If you need PWM with different frequencies, you'll have to select compatible PWM pins. ADC We use \"ADC1\" with 20 logical channels mapped to the ESP32 internal controllers ADC1 and ADC2 There are the 18 available ESP32 channels plus the internal Temperature and Hall sensors making the 20 logical channels. Restrictions:- Channels 10 to 19 can not be used while the WiFi is enabled. (exception CLR_E_PIN_UNAVAILABLE) Hall sensor and Temperature sensor can not be used at same time as Channels 0 and 3. Gpio 0, 2, 15 are strapping pins and can not be freely used ( Channels 11, 12, 13 ), check board schematics. Logical channel # Internal ADC# GPIO # Note 0 ADC1 36 See restrictions 1 ADC1 37 2 ADC1 38 3 ADC1 39 See restrictions 4 ADC1 32 5 ADC1 33 6 ADC1 34 7 ADC1 35 8 ADC1 36 Internal Temperture sensor (VP), See restrictions 9 ADC1 39 Internal Hall Sensor (VN), See restrictions 10 ADC2 04 11 ADC2 00 Strapping pin 12 ADC2 02 Strapping pin 13 ADC2 15 Strapping pin 14 ADC2 13 15 ADC2 12 16 ADC2 14 17 ADC2 27 18 ADC2 25 19 ADC2 26 DAC 2 DAC are available on the ESP32: DAC# GPIO # DAC1 25 DAC2 26"
  },
  "content/esp32/index.html": {
    "href": "content/esp32/index.html",
    "title": "ESP32 specific articles | nanoFramework Documentation",
    "keywords": "ESP32 specific articles ESP32 Firmware versions ESP32 pin out"
  },
  "content/faq/automatic-firmware-updates.html": {
    "href": "content/faq/automatic-firmware-updates.html",
    "title": "Automatic Firmware Update | nanoFramework Documentation",
    "keywords": "Automatic Firmware Update Automatic firmware updates are run as part of the build process initiated from the Visual Studio extension for nanoFramework. Please see the following blogpost: https://www.nanoframework.net/automatic-firmware-updates/ What targets are supported by this automatic update? Currently all STM32 targets for both officially supported reference targets and community targets found in our nf-Community-Targets repo. Can I use this if I have a custom board running my own firmware? Not at this time. Currently this feature relies on the Cloudsmith API together with our repositories there, where we publish firmware packages. Supporting custom repos would require a standard way to access the packages storage and version querying. If you would like your board to be supported out of the box, feel free to add a PR to .NET nanoFramework nf-Community-Targets repo. How to prevent a board from updating if working on a custom firmware? If you are running the build locally, the best approach would be to use the BUILD_VERSION property and sets it to a value which makes it \"impossible\" to find a better version e.g. 99.999.0.0 ."
  },
  "content/faq/coding-in-csharp.html": {
    "href": "content/faq/coding-in-csharp.html",
    "title": "Coding in C# | nanoFramework Documentation",
    "keywords": "Coding in C# Can I use auto-properties in classes No, you have to declare the backing fields. I have a Solution that targets both nanoFramework and standard .NET and would like to share/reuse code in both platforms. I know I can't reference assemblies from one into the other. How can I accomplish this Your best option is to use a shared project to hold the common code. Put there the classes that are to be used in both platforms. You can go all the way into this reusability by using compiler constants, compiler defines and even partial classes. For a small example on this check the ToString sample on our samples repo. It's using this technic to share code between a nanoFramework app and a .NET console app. I need to debug something in a class library how can I easily replace the NuGet reference with the real project This can be easily accomplished by using a handy Visual Studio extension called NuGet Reference Switcher . Add the class library project to your solution and using that tool switch the NuGet package reference to the recently added project. After debugging you can switch back to the NuGet reference."
  },
  "content/faq/index.html": {
    "href": "content/faq/index.html",
    "title": "Frequently asked questions | nanoFramework Documentation",
    "keywords": "Frequently asked questions Despite working with .NET nanoFramework being tremendously easy there are always moments where one needs a hand or bumps into an award situation. This is a collection of tips, perls of wisdom and answers to frequent situations. Please do contribute with your own contribution! Coding in C# Working with ESP32 targets Working with STM32 targets Working with Visual Studio extension Automatic Firmware Updates"
  },
  "content/faq/working-with-esp32-targets.html": {
    "href": "content/faq/working-with-esp32-targets.html",
    "title": "Working with ESP32 targets | nanoFramework Documentation",
    "keywords": "Working with ESP32 targets Is the ESP32 Dev Kit C the ONLY board version that will work with nanoFramework There are available several different versions including: ESP32-WROOM-32, ESP32-WROOM-32D, ESP32-WROOM-32U, ESP32-SOLO-1, ESP32-WROVER-B, ESP32-WROVER-IB, etc. The current ESP32 Dev Kit C image that we provide works on all ESP32 boards that use the ESP32-Wroom-32x or ESP32-WROVER modules. The SOLO modules have only one core which currently won't work as we start the nanoCLR on the 2nd core. Can I use Smart Config to configure my ESP32 devices Yes you can! The Smart Config is automatically started when the device is booted and there is no wireless SSID set up. i.e. When the device is first flashed. To configure the device use one of the Smart Config apps on your phone such as :- the ESP8266 SmartConfig, DHC smartConfig apps on Android and EspressiF ESpTouch on IOS. Connect phone to Wifi to the Access point, run Smart Config application which will prompt you for the AP password. This will then send the details to the device. The device saves the details and connects to the AP point. When connected it confirms the connection back to the Phone. When the device is next rebooted the device automatically connects to AP as the WiFi details have been saved. For more information see here . In your application you can wait for the network to be configured/connected by waiting for the IP to be set. static void WaitIP() { Console.WriteLine(\"Wait for IP\"); while (true) { NetworkInterface ni = NetworkInterface.GetAllNetworkInterfaces()[0]; if (ni.IPv4Address != null && ni.IPv4Address.Length > 0) { if (ni.IPv4Address[0] != '0') { Console.WriteLine(\"Have IP \" + ni.IPv4Address); break; } } Thread.Sleep(1000); } } Can I debug nanoCLR code on ESP32 using Visual Studio without any special hardware Yes you can! Follow the old-school steps described here ."
  },
  "content/faq/working-with-stm32-targets.html": {
    "href": "content/faq/working-with-stm32-targets.html",
    "title": "Working with STM32 targets | nanoFramework Documentation",
    "keywords": "Working with STM32 targets Can I debug the native code on any STM32 board For that to be possible you need to be able to connect to the JTAG pins on the MCU. Most of the STM32 Discovery and Nucleo boards include a ST-Link hardware that exposes the debug port. How to convert MCU pin name to nanoFramework pin number? nF pin number is calculated like so: portNumber * 16 + pinNumber . For STMs, ports are numbered alphabetically, so PA=0, PB=1, PC=2 and so on. For example, PD4 corresponds to nF pin number 52, because 3 * 16 + 4 = 52 ."
  },
  "content/faq/working-with-vs-extension.html": {
    "href": "content/faq/working-with-vs-extension.html",
    "title": "Working with Visual Studio extension | nanoFramework Documentation",
    "keywords": "Working with Visual Studio extension I have a Solution with several class library projects that are referenced in the application project. After a few debug sessions VS complains that it can't access one of them because the file is locked by another process This occurs because the debugger or de deployment provider have locked that DLL on a previous debug session. To prevent this from happening, you have to open the \"Configuration Manager\" dialog for the Solution and un-check the \"Deploy\" option for all projects except the executable. To remove the lock on that file open a PowerShell console and execute the following command, being NNNN the process number that shows at the very end of the VS message: Stop-Process -id NNNNN . When I build a project/solutions it fails with an error NFMDP: Error 0x81010009 . What is this This happens when you are using a C# feature that is not currently supported by nanoFramework. The most common cases are generics or a complicated Linq expression. There is currently no way to point you exactly where the issue is. The best suggestion is to build often so you can spot this as early as possible. It can also help if you comment the code that you've added recently and start uncomment as you run the build. This way you'll have a general guidance on where the root cause could be. When deploying an application I get a message like Couldn't find a valid native assembly required by... complaining that it can't find a native assembly. What can I do to fix this This occurs when you are deploying a project that is referencing one (or more) libraries for which the target image doesn't have support or are of a different version. Make sure you have your NuGet updated and that the target device is flashed with the appropriate image. It could be that you are referencing preview versions of the NuGet packages but the target device is flashed with an older stable image and is \"behind\". For a detailed explanation please check this blog post with the details. I'm having issues with NuGet package manager complaining that it can't resolve dependencies for a package This is occurring because you're probably referencing a preview version of a NuGet package that is published only on .NET nanoFramework development feed. The same can occur if the package is referencing another package that its only available there. When working with preview packages, make sure that you register nanoFramework Azure DevOps NuGet feed by adding the package source in Visual Studio. Follow our blog post with instructions here . After starting a debug session it end abruptly with a message like Error: Device stopped after type resolution failure . What can I do to fix this This happens when there is a problem with type resolution on the deployed application. Usually happens after one of these situations: The firmware image was updated and the deployment wasn't erased. The assemblies in the deployment area are outdated and the required types or versions can't be found on the new image. Fix: erase de deployment area and deploy a new version of the application. One or more NuGet packages where updated and there is a version mismatch between them. This is noticeable by Visual Studio adding an app.config file to one or more of the projects to use assembly binding redirect. This is not possible with .NET nanoFramework . Fix: erase the app.config and work the update of the NuGet packages. The best option is usually to update the one(s) that have more dependencies and the package manager will make sure to update all the other in a cascading manner. If this doesn't work the alternative is to uninstall the NuGet packages and start adding them back again. I need to revert the VS extension I have installed to an older version. How can I do that? You can do that following these steps: Uninstall the current version from the \"Manage Extension\" window in Visual Studio. Go to the Releases section in the Visual Studio extension repository. Find the version that you're looking for and expand the 'Assets' listed in the release entry. Download the '.vsix' package and start the instal."
  },
  "content/getting-started-guides/dotnet-iot-core-vs-nanoframework.html": {
    "href": "content/getting-started-guides/dotnet-iot-core-vs-nanoframework.html",
    "title": "Compare nanoFramework with .NET IoT | nanoFramework Documentation",
    "keywords": "Compare nanoFramework with .NET IoT This documentation is for comparing .NET nanoFramework and .NET IoT platforms. For this documentation a same sample application with an identical scenario is created on both platforms. The sample application includes a scenario on both platforms: Every 3 seconds application reads temperature value from BMP280 sensor and turns on LED after reading the value. Then this temperature value is pushed to IoT Hub with device name and after every successful push LED will blink and turn off. Data will be handled by IoT Hub message routing and will be pushed to blob storage to store. .NET IoT .NET nanoFramework Raspberry Pi with .Net IoT sample project M5Stack with .NET nanoFramework sample project Certificate Device certificates are used in these samples. Certificates provide handshake between your device and Azure IoT Hub, and samples explain how to use certificates on both .NET IoT and .NET nanoFramework platforms. If you don't have any certificate, you can learn how to create certificates following Create test certificate using OpenSSL and Azure IoT Hub documentation. You can check differences of using these certificates below. Quick Tips & Differences .NET IoT .NET nanoFramework Works on powerful boards with memory and CPU Works on low-level microcontroller devices with low memory Due to device specs it can benefit from all .NET core libraries Uses specific .NET libraries for nanoFramework due to performance on low-level devices You can add your packages via NuGet manager You can add your packages via NuGet manager You only need to add Iot.Device.Bindings and System.Device.Gpio packages for new sensors You need to add nanoFramework specific packages separately for each sensor You need to setup your deployment and remote debugging manually Built-in deployment and rich remote debugging experience as Default Deploy the code via SSH connection Deploy the code directly via wired connection It can use WiFi of Raspberry Pi OS You need to connect your device to WiFi through your code You can use pfx certificates in your code You can use PEM , crt and der certificates in your code Code Comparison With this comparison we use exactly the same scenario for .NET IoT and .NET nanoFramework platforms. We're controlling BMP280 temperature & pressure sensor and LED via GPIO pins, connecting to wifi and accessing Azure IoT Hub via client specific Azure SDKs. We're using certificates to identify devices on Azure IoT Hub and grant access based on certificates. Code may change due to access some platform specific resources and SDKs, but majority of the code lines are identically same in these samples. Let's compare what are the differences on these platforms. Conclusion Both .NET IoT and .NET nanoFramework are very powerful platforms enable the writing of managed code applications using C# on different boards. Both platforms provide maximum code reusability, there are only small nuances which are due to platform/board specific differences. Both of them provide access to GPIO pins, pin numbers may change based on device manufacturer."
  },
  "content/getting-started-guides/getting-started-managed.html": {
    "href": "content/getting-started-guides/getting-started-managed.html",
    "title": "Getting Started Guide for managed code (C#) | nanoFramework Documentation",
    "keywords": "Getting Started Guide for managed code (C#) .NET nanoFramework enables the writing of managed code applications for embedded devices. Doesn't matter if you are a seasoned .NET developer or if you've just arrived here and want to give it a try. This getting started guide will walk you through the setup of your development machine to get you coding a nice \"Hello World\" in no time! You can find the video for this guide on our YouTube channel here . Installing and configuring Visual Studio 2019 The first part is to get Visual Studio 2019 (VS 2017 is also supported) and the .NET nanoFramework extension installed. Download Visual Studio If you already have it installed, you can skip this step. If you don't, please download the free Visual Studio Community edition. Make sure to install the workloads for .NET desktop development and .NET Core cross-platform development . Install the nanoFramework extension for Visual Studio Launch Visual Studio (we'll just refer to it as VS from now on) and install the nanoFramework extension. You can do this by selecting the menu Extensions > Manage Extensions which will open the Manage Extensions dialog. Select the Online feed category on the left-hand and enter nanoFramework in the search box. You will be prompted to restart Visual Studio to finish installing the extension Now open the Device Explorer window, by selecting the menu View > Other Windows > Device Explorer . Uploading the firmware to the board using nanoFirmwareFlasher The second part is to load the .NET nanoFramework image in the board flash. The best way is to use the nano Firmware Flasher (nanoff) tool. This is a .NET Core CLI command tool. NOTE The .NET 5.0 Runtime (or .NET 5.0 SDK) must be installed Install nanoff dotnet tool install -g nanoff Perform the update by providing the target name to nano Firmware Flasher. The official name of the target (either a reference or a community board) has to be used, otherwise it won't work as the tool isn't able to guess what board is connected. (The following includes the description for targets of several platforms for completeness) To update the firmware of an ESP32 target connected to COM31, to the latest available preview version. (In case the board you have has one of these: please press and hold Flash button on your board before running command and until you see 'Erasing flash...\" message) nanoff --target ESP32_REV0 --serialport COM31 --update --preview To update the firmware of a ST board connected through JTAG (ST-Link) to the latest available preview version. nanoff --target ST_NUCLEO144_F746ZG --update --preview To update the firmware of a ST board connected through DFU (like the NETDUINO3) you first need to put the board in DFU mode. This can be accomplished by pressing a certain combination of buttons. It depends on the particular hardware that you are using. nanoff --target NETDUINO3_WIFI --update --dfu After the upload completes , the MCU is reset and the nanoCLR image will run. You can check if the board is properly running .NET nanoFramework by looking into the Device Explorer window in Visual Studio . Coding a 'Hello World' application Now you have everything that you need to start coding your first application. Let's go for a good old 'Hello World' in micro-controller mode, which is blinking a LED, shall we? Go back to Visual Studio and select the File > New > Project menu, to open the Create a new project dialog. Enter nanoFramework into the Search for templates search prompt. Choose the Blank Application (nanoFramework) template and press the Next button. Name your project and choose a location of where the project files will be saved, and press the Create button. The project will be created and opened. We'll code a very simple application that enters an infinite loop and turns on and off an LED . We'll skip the details because that's not the aim of this guide. Let's just grab the Blinky code from the .NET nanoFramework samples repository. Make sure that the correct GPIO pin is being used. That's the line below the comment mentioning the STM32F746 NUCLEO board. If you don't know which pin to use, just enter something like \"ESP32 led pin number\" in your preferred search engine - assuming you are using an ESP32 device. If not, change ESP32 with the name of the device you have Because GPIO is being used we need to pull that class library and a reference to it in our project. The class libraries are distributed through NuGet. To add this class, right click on References in the Solution Explorer and click Manage NuGet Packages . On the search box type nanoFramework . Make sure you have the preview checkbox ticked . Find the nanoFramework.System.Device.Gpio package and click Install . After the license confirmation box, the package will be downloaded and a reference to it will be added. You'll notice that you no longer have the unknown references hints in VS. You should also make sure to update the mscorlib package before you move to the next step. To update this class, right click on References in the Solution Explorer and click Manage NuGet Packages . On the top of the window, click on Updates and make sure you check the Include Prerelease checkbox. Then click on Select All and do the update. Click Build Solution from the Build menu. A success message shows in the Build window. We are almost there. Go into the Device Explorer window and click on the .NET nanoFramework device showing there. Make sure the connection is OK by hitting the Ping button. On success, a message shows on the output window. For some STM32 devices you may need two USB cables. For example, the STM32429I-Discovery has a mini-USB connector that is labeled USB-STLINK that powers the device and provides the USB interface for flashing the firmware and/or running the JTAG debugger for debugging native C++ code (in VSCode or other C++ IDE). The micro-USB connector is labeled USB-USER and provides the COM/Serial interface used by the Visual Studio nanoFramework Extension for debugging your C# application code and for Device Explorer . For that device BOTH cables must be plugged into USB ports on your computer. Let's deploy the application to the board. In order to do that, right click on the Project name and choose Deploy . You'll see the feedback of the several operations that are running on the background in the Output Window . After a successful deployment you need to reset the target and your Hello World blinky application will start running and, voilá , the LED starts blinking! If you want, instead of \"just\" deploying the application to the target you can choose to start a debug session . To do that hit F5 (as usual) in Visual Studio and watch it run. Trouble shooting See this guide for solutions to some common problems: Getting Started Trouble Shooting Guide Wrapping up Congratulations! That's your first .NET nanoFramework C# application executing right there on the target board. How awesome is that?! And this is it for the getting started guide. You've went through the steps required to install Visual Studio, the .NET nanoFramework extension and the ST-LINK Utility. You've also learned how to upload .NET nanoFramework firmware images into a target board. And last, but not the least: how to code a simple 'Hello World' C# application and deploy it to a target board. Check out other guides and tutorials. You may also want to join our Discord channel , where you'll find a supportive community to discuss your ideas and help you in case you get stuck on something."
  },
  "content/getting-started-guides/guide-version-checksums.html": {
    "href": "content/getting-started-guides/guide-version-checksums.html",
    "title": "Getting started with package and assembly versions and checksums | nanoFramework Documentation",
    "keywords": "Getting started with package and assembly versions and checksums Much of the nanoFramework is made up of C# classes that invoke code that is in native C++ assemblies. Some assemblies are just generic C++, others are specific to a hardware platform. There is an interop framework that assists in handling the interface between C# and C++. That framework includes the generation of a checksum for a given interface contract, and a version checking mechanism to make sure that versions are updated when the contract (and checksum) change. How the checksum is generated As with all of dotnet the nfproj file is actually a MSBuild XML configuration file. Part of the nanoFramework is the meta-data-processor (MDP) which is invoked as a post-build task in the MSBuild of the nfproj. During the post-build the MDP creates stub C++ files for any interfaces that are declared as InternalCall . The stub files are located at bin\\debug\\stubs\\[assembly-name]. The calculated checksum is found in the corlib_native.cpp file. The MDP also emits the checksum as an environmental variable and later that is used to embed the checksum in the Portable Executable (PE) file that the nanoFramework actually runs. Below is a screen print taken from a stub of mscorlib with a checksum of 0x132BDB6F, and required native assembly version of 100.5.0.12: How the required native version is defined The required native version is set manually by a developer in the AssemblyInfo.cs file for the assembly. The MDP will copy that information and also place it in the stub file corlib_native.cpp. Here is a screen print of the CoreLibrary AssemblyInfo.cs file: Manual process to update native assembly checksum and version Each native assembly has a corlib_native.cpp (and .h) file. A developer manually copies any interface changes generated by the MDP stub generation process into the CPP files actually used by the native assembly. They are very careful to copy the new checksum and to accept a new version number if the checksum has changed due to an interface/contract change. How the NuGet package version is generated The assemblies in the nanoFramework use the nerdBank GitVersion NuGet component to manage NuGet versions. There is a version.json file in the GIT repository root - here is a screen print for CoreLibrary: The {height} placeholder is filled out by the nerdBank component. It is the number of commits since the last time the version.json file was changed to a new version number. Note that the number will always increment, but it is not like a build number in that you may not start at 1, and it may not increment by 1. But the version number will always be numeric and greater than the previous version. Changing the version info in the file will cause the counter to start back around 1 - this depends on how many commits are in the first build after updating the version info. The developer manually updates the NuGet package version prefix when there are breaking changes to the interface and a new checksum is needed. In the preceding example the developer changed the prefix from 1.10.4 to 1.10.5. Code changes that do not change the contract (and the checksum) will just get a new \"height\" as changes are committed and built. The checksum and required native version are included in the description for the NuGet package. Here is what that looks like for CoreLibrary: Note: In this example a bug in the build process caused the required native assembly version number to not be copied to the description correctly. Firmware versions and native assembly versions Firmware is built automatically for a standard set of device targets. The firmware version is independent from the assembly versions, but the latest firmware always uses the latest native assembly versions and will work with the latest NuGet package versions of a component. Here is a screen shot of nanoff installing the latest preview version of the firmware from the Cloudsmith.io repository: Here are two screen shots from using the Device Capabilities of the Device Explorer in Visual Studio to see what version of the firmware is installed, and then what native assembly versions (and checksums) were included in that firmware version:"
  },
  "content/getting-started-guides/index.html": {
    "href": "content/getting-started-guides/index.html",
    "title": "Getting started with .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Getting started with .NET nanoFramework We have several getting started guides to help you start with .NET nanoFramework . PLEASE NOTE: You DO NOT have to build the firmware images to get started with .NET nanoFramework . We provide ready to flash images for several reference targets and several others community contributed . Managed (C#) Getting started guide Getting started trouble shooting guide Getting started with package and assembly versions and checksums Compare .NET nanoFramework with .NET IoT Build instructions Build nanoFramework for STM32 Build nanoFramework for ESP32 Build nanoFramework for NXP"
  },
  "content/getting-started-guides/trouble-shooting-guide.html": {
    "href": "content/getting-started-guides/trouble-shooting-guide.html",
    "title": "Getting Started Trouble Shooting Guide | nanoFramework Documentation",
    "keywords": "Getting Started Trouble Shooting Guide Here are solutions to some common problems when getting started. No devices appear in Device Explorer in Visual Studio (View/Other Windows/Device Explorer) The Visual Studio nanoFramework Extension communicates to the device using serial/COM ports. The extension must first detect that the COM port is active, and then ping the port for a response to a specific query. The device drivers for serial ports come in many flavors and versions, and are probably the #1 problem with detecting and communicating with a device. Install the latest drivers for the USB chipset used by your board. Check the version using Windows Device Manager. Sometimes unplugging and replugging the USB port will \"wake up\" a serial device driver Try pressing the RESET button on your device to reboot it Reflash your device to make sure it has nanoFramework installed On the Device Explorer enable the Show Internal Errors button . Check for messages in the Visual Studio Output Window and select .Net nanoFramework Extension in the Show output from: dropdown. Toggle the Disable Device Watchers button on the Device Explorer ON then back OFF. This will cause the extension to rescan all of the COM ports. Try a different USB cable, or test cable on a known good device. Sometimes it is difficult to tell if a cable was only intended to be used for charging and does not carry the signal wires. Cables over 2M/6FT are to be suspected since those are often power only cables. Some STM32 devices need to use two USB cables - one for power and one for serial/COM. See Getting Started Guide for managed code (C#) . When you attempt to debug you get a deployment error and you see a message \"Couldn't find a valid assembly required by mscorlib...\" in the Output Window/.NET nanoFramework Extension An example of the error when the problem is version number. This was done by back-leveling the CoreLibrary to 1.10.4-preview.11 which was for the previous checksum. In this case the checksum was not checked - since the required native assembly version did not match the deploy failed prior to checking the checksum: The C# and native C++ assemblies are not version aligned. The C# version is determined by Nuget and the version of the component you selected. nanoFramework. CoreLibrary is the most common problem seen since it tends to load early. Due to the high change frequency most developers will be using preview versions of nanoFramework Nuget packages and firmware. Be sure to check the check-box on the NuGet Package Manager for Include prerelease to see the preview (prerelease) packages. If you use preview C# NuGet packages then you have to use preview firmware - and vice versa, if you use stable NuGet packages then you have to use stable firmware. AND, the versions must be compatible via the checksum. The C++ assembly version is determined by nanoff and the version of the firmware you selected. mscorlib is the most common problem in matching since it tends to get resolved early. When loading firmware with nanoff if you are using preview/prerelease NuGet packages then use the -preview option when updating firmware. The description of the NuGet package will contain the version and checksum of the native assembly that is required. See Guide for package and assembly versions and checksums for more info. Use the Device Capabilities button on the Device Explorer to see what assembly versions and checksums are installed on the device as part of the firmware. If you are changing a nanoFramework component and you change the interface/contract of either the C# code or the C++ code, you will get a checksum mismatch error instead of a version mismatch error. This is the mechanism that prevents developers from breaking the contract without generating new versions and checksums. nanoff does not load correct version of firmware Clear the cache at [username]\\.nanoFramework\\[device-name] - or just delete all of the cache folders. Use the Device Capabilities button in the Device Explorer to verify the firmware version that is installed on the device. nanoff ends with Ennnn error Update your copy of the nanoff tool using the command dotnet tool update nanoff --global Check permissions for the cache folders at [username].nanoFramework. Deleting the cache files can sometimes fix problems. Like the Device Explorer the flash utility depends on serial/COM drivers for most devices. Check that USB cables are not power-only cables (i.e. no signal wires), and that you are using the most recent USB drivers. The native flash utilities for each device are include with the nanoff utility. Install and test that the manufacturer utility for your device works and is not missing something like MSVC redistributable dlls."
  },
  "content/hal-pal/chibios/adc-configuration.html": {
    "href": "content/hal-pal/chibios/adc-configuration.html",
    "title": "ADC configuration | nanoFramework Documentation",
    "keywords": "ADC configuration About this document This document describes how to configure the ADC and respective GPIO pins for a STM32 target board based in ChibiOS HAL/PAL. Assumptions and design The STM32 parts can have up to 19 multiplexed channels (being 16 from external sources). Those can be grouped for special conversion scenarios that we are not going to use. Each ADC channel can be exposed in one or more GPIO pins. Despite this providing more flexibility to a system designer it poses an additional complication at the time of configuring the ADC. Considering that the heavy-lifting on the ADC configuration and initial setup is performed by ChibiOS, we've tried to make the remaining configuration as simple as possible, which is pretty much mapping the GPIO pins. For the remaining of this document we'll be using ST STM32F769I_DISCOVERY reference target and will configure the ADC to use the ADC channels exposed through the CN14 connector. From the schematics of the board (mb1225 F769I-DISCO schematic.pdf downloadable from ST web site) one can see that the following channels exposed: pad GPIO pin ADC channel A0 PA6 ADC1_IN6 A1 PA4 ADC1_IN4 A2 PC2 ADC1_IN12 A3 PF10 ADC1_IN8 A4 PF8 ADC3_IN6 A5 PB8 ADC3_IN7 To fully take advantage of the ADC hardware we are going to enable the internal ADC sources. These ones have to be mapped to ADC1. pad GPIO pin ADC channel N.A. N.A. ADC1_TEMP_SENSOR N.A. N.A. ADC1_VREFINT N.A. N.A. ADC1_VBAT Configurations The configurations are all concentrated in the target_windows_devices_adc_config.cpp file in the reference target folder. This source file is added to the CMake target only if the API_Windows.Devices.Adc option is set to ON. See the target CMakeList.txt. There is a global NF_PAL_ADC_PORT_PIN_CHANNEL array for the ADC controller. On each entry there are the configurations for the ADC block, the GPIO port and pin along with the ADC internal channel reference. Note that for the internal sources channels the GPIO port and pin are to be set to NULL and those are only available on ADC1. All the naming come from existing ChibiOS defines. The configuration array will look like: const NF_PAL_ADC_PORT_PIN_CHANNEL AdcPortPinConfig[] = { // ADC1 {1, GPIOA, 6, ADC_CHANNEL_IN6}, {1, GPIOA, 4, ADC_CHANNEL_IN4}, {1, GPIOC, 2, ADC_CHANNEL_IN12}, {1, GPIOF, 10, ADC_CHANNEL_IN8}, // ADC3 {3, GPIOF, 8, ADC_CHANNEL_IN6}, {3, GPIOB, 8, ADC_CHANNEL_IN7}, // these are the internal sources, available only at ADC1 {1, NULL, NULL, ADC_CHANNEL_SENSOR}, {1, NULL, NULL, ADC_CHANNEL_VREFINT}, {1, NULL, NULL, ADC_CHANNEL_VBAT}, }; There is also a variable with the channel count, like this: const int AdcChannelCount = ARRAYSIZE(AdcPortPinConfig); To complete the configuration one has to enable ADC1 and ADC3 for ChibiOS HAL. Remember those were the ADC blocks used in the configuration above. This is done by editing the mcuconf.h file inside the target nanoCLR folder. Search for STM32_ADC_USE_ADC1 and STM32_ADC_USE_ADC3 and set those to TRUE ."
  },
  "content/hal-pal/chibios/clr-managed-heap.html": {
    "href": "content/hal-pal/chibios/clr-managed-heap.html",
    "title": "CLR Managed heap definition | nanoFramework Documentation",
    "keywords": "CLR Managed heap definition About this document This document describes how the CLR manged heap is defined as a ChibiOS target. For STM32 based devices: The configurations are chained by linker files: the target linker file provided for the nanoCLR in the target board folder, e.g. STM32F091xC.ld and from within calls rules.ld except the F7 series which calls rules_clr.ld, rules_code.ld, rules_data.ld and rules_stacks.ld directly. rules.ld (which is common to all STM32 based ChibiOS targets and calls the next set of linker files) rules_clr.ld , rules_code.ld , rules_data.ld and rules_stacks.ld Managed heap location and size The CLR managed heap can be located on the target board at any RAM address where space available. Either internal or external. It will be placed (considering the RAM region defined) after the region containing the CRT heap (if it's assigned to that same RAM region) and right before the Vector table copy in RAM (if it is assigned to the same RAM region). This empowers developers to create new target boards with maximum flexibility of where to locate the CLR managed heap and its respective size. Definition the CLR managed heap location The location of the CLR managed heap is set in in target linker file provided for nanoCLR in the target boards folder, e.g. STM32F091xC_CLR.ld For example the line (usually toward the end of the file) will contain something similar to REGION_ALIAS(\"CLR_MANAGED_HEAP_RAM\", ram0); . The example stated here defines CLR manged heap location as being set in the ram0 region. The RAM regions and respective sizes are defined in the same file. For further information, please check the ChibiOS documentation for details on how to define further RAM regions. Size of the CLR managed heap The size of the CLR managed heap is automatically adjusted to take all the available RAM space after the CRT heap (if it's assigned to that same RAM region). It maybe be required to adjust the size of the CRT heap. This is set in the CMake file of the target board, e.g. CMakeLists.txt . Look for the __crt_heap_size__ definition in a line that contain something similar to --defsym=__crt_heap_size__=0x800 . In the example stated here the size of CRT heap is being set to 0x800. When defining the size you need to take into account several factors: the total available size of the region where it's being placed if there are initialized variables assigned to this region how much space they are taking if the CRT heap is located in this region and the size left for it is enough The linker is only able to determine whether there is enough room for all of these factors and it will only complain if there isn't. However it can not determine if the CRT heap (just like the CRT heap) is large enough for the running requirements. That is up to the target board developer. For a detailed overview on the final memory map you may want to check the nanoCLR.map that will be located in the build folder after a successful build. Look for the regions called .heap and .clr_managed_heap to see the final addresses where those were placed."
  },
  "content/hal-pal/chibios/config-usb-virtual-com-port.html": {
    "href": "content/hal-pal/chibios/config-usb-virtual-com-port.html",
    "title": "USB configuration of Virtual COM port (CDC) | nanoFramework Documentation",
    "keywords": "USB configuration of Virtual COM port (CDC) About this document This document describes the available settings/options to configure the USB Virtual COM port provided by ChibiOS HAL. All these settings/options are exposed in the usbcfg.c file, located in the common folder of the reference boards that expose an USB device connector. USB Vendor #define USB_STRING_VENDOR L\"STMicroelectronics\" In this setting it's defined the string that will show as the Vendor name for the USB device (showing in Windows Device manager, for example). Adjust the string to whatever is to show there. Mind the L prefix, DO NOT remove it. USB Device description #define USB_STRING_DEVICE_DESCRIPTION L\"nanoFramework Virtual COM Port\" In this setting it's defined the string that will show as the device description for the USB device (showing in Windows Device manager, for example). Adjust the string to whatever is to show there. Mind the L prefix, DO NOT remove it. USB serial number #define USB_STRING_SERIAL_NUMBER L\"NANO_xxxxxxxxxxxx\" In this setting it's defined the string that will show as the serial number of the USB device (showing in Windows Device manager, for example). This serial number will be part of the instance path of the device that helps the OS to identify and address the USB device like in \\USB\\VID_0483&PID_5740\\NANO_3267335D3333. Adjust the string to whatever is to show there. Mind the L prefix, DO NOT remove it. Note 1: nanoFramework ANT tool uses this serial number as a helper to identify nanoFramework devices relying that this string starts with NANO_ (that is upper case NANO followed by an underscore). Note 2: For STMicroelectronics reference boards the serial number is completed with the silicon unique ID available on their STM32 parts. Check the series manual for details. USB Vendor ID idVendor in the vcom_device_descriptor_data structure. In this setting it's defined the USB Vendor ID of the USB device. Hexadecimal 0x0483 in the reference boards (that's STMicroelectronics USB Vendor ID). Note: You are not allowed to use the USB Vendor from a third party without their express consent. If you want to use your own Vendor ID you have to apply for one with the USB organization. USB Product ID idProduct in the vcom_device_descriptor_data structure. In this setting it's defined the USB Product ID of the USB device. Hexadecimal 0x5740 in the reference boards (that's STM USB product ID used in the Discovery and Nucleo boards). Note: You are not allowed to use the USB Vendor ID + Product from a third party without their express consent. If you want to use your own Vendor ID + Product ID you have to apply for one with the USB organization."
  },
  "content/hal-pal/chibios/external-memory.html": {
    "href": "content/hal-pal/chibios/external-memory.html",
    "title": "External memory | nanoFramework Documentation",
    "keywords": "External memory About this document This document describes how to use external memory for the managed heap using the ChibiOS FSMC driver from the .NET nanoFramework overlay. Please refer to the CLR managed heap documentation . Memory controller Most STM32 devices include a FSMC (Flexible Static Memory Controller) that provides seamless interface with the most common memory types either synchronous or asynchronous. Assumptions and design The initialization of the memory controller along with the memory configuration have to occur as early as possible after the boot. In the current .NET nanoFramework design this is expected to occur right after the call to CMSIS osKernelInitialize() when all other initialization and configurations have already happen and interrupts are enabled. Because the memory space is to be used as the managed heap the timing is no more critical than that, so pretty much anywhere before the call to the CLR startup should be quite alright. The function were the external memory configuration and initialization is to occur is Target_ExternalMemoryInit() . The nanoHAL_v2.h provides a weak and empty implementation of this function. If a target is to use external memory it has to provide the strong implementation of this function and call it before ClrStartup() is called. Considering that the default placement of the CLR managed is in the SoC internal RAM, the linker file includes a rule to place this region (called clr_managed_heap ) in one of its RAM regions. Example for STM32F429I-Discovery reference target To provide a working example of this configuration we are taking the STM32F429I-Discovery reference target that is in the nf-interpreter repository here . This targets board has a 64Mbit SDRAM (the chip is the IS42S16400J). The target implementation is provided in the target_external_memory.c file that is located in the target base folder. This location allows the function to be reused by nanoCLR and nanoBooter, if desired. Plus, it's included in the compile sequence at a time that the target CPU and other required definitions are already set. In order to include this code file in the build it has to be included as source file the target definition. For our example this is in the arguments of add_executable for nanoCLR. Next we have to set the __crt_heap_size__ symbol to 0 so the managed heap is not placed in the SoC RAM. This is done by setting it to 0 in the target CMakelist.txt like this --defsym=__crt_heap_size__=0x0 ."
  },
  "content/hal-pal/index.html": {
    "href": "content/hal-pal/index.html",
    "title": ".NET nanoFramework HAL/PAL | nanoFramework Documentation",
    "keywords": ".NET nanoFramework HAL/PAL ChibiOS HAL ADC configuration CLR Managed heap definition USB configuration of Virtual COM port (CDC)"
  },
  "content/introduction/companies-using-nanoframework.html": {
    "href": "content/introduction/companies-using-nanoframework.html",
    "title": "Companies using .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Companies using .NET nanoFramework .NET nanoFramework is comprised of a number of components, from the firmware running on the target devices to the various class libraries distributed as NuGet packages. All those have got a considerable download count (and keep increasing). Because it's OSS we can't possible know or track who is using it. If you are using .NET nanoFramework in a commercial product we would love to know. Please fill in this form . Logo Company name Industry Location 🏷 Eclo Solutions Monitoring systems 🌍 Portugal 🏷 Global Control 5 Ltd. Building automation 🌍 Poland 🏷 OrgPal Automation systems 🌍 U.S.A."
  },
  "content/introduction/what-is-nanoframework.html": {
    "href": "content/introduction/what-is-nanoframework.html",
    "title": "What is .NET nanoFramework | nanoFramework Documentation",
    "keywords": "What is .NET nanoFramework .NET nanoFramework is a free and Open Source platform that enables the writing of managed code applications for constrained embedded devices . It is suitable for many types of projects including IoT sensors, wearables, academic proof of concept, robotics, hobbyist/makers creations or even complex industrial equipment. It makes the development for such platforms easier, faster and less costly by giving embedded developers access to modern technologies and tools used by desktop application developers. Developers can harness the powerful and familiar Microsoft Visual Studio IDE and their .NET C# knowledge to quickly write code without having to worry about the low-level hardware intricacies of a microcontroller. Desktop .NET developers will feel “at home” and are able to use their skills in embedded systems development, enlarging the pool of qualified embedded developers. It includes a reduced version of the .NET Common Language Runtime (CLR) and features a subset of the .NET base class libraries along with the most common APIs included in .NET IoT allowing code reuse from .NET IoT applications, thousands of code examples and open source projects. Using Microsoft Visual Studio, a developer can deploy and debug the code directly on real hardware. The .NET nanoFramework platform picks up where .NET Micro Framework left off and uses some of its building blocks. Many of the original components were completely rewritten, others improved and some simply reused. A lot of code cleansing and improvements took place to make .NET nanoFramework fit for the future! Read along and find out why use nanoFramework? You can watch this video from the Microsoft IoT Show featuring .NET nanoFramework connected to Azure IoT Hub, measuring a BMP280 sensors and using the unique deep sleep feature from MCU. A real life example with .NET nanoFramework:"
  },
  "content/introduction/why-use-nanoframework.html": {
    "href": "content/introduction/why-use-nanoframework.html",
    "title": "Why use .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Why use .NET nanoFramework .NET nanoFramework is the perfect enabler for developing software that works on embedded devices. Start with a low cost and readily available development board, then use .NET nanoFramework to write, debug and deploy your code. Whether this is your first foray into programming or are a seasoned developer, if you want a powerful and easy to use tool for developing software that runs on embedded devices, you are in the right place. With its modular architecture, it’s easy to grab the core components (like the CLR, debugger and interpreter) and extendibility to new hardware platforms, .NET nanoFramework is the perfect partner for your project. The current reference implementation uses ChibiOS supporting several ST Microelectronics development boards and also ESP32 . Because it’s completely free and Open Source you have access to and the ability to modify all parts of the code including the ability to leverage what others have already contributed. If you are willing to, you can help shape the future by contributing back to the project and rapidly growing community. Here are some of its unique features: Can run on resource-constrained devices with as low as 256kB of flash and 64kB of RAM. Runs directly on bare metal. Currently ARM Cortex-M and ESP32 devices are supported. Supports common embedded peripherals and interconnects like GPIO, UART, SPI, I2C, USB, networking. Provides multithreading support natively. Support for energy-efficient operation such as devices running on batteries. Support for Interop code allowing developers to easily write libraries that have both managed (C#) and native code (C/C++). No manual memory management because of its simpler mark-and-sweep garbage collector . Execution constrains to catch device lockups and crashes. Here are some advantages over other similar systems: First class debugger experience right on the target hardware with breakpoints, single step, step into, step out, step over, pause and stop. Powerful and free programming environment with Microsoft Visual Studio IDE . Support for a large range of inexpensive boards from several manufacturers including: Discovery and Nucleo boards from ST Microelectronics , Quail from Mikrobus, Netduino from Wilderness Labs and ESP32 DevKit C. Easily expandable to other hardware platforms and RTOSes . Currently is targeting CMSIS compatible ones and ESP32 FreeRTOS port. Completely free and Open Source . From the core components to the utilities used for building, deploying, debugging and IDE components. In case you wonder: what is .NET nanoFramework ?"
  },
  "content/licensing/chibios.html": {
    "href": "content/licensing/chibios.html",
    "title": "Licensing options when using ChibiOS as the RTOS | nanoFramework Documentation",
    "keywords": "Licensing options when using ChibiOS as the RTOS About this document This document provides a general overview of the licensing options available when using ChibiOS as the .NET nanoFramework RTOS component. The nanoFramework team have been in contact with the ChibiOS sales team to ensure accuracy of the following information at time of print (October 2017). For details or to discuss your particular situation, we strongly recommend getting in touch with the ChibiOS sales team . What exactly is being used from ChibiOS in .NET nanoFramework firmware .NET nanoFramework is built against unmodified ChibiOS sources via a mirror (for stability). It's using: The HAL , which is released under Apache License 2.0 meaning that it's 100% free to use or distribute without royalties for any purpose. The RT , is released under GPL3. See below for the licensing options which maybe different depending on your particular use. Can I use ChibiOS freely for my hobby or personal development at home Yes, using ChibiOS in a Free and Open Source Software project or for personal use is perfectly fine. Can I use ChibiOS freely if I'm developing a commercial product Yes but if you modify the ChibiOS source code in any way please be aware of the following options: you must comply with the GPL3 licensing terms. Basically you MUST keep the ChibiOS part open source. OR are okay with ChibiOS publicizing your use of it and you clearly mention that your product is using ChibiOS you may keep your additions closed source. Can I use ChibiOS 'components licensing' 'Components Licensing' is when you buy only parts of ChibiOS, for example the RT kernel with the CM4 port. This option MUST be discussed it with the ChibiOS sales team. What is a 'runtime license' The 'runtime license' is an option for the use of parts of ChibiOS in software products that are sold to 3rd parties. This option MUST be discussed with the ChibiOS sales team. What about the .NET nanoFramework firmware The nanoframwork firmware is released under Apache 2 license and has no implications of using ChibiOS as the RTOS. What about managed apps (C#) running on .NET nanoFramework Applications (the C# code) that are loaded into and executed by the nanoframwork firmware firmware image are not compiled or built by it due to the fact that it is interpreted on the fly from memory. As such, it can be deemed as a seperate component and your C# managed code from a licensing perspective can be deemed seperate from the firmware. For discussion sake imagine that you won't ever load a managed app on the firmware image. .NET nanoFramework would still be perfectly working software, just not doing much. As such this means that ChibiOS licensing doesn't apply to C# managed apps and it's use is not affected by the ChibiOS licensing terms."
  },
  "content/licensing/index.html": {
    "href": "content/licensing/index.html",
    "title": ".NET nanoFramework licensing | nanoFramework Documentation",
    "keywords": ".NET nanoFramework licensing All .NET nanoFramework source code is provided under MIT license. This is valid for nf-interpreter, class libraries, Visual Studio extension and all tools and utilities. Specific or more strict licensing exists for the following components. Please check if these impact your project and/or usage. ChibiOS licensing"
  },
  "content/maintainers/cd-ci-automation.html": {
    "href": "content/maintainers/cd-ci-automation.html",
    "title": "CD & CI automation | nanoFramework Documentation",
    "keywords": "CD & CI automation About this document This document describes the CD-CI automation by means of Azure Pipelines and GitHub action. Commands that nfbot understands nfbot reacts to commands passed on PR comments for any repository. Only members of the organization have permission to send these commands. On successful execution of a command, nfbot reacts to the comment with a 👍. If case there is an error or problem with the execution it will react with 😕. The command syntax is: @nfbot comand <argument(s)> . Available commands: Command Argument Description updatedependents - Update the libraries that depend on this library updatedependencies - Check if there are updated versions of the referenced libraries and update if needed startrelease - Kick a release candidate workflow for this library runpipeline branch Runs the Azure Pipeline for the mentioned branch. If no branch is mentioned runs it for the default branch."
  },
  "content/maintainers/community-targets-build-release.html": {
    "href": "content/maintainers/community-targets-build-release.html",
    "title": "Community targets build and publishing | nanoFramework Documentation",
    "keywords": "Community targets build and publishing About this document This document describes the recipe to setup the build and publish of new Community targets. Introduction The build of each of the Community targets is a job in Azure Pipelines yaml. The build of each target is triggered by checking the respective tick box in the PR description (comming from the PR template) or checking [] ALL . Note that it's possible to check more than one token to be build. Setup the build for a new target Update the azure-pipelines.yml in the Community repository as follows: Start by adding a new job to the collection. Preferably copy/paste from a similar target. Make sure to use the target name at the various places where it shows, namely: job name, condition expression and variables. Update the PR template by adding the new target name in the checklist. Setup the image publishing Community target images are distributed through our Cloudsmith repository . The 1st build that generates the package has to happen so that it's actually created in the repository. Go to the package page of the recently created package and grab the markdown from the \"Badges\" tab (make sure to grab the one for the latest version) and paste it in the targets list at the readme file. PRs and manual builds When merging a PR make sure to add to the commit message the token(s) for the targets to build, otherwise the merge to the master branch won't trigger a build for any board. It's possible to manually start a build and specify that it should build all targets. This is most handy, for example, after a number of changes in the nf-interpreter repo to build new images for the Community targets. Another situation is when one forgets to add the build token in the PR merge and needs to trigger a build afterwards. To do this, go to the Builds page in the project Azure Pipelines and hit the 'Queue' button. When the pop-up shows, change the BUILD_ALL variable to 'true'. Like this:"
  },
  "content/maintainers/container-maintenance.html": {
    "href": "content/maintainers/container-maintenance.html",
    "title": "Container maintenance | nanoFramework Documentation",
    "keywords": "Container maintenance Adjusting the Dockerfile images The Dockerfile source images are located in .devcontainer/sources . Whenever you need to adjust something, please check the following: [ ] when you adjust a version for a cloned repository, please check all the Dockerfile [ ] in .github/workflows change the version for the generated image [ ] in the .devcontainer adjust the version of the corresponding Dockerfile Example: [X] when you adjust a version for a cloned repository, please check all the Dockerfile You change the file targets/TI-SimpleLin/CMakeLists.txt and adjust the version in set(TI_SL_CC13x2_26x2_SDK_TAG \"4.40.04.04\" CACHE INTERNAL \"TI CC13x2_26x2 SDK tag\") You need to adjust this version as well in .devcontainer/sources/Dockerfile.All and adjust it here git clone --branch 4.40.04.04 https://github.com/nanoframework/SimpleLink_CC13x2_26x2_SDK.git --depth 1 ./sources/SimpleLinkCC13 \\ You need to adjust this version as well in .devcontainer/sources/Dockerfile.TI and adjust it here git clone --branch 4.40.04.04 https://github.com/nanoframework/SimpleLink_CC13x2_26x2_SDK.git --depth 1 ./sources/SimpleLinkCC13 \\ Be aware that some cloned repositories are present in almost all the files. So make sure you adjust all of them. [X] in .github/workflows change the version for the generated image change the version of the container in all.yaml by increasing the minor version (major if this is a real major change), for example if it was 1.5 to GCR_VERSION: v1.6 change the version of the container in ti.yaml by increasing the minor version (major if this is a real major change), for example if it was 1.2 to GCR_VERSION: v1.3 Be aware that versions of the different containers can be different depending on the changes made [X] in the .devcontainer adjust the version of the corresponding Dockerfile Change the version accordingly in Dockerfile.All to FROM ghcr.io/ellerbach/dev-container-all:v1.6 Change the version accordingly in Dockerfile.TI to FROM ghcr.io/ellerbach/dev-container-all:v1.6 Publishing a new package Buy default a new package has a private visibility. You will need to adjust the visibility of the potential new dev containers by: Go to https://github.com/nanoFramework/packages Select the package Click Connect Repository Select nf-interpreter Click View all tagged versions Click Options Adjust the visibility to public Check as well Inherit access from source repository"
  },
  "content/maintainers/creating-a-new-repo.html": {
    "href": "content/maintainers/creating-a-new-repo.html",
    "title": "Procedure for creating a new repository | nanoFramework Documentation",
    "keywords": "Procedure for creating a new repository About this document This document describes the recipe to create a new GitHub repository. It's meant for class libraries. Introduction The strict following of this procedure is required in order to maintain consistency and coherence throughout the repositories, along with taking advantage of the build tools, testing and publishing automation. If in doubt please ask one of the senior team members. Creating the repository in GitHub This is basically clicking the create new repository button in GitHub. Note: The class libraries repositories are usually named with the prefix \" nanoFramework . namespace \" most of the remaining repositories are \" nf - some-relevant-name-here \". As we are following the GitFlow branching model two branches must be created: main and develop . Make sure to create an empty readme.md to make it easier to fork and clone the new repo. Adjust the repository settings (part 1) Go to the repository Settings and move into Options . In the Features section disable Wikis, Issues and Projects. On the Merge Button section disable Allow merge commits. We prefer to have tidy merges on PRs without having to bother contributors to squash commits. Move into Branches and set develop as the default branch. Setup Sonarcloud project For class libraries projects a Sonarcloud project has to be setup in order to run and process the project analysis. You have to have installed on your machine: SonarScanner for .NET (.NET Framework 4.6+)) Java SDK. Recommended After installing the above, it's required to run locally the analysis tool for the very first analysis. Open a VS developer command prompt at the project folder. Run the preparation step with PATH-TO-YOUR-LOCAL-INSTALL-FOLDER\\SonarScanner.MSBuild.exe begin /k:\"nanoframework.WHATEVER.CLASS.NAME\" /o:nanoframework /d:sonar.host.url=https://sonarcloud.io /d:sonar.login=TOKEN_FOR_SONARCLOUD Build the solution msbuild nanoFramework.WHATEVER.CLASS.NAME.sln /t:Rebuild /p:platform=\"Any CPU\" /p:configuration=\"Release\" Run the analysis tool and upload files PATH-TO-YOUR-LOCAL-INSTALL-FOLDER\\SonarScanner.MSBuild.exe end /d:sonar.login=TOKEN_FOR_SONARCLOUD Setup Azure DevOps Open a new browser window on which you are signed in to GitHub as nfbot . On the repo Settings, navigate to \"Integrations & Services\". Click \"Configure\" button for Azure Pipelines. The next step will take you to the Azure DevOps website. Click on \"Create New Project\". Name the project following the GitHub repo name. Select Public for visibility option. After the project is created a list with GitHub repositories shows. Select the repository that has been just created. The next step asks for the Pipeline configuration. Choose \"Starter Pipeline\" to get the build running and allow configuring the pipeline. The next steps will show the minimal yaml. Click on \"Variables\" and add the following ones. Add DiscordWebhook with a value taken from the Azure webhook of the \"build-monitor\" channel in our Discord server. Make sure that the variable is set to secret by clicking on the appropriate option. Add another variable GitHubToken with a value taken from the nfbot personal tokens in GitHub. Make sure that the variable is set to secret by clicking on the padlock icon. Add another variable NbgvParameters , leave it empty and check \"Let users override this value when running this pipeline\". Add another variable StartReleaseCandidate , set the content to false and check \"Let users override this value when running this pipeline\". Add another variable UPDATE_DEPENDENTS , set the content to false and check \"Let users override this value when running this pipeline\". Add two more secret variables SignClientUser and SignClientSecret and fill in with the credentials for the .NET Foundation signing service. Make sure that the variables are set to secret by clicking on the appropriate option. Click the \"Save\" button. Navigate back to the Pipeline, select it and click \"Edit\" (at the top right). Then click on the 3 vertical dots (again at the top right) and then \"Triggers\". Make sure that the option to override YAML is not checked for \"Continuous integration\". Uncheck the same option for \"Pull request validation\" and check the \"Make secrets available to builds of forks\". Click \"Save\" in the toolbar (NOT \"Save & Queue\"). Go to the General Project project and navigate to Project Settings - Service Connections. Open each of the service connections there, click on the 3 vertical dots (again at the top right) and then \"Security\". Scroll down to \"Project permissions\", click on the + icon at the right hand side and select the newlly created project. This will add a permission to use this shared service connection. Go back to the pipelines view and with the current pipeline selected, click on the ellipsis icon and then on \"Status badge\". Copy the markdown code that shows on the pop-up. This will be required to add the correct build badges in the repo readme in a moment. Prepare the initial commit Fork the repo into your preferred GutHub account and clone it locally. The best option is to copy/paste from an existing repo, so you're more efficient doing just that. Mind the name changes tough! Grab the following files: .github_changelog_generator .gitignore (no changes required) azure-pipelines.yml LICENSE.md (no changes required) README.md template.vssettings (no changes required) version.json NuGet.Config assets\\readme.txt assets\\nf-logo.png config\\filelist.txt config\\SignClient.json Open \"azure-pipelines.yml\" Rename the nugetPackageName variable with the new name (mind the nanoframework prefix). Rename the repoName variable with the repo name. Rename the sourceFileName parameter with the equivalent name. It's probably wise to wait for the first successful build of the class library and then get back here with the correct name for the assembly declaration source file. Rename the sonarCloudProject variable with the repo name. If there are class libraries that depend on this one, copy the \"update dependencies\" job from CorLib \"azure-pipelines.yml\". If there aren't just skip this step. Open \".github_changelog_generator\" and set the project to the repo name. Open \"version.json\" and set the version to the appropriate one. Make sure to follow our version number guidelines. In doubt please ask one of the senior team members. Open \"README.md\" Rename the class library name occurrences with the new name. Rename the package name for the NuGet badges. Replace the build status badges with the ones that you've copied from Azure DevOps. They'll be the same until there is a second pipeline for the master branch. Create a folder at the root level with the name of the new class library. Add to the VS Solution the class library project. Again it's better to follow an existing one and ask in doubt. Make sure you are following the naming pattern. Make sure you copy the key.snk from the initial repo (or from the CorLib repo). DO NOT create a new one. Rename, edit and adjust as required the \"nuspec\" files to create the NuGet packages. Edit the \"readme.txt\" inside the assets folder and rename the repository name. Edit the \"files.txt\" inside the config folder and rename the file pattern. Still on\"azure-pipelines.yml\" and only if there are class libraries that depend on this one. Adjust the repositoriesToUpdate list with the repo names of the class libraries that depend on this new one. Adjust the repository settings (part 2) Go to the repository settings in GitHub and move into Branches . Go to the rule for \"develop\" branch and change the following: Enable \"Require pull request reviews before merging\" Enable \"Require status checks to pass before merging\" with the options: \"Require branches to be up to date before merging\" \"Status checks: nanoframework. azure-devops-project-name \" \"Status checks: license/cla\" (for develop branch) Update the dependency upwards As a minimum, the new class library depends on mscorlib. If that's the only dependency, edit the azure-pipelines.yml file there and add this new repo to the repositoriesToUpdate list. Now, if it depends on others, you have to figure out which one of those is at the end of the dependency chain and add this new repo to that azure-pipelines.yml file. For example, System.Device.Gpio depends on CoreLibrary and Runtime.Events (which, in turn, depends on CoreLibrary ). Updating it's dependencies has to the triggered at Runtime.Events not on CoreLibrary because of the chained dependency. Add the class library to the documentation project If this class library has documentation that has to be published as part of nanoFramework documentation (which is most likely) it needs to be referenced in the documentation project. Edit the documentation repo azure-pipelines.yml and add entries for this new repo at steps: clone , restore and build . Just follow one of the others already there. Edit the class library documentation document and add an entry for the new class library in the appropriate table, following the pattern and format being used there."
  },
  "content/maintainers/github-workflow.html": {
    "href": "content/maintainers/github-workflow.html",
    "title": "GitHub workflow procedures | nanoFramework Documentation",
    "keywords": "GitHub workflow procedures About this document This document describes the GitHub workflow and \"procedures\" that should be followed by maintainers. GitHub labels We have a set of basic labels that are common to all repos and should be used to communicate and/or flag issues and PRs. It's a clear and quick way of understanding the current status of something, help filtering and also triage what's it about. On PRs they are even used by the change log generator to properly update the change log with bugs, enhancements, breaking changes, etc. That's why it's vey important that all those are properly labeled from the moment they are created. The Home project has several others that are used to classify the group the issue belongs to (like tools, a specific class library,...). There are also a few that should be used to flag them to the community with a call for action like \"good first issue\", \"trivial\", \"feeback requested\". To summarize it's very important and makes everyone life easier if the labels are used properly. GitHub issues Upon a new issue being raised, it should be properly labeled and, if possible/relevant, a follow up comment should be added. This is useful to show developers that we care, that the project is active and also helps the flow of the next steps, which is someone eventually pickup the issue, reply to it, make additional testing or start working on it. When a maintainer self-assigns an issue or assigns it to another team member the appropriate flags should be managed. This provides follow up to the community and prevents that several developers invest their time working on the same task, possibly duplicating work and wasting time, which leads to frustration. As it's made abundantly clear on all repos that GitHub issues should not be used to ask questions. For that, developers are encouraged and should use the Discord channels. They are better served there by having a quick reply, reach-out to everyone in the community, have a better experience and it's usually more convenient. Having said that, issues raised to ask questions should be directed to Discord and closed with an appropriate and polite message. The exceptions would be when the user can't use Discord (because of company firewall rules, some regions in the world have access to social network block) or a quick reply does it, which is more efficient."
  },
  "content/maintainers/guidelines-for-community-interaction.html": {
    "href": "content/maintainers/guidelines-for-community-interaction.html",
    "title": "Guidelines for community interaction | nanoFramework Documentation",
    "keywords": "Guidelines for community interaction About this document This document provides guidelines for maintainers on how to interact with the community. Introduction .NET nanoFramework it's an Open Source project therefore it aims to gather the interest of a community as broad as possible. This community is expected to be as active as possible in various fronts: providing feedback, generate discussions around issues and suggestions, contribute back to the project with code and performing various tasks like answering questions in project forums, repo maintenance, project web site, writing documentation, social marketing and others. The interaction between the project team and the community plays an important role on the overall success of .NET nanoFramework . The following guidelines are provided as a suggestion and should also be considered as a \"kind of\" S ervice L evel A greement for maintainers. Always interact with community members in a friendly, courteous and positive way. Remember: people come here probably because they have questions or are in search for help. If they are treated correctly they'll be happy, feel welcome and the are more likely to contribute back, provide a positive feedback or spread the word about .NET nanoFramework . If someone is not using the proper channel, not providing enough details to formulate a clear question or not writing clearly, do your best to point them in the right direction and try to understand them. They may not have understood the project instructions properly or they might not be English native. Be patient and understandable. People tend to expect a quick reply to their questions or interactions. Being able to accomplish this not only makes them to have a positive feeling about the project but it also shows that the project is alive and kicking! The person(s) in charge of each channel should be able to provide feedback in a timely fashion. If someone from the team notices that this is not happening (for some reason) it should step in and do it by itself. Note that the feedback here depends on the channel. If it's the Discord channel a dialog has to be established. If it's an issue or a PR just by setting the appropriate labels and assigning it to the person in charge, it's a sign that something is happening and the user will be rest assured that it's being taken care of. Pull request should be always welcomed. Even if they are small or almost meaningless. It helps setting a positive feeling about this and will bring more and with increased quality. When commenting or reviewing keep the positive and friendly tone. Use thanks and please all the time. If a PR is complete trash, not relevant or makes no sense at all try to put it as nicely as possible."
  },
  "content/maintainers/index.html": {
    "href": "content/maintainers/index.html",
    "title": "Documentation for maintainers | nanoFramework Documentation",
    "keywords": "Documentation for maintainers CD-CI automation Guidelines for Community interaction GitHub workflow Community targets build and publishing Procedure for creating a new repository Publish Workflow and Strategy Semantic Versioning"
  },
  "content/maintainers/publish-workflow.html": {
    "href": "content/maintainers/publish-workflow.html",
    "title": "Publish Workflow and Strategy | nanoFramework Documentation",
    "keywords": "Publish Workflow and Strategy About this document This document describes the workflow and strategy adopted by .NET nanoFramework to handle the merging, branching and release publishing. Pull Requests Pull requests with contributions are always merged into develop branch. On each pull request build the respective NuGet packages are published to nanoFramework Azure DevOps NuGet feed (if this is a component that uses this distribution channel). By sourcing this NuGet feed someone testing that pull request can reference it straight away without any further hassle. There is nothing else to be done as the package identifier and the version are automatically incremented based. Development Once pull requests have been merged into develop a new release is automatically generated and published to nanoFramework Azure DevOps NuGet feed (if this is a component that uses this distribution channel). There is nothing else to be done as the package identifier and the version are automatically incremented. Release Candidates The process is kicked off by opening up a pull request from develop to a new branch named release-vN.N.N (note the branch name starting with release , this is mandatory for the configuration and scripts to properly recognize this as such). If this release contains a breaking change then increase the MAJOR version by one and reset the MINOR back to zero and keep the PATCH at zero. Otherwise just bump the MINOR version by one and keep the PATCH at zero. At this stage the contributor proposing a new release must perform a few administrative tasks. It's the responsibility of the release approver to verify that these tasks have been performed correctly. Details on the release preparation can be read from the Nerdbank GitVersioning documentation here . If the process for merging individual pull requests was followed perfectly there is not much else to do except verify that all pull requests have assigned a milestone and an appropriate label. The label classifies the type of change and it's mandatory because the release notes are automatically generated from this information. For the purposes of the automated release notes generation, only the pull requests have to follow this strict label mapping, not the issues. This is because the issue management is centralized in the Home repo (not per repository). The pull requests that address an issue already link to that issue thus making easy to trace the changes and the reasoning about those, ultimately self-documenting the changes. If there are any problems with the generated release notes document, resolve those in GitHub by assigning the appropriate labels to the pull requests and then re-run the build for the merge commit in Azure DevOps. Production The process is kicked off by opening up a pull request from a release-vN.N.N branch to master . In the Home repository, edit the vNext milestone and change it to the version number of this release. Once the pull request has been approved use the merge commit option ( not the squash and merge ). This will trigger a new CI build after which a new draft release with be generated along with the release notes. If the validation of these has already been done in the release-vN.N.N step above there should be no need for further corrections. Pressing the publish release button will stamp the repository with a git tag with the release version, overriding any automatic versioning strategies and trigger a new build which will be automatically published to NuGet (if this is a component that uses this distribution channel). After the build for the tag release is completed edit the source/version.json file and bump the version field to the vNext version, including the preview tag. Then start a new PR from the release-vN.N.N into the develop branch. This makes any changes in that have been made branch should be deleted. After the CI completes squash and merge ( really really squash and merge ) the PR. The release-vN.N.N branch can now be safely be deleted. To complete this step create a new vNext milestone in the Home repo."
  },
  "content/maintainers/semantic-versioning.html": {
    "href": "content/maintainers/semantic-versioning.html",
    "title": "Semantic Versioning | nanoFramework Documentation",
    "keywords": "Semantic Versioning .NET nanoFramework versioning follows the Semantic Versioning guidelines. Semantic versioning is all about releases and our continuous integration infrastructure uses Nerdbank GitVersioning to automatically version the releases as per the configuration of each repository. .NET nanoFramework follows the GitFlow branching model which allows more structured releases and versioning. .NET nanoFramework has three different workflows which control how the versioning. Development Builds Builds from the develop branch have a suffix of alpha so that they are sorted higher than release builds which provides the team the ability to manually publish development builds to NuGet as pre-releases, if needed. GitVersion is configured in Continuous Deployment mode which automatically increments the version per commit. Pull Request Builds Builds from pull requests have a suffix of test$BuildNumber and are not automatically published to NuGet (if they are distributed by NuGet) but the packages - or artifacts - are available for download from AppVeyor which allows the team or anyone interested to test the unit of change without having to merge it into develop. Release Builds Builds from the master branch do not have a suffix and GitVersion is configured in Continuous Delivery mode. If a commit is tagged, the version in the tag overrides the automatic versioning strategies. Versioning .NET nanoFramework follows the following version pattern: MAJOR.MINOR.PATCH[-PREVIEW\\ALPHA\\RC-BUILDNUMBER]. Major or Breaking : drop/adds support for a platform remove public API introduce incompatible API changes adopt a newer MAJOR version of an existing dependency disable a compatibility quirk off by default Minor : add public API add new behavior add a new feature adopt a newer version of an existing dependency introduces a new dependency add functionality in a backwards-compatible manner any other change (not otherwise captured) Patch : backwards-compatible bug fixes any other minor changes or improvements that are backwards-compatible"
  },
  "content/nxp/flash-nxp-mbed.html": {
    "href": "content/nxp/flash-nxp-mbed.html",
    "title": "Flash a nanoCLR image/nanoBooter in a NXP MIMXRT1060_EVAL board | nanoFramework Documentation",
    "keywords": "Flash a nanoCLR image/nanoBooter in a NXP MIMXRT1060_EVAL board How To guide The easiest way to flash nanoBooter and nanoCLR image onto i.MX RT1060 board is through mbed, which provides virtual disk after you connect the board to PC. NOTE: If you overwritten DAPLink firmware, you will need proper DAPLink firmware for OpenSDA serial and debug adapter that is built into eval board, it provides USB host (IDE, file system and serial terminal). You can download it from here: OpenSDA . Then follow the procedure described in a link. Download the image from .NET nanoFramework repository. Check that J1 is in middle position (power from micro-usb port) and connect usb cable to J41 usb. Removable disk \"rt1060-evk\" should appear in file manager. Extract downloaded image and copy nanoFramework image \"nanobooter-nanoclr.hex\" to removable disk. Device should automatically program flash and reset itself after short time. Check if programming was successful by reseting the board while pressing SW8 button. If a green led starts blinking it means that nanoBooter is working correctly. Finally reset the board and open Visual Studio. Device should be recognized by Device Explorer nanoFramework plugin. FAQ Device is not recognized by Device Explorer. Try to restart Visual Studio Check that firmware was properly programmed, try booting to nanoBooter, device should be listed in Devices Explorer In FAIL.txt on removable disk error: \"The interface firmware FAILED to reset/halt the target MCU\" Check that jumpers J47, J48, J49 are present and J44 is not Jumper J1 must be in middle position if your not using external power Device correctly boots to nanoBooter but is not detected otherwise If you flashed nanoBooter.hex and then nanoCLR.hex, programmer erases memory every flashing process."
  },
  "content/nxp/index.html": {
    "href": "content/nxp/index.html",
    "title": "NXP specific articles | nanoFramework Documentation",
    "keywords": "NXP specific articles Flash NXP i.MX RT1060 firmware using mbed virtual disk"
  },
  "content/reference-targets/esp32.html": {
    "href": "content/reference-targets/esp32.html",
    "title": "Espressif ESP32 Series | nanoFramework Documentation",
    "keywords": "Espressif ESP32 Series These are the firmware images: ESP32_PSRAM_REV0 that fits all ESP32 boards carrying an ESP32 chip with PSRAM support. These can be ESP32-DevKitC, ESP32-WROOM and ESP32-WROVER variants with PSRAM. ESP32_REV0 that fits all ESP32 boards carrying an ESP32 chip without PSRAM support. These can be ESP32-DevKitC, ESP32-WROOM and ESP32-WROVER variants without PSRAM. ESP_WROVER_KIT specific for the ESP WROVER KIT. This one includes the UI features, support for PSRAM and driver for the ILI9341. ESP32_PICO that fits all ESP32 boards carrying an ESP32 PICO without support for PSRAM, like the ESP32-PICO-KIT and the M5Stack ATOM. ESP32_PSRAM_REV3 that fits all ESP32 boards carrying an ESP32 chip revision 3 with PSRAM support. ESP32_LILYGO specific for the LilyGO ESP32 board which includes support for Ethernet PHY. You can check Espressif Product Selector for details on all the existing variants, chips, modules and respective development kits. NOTE: Revision 3 chips are the most recent ones. (nanoff reports the revision of the chip right after connecting to the device). An image built for revision 0 will run perfectly on a revision 3 chip. The other way around won't work. All other images are built with variations of those images. There are variants then exist with or without BLE, with or without screen drivers, etc. ESP32-DevKitC Product page ESP32-WROVER-KIT Product page All M5Stack boards carry ESP32 chips. Some are revision 1, others 3, and others PICO. Please checkout the official documentation to understand which one is based on which chip. Firmware images (ready to deploy) Target Stable Preview ESP32_PSRAM_REV0 ESP32_REV0 ESP32_BLE_REV0 ESP32_PSRAM_REV3 ESP_WROVER_KIT ESP32_PICO ESP32_LILYGO Note: You will find additional ESP32 based targets including screen driver names like: ESP32_REV0_ILI9342 (driver for M5Stack) ESP32_WROVER_KIT (this is the one containing the ILI9341 driver) ESP32_PICO_ST7735S (driver for M5Stick) ESP32_PICO_ST7789V (driver for M5Stick C Plus) ESP32_PSRAM_REV3_ILI9342 ESP32_PSRAM_REV3_ILI9341 Check the details on the ESP32 pin-out available in nanoFramework here ."
  },
  "content/reference-targets/esp32-s2.html": {
    "href": "content/reference-targets/esp32-s2.html",
    "title": "Espressif ESP32-S2 Series | nanoFramework Documentation",
    "keywords": "Espressif ESP32-S2 Series These are the firmware images: FEATHER_S2 that fits all ESP32-S2 boards exposing the embedded USB CDC through GPIO19 and GPIO20. These can be FeatherS2, TinyS2 or any other similar hardware with or without PSRAM. KALUGA_1 specific for the ESP32-S2-Kaluga-1 Kit. This one includes the UI features and driver for the ILI9341. You can check Espressif Product Selector for details on all the existing variants, chips, modules and respective development kits. FeatherS2 FeatherS2 Product page TinyS2 TinyS2 Product page ESP32-S2-Kaluga-1 Kit ESP32-S2-Kaluga-1 Kit Product page Firmware images (ready to deploy) Target Stable Preview FEATHER_S2 KALUGA_1 ⚠️ To update FeatherS2 and TinyS2 with nanoff the boards need to put in download mode by holding [BOOT], clicking [RESET] and then releasing [BOOT]."
  },
  "content/reference-targets/index.html": {
    "href": "content/reference-targets/index.html",
    "title": "Reference target boards | nanoFramework Documentation",
    "keywords": "Reference target boards We provide ready build firmware images for several reference target boards. These can be used for either initial testing and start feeling how cool is to work with .NET nanoFramework or as the base for system designers to develop their own custom boards and firmware. Espressif ESP32 series Espressif ESP32 series Espressif ESP32-S2 series OrgPal boards OrgPal PalThree STMicroelectronics boards NUCLEO64_F091RC STM32F429I_DISCOVERY STM32F769I_DISCOVERY TI SimpleLink boards TI CC1352R1_LAUNCHXL TI CC3220SF_LAUNCHXL NXP boards NXP i.MX_RT1060_EVK Netduino boards NETDUINO3_WIFI Community target boards There is a GitHub repository that holds target boards provided by community members. Check it here ."
  },
  "content/reference-targets/mimxrt-1060-evk.html": {
    "href": "content/reference-targets/mimxrt-1060-evk.html",
    "title": "NXP i.MXRT1060 evalboard | nanoFramework Documentation",
    "keywords": "NXP i.MXRT1060 evalboard Board featuring 600 MHz ARM Cortex-M7 core without internal flash. But it has support for both QSPI and HyperFlash. Can be powered from usb. It has onboard LPC-Link programmer. Technical and Functional Specifications: Memory 256 Mb SDRAM memory 512 Mb Hyper Flash 64 Mb QSPI Flash TF socket for SD card Display and Audio Parallel LCD connector Camera connector Audio codec 4-pole audio headphone jack External speaker connection Microphone S/PDIF connector Connectivity Micro USB host and OTG connectors Ethernet (10/100M) connector CAN transceiver Arduino® interface Specification acquired from NXP product page Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ ✔️ ✔️ ✔️ ✔️ Stable Preview J-Link If you want to use dedicated J-Link programmer instead of onboard one, please refer to SEGGER wiki . It describes how to configure J-Link to work with i.MXRT1060 microcontroller. To setup J-Link in Visual Studio Core refer to this guide."
  },
  "content/reference-targets/netduino3-wifi.html": {
    "href": "content/reference-targets/netduino3-wifi.html",
    "title": "Wilderness Labs Netduino N3 WiFi | nanoFramework Documentation",
    "keywords": "Wilderness Labs Netduino N3 WiFi Product page Firmware images (ready to deploy) Stable Preview"
  },
  "content/reference-targets/orgpal-palthree.html": {
    "href": "content/reference-targets/orgpal-palthree.html",
    "title": "OrgPal PalThree | nanoFramework Documentation",
    "keywords": "OrgPal PalThree Product page Features STM32F769BIT MCU Powerful 216-MHz Arm® Cortex®-M7 2 Mbytes Flash, and 1 MB External SDRAM PalThree Board Versatile board for many applications with integrated sensor protocol support Broad sensor protocol support via RS 485/Modbus, 4-20mA, UART, I2C, Analog/Digital GPIO on a single board On-board micro USB gets you started with instant code development using Visual Studio 2017 or later Can be expanded with many plug in boards using the two 30 pin ports 16 MB QSPI Flash, and 8 MB SPI Flashfor onboard storage SD Card USB multiplexed with 2 connectors microUSB for debugging and programming Ethernet (LAN8742A) with SSL support 16x2 LCD I2C, expandable to use any I2C LCD DSI LCD Connector with I2C (Raspberry Pi LCD connector) Peripherals and Sensor Protocols: RS 485 4-20mA 1 Relay (optically isolated) 1 Flow/Pulse count Digital and Analog GPIOs UART, I2C and SPI 3 user LEDs 2 user buttons 4 key matrix key pad connector Real-Time Clock (RTC) Speaker (buzzer) Integrated temperature and battery monitor 2 30 pin Expansion Ports JTAG 10 pin ARM Micro connector Low power design, power use as low as 0.4mA in auto off mode 9-24V power input range with reverse polarity protection Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ Stable Preview"
  },
  "content/reference-targets/stm32f429i-discovery.html": {
    "href": "content/reference-targets/stm32f429i-discovery.html",
    "title": "STMicroelectronics 32F429IDISCOVERY | nanoFramework Documentation",
    "keywords": "STMicroelectronics 32F429IDISCOVERY Product page Features STM32F429ZIT6 mcu 2 Mbytes of internal Flash memory 256 Kbytes of internal RAM 64-Mbit SDRAM (provided as 8 Mbytes of managed heap) 2.4\" QVGA TFT LCD Two user LEDs: LD3 (green), LD4 (red) Two push-buttons (user and reset) USB OTG with micro-AB connector Simple extension header exposing most of the mcu pins On-board ST-LINK/V2 Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ Stable Preview"
  },
  "content/reference-targets/stm32f769i-discovery.html": {
    "href": "content/reference-targets/stm32f769i-discovery.html",
    "title": "STMicroelectronics 32F769IDISCOVERY | nanoFramework Documentation",
    "keywords": "STMicroelectronics 32F769IDISCOVERY Product page Connecting and powering the board There are two USB ports on the board. For firmware flashing and debugging, use the one named \"USB ST_LINK\": Note: This USB connection will also power the board. Alternatively, it supports PoE, so it may be handy when deploying in the field (although you will not be able to upload new program that way). To enable PoE, install an appropriate jumper on CN3 header. Installing drivers and STM32 Cube Programmer Download the appropriate STM32 Cube Programmer version from ST web site and install it in your development machine. (it will also install USB drivers) Flashing initial nanoFramework firmware Before you can code in C#, nanoFramework runtime has to be flashed in. This is done by nanoff utility, which you installed in the Getting Started guide. Run this command in the Command Prompt: nanoff --target ST_STM32F769I_DISCOVERY --update This command will download the latest stable FW revision, detect the the board and flash it. If it complains like this, disregard it: You are now ready to upload C# programs. User LEDs and buttons The are four LEDs available for the user, marked LD1-LD4, and also a button USER. Their pins are: Marking MCU port&pin nF pin number LD1 PJ13 157 LD2 PJ5 149 LD3 PA12 12 LD4 PD4 52 USER PA0 0 Note : LD4 levels are inverted compared to LD1-LD3. Note : LD3 is also tied to the Arduino header pin D13. If you want to know, how MCU pin name is converted to nF pin number, see the FAQ here . Arduino headers pinout CN11 (power delivery): Marking MCU port&pin nF pin number NC - - IOREF - - RESET NRST - +3V3 - - 5V - - GND - - GND - - VIN - - CN14 (analog functions): Marking MCU port&pin nF pin number Alternative function A0 PA6 6 Analog channel 0 A1 PA4 4 Analog channel 1 A2 PC2 34 Analog channel 2 A3 PF10 90 - A4 PF8 88 Analog channel 4 A5 PF9 89 - CN9 (digital functions): Marking MCU port&pin nF pin number Alternative function D15 PB8 24 I2C1_SCL D14 PB9 25 I2C1_SDA AVDD - - - GND - - - D13 PA12 12 SPI2_SCK D12 PB14 30 SPI2_MISO D11 PB15 31 SPI2_MOSI D10 PA11 11 SPI2_CS D9 PH6 118 - D8 PJ4 148 - CN13 (digital functions): Marking MCU port&pin nF pin number Alternative function D7 PJ3 147 - D6 PF7 87 - D5 PC8 40 - D4 PJ0 144 - D3 PF6 86 - D2 PJ1 145 - D1 PC6 38 USART6_TX D0 PC7 39 USART6_RX Firmware images (ready to deploy) Stable Preview"
  },
  "content/reference-targets/st-nucleo64-f091rc.html": {
    "href": "content/reference-targets/st-nucleo64-f091rc.html",
    "title": "STMicroelectronics NUCLEO-F091RC | nanoFramework Documentation",
    "keywords": "STMicroelectronics NUCLEO-F091RC Product page Firmware images (ready to deploy) Stable Preview"
  },
  "content/reference-targets/ti-cc1352r1-launchxl.html": {
    "href": "content/reference-targets/ti-cc1352r1-launchxl.html",
    "title": "TI CC1352R1-LAUNCHXL | nanoFramework Documentation",
    "keywords": "TI CC1352R1-LAUNCHXL Product page Features CC1352R mcu CC3220SF single-chip wireless microcontroller Dual-Core Architecture: User-Dedicated Application MCU Subsystem Dedicated software controlled radio controller Powerful 48-MHz Arm® Cortex®-M4F processor Embedded Memory: 352kB of in-system Programmable Flash 256KB of ROM for protocols and library functions 8KB of Cache SRAM (Alternatively available as general-purpose RAM) 80KB of ultra-low leakage SRAM Peripherals: Digital peripherals can be routed to any GPIO 4× 32-bit or 8× 16-bit general-purpose timers 12-Bit ADC, 200 kSamples/s, 8 channels 2× comparators with internal reference DAC (1× continuous time, 1× ultra-low power) Programmable current source 2× UART 2× SSI (SPI, MICROWIRE, TI) I2C I2S Real-Time Clock (RTC) AES 128- and 256-bit Crypto Accelerator ECC and RSA Public Key Hardware Accelerator SHA2 Accelerator (Full suite up to SHA-512) True Random Number Generator (TRNG) Capacitive sensing, up to 8 channels Integrated temperature and battery monitor Radio section Multi-band sub-1 GHz and 2.4 GHz RF transceiver compatible with Bluetooth 5 Low Energy and IEEE 802.15.4 PHY and MAC Excellent receiver sensitivity: –121 dBm for SimpleLink long-range mode –110 dBm at 50 kbps, –105 dBm for Bluetooth 125-kbps (LE Coded PHY) Output power up to +14 dBm (Sub-1 GHz) and +5 dBm (2.4 GHz) with temperature compensation Suitable for systems targeting compliance with worldwide radio frequency regulations ETSI EN 300 220 Receiver Category 1.5 and 2, EN 300 328, EN 303 131, EN 303 204 (Europe) EN 300 440 Category 2 FCC CFR47 Part 15 ARIB STD-T108 and STD-T66 Wide standard support Wireless protocols Thread Zigbee® Bluetooth® 5 Low Energy IEEE 802.15.4g IPv6-enabled smart objects (6LoWPAN), Wireless M-Bus Wi-SUN® KNX RF proprietary systems SimpleLink™ TI 15.4-Stack (Sub-1 GHz) Dynamic Multiprotocol Manager (DMM) Launchpad board LaunchPad with 2.4GHz and Sub-1GHz radio for wireless applications with integrated PCB trace antenna Broad band antenna supports both 868 MHz ISM band for Europe and 915 MHz ISM band for US with a single board On-board emulator gets you started with instant code development in CCS Cloud Can be used with both LaunchPad kit and SmartRF™ Studio applications Access all I/O signals with the BoosterPack plug-in module connectors Compatible with LCD BoosterPack Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ Stable Preview"
  },
  "content/reference-targets/ti-cc3220sf-launchxl.html": {
    "href": "content/reference-targets/ti-cc3220sf-launchxl.html",
    "title": "TI CC3220SF-LAUNCHXL | nanoFramework Documentation",
    "keywords": "TI CC3220SF-LAUNCHXL Product page Features CC3220SF mcu CC3220SF single-chip wireless microcontroller Dual-Core Architecture: User-Dedicated Application MCU Subsystem Highly-Integrated Wi-Fi Network Processor Arm® Cortex®-M4 Core at 80 MHz Embedded Memory: 256KB of RAM Optional 1MB of Executable Flash External Serial Flash Peripherals: McASP Supports Two I2S Channels SD, SPI, I2C, UART 8-Bit Synchronous Imager Interface 4-Channel 12-Bit ADCs 4 General-Purpose Timers (GPT) With 16-Bit PWM Mode Watchdog Timer Up to 27 GPIO Pins Debug Interfaces: JTAG, cJTAG, SWD Wi-Fi Network Processor (NWP) Subsystem: Wi-Fi Modes: 802.11b/g/n Station 802.11b/g Access Point (AP) Supports up to Four Stations Wi-Fi Direct® Client and Group Owner WPA2 Personal and Enterprise Security: WEP, WPA™/WPA2™ PSK, WPA2 Enterprise (802.1x) IPv4 and IPv6 TCP/IP Stack SimpleLink Connection Manager for Autonomous and Fast Wi-Fi Connections Flexible Wi-Fi Provisioning With SmartConfig™ Technology, AP Mode, and WPS2 Options Hardware Crypto Engine for Advanced Fast Security, Including: AES, DES, 3DES, SHA2, MD5, CRC, and Checksum Secure Sockets (SSLv3, TLS1.0, TLS1.1, TLS1.2) Secure Boot: Validate the Integrity and Authenticity of the Runtime Binary During Boot Launchpad board Standalone development platform featuring sensors, LEDs and push-buttons On-board chip antenna with option for U.FL-based testing 2x20-pin stackable connectors (BoosterPack headers) to connect to TI LaunchPads and other BoosterPacks Back-channel universal asynchronous receiver/transmitter (UART) through USB to PC XDS110-based JTAG emulation with serial port for flash programming Firmware images (ready to deploy) The ready to use firmware images provided include support for the class libraries and features marked bellow. Gpio Spi I2c Pwm Adc Serial Events SWO Networking Large Heap ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ ✔️ Stable Preview"
  },
  "content/stm32/create-community-board.html": {
    "href": "content/stm32/create-community-board.html",
    "title": "How to create an STM32 based community board | nanoFramework Documentation",
    "keywords": "How to create an STM32 based community board This article will explain what needs to be adjusted to create a community board for STM32 based processors. Start with a similar board Find a board that is close to your board. Check both the official boards and the community boards. It is important to find the same MCU or a close one. Once done, copy/paste the folder in your cloned nf-interpreter repo. and rename the folder. Note that it is recommended to create a new branch so you won't mix it up with anything else. You can as well clone the repository in a temporary place just for the occasion. In all cases, make sure you have the latest up to date develop branch. Tip: keep the folder into the target folder in nf-interpreter the time of your development. You will be able to move it later on to the nf-Community-Targets one and do a proper PR. Create your project in cmake-variants.json Create a proper section in your cmake-variants.json . Reuse the one from the board you're starting. Use the exact same settings as the recommended ones to build it. Just to make sure all is OK, build it with the exact same settings as the board you have cloned. This will ensure you're starting with a clean state. Tip: you can use the dev containers to avoid having to clone all the source repositories and build in a safe always working environment. Adjust the clock settings This is the very first step and one of the most important one. And this is where things can be a bit tricky. You will need to understand what is the clock source and how it is connected to the MCU. For this you need to make sure you find the schematics of your board. To make the math, install and use STM32CubeMX . You will need this software later on for the pin settings. This is the example of using an STM32F411RET MCU: In most of the cases, you'll have to use an external clock. In this case, you'll need to activate the RCC element: Then it's time to resolve external clock by enabling USB OTG: Note: Those screen captures include already some more elements setup for this project. The more you'll setup elements and the more you'll see in the menu green entrees, warnings and red elements. It will help you to understand if your configuration and the pin setup are correctly done. You should not get any impossible case at all. The clock adjustment is the most difficult. You need to understand which clock settings to select from the documentation of your board. Here is an example: Tip: The tool offers a resolver but it may not be the best regarding your setup. After a first try, you may have to come back and adjust more of those elements. You may have to do a few trial errors if the documentation or schema is not the best. Build it and deploy it Once you are at this stage, the best is to adjust the core elements of the clock, build, deploy and check those core part are working. board.h The file board\\board.h is one of the most important one. You'll have to adjust quite some elements in this one. To start with, the name of your board as well as the frequency and setup elements found in the clock setting. To follow the example, you'll adjust all this: /* * Board identifier. */ #define BOARD_PYBSTICK2X #define BOARD_NAME \"PYBStick standard 26\" /* * USB OTG Force */ #define BOARD_OTG_NOVBUSSENS /* * Completely wacko definition of a flash sector here */ #define FLASH_SECTOR_11 ((uint32_t)11U) /* * Board oscillators-related settings. * NOTE: LSE is fitted and is of course 32768. * NOTE: HSE is fitted and set to a 16 MHz one. */ #if !defined(STM32_LSECLK) #define STM32_LSECLK 32768U #endif #if !defined(STM32_HSECLK) #define STM32_HSECLK 16000000U #endif mcuconf.h in nanoCLR and nanoBooter you have then 2 files to adjust with the exact same settings. nanoCLR/mcuconf.h and nanoBooter/mcuconf.h . Both need to be adjusted with the second set of constants you've determined in the clock settings. Here is the example of the example project: #define STM32_NO_INIT FALSE #define STM32_HSI_ENABLED TRUE #define STM32_LSI_ENABLED TRUE #define STM32_HSE_ENABLED TRUE #define STM32_LSE_ENABLED TRUE #define STM32_CLOCK48_REQUIRED TRUE #define STM32_SW STM32_SW_PLL #define STM32_PLLSRC STM32_PLLSRC_HSE #define STM32_PLLM_VALUE 16 #define STM32_PLLN_VALUE 192 #define STM32_PLLP_VALUE 2 #define STM32_PLLQ_VALUE 4 #define STM32_HPRE STM32_HPRE_DIV1 #define STM32_PPRE1 STM32_PPRE1_DIV2 #define STM32_PPRE2 STM32_PPRE2_DIV2 #define STM32_RTCSEL STM32_RTCSEL_LSE #define STM32_RTCPRE_VALUE 8 #define STM32_MCO1SEL STM32_MCO1SEL_HSE #define STM32_MCO1PRE STM32_MCO1PRE_DIV1 #define STM32_MCO2SEL STM32_MCO2SEL_SYSCLK #define STM32_MCO2PRE STM32_MCO2PRE_DIV1 #define STM32_I2SSRC STM32_I2SSRC_CKIN #define STM32_PLLI2SN_VALUE 192 #define STM32_PLLI2SR_VALUE 2 #define STM32_PVD_ENABLE FALSE #define STM32_PLS STM32_PLS_LEV0 #define STM32_BKPRAM_ENABLE FALSE Build your target and deploy it. See how to flash a target using STM 32 Cube Programmer (you'll have to install the tool). Note: even if you get an error message about not being able to start the program, disconnect and reconnect your board, if it does show up in Visual Studio in the Device Explorer nanoFramework extension, it means all went well. Some DFU may have been reflashed compared to the original and may have a weird behavior. If you get a deployment error, try the deployment again. If the device shows up, it means you are successful, the most complicated part is done! Note: moving forward the most important file to adjust from both is nanoCLR/mcuconf.h . You can add more if you're adding anything into your nanoBooter. Adjust the default pin behavior and setup all pin behaviors You will now have to adjust the default behavior of the pins when the board is booted up. But also create all the SPI, I2C, UART configurations. We will use the STM32 Cube program installed before. This will help setup your pins, make sure all is coherent and reduces the number of potential errors. All the setup is done thru the Connectivity and Analog sub menu: Check you board schema and start using the tool to setup the tool. This is how you MCU will look like with a real configuration: Tip: if you start making non possible configuration, you'll know it quickly as you'll get red elements or the non possibility to setup more elements. The screen captures above shows you that IC3 and SPI5 can't be setup any more for example. Which is the case in this board example. If you arrive to a situation when you get an error where you should not, then double check, you may have an issue somewhere! Note: sometimes some pins may have multiple functions. BUT you can't use all those functions at the same time. While setting up all the pins, make sure you select the primary function of those pins rather than trying to make all the combinations possible. Now, it's time to ask the tool to build the source, click on Generate Code , you won't need the SDK so you can answer No to the various questions. We only need the generated project to check the Alternate pin configuration. Then you need to adjust the board\\board.h file. Find the pin name and rename them to reflect your board. Here is a real example: /* * IO pins assignments. */ #define GPIOA_ADC1_0 0U #define GPIOA_PIN1 1U #define GPIOA_ADC1_2 2U #define GPIOA_ADC1_3 3U #define GPIOA_PIN4 4U #define GPIOA_SPI1_CLK 5U #define GPIOA_SD_CMD 6U #define GPIOA_SPI1_MOSI 7U #define GPIOA_SD_D1 8U #define GPIOA_SD_D2 9U #define GPIOA_UART1_RX 10U #define GPIOA_OTG_FS_DM 11U #define GPIOA_OTG_FS_DP 12U #define GPIOA_LED_RED 13U #define GPIOA_LED_GREEN 14U #define GPIOA_UART1_TX 15U Tip: Rename all the pins you are using, this will help to make is easier to find and reduces mistakes. To rename use global replace in the file, the name of the pin are present multiple times. Once the rename is done, you will have to adjust the pins initial values. This is done in the various MODER, OTYPER, OSPEEDR, PUPDR, ODR, AFRL, AFRH defines. Please make sure to refer to the docs or the generated code if you have a doubt. The below explanation is here just to help. MODER Here are the values to use: PIN_MODE_ANALOG for any ADC pin. PIN_MODE_OUTPUT for leds and other known output pins. PIN_MODE_ALTERNATE for any SPI, I2C, UART elements. PIN_MODE_INPUT for anything else. OTYPER Here are the values to use: PIN_OTYPE_OPENDRAIN for I2C. PIN_OTYPE_PUSHPULL for anything else. OSPEEDR PIN_OSPEED_MEDIUM for the Leds. PIN_OSPEED_HIGH for anything else. PUPDR PIN_PUPDR_FLOATING for anything that is output or I2C, SPI, UART or defined like clock. PIN_PUPDR_PULLUP for the rest which should be only normal GPIO, non yet defined PWM or equivalent. ODR This is the initial state of the pin: PIN_ODR_LOW for leds, ADC and other elements like that. PIN_ODR_HIGH for the rest. Tip: Any unused pin should be input pull-up high AFRL and AFRH This is where you can define the alternate configuration to use. This must be done properly for all the SPI, I2C, UART, SD Card configurations. A configuration for a pin will look like that: PIN_AFIO_AF(GPIOA_SPI1_MOSI, 5U) In this case, 5U means alternate 5. Tip: In the generated files from STM32 Cube, you will find the alternate with AFx where x is the number Here is an example of what you need to adjust: Tip: From the tool, you can get access to your processor datasheet configuration file. This file contains all the possible configuration and alternate as well. Now you have adjusted your pins, you will have to add the proper CPP files relates to the various API. As for the original device cloned you have made, copy/paste a file from another device and adjust. The LINE section The LINE section will create GPIO for internal native level usage. For example if you have an SD Card reader with an insert detection, you'll have to have a line setup for that. Here is an example of setup including the OTG nines and the Leds: /* * IO lines assignments. */ #define LINE_LED_GREEN PAL_LINE(GPIOA, 14U) #define LINE_LED_BLUE PAL_LINE(GPIOB, 1U) #define LINE_LED_YELLOW PAL_LINE(GPIOB, 0U) #define LINE_LED_RED PAL_LINE(GPIOA, 13U) #define LINE_OTG_FS_DM PAL_LINE(GPIOA, 11U) #define LINE_OTG_FS_DP PAL_LINE(GPIOA, 12U) #define LINE_SD_DETECT PAL_LINE(GPIOB, 14U) ADC The file to add or adjust is target_windows_devices_adc_config.cpp . For ADC, those are indexed based. You can add as many channels as available, just make sure you document them properly as they won't match the channel number. As you'll see in the example below, the order is not necessary related to the available ADC, it is your own choice. Also for ADC, for STM32 devices you have 3 additional channels which you can add at the end, those are respectively the board temperature (which is kot accurate in absolute but OK when relative measure is done), the reference voltage at 1.21V and the battery voltage. What you will measure for those is, like for any other channel the raw value. By convention, those 3 additional sensors are always at the end of the first ADC. The file look like that: const NF_PAL_ADC_PORT_PIN_CHANNEL AdcPortPinConfig[] = { // ADC1 {1, GPIOA, 2, ADC_CHANNEL_IN2}, {1, GPIOA, 3, ADC_CHANNEL_IN3}, {1, GPIOA, 0, ADC_CHANNEL_IN0}, {1, GPIOA, 4, ADC_CHANNEL_IN4}, {1, GPIOA, 5, ADC_CHANNEL_IN5}, {1, GPIOA, 7, ADC_CHANNEL_IN7}, // these are the internal sources, available only at ADC1 {1, NULL, 0, ADC_CHANNEL_SENSOR}, {1, NULL, 0, ADC_CHANNEL_VREFINT}, {1, NULL, 0, ADC_CHANNEL_VBAT}, }; const int AdcChannelCount = ARRAYSIZE(AdcPortPinConfig); SPI Make sure you add your SPI channels in the file target_windows_devices_spi_config.cpp . Here is how it looks like to add SPI1: // pin configuration for SPI1 // port for SCK pin is: 5 SPI1_SCLK // port for MISO pin is: 4 SPI1_MISO // port for MOSI pin is: 7 SPI1_MOSI // GPIO alternate pin function is 5 (see alternate function mapping table in device datasheet) SPI_CONFIG_PINS(1, GPIOA, 5, GPIOB, 4, GPIOA, 7, 5) You will have as well the mcuconf.h files to adjust as well. Find the SPI section and put any channel you want to expose to TRUE: /* * SPI driver system settings. */ #define STM32_SPI_USE_SPI1 TRUE #define STM32_SPI_USE_SPI2 FALSE #define STM32_SPI_USE_SPI3 FALSE If the MCU you're using is the same as one of the existing board, then the rest of the SPI configuration should be good. Otherwise, please adjust with the documentation. I2C The process is the same as for SPI. The file to add or adjust is target_windows_devices_i2c_config.cpp . Here is an example with 2 I2C channels: ////////// // I2C1 // ////////// // pin configuration for I2C1 // port for SCL pin is: GPIOB // port for SDA pin is: GPIOB // SCL pin: is GPIOB_8 // SDA pin: is GPIOB_9 // GPIO alternate pin function is 4 (see alternate function mapping table in device datasheet) I2C_CONFIG_PINS(1, GPIOB, GPIOB, 8, 9, 4) ////////// // I2C1 // ////////// // pin configuration for I2C1 // port for SCL pin is: GPIOB // port for SDA pin is: GPIOB // SCL pin: is GPIOB_10 // SDA pin: is GPIOB_3 // GPIO alternate pin function is 9 (see alternate function mapping table in device datasheet) I2C_CONFIG_PINS(2, GPIOB, GPIOB, 10, 3, 9) Make sure as well the channels are TRUE in the mcuconf.h files. Here is an example with 2 I2C: /* * I2C driver system settings. */ #define STM32_I2C_USE_I2C1 TRUE #define STM32_I2C_USE_I2C2 TRUE #define STM32_I2C_USE_I2C3 FALSE UART The same principle exist for UART. Both target_windows_devices_serialcommunication_config.h and target_windows_devices_serialcommunication_config.cpp need to be adjusted. This is how to add UART2 in the header file: // enable USART2 #define NF_SERIAL_COMM_STM32_UART_USE_USART2 TRUE And in the CPP file: /////////// // UART2 // /////////// // pin configuration for UART2 // port: GPIOA // TX pin: is GPIOA 15 // RX pin: is GPIOA 10 // GPIO alternate pin function is 7 (see \"Table 9. Alternate function mapping\" in STM32F411xC and STM32F411xE datasheet) UART_CONFIG_PINS(2, GPIOA, GPIOA, 2, 3, 7) // buffers // buffers that are R/W by DMA are recommended to be aligned with 32 bytes cache page size boundary // because of issues with cache coherency and DMA (this is particularly important with Cortex-M7 because of cache) #if defined(__GNUC__) __attribute__((aligned (32))) #endif uint8_t Uart2_TxBuffer[UART2_TX_SIZE]; #if defined(__GNUC__) __attribute__((aligned (32))) #endif uint8_t Uart2_RxBuffer[UART2_RX_SIZE]; // initialization for UART2 UART_INIT(2, UART2_TX_SIZE, UART2_RX_SIZE) // un-initialization for UART2 UART_UNINIT(2) The specificity is that you cannot use UART1. All others can be used. Make sure do document this properly for your users. Tip: you can add more than 1 additional UART, in most cases for STM32, either UART2 or 6 are used. They'll show up as COM2, COM6 on the managed side. SD Card Add or adjust the existing file target_windows_storage_config.h . You'll have to add the line detect: // maps the SD Card driver #define SD_CARD_DRIVER SDCD1 // maps the SD Card detect GPIO definition (in Target_Windows_Storage.c) to board GPIO line (in board.h) #define SDCARD_LINE_DETECT LINE_SD_DETECT // includes SPIFFS in storage #define USE_SPIFFS_FOR_STORAGE FALSE The LINE must exist and be properly setup in the board.h file. Add a file ff.conf , copy/paste it from another STM32 board. All the settings in this file should be fine. If the section does not exist, add it in file nanoCLR\\mcuconf.h : /* * SDC driver system settings. */ #define STM32_SDC_SDIO_DMA_PRIORITY 3 #define STM32_SDC_SDIO_IRQ_PRIORITY 9 #define STM32_SDC_WRITE_TIMEOUT_MS 250 #define STM32_SDC_READ_TIMEOUT_MS 25 #define STM32_SDC_CLOCK_ACTIVATION_DELAY 10 #define STM32_SDC_SDIO_UNALIGNED_SUPPORT TRUE #define STM32_SDC_SDIO_DMA_STREAM STM32_DMA_STREAM_ID(2, 3) adjust your variant accordingly For the various API make sure you have the proper API. You need some special one for the card. Before Windows.Devices namespaces will be removed you need both the Windows.Devices and System.Devive namespaces. Tip: do not try to adjust everything at the same time, make baby steps if it's your first board. Add SPI then I2C then UART and finish wby the SD Card. Test the image at every build, adjust any error at every stage. Create an extension for your board Make it easy for your user to create an SPI device or I2C or anything else. Also create a mapping with the board pin, the names. Make it easy for ADC. Use enums if you want. Place your code in the folder managed_helpers . Add a nuspec file. You can find a great example here . He is an extract of of function definition for a board extension class: namespace nanoFramework.Targets.Community.PybStick2x { /// <summary> /// This extension class will help opening the right pins /// </summary> public static class Board { /// <summary> /// Creates a default SPI Device on SPI1 with Chip Select A4. /// </summary> /// <returns></returns> public static SpiDevice Create() => Create(PinNumber('A', 4)); /// <summary> /// Creates a default SPI Device on SPI1 with a custom Chip Select /// </summary> /// <param name=\"chipSelect\"></param> /// <returns></returns> public static SpiDevice Create(int chipSelect) => SpiDevice.Create(new SpiConnectionSettings(1, chipSelect)); /// <summary> /// Gets the pin number based on port and pin. Example A5 /// </summary> /// <param name=\"port\">The port</param> /// <param name=\"pin\">The port pin</param> /// <returns>The pin number</returns> public static int PinNumber(char port, byte pin) { if (port < 'A' || port > 'J') throw new ArgumentException(); return ((port - 'A') * 16) + pin; } /// <summary> /// Get the pin number for the board pin. Example: S5 will be 5 /// </summary> /// <param name=\"num\">The board pin number</param> /// <returns>The pin number</returns> public static int PinFromBoardNumber(int num) { switch (num) { case 3: return PinNumber('B', 9); case 5: return PinNumber('B', 8); case 7: return PinNumber('B', 6); case 8: return PinNumber('A', 2); case 10: return PinNumber('A', 3); // More code and more cases } } // More functions like this to help } }"
  },
  "content/stm32/create-dfu-file.html": {
    "href": "content/stm32/create-dfu-file.html",
    "title": "How To Create a .dfu file | nanoFramework Documentation",
    "keywords": "How To Create a .dfu file To manually flash firmware using ST DFUSE tools, get a copy of ST DFUSE tools . Install the DFUSE tools Download the devices firmware update .zip file Repeat step 1 above Step one Locate the devices Device_BlockStorage.c file. E.g. the Netduino 3 file is located here . Find the BlockRegionInfo segment Start address and bytes per block. Example: const BlockRegionInfo BlockRegions[] = { { 0x08000000, // start address for block region 4, // total number of blocks in this region 0x4000, // total number of bytes per block ARRAYSIZE_CONST_EXPR(BlockRange1), BlockRange1, }, } Start the STDFU File Manager and select the \"I want to generate a .dfu file ....\" radio button. Select the \"Muti BIN\" button and select the nanoBooter.bin file from the firmware update .zip file. Enter the Start address from above into the \"Address\" textbox. Example: 8000000. Press the \"Add to List\" button. Next select the nanoCLR.bin file. Enter the Start address + bytes per block into the \"Address\" textbox. Example: 804000. Press the \"Add to List\" button. Press the \"Generate\" button. Step two Start the DFUSE Demo Application. Locate the .dfu file generated above. Click the \"Choose\" button then the \"Update\" button. Toggle the devices power. That's all, we are done!"
  },
  "content/stm32/flash-cube-programmer.html": {
    "href": "content/stm32/flash-cube-programmer.html",
    "title": "How To Flash a target using STM32 Cube Programmer | nanoFramework Documentation",
    "keywords": "How To Flash a target using STM32 Cube Programmer This is a guide on how to manually flash the firmware using STM32CubeProgrammer utility. This utility replaces the ST-Link utility and may be required for some Windows 10 machines. You will need to use this utility to replace the boot loader on the STM32 chip. Once replaced, you can do all further firmware maintentance using the nanoFramework Firmware Flash tool (nanoff.exe). Install the tool Download the appropriate STM32 Cube Programmer from ST web site and install it in your development machine. Flash a JTAG connected board There are two images to be flashed in the target, one for nanoBooter and another one for nanoCLR. Download a ZIP file with the firmware for the board from our web site here by clicking on the appropriate badge. This will take you to our Cloudsmith repository that holds the packages with pre-build images for several target boards. After downloading it, unzip the package contents. Connect the target board to your PC using an USB cable. Note that on most ST development boards there are two micro USB connectors. To follow this guide you'll want to use the one that's providing the JTAG connection through the ST-Link debugger. In doubt, check the PCB for the correct one or the board schematic. Launch the STM32 Cube Programmer that you've just installed and connect to the ST board. Select \"USB\" in the interface options. Navigate to the \"Erasing and Programming\" view. Perform a \"full chip erase\" to clear the flash. Load the nanoBooter.hex file from the package by clicking the \"Browse\" button. Make sure you tick the \"Run after programming\" and \"Skip flash erase before programming\" check boxes and hit \"Start Program...\" button. After the upload completes, the MCU is reset and the nanoBooter image runs. You can check the success of the operation watching for a slow blink pattern on the LED. Congratulations, you now have a board running nanoFramework's booter! Next, load the nanoCLR.hex file from the extracted package folder by clicking the \"Browse\" button. Make sure you tick the \"Run after programming\" and \"Skip flash erase before programming\" check boxes and hit \"Start Program...\" button. After the upload completes, the MCU is reset and the nanoCLR image will run. This time and if all goes as expected, there will be no LED blinking. You can check if the board is properly running .NET nanoFramework by looking into the Device Explorer window in VS. You may have to click the \"Rescan nanoDevices\" button (the magnifying glass icon). Flash a DFU connected board Put your device in bootloader mode. This can be accomplished by pressing a certain combination of buttons. It depends on the particular hardware that you are using. Launch the STM32 Cube Programmer that you've just installed and connect to the ST board. Select \"USB\" in the interface options. Load the nnnn.dfu file by clicking the \"Browse\" button. Make sure you tick the \"Run after programming\" check box and hit \"Start Program...\" button. After the upload completes, the MCU is reset and the nanoCLR image runs.You can check if the board is properly running .NET nanoFramework by looking into the Device Explorer window in VS. You may have to click the \"Rescan nanoDevices\" button (the magnifying glass icon)."
  },
  "content/stm32/index.html": {
    "href": "content/stm32/index.html",
    "title": "STM32 specific articles | nanoFramework Documentation",
    "keywords": "STM32 specific articles How To Create a .dfu file Flash firmware using STM32CubeProgrammer utility"
  },
  "content/support/community-help.html": {
    "href": "content/support/community-help.html",
    "title": "Community help | nanoFramework Documentation",
    "keywords": "Community help Our awesome community has your back! Everything in .NET nanoFramework is public Note that we all do this in the spirit of Open Source. All discussions are public, so that everyone can participate and help each other. If you need help, you should use the methods listed here. This ensures the core team knows what's going on in the project and that everyone can benefit from each other's answers and knowledge. If you a question on how to use .NET nanoFramework Go to Stack overflow and use the \"nanoframework\" tag. Have you found a bug or want to suggest a new feature or improvement Please open an issue in our GitHub . We ask you to open an issue only when you have a real and confirmed one. Don't open an issue for support requests or to start a discussion. For that you'll get a better (and quicker!) support/feedback in one of the ( https://discord.gg/gCyBu8T ) channels. Chat and engage with contributors and community members Jump into our Discord server . You'll find several public channels on the various topics. You want to share what you are doing with .NET nanoFramework You are welcomed to submit projects to Hackster.io . Make sure you use one of our components there so your project gets tagged automatically. Tweet about your project and mention @nanoFramework . Looking for professional support ?"
  },
  "content/support/professional-support.html": {
    "href": "content/support/professional-support.html",
    "title": "Professional Support | nanoFramework Documentation",
    "keywords": "Professional Support Professional support is provided by core team members. Aimed at commercial users developing .NET nanoFramework based projects has the objective to help them reduce their development effort and, consequently, the time to market. The support services ensure that: Your questions will be answered correctly and in a timely fashion. Bugs that you report are fixed with higher priority. The above will, obviously, contribute to the project continuous growth. The following companies offer their engineering services, tools, training, software components and support services Eclo Solutions CSA Engineering AG Looking for community help ?"
  },
  "content/ti-simplelink/flash-nanoclr-cc13x2_26x2.html": {
    "href": "content/ti-simplelink/flash-nanoclr-cc13x2_26x2.html",
    "title": "Flash a nanoCLR image in TI CC13x2/CC6x2 boards | nanoFramework Documentation",
    "keywords": "Flash a nanoCLR image in TI CC13x2/CC6x2 boards How To guide To flash nanoCLR image in TI CC13x2/CC6x2 boards Uniflash tool from TI is required. Assuming that Uniflash tool and the USB drivers are properly installed, follows the recommend procedure for a CC1352R1 LaunchPad board. Download the image from .NET nanoFramework repository. Connect the board using the USB cable. Start Uniflash. The board should be detected and listed, unless the configuration is set to manual detection. Click the Start button there. Select the nanoCLR image file by clicking Browse and navigating to the folder/file where the nanoCLR.bin is located. (Make sure you do select the file with bin extension). The nanoCLR image will show in the flash list. By clicking on the Load Image button the flashing process starts. After successfully burning the flash with the nanoCLR image, you can disconnect and reconnect the USB cable. The nanoDevice target will show in Visual Studio Device Explorer window as expected."
  },
  "content/ti-simplelink/flash-nanoclr-cc32xx.html": {
    "href": "content/ti-simplelink/flash-nanoclr-cc32xx.html",
    "title": "Flash a nanoCLR image in a TI CC32xx board | nanoFramework Documentation",
    "keywords": "Flash a nanoCLR image in a TI CC32xx board How To guide To flash nanoCLR image in a TI board Uniflash tool from TI is required. Assuming that Uniflash tool and the USB drivers are properly installed, follows the recommend procedure for a CC3220SF-LAUNCHXL board. Download the image from .NET nanoFramework repository. Place the J13 SPO jumper in position 1. Connect the board using the USB cable. Start Uniflash. The board should be detected and listed. Click the Start button there and select the project corresponding to your board. This is assuming that you've created that project beforehand. If that's not the case, please follow the walk-through here . Select the nanoCLR image file by clicking Browse and navigating to the folder/file where the nanoCLR.bin is located. (Make sure you do select the file with bin extension). Click the Connect button. After the connection with the target is successfully established the device status and capabilities will be listed at the top right corner. Click the Burn button and the flashing process will start. After successfully burning the flash with the nanoCLR image, you can disconnect and reconnect the USB cable. The nanoDevice target will show in Visual Studio Device Explorer window as expected. Prepare a Uniflash project for a CC32xx board (TBD)"
  },
  "content/ti-simplelink/index.html": {
    "href": "content/ti-simplelink/index.html",
    "title": "TI specific articles | nanoFramework Documentation",
    "keywords": "TI specific articles How To flash nanoCLR in CC13x2 and CC26x2 boards How To flash nanoCLR in CC32xx board"
  },
  "content/unit-test/constraints-limitations.html": {
    "href": "content/unit-test/constraints-limitations.html",
    "title": "Constraints and limitation of nanoFramework.TestPlatform | nanoFramework Documentation",
    "keywords": "Constraints and limitation of nanoFramework.TestPlatform There are currently few limitations on the framework, the mains ones are so far: The assembly name containing all your tests has to be NFUnitTest . It's a limitation we're working on to remove. You can have as many classes and have as many test projects as you want. You just so far, need to have the assembly being named NFUnitTest . The Unit Test project template has this setup so, if start from the template, you don't have to change anything. The built elements for the test assembly has to be in the sub folders of the nfproj project. Typically /directory_where_nfproj/bin/Debug/your.dll . So do not adjust the default settings, they'll work perfectly for our use cases. The nanoCLR Win32 host has some limitations like networking, we're trying to add as many features as possible."
  },
  "content/unit-test/index.html": {
    "href": "content/unit-test/index.html",
    "title": ".NET nanoFramework Unit Tests platform | nanoFramework Documentation",
    "keywords": ".NET nanoFramework Unit Tests platform nanoFramework offers a complete Unit Tests platform called nanoFramework.TestPlatform What is nanoFramework.TestPlatform nanoFramework.TestPlatform is a Unit Test platform dedicated to .NET nanoFramework ! It has all the benefits of what you're used to when using Microsoft Test platform for .NET or XUnit or any other! The framework includes multiple elements that are including in a single NuGet! nanoFramework.TestPlatform which contains the attributes to decorate your code and the Assert classes to check that you're code is properly doing what's expected. nanoFramework.UnitTestLauncher which is the engine launching and managing the Unit Tests. nanoFramework.TestAdapter which is the Visual Studio Test platform adapter, allowing to have the test integration in Visual Studio. The integration looks like that: And the integration will point you up to your code for successful or failed tests: Usage of nanoFramework.TestPlatform Simply add the nanoFramework.TestPlatform NuGet to your project and you're good to go! Once you'll build your project, the tests will be automatically discovered: You can then run all the tests and you'll get the result: Some tests may be skipped, they will appear like this: Creating a new Visual Studio NFUnitTest project You can as well simply create a new Visual Studio NFUnitTest project that will already contains all the needed elements. Detailed usage You will find the detailed usage , how to run the tests and the constraints/limitations of the platform in the other documents. If you are interested into the architecture, please check out this detailed page ."
  },
  "content/unit-test/running-tests.html": {
    "href": "content/unit-test/running-tests.html",
    "title": "Running Unit Tests on .NET nanoFramework | nanoFramework Documentation",
    "keywords": "Running Unit Tests on .NET nanoFramework You first need to setup your .NET nanoFramework Unit Test project. For this, you have 2 options, either you create a NFUnitTest project from Visual Studio, either you add a the nanoFramework.TestFramework NuGet to your class library project. Setting up through Visual Studio project template You can as well simply create a new Visual Studio NFUnitTest project that will already contains all the needed elements. Setting up Unit Test through NuGet The .NET nanoFramework Unit Test platform is available thru a NuGet and comes with all the needed element. The only thing you need to do it to add it to your .NET nanoFramework project: Make sure you have in the main directory of your sln file or in the same directory as your nfproj a .runsettings and the minium elements you need are: <?xml version=\"1.0\" encoding=\"utf-8\"?> <RunSettings> <!-- Configurations that affect the Test Framework --> <RunConfiguration> <MaxCpuCount>1</MaxCpuCount> <ResultsDirectory>.\\TestResults</ResultsDirectory><!-- Path relative to solution directory --> <TestSessionTimeout>120000</TestSessionTimeout><!-- Milliseconds --> <TargetFrameworkVersion>Framework40</TargetFrameworkVersion> </RunConfiguration> <nanoFrameworkAdapter> <Logging>None</Logging> <IsRealHardware>False</IsRealHardware> </nanoFrameworkAdapter> </RunSettings> The most important part is the <TargetFrameworkVersion>Framework40</TargetFrameworkVersion> as this is what trigger the discovery of the tests. Discover the tests Once you'll build your project, the tests will be discovered automatically: This is automatic and you just need to build. If any issue, you can try the Rebuild option, it will force a rediscovery of the tests. Running the tests on a real hardware You'll have to adjust the .runsettings file entry IsRealHardware to true: <IsRealHardware>True</IsRealHardware> Once you'll run the rests, they will be deployed into the device attached to your machine. Running the tests Simply press the play button for all the tests or just the test you want to run. In case of success, you'll see something like this: In case one of your test will fail, you'll see this: Some tests may be skipped, they will appear like this: Test coverage and code highlighting As you can expect in your code, you'll get the covered tests on the tests methods but as well on the methods that have been called: In case of failure, you'll get the same: Running the tests in a pipeline The tests can be run in a pipeline using vstest.Console.exe . The adapter to use is nanoFramework.TestAdapter.dll . You'll find all this into the NuGet package. Updating the NuGet When you are updating the NuGet if you've done changes into your .runsettings file, you will be prompt to replace the file, depending on the choices you have done, you may want to save your choices and merge them into the new file. We do recommend to use the new file and adjust it."
  },
  "content/unit-test/using-test-platform.html": {
    "href": "content/unit-test/using-test-platform.html",
    "title": "Using the nanoFramework.TestPlatform | nanoFramework Documentation",
    "keywords": "Using the nanoFramework.TestPlatform The core component to prepare your test is nanoFramework.TestPlatform . The attributes The classes and tests methods are recognized using attributes. You'll find the following ones: [TestClass] : this attribute is used on a class, without this attribute on the calls, the class won't be considered as a a valid Unit Test and the test methods inside will be ignored. You can have as many classes as you want with this attribute. Each class can then contain as many tests methods, setup and cleanup as you want. [TestMethod] : this attribute is used on any method where you'll have tests running inside. You can have as many methods with this attribute as you want. [Setup] : this attribute is used on any method. This test will be called first. While you technically have as many of those functions per class, it is recommended to only use 1 per class. Typical usage is to setup hardware you'll need to have running for all the tests methods. [Cleanup] : this attribute is used on any method. This test will be called last, after the all the tests methods. While you technically have as many of those functions per class, it is recommended to only use 1 per class. Attributes usage Here is a typical example of how you can use the attributes: namespace nanoFramework.TestFramework.Test { [TestClass] public class TestOfTest { [TestMethod] public void TestRaisesException() { Debug.WriteLine(\"Test will raise exception\"); Assert.Throws(typeof(Exception), ThrowMe); } private void ThrowMe() { throw new Exception(\"Test failed and it's a shame\"); } [Setup] public void RunSetup() { Debug.WriteLine(\"Setup\"); } [TestMethod] public void TestStringComparison() { Debug.WriteLine(\"Test string, Contains, EndsWith, StartWith\"); // Arrange string tocontains = \"this text contains and end with contains\"; string startcontains = \"contains start this text\"; string contains = \"contains\"; string doesnotcontains = \"this is totally something else\"; string empty = string.Empty; string stringnull = null; // Assert Assert.Contains(contains, tocontains); Assert.DoesNotContains(contains, doesnotcontains, \"Your own error message\"); Assert.DoesNotContains(contains, empty); Assert.DoesNotContains(contains, stringnull); Assert.StartsWith(contains, startcontains); Assert.EndsWith(contains, tocontains); } [TestMethod] public void MethodWillSkippIfFloatingPointSupportNotOK() { var sysInfoFloat = SystemInfo.FloatingPointSupport; if ((sysInfoFloat != FloatingPoint.DoublePrecisionHardware) && (sysInfoFloat != FloatingPoint.DoublePrecisionSoftware)) { Assert.SkipTest(\"Double floating point not supported, skipping the Assert.Double test\"); } double on42 = 42.1; double maxDouble = double.MaxValue; Assert.Equal(42.1, on42); Assert.Equal(double.MaxValue, maxDouble); } public void Nothing() { Debug.WriteLine(\"Nothing and should not be called\"); } [Cleanup] public void Cleanup() { Debug.WriteLine(\"Cleanup\"); } } } As you can see in this example, you just use the attributes to decorate the class and the functions. Functions should be void type and take no argument at all. The test pass if there is no exception happening in the function. If any exception happens in the function, it is considered as failed . Function visibility All functions with attributes for testing must be public void , if you set them as private or internal, they won't be discovered. Asserting in the test functions As for most of the famous .NET Unit Test platform, the concept of Assert is present as well in .NET nanoFramework . You can see in the previous example some of those Assert functions. They take one or two arguments and are straight forward to use. If there is an issue in those Assert function, an exception is raised. Note that all the Assert functions can pass a custom message. For example: Assert.Equal(42, 43, \"My custom message saying that 42 is not equal to 43\"); Assert.Throws This check is a specific function will throw. Usage: Assert.Throws(typeof(ExceptionTypeToCatch), AFunctionToCall); Where: ExceptionTypeToCatch has to be a type of Exception. Typical example is to check if the function you're trying to call rases a ArgumentException for example. AFunctionToCall is an Action , so a function you can call to check if an exception is raised. See the pattern in the previous example. Assert.True and Assert.False Simply check if something is True or False bool boola = true; Assert.True(boola); Assert.Equal and Asset.NotEqual Assert.Equal is collection of functions that takes all the native Value Types as well as Array and check if the elements in the array are equals (if value) or same object (for non value types). Assert.Equal(elementa, elementb); Same behavior for Assert.NotEqual but checking that the 2 elements are not equal. Assert.NotEqual(elementa, elementb); Assert.Null and Assert.NotNull Those functions check that an element is null or not null. object objnull = null; object objnotnull = new object(); Assert.Null(objnull); Assert.NotNull(objnotnull); Assert.IsType and Assert.IsNotType Those functions allows to check that an element is a specific type or not a specific type. Type typea = typeof(int); Type typeb = typeof(int); Type typec = typeof(long); Assert.IsType(typea, typeb); Assert.IsNotType(typea, typec); Assert.Empty and Assert.NotEmpty Assert.Same and Assert.NotSame Functions to check that objects are the same or different. object obja = new object(); object objb = new object(); Assert.NotSame(obja, objb); objb = obja; Assert.Same(obja, objb); Assert for String checking A set of functions to help checking strings is available. They allow most of the common scenarios, checking that a string contains specific elements, start with, end with as well as not containing some elements. // Arrange string tocontains = \"this text contains and end with contains\"; string startcontains = \"contains start this text\"; string contains = \"contains\"; string doesnotcontains = \"this is totally something else\"; string empty = string.Empty; string stringnull = null; // Assert Assert.Contains(contains, tocontains); Assert.DoesNotContains(contains, doesnotcontains); Assert.DoesNotContains(contains, empty); Assert.DoesNotContains(contains, stringnull); Assert.StartsWith(contains, startcontains); Assert.EndsWith(contains, tocontains); Outputting messages from the tests It's possible to output messages from the Unit Tests using OutputHelper.Write and OutputHelper.WriteLine . These work exactly as Debug.Write and Debug.WriteLine so simple or formatted output is available. OutputHelper.WriteLine(\"This is a message from Unit Test XYZ!\"); OutputHelper.WriteLine($\"This is another message from Unit Test XYZ, showing that {someVariable.Length} can be output too.\"); Skipping a test You can skip a test by using Assert.SkipTest . You can place an explanation like this: Assert.SkipTest(\"Double floating point not supported, skipping the Assert.Double test\"); Important : if you skip the Setup test, all the class TestMethod will be skipped as well. This is a convenient way to skip some specific hardware tests if the current hardware does not support them for example. This will allow to build different classes for different hardware for example and having only the right tests being executed."
  },
  "devices/index.html": {
    "href": "devices/index.html",
    "title": ".NET nanoFramework IoT.Device | nanoFramework Documentation",
    "keywords": ".NET nanoFramework IoT.Device You will find the sources of all the supported IoT.Device bindings in our GitHub repository . Detailed samples are available for each of those bindings in the same repository."
  },
  "devices/Iot.Device.Adc.html": {
    "href": "devices/Iot.Device.Adc.html",
    "title": "Namespace Iot.Device.Adc | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Adc Classes Mcp3001 MCP3001 Analog to Digital Converter (ADC) Mcp3002 MCP3002 Analog to Digital Converter (ADC) Mcp3004 MCP3004 Analog to Digital Converter (ADC) Mcp3008 MCP3008 Analog to Digital Converter (ADC) Mcp3201 MCP32001 Analog to Digital Converter (ADC) Mcp3202 MCP3202 Analog to Digital Converter (ADC) Mcp3204 MCP3204 Analog to Digital Converter (ADC) Mcp3208 MCP3208 Analog to Digital Converter (ADC) Mcp3301 MCP3301 Analog to Digital Converter (ADC) Mcp3302 MCP3302 Analog to Digital Converter (ADC) Mcp3304 MCP3304 Analog to Digital Converter (ADC) Mcp33xx MCP33XX family of Analog to Digital Converters Mcp3Base MCP family of ADC devices Mcp3xxx MCP family of ADC devices Enums Mcp3Base.InputType InputType: the type of pin connection"
  },
  "devices/Iot.Device.Adc.Mcp3001.html": {
    "href": "devices/Iot.Device.Adc.Mcp3001.html",
    "title": "Class Mcp3001 | nanoFramework Documentation",
    "keywords": "Class Mcp3001 MCP3001 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3001 Implements IDisposable Inherited Members Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3001 : Mcp3Base, IDisposable Constructors | Improve this Doc View Source Mcp3001(SpiDevice) Constructs Mcp3008 instance Declaration public Mcp3001(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Methods | Improve this Doc View Source Read() Reads a 10-bit (0..1023) value from the device Declaration public int Read() Returns Type Description Int32 10-bit value corresponding to relative voltage level on specified device channel Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3002.html": {
    "href": "devices/Iot.Device.Adc.Mcp3002.html",
    "title": "Class Mcp3002 | nanoFramework Documentation",
    "keywords": "Class Mcp3002 MCP3002 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3xxx Mcp3002 Implements IDisposable Inherited Members Mcp3xxx.ChannelCount Mcp3xxx.CheckChannelRange(Int32, Int32) Mcp3xxx.CheckChannelPairing(Int32, Int32) Mcp3xxx.ReadPseudoDifferential(Int32, Int32) Mcp3xxx.ReadDifferential(Int32, Int32) Mcp3xxx.Read(Int32) Mcp3xxx.ReadInternal(Int32, Mcp3Base.InputType, Int32) Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3002 : Mcp3xxx, IDisposable Constructors | Improve this Doc View Source Mcp3002(SpiDevice) Constructs Mcp3002 instance Declaration public Mcp3002(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3004.html": {
    "href": "devices/Iot.Device.Adc.Mcp3004.html",
    "title": "Class Mcp3004 | nanoFramework Documentation",
    "keywords": "Class Mcp3004 MCP3004 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3xxx Mcp3004 Implements IDisposable Inherited Members Mcp3xxx.ChannelCount Mcp3xxx.CheckChannelRange(Int32, Int32) Mcp3xxx.CheckChannelPairing(Int32, Int32) Mcp3xxx.ReadPseudoDifferential(Int32, Int32) Mcp3xxx.ReadDifferential(Int32, Int32) Mcp3xxx.Read(Int32) Mcp3xxx.ReadInternal(Int32, Mcp3Base.InputType, Int32) Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3004 : Mcp3xxx, IDisposable Constructors | Improve this Doc View Source Mcp3004(SpiDevice) Constructs Mcp3004 instance Declaration public Mcp3004(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3008.html": {
    "href": "devices/Iot.Device.Adc.Mcp3008.html",
    "title": "Class Mcp3008 | nanoFramework Documentation",
    "keywords": "Class Mcp3008 MCP3008 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3xxx Mcp3008 Implements IDisposable Inherited Members Mcp3xxx.ChannelCount Mcp3xxx.CheckChannelRange(Int32, Int32) Mcp3xxx.CheckChannelPairing(Int32, Int32) Mcp3xxx.ReadPseudoDifferential(Int32, Int32) Mcp3xxx.ReadDifferential(Int32, Int32) Mcp3xxx.Read(Int32) Mcp3xxx.ReadInternal(Int32, Mcp3Base.InputType, Int32) Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3008 : Mcp3xxx, IDisposable Constructors | Improve this Doc View Source Mcp3008(SpiDevice) Constructs Mcp3008 instance Declaration public Mcp3008(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3201.html": {
    "href": "devices/Iot.Device.Adc.Mcp3201.html",
    "title": "Class Mcp3201 | nanoFramework Documentation",
    "keywords": "Class Mcp3201 MCP32001 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3201 Implements IDisposable Inherited Members Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3201 : Mcp3Base, IDisposable Constructors | Improve this Doc View Source Mcp3201(SpiDevice) Constructs Mcp3201 instance Declaration public Mcp3201(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Methods | Improve this Doc View Source Read() Reads a 12-bit (0..4096) value from the device Declaration public int Read() Returns Type Description Int32 12-bit value corresponding to relative voltage level on specified device channel Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3202.html": {
    "href": "devices/Iot.Device.Adc.Mcp3202.html",
    "title": "Class Mcp3202 | nanoFramework Documentation",
    "keywords": "Class Mcp3202 MCP3202 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3xxx Mcp3202 Implements IDisposable Inherited Members Mcp3xxx.ChannelCount Mcp3xxx.CheckChannelRange(Int32, Int32) Mcp3xxx.CheckChannelPairing(Int32, Int32) Mcp3xxx.ReadPseudoDifferential(Int32, Int32) Mcp3xxx.ReadDifferential(Int32, Int32) Mcp3xxx.Read(Int32) Mcp3xxx.ReadInternal(Int32, Mcp3Base.InputType, Int32) Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3202 : Mcp3xxx, IDisposable Constructors | Improve this Doc View Source Mcp3202(SpiDevice) Constructs Mcp3202 instance Declaration public Mcp3202(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3204.html": {
    "href": "devices/Iot.Device.Adc.Mcp3204.html",
    "title": "Class Mcp3204 | nanoFramework Documentation",
    "keywords": "Class Mcp3204 MCP3204 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3xxx Mcp3204 Implements IDisposable Inherited Members Mcp3xxx.ChannelCount Mcp3xxx.CheckChannelRange(Int32, Int32) Mcp3xxx.CheckChannelPairing(Int32, Int32) Mcp3xxx.ReadPseudoDifferential(Int32, Int32) Mcp3xxx.ReadDifferential(Int32, Int32) Mcp3xxx.Read(Int32) Mcp3xxx.ReadInternal(Int32, Mcp3Base.InputType, Int32) Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3204 : Mcp3xxx, IDisposable Constructors | Improve this Doc View Source Mcp3204(SpiDevice) Constructs Mcp3204 instance Declaration public Mcp3204(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3208.html": {
    "href": "devices/Iot.Device.Adc.Mcp3208.html",
    "title": "Class Mcp3208 | nanoFramework Documentation",
    "keywords": "Class Mcp3208 MCP3208 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3xxx Mcp3208 Implements IDisposable Inherited Members Mcp3xxx.ChannelCount Mcp3xxx.CheckChannelRange(Int32, Int32) Mcp3xxx.CheckChannelPairing(Int32, Int32) Mcp3xxx.ReadPseudoDifferential(Int32, Int32) Mcp3xxx.ReadDifferential(Int32, Int32) Mcp3xxx.Read(Int32) Mcp3xxx.ReadInternal(Int32, Mcp3Base.InputType, Int32) Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3208 : Mcp3xxx, IDisposable Constructors | Improve this Doc View Source Mcp3208(SpiDevice) Constructs Mcp3208 instance Declaration public Mcp3208(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3301.html": {
    "href": "devices/Iot.Device.Adc.Mcp3301.html",
    "title": "Class Mcp3301 | nanoFramework Documentation",
    "keywords": "Class Mcp3301 MCP3301 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3301 Implements IDisposable Inherited Members Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3301 : Mcp3Base, IDisposable Constructors | Improve this Doc View Source Mcp3301(SpiDevice) Constructs Mcp3301 instance Declaration public Mcp3301(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Methods | Improve this Doc View Source ReadDifferential() Reads a 13 bit signed value from the device using differential inputs Declaration public int ReadDifferential() Returns Type Description Int32 A 13 bit signed value corresponding to relative voltage level on specified device channels Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3302.html": {
    "href": "devices/Iot.Device.Adc.Mcp3302.html",
    "title": "Class Mcp3302 | nanoFramework Documentation",
    "keywords": "Class Mcp3302 MCP3302 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3xxx Mcp33xx Mcp3302 Implements IDisposable Inherited Members Mcp33xx.SignExtend(Int32, Int32) Mcp33xx.ReadPseudoDifferential(Int32, Int32) Mcp33xx.ReadDifferential(Int32, Int32) Mcp3xxx.ChannelCount Mcp3xxx.CheckChannelRange(Int32, Int32) Mcp3xxx.CheckChannelPairing(Int32, Int32) Mcp3xxx.Read(Int32) Mcp3xxx.ReadInternal(Int32, Mcp3Base.InputType, Int32) Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3302 : Mcp33xx, IDisposable Constructors | Improve this Doc View Source Mcp3302(SpiDevice) Constructs Mcp3302 instance Declaration public Mcp3302(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3304.html": {
    "href": "devices/Iot.Device.Adc.Mcp3304.html",
    "title": "Class Mcp3304 | nanoFramework Documentation",
    "keywords": "Class Mcp3304 MCP3304 Analog to Digital Converter (ADC) Inheritance Object Mcp3Base Mcp3xxx Mcp33xx Mcp3304 Implements IDisposable Inherited Members Mcp33xx.SignExtend(Int32, Int32) Mcp33xx.ReadPseudoDifferential(Int32, Int32) Mcp33xx.ReadDifferential(Int32, Int32) Mcp3xxx.ChannelCount Mcp3xxx.CheckChannelRange(Int32, Int32) Mcp3xxx.CheckChannelPairing(Int32, Int32) Mcp3xxx.Read(Int32) Mcp3xxx.ReadInternal(Int32, Mcp3Base.InputType, Int32) Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public class Mcp3304 : Mcp33xx, IDisposable Constructors | Improve this Doc View Source Mcp3304(SpiDevice) Constructs Mcp3304 instance Declaration public Mcp3304(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp33xx.html": {
    "href": "devices/Iot.Device.Adc.Mcp33xx.html",
    "title": "Class Mcp33xx | nanoFramework Documentation",
    "keywords": "Class Mcp33xx MCP33XX family of Analog to Digital Converters Inheritance Object Mcp3Base Mcp3xxx Mcp33xx Mcp3302 Mcp3304 Implements IDisposable Inherited Members Mcp3xxx.ChannelCount Mcp3xxx.CheckChannelRange(Int32, Int32) Mcp3xxx.CheckChannelPairing(Int32, Int32) Mcp3xxx.Read(Int32) Mcp3xxx.ReadInternal(Int32, Mcp3Base.InputType, Int32) Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public abstract class Mcp33xx : Mcp3xxx, IDisposable Constructors | Improve this Doc View Source Mcp33xx(SpiDevice, Byte, Byte) Constructs Mcp33xx instance Declaration public Mcp33xx(SpiDevice spiDevice, byte channelCount, byte adcResolutionBits) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Byte channelCount Value representing the number of single ended input channels on the device. Byte adcResolutionBits The number of bits of resolution for the ADC. Methods | Improve this Doc View Source ReadDifferential(Int32, Int32) Reads a 13 bit signed value from the device using differential inputs Declaration public override int ReadDifferential(int valueChannel, int referenceChannel) Parameters Type Name Description Int32 valueChannel Channel which represents the signal driving the value in a positive direction (valid values: 0 to channelcount - 1). Int32 referenceChannel Channel which represents the signal driving the value in a negative direction (valid values: 0 to channelcount - 1). Returns Type Description Int32 A 13 bit signed value corresponding to relative voltage level on specified device channels Overrides Mcp3xxx.ReadDifferential(Int32, Int32) Remarks The value that is read respresents the difference between the voltage on the value channel and the voltage on the reference channel (valueChannel Reading - referenceChannel Reading). If the valueChannel and the referenceChannel are part of the same channel pairing then the ADC converter will internally subtract the two values. If not then the subtraction is performed in software which may mean that errors are introduced with rapidly changing signals. | Improve this Doc View Source ReadPseudoDifferential(Int32, Int32) Reads a value from the device using pseudo-differential inputs Declaration public override int ReadPseudoDifferential(int valueChannel, int referenceChannel) Parameters Type Name Description Int32 valueChannel Channel which represents the signal (valid values: 0 to channelcount - 1). Int32 referenceChannel Channel which represents the signal ground (valid values: 0 to channelcount - 1). Returns Type Description Int32 A value corresponding to relative voltage level on specified device channels Overrides Mcp3xxx.ReadPseudoDifferential(Int32, Int32) | Improve this Doc View Source SignExtend(Int32, Int32) Convert a signed value with a sign bit at a particular location to an int. Declaration public static int SignExtend(int signedValue, int signingBit) Parameters Type Name Description Int32 signedValue Signed value with a sign bit at a particular location Int32 signingBit Bit number that contains the sign bit Returns Type Description Int32 A value corresponding to the signed value sign extended into an int Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3Base.html": {
    "href": "devices/Iot.Device.Adc.Mcp3Base.html",
    "title": "Class Mcp3Base | nanoFramework Documentation",
    "keywords": "Class Mcp3Base MCP family of ADC devices Inheritance Object Mcp3Base Mcp3001 Mcp3201 Mcp3301 Mcp3xxx Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public abstract class Mcp3Base : IDisposable Constructors | Improve this Doc View Source Mcp3Base(SpiDevice) Constructs Mcp3Base instance Declaration public Mcp3Base(SpiDevice spiDevice) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Methods | Improve this Doc View Source Dispose() Disposes Mcp3Base instances Declaration public void Dispose() | Improve this Doc View Source ReadInternal(Int32, Int32, Int32) Reads a value from the device Declaration protected int ReadInternal(int adcRequest, int adcResolutionBits, int delayBits) Parameters Type Name Description Int32 adcRequest A bit pattern to be sent to the ADC. Int32 adcResolutionBits The number of bits in the returned value Int32 delayBits The number of bits to be delayed between the request and the response being read. Returns Type Description Int32 A value corresponding to a voltage level on the input pin described by the request. Implements IDisposable"
  },
  "devices/Iot.Device.Adc.Mcp3Base.InputType.html": {
    "href": "devices/Iot.Device.Adc.Mcp3Base.InputType.html",
    "title": "Enum Mcp3Base.InputType | nanoFramework Documentation",
    "keywords": "Enum Mcp3Base.InputType InputType: the type of pin connection Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax protected enum InputType Fields Name Description Differential The value is the difference in voltage between two pins with the first pin being the positive one InvertedDifferential The value is the difference in voltage between two pins with the second pin being the positive one SingleEnded The value is measured as the voltage on a single pin"
  },
  "devices/Iot.Device.Adc.Mcp3xxx.html": {
    "href": "devices/Iot.Device.Adc.Mcp3xxx.html",
    "title": "Class Mcp3xxx | nanoFramework Documentation",
    "keywords": "Class Mcp3xxx MCP family of ADC devices Inheritance Object Mcp3Base Mcp3xxx Mcp3002 Mcp3004 Mcp3008 Mcp3202 Mcp3204 Mcp3208 Mcp33xx Implements IDisposable Inherited Members Mcp3Base.ReadInternal(Int32, Int32, Int32) Mcp3Base.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adc Assembly : Iot.Device.Mcp3xxx.dll Syntax public abstract class Mcp3xxx : Mcp3Base, IDisposable Constructors | Improve this Doc View Source Mcp3xxx(SpiDevice, Byte, Byte) Constructs Mcp3xxx instance Declaration public Mcp3xxx(SpiDevice spiDevice, byte channelCount, byte adcResolutionBits) Parameters Type Name Description SpiDevice spiDevice Device used for SPI communication Byte channelCount Value representing the number of single ended input channels available on the device. Byte adcResolutionBits The number of bits of resolution for the ADC. Fields | Improve this Doc View Source ChannelCount the number of single ended input channel on the ADC Declaration protected byte ChannelCount Field Value Type Description Byte Methods | Improve this Doc View Source CheckChannelPairing(Int32, Int32) Checks that the channel is in range of the available input channels and that both channels are part of a valid pairing of input channels. Declaration protected void CheckChannelPairing(int valueChannel, int referenceChannel) Parameters Type Name Description Int32 valueChannel Value channel to be checked Int32 referenceChannel Reference channel to be checked | Improve this Doc View Source CheckChannelRange(Int32, Int32) Checks that the channel is in range of the available channels channels and throws an exception if not. Declaration protected void CheckChannelRange(int channel, int channelCount) Parameters Type Name Description Int32 channel Channel to be checked Int32 channelCount Value representing the number of channels on the device which may vary depending on the configuration. | Improve this Doc View Source Read(Int32) Reads a value from the device Declaration public virtual int Read(int channel) Parameters Type Name Description Int32 channel Channel which value should be read from (valid values: 0 to channelcount - 1) Returns Type Description Int32 A value corresponding to relative voltage level on specified device channel | Improve this Doc View Source ReadDifferential(Int32, Int32) Reads a value from the device using differential inputs Declaration public virtual int ReadDifferential(int valueChannel, int referenceChannel) Parameters Type Name Description Int32 valueChannel Channel which represents the signal driving the value in a positive direction (valid values: 0 to channelcount - 1). Int32 referenceChannel Channel which represents the signal driving the value in a negative direction (valid values: 0 to channelcount - 1). Returns Type Description Int32 A value corresponding to relative voltage level on specified device channels Remarks The value that is read respresents the difference between the voltage on the value channel and the voltage on the reference channel (valueChannel Reading - referenceChannel Reading). This subtraction is performed in software which may mean that errors are introduced with rapidly changing signals. | Improve this Doc View Source ReadInternal(Int32, Mcp3Base.InputType, Int32) Reads a value from the device Declaration protected int ReadInternal(int channel, Mcp3Base.InputType inputType, int adcResolutionBits) Parameters Type Name Description Int32 channel Channel which value should be read from. For diffential inputs this represents a channel pair (valid values: 0 - channelcount - 1 or 0 - channelcount / 2 - 1 with differential inputs) Mcp3Base.InputType inputType The type of input channel to read. Int32 adcResolutionBits The number of bits in the returned value Returns Type Description Int32 A value corresponding to relative voltage level on specified device channel | Improve this Doc View Source ReadPseudoDifferential(Int32, Int32) Reads a value from the device using pseudo-differential inputs Declaration public virtual int ReadPseudoDifferential(int valueChannel, int referenceChannel) Parameters Type Name Description Int32 valueChannel Channel which represents the signal (valid values: 0 to channelcount - 1). Int32 referenceChannel Channel which represents the signal ground (valid values: 0 to channelcount - 1). Returns Type Description Int32 A value corresponding to relative voltage level on specified device channels Remarks Like a normal differential input the value that is read respresents the difference between the voltage on the value channel and the voltage on the reference channel (valueChannel Reading - referenceChannel Reading). However the reference signal in a pseudo-differential input is expected to be connected to the signal ground. This is used to reduce the effect of external electrical noise on the on the inputs. If there is noise where the noise is likey to impact both the value input and the reference input and the action of subtracting the values helps to cancel it out. Implements IDisposable"
  },
  "devices/Iot.Device.Ads1115.Ads1115.html": {
    "href": "devices/Iot.Device.Ads1115.Ads1115.html",
    "title": "Class Ads1115 | nanoFramework Documentation",
    "keywords": "Class Ads1115 Analog-to-Digital Converter ADS1115 Inheritance Object Ads1115 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ads1115 Assembly : Iot.Device.Ads1115.dll Syntax public class Ads1115 : IDisposable Constructors | Improve this Doc View Source Ads1115(I2cDevice, InputMultiplexer, MeasuringRange, DataRate, DeviceMode) Initialize a new Ads1115 device connected through I2C Declaration public Ads1115(I2cDevice i2cDevice, InputMultiplexer inputMultiplexer = InputMultiplexer.AIN0, MeasuringRange measuringRange = MeasuringRange.FS4096, DataRate dataRate = DataRate.SPS128, DeviceMode deviceMode = DeviceMode.Continuous) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. InputMultiplexer inputMultiplexer Input Multiplexer MeasuringRange measuringRange Programmable Gain Amplifier DataRate dataRate Data Rate DeviceMode deviceMode Initial device mode | Improve this Doc View Source Ads1115(I2cDevice, GpioController, Int32, Boolean, InputMultiplexer, MeasuringRange, DataRate, DeviceMode) Initialize a new Ads1115 device connected through I2C with an additional GPIO controller for interrupt handling. Declaration public Ads1115(I2cDevice i2cDevice, GpioController gpioController, int gpioInterruptPin, bool shouldDispose = true, InputMultiplexer inputMultiplexer = InputMultiplexer.AIN0, MeasuringRange measuringRange = MeasuringRange.FS4096, DataRate dataRate = DataRate.SPS128, DeviceMode deviceMode = DeviceMode.Continuous) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. GpioController gpioController The GPIO Controller used for interrupt handling Int32 gpioInterruptPin The pin number where the interrupt line is attached on the GPIO controller Boolean shouldDispose True (the default) if the GPIO controller shall be disposed when disposing this instance InputMultiplexer inputMultiplexer Input Multiplexer MeasuringRange measuringRange Programmable Gain Amplifier DataRate dataRate Data Rate DeviceMode deviceMode Initial device mode Properties | Improve this Doc View Source ComparatorLatching Comparator latching mode. If enabled, the ALRT/RDY Pin will be kept signaled until the conversion value is read. Only relevant when the comparator is enabled. Declaration public ComparatorLatching ComparatorLatching { get; set; } Property Value Type Description ComparatorLatching | Improve this Doc View Source ComparatorMode Comparator mode. Only relevant if the comparator trigger event is set up and is changed by EnableComparator(Int16, Int16, ComparatorMode, ComparatorQueue) . Declaration public ComparatorMode ComparatorMode { get; } Property Value Type Description ComparatorMode | Improve this Doc View Source ComparatorPolarity Comparator polarity. Indicates whether the rising or the falling edge of the ALRT/RDY Pin is relevant. Default: Low (falling edge) Declaration public ComparatorPolarity ComparatorPolarity { get; set; } Property Value Type Description ComparatorPolarity | Improve this Doc View Source ComparatorQueue Minimum number of samples exceeding the lower/upper threshold before the ALRT pin is asserted. This can only be set with EnableComparator(Int16, Int16, ComparatorMode, ComparatorQueue) . Declaration public ComparatorQueue ComparatorQueue { get; } Property Value Type Description ComparatorQueue | Improve this Doc View Source DataRate ADS1115 Data Rate. The number of conversions per second that will take place. One conversion will take \"1/rate\" seconds to become ready. If in power-down mode, only one conversion will happen automatically, then another request is required. Setting this property will wait until a new value is available. Declaration public DataRate DataRate { get; set; } Property Value Type Description DataRate | Improve this Doc View Source DeviceMode ADS1115 operation mode. When set to Continuous the chip continously measures the input and the values can be read directly. If set to PowerDown the chip enters idle mode after each conversion and a new value will be requested each time a read request is performed. This is the recommended setting when frequently swapping between input channels, because a change of the channel requires a new conversion anyway. Declaration public DeviceMode DeviceMode { get; set; } Property Value Type Description DeviceMode | Improve this Doc View Source InputMultiplexer ADS1115 Input Multiplexer. This selects the channel(s) for the next read operation, InputMultiplexer . Setting this property will wait until a value is available from the newly selected input channel. Declaration public InputMultiplexer InputMultiplexer { get; set; } Property Value Type Description InputMultiplexer | Improve this Doc View Source MeasuringRange ADS1115 Programmable Gain Amplifier This sets the maximum value that can be measured. Regardless of this setting, the input value on any pin must not exceed VDD + 0.3V, so high ranges are only usable with a VDD of more than 5V. Setting this property will wait until a new value is available. Declaration public MeasuringRange MeasuringRange { get; set; } Property Value Type Description MeasuringRange Methods | Improve this Doc View Source Dispose() Cleanup. Failing to dispose this class, especially when callbacks are active, may lead to undefined behavior. Declaration public void Dispose() | Improve this Doc View Source EnableComparator(Int16, Int16, ComparatorMode, ComparatorQueue) Enable comparator callback mode. In traditional comparator mode, the callback is triggered each time the measured value exceeds the given upper value (for the given queueLength number of samples). It deasserts when the lower value is reached. In window comparator mode, the callback is triggered each time the measured value exceeds the given upper value or gets less than the given lower value. Declaration public void EnableComparator(short lowerValue, short upperValue, ComparatorMode mode, ComparatorQueue queueLength) Parameters Type Name Description Int16 lowerValue Lower value for the comparator Int16 upperValue Upper value for the comparator ComparatorMode mode Traditional or Window comparator mode ComparatorQueue queueLength Minimum number of samples that must exceed the threshold to trigger the event Exceptions Type Condition InvalidOperationException The GPIO Controller for the interrupt handler has not been set up | Improve this Doc View Source EnableComparator(ElectricPotential, ElectricPotential, ComparatorMode, ComparatorQueue) Enable comparator callback mode. In traditional comparator mode, the callback is triggered each time the measured value exceeds the given upper value (for the given queueLength number of samples). It deasserts when the lower value is reached. In window comparator mode, the callback is triggered each time the measured value exceeds the given upper value or gets less than the given lower value. Declaration public void EnableComparator(ElectricPotential lowerValue, ElectricPotential upperValue, ComparatorMode mode, ComparatorQueue queueLength) Parameters Type Name Description UnitsNet.ElectricPotential lowerValue Lower value for the comparator UnitsNet.ElectricPotential upperValue Upper value for the comparator ComparatorMode mode Traditional or Window comparator mode ComparatorQueue queueLength Minimum number of samples that must exceed the threshold to trigger the event Exceptions Type Condition InvalidOperationException The GPIO Controller for the interrupt handler has not been set up | Improve this Doc View Source EnableConversionReady() Enable conversion ready event. The AlertReadyAsserted event fires each time a new value is available after this method is called. Declaration public void EnableConversionReady() Exceptions Type Condition InvalidOperationException The conversion ready event is already set up or no GPIO Controller configured for interrupt handling. | Improve this Doc View Source FrequencyFromDataRate(DataRate) Returns the sampling frequency in Hz for the given data rate enumeration member. Declaration public double FrequencyFromDataRate(DataRate dataRate) Parameters Type Name Description DataRate dataRate One of the DataRate enumeration members. Returns Type Description Double A frequency, in Hertz | Improve this Doc View Source MaxVoltageFromMeasuringRange(MeasuringRange) Returns the voltage assigned to the given MeasuringRange enumeration value. Declaration public ElectricPotential MaxVoltageFromMeasuringRange(MeasuringRange measuringRange) Parameters Type Name Description MeasuringRange measuringRange One of the MeasuringRange enumeration members Returns Type Description UnitsNet.ElectricPotential An electric potential (voltage). | Improve this Doc View Source RawToVoltage(Int16) Convert Raw Data to Voltage Declaration public ElectricPotential RawToVoltage(short val) Parameters Type Name Description Int16 val Raw Data Returns Type Description UnitsNet.ElectricPotential Voltage, based on the current measuring range | Improve this Doc View Source ReadRaw() Read Raw Data. If in PowerDown (single-shot) mode, one new sample is requested first. Declaration public short ReadRaw() Returns Type Description Int16 Raw Value | Improve this Doc View Source ReadRaw(InputMultiplexer) Reads the next raw value, first switching to the given input and ranges. Declaration public short ReadRaw(InputMultiplexer inputMultiplexer) Parameters Type Name Description InputMultiplexer inputMultiplexer New input multiplexer setting Returns Type Description Int16 Measured value as short Remarks For performance reasons, it is advised to use this method if quick readings with different input channels are required, instead of setting all the properties first and then calling ReadRaw() . | Improve this Doc View Source ReadRaw(InputMultiplexer, MeasuringRange, DataRate) Reads the next raw value, first switching to the given input and ranges. Declaration public short ReadRaw(InputMultiplexer inputMultiplexer, MeasuringRange measuringRange, DataRate dataRate) Parameters Type Name Description InputMultiplexer inputMultiplexer New input multiplexer setting MeasuringRange measuringRange New measuring range DataRate dataRate New data rate Returns Type Description Int16 Measured value as short Remarks For performance reasons, it is advised to use this method if quick readings with different settings (i.e. different input channels) are required, instead of setting all the properties first and then calling ReadRaw() . | Improve this Doc View Source ReadVoltage() Returns the electric potential (voltage) of the currently selected input. Declaration public ElectricPotential ReadVoltage() Returns Type Description UnitsNet.ElectricPotential The measured voltage of the currently selected input channel. In volts. | Improve this Doc View Source ReadVoltage(InputMultiplexer) Returns the electric potential (voltage) of the given channel, performs a measurement first Declaration public ElectricPotential ReadVoltage(InputMultiplexer inputMultiplexer) Parameters Type Name Description InputMultiplexer inputMultiplexer Channel to use Returns Type Description UnitsNet.ElectricPotential The voltage at the selected channel | Improve this Doc View Source VoltageToRaw(ElectricPotential) Converts voltage to raw data. Declaration public short VoltageToRaw(ElectricPotential voltage) Parameters Type Name Description UnitsNet.ElectricPotential voltage Input voltage Returns Type Description Int16 Corresponding raw value, based on the current measuring range Events | Improve this Doc View Source AlertReadyAsserted This event fires when a new value is available (in conversion ready mode) or the comparator threshold is exceeded. Requires setup through EnableConversionReady() or EnableComparator(ElectricPotential, ElectricPotential, ComparatorMode, ComparatorQueue) . Declaration public event Action AlertReadyAsserted Event Type Type Description Action Implements IDisposable"
  },
  "devices/Iot.Device.Ads1115.ComparatorLatching.html": {
    "href": "devices/Iot.Device.Ads1115.ComparatorLatching.html",
    "title": "Enum ComparatorLatching | nanoFramework Documentation",
    "keywords": "Enum ComparatorLatching Set Comparator Latching Namespace : Iot.Device.Ads1115 Assembly : Iot.Device.Ads1115.dll Syntax public enum ComparatorLatching Fields Name Description Latching Latching NonLatching Non-latching"
  },
  "devices/Iot.Device.Ads1115.ComparatorMode.html": {
    "href": "devices/Iot.Device.Ads1115.ComparatorMode.html",
    "title": "Enum ComparatorMode | nanoFramework Documentation",
    "keywords": "Enum ComparatorMode Comparator Mode of Operation Namespace : Iot.Device.Ads1115 Assembly : Iot.Device.Ads1115.dll Syntax public enum ComparatorMode Fields Name Description Traditional Traditional mode Window Window mode"
  },
  "devices/Iot.Device.Ads1115.ComparatorPolarity.html": {
    "href": "devices/Iot.Device.Ads1115.ComparatorPolarity.html",
    "title": "Enum ComparatorPolarity | nanoFramework Documentation",
    "keywords": "Enum ComparatorPolarity Controls the Polarity of the ALERT Pin Namespace : Iot.Device.Ads1115 Assembly : Iot.Device.Ads1115.dll Syntax public enum ComparatorPolarity Fields Name Description High High Low Low"
  },
  "devices/Iot.Device.Ads1115.ComparatorQueue.html": {
    "href": "devices/Iot.Device.Ads1115.ComparatorQueue.html",
    "title": "Enum ComparatorQueue | nanoFramework Documentation",
    "keywords": "Enum ComparatorQueue Comparator Queue. Namespace : Iot.Device.Ads1115 Assembly : Iot.Device.Ads1115.dll Syntax public enum ComparatorQueue Fields Name Description AssertAfterFour Assert after four AssertAfterOne Assert after one AssertAfterTwo Assert after two Disable Disable"
  },
  "devices/Iot.Device.Ads1115.DataRate.html": {
    "href": "devices/Iot.Device.Ads1115.DataRate.html",
    "title": "Enum DataRate | nanoFramework Documentation",
    "keywords": "Enum DataRate Control the Data Rate (SPS, sample per second) Namespace : Iot.Device.Ads1115 Assembly : Iot.Device.Ads1115.dll Syntax public enum DataRate Fields Name Description SPS008 8 SPS SPS016 16 SPS SPS032 32 SPS SPS064 64 SPS SPS128 128 SPS SPS250 250 SPS SPS475 475 SPS SPS860 860 SPS"
  },
  "devices/Iot.Device.Ads1115.DeviceMode.html": {
    "href": "devices/Iot.Device.Ads1115.DeviceMode.html",
    "title": "Enum DeviceMode | nanoFramework Documentation",
    "keywords": "Enum DeviceMode Set the Mode of ADS1115 Namespace : Iot.Device.Ads1115 Assembly : Iot.Device.Ads1115.dll Syntax public enum DeviceMode Fields Name Description Continuous Continuous mode PowerDown Power down mode, the chip is shutting down after the next conversion"
  },
  "devices/Iot.Device.Ads1115.html": {
    "href": "devices/Iot.Device.Ads1115.html",
    "title": "Namespace Iot.Device.Ads1115 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ads1115 Classes Ads1115 Analog-to-Digital Converter ADS1115 Enums ComparatorLatching Set Comparator Latching ComparatorMode Comparator Mode of Operation ComparatorPolarity Controls the Polarity of the ALERT Pin ComparatorQueue Comparator Queue. DataRate Control the Data Rate (SPS, sample per second) DeviceMode Set the Mode of ADS1115 I2cAddress ADS1115 I2C Address Setting InputMultiplexer Configure the Input Multiplexer MeasuringRange Configure the Programmable Gain Amplifier, i.e. Measuring Range Note that the maximum input value on any input pin is VDD+0.3V and the maximum value that can be measured is VDD. So if the supply voltage is 3.3V, using FS6144 may not be useful, because it just reduces the accuracy to 14 bit (excluding the sign bit)."
  },
  "devices/Iot.Device.Ads1115.I2cAddress.html": {
    "href": "devices/Iot.Device.Ads1115.I2cAddress.html",
    "title": "Enum I2cAddress | nanoFramework Documentation",
    "keywords": "Enum I2cAddress ADS1115 I2C Address Setting Namespace : Iot.Device.Ads1115 Assembly : Iot.Device.Ads1115.dll Syntax public enum I2cAddress Fields Name Description GND ADDR Pin connect to GND SCL ADDR Pin connect to SCL SDA ADDR Pin connect to SDA VCC ADDR Pin connect to VCC"
  },
  "devices/Iot.Device.Ads1115.InputMultiplexer.html": {
    "href": "devices/Iot.Device.Ads1115.InputMultiplexer.html",
    "title": "Enum InputMultiplexer | nanoFramework Documentation",
    "keywords": "Enum InputMultiplexer Configure the Input Multiplexer Namespace : Iot.Device.Ads1115 Assembly : Iot.Device.Ads1115.dll Syntax public enum InputMultiplexer Fields Name Description AIN0 AIN Positive = AIN0 and AIN Negative = GND Measure the Voltage between AIN0 and GND AIN0_AIN1 AIN Positive = AIN0 and AIN Negative = AIN1 Measure the Voltage between AIN0 and AIN1 AIN0_AIN3 AIN Positive = AIN0 and AIN Negative = AIN3 Measure the Voltage between AIN0 and AIN3 AIN1 AIN Positive = AIN1 and AIN Negative = GND Measure the Voltage between AIN1 and GND AIN1_AIN3 AIN Positive = AIN1 and AIN Negative = AIN3 Measure the Voltage between AIN1 and AIN3 AIN2 AIN Positive = AIN2 and AIN Negative = GND Measure the Voltage between AIN2 and GND AIN2_AIN3 AIN Positive = AIN2 and AIN Negative = AIN3 Measure the Voltage between AIN2 and AIN3 AIN3 AIN Positive = AIN3 and AIN Negative = GND Measure the Voltage between AIN3 and GND"
  },
  "devices/Iot.Device.Ads1115.MeasuringRange.html": {
    "href": "devices/Iot.Device.Ads1115.MeasuringRange.html",
    "title": "Enum MeasuringRange | nanoFramework Documentation",
    "keywords": "Enum MeasuringRange Configure the Programmable Gain Amplifier, i.e. Measuring Range Note that the maximum input value on any input pin is VDD+0.3V and the maximum value that can be measured is VDD. So if the supply voltage is 3.3V, using FS6144 may not be useful, because it just reduces the accuracy to 14 bit (excluding the sign bit). Namespace : Iot.Device.Ads1115 Assembly : Iot.Device.Ads1115.dll Syntax public enum MeasuringRange Fields Name Description FS0256 ±0.256V FS0512 ±0.512V FS1024 ±1.024V FS2048 ±2.048V FS4096 ±4.096V FS6144 ±6.144V."
  },
  "devices/Iot.Device.Adxl345.Adxl345.html": {
    "href": "devices/Iot.Device.Adxl345.Adxl345.html",
    "title": "Class Adxl345 | nanoFramework Documentation",
    "keywords": "Class Adxl345 SPI Accelerometer ADX1345 Inheritance Object Adxl345 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adxl345 Assembly : Iot.Device.Adxl345.dll Syntax [Interface(\"SPI Accelerometer ADX1345\")] public class Adxl345 : IDisposable Constructors | Improve this Doc View Source Adxl345(SpiDevice, GravityRange) SPI Accelerometer ADX1345 Declaration public Adxl345(SpiDevice sensor, GravityRange gravityRange) Parameters Type Name Description SpiDevice sensor The communications channel to a device on a SPI bus GravityRange gravityRange Gravity Measurement Range Fields | Improve this Doc View Source SpiClockFrequency ADX1345 SPI Clock Frequency Declaration public const int SpiClockFrequency = 5000000 Field Value Type Description Int32 | Improve this Doc View Source SpiMode ADX1345 SPI Mode Declaration public const SpiMode SpiMode = SpiMode.Mode3 Field Value Type Description SpiMode Properties | Improve this Doc View Source Acceleration Read Acceleration from ADXL345 Declaration [Telemetry] public Vector3 Acceleration { get; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Adxl345.GravityRange.html": {
    "href": "devices/Iot.Device.Adxl345.GravityRange.html",
    "title": "Enum GravityRange | nanoFramework Documentation",
    "keywords": "Enum GravityRange Gravity Measurement Range Namespace : Iot.Device.Adxl345 Assembly : Iot.Device.Adxl345.dll Syntax public enum GravityRange Fields Name Description Range02 ±2G Range04 ±4G Range08 ±8G Range16 ±16G"
  },
  "devices/Iot.Device.Adxl345.html": {
    "href": "devices/Iot.Device.Adxl345.html",
    "title": "Namespace Iot.Device.Adxl345 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Adxl345 Classes Adxl345 SPI Accelerometer ADX1345 Enums GravityRange Gravity Measurement Range"
  },
  "devices/Iot.Device.Adxl357.AccelerometerRange.html": {
    "href": "devices/Iot.Device.Adxl357.AccelerometerRange.html",
    "title": "Enum AccelerometerRange | nanoFramework Documentation",
    "keywords": "Enum AccelerometerRange The sensitivity of the accelerometer sensor. Namespace : Iot.Device.Adxl357 Assembly : Iot.Device.Adxl357.dll Syntax public enum AccelerometerRange Fields Name Description Range10G Range ±10g Range20G Range ±20g Range40G Range ±40g"
  },
  "devices/Iot.Device.Adxl357.Adxl357.html": {
    "href": "devices/Iot.Device.Adxl357.Adxl357.html",
    "title": "Class Adxl357 | nanoFramework Documentation",
    "keywords": "Class Adxl357 I2C Accelerometer ADXL357 Inheritance Object Adxl357 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Adxl357 Assembly : Iot.Device.Adxl357.dll Syntax public class Adxl357 : IDisposable Constructors | Improve this Doc View Source Adxl357(I2cDevice, AccelerometerRange) Constructs a ADXL357 I2C device. Declaration public Adxl357(I2cDevice i2CDevice, AccelerometerRange accelerometerRange = AccelerometerRange.Range10G) Parameters Type Name Description I2cDevice i2CDevice The I2C device used for communication. AccelerometerRange accelerometerRange The sensitivity of the accelerometer. Fields | Improve this Doc View Source DefaultI2CAddress The default I2C address of ADXL357 device Declaration public const byte DefaultI2CAddress = 29 Field Value Type Description Byte Properties | Improve this Doc View Source Acceleration Gets the current acceleration in g. Range depends on the AccelerometerRange passed to the constructor. Declaration public Vector3 Acceleration { get; } Property Value Type Description Vector3 | Improve this Doc View Source AccelerometerRange Gets or sets the sensitivity of the accelerometer. Declaration public AccelerometerRange AccelerometerRange { get; set; } Property Value Type Description AccelerometerRange | Improve this Doc View Source Temperature Gets the current temperature in °C. Range is from −40°C to +125°C. Declaration public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Methods | Improve this Doc View Source CalibrateAccelerationSensor(Int32, TimeSpan) Calibrates the accelerometer. You can override default samples and calibrationInterval if required. Declaration public void CalibrateAccelerationSensor(int samples, TimeSpan calibrationInterval) Parameters Type Name Description Int32 samples The number of times every axis is measured. The average of these measurements is used to calibrate each axis. TimeSpan calibrationInterval The time in milliseconds to wait between each measurement. If null is provided, Iot.Device.Adxl357.Adxl357.CalibrationIntervalDefault in milliseconds is used. Remarks Make sure that the sensor is placed horizontally when executing this method. | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Adxl357.html": {
    "href": "devices/Iot.Device.Adxl357.html",
    "title": "Namespace Iot.Device.Adxl357 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Adxl357 Classes Adxl357 I2C Accelerometer ADXL357 Enums AccelerometerRange The sensitivity of the accelerometer sensor."
  },
  "devices/Iot.Device.Ags01db.Ags01db.html": {
    "href": "devices/Iot.Device.Ags01db.Ags01db.html",
    "title": "Class Ags01db | nanoFramework Documentation",
    "keywords": "Class Ags01db MEMS VOC Gas Sensor ASG01DB Inheritance Object Ags01db Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ags01db Assembly : Iot.Device.Ags01db.dll Syntax [Interface(\"MEMS VOC Gas Sensor ASG01DB\")] [Interface(\"MEMS VOC Gas Sensor ASG01DB\")] public class Ags01db : IDisposable Constructors | Improve this Doc View Source Ags01db(I2cDevice) Creates a new instance of the ASG01DB Declaration public Ags01db(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. | Improve this Doc View Source Ags01db(I2cDevice) Creates a new instance of the ASG01DB Declaration public Ags01db(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Fields | Improve this Doc View Source DefaultI2cAddress ASG01DB Default I2C Address Declaration public const byte DefaultI2cAddress = 17 Field Value Type Description Byte | Improve this Doc View Source DefaultI2cAddress ASG01DB Default I2C Address Declaration public const byte DefaultI2cAddress = 17 Field Value Type Description Byte Properties | Improve this Doc View Source Concentration ASG01DB VOC (Volatile Organic Compounds) Gas Concentration (ppm) Declaration [Telemetry] public Ratio Concentration { get; } Property Value Type Description UnitsNet.Ratio | Improve this Doc View Source Concentration ASG01DB VOC (Volatile Organic Compounds) Gas Concentration (ppm) Declaration [Telemetry] public Ratio Concentration { get; } Property Value Type Description UnitsNet.Ratio | Improve this Doc View Source Version ASG01DB Version Declaration [Property] public byte Version { get; } Property Value Type Description Byte | Improve this Doc View Source Version ASG01DB Version Declaration [Property] public byte Version { get; } Property Value Type Description Byte Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Ags01db.html": {
    "href": "devices/Iot.Device.Ags01db.html",
    "title": "Namespace Iot.Device.Ags01db | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ags01db Classes Ags01db MEMS VOC Gas Sensor ASG01DB"
  },
  "devices/Iot.Device.Ahtxx.Aht10.html": {
    "href": "devices/Iot.Device.Ahtxx.Aht10.html",
    "title": "Class Aht10 | nanoFramework Documentation",
    "keywords": "Class Aht10 AHT10/15 temperature and humidity sensor binding. Inheritance Object AhtBase Aht10 Implements IDisposable Inherited Members AhtBase.DefaultI2cAddress AhtBase.GetTemperature() AhtBase.GetHumidity() AhtBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ahtxx Assembly : Iot.Device.Ahtxx.dll Syntax public class Aht10 : AhtBase, IDisposable Constructors | Improve this Doc View Source Aht10(I2cDevice) Initializes a new instance of the Aht10 class. Declaration public Aht10(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice Implements IDisposable"
  },
  "devices/Iot.Device.Ahtxx.Aht20.html": {
    "href": "devices/Iot.Device.Ahtxx.Aht20.html",
    "title": "Class Aht20 | nanoFramework Documentation",
    "keywords": "Class Aht20 AHT20 temperature and humidity sensor binding. Inheritance Object AhtBase Aht20 Implements IDisposable Inherited Members AhtBase.DefaultI2cAddress AhtBase.GetTemperature() AhtBase.GetHumidity() AhtBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ahtxx Assembly : Iot.Device.Ahtxx.dll Syntax public class Aht20 : AhtBase, IDisposable Constructors | Improve this Doc View Source Aht20(I2cDevice) Initializes a new instance of the Aht20 class. Declaration public Aht20(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice Implements IDisposable"
  },
  "devices/Iot.Device.Ahtxx.AhtBase.html": {
    "href": "devices/Iot.Device.Ahtxx.AhtBase.html",
    "title": "Class AhtBase | nanoFramework Documentation",
    "keywords": "Class AhtBase Base class for common functions of the AHT10/15 and AHT20 sensors. Inheritance Object AhtBase Aht10 Aht20 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ahtxx Assembly : Iot.Device.Ahtxx.dll Syntax [Interface(\"AHTxx temperature and humidity sensor\")] public abstract class AhtBase : IDisposable Constructors | Improve this Doc View Source AhtBase(I2cDevice, Byte) Initializes a new instance of the binding for a sensor connected through I2C interface. Declaration public AhtBase(I2cDevice i2cDevice, byte initCommand) Parameters Type Name Description I2cDevice i2cDevice Byte initCommand Fields | Improve this Doc View Source DefaultI2cAddress Address of AHT10/15/20 device (0x38). This address is fix and cannot be changed. This implies that only one device can be attached to a single I2C bus at a time. Declaration public const int DefaultI2cAddress = 56 Field Value Type Description Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetHumidity() Gets the current relative humidity reading from the sensor. Reading the humidity takes between 10 ms and 80 ms. Declaration [Telemetry(\"Humidity\")] public RelativeHumidity GetHumidity() Returns Type Description UnitsNet.RelativeHumidity Relative humidity reading | Improve this Doc View Source GetTemperature() Gets the current temperature reading from the sensor. Reading the temperature takes between 10 ms and 80 ms. Declaration [Telemetry(\"Temperature\")] public Temperature GetTemperature() Returns Type Description UnitsNet.Temperature Temperature reading Implements IDisposable"
  },
  "devices/Iot.Device.Ahtxx.html": {
    "href": "devices/Iot.Device.Ahtxx.html",
    "title": "Namespace Iot.Device.Ahtxx | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ahtxx Classes Aht10 AHT10/15 temperature and humidity sensor binding. Aht20 AHT20 temperature and humidity sensor binding. AhtBase Base class for common functions of the AHT10/15 and AHT20 sensors."
  },
  "devices/Iot.Device.Amg88xx.Amg88xx.html": {
    "href": "devices/Iot.Device.Amg88xx.Amg88xx.html",
    "title": "Class Amg88xx | nanoFramework Documentation",
    "keywords": "Class Amg88xx AMG88xx - family of infrared array sensors Inheritance Object Amg88xx Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Amg88xx Assembly : Iot.Device.Amg88xx.dll Syntax public class Amg88xx : IDisposable Constructors | Improve this Doc View Source Amg88xx(I2cDevice) Initializes a new instance of the Amg88xx binding. Declaration public Amg88xx(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice Fields | Improve this Doc View Source AlternativeI2cAddress Alternative device address (AD_SELECT pin is high, c.f. reference specification, pg. 11) Declaration public const int AlternativeI2cAddress = 105 Field Value Type Description Int32 | Improve this Doc View Source DefaultI2cAddress Standard device address (AD_SELECT pin is low, c.f. reference specification, pg. 11) Declaration public const int DefaultI2cAddress = 104 Field Value Type Description Int32 | Improve this Doc View Source Height Number of sensor pixel array rows Declaration public const int Height = 8 Field Value Type Description Int32 | Improve this Doc View Source PixelCount Total number of pixels. Declaration public const int PixelCount = 64 Field Value Type Description Int32 | Improve this Doc View Source Width Number of sensor pixel array columns Declaration public const int Width = 8 Field Value Type Description Int32 Properties | Improve this Doc View Source FrameRate Get or sets the frame rate of the sensor internal thermal image update. Declaration public FrameRate FrameRate { get; set; } Property Value Type Description FrameRate The frame rate for the pixel update interval (either 1 or 10fps). The default is 10fps. Exceptions Type Condition ArgumentException Thrown when attempting to set a frame rate other than 1 or 10 frames per second | Improve this Doc View Source InterruptHysteresis Gets or sets the pixel temperature interrupt hysteresis. Declaration public Temperature InterruptHysteresis { get; set; } Property Value Type Description UnitsNet.Temperature Temperature hysteresis for lower and upper interrupt triggering. The default is 0. | Improve this Doc View Source InterruptLowerLevel Gets or sets the pixel temperature lower interrupt level. Declaration public Temperature InterruptLowerLevel { get; set; } Property Value Type Description UnitsNet.Temperature Temperature level to trigger an interrupt if the any pixel falls below. The default is 0. | Improve this Doc View Source InterruptMode Gets or sets the pixel temperature interrupt mode. Declaration public InterruptMode InterruptMode { get; set; } Property Value Type Description InterruptMode The interrupt mode, which is either aboslute or differential. The default is Difference . | Improve this Doc View Source InterruptPinEnabled Get or sets whether the interrupt output pin of the sensor is enabled. If enabled, the pin is pulled down if an interrupt is active. Declaration public bool InterruptPinEnabled { get; set; } Property Value Type Description Boolean True, if the INT pin sould be enabled; otherwise false. The default is false.\" | Improve this Doc View Source InterruptUpperLevel Gets or sets the pixel temperature upper interrupt level. Declaration public Temperature InterruptUpperLevel { get; set; } Property Value Type Description UnitsNet.Temperature Temperature level to trigger an interrupt if the any pixel exceeds. The default is 0. | Improve this Doc View Source Item[Point] Gets temperature of the specified pixel froSm the current thermal image. Declaration public Temperature this[Point pt] { get; } Parameters Type Name Description Point pt The x-y-coordinate of the pixel to retrieve. Property Value Type Description UnitsNet.Temperature Temperature of the specified pixel. Exceptions Type Condition ArgumentException x is less than 0, or greater than or equal to Width. ArgumentException y is less than 0, or greater than or equal to Height. | Improve this Doc View Source Item[Int32] Gets raw reading (12-bit two's complement format) of the specified pixel from the current thermal image. Declaration public short this[int n] { get; } Parameters Type Name Description Int32 n The number of the pixel to retrieve. Property Value Type Description Int16 Reading of the specified pixel. Exceptions Type Condition ArgumentException n is less than 0, or greater than or equal to PixelCount. | Improve this Doc View Source OperatingMode Gets or sets the current operating mode Refer to the sensor reference specification for a description of the mode depending sensor bevaviour and the valid mode transistions. Declaration public OperatingMode OperatingMode { get; set; } Property Value Type Description OperatingMode The operating mode of the sensor. The default is Normal. | Improve this Doc View Source SensorTemperature Gets the temperature reading from the internal thermistor. Declaration public Temperature SensorTemperature { get; } Property Value Type Description UnitsNet.Temperature Temperature reading | Improve this Doc View Source TemperatureImage Gets temperature for all pixels from the current thermal image as a two-dimensional array. First index specifies the x-coordinate of the pixel and second index specifies y-coordinate of the pixel. Declaration public Temperature[][] TemperatureImage { get; } Property Value Type Description UnitsNet.Temperature [][] Temperature as a two-dimensional array. | Improve this Doc View Source UseMovingAverageMode Get or sets the state of the moving average mode Important: the reference specification states that the current mode can be read, but it doesn't seem to work at the time being. In this case the property is always read as false . Declaration public bool UseMovingAverageMode { get; set; } Property Value Type Description Boolean True if the moving average should be calculated; otherwise, false. The default is false. Methods | Improve this Doc View Source ClearAllFlags() Clears all flags in the status register. Note: it does not clear the interrupt flags of the individual pixels. Declaration public void ClearAllFlags() | Improve this Doc View Source ClearInterrupt() Clears the interrupt flag in the status register Declaration public void ClearInterrupt() | Improve this Doc View Source ClearTemperatureOverflow() Clears the temperature overflow indication. Declaration public void ClearTemperatureOverflow() | Improve this Doc View Source ClearThermistorOverflow() Clears the temperature overflow indication. Declaration public void ClearThermistorOverflow() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetInterruptFlagTable() Gets the interrupt flags of all pixels. Declaration public bool[][] GetInterruptFlagTable() Returns Type Description Boolean [][] Interrupt flags | Improve this Doc View Source HasInterrupt() Gets the interrupt flag from the status register Declaration public bool HasInterrupt() Returns Type Description Boolean Interrupt flag | Improve this Doc View Source HasTemperatureOverflow() Gets whether any pixel measured a temperature higher than the normal operation range. The event of an overflow does not prevent from continuing reading the sensor. The overflow indication will last even if all pixels are returned to readings within normal range. The indicator is reset using . Declaration public bool HasTemperatureOverflow() Returns Type Description Boolean True, if an overflow occured | Improve this Doc View Source HasThermistorOverflow() Gets the thermistor overflow flag from the status register. The overflow indication will last even if the thermistor temperature returned to normal range. The event of an overflow does not prevent from continuing reading the sensor. The indicator is reset using . Note: the bit is only menthioned in early versions of the reference specification. It is not clear whether this is a specification error or a change in a newer revision of the sensor. Declaration public bool HasThermistorOverflow() Returns Type Description Boolean True, if an overflow occured | Improve this Doc View Source ReadImage() Reads the current image from the sensor Declaration public void ReadImage() | Improve this Doc View Source Reset() Performs an reset of the sensor. The flags and all configuration registers are reset to default values. Declaration public void Reset() | Improve this Doc View Source ResetAllFlags() Performs a reset of all flags (status register, interrupt flag and interrupt table). This method is useful, if using the interrupt mechanism for pixel temperatures. If an upper and lower level has been set along with a hysteresis this reset can clear the interrupt state of all pixels which are within the range between upper and lower level, but still above/below the hystersis level. If this applies to ALL pixels the interrupt flag gets cleared as well. Refer to the binding documentation for more details on interrupt level, hysteresis and flagging. Declaration public void ResetAllFlags() Implements IDisposable"
  },
  "devices/Iot.Device.Amg88xx.FrameRate.html": {
    "href": "devices/Iot.Device.Amg88xx.FrameRate.html",
    "title": "Enum FrameRate | nanoFramework Documentation",
    "keywords": "Enum FrameRate Defines the frame rate per second Namespace : Iot.Device.Amg88xx Assembly : Iot.Device.Amg88xx.dll Syntax public enum FrameRate Fields Name Description Rate10FramesPerSecond 10 frames per second Rate1FramePerSecond 1 frame per second"
  },
  "devices/Iot.Device.Amg88xx.html": {
    "href": "devices/Iot.Device.Amg88xx.html",
    "title": "Namespace Iot.Device.Amg88xx | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Amg88xx Classes Amg88xx AMG88xx - family of infrared array sensors Point Simple Point class. Enums FrameRate Defines the frame rate per second InterruptMode Defines the interrupt modes of the interrupt control register (addr: 0x03) OperatingMode Defines the operating modes. The modes correspond to the setting in the power control register (addr: 0x00)"
  },
  "devices/Iot.Device.Amg88xx.InterruptMode.html": {
    "href": "devices/Iot.Device.Amg88xx.InterruptMode.html",
    "title": "Enum InterruptMode | nanoFramework Documentation",
    "keywords": "Enum InterruptMode Defines the interrupt modes of the interrupt control register (addr: 0x03) Namespace : Iot.Device.Amg88xx Assembly : Iot.Device.Amg88xx.dll Syntax public enum InterruptMode : byte Fields Name Description Absolute An interrupt occures if any pixel exceed the upper or lower limit as given in the interrupt level register Difference The specification does not give any details on this mode"
  },
  "devices/Iot.Device.Amg88xx.OperatingMode.html": {
    "href": "devices/Iot.Device.Amg88xx.OperatingMode.html",
    "title": "Enum OperatingMode | nanoFramework Documentation",
    "keywords": "Enum OperatingMode Defines the operating modes. The modes correspond to the setting in the power control register (addr: 0x00) Namespace : Iot.Device.Amg88xx Assembly : Iot.Device.Amg88xx.dll Syntax public enum OperatingMode : byte Fields Name Description Normal normal mode Sleep sleep mode StandBy10Seconds stand-by mode, 10s intermittence StandBy60Seconds stand-by mode, 60s intermittence"
  },
  "devices/Iot.Device.Amg88xx.Point.html": {
    "href": "devices/Iot.Device.Amg88xx.Point.html",
    "title": "Class Point | nanoFramework Documentation",
    "keywords": "Class Point Simple Point class. Inheritance Object Point Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Amg88xx Assembly : Iot.Device.Amg88xx.dll Syntax public class Point Constructors | Improve this Doc View Source Point(Int32, Int32) Constructor for Point. Declaration public Point(int x, int y) Parameters Type Name Description Int32 x The x-coordinate. Int32 y The y-coordinate. Properties | Improve this Doc View Source X X coordinate Declaration public int X { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Y Y coordinate Declaration public int Y { get; set; } Property Value Type Description Int32"
  },
  "devices/Iot.Device.Apa102.Apa102.html": {
    "href": "devices/Iot.Device.Apa102.Apa102.html",
    "title": "Class Apa102 | nanoFramework Documentation",
    "keywords": "Class Apa102 Driver for APA102. A double line transmission integrated control LED Inheritance Object Apa102 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Apa102 Assembly : Iot.Device.Apa102.dll Syntax public class Apa102 : IDisposable Constructors | Improve this Doc View Source Apa102(SpiDevice, Int32) Initializes a new instance of the APA102 device. Declaration public Apa102(SpiDevice spiDevice, int length) Parameters Type Name Description SpiDevice spiDevice The SPI device used for communication. Int32 length Number of LEDs Properties | Improve this Doc View Source Pixels Colors of LEDs Declaration public SpanColor Pixels { get; } Property Value Type Description SpanColor Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Flush() Update color data to LEDs Declaration public void Flush() Implements IDisposable"
  },
  "devices/Iot.Device.Apa102.html": {
    "href": "devices/Iot.Device.Apa102.html",
    "title": "Namespace Iot.Device.Apa102 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Apa102 Classes Apa102 Driver for APA102. A double line transmission integrated control LED Structs SpanColor Provides a type- and memory-safe representation of a contiguous region of arbitrary"
  },
  "devices/Iot.Device.Apa102.SpanColor.html": {
    "href": "devices/Iot.Device.Apa102.SpanColor.html",
    "title": "Struct SpanColor | nanoFramework Documentation",
    "keywords": "Struct SpanColor Provides a type- and memory-safe representation of a contiguous region of arbitrary Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Iot.Device.Apa102 Assembly : Iot.Device.Apa102.dll Syntax [Serializable] [CLSCompliant(false)] public ref readonly struct SpanColor Constructors | Improve this Doc View Source SpanColor(Color[]) Creates a new System.Span`1 object over the entirety of a specified array. Declaration public SpanColor(Color[] array) Parameters Type Name Description Color [] array The array from which to create the System.Span object. | Improve this Doc View Source SpanColor(Color[], Int32, Int32) Creates a new System.Span`1 object that includes a specified number of elements of an array starting at a specified index. Declaration public SpanColor(Color[] array, int start, int length) Parameters Type Name Description Color [] array The source array. Int32 start The index of the first element to include in the new System.Span Int32 length The number of elements to include in the new System.Span Exceptions Type Condition ArgumentOutOfRangeException array is null, but start or length is non-zero. -or- start is outside the bounds of the array. -or- start and length exceeds the number of elements in the array. Properties | Improve this Doc View Source Empty Returns an empty System.Span object. Declaration public static readonly SpanColor Empty { get; } Property Value Type Description SpanColor | Improve this Doc View Source IsEmpty Returns a value that indicates whether the current System.Span is empty. true if the current span is empty; otherwise, false. Declaration public readonly bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Gets the element at the specified zero-based index. Declaration public readonly Color this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element. Property Value Type Description Color The element at the specified index. | Improve this Doc View Source Length Returns the length of the current span. Declaration public readonly int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source CopyTo(SpanColor) Copies the contents of this System.Span into a destination System.Span. Declaration public readonly void CopyTo(SpanColor destination) Parameters Type Name Description SpanColor destination The destination System.Span object. Exceptions Type Condition ArgumentException destination is shorter than the source System.Span. | Improve this Doc View Source Slice(Int32) Forms a slice out of the current span that begins at a specified index. Declaration public readonly SpanColor Slice(int start) Parameters Type Name Description Int32 start The index at which to begin the slice. Returns Type Description SpanColor A span that consists of all elements of the current span from start to the end of the span. Exceptions Type Condition ArgumentOutOfRangeException start is less than zero or greater than System.Span.Length. | Improve this Doc View Source Slice(Int32, Int32) Forms a slice out of the current span starting at a specified index for a specified length. Declaration public readonly SpanColor Slice(int start, int length) Parameters Type Name Description Int32 start The index at which to begin this slice. Int32 length The desired length for the slice. Returns Type Description SpanColor A span that consists of length elements from the current span starting at start. Exceptions Type Condition ArgumentOutOfRangeException start or start + length is less than zero or greater than System.Span.Length. | Improve this Doc View Source ToArray() Copies the contents of this span into a new array. Declaration public readonly Color[] ToArray() Returns Type Description Color [] An array containing the data in the current span. Operators | Improve this Doc View Source Implicit(Color[] to SpanColor) Declaration public static implicit operator SpanColor(Color[] array) Parameters Type Name Description Color [] array Returns Type Description SpanColor"
  },
  "devices/Iot.Device.At24C128C.At24C128C.html": {
    "href": "devices/Iot.Device.At24C128C.At24C128C.html",
    "title": "Class At24C128C | nanoFramework Documentation",
    "keywords": "Class At24C128C At24C128C - I2C EEPROM read/write Inheritance Object At24C128C Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.At24C128C Assembly : Iot.Device.At24C128C.dll Syntax public class At24C128C Constructors | Improve this Doc View Source At24C128C(Int32, Int32) Creates a driver for the AT24C128C. Declaration public At24C128C(int address, int i2cBus) Parameters Type Name Description Int32 address The I2C address of the device. Int32 i2cBus The I2C bus where the device is connected to. Methods | Improve this Doc View Source Read(UInt16, Int32) Read a specific address. Declaration public byte[] Read(ushort memoryAddress, int numOfBytes) Parameters Type Name Description UInt16 memoryAddress The address to read. Int32 numOfBytes The number of bytes to read. Returns Type Description Byte [] The read elements. | Improve this Doc View Source Write(UInt16, Byte[]) Write at a specific address. Declaration public void Write(ushort memoryAddress, byte[] messageToSent) Parameters Type Name Description UInt16 memoryAddress The address to write. Byte [] messageToSent The byte buffer to write."
  },
  "devices/Iot.Device.At24C128C.html": {
    "href": "devices/Iot.Device.At24C128C.html",
    "title": "Namespace Iot.Device.At24C128C | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.At24C128C Classes At24C128C At24C128C - I2C EEPROM read/write"
  },
  "devices/Iot.Device.Axp192.AdcFrequency.html": {
    "href": "devices/Iot.Device.Axp192.AdcFrequency.html",
    "title": "Enum AdcFrequency | nanoFramework Documentation",
    "keywords": "Enum AdcFrequency The ADS frequency. Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum AdcFrequency Fields Name Description Frequency100Hz 100 Hz frequency Frequency200Hz 200 Hz frequency Frequency25Hz 25 Hz frequency Frequency50Hz 50 Hz frequency"
  },
  "devices/Iot.Device.Axp192.AdcPinCurrent.html": {
    "href": "devices/Iot.Device.Axp192.AdcPinCurrent.html",
    "title": "Enum AdcPinCurrent | nanoFramework Documentation",
    "keywords": "Enum AdcPinCurrent ADC Pin output current setting Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum AdcPinCurrent Fields Name Description MicroAmpeers20 20 uA MicroAmperes40 40 uA MicroAmperes60 60 uA MicroAmperes80 80 uA"
  },
  "devices/Iot.Device.Axp192.AdcPinCurrentSetting.html": {
    "href": "devices/Iot.Device.Axp192.AdcPinCurrentSetting.html",
    "title": "Enum AdcPinCurrentSetting | nanoFramework Documentation",
    "keywords": "Enum AdcPinCurrentSetting ADC Pin Current Setting /// Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum AdcPinCurrentSetting Fields Name Description AlwaysOn Off Off OnCharge When on charge SavingPower When sampling"
  },
  "devices/Iot.Device.Axp192.AdcPinEnabled.html": {
    "href": "devices/Iot.Device.Axp192.AdcPinEnabled.html",
    "title": "Enum AdcPinEnabled | nanoFramework Documentation",
    "keywords": "Enum AdcPinEnabled ADC Pin enabled Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax [Flags] public enum AdcPinEnabled Fields Name Description AcInCurrent AC in Current AcInVoltage AC in Voltage All All ApsVoltage APS Voltage BatteryCurrent Battery Current BatteryVoltage Battery Voltage None None TsPin TS Pin VbusCurrent Vbus Current VbusVoltage Vbus Voltage"
  },
  "devices/Iot.Device.Axp192.Axp192.html": {
    "href": "devices/Iot.Device.Axp192.Axp192.html",
    "title": "Class Axp192 | nanoFramework Documentation",
    "keywords": "Class Axp192 Inheritance Object Axp192 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public class Axp192 Constructors | Improve this Doc View Source Axp192(I2cDevice) Declaration public Axp192(I2cDevice i2c) Parameters Type Name Description I2cDevice i2c Fields | Improve this Doc View Source I2cDefaultAddress Declaration public const int I2cDefaultAddress = 52 Field Value Type Description Int32 Properties | Improve this Doc View Source AdcFrequency Sets or gets the ADC frequency Declaration public AdcFrequency AdcFrequency { get; set; } Property Value Type Description AdcFrequency | Improve this Doc View Source AdcPinCurrent Sets or gets the ADC Pin output Current Declaration public AdcPinCurrent AdcPinCurrent { get; set; } Property Value Type Description AdcPinCurrent | Improve this Doc View Source AdcPinCurrentSetting Sets or gets ADC pin current settings. Declaration public AdcPinCurrentSetting AdcPinCurrentSetting { get; set; } Property Value Type Description AdcPinCurrentSetting | Improve this Doc View Source AdcPinEnabled Gets or sets the ADC pin enabled. Declaration public AdcPinEnabled AdcPinEnabled { get; set; } Property Value Type Description AdcPinEnabled | Improve this Doc View Source BatteryTemperatureMonitoring Sets or gets ADC battery temperature monitoring function. Declaration public bool BatteryTemperatureMonitoring { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ChargingCurrent Gets or sets the charging current Declaration public ChargingCurrent ChargingCurrent { get; set; } Property Value Type Description ChargingCurrent Remarks Not recommend to set charge current > 100mA, since Battery is only 80mAh. more then 1C charge-rate may shorten battery life-span. | Improve this Doc View Source ChargingStopThreshold Charging threshold when battery should stop charging Declaration public ChargingStopThreshold ChargingStopThreshold { get; set; } Property Value Type Description ChargingStopThreshold | Improve this Doc View Source ChargingVoltage Gets or sets the charging voltage Declaration public ChargingVoltage ChargingVoltage { get; set; } Property Value Type Description ChargingVoltage | Improve this Doc View Source LdoDcPinsEnabled Enable the various LDO and DC pins. Declaration public LdoDcPinsEnabled LdoDcPinsEnabled { get; set; } Property Value Type Description LdoDcPinsEnabled | Improve this Doc View Source PinOutputVoltage Sets or gets the global pin output voltage Declaration public PinOutputVoltage PinOutputVoltage { get; set; } Property Value Type Description PinOutputVoltage | Improve this Doc View Source VoffVoltage Sets or gets power off voltage. Declaration public VoffVoltage VoffVoltage { get; set; } Property Value Type Description VoffVoltage Methods | Improve this Doc View Source ClearAllIrq() Clears all Irq. Declaration public void ClearAllIrq() | Improve this Doc View Source ClearCoulombCounter() Clear Coulomb counter Declaration public void ClearCoulombCounter() | Improve this Doc View Source DisableAllIRQ() Disable all Irq Declaration public void DisableAllIRQ() | Improve this Doc View Source DisableCoulombCounter() Disable Coulomb counter Declaration public void DisableCoulombCounter() | Improve this Doc View Source EnableButtonPressed(ButtonPressed) Enable the button to be pressed and raise IRQ events Declaration public void EnableButtonPressed(ButtonPressed button) Parameters Type Name Description ButtonPressed button | Improve this Doc View Source EnableCoulombCounter() Enable Coulomb counter Declaration public void EnableCoulombCounter() | Improve this Doc View Source EnableDCDC1(Boolean) Sets the state of DC-DC1. Declaration public void EnableDCDC1(bool State) Parameters Type Name Description Boolean State True to enable DC-DC1. | Improve this Doc View Source EnableDCDC3(Boolean) Sets the state of DC-DC3. Declaration public void EnableDCDC3(bool State) Parameters Type Name Description Boolean State True to enable DC-DC3. | Improve this Doc View Source EnableLDO2(Boolean) Sets the state of LDO2. Declaration public void EnableLDO2(bool State) Parameters Type Name Description Boolean State True for on/high/1, false for off/low/O Remarks On M5Stack, can turn LCD Backlight OFF for power saving | Improve this Doc View Source EnableLDO3(Boolean) Sets the state of LDO3. Declaration public void EnableLDO3(bool State) Parameters Type Name Description Boolean State True to enable LDO3. | Improve this Doc View Source GetApsVoltage() Gets the APS voltage. Declaration public ElectricPotential GetApsVoltage() Returns Type Description UnitsNet.ElectricPotential The APS voltage. | Improve this Doc View Source GetBatteryChargeCurrent() Gets the battery charge Current. Declaration public ElectricCurrent GetBatteryChargeCurrent() Returns Type Description UnitsNet.ElectricCurrent The battery charge Current. | Improve this Doc View Source GetBatteryChargingStatus() Gets battery charging status. Declaration public BatteryStatus GetBatteryChargingStatus() Returns Type Description BatteryStatus The battery status | Improve this Doc View Source GetBatteryDischargeCurrent() Gets the battery discharge current. Declaration public ElectricCurrent GetBatteryDischargeCurrent() Returns Type Description UnitsNet.ElectricCurrent The battery discharge current. | Improve this Doc View Source GetBatteryInstantaneousPower() Declaration public Power GetBatteryInstantaneousPower() Returns Type Description UnitsNet.Power | Improve this Doc View Source GetBatteryVoltage() Gets the battery voltage. Declaration public ElectricPotential GetBatteryVoltage() Returns Type Description UnitsNet.ElectricPotential The battery voltage | Improve this Doc View Source GetButtonStatus() Get button status Declaration public ButtonPressed GetButtonStatus() Returns Type Description ButtonPressed | Improve this Doc View Source GetCoulomb() Gets Coulomb Declaration public double GetCoulomb() Returns Type Description Double the mA per hour | Improve this Doc View Source GetInputCurrent() Gets the input current. Declaration public ElectricCurrent GetInputCurrent() Returns Type Description UnitsNet.ElectricCurrent The input current. | Improve this Doc View Source GetInputPowerStatus() Gets the power status. Declaration public PowerStatus GetInputPowerStatus() Returns Type Description PowerStatus The power status. | Improve this Doc View Source GetInputVoltage() Gets the input voltage. Declaration public ElectricPotential GetInputVoltage() Returns Type Description UnitsNet.ElectricPotential The input voltage | Improve this Doc View Source GetInternalTemperature() Declaration public Temperature GetInternalTemperature() Returns Type Description UnitsNet.Temperature | Improve this Doc View Source GetUsbCurrentInput() Gets the USB current. Declaration public ElectricCurrent GetUsbCurrentInput() Returns Type Description UnitsNet.ElectricCurrent The USB current | Improve this Doc View Source GetUsbVoltageInput() Gets the USB voltage input. Declaration public ElectricPotential GetUsbVoltageInput() Returns Type Description UnitsNet.ElectricPotential The USB voltage input. | Improve this Doc View Source IsBatteryConnected() Checks if the battery is connected. Declaration public bool IsBatteryConnected() Returns Type Description Boolean True if connected. | Improve this Doc View Source IsTemperatureWarning() Is the temperature in warning. Declaration public bool IsTemperatureWarning() Returns Type Description Boolean True if internal temperature too high. | Improve this Doc View Source PowerOff() Cut all power, except for LDO1 (RTC) Declaration public void PowerOff() | Improve this Doc View Source Read6BytesStorage(SpanByte) Reads the 6 bytes from the storage. AXP192 have a 6 byte storage, when the power is still valid, the data will not be lost. Declaration public void Read6BytesStorage(SpanByte buffer) Parameters Type Name Description SpanByte buffer A 6 bytes buffer. | Improve this Doc View Source SetAdcState(Boolean) Sets the ADC state. Declaration public void SetAdcState(bool state) Parameters Type Name Description Boolean state True to enable, false to disable. | Improve this Doc View Source SetBackupBatteryChargingControl(Boolean, BackupBatteryCharingVoltage, BackupBatteryChargingCurrent) Sets the backup battery charging control Declaration public void SetBackupBatteryChargingControl(bool enabled, BackupBatteryCharingVoltage voltage, BackupBatteryChargingCurrent current) Parameters Type Name Description Boolean enabled BackupBatteryCharingVoltage voltage BackupBatteryChargingCurrent current | Improve this Doc View Source SetBatteryHighTemperatureThreshold(ElectricPotential) Sets the high temperature threshold for the battery Declaration public void SetBatteryHighTemperatureThreshold(ElectricPotential potential) Parameters Type Name Description UnitsNet.ElectricPotential potential From 0 to 3.264V. Anything higher will be caped to the maximum. | Improve this Doc View Source SetButtonBehavior(LongPressTiming, ShortPressTiming, Boolean, SignalDelayAfterPowerUp, ShutdownTiming) Sets the button default behavior. Declaration public void SetButtonBehavior(LongPressTiming longPress, ShortPressTiming shortPress, bool automaticShutdownAtOvertime, SignalDelayAfterPowerUp signalDelay, ShutdownTiming shutdownTiming) Parameters Type Name Description LongPressTiming longPress The long press timing. ShortPressTiming shortPress The short press timing. Boolean automaticShutdownAtOvertime True if automatic shutdown should be processed when over shutdown time. SignalDelayAfterPowerUp signalDelay The PWROK signal delay after power start-up. ShutdownTiming shutdownTiming The shutdown timing. | Improve this Doc View Source SetChargingFunctions(Boolean, ChargingVoltage, ChargingCurrent, ChargingStopThreshold) Set the charging functions Declaration public void SetChargingFunctions(bool includeExternal, ChargingVoltage chargingVoltage, ChargingCurrent chargingCurrent, ChargingStopThreshold stopThreshold) Parameters Type Name Description Boolean includeExternal True to include the external. ChargingVoltage chargingVoltage Charging voltage. ChargingCurrent chargingCurrent Charging current. ChargingStopThreshold stopThreshold Stop threshold. | Improve this Doc View Source SetGPIO0(Gpio0Behavior, Byte) Sets GPIO0 state Declaration public void SetGPIO0(Gpio0Behavior state, byte currentSink) Parameters Type Name Description Gpio0Behavior state The GPIO0 behavior Byte currentSink The current sink from 0 to 31 mA. | Improve this Doc View Source SetLDO2Output(Byte) Sets LDO2 output Declaration public void SetLDO2Output(byte output) Parameters Type Name Description Byte output From 0 (dark) to 12 representing 1.8 to 3.3V | Improve this Doc View Source SetLDO3Output(Byte) Sets LDO3 output Declaration public void SetLDO3Output(byte output) Parameters Type Name Description Byte output From 0 (dark) to 12 representing 1.8 to 3.3V | Improve this Doc View Source SetShutdownBatteryDetectionControl(Boolean, Boolean, ShutdownBatteryPinFunction, Boolean, ShutdownBatteryTiming) Sets shutdown battery detection control. Declaration public void SetShutdownBatteryDetectionControl(bool turnOffAxp192, bool enabled, ShutdownBatteryPinFunction function, bool pinControl, ShutdownBatteryTiming timing) Parameters Type Name Description Boolean turnOffAxp192 True to shutdown the AXP192. Boolean enabled True to enable the control. ShutdownBatteryPinFunction function The pin function. Boolean pinControl True to enable the pin function. ShutdownBatteryTiming timing Delay after AXP192 lowered to higher. | Improve this Doc View Source SetSleep() Sets the sleep mode. Declaration public void SetSleep() | Improve this Doc View Source SetVbusSettings(Boolean, Boolean, VholdVoltage, Boolean, VbusCurrentLimit) Sets the VBUS settings Declaration public void SetVbusSettings(bool vbusIpsOut, bool vbusLimit, VholdVoltage vholdVoltage, bool currentLimitEnable, VbusCurrentLimit vbusCurrent) Parameters Type Name Description Boolean vbusIpsOut The VBUS-IPSOUT path selects the control signal when VBUS is available. Boolean vbusLimit True to limit VBUS VHOLD control. VholdVoltage vholdVoltage VHOLD Voltage. Boolean currentLimitEnable True to limit VBUS current. VbusCurrentLimit vbusCurrent VBUS Current limit. | Improve this Doc View Source StopCoulombCounter() Stops Coulomb counter Declaration public void StopCoulombCounter() | Improve this Doc View Source Write6BytesStorage(SpanByte) Stores data in the storage. 6 bytes are available. AXP192 have a 6 byte storage, when the power is still valid, the data will not be lost. Declaration public void Write6BytesStorage(SpanByte buffer) Parameters Type Name Description SpanByte buffer A 6 bytes buffer"
  },
  "devices/Iot.Device.Axp192.BackupBatteryChargingCurrent.html": {
    "href": "devices/Iot.Device.Axp192.BackupBatteryChargingCurrent.html",
    "title": "Enum BackupBatteryChargingCurrent | nanoFramework Documentation",
    "keywords": "Enum BackupBatteryChargingCurrent Backup battery charging current. Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum BackupBatteryChargingCurrent Fields Name Description MicroAmperes100 100 uA MicroAmperes200 200 uA MicroAmperes400 400 uA MicroAmperes50 50 uA"
  },
  "devices/Iot.Device.Axp192.BackupBatteryCharingVoltage.html": {
    "href": "devices/Iot.Device.Axp192.BackupBatteryCharingVoltage.html",
    "title": "Enum BackupBatteryCharingVoltage | nanoFramework Documentation",
    "keywords": "Enum BackupBatteryCharingVoltage Backup battery charing voltage Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum BackupBatteryCharingVoltage Fields Name Description V2_5 2.5 V V2_9 2.9 V (doc says 3.0V) V3_0 3.0 V V3_1 3.1 V"
  },
  "devices/Iot.Device.Axp192.BatteryStatus.html": {
    "href": "devices/Iot.Device.Axp192.BatteryStatus.html",
    "title": "Enum BatteryStatus | nanoFramework Documentation",
    "keywords": "Enum BatteryStatus The battery status Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax [Flags] public enum BatteryStatus Fields Name Description BatteryActivationMode Battery Activation Mode BatteryConnected Battery Connected Charging Charging ChargingCurrentLessThanExpected Charging CurrentLess Than Expected ModeB Mode B, when not present, the Mode A (sleep) is activated Overwinered Overwinered"
  },
  "devices/Iot.Device.Axp192.ButtonPressed.html": {
    "href": "devices/Iot.Device.Axp192.ButtonPressed.html",
    "title": "Enum ButtonPressed | nanoFramework Documentation",
    "keywords": "Enum ButtonPressed Button pressed status Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax [Flags] public enum ButtonPressed Fields Name Description LongPressed Long press more than setup time NotPressed Button not presses ShortPressed short press"
  },
  "devices/Iot.Device.Axp192.ChargingCurrent.html": {
    "href": "devices/Iot.Device.Axp192.ChargingCurrent.html",
    "title": "Enum ChargingCurrent | nanoFramework Documentation",
    "keywords": "Enum ChargingCurrent The charging current Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum ChargingCurrent Fields Name Description Current1000mA Current 1000 mA Current100mA Current 100 mA Current1080mA Current 1080 mA Current1160mA Current 1160 mA Current1240mA Current 1240 mA Current1320mA Current 1320 mA Current190mA Current 190 mA Current280mA Current 280 mA Current360mA Current 360 mA Current450mA Current 450 mA Current550mA Current 550 mA Current630mA Current 630 mA Current700mA Current 700 mA Current780mA Current 780 mA Current880mA Current 880 mA Current960mA Current 960 mA"
  },
  "devices/Iot.Device.Axp192.ChargingStopThreshold.html": {
    "href": "devices/Iot.Device.Axp192.ChargingStopThreshold.html",
    "title": "Enum ChargingStopThreshold | nanoFramework Documentation",
    "keywords": "Enum ChargingStopThreshold Charging threshold when battery should stop charging Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum ChargingStopThreshold Fields Name Description Percent10 End charging when the charging current is less than the 10% setting Percent15 End charging when the charging current is less than the 15% setting"
  },
  "devices/Iot.Device.Axp192.ChargingVoltage.html": {
    "href": "devices/Iot.Device.Axp192.ChargingVoltage.html",
    "title": "Enum ChargingVoltage | nanoFramework Documentation",
    "keywords": "Enum ChargingVoltage Charging voltage Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum ChargingVoltage Fields Name Description V4_1 4.1 volt V4_15 4.15 volt V4_2 4.2 volt V4_36 4.36 volt"
  },
  "devices/Iot.Device.Axp192.Gpio0Behavior.html": {
    "href": "devices/Iot.Device.Axp192.Gpio0Behavior.html",
    "title": "Enum Gpio0Behavior | nanoFramework Documentation",
    "keywords": "Enum Gpio0Behavior GPIO0 behavior Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum Gpio0Behavior Fields Name Description AdcInput ADC Input CurrentAbsorption Current Absorption Floating Floating LowNoiseLDO Low Noise LDO LowOutput Low Output MnosLeakOpenOutput NMOS Leak Open Output UniversalInputFunction Universal Input Function"
  },
  "devices/Iot.Device.Axp192.html": {
    "href": "devices/Iot.Device.Axp192.html",
    "title": "Namespace Iot.Device.Axp192 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Axp192 Classes Axp192 Enums AdcFrequency The ADS frequency. AdcPinCurrent ADC Pin output current setting AdcPinCurrentSetting ADC Pin Current Setting /// AdcPinEnabled ADC Pin enabled BackupBatteryChargingCurrent Backup battery charging current. BackupBatteryCharingVoltage Backup battery charing voltage BatteryStatus The battery status ButtonPressed Button pressed status ChargingCurrent The charging current ChargingStopThreshold Charging threshold when battery should stop charging ChargingVoltage Charging voltage Gpio0Behavior GPIO0 behavior LdoDcPinsEnabled LDO and DC pin enabled LongPressTiming Long press timing PinOutputVoltage Global pin output voltage PowerStatus Power Status ShortPressTiming Short press timing ShutdownBatteryPinFunction Shutdown battery pin function ShutdownBatteryTiming Shutdown battery timing. ShutdownTiming Shutdown timing SignalDelayAfterPowerUp PWROK signal delay after power start-up VbusCurrentLimit VBUS current limit control VholdVoltage VHOLD voltage VoffVoltage Cut off voltage"
  },
  "devices/Iot.Device.Axp192.LdoDcPinsEnabled.html": {
    "href": "devices/Iot.Device.Axp192.LdoDcPinsEnabled.html",
    "title": "Enum LdoDcPinsEnabled | nanoFramework Documentation",
    "keywords": "Enum LdoDcPinsEnabled LDO and DC pin enabled Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax [Flags] public enum LdoDcPinsEnabled Fields Name Description All All DcDc1 DC-DC1 DcDc3 DC-DC3 Ldo2 LDO2 Ldo3 LDO3 None None"
  },
  "devices/Iot.Device.Axp192.LongPressTiming.html": {
    "href": "devices/Iot.Device.Axp192.LongPressTiming.html",
    "title": "Enum LongPressTiming | nanoFramework Documentation",
    "keywords": "Enum LongPressTiming Long press timing Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum LongPressTiming Fields Name Description S1 1 second S1_5 1.5 seconds S2 2 seconds S2_5 1.5 seconds"
  },
  "devices/Iot.Device.Axp192.PinOutputVoltage.html": {
    "href": "devices/Iot.Device.Axp192.PinOutputVoltage.html",
    "title": "Enum PinOutputVoltage | nanoFramework Documentation",
    "keywords": "Enum PinOutputVoltage Global pin output voltage Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum PinOutputVoltage Fields Name Description V1_8 1.8 V V1_9 1.9 V V2_0 2.0 V V2_1 2.1 V V2_2 2.2 V V2_3 2.3 V V2_4 2.4 V V2_5 2.5 V V2_6 2?6 V V2_7 2.7 V V2_8 2.8 V V2_9 2.9 V V3_0 3.0 V V3_1 3.1 V V3_2 3.2 V V3_3 3.3 V"
  },
  "devices/Iot.Device.Axp192.PowerStatus.html": {
    "href": "devices/Iot.Device.Axp192.PowerStatus.html",
    "title": "Enum PowerStatus | nanoFramework Documentation",
    "keywords": "Enum PowerStatus Power Status Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax [Flags] public enum PowerStatus Fields Name Description AcinAvailable Acin Available AcinExists Acin Exists AcinVbusShorted Acin Vbus Shorted AcinVbusStartupSource Acin Vbus Startup Source BatteryCharged Battery Charged VbusAvailable Vbus Available VbusLargeVhold Vbus Large Vhold VbuxExists Vbux Exists"
  },
  "devices/Iot.Device.Axp192.ShortPressTiming.html": {
    "href": "devices/Iot.Device.Axp192.ShortPressTiming.html",
    "title": "Enum ShortPressTiming | nanoFramework Documentation",
    "keywords": "Enum ShortPressTiming Short press timing Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum ShortPressTiming Fields Name Description Ms128 128 milliseconds Ms512 512 milliseconds S1 1 second S2 2 seconds"
  },
  "devices/Iot.Device.Axp192.ShutdownBatteryPinFunction.html": {
    "href": "devices/Iot.Device.Axp192.ShutdownBatteryPinFunction.html",
    "title": "Enum ShutdownBatteryPinFunction | nanoFramework Documentation",
    "keywords": "Enum ShutdownBatteryPinFunction Shutdown battery pin function Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum ShutdownBatteryPinFunction Fields Name Description Flashing1Hz 25% 1Hz flashing. Flashing4Hz 25% 4Hz flashing HighResistance High resistance. OutpuLow Output low"
  },
  "devices/Iot.Device.Axp192.ShutdownBatteryTiming.html": {
    "href": "devices/Iot.Device.Axp192.ShutdownBatteryTiming.html",
    "title": "Enum ShutdownBatteryTiming | nanoFramework Documentation",
    "keywords": "Enum ShutdownBatteryTiming Shutdown battery timing. Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum ShutdownBatteryTiming Fields Name Description S0_5 0.5 seconds S1 1 seconds S2 2 seconds S3 3 seconds"
  },
  "devices/Iot.Device.Axp192.ShutdownTiming.html": {
    "href": "devices/Iot.Device.Axp192.ShutdownTiming.html",
    "title": "Enum ShutdownTiming | nanoFramework Documentation",
    "keywords": "Enum ShutdownTiming Shutdown timing Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum ShutdownTiming Fields Name Description S10 10 seconds S4 4 seconds S6 6 seconds S8 8 seconds"
  },
  "devices/Iot.Device.Axp192.SignalDelayAfterPowerUp.html": {
    "href": "devices/Iot.Device.Axp192.SignalDelayAfterPowerUp.html",
    "title": "Enum SignalDelayAfterPowerUp | nanoFramework Documentation",
    "keywords": "Enum SignalDelayAfterPowerUp PWROK signal delay after power start-up Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum SignalDelayAfterPowerUp Fields Name Description Ms32 32 milliseconds Ms64 64 milliseconds"
  },
  "devices/Iot.Device.Axp192.VbusCurrentLimit.html": {
    "href": "devices/Iot.Device.Axp192.VbusCurrentLimit.html",
    "title": "Enum VbusCurrentLimit | nanoFramework Documentation",
    "keywords": "Enum VbusCurrentLimit VBUS current limit control Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum VbusCurrentLimit Fields Name Description MilliAmper100 100 mA MilliAmper500 500 mA"
  },
  "devices/Iot.Device.Axp192.VholdVoltage.html": {
    "href": "devices/Iot.Device.Axp192.VholdVoltage.html",
    "title": "Enum VholdVoltage | nanoFramework Documentation",
    "keywords": "Enum VholdVoltage VHOLD voltage Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum VholdVoltage Fields Name Description V4_0 4.0 V V4_1 4.1 V V4_2 4.2 V V4_3 4.3 V V4_4 4.4 V V4_5 4.5 V V4_6 4.6 V V4_7 4.7 V"
  },
  "devices/Iot.Device.Axp192.VoffVoltage.html": {
    "href": "devices/Iot.Device.Axp192.VoffVoltage.html",
    "title": "Enum VoffVoltage | nanoFramework Documentation",
    "keywords": "Enum VoffVoltage Cut off voltage Namespace : Iot.Device.Axp192 Assembly : Iot.Device.Axp192.dll Syntax public enum VoffVoltage Fields Name Description V2_6 2.6 Volt V2_7 2.7 Volt V2_8 2.8 Volt V2_9 2.9 Volt V3_0 3.0 Volt V3_1 3.1 Volt V3_2 3.2 Volt V3_3 3.3 Volt"
  },
  "devices/Iot.Device.Bh1745.AdcGain.html": {
    "href": "devices/Iot.Device.Bh1745.AdcGain.html",
    "title": "Enum AdcGain | nanoFramework Documentation",
    "keywords": "Enum AdcGain Represents the available ADC gain options for the Bh1745. Namespace : Iot.Device.Bh1745 Assembly : Iot.Device.Bh1745.dll Syntax public enum AdcGain Fields Name Description X1 Gain multiplier of 1. X16 Gain multiplier of 16. X2 Gain multiplier of 2."
  },
  "devices/Iot.Device.Bh1745.Bh1745.html": {
    "href": "devices/Iot.Device.Bh1745.Bh1745.html",
    "title": "Class Bh1745 | nanoFramework Documentation",
    "keywords": "Class Bh1745 Digital color sensor Bh1745. Inheritance Object Bh1745 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bh1745 Assembly : Iot.Device.Bh1745.dll Syntax [Interface(\"Digital color sensor Bh1745.\")] public class Bh1745 : IDisposable Constructors | Improve this Doc View Source Bh1745(I2cDevice) Digital color sensor Bh1745. Declaration public Bh1745(I2cDevice device) Parameters Type Name Description I2cDevice device The used I2c communication device. Fields | Improve this Doc View Source DefaultI2cAddress The primary I2c address of the BH1745 Declaration public const byte DefaultI2cAddress = 56 Field Value Type Description Byte | Improve this Doc View Source SecondaryI2cAddress The secondary I2c address of the BH1745 Declaration public const byte SecondaryI2cAddress = 57 Field Value Type Description Byte Properties | Improve this Doc View Source AdcGain Gets or sets the adc gain of the sensor. Declaration [Property] public AdcGain AdcGain { get; set; } Property Value Type Description AdcGain Exceptions Type Condition ArgumentOutOfRangeException Thrown if invalid AdcGain is set. | Improve this Doc View Source ChannelCompensationMultipliers Gets or sets the channel compensation multipliers which are used to compensate the measurements. Declaration public ChannelCompensationMultipliers ChannelCompensationMultipliers { get; set; } Property Value Type Description ChannelCompensationMultipliers | Improve this Doc View Source HigherInterruptThreshold Gets or sets the higher interrupt threshold. Declaration public ushort HigherInterruptThreshold { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source InterruptIsEnabled Gets or sets whether the interrupt pin is enabled. Declaration public bool InterruptIsEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source InterruptPersistence Gets or sets the persistence function of the interrupt. Declaration public InterruptPersistence InterruptPersistence { get; set; } Property Value Type Description InterruptPersistence | Improve this Doc View Source InterruptReset Gets or sets the state of the interrupt pin. Declaration public InterruptStatus InterruptReset { get; set; } Property Value Type Description InterruptStatus Exceptions Type Condition ArgumentOutOfRangeException Thrown if invalid InterruptStatus is set. | Improve this Doc View Source InterruptSignalIsActive Gets whether the interrupt signal is active. Declaration public bool InterruptSignalIsActive { get; } Property Value Type Description Boolean | Improve this Doc View Source InterruptSource Gets or sets the source channel of the interrupt. Declaration public InterruptSource InterruptSource { get; set; } Property Value Type Description InterruptSource | Improve this Doc View Source LatchBehavior Gets or sets how the interrupt pin latches. Declaration public LatchBehavior LatchBehavior { get; set; } Property Value Type Description LatchBehavior Exceptions Type Condition ArgumentOutOfRangeException Thrown if invalid LatchBehavior is set. | Improve this Doc View Source LowerInterruptThreshold Gets or sets the lower interrupt threshold. Declaration public ushort LowerInterruptThreshold { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source MeasurementIsActive Gets or sets whether the measurement is active. Declaration public bool MeasurementIsActive { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MeasurementTime Gets or sets the currently set measurement time. Declaration [Property] public MeasurementTime MeasurementTime { get; set; } Property Value Type Description MeasurementTime Exceptions Type Condition ArgumentOutOfRangeException Thrown if invalid MeasurementTime is set. Methods | Improve this Doc View Source Dispose() Disposes the Bh1745 resources. Declaration public void Dispose() | Improve this Doc View Source GetCompensatedColor() Gets the compensated color reading from the sensor. Declaration [Telemetry] public Color GetCompensatedColor() Returns Type Description Color | Improve this Doc View Source ReadBlueDataRegister() Reads the blue data register of the sensor. Declaration public ushort ReadBlueDataRegister() Returns Type Description UInt16 | Improve this Doc View Source ReadClearDataRegister() Reads the clear data register of the sensor. Declaration public ushort ReadClearDataRegister() Returns Type Description UInt16 | Improve this Doc View Source ReadGreenDataRegister() Reads the green data register of the sensor. Declaration public ushort ReadGreenDataRegister() Returns Type Description UInt16 | Improve this Doc View Source ReadMeasurementIsValid() Reads whether the last measurement is valid. Declaration public bool ReadMeasurementIsValid() Returns Type Description Boolean | Improve this Doc View Source ReadRedDataRegister() Reads the red data register of the sensor. Declaration public ushort ReadRedDataRegister() Returns Type Description UInt16 | Improve this Doc View Source Reset() Resets the device to the default configuration. On reset the sensor goes to power down mode. Declaration [Command] public void Reset() Implements IDisposable Extension Methods Bh1745Extensions.MeasurementTimeAsTimeSpan(Bh1745)"
  },
  "devices/Iot.Device.Bh1745.Bh1745Extensions.html": {
    "href": "devices/Iot.Device.Bh1745.Bh1745Extensions.html",
    "title": "Class Bh1745Extensions | nanoFramework Documentation",
    "keywords": "Class Bh1745Extensions Extension methods for the Bh1745 sensor. Inheritance Object Bh1745Extensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bh1745 Assembly : Iot.Device.Bh1745.dll Syntax public static class Bh1745Extensions Methods | Improve this Doc View Source MeasurementTimeAsTimeSpan(Bh1745) Converts the enum Measurement time to a TimeSpan. Declaration public static TimeSpan MeasurementTimeAsTimeSpan(this Bh1745 bh1745) Parameters Type Name Description Bh1745 bh1745 The BH1745 device. Returns Type Description TimeSpan Exceptions Type Condition ArgumentOutOfRangeException Thrown when a not supported MeasurementTime is used. | Improve this Doc View Source ToMilliseconds(MeasurementTime) Converts the enum Measurement time to an integer representing the measurement time in ms. Declaration public static int ToMilliseconds(this MeasurementTime time) Parameters Type Name Description MeasurementTime time The MeasurementTime. Returns Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException Thrown when a not supported MeasurementTime is used."
  },
  "devices/Iot.Device.Bh1745.ChannelCompensationMultipliers.html": {
    "href": "devices/Iot.Device.Bh1745.ChannelCompensationMultipliers.html",
    "title": "Class ChannelCompensationMultipliers | nanoFramework Documentation",
    "keywords": "Class ChannelCompensationMultipliers Channel compensation multipliers used to compensate the 4 color channels of the Bh1745. Inheritance Object ChannelCompensationMultipliers Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bh1745 Assembly : Iot.Device.Bh1745.dll Syntax public class ChannelCompensationMultipliers Constructors | Improve this Doc View Source ChannelCompensationMultipliers(Double, Double, Double, Double) Constructor for ChannelCompensationMultipliers Declaration public ChannelCompensationMultipliers(double red, double green, double blue, double clear) Parameters Type Name Description Double red Double green Double blue Double clear Properties | Improve this Doc View Source Blue Blue Declaration public double Blue { get; } Property Value Type Description Double | Improve this Doc View Source Clear Clear Declaration public double Clear { get; } Property Value Type Description Double | Improve this Doc View Source Green Green Declaration public double Green { get; } Property Value Type Description Double | Improve this Doc View Source Red Red Declaration public double Red { get; } Property Value Type Description Double"
  },
  "devices/Iot.Device.Bh1745.html": {
    "href": "devices/Iot.Device.Bh1745.html",
    "title": "Namespace Iot.Device.Bh1745 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Bh1745 Classes Bh1745 Digital color sensor Bh1745. Bh1745Extensions Extension methods for the Bh1745 sensor. ChannelCompensationMultipliers Channel compensation multipliers used to compensate the 4 color channels of the Bh1745. Enums AdcGain Represents the available ADC gain options for the Bh1745. InterruptPersistence Represents the configuration for the interrupt persistence functionality of the Bh1745. InterruptSource Represents the interrupt source which is one of the 4 color channels of the Bh1745. InterruptStatus Represents the state of the interrupt pin of the Bh1745. LatchBehavior Represents the latch behavior of the interrupt pin of the Bh1745. MeasurementTime Represents the available measurement times for the Bh1745."
  },
  "devices/Iot.Device.Bh1745.InterruptPersistence.html": {
    "href": "devices/Iot.Device.Bh1745.InterruptPersistence.html",
    "title": "Enum InterruptPersistence | nanoFramework Documentation",
    "keywords": "Enum InterruptPersistence Represents the configuration for the interrupt persistence functionality of the Bh1745. Namespace : Iot.Device.Bh1745 Assembly : Iot.Device.Bh1745.dll Syntax public enum InterruptPersistence : byte Fields Name Description ToggleMeasurementEnd Interrupt status is toggled at each measurement end. UpdateConsecutiveX4 Interrupt status is updated if 4 consecutive threshold judgments are the same. UpdateConsecutiveX8 Interrupt status is updated if 8 consecutive threshold judgments are the same. UpdateMeasurementEnd Interrupt status is updated at each measurement end."
  },
  "devices/Iot.Device.Bh1745.InterruptSource.html": {
    "href": "devices/Iot.Device.Bh1745.InterruptSource.html",
    "title": "Enum InterruptSource | nanoFramework Documentation",
    "keywords": "Enum InterruptSource Represents the interrupt source which is one of the 4 color channels of the Bh1745. Namespace : Iot.Device.Bh1745 Assembly : Iot.Device.Bh1745.dll Syntax public enum InterruptSource : byte Fields Name Description BlueChannel The blue color channel. ClearChannel The clear color channel. GreenChannel The green color channel. RedChannel The red color channel."
  },
  "devices/Iot.Device.Bh1745.InterruptStatus.html": {
    "href": "devices/Iot.Device.Bh1745.InterruptStatus.html",
    "title": "Enum InterruptStatus | nanoFramework Documentation",
    "keywords": "Enum InterruptStatus Represents the state of the interrupt pin of the Bh1745. Namespace : Iot.Device.Bh1745 Assembly : Iot.Device.Bh1745.dll Syntax public enum InterruptStatus : byte Fields Name Description Active Default state in which the interrupt pin is not initialized (active). Inactive Sets the pin to high impedance (inactive)."
  },
  "devices/Iot.Device.Bh1745.LatchBehavior.html": {
    "href": "devices/Iot.Device.Bh1745.LatchBehavior.html",
    "title": "Enum LatchBehavior | nanoFramework Documentation",
    "keywords": "Enum LatchBehavior Represents the latch behavior of the interrupt pin of the Bh1745. Namespace : Iot.Device.Bh1745 Assembly : Iot.Device.Bh1745.dll Syntax public enum LatchBehavior : byte Fields Name Description LatchEachMeasurement Interrupt pin is latched after each measurement LatchUntilReadOrInitialized Interrupt pin is latched until interrupt register is read or initialized. or initialized."
  },
  "devices/Iot.Device.Bh1745.MeasurementTime.html": {
    "href": "devices/Iot.Device.Bh1745.MeasurementTime.html",
    "title": "Enum MeasurementTime | nanoFramework Documentation",
    "keywords": "Enum MeasurementTime Represents the available measurement times for the Bh1745. Namespace : Iot.Device.Bh1745 Assembly : Iot.Device.Bh1745.dll Syntax public enum MeasurementTime : byte Fields Name Description Ms1280 1280ms measurement time. Ms160 160ms measurement time. Ms2560 2560ms measurement time. Ms320 320ms measurement time. Ms5120 5120ms measurement time. Ms640 640ms measurement time. Extension Methods Bh1745Extensions.ToMilliseconds()"
  },
  "devices/Iot.Device.Bh1750fvi.Bh1750fvi.html": {
    "href": "devices/Iot.Device.Bh1750fvi.Bh1750fvi.html",
    "title": "Class Bh1750fvi | nanoFramework Documentation",
    "keywords": "Class Bh1750fvi Ambient Light Sensor BH1750FVI Inheritance Object Bh1750fvi Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bh1750fvi Assembly : Iot.Device.Bh1750fvi.dll Syntax [Interface(\"Ambient Light Sensor BH1750FVI\")] public class Bh1750fvi : IDisposable Constructors | Improve this Doc View Source Bh1750fvi(I2cDevice, MeasuringMode, Double) Creates a new instance of the BH1750FVI Declaration public Bh1750fvi(I2cDevice i2cDevice, MeasuringMode measuringMode = MeasuringMode.ContinuouslyHighResolutionMode, double lightTransmittance = 1) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. MeasuringMode measuringMode The measuring mode of BH1750FVI Double lightTransmittance BH1750FVI Light Transmittance, from 27.20% to 222.50% Properties | Improve this Doc View Source Illuminance BH1750FVI Illuminance (Lux) Declaration [Telemetry] public Illuminance Illuminance { get; } Property Value Type Description UnitsNet.Illuminance | Improve this Doc View Source LightTransmittance BH1750FVI Light Transmittance, from 27.20% to 222.50% Declaration [Property] public double LightTransmittance { get; set; } Property Value Type Description Double | Improve this Doc View Source MeasuringMode BH1750FVI Measuring Mode Declaration [Property] public MeasuringMode MeasuringMode { get; set; } Property Value Type Description MeasuringMode Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Bh1750fvi.html": {
    "href": "devices/Iot.Device.Bh1750fvi.html",
    "title": "Namespace Iot.Device.Bh1750fvi | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Bh1750fvi Classes Bh1750fvi Ambient Light Sensor BH1750FVI Enums I2cAddress BH1750FVI I2C Address MeasuringMode The measuring mode of BH1750FVI"
  },
  "devices/Iot.Device.Bh1750fvi.I2cAddress.html": {
    "href": "devices/Iot.Device.Bh1750fvi.I2cAddress.html",
    "title": "Enum I2cAddress | nanoFramework Documentation",
    "keywords": "Enum I2cAddress BH1750FVI I2C Address Namespace : Iot.Device.Bh1750fvi Assembly : Iot.Device.Bh1750fvi.dll Syntax public enum I2cAddress : byte Fields Name Description AddPinHigh ADD Pin connect to high power level AddPinLow ADD Pin connect to low power level"
  },
  "devices/Iot.Device.Bh1750fvi.MeasuringMode.html": {
    "href": "devices/Iot.Device.Bh1750fvi.MeasuringMode.html",
    "title": "Enum MeasuringMode | nanoFramework Documentation",
    "keywords": "Enum MeasuringMode The measuring mode of BH1750FVI Namespace : Iot.Device.Bh1750fvi Assembly : Iot.Device.Bh1750fvi.dll Syntax public enum MeasuringMode : byte Fields Name Description ContinuouslyHighResolutionMode Start measurement at 1lx resolution Measurement Time is typically 120ms. ContinuouslyHighResolutionMode2 Start measurement at 0.5lx resolution Measurement Time is typically 120ms. ContinuouslyLowResolutionMode Start measurement at 4lx resolution Measurement Time is typically 16ms. OneTimeHighResolutionMode Start measurement at 1lx resolution once Measurement Time is typically 120ms. It is automatically set to Power Down mode after measurement. OneTimeHighResolutionMode2 Start measurement at 0.5lx resolution once Measurement Time is typically 120ms. It is automatically set to Power Down mode after measurement. OneTimeLowResolutionMode Start measurement at 4lx resolution once Measurement Time is typically 16ms. It is automatically set to Power Down mode after measurement."
  },
  "devices/Iot.Device.Bmp180.Bmp180.html": {
    "href": "devices/Iot.Device.Bmp180.Bmp180.html",
    "title": "Class Bmp180 | nanoFramework Documentation",
    "keywords": "Class Bmp180 BMP180 - barometer, altitude and temperature sensor Inheritance Object Bmp180 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmp180 Assembly : Iot.Device.Bmp180.dll Syntax [Interface(\"BMP180 - barometer, altitude and temperature sensor\")] public class Bmp180 : IDisposable Constructors | Improve this Doc View Source Bmp180(I2cDevice) Constructs Bmp180 instance Declaration public Bmp180(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice I2C device used to communicate with the device Fields | Improve this Doc View Source DefaultI2cAddress Default I2C address Declaration public const byte DefaultI2cAddress = 119 Field Value Type Description Byte Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source ReadAltitude() Calculates the altitude in meters from the mean sea-level pressure. Declaration public Length ReadAltitude() Returns Type Description UnitsNet.Length Height in meters above sea level | Improve this Doc View Source ReadAltitude(Pressure) Calculates the altitude in meters from the specified sea-level pressure. Declaration public Length ReadAltitude(Pressure seaLevelPressure) Parameters Type Name Description UnitsNet.Pressure seaLevelPressure Sea-level pressure Returns Type Description UnitsNet.Length Height above sea level | Improve this Doc View Source ReadPressure() Reads the pressure from the sensor Declaration [Telemetry(\"Pressure\")] public Pressure ReadPressure() Returns Type Description UnitsNet.Pressure Atmospheric pressure | Improve this Doc View Source ReadSeaLevelPressure() Calculates the pressure at sea level, when the current altitude is 0. Declaration public Pressure ReadSeaLevelPressure() Returns Type Description UnitsNet.Pressure Pressure | Improve this Doc View Source ReadSeaLevelPressure(Length) Calculates the pressure at sea level when given a known altitude Declaration public Pressure ReadSeaLevelPressure(Length altitude) Parameters Type Name Description UnitsNet.Length altitude Altitude in meters Returns Type Description UnitsNet.Pressure Pressure | Improve this Doc View Source ReadTemperature() Reads the temperature from the sensor Declaration [Telemetry(\"Temperature\")] public Temperature ReadTemperature() Returns Type Description UnitsNet.Temperature Temperature in degrees celsius | Improve this Doc View Source SetSampling(Sampling) Sets sampling to the given value Declaration public void SetSampling(Sampling mode) Parameters Type Name Description Sampling mode Sampling Mode Implements IDisposable"
  },
  "devices/Iot.Device.Bmp180.html": {
    "href": "devices/Iot.Device.Bmp180.html",
    "title": "Namespace Iot.Device.Bmp180 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Bmp180 Classes Bmp180 BMP180 - barometer, altitude and temperature sensor Enums Sampling BMP180 sampling"
  },
  "devices/Iot.Device.Bmp180.Sampling.html": {
    "href": "devices/Iot.Device.Bmp180.Sampling.html",
    "title": "Enum Sampling | nanoFramework Documentation",
    "keywords": "Enum Sampling BMP180 sampling Namespace : Iot.Device.Bmp180 Assembly : Iot.Device.Bmp180.dll Syntax public enum Sampling : byte Fields Name Description HighResolution oversampling x2 Standard oversampling x1 UltraHighResolution oversampling x4 UltraLowPower Skipped (output set to 0x80000)"
  },
  "devices/Iot.Device.Bmxx80.Bme280.html": {
    "href": "devices/Iot.Device.Bmxx80.Bme280.html",
    "title": "Class Bme280 | nanoFramework Documentation",
    "keywords": "Class Bme280 Represents a BME280 temperature, barometric pressure and humidity sensor. Inheritance Object Bmxx80Base Bmx280Base Bme280 Implements IDisposable Inherited Members Bmx280Base.DefaultI2cAddress Bmx280Base.SecondaryI2cAddress Bmx280Base.s_osToMeasCycles Bmx280Base.FilterMode Bmx280Base.StandbyTime Bmx280Base.TryReadTemperature(Temperature) Bmx280Base.ReadPowerMode() Bmx280Base.TryReadPressure(Pressure) Bmx280Base.TryReadAltitude(Pressure, Length) Bmx280Base.TryReadAltitude(Length) Bmx280Base.ReadStatus() Bmx280Base.SetPowerMode(Bmx280PowerMode) Bmx280Base.TryReadTemperatureCore(Temperature) Bmx280Base.TryReadPressureCore(Pressure, Boolean) Bmxx80Base._i2cDevice Bmxx80Base._communicationProtocol Bmxx80Base._controlRegister Bmxx80Base.TemperatureFine Bmxx80Base.TempCalibrationFactor Bmxx80Base.PressureSampling Bmxx80Base.TemperatureSampling Bmxx80Base.Reset() Bmxx80Base.CompensateTemperature(Int32) Bmxx80Base.Read8BitsFromRegister(Byte) Bmxx80Base.Read16BitsFromRegister(Byte, Bmxx80Base.Endianness) Bmxx80Base.Read24BitsFromRegister(Byte, Bmxx80Base.Endianness) Bmxx80Base.ByteToSampling(Byte) Bmxx80Base.Dispose() Bmxx80Base.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax [Interface(\"Represents a BME280 temperature, barometric pressure and humidity sensor.\")] public class Bme280 : Bmx280Base, IDisposable Constructors | Improve this Doc View Source Bme280(I2cDevice) Initializes a new instance of the Bme280 class. Declaration public Bme280(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2cDevice to create with. Properties | Improve this Doc View Source HumiditySampling Gets or sets the humidity sampling. Declaration [Property] public Sampling HumiditySampling { get; set; } Property Value Type Description Sampling Exceptions Type Condition ArgumentOutOfRangeException Thrown when the Sampling is set to an undefined mode. Methods | Improve this Doc View Source GetMeasurementDuration() Gets the required time in ms to perform a measurement with the current sampling modes. Declaration public override int GetMeasurementDuration() Returns Type Description Int32 The time it takes for the chip to read data in milliseconds rounded up. Overrides Bmx280Base.GetMeasurementDuration() | Improve this Doc View Source Read() Performs a synchronous reading. Declaration public Bme280ReadResult Read() Returns Type Description Bme280ReadResult Bme280ReadResult | Improve this Doc View Source SetDefaultConfiguration() Sets the default configuration for the sensor. Declaration protected override void SetDefaultConfiguration() Overrides Bmx280Base.SetDefaultConfiguration() | Improve this Doc View Source TryReadHumidity(out RelativeHumidity) Reads the humidity. A return value indicates whether the reading succeeded. Declaration [Telemetry(\"Humidity\")] public bool TryReadHumidity(out RelativeHumidity humidity) Parameters Type Name Description UnitsNet.RelativeHumidity humidity Contains the measured humidity as %rH if the HumiditySampling was not set to Skipped . Contains an undefined value if the return value is false. Returns Type Description Boolean true if measurement was not skipped, otherwise false . Implements IDisposable"
  },
  "devices/Iot.Device.Bmxx80.Bme680.html": {
    "href": "devices/Iot.Device.Bmxx80.Bme680.html",
    "title": "Class Bme680 | nanoFramework Documentation",
    "keywords": "Class Bme680 Represents a BME680 temperature, pressure, relative humidity and VOC gas sensor. Inheritance Object Bmxx80Base Bme680 Implements IDisposable Inherited Members Bmxx80Base._i2cDevice Bmxx80Base._communicationProtocol Bmxx80Base._controlRegister Bmxx80Base.TemperatureFine Bmxx80Base.PressureSampling Bmxx80Base.TemperatureSampling Bmxx80Base.Reset() Bmxx80Base.CompensateTemperature(Int32) Bmxx80Base.Read8BitsFromRegister(Byte) Bmxx80Base.Read16BitsFromRegister(Byte, Bmxx80Base.Endianness) Bmxx80Base.Read24BitsFromRegister(Byte, Bmxx80Base.Endianness) Bmxx80Base.ByteToSampling(Byte) Bmxx80Base.Dispose() Bmxx80Base.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax [Interface(\"Represents a BME680 temperature, pressure, relative humidity and VOC gas sensor.\")] public class Bme680 : Bmxx80Base, IDisposable Constructors | Improve this Doc View Source Bme680(I2cDevice) Initialize a new instance of the Bme680 class. Declaration public Bme680(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2cDevice to create with. | Improve this Doc View Source Bme680(I2cDevice, Temperature) Initialize a new instance of the Bme680 class. Declaration public Bme680(I2cDevice i2cDevice, Temperature ambientTemperatureDefault) Parameters Type Name Description I2cDevice i2cDevice The I2cDevice to create with. UnitsNet.Temperature ambientTemperatureDefault Assumed ambient temperature for startup. Used for initialization of the gas measurement if the temperature cannot be read during a reset. Fields | Improve this Doc View Source DefaultI2cAddress Default I2C bus address. Declaration public const byte DefaultI2cAddress = 118 Field Value Type Description Byte | Improve this Doc View Source SecondaryI2cAddress Secondary I2C bus address. Declaration public const byte SecondaryI2cAddress = 119 Field Value Type Description Byte Properties | Improve this Doc View Source FilterMode Gets or sets the filtering mode to be used for measurements. Declaration [Property] public Bme680FilteringMode FilterMode { get; set; } Property Value Type Description Bme680FilteringMode Exceptions Type Condition ArgumentOutOfRangeException Thrown when the Bme680FilteringMode is set to an undefined mode. | Improve this Doc View Source GasConversionIsEnabled Gets or sets whether gas conversions are enabled. Declaration [Property] public bool GasConversionIsEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source HeaterIsEnabled Gets or sets whether the heater is enabled. Declaration [Property] public bool HeaterIsEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source HeaterProfile Gets or sets the heater profile to be used for measurements. Current heater profile is only set if the chosen profile is configured. Declaration [Property] public Bme680HeaterProfile HeaterProfile { get; set; } Property Value Type Description Bme680HeaterProfile Exceptions Type Condition ArgumentOutOfRangeException Thrown when the Bme680HeaterProfile is set to an undefined profile. | Improve this Doc View Source HumiditySampling Gets or sets the humidity sampling. Declaration [Property] public Sampling HumiditySampling { get; set; } Property Value Type Description Sampling Exceptions Type Condition ArgumentOutOfRangeException Thrown when the Sampling is set to an undefined mode. | Improve this Doc View Source TempCalibrationFactor The temperature calibration factor. Declaration protected override int TempCalibrationFactor { get; } Property Value Type Description Int32 Overrides Bmxx80Base.TempCalibrationFactor Methods | Improve this Doc View Source ConfigureHeatingProfile(Bme680HeaterProfile, Temperature, Duration, Temperature) Configures a heater profile, making it ready for use. Declaration public void ConfigureHeatingProfile(Bme680HeaterProfile profile, Temperature targetTemperature, Duration duration, Temperature ambientTemperature) Parameters Type Name Description Bme680HeaterProfile profile The Bme680HeaterProfile to configure. UnitsNet.Temperature targetTemperature The target temperature. Ranging from 0-400. UnitsNet.Duration duration The measurement durations. Ranging from 0-4032ms. UnitsNet.Temperature ambientTemperature The ambient temperature. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the heating profile does not match a defined profile in Bme680HeaterProfile . | Improve this Doc View Source GetMeasurementDuration(Bme680HeaterProfile) Gets the required time in ms to perform a measurement. The duration of the gas measurement is not considered if GasConversionIsEnabled is set to false or the chosen Bme680HeaterProfile is not configured. The precision of this duration is within 1ms of the actual measurement time. Declaration public Duration GetMeasurementDuration(Bme680HeaterProfile profile) Parameters Type Name Description Bme680HeaterProfile profile The used Bme680HeaterProfile . Returns Type Description UnitsNet.Duration | Improve this Doc View Source Read() Performs a synchronous reading. Declaration public Bme680ReadResult Read() Returns Type Description Bme680ReadResult Bme680ReadResult | Improve this Doc View Source ReadGasMeasurementInProcess() Reads whether a gas measurement is in process. Declaration public bool ReadGasMeasurementInProcess() Returns Type Description Boolean | Improve this Doc View Source ReadHeaterIsStable() Reads whether the target heater temperature is reached. Declaration public bool ReadHeaterIsStable() Returns Type Description Boolean | Improve this Doc View Source ReadMeasurementInProcess() Reads whether a measurement of any kind is in process. Declaration public bool ReadMeasurementInProcess() Returns Type Description Boolean | Improve this Doc View Source ReadNewDataIsAvailable() Reads whether new data is available. Declaration public bool ReadNewDataIsAvailable() Returns Type Description Boolean | Improve this Doc View Source ReadPowerMode() Read the Bme680PowerMode state. Declaration [Property(\"PowerMode\")] public Bme680PowerMode ReadPowerMode() Returns Type Description Bme680PowerMode The current Bme680PowerMode . | Improve this Doc View Source SetDefaultConfiguration() Sets the default configuration for the sensor. Declaration protected override void SetDefaultConfiguration() Overrides Bmxx80Base.SetDefaultConfiguration() | Improve this Doc View Source SetPowerMode(Bme680PowerMode) Sets the power mode to the given mode Declaration [Property(\"PowerMode\")] public void SetPowerMode(Bme680PowerMode powerMode) Parameters Type Name Description Bme680PowerMode powerMode The Bme680PowerMode to set. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the power mode does not match a defined mode in Bme680PowerMode . | Improve this Doc View Source TryReadGasResistance(out ElectricResistance) Reads the gas resistance. A return value indicates whether the reading succeeded. Declaration [Telemetry(\"GasResistance\")] public bool TryReadGasResistance(out ElectricResistance gasResistance) Parameters Type Name Description UnitsNet.ElectricResistance gasResistance Contains the measured gas resistance if the heater module reached the target temperature and the measurement was valid. Undefined otherwise. Returns Type Description Boolean true if measurement was not skipped, otherwise false . | Improve this Doc View Source TryReadHumidity(out RelativeHumidity) Reads the humidity. A return value indicates whether the reading succeeded. Declaration [Telemetry(\"Humidity\")] public bool TryReadHumidity(out RelativeHumidity humidity) Parameters Type Name Description UnitsNet.RelativeHumidity humidity Contains the measured humidity as %rH if the HumiditySampling was not set to Skipped . Contains NaN otherwise. Returns Type Description Boolean true if measurement was not skipped, otherwise false . | Improve this Doc View Source TryReadPressure(out Pressure) Reads the pressure. A return value indicates whether the reading succeeded. Declaration public override bool TryReadPressure(out Pressure pressure) Parameters Type Name Description UnitsNet.Pressure pressure Contains the measured pressure if the PressureSampling was not set to Skipped . Contains NaN otherwise. Returns Type Description Boolean true if measurement was not skipped, otherwise false . Overrides Bmxx80Base.TryReadPressure(out Pressure) | Improve this Doc View Source TryReadTemperature(out Temperature) Reads the temperature. A return value indicates whether the reading succeeded. Declaration public override bool TryReadTemperature(out Temperature temperature) Parameters Type Name Description UnitsNet.Temperature temperature Contains the measured temperature if the TemperatureSampling was not set to Skipped . Contains NaN otherwise. Returns Type Description Boolean true if measurement was not skipped, otherwise false . Overrides Bmxx80Base.TryReadTemperature(out Temperature) Implements IDisposable"
  },
  "devices/Iot.Device.Bmxx80.Bme680HeaterProfile.html": {
    "href": "devices/Iot.Device.Bmxx80.Bme680HeaterProfile.html",
    "title": "Enum Bme680HeaterProfile | nanoFramework Documentation",
    "keywords": "Enum Bme680HeaterProfile 10 addressable heater profiles stored on the Bme680. Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax public enum Bme680HeaterProfile : byte Fields Name Description Profile1 Heater Profile 1. Profile10 Heater Profile 10. Profile2 Heater Profile 2. Profile3 Heater Profile 3. Profile4 Heater Profile 4. Profile5 Heater Profile 5. Profile6 Heater Profile 6. Profile7 Heater Profile 7. Profile8 Heater Profile 8. Profile9 Heater Profile 9."
  },
  "devices/Iot.Device.Bmxx80.Bme680HeaterProfileConfig.html": {
    "href": "devices/Iot.Device.Bmxx80.Bme680HeaterProfileConfig.html",
    "title": "Class Bme680HeaterProfileConfig | nanoFramework Documentation",
    "keywords": "Class Bme680HeaterProfileConfig The heater profile configuration saved on the device. Inheritance Object Bme680HeaterProfileConfig Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax public class Bme680HeaterProfileConfig Constructors | Improve this Doc View Source Bme680HeaterProfileConfig(Bme680HeaterProfile, UInt16, Duration) Creates a new instance of Bme680HeaterProfileConfig . Declaration public Bme680HeaterProfileConfig(Bme680HeaterProfile profile, ushort heaterResistance, Duration heaterDuration) Parameters Type Name Description Bme680HeaterProfile profile The used heater profile. UInt16 heaterResistance The heater resistance in Ohm. UnitsNet.Duration heaterDuration The heating duration. Exceptions Type Condition ArgumentOutOfRangeException Unknown profile setting used Properties | Improve this Doc View Source HeaterDuration The heater duration Declaration public Duration HeaterDuration { get; set; } Property Value Type Description UnitsNet.Duration | Improve this Doc View Source HeaterProfile The chosen heater profile slot, ranging from 0-9. Declaration public Bme680HeaterProfile HeaterProfile { get; set; } Property Value Type Description Bme680HeaterProfile | Improve this Doc View Source HeaterResistance The heater resistance. Declaration public ushort HeaterResistance { get; set; } Property Value Type Description UInt16"
  },
  "devices/Iot.Device.Bmxx80.Bmp280.html": {
    "href": "devices/Iot.Device.Bmxx80.Bmp280.html",
    "title": "Class Bmp280 | nanoFramework Documentation",
    "keywords": "Class Bmp280 Represents a BME280 temperature and barometric pressure sensor. Inheritance Object Bmxx80Base Bmx280Base Bmp280 Implements IDisposable Inherited Members Bmx280Base.DefaultI2cAddress Bmx280Base.SecondaryI2cAddress Bmx280Base.s_osToMeasCycles Bmx280Base.FilterMode Bmx280Base.StandbyTime Bmx280Base.TryReadTemperature(Temperature) Bmx280Base.ReadPowerMode() Bmx280Base.TryReadPressure(Pressure) Bmx280Base.TryReadAltitude(Pressure, Length) Bmx280Base.TryReadAltitude(Length) Bmx280Base.ReadStatus() Bmx280Base.SetPowerMode(Bmx280PowerMode) Bmx280Base.GetMeasurementDuration() Bmx280Base.SetDefaultConfiguration() Bmx280Base.TryReadTemperatureCore(Temperature) Bmx280Base.TryReadPressureCore(Pressure, Boolean) Bmxx80Base._i2cDevice Bmxx80Base._communicationProtocol Bmxx80Base._controlRegister Bmxx80Base.TemperatureFine Bmxx80Base.TempCalibrationFactor Bmxx80Base.PressureSampling Bmxx80Base.TemperatureSampling Bmxx80Base.Reset() Bmxx80Base.CompensateTemperature(Int32) Bmxx80Base.Read8BitsFromRegister(Byte) Bmxx80Base.Read16BitsFromRegister(Byte, Bmxx80Base.Endianness) Bmxx80Base.Read24BitsFromRegister(Byte, Bmxx80Base.Endianness) Bmxx80Base.ByteToSampling(Byte) Bmxx80Base.Dispose() Bmxx80Base.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax public class Bmp280 : Bmx280Base, IDisposable Constructors | Improve this Doc View Source Bmp280(I2cDevice) Initializes a new instance of the Bmp280 class. Declaration public Bmp280(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2cDevice to create with. Methods | Improve this Doc View Source Read() Performs a synchronous reading. Declaration public Bmp280ReadResult Read() Returns Type Description Bmp280ReadResult Bmp280ReadResult Implements IDisposable"
  },
  "devices/Iot.Device.Bmxx80.Bmx280Base.html": {
    "href": "devices/Iot.Device.Bmxx80.Bmx280Base.html",
    "title": "Class Bmx280Base | nanoFramework Documentation",
    "keywords": "Class Bmx280Base Represents the core functionality of the Bmx280 family. Inheritance Object Bmxx80Base Bmx280Base Bme280 Bmp280 Implements IDisposable Inherited Members Bmxx80Base._i2cDevice Bmxx80Base._communicationProtocol Bmxx80Base._controlRegister Bmxx80Base.TemperatureFine Bmxx80Base.TempCalibrationFactor Bmxx80Base.PressureSampling Bmxx80Base.TemperatureSampling Bmxx80Base.Reset() Bmxx80Base.CompensateTemperature(Int32) Bmxx80Base.Read8BitsFromRegister(Byte) Bmxx80Base.Read16BitsFromRegister(Byte, Bmxx80Base.Endianness) Bmxx80Base.Read24BitsFromRegister(Byte, Bmxx80Base.Endianness) Bmxx80Base.ByteToSampling(Byte) Bmxx80Base.Dispose() Bmxx80Base.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax [Interface(\"Represents the core functionality of the Bmx280 family.\")] public abstract class Bmx280Base : Bmxx80Base, IDisposable Constructors | Improve this Doc View Source Bmx280Base(Byte, I2cDevice) Initializes a new instance of the Bmx280Base class. Declaration protected Bmx280Base(byte deviceId, I2cDevice i2cDevice) Parameters Type Name Description Byte deviceId The ID of the device. I2cDevice i2cDevice The I2cDevice to create with. Fields | Improve this Doc View Source DefaultI2cAddress Default I2C bus address. Declaration public const byte DefaultI2cAddress = 119 Field Value Type Description Byte | Improve this Doc View Source s_osToMeasCycles Converts oversampling to needed measurement cycles for that oversampling. Declaration protected static readonly int[] s_osToMeasCycles Field Value Type Description Int32 [] | Improve this Doc View Source SecondaryI2cAddress Secondary I2C bus address. Declaration public const byte SecondaryI2cAddress = 118 Field Value Type Description Byte Properties | Improve this Doc View Source FilterMode Gets or sets the IIR filter mode. Declaration [Property] public Bmx280FilteringMode FilterMode { get; set; } Property Value Type Description Bmx280FilteringMode Exceptions Type Condition ArgumentOutOfRangeException Thrown when the Bmx280FilteringMode is set to an undefined mode. | Improve this Doc View Source StandbyTime Gets or sets the standby time between two consecutive measurements. Declaration [Property] public StandbyTime StandbyTime { get; set; } Property Value Type Description StandbyTime Exceptions Type Condition ArgumentOutOfRangeException Thrown when the StandbyTime is set to an undefined mode. Methods | Improve this Doc View Source GetMeasurementDuration() Gets the required time in ms to perform a measurement with the current sampling modes. Declaration [Property(\"MeasurementDuration\")] public virtual int GetMeasurementDuration() Returns Type Description Int32 The time it takes for the chip to read data in milliseconds rounded up. | Improve this Doc View Source ReadPowerMode() Read the Bmx280PowerMode state. Declaration [Property(\"PowerMode\")] public Bmx280PowerMode ReadPowerMode() Returns Type Description Bmx280PowerMode The current Bmx280PowerMode . Exceptions Type Condition NotImplementedException Thrown when the power mode does not match a defined mode in Bmx280PowerMode . | Improve this Doc View Source ReadStatus() Get the current status of the device. Declaration [Telemetry(\"Status\")] public DeviceStatus ReadStatus() Returns Type Description DeviceStatus The DeviceStatus . | Improve this Doc View Source SetDefaultConfiguration() Sets the default configuration for the sensor. Declaration [Command] protected override void SetDefaultConfiguration() Overrides Bmxx80Base.SetDefaultConfiguration() | Improve this Doc View Source SetPowerMode(Bmx280PowerMode) Sets the power mode to the given mode Declaration [Property(\"PowerMode\")] public void SetPowerMode(Bmx280PowerMode powerMode) Parameters Type Name Description Bmx280PowerMode powerMode The Bmx280PowerMode to set. | Improve this Doc View Source TryReadAltitude(out Length) Calculates the altitude in meters from the mean sea-level pressure. Declaration public bool TryReadAltitude(out Length altitude) Parameters Type Name Description UnitsNet.Length altitude Contains the calculated metres above sea-level if the PressureSampling was not set to Skipped . Contains NaN otherwise. Returns Type Description Boolean true if pressure measurement was not skipped, otherwise false . | Improve this Doc View Source TryReadAltitude(Pressure, out Length) Calculates the altitude in meters from the specified sea-level pressure(in hPa). Declaration public bool TryReadAltitude(Pressure seaLevelPressure, out Length altitude) Parameters Type Name Description UnitsNet.Pressure seaLevelPressure Sea-level pressure UnitsNet.Length altitude Contains the calculated metres above sea-level if the PressureSampling was not set to Skipped . Contains NaN otherwise. Returns Type Description Boolean true if pressure measurement was not skipped, otherwise false . | Improve this Doc View Source TryReadPressure(out Pressure) Reads the pressure. A return value indicates whether the reading succeeded. Declaration [Telemetry(\"Pressure\")] public override bool TryReadPressure(out Pressure pressure) Parameters Type Name Description UnitsNet.Pressure pressure Contains the measured pressure in Pa if the PressureSampling was not set to Skipped . Contains NaN otherwise. Returns Type Description Boolean true if measurement was not skipped, otherwise false . Overrides Bmxx80Base.TryReadPressure(out Pressure) | Improve this Doc View Source TryReadPressureCore(out Pressure, Boolean) Performs a pressure reading. Declaration protected bool TryReadPressureCore(out Pressure pressure, bool skipTempFineRead = false) Parameters Type Name Description UnitsNet.Pressure pressure Boolean skipTempFineRead Returns Type Description Boolean UnitsNet.Pressure | Improve this Doc View Source TryReadTemperature(out Temperature) Reads the temperature. A return value indicates whether the reading succeeded. Declaration [Telemetry(\"Temperature\")] public override bool TryReadTemperature(out Temperature temperature) Parameters Type Name Description UnitsNet.Temperature temperature Contains the measured temperature if the TemperatureSampling was not set to Skipped . Contains NaN otherwise. Returns Type Description Boolean true if measurement was not skipped, otherwise false . Overrides Bmxx80Base.TryReadTemperature(out Temperature) | Improve this Doc View Source TryReadTemperatureCore(out Temperature) Performs a temperature reading. Declaration protected bool TryReadTemperatureCore(out Temperature temperature) Parameters Type Name Description UnitsNet.Temperature temperature Returns Type Description Boolean UnitsNet.Temperature Implements IDisposable"
  },
  "devices/Iot.Device.Bmxx80.Bmxx80Base.CommunicationProtocol.html": {
    "href": "devices/Iot.Device.Bmxx80.Bmxx80Base.CommunicationProtocol.html",
    "title": "Enum Bmxx80Base.CommunicationProtocol | nanoFramework Documentation",
    "keywords": "Enum Bmxx80Base.CommunicationProtocol Bmxx80 communication protocol. Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax public enum CommunicationProtocol Fields Name Description I2c I²C communication protocol."
  },
  "devices/Iot.Device.Bmxx80.Bmxx80Base.Endianness.html": {
    "href": "devices/Iot.Device.Bmxx80.Bmxx80Base.Endianness.html",
    "title": "Enum Bmxx80Base.Endianness | nanoFramework Documentation",
    "keywords": "Enum Bmxx80Base.Endianness Specifies the Endianness of a device. Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax protected enum Endianness Fields Name Description BigEndian Indicates big endian. LittleEndian Indicates little endian."
  },
  "devices/Iot.Device.Bmxx80.Bmxx80Base.html": {
    "href": "devices/Iot.Device.Bmxx80.Bmxx80Base.html",
    "title": "Class Bmxx80Base | nanoFramework Documentation",
    "keywords": "Class Bmxx80Base Represents the core functionality of the Bmxx80 family. Inheritance Object Bmxx80Base Bme680 Bmx280Base Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax public abstract class Bmxx80Base : IDisposable Constructors | Improve this Doc View Source Bmxx80Base(Byte, I2cDevice) Initializes a new instance of the Bmxx80Base class. Declaration protected Bmxx80Base(byte deviceId, I2cDevice i2cDevice) Parameters Type Name Description Byte deviceId The ID of the device. I2cDevice i2cDevice The I2cDevice to create with. Exceptions Type Condition ArgumentNullException Thrown when the given I2cDevice is null. IOException Thrown when the device cannot be found on the bus. Fields | Improve this Doc View Source _communicationProtocol Chosen communication protocol. Declaration protected Bmxx80Base.CommunicationProtocol _communicationProtocol Field Value Type Description Bmxx80Base.CommunicationProtocol | Improve this Doc View Source _controlRegister The control register of the sensor. Declaration protected byte _controlRegister Field Value Type Description Byte | Improve this Doc View Source _i2cDevice I2C device used to communicate with the device. Declaration protected I2cDevice _i2cDevice Field Value Type Description I2cDevice Properties | Improve this Doc View Source PressureSampling Gets or sets the pressure sampling. Declaration public Sampling PressureSampling { get; set; } Property Value Type Description Sampling Exceptions Type Condition ArgumentOutOfRangeException Thrown when the Sampling is set to an undefined mode. | Improve this Doc View Source TempCalibrationFactor The temperature calibration factor. Declaration protected virtual int TempCalibrationFactor { get; } Property Value Type Description Int32 | Improve this Doc View Source TemperatureFine The variable TemperatureFine carries a fine resolution temperature value over to the pressure compensation formula and could be implemented as a global variable. Declaration protected double TemperatureFine { get; set; } Property Value Type Description Double | Improve this Doc View Source TemperatureSampling Gets or sets the temperature sampling. Declaration public Sampling TemperatureSampling { get; set; } Property Value Type Description Sampling Exceptions Type Condition ArgumentOutOfRangeException Thrown when the Sampling is set to an undefined mode. Methods | Improve this Doc View Source ByteToSampling(Byte) Converts byte to Sampling . Declaration protected Sampling ByteToSampling(byte value) Parameters Type Name Description Byte value Value to convert. Returns Type Description Sampling Sampling | Improve this Doc View Source CompensateTemperature(Int32) Compensates the temperature. Declaration protected Temperature CompensateTemperature(int adcTemperature) Parameters Type Name Description Int32 adcTemperature The temperature value read from the device. Returns Type Description UnitsNet.Temperature The UnitsNet.Temperature . | Improve this Doc View Source Dispose() Cleanup. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the Bmxx80 and optionally releases the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing True to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source Read16BitsFromRegister(Byte, Bmxx80Base.Endianness) Reads a 16 bit value over I2C. Declaration protected ushort Read16BitsFromRegister(byte register, Bmxx80Base.Endianness endianness = Bmxx80Base.Endianness.LittleEndian) Parameters Type Name Description Byte register Register to read from. Bmxx80Base.Endianness endianness Interpretation of the bytes (big or little endian). Returns Type Description UInt16 Value from register. | Improve this Doc View Source Read24BitsFromRegister(Byte, Bmxx80Base.Endianness) Reads a 24 bit value over I2C. Declaration protected uint Read24BitsFromRegister(byte register, Bmxx80Base.Endianness endianness = Bmxx80Base.Endianness.LittleEndian) Parameters Type Name Description Byte register Register to read from. Bmxx80Base.Endianness endianness Interpretation of the bytes (big or little endian). Returns Type Description UInt32 Value from register. | Improve this Doc View Source Read8BitsFromRegister(Byte) Reads an 8 bit value from a register. Declaration protected byte Read8BitsFromRegister(byte register) Parameters Type Name Description Byte register Register to read from. Returns Type Description Byte Value from register. | Improve this Doc View Source Reset() When called, the device is reset using the complete power-on-reset procedure. The device will reset to the default configuration. Declaration public void Reset() | Improve this Doc View Source SetDefaultConfiguration() Sets the default configuration for the sensor. Declaration protected virtual void SetDefaultConfiguration() | Improve this Doc View Source TryReadPressure(out Pressure) Reads the pressure. A return value indicates whether the reading succeeded. Declaration public abstract bool TryReadPressure(out Pressure pressure) Parameters Type Name Description UnitsNet.Pressure pressure Contains the measured pressure if the PressureSampling was not set to Skipped . Contains NaN otherwise. Returns Type Description Boolean true if measurement was not skipped, otherwise false . | Improve this Doc View Source TryReadTemperature(out Temperature) Reads the temperature. A return value indicates whether the reading succeeded. Declaration public abstract bool TryReadTemperature(out Temperature temperature) Parameters Type Name Description UnitsNet.Temperature temperature Contains the measured temperature if the TemperatureSampling was not set to Skipped . Contains NaN otherwise. Returns Type Description Boolean true if measurement was not skipped, otherwise false . Implements IDisposable"
  },
  "devices/Iot.Device.Bmxx80.DeviceStatus.html": {
    "href": "devices/Iot.Device.Bmxx80.DeviceStatus.html",
    "title": "Class DeviceStatus | nanoFramework Documentation",
    "keywords": "Class DeviceStatus Indicates the status of the device. Inheritance Object DeviceStatus Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax public class DeviceStatus Properties | Improve this Doc View Source ImageUpdating True when the NVM data is being copied to images registers and False when the copying is done. The data is copied at power-on-reset and before every conversion. Declaration public bool ImageUpdating { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Measuring True whenever a conversion is running and False when the results have been transferred to the data registers. Declaration public bool Measuring { get; set; } Property Value Type Description Boolean"
  },
  "devices/Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode.html": {
    "href": "devices/Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode.html",
    "title": "Enum Bme680FilteringMode | nanoFramework Documentation",
    "keywords": "Enum Bme680FilteringMode IIR filter coefficient. The higher the coefficient, the slower the sensors responds to external inputs. Namespace : Iot.Device.Bmxx80.FilteringMode Assembly : Iot.Device.Bmxx80.dll Syntax public enum Bme680FilteringMode Fields Name Description C0 Filter coefficient of 0. C1 Filter coefficient of 1. C127 Filter coefficient of 127. C15 Filter coefficient of 15. C3 Filter coefficient of 3. C31 Filter coefficient of 31. C63 Filter coefficient of 63. C7 Filter coefficient of 7."
  },
  "devices/Iot.Device.Bmxx80.FilteringMode.Bmx280FilteringMode.html": {
    "href": "devices/Iot.Device.Bmxx80.FilteringMode.Bmx280FilteringMode.html",
    "title": "Enum Bmx280FilteringMode | nanoFramework Documentation",
    "keywords": "Enum Bmx280FilteringMode Bmx280 devices feature an internal IIR filter. Namespace : Iot.Device.Bmxx80.FilteringMode Assembly : Iot.Device.Bmxx80.dll Syntax public enum Bmx280FilteringMode : byte Remarks This filter effectively reduces the bandwidth of the temperature and pressure output signals and increases the resolution of the pressure and temperature output data to 20 bits. The higher the coefficient, the slower the sensors responds to external inputs. See the data sheet with recommended settings for different scenarios. Fields Name Description Off Filter off. X16 Coefficient x16. X2 Coefficient x2. X4 Coefficient x4. X8 Coefficient x8."
  },
  "devices/Iot.Device.Bmxx80.FilteringMode.html": {
    "href": "devices/Iot.Device.Bmxx80.FilteringMode.html",
    "title": "Namespace Iot.Device.Bmxx80.FilteringMode | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Bmxx80.FilteringMode Enums Bme680FilteringMode IIR filter coefficient. The higher the coefficient, the slower the sensors responds to external inputs. Bmx280FilteringMode Bmx280 devices feature an internal IIR filter."
  },
  "devices/Iot.Device.Bmxx80.html": {
    "href": "devices/Iot.Device.Bmxx80.html",
    "title": "Namespace Iot.Device.Bmxx80 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Bmxx80 Classes Bme280 Represents a BME280 temperature, barometric pressure and humidity sensor. Bme680 Represents a BME680 temperature, pressure, relative humidity and VOC gas sensor. Bme680HeaterProfileConfig The heater profile configuration saved on the device. Bmp280 Represents a BME280 temperature and barometric pressure sensor. Bmx280Base Represents the core functionality of the Bmx280 family. Bmxx80Base Represents the core functionality of the Bmxx80 family. DeviceStatus Indicates the status of the device. Enums Bme680HeaterProfile 10 addressable heater profiles stored on the Bme680. Bmxx80Base.CommunicationProtocol Bmxx80 communication protocol. Bmxx80Base.Endianness Specifies the Endianness of a device. Sampling Oversampling settings. StandbyTime Controls the inactive duration in normal mode."
  },
  "devices/Iot.Device.Bmxx80.PowerMode.Bme680PowerMode.html": {
    "href": "devices/Iot.Device.Bmxx80.PowerMode.Bme680PowerMode.html",
    "title": "Enum Bme680PowerMode | nanoFramework Documentation",
    "keywords": "Enum Bme680PowerMode Sensor power mode. Namespace : Iot.Device.Bmxx80.PowerMode Assembly : Iot.Device.Bmxx80.dll Syntax public enum Bme680PowerMode : byte Remarks Section 3.1 in the datasheet. Fields Name Description Forced Single TPHG cycle is performed. Sleep No measurements are performed."
  },
  "devices/Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode.html": {
    "href": "devices/Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode.html",
    "title": "Enum Bmx280PowerMode | nanoFramework Documentation",
    "keywords": "Enum Bmx280PowerMode Sensor power mode. Namespace : Iot.Device.Bmxx80.PowerMode Assembly : Iot.Device.Bmxx80.dll Syntax public enum Bmx280PowerMode : byte Fields Name Description Forced Perform one measurement, store results, and return to sleep mode. Normal Perpetual cycling of measurements and inactive periods. This interval is determined by the combination of IIR filter and standby time options. Sleep No operations, all registers accessible, lowest power mode, selected after startup."
  },
  "devices/Iot.Device.Bmxx80.PowerMode.html": {
    "href": "devices/Iot.Device.Bmxx80.PowerMode.html",
    "title": "Namespace Iot.Device.Bmxx80.PowerMode | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Bmxx80.PowerMode Enums Bme680PowerMode Sensor power mode. Bmx280PowerMode Sensor power mode."
  },
  "devices/Iot.Device.Bmxx80.ReadResult.Bme280ReadResult.html": {
    "href": "devices/Iot.Device.Bmxx80.ReadResult.Bme280ReadResult.html",
    "title": "Class Bme280ReadResult | nanoFramework Documentation",
    "keywords": "Class Bme280ReadResult Contains a measurement result of a Bme280 sensor. Inheritance Object Bmp280ReadResult Bme280ReadResult Bme680ReadResult Inherited Members Bmp280ReadResult.Temperature Bmp280ReadResult.Pressure Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmxx80.ReadResult Assembly : Iot.Device.Bmxx80.dll Syntax public class Bme280ReadResult : Bmp280ReadResult Constructors | Improve this Doc View Source Bme280ReadResult(Temperature, Pressure, RelativeHumidity) Initialize a new instance of the Bme280ReadResult class. Declaration public Bme280ReadResult(Temperature temperature, Pressure pressure, RelativeHumidity humidity) Parameters Type Name Description UnitsNet.Temperature temperature The UnitsNet.Temperature measurement. UnitsNet.Pressure pressure The UnitsNet.Pressure measurement. UnitsNet.RelativeHumidity humidity The humidity measurement. Properties | Improve this Doc View Source Humidity Collected humidity measurement. Declaration public RelativeHumidity Humidity { get; } Property Value Type Description UnitsNet.RelativeHumidity"
  },
  "devices/Iot.Device.Bmxx80.ReadResult.Bme680ReadResult.html": {
    "href": "devices/Iot.Device.Bmxx80.ReadResult.Bme680ReadResult.html",
    "title": "Class Bme680ReadResult | nanoFramework Documentation",
    "keywords": "Class Bme680ReadResult Contains a measurement result of a Bme280 sensor. Inheritance Object Bmp280ReadResult Bme280ReadResult Bme680ReadResult Inherited Members Bme280ReadResult.Humidity Bmp280ReadResult.Temperature Bmp280ReadResult.Pressure Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmxx80.ReadResult Assembly : Iot.Device.Bmxx80.dll Syntax public class Bme680ReadResult : Bme280ReadResult Constructors | Improve this Doc View Source Bme680ReadResult(Temperature, Pressure, RelativeHumidity, ElectricResistance) Initialize a new instance of the Bme680ReadResult class. Declaration public Bme680ReadResult(Temperature temperature, Pressure pressure, RelativeHumidity humidity, ElectricResistance gasResistance) Parameters Type Name Description UnitsNet.Temperature temperature The UnitsNet.Temperature measurement. UnitsNet.Pressure pressure The UnitsNet.Pressure measurement. UnitsNet.RelativeHumidity humidity The humidity measurement. UnitsNet.ElectricResistance gasResistance The gas resistance measurement. Properties | Improve this Doc View Source GasResistance Collected gas resistance measurement. NaN if no measurement was performed. Declaration public ElectricResistance GasResistance { get; } Property Value Type Description UnitsNet.ElectricResistance"
  },
  "devices/Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult.html": {
    "href": "devices/Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult.html",
    "title": "Class Bmp280ReadResult | nanoFramework Documentation",
    "keywords": "Class Bmp280ReadResult Contains a measurement result of a Bmp280 sensor. Inheritance Object Bmp280ReadResult Bme280ReadResult Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bmxx80.ReadResult Assembly : Iot.Device.Bmxx80.dll Syntax public class Bmp280ReadResult Constructors | Improve this Doc View Source Bmp280ReadResult(Temperature, Pressure) Initialize a new instance of the Bmp280ReadResult class. Declaration public Bmp280ReadResult(Temperature temperature, Pressure pressure) Parameters Type Name Description UnitsNet.Temperature temperature The Temperature measurement. UnitsNet.Pressure pressure The Pressure measurement. Properties | Improve this Doc View Source Pressure Collected pressure measurement. Declaration public Pressure Pressure { get; } Property Value Type Description UnitsNet.Pressure | Improve this Doc View Source Temperature Collected temperature measurement. Declaration public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature"
  },
  "devices/Iot.Device.Bmxx80.ReadResult.html": {
    "href": "devices/Iot.Device.Bmxx80.ReadResult.html",
    "title": "Namespace Iot.Device.Bmxx80.ReadResult | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Bmxx80.ReadResult Classes Bme280ReadResult Contains a measurement result of a Bme280 sensor. Bme680ReadResult Contains a measurement result of a Bme280 sensor. Bmp280ReadResult Contains a measurement result of a Bmp280 sensor."
  },
  "devices/Iot.Device.Bmxx80.Sampling.html": {
    "href": "devices/Iot.Device.Bmxx80.Sampling.html",
    "title": "Enum Sampling | nanoFramework Documentation",
    "keywords": "Enum Sampling Oversampling settings. Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax public enum Sampling : byte Remarks Maximum of x2 is recommended for temperature. Fields Name Description HighResolution Oversampling x8. LowPower Oversampling x2. Skipped Skipped (output set to 0x80000). Standard Oversampling x4. UltraHighResolution Oversampling x16. UltraLowPower Oversampling x1."
  },
  "devices/Iot.Device.Bmxx80.StandbyTime.html": {
    "href": "devices/Iot.Device.Bmxx80.StandbyTime.html",
    "title": "Enum StandbyTime | nanoFramework Documentation",
    "keywords": "Enum StandbyTime Controls the inactive duration in normal mode. Namespace : Iot.Device.Bmxx80 Assembly : Iot.Device.Bmxx80.dll Syntax public enum StandbyTime : byte Fields Name Description Ms0_5 0.5 ms. Ms10 10 ms. Ms1000 1,000 ms. Ms125 125 ms. Ms20 20 ms. Ms250 250 ms. Ms500 500 ms. Ms62_5 62.5 ms."
  },
  "devices/Iot.Device.Bno055.AxisMap.html": {
    "href": "devices/Iot.Device.Bno055.AxisMap.html",
    "title": "Enum AxisMap | nanoFramework Documentation",
    "keywords": "Enum AxisMap Axis map Orientation map is from documentation section 3.4 The dot is the one on the chip | Z axis | | / X axis |__/ Y axis / * | / /| _________ / |/ // / _____ // |____________|/ Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax public enum AxisMap Fields Name Description X X coordinate Y Y coordinate Z Z coordinate"
  },
  "devices/Iot.Device.Bno055.AxisSetting.html": {
    "href": "devices/Iot.Device.Bno055.AxisSetting.html",
    "title": "Class AxisSetting | nanoFramework Documentation",
    "keywords": "Class AxisSetting Axis setting for a specific axis Inheritance Object AxisSetting Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax public class AxisSetting Properties | Improve this Doc View Source Axis Axis map Declaration public AxisMap Axis { get; set; } Property Value Type Description AxisMap | Improve this Doc View Source Sign Axis sign Declaration public AxisSign Sign { get; set; } Property Value Type Description AxisSign"
  },
  "devices/Iot.Device.Bno055.AxisSign.html": {
    "href": "devices/Iot.Device.Bno055.AxisSign.html",
    "title": "Enum AxisSign | nanoFramework Documentation",
    "keywords": "Enum AxisSign Axis signs Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax public enum AxisSign Fields Name Description Negative Negative axis sign Positive Positive axis sign"
  },
  "devices/Iot.Device.Bno055.Bno055Sensor.html": {
    "href": "devices/Iot.Device.Bno055.Bno055Sensor.html",
    "title": "Class Bno055Sensor | nanoFramework Documentation",
    "keywords": "Class Bno055Sensor BNO055 - inertial measurement unit (IMU) Inheritance Object Bno055Sensor Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax [Interface(\"BNO055 - inertial measurement unit (IMU)\")] public class Bno055Sensor : IDisposable Constructors | Improve this Doc View Source Bno055Sensor(I2cDevice, OperationMode, Boolean) Create an BNO055 sensor Declaration public Bno055Sensor(I2cDevice i2cDevice, OperationMode operationMode = OperationMode.AccelerometerMagnetometerGyroscopeRelativeOrientation, bool shouldDispose = true) Parameters Type Name Description I2cDevice i2cDevice The I2C Device OperationMode operationMode The operation mode to setup Boolean shouldDispose true to dispose the I2C device at dispose Fields | Improve this Doc View Source DefaultI2cAddress The default I2C Address, page 91 of the main documentation https://ae-bst.resource.bosch.com/media/_tech/media/datasheets/BST-BNO055-DS000.pdf Declaration public const byte DefaultI2cAddress = 40 Field Value Type Description Byte | Improve this Doc View Source SecondI2cAddress This is the second I2C Address. It needs to be activated to be valid Declaration public const byte SecondI2cAddress = 41 Field Value Type Description Byte Properties | Improve this Doc View Source Accelerometer Get the accelerometer Acceleration Vector (100Hz) Three axis of acceleration (gravity + linear motion) Default unit in m/s^2, can be changed for mg Declaration [Telemetry] public Vector3 Accelerometer { get; } Property Value Type Description Vector3 | Improve this Doc View Source Gravity Get the gravity Gravity Vector (100Hz) Three axis of gravitational acceleration (minus any movement) Default unit in m/s^2, can be changed for mg Declaration [Telemetry] public Vector3 Gravity { get; } Property Value Type Description Vector3 | Improve this Doc View Source Gyroscope Get the gyroscope Declaration [Telemetry] public Vector3 Gyroscope { get; } Property Value Type Description Vector3 | Improve this Doc View Source Info Get the information about various sensor system versions and ID Declaration public Info Info { get; } Property Value Type Description Info | Improve this Doc View Source LinearAcceleration Get the linear acceleration Linear Acceleration Vector (100Hz) Three axis of linear acceleration data (acceleration minus gravity) Default unit in m/s^2, can be changed for mg Declaration [Telemetry] public Vector3 LinearAcceleration { get; } Property Value Type Description Vector3 | Improve this Doc View Source Magnetometer Get the Magnetometer Declaration [Telemetry] public Vector3 Magnetometer { get; } Property Value Type Description Vector3 | Improve this Doc View Source OperationMode Get/Set the operation mode Declaration [Property] public OperationMode OperationMode { get; set; } Property Value Type Description OperationMode | Improve this Doc View Source Orientation Get the orientation (Euler Angles) X = Heading, Y = Roll, Z = Pitch Declaration [Telemetry(null, \"Orientation (Euler Angles)\")] public Vector3 Orientation { get; } Property Value Type Description Vector3 | Improve this Doc View Source PowerMode Set/Get the power mode Declaration [Property] public PowerMode PowerMode { get; set; } Property Value Type Description PowerMode | Improve this Doc View Source Quaternion Get the quaternion, unit is 1 Quaternion (unit less) = 2^14 returned result Declaration [Telemetry] public Vector4 Quaternion { get; } Property Value Type Description Vector4 | Improve this Doc View Source Temperature Get the temperature Declaration [Telemetry] public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature | Improve this Doc View Source TemperatureSource Set/Get the temperature source Declaration [Property] public TemperatureSource TemperatureSource { get; set; } Property Value Type Description TemperatureSource | Improve this Doc View Source Units Set/Get the units used. By default, international system is used Declaration [Property] public Units Units { get; set; } Property Value Type Description Units Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetAccelerometerCalibrationData() Get the accelerometer calibration data Declaration [Command] public Vector4 GetAccelerometerCalibrationData() Returns Type Description Vector4 Returns the accelerometers calibration data | Improve this Doc View Source GetAxisMap() Get the Axis map Declaration public AxisSetting[] GetAxisMap() Returns Type Description AxisSetting [] Returns an array where first element is axis X, then Y then Z | Improve this Doc View Source GetCalibrationStatus() Returns the calibration status for the system and sensors Declaration [Command] public CalibrationStatus GetCalibrationStatus() Returns Type Description CalibrationStatus Calibration status | Improve this Doc View Source GetError() Get the latest error Declaration [Telemetry(\"Status\")] public Error GetError() Returns Type Description Error Returns the latest error | Improve this Doc View Source GetGyroscopeCalibrationData() Get the gyroscope calibration data Declaration [Command] public Vector3 GetGyroscopeCalibrationData() Returns Type Description Vector3 X, Y and Z data | Improve this Doc View Source GetInteruptStatus() Get the interupt status Declaration public InteruptStatus GetInteruptStatus() Returns Type Description InteruptStatus | Improve this Doc View Source GetMagnetometerCalibrationData() Get the magnetometer calibration data Declaration [Command] public Vector4 GetMagnetometerCalibrationData() Returns Type Description Vector4 Returns the magnetometer calibration data | Improve this Doc View Source GetStatus() Get the status. If there is an error, GetError() will give more details Declaration [Telemetry(\"Status\")] public Status GetStatus() Returns Type Description Status | Improve this Doc View Source RunSelfTest() Run a self test. In case of error, use GetStatus() and GetError() to get the last error Declaration [Command] public TestResult RunSelfTest() Returns Type Description TestResult Status fo the test | Improve this Doc View Source SetAccelerometerCalibrationData(Vector4) Set the accelerometer calibration data Declaration [Command] public void SetAccelerometerCalibrationData(Vector4 calibrationData) Parameters Type Name Description Vector4 calibrationData Calibration data | Improve this Doc View Source SetAxisMap(AxisSetting, AxisSetting, AxisSetting) Set the Axis map Declaration public void SetAxisMap(AxisSetting x, AxisSetting y, AxisSetting z) Parameters Type Name Description AxisSetting x X axis setting AxisSetting y Y axis setting AxisSetting z Z axis setting | Improve this Doc View Source SetExternalCrystal(Boolean) Set internal or external crystal usage. Note: if you don't have an external crystal, don't use this function Declaration public void SetExternalCrystal(bool external) Parameters Type Name Description Boolean external true to set to external | Improve this Doc View Source SetGyroscopeCalibrationData(Vector3) Set the gyroscope calibration data Declaration [Command] public void SetGyroscopeCalibrationData(Vector3 calibrationData) Parameters Type Name Description Vector3 calibrationData X, Y and Z data | Improve this Doc View Source SetMagnetometerCalibrationData(Vector4) Set the magnetometer calibration data Declaration [Command] public void SetMagnetometerCalibrationData(Vector4 calibrationData) Parameters Type Name Description Vector4 calibrationData Calibration data Implements IDisposable"
  },
  "devices/Iot.Device.Bno055.CalibrationStatus.html": {
    "href": "devices/Iot.Device.Bno055.CalibrationStatus.html",
    "title": "Enum CalibrationStatus | nanoFramework Documentation",
    "keywords": "Enum CalibrationStatus Calibration status contains every variation from 00 to 11 for every sensor. The most interesting one is full success don't try to measure full success for all 4 elements at the same time The magnetometer is the one to really wait for calibration. Calibration is done automatically by the system Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax [Flags] public enum CalibrationStatus Fields Name Description AccelerometerSuccess Accelerometer success GyroscopeSuccess Gyroscope success MagnetometerSuccess Magnetometer success SystemSuccess System success"
  },
  "devices/Iot.Device.Bno055.Error.html": {
    "href": "devices/Iot.Device.Bno055.Error.html",
    "title": "Enum Error | nanoFramework Documentation",
    "keywords": "Enum Error BNO055 error Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax public enum Error Fields Name Description AccelerometerPowerModeNotAvailable Accelerometer power mode not available BnoLowPowerModeNotAvailable BNO055 low power mode not available FusionAlgorithmConfigurationError Fusion algorithm configuration error NoError No error PeripheralInitializationError Peripheral initialization error RegisterMapAddressOutOfRange Register map address out of range RegisterMapValueOutOfRange Register map value out of range RegisterMapWriteError Register map write error SelftTestResultFailed Self test result failed SensorConfigurationError Sensor configuration error SystemInitializationError System initialization error"
  },
  "devices/Iot.Device.Bno055.html": {
    "href": "devices/Iot.Device.Bno055.html",
    "title": "Namespace Iot.Device.Bno055 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Bno055 Classes AxisSetting Axis setting for a specific axis Bno055Sensor BNO055 - inertial measurement unit (IMU) Info Information for the various sensor ID, firmware and bootloader versions Enums AxisMap Axis map Orientation map is from documentation section 3.4 The dot is the one on the chip | Z axis | | / X axis |__/ Y axis / * | / /| _________ / |/ // / _____ // |____________|/ AxisSign Axis signs CalibrationStatus Calibration status contains every variation from 00 to 11 for every sensor. The most interesting one is full success don't try to measure full success for all 4 elements at the same time The magnetometer is the one to really wait for calibration. Calibration is done automatically by the system Error BNO055 error InteruptStatus Interrupt state OperationMode Operation mode PowerMode Power mode Status Status TemperatureSource Temperature success TestResult Test result Units BNO055 unit"
  },
  "devices/Iot.Device.Bno055.Info.html": {
    "href": "devices/Iot.Device.Bno055.Info.html",
    "title": "Class Info | nanoFramework Documentation",
    "keywords": "Class Info Information for the various sensor ID, firmware and bootloader versions Inheritance Object Info Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax public class Info Constructors | Improve this Doc View Source Info(Byte, Byte, Byte, Byte, Version, Version) Instantiates an Info object Chip identifier Accelerometer identifier Magnetometer identifier Gyroscope identifier Firmware version Bootloader version Declaration public Info(byte chipId, byte acceleratorId, byte magnetometerId, byte gyroscopeId, Version firmwareVersion, Version bootloaderVersion) Parameters Type Name Description Byte chipId Byte acceleratorId Byte magnetometerId Byte gyroscopeId Version firmwareVersion Version bootloaderVersion Properties | Improve this Doc View Source AcceleratorId Accelerometer identifier Declaration public byte AcceleratorId { get; set; } Property Value Type Description Byte | Improve this Doc View Source BootloaderVersion Bootloader version Declaration public Version BootloaderVersion { get; set; } Property Value Type Description Version | Improve this Doc View Source ChipId Chip identifier Declaration public byte ChipId { get; set; } Property Value Type Description Byte | Improve this Doc View Source FirmwareVersion Firmware version Declaration public Version FirmwareVersion { get; set; } Property Value Type Description Version | Improve this Doc View Source GyroscopeId Gyroscope identifier Declaration public byte GyroscopeId { get; set; } Property Value Type Description Byte | Improve this Doc View Source MagnetometerId Magnetometer identifier Declaration public byte MagnetometerId { get; set; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Bno055.InteruptStatus.html": {
    "href": "devices/Iot.Device.Bno055.InteruptStatus.html",
    "title": "Enum InteruptStatus | nanoFramework Documentation",
    "keywords": "Enum InteruptStatus Interrupt state Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax [Flags] public enum InteruptStatus Fields Name Description AccelerometerAnyMotionInterupt Accelerometer any motion interrupt AccelerometerHighRateInterupt Accelerometer high rate interrupt AccelerometerNoMotionInterup Accelerometer no motion interrupt GyroscopeHighRateInterupt Gyroscope high rate interrupt GyroscopeInterupt Gyroscope interrupt"
  },
  "devices/Iot.Device.Bno055.OperationMode.html": {
    "href": "devices/Iot.Device.Bno055.OperationMode.html",
    "title": "Enum OperationMode | nanoFramework Documentation",
    "keywords": "Enum OperationMode Operation mode Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax public enum OperationMode Fields Name Description AcceleraterOnly Accelerometer only AccelerometerGyroscope Accelerometer and Gyroscope AccelerometerGyroscopeRelativeOrientation Accelerometer and gyroscope with relative orientation AccelerometerMagnetometer Accelerometer and magnetometer AccelerometerMagnetometerAbsoluteOrientation Accelerometer and magnetometer with absolute orientation AccelerometerMagnetometerGyroscope Accelerometer, magnetometer and gyroscope AccelerometerMagnetometerGyroscopeAbsoluteOrientation Accelerometer and gyroscope with absolute orientation AccelerometerMagnetometerGyroscopeRelativeOrientation Accelerometer and gyroscope with relative orientation AccelerometerMagnetometerRelativeOrientation Accelerometer and magnetometer with relative orientation Config Config GyroscopeOnly Gyroscope only MagnetometerOnly Magnetometer only MegentometerGyroscope Magnetometer and Gyroscope"
  },
  "devices/Iot.Device.Bno055.PowerMode.html": {
    "href": "devices/Iot.Device.Bno055.PowerMode.html",
    "title": "Enum PowerMode | nanoFramework Documentation",
    "keywords": "Enum PowerMode Power mode Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax public enum PowerMode Fields Name Description LowPower Low power mode Normal Normal power mode Suspend Device in suspend mode"
  },
  "devices/Iot.Device.Bno055.Status.html": {
    "href": "devices/Iot.Device.Bno055.Status.html",
    "title": "Enum Status | nanoFramework Documentation",
    "keywords": "Enum Status Status Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax public enum Status Fields Name Description ExcecutingSelftest Executing self test Idle Idle InitializingPeripherals Initializing peripherals SensorFusionAlgorithmRunning Sensor fusion algorithm running SystemError System error SystemInitialization System initialization SystemRunningWithoutFusionAlgorithm System running without fusion algorithm"
  },
  "devices/Iot.Device.Bno055.TemperatureSource.html": {
    "href": "devices/Iot.Device.Bno055.TemperatureSource.html",
    "title": "Enum TemperatureSource | nanoFramework Documentation",
    "keywords": "Enum TemperatureSource Temperature success Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax public enum TemperatureSource Fields Name Description Accelerometer Accelerometer Gyroscope Gyroscope"
  },
  "devices/Iot.Device.Bno055.TestResult.html": {
    "href": "devices/Iot.Device.Bno055.TestResult.html",
    "title": "Enum TestResult | nanoFramework Documentation",
    "keywords": "Enum TestResult Test result Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax [Flags] public enum TestResult Fields Name Description AcceleratorSuccess Accelerometer success GyroscopeSuccess Gyroscope success MagentometerSuccess Magnetometer success McuSuccess MCU success"
  },
  "devices/Iot.Device.Bno055.Units.html": {
    "href": "devices/Iot.Device.Bno055.Units.html",
    "title": "Enum Units | nanoFramework Documentation",
    "keywords": "Enum Units BNO055 unit Namespace : Iot.Device.Bno055 Assembly : Iot.Device.Bno055.dll Syntax [Flags] public enum Units Fields Name Description AccelerationMeterG Acceleration in G AccelerationMeterPerSecond Acceleration in m/s AngularRateDegreePerSecond Angular rate in degrees per second (DPS) AngularRateRotationPerSecond Angular rate in rotations per second (RPS) DataOutputFormatAndroid Data output in Android format DataOutputFormatWindows Data output in Windows format EulerAnglesDegrees Euler angles in degrees EulerAnglesRadians Euler angles in radians TemperatureCelsius Temperature in Celsius TemperatureFarenheit Temperature in Fahrenheit"
  },
  "devices/Iot.Device.Button.ButtonBase.ButtonHoldingDelegate.html": {
    "href": "devices/Iot.Device.Button.ButtonBase.ButtonHoldingDelegate.html",
    "title": "Delegate ButtonBase.ButtonHoldingDelegate | nanoFramework Documentation",
    "keywords": "Delegate ButtonBase.ButtonHoldingDelegate Delegate for button holding. Namespace : Iot.Device.Button Assembly : Iot.Device.Button.dll Syntax public delegate void ButtonHoldingDelegate(object sender, ButtonHoldingEventArgs e); Parameters Type Name Description Object sender ButtonHoldingEventArgs e"
  },
  "devices/Iot.Device.Button.ButtonBase.ButtonPressedDelegate.html": {
    "href": "devices/Iot.Device.Button.ButtonBase.ButtonPressedDelegate.html",
    "title": "Delegate ButtonBase.ButtonPressedDelegate | nanoFramework Documentation",
    "keywords": "Delegate ButtonBase.ButtonPressedDelegate Delegate for button pressed. Namespace : Iot.Device.Button Assembly : Iot.Device.Button.dll Syntax public delegate void ButtonPressedDelegate(object sender, EventArgs e); Parameters Type Name Description Object sender EventArgs e"
  },
  "devices/Iot.Device.Button.ButtonBase.html": {
    "href": "devices/Iot.Device.Button.ButtonBase.html",
    "title": "Class ButtonBase | nanoFramework Documentation",
    "keywords": "Class ButtonBase Base implementation of Button logic. Hardware independent. Inherit for specific hardware handling. Inheritance Object ButtonBase GpioButton Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Button Assembly : Iot.Device.Button.dll Syntax public class ButtonBase : IDisposable Constructors | Improve this Doc View Source ButtonBase() Initialization of the button. Declaration public ButtonBase() | Improve this Doc View Source ButtonBase(TimeSpan, TimeSpan) Initialization of the button. Declaration public ButtonBase(TimeSpan doublePress, TimeSpan holding) Parameters Type Name Description TimeSpan doublePress TimeSpan holding Properties | Improve this Doc View Source IsDoublePressEnabled Define if double press event is enabled or disabled on the button. Declaration public bool IsDoublePressEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsHoldingEnabled Define if holding event is enabled or disabled on the button. Declaration public bool IsHoldingEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsPressed Define if single press event is enabled or disabled on the button. Declaration public bool IsPressed { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose() Public dispose method for IDisposable interface. Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Cleanup resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing | Improve this Doc View Source HandleButtonPressed() Handler for pressing the button. Declaration protected void HandleButtonPressed() | Improve this Doc View Source HandleButtonReleased() Handler for releasing the button. Declaration protected void HandleButtonReleased() Events | Improve this Doc View Source ButtonDown Delegate for button down event. Declaration public event ButtonBase.ButtonPressedDelegate ButtonDown Event Type Type Description ButtonBase.ButtonPressedDelegate | Improve this Doc View Source ButtonUp Delegate for button up event. Declaration public event ButtonBase.ButtonPressedDelegate ButtonUp Event Type Type Description ButtonBase.ButtonPressedDelegate | Improve this Doc View Source DoublePress Delegate for button double pressed event. Declaration public event ButtonBase.ButtonPressedDelegate DoublePress Event Type Type Description ButtonBase.ButtonPressedDelegate | Improve this Doc View Source Holding Delegate for button holding event. Declaration public event ButtonBase.ButtonHoldingDelegate Holding Event Type Type Description ButtonBase.ButtonHoldingDelegate | Improve this Doc View Source Press Delegate for button pressed event. Declaration public event ButtonBase.ButtonPressedDelegate Press Event Type Type Description ButtonBase.ButtonPressedDelegate Implements IDisposable"
  },
  "devices/Iot.Device.Button.ButtonHoldingEventArgs.html": {
    "href": "devices/Iot.Device.Button.ButtonHoldingEventArgs.html",
    "title": "Class ButtonHoldingEventArgs | nanoFramework Documentation",
    "keywords": "Class ButtonHoldingEventArgs Button holding event arguments. Inheritance Object EventArgs ButtonHoldingEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Button Assembly : Iot.Device.Button.dll Syntax public class ButtonHoldingEventArgs : EventArgs Properties | Improve this Doc View Source HoldingState Button holding state. Declaration public ButtonHoldingState HoldingState { get; set; } Property Value Type Description ButtonHoldingState"
  },
  "devices/Iot.Device.Button.ButtonHoldingState.html": {
    "href": "devices/Iot.Device.Button.ButtonHoldingState.html",
    "title": "Enum ButtonHoldingState | nanoFramework Documentation",
    "keywords": "Enum ButtonHoldingState The different states of a button that is being held. Namespace : Iot.Device.Button Assembly : Iot.Device.Button.dll Syntax public enum ButtonHoldingState Fields Name Description Canceled Button holding cancelled. Completed Button holding completed. Started Button holding started."
  },
  "devices/Iot.Device.Button.GpioButton.html": {
    "href": "devices/Iot.Device.Button.GpioButton.html",
    "title": "Class GpioButton | nanoFramework Documentation",
    "keywords": "Class GpioButton GPIO implementation of Button. Inherits from ButtonBase. Inheritance Object ButtonBase GpioButton Implements IDisposable Inherited Members ButtonBase.ButtonUp ButtonBase.ButtonDown ButtonBase.Press ButtonBase.DoublePress ButtonBase.Holding ButtonBase.IsHoldingEnabled ButtonBase.IsDoublePressEnabled ButtonBase.IsPressed ButtonBase.HandleButtonPressed() ButtonBase.HandleButtonReleased() ButtonBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Button Assembly : Iot.Device.Button.dll Syntax public class GpioButton : ButtonBase, IDisposable Constructors | Improve this Doc View Source GpioButton(Int32, GpioController, Boolean, PinMode) Initialization of the button. Declaration public GpioButton(int buttonPin, GpioController gpio = null, bool shouldDispose = true, PinMode pinMode = PinMode.InputPullUp) Parameters Type Name Description Int32 buttonPin GPIO pin of the button. GpioController gpio Gpio Controller. Boolean shouldDispose True to dispose the GpioController. PinMode pinMode Pin mode of the system. | Improve this Doc View Source GpioButton(Int32, TimeSpan, TimeSpan, GpioController, Boolean, PinMode) Initialization of the button. Declaration public GpioButton(int buttonPin, TimeSpan doublePress, TimeSpan holding, GpioController gpio = null, bool shouldDispose = true, PinMode pinMode = PinMode.InputPullUp) Parameters Type Name Description Int32 buttonPin GPIO pin of the button. TimeSpan doublePress Max ticks between button presses to count as doublepress. TimeSpan holding Min ms a button is pressed to count as holding. GpioController gpio Gpio Controller. Boolean shouldDispose True to dispose the GpioController. PinMode pinMode Pin mode of the system. Methods | Improve this Doc View Source Dispose(Boolean) Internal cleanup. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides ButtonBase.Dispose(Boolean) Implements IDisposable"
  },
  "devices/Iot.Device.Button.html": {
    "href": "devices/Iot.Device.Button.html",
    "title": "Namespace Iot.Device.Button | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Button Classes ButtonBase Base implementation of Button logic. Hardware independent. Inherit for specific hardware handling. ButtonHoldingEventArgs Button holding event arguments. GpioButton GPIO implementation of Button. Inherits from ButtonBase. Enums ButtonHoldingState The different states of a button that is being held. Delegates ButtonBase.ButtonHoldingDelegate Delegate for button holding. ButtonBase.ButtonPressedDelegate Delegate for button pressed."
  },
  "devices/Iot.Device.Buzzer.Buzzer.html": {
    "href": "devices/Iot.Device.Buzzer.Buzzer.html",
    "title": "Class Buzzer | nanoFramework Documentation",
    "keywords": "Class Buzzer Simple buzzer. Inheritance Object Buzzer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Buzzer Assembly : Iot.Device.Buzzer.dll Syntax [Interface(\"Simple buzzer\")] public class Buzzer : IDisposable Constructors | Improve this Doc View Source Buzzer(PwmChannel) Create Buzzer class instance with output on specified pin with specified channel using passed PWM controller. Declaration public Buzzer(PwmChannel pwmChannel) Parameters Type Name Description PwmChannel pwmChannel The PWM controller to use during work. | Improve this Doc View Source Buzzer(Int32) Constructs Buzzer instance Declaration public Buzzer(int pinNumber) Parameters Type Name Description Int32 pinNumber Pin connected to buzzer | Improve this Doc View Source Buzzer(Int32, Int32) Create Buzzer class instance with output on specified pin with specified channel. Declaration public Buzzer(int chip, int channel) Parameters Type Name Description Int32 chip The GPIO pin number in case of a software PWM. The chip in case of a hardware PWM. Int32 channel The channel to use in case of a hardware PWM. Methods | Improve this Doc View Source Dispose() Dispose Buzzer. Declaration public void Dispose() | Improve this Doc View Source PlayTone(Double, Int32) Play tone of specific frequency for specified duration. Declaration [Command] public void PlayTone(double frequency, int duration) Parameters Type Name Description Double frequency Tone frequency in Hertz. Int32 duration Playing duration in millisecons. | Improve this Doc View Source StartPlaying(Double) Set new or overwrite previously set frequency and start playing the sound. Declaration [Command] public void StartPlaying(double frequency) Parameters Type Name Description Double frequency Tone frequency in Hertz. | Improve this Doc View Source StopPlaying() Stop playing tone. Declaration [Command] public void StopPlaying() Implements IDisposable"
  },
  "devices/Iot.Device.Buzzer.html": {
    "href": "devices/Iot.Device.Buzzer.html",
    "title": "Namespace Iot.Device.Buzzer | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Buzzer Classes Buzzer Simple buzzer."
  },
  "devices/Iot.Device.Card.CardTransceiver.html": {
    "href": "devices/Iot.Device.Card.CardTransceiver.html",
    "title": "Class CardTransceiver | nanoFramework Documentation",
    "keywords": "Class CardTransceiver Abstract class implementing a specific Write and Read function This class allow to transceive information with the card This class has to be implemented in all RFID/NFC/Card readers So Mifare cards can be used the same way independent of any reader Inheritance Object CardTransceiver Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Card Assembly : Iot.Device.CardRfid.dll Syntax public abstract class CardTransceiver Methods | Improve this Doc View Source ReselectTarget(Byte) Once you have an authentication operation failing with Mifare cards or a read/write, the card stop. TYhe only way to have it back is to send the unselect and anti collision. This function provides this feature Declaration public abstract bool ReselectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber The target number to reselect Returns Type Description Boolean True if success | Improve this Doc View Source ReselectTarget(Byte) Once you have an authentication operation failing with Mifare cards or a read/write, the card stop. TYhe only way to have it back is to send the unselect and anti collision. This function provides this feature Declaration public abstract bool ReselectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber The target number to reselect Returns Type Description Boolean True if success | Improve this Doc View Source Transceive(Byte, SpanByte, SpanByte) This function has to be implemented by all NFC/RFID/Card readers. This function is used in exchange of data with the reader and the cards. Declaration public abstract int Transceive(byte targetNumber, SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description Byte targetNumber Some readers have a notion of target number for the cards as they can read multiple ones SpanByte dataToSend A standardized raw buffer with the command at the position 0 in the array SpanByte dataFromCard If any data are read from the card, they will be put into this array Returns Type Description Int32 -1 in case of error, otherwise the number of bytes read and copied into the dataFromCard array | Improve this Doc View Source Transceive(Byte, SpanByte, SpanByte) This function has to be implemented by all NFC/RFID/Card readers. This function is used in exchange of data with the reader and the cards. Declaration public abstract int Transceive(byte targetNumber, SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description Byte targetNumber Some readers have a notion of target number for the cards as they can read multiple ones SpanByte dataToSend A standardized raw buffer with the command at the position 0 in the array SpanByte dataFromCard If any data are read from the card, they will be put into this array Returns Type Description Int32 -1 in case of error, otherwise the number of bytes read and copied into the dataFromCard array"
  },
  "devices/Iot.Device.Card.ErrorType.html": {
    "href": "devices/Iot.Device.Card.ErrorType.html",
    "title": "Enum ErrorType | nanoFramework Documentation",
    "keywords": "Enum ErrorType The type of error. Namespace : Iot.Device.Card Assembly : Iot.Device.CardRfid.dll Syntax public enum ErrorType Fields Name Description BytesStillAvailable Bytes still available to read CommandNotAllowedAuthenticationMethodBlocked Command not allowed because of authentication CommandNotAllowedConditionsNotSatisfied Command not allowed as some conditions are not satisfied CommandNotAllowedReferenceDataInvalidated Command not allowed because of invalid data InstructionCodeNotSupportedOrInvalid Instruction code not supported or not valid ProcessAbortedChecking Process aborted during checking phase ProcessAbortedExecution Process aborted during execution ProcessCompletedNormal Process completed normally ProcessCompletedWarning Process completed with warning ReferenceDataNotFound Reference data not found StateNonVolatileMemoryChanged Volatile memory changed StateNonVolatileMemoryChangedAuthenticationFailed Authentication failed StateNonVolatileMemoryUnchangedSelectedFileInvalidated Selected file invalidated Success Success = Process completed normally Unknown Unknown error WrongLength Wrong length WrongParameterP1P2FileNotFound File not found with current P1 and P2 WrongParameterP1P2FunctionNotSupported Wrong P1 or P2 parameters WrongParameterP1P2RecordNotFound Record not found with current P1 and P2"
  },
  "devices/Iot.Device.Card.ErrorType_1.html": {
    "href": "devices/Iot.Device.Card.ErrorType_1.html",
    "title": "Enum ErrorType | nanoFramework Documentation",
    "keywords": "Enum ErrorType The type of error. Namespace : Iot.Device.Card Assembly : Iot.Device.CardRfid.dll Syntax public enum ErrorType Fields Name Description BytesStillAvailable Bytes still available to read CommandNotAllowedAuthenticationMethodBlocked Command not allowed because of authentication CommandNotAllowedConditionsNotSatisfied Command not allowed as some conditions are not satisfied CommandNotAllowedReferenceDataInvalidated Command not allowed because of invalid data InstructionCodeNotSupportedOrInvalid Instruction code not supported or not valid ProcessAbortedChecking Process aborted during checking phase ProcessAbortedExecution Process aborted during execution ProcessCompletedNormal Process completed normally ProcessCompletedWarning Process completed with warning ReferenceDataNotFound Reference data not found StateNonVolatileMemoryChanged Volatile memory changed StateNonVolatileMemoryChangedAuthenticationFailed Authentication failed StateNonVolatileMemoryUnchangedSelectedFileInvalidated Selected file invalidated Success Success = Process completed normally Unknown Unknown error WrongLength Wrong length WrongParameterP1P2FileNotFound File not found with current P1 and P2 WrongParameterP1P2FunctionNotSupported Wrong P1 or P2 parameters WrongParameterP1P2RecordNotFound Record not found with current P1 and P2"
  },
  "devices/Iot.Device.Card.html": {
    "href": "devices/Iot.Device.Card.html",
    "title": "Namespace Iot.Device.Card | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Card Classes CardTransceiver Abstract class implementing a specific Write and Read function This class allow to transceive information with the card This class has to be implemented in all RFID/NFC/Card readers So Mifare cards can be used the same way independent of any reader ProcessError Processing error class Enums ErrorType The type of error. ErrorType The type of error. VersionSupported All supported version for the NFC reader TODO: if more readers appear, this can be for sure place in common and more modes can be added VersionSupported All supported version for the NFC reader TODO: if more readers appear, this can be for sure place in common and more modes can be added"
  },
  "devices/Iot.Device.Card.Mifare.AccessSector.html": {
    "href": "devices/Iot.Device.Card.Mifare.AccessSector.html",
    "title": "Enum AccessSector | nanoFramework Documentation",
    "keywords": "Enum AccessSector All access sectors rights for the keys and the access bits Namespace : Iot.Device.Card.Mifare Assembly : Iot.Device.Mifare.dll Syntax [Flags] public enum AccessSector Fields Name Description None No access ReadAccessBitsWithKeyA Read Access Bits With Key A ReadAccessBitsWithKeyB Read Access Bits With Key B ReadKeyB Sometimes the KeyB may be read ReadKeyBWithKeyA Read Key B With Key A WriteAccessBitsWithKeyA Write Access Bits With Key A WriteAccessBitsWithKeyB Write Access Bits With Key B WriteKeyAWithKeyA Write Key A With Key A WriteKeyAWithKeyB Write Key A With Key B WriteKeyBWithKeyA Write Key B With Key A WriteKeyBWithKeyB Write Key B With Key B"
  },
  "devices/Iot.Device.Card.Mifare.AccessType.html": {
    "href": "devices/Iot.Device.Card.Mifare.AccessType.html",
    "title": "Enum AccessType | nanoFramework Documentation",
    "keywords": "Enum AccessType The type of access for the data sectors Namespace : Iot.Device.Card.Mifare Assembly : Iot.Device.Mifare.dll Syntax [Flags] public enum AccessType Fields Name Description DecrementTransferRestoreKeyA Decrement Transfer Restore Key A DecrementTransferRestoreKeyB Decrement Transfer Restore Key B IncrementKeyA Increment Key A IncrementKeyB Increment Key B None None ReadKeyA Read Key A ReadKeyB Read Key B WriteKeyA Write Key A WriteKeyB Write Key B"
  },
  "devices/Iot.Device.Card.Mifare.html": {
    "href": "devices/Iot.Device.Card.Mifare.html",
    "title": "Namespace Iot.Device.Card.Mifare | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Card.Mifare Classes MifareCard A Mifare card class So far only supports the classical 1K cards Triplet Triplet to handle the Bytes 6, 7 and 8 of a sector tailer Enums AccessSector All access sectors rights for the keys and the access bits AccessType The type of access for the data sectors MifareCardCapacity Different storage capacity for Mifare cards MifareCardCommand List of commands available for the Mifare cards"
  },
  "devices/Iot.Device.Card.Mifare.MifareCard.html": {
    "href": "devices/Iot.Device.Card.Mifare.MifareCard.html",
    "title": "Class MifareCard | nanoFramework Documentation",
    "keywords": "Class MifareCard A Mifare card class So far only supports the classical 1K cards Inheritance Object MifareCard Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Card.Mifare Assembly : Iot.Device.Mifare.dll Syntax public class MifareCard Constructors | Improve this Doc View Source MifareCard(CardTransceiver, Byte) Constructor for Mifarecard Declaration public MifareCard(CardTransceiver rfid, byte target) Parameters Type Name Description CardTransceiver rfid A card transceiver class Byte target The target number as some card readers attribute one Properties | Improve this Doc View Source BlockNumber The block number to authenticate or read or write Declaration public byte BlockNumber { get; set; } Property Value Type Description Byte | Improve this Doc View Source Capacity The storage capacity Declaration public MifareCardCapacity Capacity { get; set; } Property Value Type Description MifareCardCapacity | Improve this Doc View Source Command The command to execute on the card Declaration public MifareCardCommand Command { get; set; } Property Value Type Description MifareCardCommand | Improve this Doc View Source Data The Data which has been read or to write for the specific block Declaration public byte[] Data { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source DefaultBlocksNdefKeyA Default block Key A for NDEF card Declaration public static SpanByte DefaultBlocksNdefKeyA { get; } Property Value Type Description SpanByte Remarks See https://www.nxp.com/docs/en/application-note/AN1304.pdf for more information | Improve this Doc View Source DefaultFirstBlockNdefKeyA Default first block Key A for NDEF card Declaration public static SpanByte DefaultFirstBlockNdefKeyA { get; } Property Value Type Description SpanByte Remarks See https://www.nxp.com/docs/en/application-note/AN1304.pdf for more information | Improve this Doc View Source DefaultKeyA Default Key A Declaration public static SpanByte DefaultKeyA { get; } Property Value Type Description SpanByte | Improve this Doc View Source DefaultKeyB Default Key B Declaration public static SpanByte DefaultKeyB { get; } Property Value Type Description SpanByte | Improve this Doc View Source KeyA Key A Used for encryption/decryption Declaration public byte[] KeyA { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source KeyB Key B Used for encryption/decryption Declaration public byte[] KeyB { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source SerialNumber UUID is the Serial Number, called MAC sometimes Declaration public byte[] SerialNumber { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source Target The tag number detected by the reader, only 1 or 2 Declaration public byte Target { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source BlockAccess(Byte, Byte[]) Get the block access information Declaration public AccessType BlockAccess(byte blockNumber, byte[] sectorData) Parameters Type Name Description Byte blockNumber the block number Byte [] sectorData the sector tailer data Returns Type Description AccessType The access type rights | Improve this Doc View Source EncodeDefaultSectorAndBlockTailer() Encode with default value the access sector and tailer blocks Declaration public Triplet EncodeDefaultSectorAndBlockTailer() Returns Type Description Triplet | Improve this Doc View Source EncodeSectorAndClockTailer(AccessSector, AccessType[]) Encode the desired access for the full sector including the block tailer Declaration public Triplet EncodeSectorAndClockTailer(AccessSector accessSector, AccessType[] accessTypes) Parameters Type Name Description AccessSector accessSector The access desired AccessType [] accessTypes An array of 3 AccessType determining access of each block Returns Type Description Triplet The 3 bytes encoding the rights | Improve this Doc View Source EncodeSectorTailer(AccessSector) Get the sector tailer bytes for a specific access sector configuration Declaration public Triplet EncodeSectorTailer(AccessSector accessSector) Parameters Type Name Description AccessSector accessSector the access sector Returns Type Description Triplet the 3 bytes for configuration | Improve this Doc View Source EncodeSectorTailer(Byte, AccessType) Encode the sector tailer access type for a specific block Declaration public Triplet EncodeSectorTailer(byte blockNumber, AccessType accessType) Parameters Type Name Description Byte blockNumber The block sector to encode AccessType accessType The access type to encode Returns Type Description Triplet The encoded sector tailer for the specific block | Improve this Doc View Source EraseSector(SpanByte, SpanByte, Byte, Boolean, Boolean) Erase one sector Declaration public bool EraseSector(SpanByte newKeyA, SpanByte newKeyB, byte sector, bool authenticateWithKeyA, bool resetAccessBytes) Parameters Type Name Description SpanByte newKeyA The new key A, empty to use current one SpanByte newKeyB The new key B, empty to use current one Byte sector The sector number. Refer to Mifare documentation to understand how blocks work especially for Mifare 2K and 4K Boolean authenticateWithKeyA True to authenticate with current Key A, false to authenticate with Key B Boolean resetAccessBytes True to reset all the access bytes Returns Type Description Boolean True if success Remarks Sector 0 can't be fully erase, only the blocks 1 and 2 will be erased | Improve this Doc View Source FormatNdef(SpanByte) Format the Card to NDEF Declaration public bool FormatNdef(SpanByte keyB = default(SpanByte)) Parameters Type Name Description SpanByte keyB The key B to be used for formatting, if empty, will use the default key B Returns Type Description Boolean True if success | Improve this Doc View Source GetNumberBlocks() Get the number of blocks for a specific sector Declaration public int GetNumberBlocks() Returns Type Description Int32 The number of blocks for this specific sector | Improve this Doc View Source GetNumberBlocks(Byte) Get the number of blocks for a specific sector Declaration public byte GetNumberBlocks(byte sectorNumber) Parameters Type Name Description Byte sectorNumber Input sector number Returns Type Description Byte The number of blocks for this specific sector | Improve this Doc View Source GetNumberSectors() Get the number of sectors Declaration public int GetNumberSectors() Returns Type Description Int32 | Improve this Doc View Source IsFormattedNdef() Check if the card formated to NDEF Declaration public bool IsFormattedNdef() Returns Type Description Boolean True if NDEF formated Remarks It will only check the first 2 block of the first sector and that the GPB is set properly | Improve this Doc View Source IsSectorBlock(Byte) Is it a block sector? Declaration public bool IsSectorBlock(byte blockNumber) Parameters Type Name Description Byte blockNumber Input block number Returns Type Description Boolean True if it is a sector block | Improve this Doc View Source ReselectCard() Select the card. Needed if authentication or read/write failed Declaration public bool ReselectCard() Returns Type Description Boolean True if success | Improve this Doc View Source RunMifareCardCommand() Run the last setup command. In case of reading bytes, they are automatically pushed into the Data property Declaration public int RunMifareCardCommand() Returns Type Description Int32 -1 if the process fails otherwise the number of bytes read | Improve this Doc View Source SectorTailerAccess(Byte, Byte[]) Get the sector tailer access information Declaration public AccessSector SectorTailerAccess(byte blockNumber, byte[] sectorData) Parameters Type Name Description Byte blockNumber the block sector number Byte [] sectorData The full sector data to decode Returns Type Description AccessSector the access sector rights | Improve this Doc View Source SetCapacity(UInt16, Byte) From the ATAQ ans SAK data find common card capacity Declaration public void SetCapacity(ushort ATAQ, byte SAK) Parameters Type Name Description UInt16 ATAQ The ATQA response Byte SAK The SAK response | Improve this Doc View Source TryReadNdefMessage(out NdefMessage) Try to read a NDEF Message from a Mifare card Declaration public bool TryReadNdefMessage(out NdefMessage message) Parameters Type Name Description NdefMessage message The NDEF message Returns Type Description Boolean True if success | Improve this Doc View Source WriteDataBlock(Byte) Perform a write using the 16 bytes present in Data on a specific block Declaration public bool WriteDataBlock(byte block) Parameters Type Name Description Byte block The block number to write Returns Type Description Boolean True if success Remarks You will need to be authenticated properly before | Improve this Doc View Source WriteNdefMessage(NdefMessage, Boolean) Write an NDEF Message Declaration public bool WriteNdefMessage(NdefMessage message, bool writeKeyA = true) Parameters Type Name Description NdefMessage message The NDEF Message to write Boolean writeKeyA True to write with Key A Returns Type Description Boolean True if success"
  },
  "devices/Iot.Device.Card.Mifare.MifareCardCapacity.html": {
    "href": "devices/Iot.Device.Card.Mifare.MifareCardCapacity.html",
    "title": "Enum MifareCardCapacity | nanoFramework Documentation",
    "keywords": "Enum MifareCardCapacity Different storage capacity for Mifare cards Namespace : Iot.Device.Card.Mifare Assembly : Iot.Device.Mifare.dll Syntax public enum MifareCardCapacity Fields Name Description Mifare1K Mifare 1K Mifare2K Mifare 2K Mifare300 Mifare 300 Mifare4K Mifare 4K Unknown Unknown"
  },
  "devices/Iot.Device.Card.Mifare.MifareCardCommand.html": {
    "href": "devices/Iot.Device.Card.Mifare.MifareCardCommand.html",
    "title": "Enum MifareCardCommand | nanoFramework Documentation",
    "keywords": "Enum MifareCardCommand List of commands available for the Mifare cards Namespace : Iot.Device.Card.Mifare Assembly : Iot.Device.Mifare.dll Syntax public enum MifareCardCommand Fields Name Description AuthenticationA Authentication A for Key A AuthenticationB Authentication B for Key B Decrementation Decrementation Incrementation Incrementation Read16Bytes Read 16 Bytes Restore Restore Transfer Transfer Write16Bytes Write 16 Bytes Write4Bytes Write 4 Bytes"
  },
  "devices/Iot.Device.Card.Mifare.Triplet.html": {
    "href": "devices/Iot.Device.Card.Mifare.Triplet.html",
    "title": "Class Triplet | nanoFramework Documentation",
    "keywords": "Class Triplet Triplet to handle the Bytes 6, 7 and 8 of a sector tailer Inheritance Object Triplet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Card.Mifare Assembly : Iot.Device.Mifare.dll Syntax public class Triplet Constructors | Improve this Doc View Source Triplet(Byte, Byte, Byte) Constructor Declaration public Triplet(byte b6, byte b7, byte b8) Parameters Type Name Description Byte b6 Byte 6 Byte b7 Byte 7 Byte b8 Byte 8 Properties | Improve this Doc View Source B6 Byte 6 Declaration public byte B6 { get; set; } Property Value Type Description Byte | Improve this Doc View Source B7 Byte 7 Declaration public byte B7 { get; } Property Value Type Description Byte | Improve this Doc View Source B8 Byte 8 Declaration public byte B8 { get; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Card.ProcessError.html": {
    "href": "devices/Iot.Device.Card.ProcessError.html",
    "title": "Class ProcessError | nanoFramework Documentation",
    "keywords": "Class ProcessError Processing error class Inheritance Object ProcessError Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Card Assembly : Iot.Device.CardRfid.dll Syntax public class ProcessError Constructors | Improve this Doc View Source ProcessError(SpanByte) Constructor to process the error Declaration public ProcessError(SpanByte errorToProcess) Parameters Type Name Description SpanByte errorToProcess A span of byte | Improve this Doc View Source ProcessError(SpanByte) Constructor to process the error Declaration public ProcessError(SpanByte errorToProcess) Parameters Type Name Description SpanByte errorToProcess A span of byte Properties | Improve this Doc View Source CorrectLegnthOrBytesAvailable Complementary data for some errors Declaration public byte CorrectLegnthOrBytesAvailable { get; } Property Value Type Description Byte | Improve this Doc View Source CorrectLegnthOrBytesAvailable Complementary data for some errors Declaration public byte CorrectLegnthOrBytesAvailable { get; } Property Value Type Description Byte | Improve this Doc View Source ErrorType The Error type Declaration public ErrorType ErrorType { get; } Property Value Type Description ErrorType | Improve this Doc View Source ErrorType The Error type Declaration public ErrorType ErrorType { get; } Property Value Type Description ErrorType"
  },
  "devices/Iot.Device.Card.Ultralight.AuthenticationConfiguration.html": {
    "href": "devices/Iot.Device.Card.Ultralight.AuthenticationConfiguration.html",
    "title": "Class AuthenticationConfiguration | nanoFramework Documentation",
    "keywords": "Class AuthenticationConfiguration Contains the Authentication Configuration elements Inheritance Object AuthenticationConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Card.Ultralight Assembly : Iot.Device.Ultralight.dll Syntax public class AuthenticationConfiguration Properties | Improve this Doc View Source AuthenticationPageRequirement Gets or sets the authentication page requirement Declaration public byte AuthenticationPageRequirement { get; set; } Property Value Type Description Byte Remarks If the page is higher than the capacity, it means no authentication required. | Improve this Doc View Source IsReadWriteAuthenticationRequired Is Read Write Authentication Required Declaration public bool IsReadWriteAuthenticationRequired { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsWritingLocked Is user configuration permanently locked against write access, except PWD and PACK Declaration public bool IsWritingLocked { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MaximumNumberOfPossibleTries Maximum number of possible try, 0 = disabled, 1 to 7 enabled Declaration public byte MaximumNumberOfPossibleTries { get; set; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Card.Ultralight.Configuration.html": {
    "href": "devices/Iot.Device.Card.Ultralight.Configuration.html",
    "title": "Class Configuration | nanoFramework Documentation",
    "keywords": "Class Configuration The different configuration elements Inheritance Object Configuration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Card.Ultralight Assembly : Iot.Device.Ultralight.dll Syntax public class Configuration Constructors | Improve this Doc View Source Configuration() Create a default Configuration Declaration public Configuration() Properties | Improve this Doc View Source Authentication Gets or sets the Authentication configuration. Declaration public AuthenticationConfiguration Authentication { get; set; } Property Value Type Description AuthenticationConfiguration | Improve this Doc View Source FieldDetectPin Field Detect Pin mode Declaration public FieldDetectPin FieldDetectPin { get; set; } Property Value Type Description FieldDetectPin | Improve this Doc View Source IsSleepEnabled Is the sleep mode enabled Declaration public bool IsSleepEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsStrongModulation Is the strong Mirror Modulation Mode enabled Declaration public bool IsStrongModulation { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Mirror Gets or sets the Mirror configuration. Declaration public MirrorConfiguration Mirror { get; set; } Property Value Type Description MirrorConfiguration | Improve this Doc View Source NfcCounter Gets or sets the NFC counter configuration Declaration public NfcCounterConfiguration NfcCounter { get; set; } Property Value Type Description NfcCounterConfiguration"
  },
  "devices/Iot.Device.Card.Ultralight.FieldDetectPin.html": {
    "href": "devices/Iot.Device.Card.Ultralight.FieldDetectPin.html",
    "title": "Enum FieldDetectPin | nanoFramework Documentation",
    "keywords": "Enum FieldDetectPin Field detection pin mode Namespace : Iot.Device.Card.Ultralight Assembly : Iot.Device.Ultralight.dll Syntax public enum FieldDetectPin Fields Name Description FieldPresence Enabled when a field is present FirstStateOfFrame Enabled by first State of Frame so start of the communication None None TagSelectopn Enabled when a tag is selected"
  },
  "devices/Iot.Device.Card.Ultralight.html": {
    "href": "devices/Iot.Device.Card.Ultralight.html",
    "title": "Namespace Iot.Device.Card.Ultralight | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Card.Ultralight Classes AuthenticationConfiguration Contains the Authentication Configuration elements Configuration The different configuration elements MirrorConfiguration The Mirror Configuration NfcCounterConfiguration NFC counter configuration class UltralightCard A Ultralight card class Enums FieldDetectPin Field detection pin mode MirrorType The type of mirror activated UltralightCardType Capacity of the Ultralight card UltralightCommand List of commands available for the Mifare cards"
  },
  "devices/Iot.Device.Card.Ultralight.MirrorConfiguration.html": {
    "href": "devices/Iot.Device.Card.Ultralight.MirrorConfiguration.html",
    "title": "Class MirrorConfiguration | nanoFramework Documentation",
    "keywords": "Class MirrorConfiguration The Mirror Configuration Inheritance Object MirrorConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Card.Ultralight Assembly : Iot.Device.Ultralight.dll Syntax public class MirrorConfiguration Constructors | Improve this Doc View Source MirrorConfiguration() Create a default Mirror Configuration Declaration public MirrorConfiguration() Fields | Improve this Doc View Source NfcCounterMirrorSize The size in bytes of the NFC counter Mirror Declaration public const byte NfcCounterMirrorSize = 6 Field Value Type Description Byte | Improve this Doc View Source UidAndNfcCounterMirrorSize The size in bytes when both mirror counter are activated = 14 + 1 + 6 Declaration public const byte UidAndNfcCounterMirrorSize = 21 Field Value Type Description Byte | Improve this Doc View Source UidMirrorSize The size in bytes of the UID Mirror Declaration public const byte UidMirrorSize = 14 Field Value Type Description Byte Properties | Improve this Doc View Source MirrorType Gets or sets the Mirror Type Declaration public MirrorType MirrorType { get; set; } Property Value Type Description MirrorType | Improve this Doc View Source Page Gets or sets the Mirror Page Declaration public byte Page { get; set; } Property Value Type Description Byte | Improve this Doc View Source Position Gets or sets the Mirror Position in the page from 0 to 3 Declaration public byte Position { get; set; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Card.Ultralight.MirrorType.html": {
    "href": "devices/Iot.Device.Card.Ultralight.MirrorType.html",
    "title": "Enum MirrorType | nanoFramework Documentation",
    "keywords": "Enum MirrorType The type of mirror activated Namespace : Iot.Device.Card.Ultralight Assembly : Iot.Device.Ultralight.dll Syntax [Flags] public enum MirrorType Fields Name Description NfcCounter NFC counter activated None No mirror activated UidAscii UID ASCII activated"
  },
  "devices/Iot.Device.Card.Ultralight.NfcCounterConfiguration.html": {
    "href": "devices/Iot.Device.Card.Ultralight.NfcCounterConfiguration.html",
    "title": "Class NfcCounterConfiguration | nanoFramework Documentation",
    "keywords": "Class NfcCounterConfiguration NFC counter configuration class Inheritance Object NfcCounterConfiguration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Card.Ultralight Assembly : Iot.Device.Ultralight.dll Syntax public class NfcCounterConfiguration Properties | Improve this Doc View Source IsEnabled Is the Counter enabled Declaration public bool IsEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsPasswordProtected Is the counter password protected Declaration public bool IsPasswordProtected { get; set; } Property Value Type Description Boolean"
  },
  "devices/Iot.Device.Card.Ultralight.UltralightCard.html": {
    "href": "devices/Iot.Device.Card.Ultralight.UltralightCard.html",
    "title": "Class UltralightCard | nanoFramework Documentation",
    "keywords": "Class UltralightCard A Ultralight card class Inheritance Object UltralightCard Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Card.Ultralight Assembly : Iot.Device.Ultralight.dll Syntax public class UltralightCard Constructors | Improve this Doc View Source UltralightCard(CardTransceiver, Byte) Constructor for Ultralight Declaration public UltralightCard(CardTransceiver rfid, byte target) Parameters Type Name Description CardTransceiver rfid A card transceiver class Byte target The target number as some card readers attribute one Fields | Improve this Doc View Source DefaultPassword Default password used for write and read Declaration public static readonly byte[] DefaultPassword Field Value Type Description Byte [] Properties | Improve this Doc View Source AuthenticationKey Authentication key Declaration public byte[] AuthenticationKey { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source BlockNumber The block number to authenticate or read or write Declaration public byte BlockNumber { get; set; } Property Value Type Description Byte | Improve this Doc View Source Command The command to execute on the card Declaration public UltralightCommand Command { get; set; } Property Value Type Description UltralightCommand | Improve this Doc View Source Counter The counter to read or increment Declaration public byte Counter { get; set; } Property Value Type Description Byte | Improve this Doc View Source Data The Data which has been read or to write for the specific block Declaration public byte[] Data { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source NdefCapacity The NDEF capacity in bytes Declaration public int NdefCapacity { get; } Property Value Type Description Int32 | Improve this Doc View Source NumberBlocks Get the number of blocks for a specific sector Declaration public int NumberBlocks { get; } Property Value Type Description Int32 | Improve this Doc View Source SerialNumber UUID is the Serial Number, called MAC sometimes Declaration public byte[] SerialNumber { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source Target The tag number detected by the reader, only 1 or 2 Declaration public byte Target { get; set; } Property Value Type Description Byte | Improve this Doc View Source UltralightCardType The type of card Declaration public UltralightCardType UltralightCardType { get; } Property Value Type Description UltralightCardType Methods | Improve this Doc View Source FormatNdef(SpanByte) Format the Card to NDEF Declaration public bool FormatNdef(SpanByte authenticationKey = default(SpanByte)) Parameters Type Name Description SpanByte authenticationKey An authentication key if authentication is required. Returns Type Description Boolean True if success | Improve this Doc View Source GetCounter(Byte) Get the counter value Declaration public int GetCounter(byte counter = 255) Parameters Type Name Description Byte counter A valid counter value, can vary depending on the card. 0xFF will ignore the value and use the one set in Counter Returns Type Description Int32 The counter value or -1 if any error | Improve this Doc View Source GetSignature() Get the chip signature Declaration public byte[] GetSignature() Returns Type Description Byte [] The signature or an empty array | Improve this Doc View Source GetVersion() Get the version data Declaration public byte[] GetVersion() Returns Type Description Byte [] Empty byte array if error, otherwise a 8 bytes array | Improve this Doc View Source IsFormattedNdef() Check if the card formated to NDEF Declaration public bool IsFormattedNdef() Returns Type Description Boolean True if NDEF formated Remarks It will only check the first 2 block of the first sector and that the GPB is set properly | Improve this Doc View Source IsPageReadOnly(Byte) Check if a page is read only Declaration public bool IsPageReadOnly(byte page) Parameters Type Name Description Byte page The page number Returns Type Description Boolean True is read only | Improve this Doc View Source IsUltralightCard(UInt16, Byte) Check if this is a Ultralight card type Declaration public static bool IsUltralightCard(ushort ATQA, byte SAK) Parameters Type Name Description UInt16 ATQA The ATQA Byte SAK The SAK Returns Type Description Boolean True if this is an Ultralight | Improve this Doc View Source ProcessAuthentication(SpanByte) Process authentication Declaration public bool ProcessAuthentication(SpanByte authenticationKkey) Parameters Type Name Description SpanByte authenticationKkey An authentication key Returns Type Description Boolean True if success Remarks Depending on the type of authentication, the process will be done transparently | Improve this Doc View Source ReadFast(Byte, Byte) Read at once multiple pages blocks of 4 bytes Declaration public byte[] ReadFast(byte startPage, byte endPage) Parameters Type Name Description Byte startPage The start block Byte endPage The end block Returns Type Description Byte [] A buffer with the read bytes | Improve this Doc View Source ReselectCard() Select the card. Needed if authentication or read/write failed Declaration public bool ReselectCard() Returns Type Description Boolean True if success | Improve this Doc View Source RunUltralightCommand() Run the last setup command. In case of reading bytes, they are automatically pushed into the Data property Declaration public int RunUltralightCommand() Returns Type Description Int32 -1 if the process fails otherwise the number of bytes read | Improve this Doc View Source SetPassword(SpanByte) Set the password, the AuthenticationKey is used as the old password Declaration public bool SetPassword(SpanByte newAuthenticationKkey) Parameters Type Name Description SpanByte newAuthenticationKkey The new authentication key Returns Type Description Boolean True if success | Improve this Doc View Source TryGetConfiguration(out Configuration) Try to get the configuration Declaration public bool TryGetConfiguration(out Configuration configuration) Parameters Type Name Description Configuration configuration The detailed configuration Returns Type Description Boolean | Improve this Doc View Source TryReadNdefMessage(out NdefMessage) Try to read a NDEF Message from a Mifare card Declaration public bool TryReadNdefMessage(out NdefMessage message) Parameters Type Name Description NdefMessage message The NDEF message Returns Type Description Boolean True if success | Improve this Doc View Source WriteConfiguration(Configuration) Write the configuration Declaration public bool WriteConfiguration(Configuration configuration) Parameters Type Name Description Configuration configuration The configuration to write Returns Type Description Boolean True if success Remarks An authentication has to happen and will use the credentials stored | Improve this Doc View Source WriteDataBlock(Byte) Perform a write using the 16 bytes present in Data on a specific block Declaration public bool WriteDataBlock(byte block) Parameters Type Name Description Byte block The block number to write Returns Type Description Boolean True if success Remarks You will need to be authenticated properly before | Improve this Doc View Source WriteNdefMessage(NdefMessage) Write an NDEF Message Declaration public bool WriteNdefMessage(NdefMessage message) Parameters Type Name Description NdefMessage message The NDEF Message to write Returns Type Description Boolean True if success"
  },
  "devices/Iot.Device.Card.Ultralight.UltralightCardType.html": {
    "href": "devices/Iot.Device.Card.Ultralight.UltralightCardType.html",
    "title": "Enum UltralightCardType | nanoFramework Documentation",
    "keywords": "Enum UltralightCardType Capacity of the Ultralight card Namespace : Iot.Device.Card.Ultralight Assembly : Iot.Device.Ultralight.dll Syntax public enum UltralightCardType Fields Name Description MifareUltralight The older Mifare Ultralight model UltralightC Ultralight C contactless ticket UltralightEV1MF0UL1101 Ultralight EV1 MF0UL1101 UltralightEV1MF0UL2101 Ultralight EV1 MF0UL2101 UltralightEV1MF0ULH1101 Ultralight EV1 MF0ULH1101 UltralightEV1MF0ULH2101 Ultralight EV1 MF0ULH2101 UltralightNtag203 Ultralight NAG203 144 bytes NDEF UltralightNtag210 Ultralight NTAG210 UltralightNtag212 Ultralight NTAG212 UltralightNtag213 Ultralight NTAG213 144 bytes NDEF UltralightNtag213F Ultralight NTAG213F UltralightNtag215 Ultralight NTAG215 1504 bytes NDEF UltralightNtag216 Ultralight NTAG216 888 bytes NDEF UltralightNtag216F Ultralight NTAG216 UltralightNtagI2cNT3H1101 Ultralight NTAG I2C NT3H1101 UltralightNtagI2cNT3H1101W0 Ultralight NTAG I2C NT3H1101W0 UltralightNtagI2cNT3H1201W0 Ultralight NTAG I2C NT3H1201W0 UltralightNtagI2cNT3H2101 Ultralight NTAG I2C NT3H2101 UltralightNtagI2cNT3H2111W0 Ultralight NTAG I2C NT3H2111W0 UltralightNtagI2cNT3H2211W0 Ultralight NTAG I2C NT3H2211W0 Unknown Unknown"
  },
  "devices/Iot.Device.Card.Ultralight.UltralightCommand.html": {
    "href": "devices/Iot.Device.Card.Ultralight.UltralightCommand.html",
    "title": "Enum UltralightCommand | nanoFramework Documentation",
    "keywords": "Enum UltralightCommand List of commands available for the Mifare cards Namespace : Iot.Device.Card.Ultralight Assembly : Iot.Device.Ultralight.dll Syntax public enum UltralightCommand Fields Name Description GetVersion Get the NTAG version IncreaseCounter Increase he 24 bit counter PasswordAuthentication Password authentication with 4 bytes Read16Bytes Read 16 Bytes ReadCounter Read the current value of the NFC one way counter ReadFast Read multiple pages at once ReadSignature Read the ECC specific 32 byte signature ThreeDsAuthenticationPart1 For Ultralight C 3DS authentication ThreeDsAuthenticationPart2 For Ultralight C 3DS authentication Write4Bytes Write 4 Bytes WriteCompatible Write 16 Bytes but only last significant 4 bytes are written"
  },
  "devices/Iot.Device.Card.VersionSupported.html": {
    "href": "devices/Iot.Device.Card.VersionSupported.html",
    "title": "Enum VersionSupported | nanoFramework Documentation",
    "keywords": "Enum VersionSupported All supported version for the NFC reader TODO: if more readers appear, this can be for sure place in common and more modes can be added Namespace : Iot.Device.Card Assembly : Iot.Device.CardRfid.dll Syntax [Flags] public enum VersionSupported Fields Name Description Iso18092 Support for Iso 18092 IsoIec14443TypeA Support for Iso/Iec 14443 TypeA IsoIec14443TypeB Support for Iso/Iec 14443 TypeB"
  },
  "devices/Iot.Device.Card.VersionSupported_1.html": {
    "href": "devices/Iot.Device.Card.VersionSupported_1.html",
    "title": "Enum VersionSupported | nanoFramework Documentation",
    "keywords": "Enum VersionSupported All supported version for the NFC reader TODO: if more readers appear, this can be for sure place in common and more modes can be added Namespace : Iot.Device.Card Assembly : Iot.Device.CardRfid.dll Syntax [Flags] public enum VersionSupported Fields Name Description Iso18092 Support for Iso 18092 IsoIec14443TypeA Support for Iso/Iec 14443 TypeA IsoIec14443TypeB Support for Iso/Iec 14443 TypeB"
  },
  "devices/Iot.Device.Ccs811.Ccs811Sensor.html": {
    "href": "devices/Iot.Device.Ccs811.Ccs811Sensor.html",
    "title": "Class Ccs811Sensor | nanoFramework Documentation",
    "keywords": "Class Ccs811Sensor Ultra-Low Power Digital Gas Sensor for Monitoring Indoor Air Quality Documentation can be found here: https://www.sciosense.com/products/environmental-sensors/ccs811-gas-sensor-solution/ Inheritance Object Ccs811Sensor Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ccs811 Assembly : Iot.Device.Ccs811.dll Syntax public class Ccs811Sensor : IDisposable Constructors | Improve this Doc View Source Ccs811Sensor(I2cDevice, Int32, Int32, Int32, Boolean) The CCS811 sensor constructor Declaration public Ccs811Sensor(I2cDevice i2cDevice, int pinWake = -1, int pinInterruption = -1, int pinReset = -1, bool shouldDispose = true) Parameters Type Name Description I2cDevice i2cDevice A valid I2C device Int32 pinWake An awake pin, it is optional, this pin can be set to the ground if the sensor is always on Int32 pinInterruption An interruption pin when a measurement is ready, best use when you specify a threshold Int32 pinReset An optional hard reset pin Boolean shouldDispose Should the GPIO controller be disposed at the end Fields | Improve this Doc View Source I2cFirstAddress The first default I2C address when the Address pin is put to low Declaration public const int I2cFirstAddress = 90 Field Value Type Description Int32 | Improve this Doc View Source I2cSecondAddress The second default I2C address when the Address pin is put to high Declaration public const int I2cSecondAddress = 91 Field Value Type Description Int32 | Improve this Doc View Source I2cTypicalFrequency The typical operating speed for the bus Note that minimum is 10 KHz and the maximum is 400 KHz The device can operate in Stretching mode is the transfer is too fast. This stretching may not be well supported in all the hardware, in case of issue, it is recommended to lower the operating frequency Declaration public const int I2cTypicalFrequency = 100000 Field Value Type Description Int32 Properties | Improve this Doc View Source ApplicationVersion Get the application version Declaration public Version ApplicationVersion { get; } Property Value Type Description Version | Improve this Doc View Source BaselineAlgorithmCalculation Get or set the encoded version of the current baseline used in Algorithm Calculations Declaration public ushort BaselineAlgorithmCalculation { get; set; } Property Value Type Description UInt16 Remarks A previously stored value may be written back to this two byte register and the Algorithms will use the new value in its calculations(until it adjusts it as part of its internal Automatic Baseline Correction). Please refer to documentation to understand when to restore a previous baseline: https://www.sciosense.com/wp-content/uploads/2020/01/Application-Note-Baseline-Save-and-Restore-on-CCS811.pdf | Improve this Doc View Source BootloaderVersion Get the boot loader version Declaration public Version BootloaderVersion { get; } Property Value Type Description Version | Improve this Doc View Source Error Get the error Declaration public Error Error { get; } Property Value Type Description Error | Improve this Doc View Source HardwareIdentification Get the hardware identification, it has to be 0x81 Declaration public byte HardwareIdentification { get; } Property Value Type Description Byte | Improve this Doc View Source HardwareVersion Hardware version should be 0x1X, any X seems valid Declaration public byte HardwareVersion { get; } Property Value Type Description Byte | Improve this Doc View Source InterruptEnable Is the hardware interrupt enabled Declaration public bool InterruptEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDataReady Do we have data ready to read? Declaration public bool IsDataReady { get; } Property Value Type Description Boolean | Improve this Doc View Source OperationMode Set or get the operation mode Declaration public OperationMode OperationMode { get; set; } Property Value Type Description OperationMode | Improve this Doc View Source WakeEnable Is the wake feature enabled Declaration public bool WakeEnable { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose() Dispose the sensor Declaration public void Dispose() | Improve this Doc View Source SetEnvironmentData(Temperature, RelativeHumidity) Set the environmental data, this is impacting the equivalent calculation of the gas. Declaration public void SetEnvironmentData(Temperature temperature, RelativeHumidity humidity) Parameters Type Name Description UnitsNet.Temperature temperature The temperature UnitsNet.RelativeHumidity humidity The relative humidity, best to use Percent from 0 to 100 | Improve this Doc View Source SetThreshold(VolumeConcentration, VolumeConcentration) Set the threshold for the equivalent CO2. The pinInterrupt should be existing so interruptions are activated. If not, then the function will return false Declaration public bool SetThreshold(VolumeConcentration lowEquivalentCO2, VolumeConcentration highEquivalentCO2) Parameters Type Name Description UnitsNet.VolumeConcentration lowEquivalentCO2 The low value for the threshold UnitsNet.VolumeConcentration highEquivalentCO2 The high value for the threshold Returns Type Description Boolean True if success Remarks Difference between the low and high value should be more than 50. This is called the hysteresis value. | Improve this Doc View Source TryReadGasData(out VolumeConcentration, out VolumeConcentration) Read the equivalent CO2 in ppm and equivalent Total Volatile Compound in ppb Declaration public bool TryReadGasData(out VolumeConcentration equivalentCO2, out VolumeConcentration equivalentTotalVolatileOrganicCompound) Parameters Type Name Description UnitsNet.VolumeConcentration equivalentCO2 The equivalent CO2 (eCO2) output range for CCS811 is from 400ppm up to 29206ppm. UnitsNet.VolumeConcentration equivalentTotalVolatileOrganicCompound The equivalent Total Volatile Organic Compound (eTVOC) output range for CCS811 is from 0ppb up to 32768ppb Returns Type Description Boolean True if success | Improve this Doc View Source TryReadGasData(out VolumeConcentration, out VolumeConcentration, out ElectricCurrent, out Int32) Read the equivalent CO2 in ppm and equivalent Total Volatile Compound in ppb Declaration public bool TryReadGasData(out VolumeConcentration equivalentCO2, out VolumeConcentration equivalentTotalVolatileOrganicCompound, out ElectricCurrent rawCurrentSelected, out int rawAdcReading) Parameters Type Name Description UnitsNet.VolumeConcentration equivalentCO2 The equivalent CO2 (eCO2) output range for CCS811 is from 400ppm up to 29206ppm. UnitsNet.VolumeConcentration equivalentTotalVolatileOrganicCompound The equivalent Total Volatile Organic Compound (eTVOC) output range for CCS811 is from 0ppb up to 32768ppb UnitsNet.ElectricCurrent rawCurrentSelected Raw data containing the value of the current through the sensor(0μA to 63μA) Int32 rawAdcReading Raw data containing the readings of the voltage across the sensor with the selected current(1023 = 1.65V) where 1023 is the maximum value Returns Type Description Boolean True if success Events | Improve this Doc View Source MeasurementReady The event handler for the measurement Declaration public event Ccs811Sensor.MeasurementReadyHandler MeasurementReady Event Type Type Description Ccs811Sensor.MeasurementReadyHandler Implements IDisposable"
  },
  "devices/Iot.Device.Ccs811.Ccs811Sensor.MeasurementReadyHandler.html": {
    "href": "devices/Iot.Device.Ccs811.Ccs811Sensor.MeasurementReadyHandler.html",
    "title": "Delegate Ccs811Sensor.MeasurementReadyHandler | nanoFramework Documentation",
    "keywords": "Delegate Ccs811Sensor.MeasurementReadyHandler Event raised when interruption pin is selected Namespace : Iot.Device.Ccs811 Assembly : Iot.Device.Ccs811.dll Syntax public delegate void MeasurementReadyHandler(object sender, MeasurementArgs args); Parameters Type Name Description Object sender This sensor MeasurementArgs args The measurement"
  },
  "devices/Iot.Device.Ccs811.Error.html": {
    "href": "devices/Iot.Device.Ccs811.Error.html",
    "title": "Enum Error | nanoFramework Documentation",
    "keywords": "Enum Error The possible errors from the error register Namespace : Iot.Device.Ccs811 Assembly : Iot.Device.Ccs811.dll Syntax [Flags] public enum Error Fields Name Description HeaterCurrentFault The Heater current in the CCS811 is not in range HeaterVoltageFault The Heater voltage is not being applied correctly MaximumSensorResistanceReached The sensor resistance measurement has reached or exceeded the maximum range MeasurementModeInvalid The CCS811 received an I²C request to write an unsupported mode to MEAS_MODE NoError No error ReadRegisterInvalid The CCS811 received an I²C read request to a mailbox ID that is invalid WriteRegisterInvalid The CCS811 received an I²C write request addressed to this station but with invalid register address ID"
  },
  "devices/Iot.Device.Ccs811.html": {
    "href": "devices/Iot.Device.Ccs811.html",
    "title": "Namespace Iot.Device.Ccs811 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ccs811 Classes Ccs811Sensor Ultra-Low Power Digital Gas Sensor for Monitoring Indoor Air Quality Documentation can be found here: https://www.sciosense.com/products/environmental-sensors/ccs811-gas-sensor-solution/ MeasurementArgs Arguments of the Measurement Threshold event Contains the measurements done and potential error Enums Error The possible errors from the error register OperationMode Modes of Operation Delegates Ccs811Sensor.MeasurementReadyHandler Event raised when interruption pin is selected"
  },
  "devices/Iot.Device.Ccs811.MeasurementArgs.html": {
    "href": "devices/Iot.Device.Ccs811.MeasurementArgs.html",
    "title": "Class MeasurementArgs | nanoFramework Documentation",
    "keywords": "Class MeasurementArgs Arguments of the Measurement Threshold event Contains the measurements done and potential error Inheritance Object MeasurementArgs Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ccs811 Assembly : Iot.Device.Ccs811.dll Syntax public class MeasurementArgs Properties | Improve this Doc View Source EquivalentCO2 Equivalent CO2, best is to use PartsPerMilion for a readable range Declaration public VolumeConcentration EquivalentCO2 { get; set; } Property Value Type Description UnitsNet.VolumeConcentration | Improve this Doc View Source EquivalentTotalVolatileOrganicCompound Equivalent Total Volatile Organic Compound, best is to use PartsPerBilion for a readable range Declaration public VolumeConcentration EquivalentTotalVolatileOrganicCompound { get; set; } Property Value Type Description UnitsNet.VolumeConcentration | Improve this Doc View Source MeasurementSuccess True if measurement is successful Declaration public bool MeasurementSuccess { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RawAdcReading Raw ADC reading Declaration public int RawAdcReading { get; set; } Property Value Type Description Int32 | Improve this Doc View Source RawCurrentSelected Raw current selected, best to use MicroAmpere for a readable range Declaration public ElectricCurrent RawCurrentSelected { get; set; } Property Value Type Description UnitsNet.ElectricCurrent"
  },
  "devices/Iot.Device.Ccs811.OperationMode.html": {
    "href": "devices/Iot.Device.Ccs811.OperationMode.html",
    "title": "Enum OperationMode | nanoFramework Documentation",
    "keywords": "Enum OperationMode Modes of Operation Namespace : Iot.Device.Ccs811 Assembly : Iot.Device.Ccs811.dll Syntax public enum OperationMode Fields Name Description ConstantPower1Second Mode 1: Constant power mode, IAQ measurement every second ConstantPower250Millisecond Mode 4: Constant power mode, sensor measurement every 250ms Idle Mode 0: Idle, low current mode LowPower60Second Mode 3: Low power pulse heating mode IAQ measurement every 60 seconds PluseHeating10Second Mode 2: Pulse heating mode IAQ measurement every 10 seconds"
  },
  "devices/Iot.Device.Common.html": {
    "href": "devices/Iot.Device.Common.html",
    "title": "Namespace Iot.Device.Common | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Common Classes NumberHelper Helpers for number. WeatherHelper Helpers for weather"
  },
  "devices/Iot.Device.Common.NumberHelper.html": {
    "href": "devices/Iot.Device.Common.NumberHelper.html",
    "title": "Class NumberHelper | nanoFramework Documentation",
    "keywords": "Class NumberHelper Helpers for number. Inheritance Object NumberHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Common Assembly : Iot.Device.Common.NumberHelper.dll Syntax public static class NumberHelper Methods | Improve this Doc View Source Bcd2Dec(Byte) BCD To decimal Declaration public static int Bcd2Dec(byte bcd) Parameters Type Name Description Byte bcd BCD Code Returns Type Description Int32 decimal | Improve this Doc View Source Bcd2Dec(Byte[]) BCD To decimal Declaration public static int Bcd2Dec(byte[] bcds) Parameters Type Name Description Byte [] bcds BCD Code Returns Type Description Int32 decimal | Improve this Doc View Source Dec2Bcd(Int32) Decimal To BCD Declaration public static byte Dec2Bcd(int dec) Parameters Type Name Description Int32 dec decimal Returns Type Description Byte BCD Code"
  },
  "devices/Iot.Device.Common.WeatherHelper.html": {
    "href": "devices/Iot.Device.Common.WeatherHelper.html",
    "title": "Class WeatherHelper | nanoFramework Documentation",
    "keywords": "Class WeatherHelper Helpers for weather Inheritance Object WeatherHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Common Assembly : Iot.Device.Common.WeatherHelper.dll Syntax public static class WeatherHelper Fields | Improve this Doc View Source MeanSeaLevel The mean sea-level pressure (MSLP) is the average atmospheric pressure at mean sea level Declaration public static readonly Pressure MeanSeaLevel Field Value Type Description UnitsNet.Pressure Methods | Improve this Doc View Source CalculateActualVaporPressure(Temperature, RelativeHumidity) Calculates the actual vapor pressure. Declaration public static Pressure CalculateActualVaporPressure(Temperature airTemperature, RelativeHumidity relativeHumidity) Parameters Type Name Description UnitsNet.Temperature airTemperature The dry air temperature UnitsNet.RelativeHumidity relativeHumidity The relative humidity (RH) Returns Type Description UnitsNet.Pressure The actual vapor pressure | Improve this Doc View Source CalculateAltitude(Pressure) Calculates the altitude in meters from the given pressure. Assumes mean sea-level pressure and temperature of 15C. Declaration public static Length CalculateAltitude(Pressure pressure) Parameters Type Name Description UnitsNet.Pressure pressure The pressure at the point for which altitude is being calculated Returns Type Description UnitsNet.Length The altitude | Improve this Doc View Source CalculateAltitude(Pressure, Pressure) Calculates the altitude in meters from the given pressure and sea-level pressure. Assumes temperature of 15C. Declaration public static Length CalculateAltitude(Pressure pressure, Pressure seaLevelPressure) Parameters Type Name Description UnitsNet.Pressure pressure The pressure at the point for which altitude is being calculated UnitsNet.Pressure seaLevelPressure The sea-level pressure Returns Type Description UnitsNet.Length The altitude | Improve this Doc View Source CalculateAltitude(Pressure, Pressure, Temperature) Calculates the altitude in meters from the given pressure, sea-level pressure and air temperature Declaration public static Length CalculateAltitude(Pressure pressure, Pressure seaLevelPressure, Temperature airTemperature) Parameters Type Name Description UnitsNet.Pressure pressure The pressure at the point for which altitude is being calculated UnitsNet.Pressure seaLevelPressure The sea-level pressure UnitsNet.Temperature airTemperature The dry air temperature at the point for which altitude is being calculated Returns Type Description UnitsNet.Length The altitude | Improve this Doc View Source CalculateAltitude(Pressure, Temperature) Calculates the altitude in meters from the given pressure and air temperature. Assumes mean sea-level pressure. Declaration public static Length CalculateAltitude(Pressure pressure, Temperature airTemperature) Parameters Type Name Description UnitsNet.Pressure pressure The pressure at the point for which altitude is being calculated UnitsNet.Temperature airTemperature The dry air temperature at the point for which altitude is being calculated Returns Type Description UnitsNet.Length The altitude | Improve this Doc View Source CalculateBarometricPressure(Pressure, Temperature, Length) Calculates the barometric pressure from a raw reading, using the reduction formula from the german met service. This is a more complex variant of CalculateSeaLevelPressure(Pressure, Length, Temperature) . It gives the value that a weather station gives for a particular area and is also used in meteorological charts. You are at 650m over sea and measure a pressure of 948.7 hPa and a temperature of 24.0°C. The met service will show that you are within a high-pressure area of around 1020 hPa. Declaration public static Pressure CalculateBarometricPressure(Pressure measuredPressure, Temperature measuredTemperature, Length measurementAltitude) Parameters Type Name Description UnitsNet.Pressure measuredPressure Measured pressure at the observation point UnitsNet.Temperature measuredTemperature Measured temperature at the observation point UnitsNet.Length measurementAltitude Height over sea level of the observation point (to be really precise, geopotential heights have to be used above ~750m). Do not use the height obtained by calling CalculateAltitude(Pressure) or any of its overloads, since what would use redundant data. Returns Type Description UnitsNet.Pressure The barometric pressure at the point of observation Remarks From https://de.wikipedia.org/wiki/Barometrische_Höhenformel#Anwendungen | Improve this Doc View Source CalculateBarometricPressure(Pressure, Temperature, Length, RelativeHumidity) Calculates the barometric pressure from a raw reading, using the reduction formula from the german met service. This is a more complex variant of CalculateSeaLevelPressure(Pressure, Length, Temperature) . It gives the value that a weather station gives for a particular area and is also used in meteorological charts. Use this method if you also have the relative humidity. Declaration public static Pressure CalculateBarometricPressure(Pressure measuredPressure, Temperature measuredTemperature, Length measurementAltitude, RelativeHumidity relativeHumidity) Parameters Type Name Description UnitsNet.Pressure measuredPressure Measured pressure at the observation point UnitsNet.Temperature measuredTemperature Measured temperature at the observation point UnitsNet.Length measurementAltitude Height over sea level of the observation point (to be really precise, geopotential heights have to be used above ~750m) UnitsNet.RelativeHumidity relativeHumidity Relative humidity at point of measurement Returns Type Description UnitsNet.Pressure The barometric pressure at the point of observation Remarks From https://de.wikipedia.org/wiki/Barometrische_Höhenformel#Anwendungen | Improve this Doc View Source CalculateBarometricPressure(Pressure, Temperature, Pressure, Length) Calculates the barometric pressure from a raw reading, using the reduction formula from the german met service. This is a more complex variant of CalculateSeaLevelPressure(Pressure, Length, Temperature) . It gives the value that a weather station gives for a particular area and is also used in meteorological charts. You are at 650m over sea and measure a pressure of 948.7 hPa and a temperature of 24.0°C. The met service will show that you are within a high-pressure area of around 1020 hPa. Declaration public static Pressure CalculateBarometricPressure(Pressure measuredPressure, Temperature measuredTemperature, Pressure vaporPressure, Length measurementAltitude) Parameters Type Name Description UnitsNet.Pressure measuredPressure Measured pressure at the observation point UnitsNet.Temperature measuredTemperature Measured temperature at the observation point UnitsNet.Pressure vaporPressure Vapor pressure, meteorologic definition UnitsNet.Length measurementAltitude Height over sea level of the observation point (to be really precise, geopotential heights have to be used above ~750m) Returns Type Description UnitsNet.Pressure The barometric pressure at the point of observation Remarks From https://de.wikipedia.org/wiki/Barometrische_Höhenformel#Anwendungen | Improve this Doc View Source CalculateDewPoint(Temperature, RelativeHumidity) Calculates the dew point. Declaration public static Temperature CalculateDewPoint(Temperature airTemperature, RelativeHumidity relativeHumidity) Parameters Type Name Description UnitsNet.Temperature airTemperature The dry air temperature UnitsNet.RelativeHumidity relativeHumidity The relative humidity (RH) Returns Type Description UnitsNet.Temperature The dew point Remarks Source https://en.wikipedia.org/wiki/Dew_point | Improve this Doc View Source CalculateHeatIndex(Temperature, RelativeHumidity) The heat index (or apparent temperature) is used to measure the amount of discomfort during the summer months when heat and humidity often combine to make it feel hotter than it actually is. The heat index is usually used for afternoon high temperatures. Declaration public static Temperature CalculateHeatIndex(Temperature airTemperature, RelativeHumidity relativeHumidity) Parameters Type Name Description UnitsNet.Temperature airTemperature The dry air temperature UnitsNet.RelativeHumidity relativeHumidity The relative humidity (RH) Returns Type Description UnitsNet.Temperature The heat index, also known as the apparent temperature | Improve this Doc View Source CalculatePressure(Pressure, Length, Temperature) Calculates the approximate absolute pressure from given sea-level pressure, altitude and air temperature. Declaration public static Pressure CalculatePressure(Pressure seaLevelPressure, Length altitude, Temperature airTemperature) Parameters Type Name Description UnitsNet.Pressure seaLevelPressure The sea-level pressure UnitsNet.Length altitude The altitude in meters at the point for which pressure is being calculated UnitsNet.Temperature airTemperature The air temperature at the point for which pressure is being calculated Returns Type Description UnitsNet.Pressure The estimated absolute pressure at the given altitude | Improve this Doc View Source CalculateSaturatedVaporPressureOverIce(Temperature) Calculates the saturated vapor pressure for a given air temperature over ice. The formula used is valid for temperatures between -100°C and +0°C. Declaration public static Pressure CalculateSaturatedVaporPressureOverIce(Temperature airTemperature) Parameters Type Name Description UnitsNet.Temperature airTemperature The dry air temperature Returns Type Description UnitsNet.Pressure The saturated vapor pressure Remarks From https://de.wikibooks.org/wiki/Tabellensammlung_Chemie/_Stoffdaten_Wasser , after D. Sonntag (1982) | Improve this Doc View Source CalculateSaturatedVaporPressureOverWater(Temperature) Calculates the saturated vapor pressure for a given air temperature over water. The formula used is valid for temperatures between -100°C and +100°C. Declaration public static Pressure CalculateSaturatedVaporPressureOverWater(Temperature airTemperature) Parameters Type Name Description UnitsNet.Temperature airTemperature The dry air temperature Returns Type Description UnitsNet.Pressure The saturated vapor pressure Remarks From https://de.wikibooks.org/wiki/Tabellensammlung_Chemie/_Stoffdaten_Wasser , after D. Sonntag (1982) | Improve this Doc View Source CalculateSeaLevelPressure(Pressure, Length, Temperature) Calculates the approximate sea-level pressure from given absolute pressure, altitude and air temperature. Declaration public static Pressure CalculateSeaLevelPressure(Pressure pressure, Length altitude, Temperature airTemperature) Parameters Type Name Description UnitsNet.Pressure pressure The air pressure at the point of measurement UnitsNet.Length altitude The altitude at the point of the measurement UnitsNet.Temperature airTemperature The air temperature Returns Type Description UnitsNet.Pressure The estimated absolute sea-level pressure Remarks CalculatePressure(Pressure, Length, Temperature) solved for sea level pressure | Improve this Doc View Source CalculateTemperature(Pressure, Pressure, Length) Calculates the temperature gradient for the given pressure difference Declaration public static Temperature CalculateTemperature(Pressure pressure, Pressure seaLevelPressure, Length altitude) Parameters Type Name Description UnitsNet.Pressure pressure The air pressure at the point for which temperature is being calculated UnitsNet.Pressure seaLevelPressure The sea-level pressure UnitsNet.Length altitude The altitude in meters at the point for which temperature is being calculated Returns Type Description UnitsNet.Temperature The standard temperature at the given altitude, when the given pressure difference is known Remarks CalculatePressure(Pressure, Length, Temperature) solved for temperature"
  },
  "devices/Iot.Device.DAC.AD5328.html": {
    "href": "devices/Iot.Device.DAC.AD5328.html",
    "title": "Class AD5328 | nanoFramework Documentation",
    "keywords": "Class AD5328 Driver for the AD5328 DAC. Inheritance Object AD5328 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.DAC Assembly : Iot.Device.AD5328.dll Syntax public class AD5328 : IDisposable Constructors | Improve this Doc View Source AD5328(SpiDevice, ElectricPotential, ElectricPotential) Initializes a new instance of the AD5328 device. Declaration public AD5328(SpiDevice spiDevice, ElectricPotential referenceVoltageA, ElectricPotential referenceVoltageB) Parameters Type Name Description SpiDevice spiDevice The SPI device used for communication. UnitsNet.ElectricPotential referenceVoltageA The reference voltage for the first 4 channels UnitsNet.ElectricPotential referenceVoltageB The reference voltage for the last 4 channels Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source SetVoltage(UInt16, ElectricPotential) Sets the voltage of a certain channel Declaration public void SetVoltage(ushort channel, ElectricPotential voltage) Parameters Type Name Description UInt16 channel The channel number. Zero based. channel A = 0 UnitsNet.ElectricPotential voltage The voltage Implements IDisposable"
  },
  "devices/Iot.Device.DAC.html": {
    "href": "devices/Iot.Device.DAC.html",
    "title": "Namespace Iot.Device.DAC | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.DAC Classes AD5328 Driver for the AD5328 DAC."
  },
  "devices/Iot.Device.DCMotor.DCMotor.html": {
    "href": "devices/Iot.Device.DCMotor.DCMotor.html",
    "title": "Class DCMotor | nanoFramework Documentation",
    "keywords": "Class DCMotor Direct current (DC) motor Inheritance Object DCMotor DCMotorWithStartStop Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.DCMotor Assembly : Iot.Device.DCMotor.dll Syntax public abstract class DCMotor : IDisposable Constructors | Improve this Doc View Source DCMotor(GpioController, Boolean) Constructs generic DCMotor instance Declaration protected DCMotor(GpioController controller, bool shouldDispose) Parameters Type Name Description GpioController controller GpioController related with operations on pins Boolean shouldDispose True to dispose the Gpio Controller | Improve this Doc View Source DCMotor(GpioController, Boolean) Constructs generic DCMotor instance Declaration protected DCMotor(GpioController controller, bool shouldDispose) Parameters Type Name Description GpioController controller GpioController related with operations on pins Boolean shouldDispose True to dispose the Gpio Controller Properties | Improve this Doc View Source Controller GpioController related with operations on pins Declaration protected GpioController Controller { get; set; } Property Value Type Description GpioController | Improve this Doc View Source Controller GpioController related with operations on pins Declaration protected GpioController Controller { get; set; } Property Value Type Description GpioController | Improve this Doc View Source Speed Gets or sets the speed of the motor. Range is -1..1 or 0..1 for 1-pin connection. 1 means maximum speed, 0 means no movement and -1 means movement in opposite direction. Declaration public abstract double Speed { get; set; } Property Value Type Description Double | Improve this Doc View Source Speed Gets or sets the speed of the motor. Range is -1..1 or 0..1 for 1-pin connection. 1 means maximum speed, 0 means no movement and -1 means movement in opposite direction. Declaration public abstract double Speed { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Create(PwmChannel) Creates DCMotor instance using only one pin which allows to control speed in one direction. Declaration public static DCMotor Create(PwmChannel speedControlChannel) Parameters Type Name Description PwmChannel speedControlChannel PwmChannel used to control the speed of the motor Returns Type Description DCMotor DCMotor instance Remarks PWM pin speedControlChannel can be connected to either enable pin of the H-bridge. or directly to the one of two inputs related with the motor direction (if H-bridge allows inputs to change frequently). Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(PwmChannel) Creates DCMotor instance using only one pin which allows to control speed in one direction. Declaration public static DCMotor Create(PwmChannel speedControlChannel) Parameters Type Name Description PwmChannel speedControlChannel PwmChannel used to control the speed of the motor Returns Type Description DCMotor DCMotor instance Remarks PWM pin speedControlChannel can be connected to either enable pin of the H-bridge. or directly to the one of two inputs related with the motor direction (if H-bridge allows inputs to change frequently). Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(PwmChannel, Int32, GpioController, Boolean, Boolean) Creates DCMotor instance using two pins which allows to control speed in both directions. Declaration public static DCMotor Create(PwmChannel speedControlChannel, int directionPin, GpioController controller = null, bool shouldDispose = true, bool singleBiDirectionPin = false) Parameters Type Name Description PwmChannel speedControlChannel PwmChannel used to control the speed of the motor Int32 directionPin Pin used to control the direction of the motor GpioController controller GpioController related to the directionPin Boolean shouldDispose True to dispose the Gpio Controller Boolean singleBiDirectionPin True if a controller with one direction input is used, false if a controller with two direction inputs is used Returns Type Description DCMotor DCMotor instance Remarks speedControlChannel should be connected to the one of two inputs related with the motor direction (if H-bridge allows inputs to change frequently), or to PWM input if a controller with one direction input is used. directionPin should be connected to H-bridge input corresponding to one of the motor inputs. or to direction input if a controller with one direction input is used. Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(PwmChannel, Int32, GpioController, Boolean, Boolean) Creates DCMotor instance using two pins which allows to control speed in both directions. Declaration public static DCMotor Create(PwmChannel speedControlChannel, int directionPin, GpioController controller = null, bool shouldDispose = true, bool singleBiDirectionPin = false) Parameters Type Name Description PwmChannel speedControlChannel PwmChannel used to control the speed of the motor Int32 directionPin Pin used to control the direction of the motor GpioController controller GpioController related to the directionPin Boolean shouldDispose True to dispose the Gpio Controller Boolean singleBiDirectionPin True if a controller with one direction input is used, false if a controller with two direction inputs is used Returns Type Description DCMotor DCMotor instance Remarks speedControlChannel should be connected to the one of two inputs related with the motor direction (if H-bridge allows inputs to change frequently), or to PWM input if a controller with one direction input is used. directionPin should be connected to H-bridge input corresponding to one of the motor inputs. or to direction input if a controller with one direction input is used. Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(PwmChannel, Int32, Int32, GpioController, Boolean) Creates DCMotor instance using three pins which allows to control speed in both directions. Declaration public static DCMotor Create(PwmChannel speedControlChannel, int directionPin, int otherDirectionPin, GpioController controller = null, bool shouldDispose = true) Parameters Type Name Description PwmChannel speedControlChannel PwmChannel used to control the speed of the motor Int32 directionPin First pin used to control the direction of the motor Int32 otherDirectionPin Second pin used to control the direction of the motor GpioController controller GpioController related to directionPin and otherDirectionPin Boolean shouldDispose True to dispose the Gpio Controller Returns Type Description DCMotor DCMotor instance Remarks When speed is non-zero the value of otherDirectionPin will always be opposite to that of directionPin . speedControlChannel should be connected to enable pin of the H-bridge. directionPin should be connected to H-bridge input corresponding to one of the motor inputs. otherDirectionPin should be connected to H-bridge input corresponding to the remaining motor input. Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(PwmChannel, Int32, Int32, GpioController, Boolean) Creates DCMotor instance using three pins which allows to control speed in both directions. Declaration public static DCMotor Create(PwmChannel speedControlChannel, int directionPin, int otherDirectionPin, GpioController controller = null, bool shouldDispose = true) Parameters Type Name Description PwmChannel speedControlChannel PwmChannel used to control the speed of the motor Int32 directionPin First pin used to control the direction of the motor Int32 otherDirectionPin Second pin used to control the direction of the motor GpioController controller GpioController related to directionPin and otherDirectionPin Boolean shouldDispose True to dispose the Gpio Controller Returns Type Description DCMotor DCMotor instance Remarks When speed is non-zero the value of otherDirectionPin will always be opposite to that of directionPin . speedControlChannel should be connected to enable pin of the H-bridge. directionPin should be connected to H-bridge input corresponding to one of the motor inputs. otherDirectionPin should be connected to H-bridge input corresponding to the remaining motor input. Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(Int32, GpioController, Boolean) Creates DCMotor instance using only one pin which allows to control speed in one direction. Declaration public static DCMotor Create(int speedControlPin, GpioController controller = null, bool shouldDispose = true) Parameters Type Name Description Int32 speedControlPin Pin used to control the speed of the motor with software PWM (frequency will default to 50Hz) GpioController controller GpioController related to the speedControlPin Boolean shouldDispose True to dispose the Gpio Controller Returns Type Description DCMotor DCMotor instance Remarks speedControlPin can be connected to either enable pin of the H-bridge. or directly to the on of two inputs related with the motor direction (if H-bridge allows inputs to change frequently). Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(Int32, GpioController, Boolean) Creates DCMotor instance using only one pin which allows to control speed in one direction. Declaration public static DCMotor Create(int speedControlPin, GpioController controller = null, bool shouldDispose = true) Parameters Type Name Description Int32 speedControlPin Pin used to control the speed of the motor with software PWM (frequency will default to 50Hz) GpioController controller GpioController related to the speedControlPin Boolean shouldDispose True to dispose the Gpio Controller Returns Type Description DCMotor DCMotor instance Remarks speedControlPin can be connected to either enable pin of the H-bridge. or directly to the on of two inputs related with the motor direction (if H-bridge allows inputs to change frequently). Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(Int32, Int32, GpioController, Boolean, Boolean) Creates DCMotor instance using two pins which allows to control speed in both directions. Declaration public static DCMotor Create(int speedControlPin, int directionPin, GpioController controller = null, bool shouldDispose = true, bool singleBiDirectionPin = false) Parameters Type Name Description Int32 speedControlPin Pin used to control the speed of the motor with software PWM (frequency will default to 50Hz) Int32 directionPin Pin used to control the direction of the motor GpioController controller GPIO controller related to speedControlPin and directionPin Boolean shouldDispose True to dispose the Gpio Controller Boolean singleBiDirectionPin True if a controller with one direction input is used, false if a controller with two direction inputs is used Returns Type Description DCMotor DCMotor instance Remarks speedControlPin should be connected to the one of two inputs related with the motor direction (if H-bridge allows inputs to change frequently), or to PWM input if a controller with one direction input is used. directionPin should be connected to H-bridge input corresponding to one of the motor inputs. or to direction input if a controller with one direction input is used. Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(Int32, Int32, GpioController, Boolean, Boolean) Creates DCMotor instance using two pins which allows to control speed in both directions. Declaration public static DCMotor Create(int speedControlPin, int directionPin, GpioController controller = null, bool shouldDispose = true, bool singleBiDirectionPin = false) Parameters Type Name Description Int32 speedControlPin Pin used to control the speed of the motor with software PWM (frequency will default to 50Hz) Int32 directionPin Pin used to control the direction of the motor GpioController controller GPIO controller related to speedControlPin and directionPin Boolean shouldDispose True to dispose the Gpio Controller Boolean singleBiDirectionPin True if a controller with one direction input is used, false if a controller with two direction inputs is used Returns Type Description DCMotor DCMotor instance Remarks speedControlPin should be connected to the one of two inputs related with the motor direction (if H-bridge allows inputs to change frequently), or to PWM input if a controller with one direction input is used. directionPin should be connected to H-bridge input corresponding to one of the motor inputs. or to direction input if a controller with one direction input is used. Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(Int32, Int32, Int32, GpioController, Boolean) Creates DCMotor instance using three pins which allows to control speed in both directions. Declaration public static DCMotor Create(int speedControlPin, int directionPin, int otherDirectionPin, GpioController controller = null, bool shouldDispose = true) Parameters Type Name Description Int32 speedControlPin Pin used to control the speed of the motor with software PWM (frequency will default to 50Hz) Int32 directionPin First pin used to control the direction of the motor Int32 otherDirectionPin Second pin used to control the direction of the motor GpioController controller GpioController related to speedControlPin , directionPin and otherDirectionPin Boolean shouldDispose True to dispose the Gpio Controller Returns Type Description DCMotor DCMotor instance Remarks When speed is non-zero the value of otherDirectionPin will always be opposite to that of directionPin PWM pin speedControlPin should be connected to enable pin of the H-bridge. directionPin should be connected to H-bridge input corresponding to one of the motor inputs. otherDirectionPin should be connected to H-bridge input corresponding to the remaining motor input. Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Create(Int32, Int32, Int32, GpioController, Boolean) Creates DCMotor instance using three pins which allows to control speed in both directions. Declaration public static DCMotor Create(int speedControlPin, int directionPin, int otherDirectionPin, GpioController controller = null, bool shouldDispose = true) Parameters Type Name Description Int32 speedControlPin Pin used to control the speed of the motor with software PWM (frequency will default to 50Hz) Int32 directionPin First pin used to control the direction of the motor Int32 otherDirectionPin Second pin used to control the direction of the motor GpioController controller GpioController related to speedControlPin , directionPin and otherDirectionPin Boolean shouldDispose True to dispose the Gpio Controller Returns Type Description DCMotor DCMotor instance Remarks When speed is non-zero the value of otherDirectionPin will always be opposite to that of directionPin PWM pin speedControlPin should be connected to enable pin of the H-bridge. directionPin should be connected to H-bridge input corresponding to one of the motor inputs. otherDirectionPin should be connected to H-bridge input corresponding to the remaining motor input. Connecting motor directly to GPIO pin is not recommended and may damage your board. | Improve this Doc View Source Dispose() Releases the resources used by the DCMotor instance. Declaration public virtual void Dispose() | Improve this Doc View Source Dispose() Releases the resources used by the DCMotor instance. Declaration public virtual void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.DCMotor.DCMotorWithStartStop.html": {
    "href": "devices/Iot.Device.DCMotor.DCMotorWithStartStop.html",
    "title": "Class DCMotorWithStartStop | nanoFramework Documentation",
    "keywords": "Class DCMotorWithStartStop Direct current (DC) motor with Start/Stop Inheritance Object DCMotor DCMotorWithStartStop Implements IDisposable Inherited Members DCMotor.Controller DCMotor.Create(PwmChannel) DCMotor.Create(Int32, GpioController, Boolean) DCMotor.Create(PwmChannel, Int32, GpioController, Boolean, Boolean) DCMotor.Create(Int32, Int32, GpioController, Boolean, Boolean) DCMotor.Create(PwmChannel, Int32, Int32, GpioController, Boolean) DCMotor.Create(Int32, Int32, Int32, GpioController, Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.DCMotor Assembly : Iot.Device.DCMotor.dll Syntax public class DCMotorWithStartStop : DCMotor, IDisposable Constructors | Improve this Doc View Source DCMotorWithStartStop(DCMotor) Constructs instance with added Start() and Stop() as additional protection Declaration public DCMotorWithStartStop(DCMotor innerMotor) Parameters Type Name Description DCMotor innerMotor Crate DCMotor instance Properties | Improve this Doc View Source Enabled Get or Set motor status. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Speed Gets or sets the speed of the motor. Range is -1..1 or 0..1 for 1-pin connection. 1 means maximum speed, 0 means no movement and -1 means movement in opposite direction. Declaration public override double Speed { get; set; } Property Value Type Description Double Overrides DCMotor.Speed Methods | Improve this Doc View Source Dispose() Releases the resources used by the DCMotor instance. Declaration public override void Dispose() Overrides DCMotor.Dispose() | Improve this Doc View Source Start() Enable motor operation. Declaration public void Start() | Improve this Doc View Source Stop() Disable motor operation. Declaration public void Stop() Implements IDisposable"
  },
  "devices/Iot.Device.DCMotor.html": {
    "href": "devices/Iot.Device.DCMotor.html",
    "title": "Namespace Iot.Device.DCMotor | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.DCMotor Classes DCMotor Direct current (DC) motor DCMotorWithStartStop Direct current (DC) motor with Start/Stop"
  },
  "devices/Iot.Device.DHTxx.Dht10.html": {
    "href": "devices/Iot.Device.DHTxx.Dht10.html",
    "title": "Class Dht10 | nanoFramework Documentation",
    "keywords": "Class Dht10 Temperature and Humidity Sensor DHT10 Inheritance Object DhtBase Dht10 Implements IDisposable Inherited Members DhtBase._readBuff DhtBase._pin DhtBase._shouldDispose DhtBase._i2cDevice DhtBase._controller DhtBase.IsLastReadSuccessful DhtBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.DHTxx Assembly : Iot.Device.Dhtxx.dll Syntax public class Dht10 : DhtBase, IDisposable Constructors | Improve this Doc View Source Dht10(I2cDevice) Create a DHT10 sensor through I2C Declaration public Dht10(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice I2C Device Fields | Improve this Doc View Source DefaultI2cAddress DHT10 Default I2C Address Declaration public const byte DefaultI2cAddress = 56 Field Value Type Description Byte Properties | Improve this Doc View Source Humidity Get the last read of relative humidity in percentage Declaration public override RelativeHumidity Humidity { get; } Property Value Type Description UnitsNet.RelativeHumidity Overrides DhtBase.Humidity Remarks If last read was not successfull, it returns double.NaN | Improve this Doc View Source Temperature Get the last read temperature Declaration public override Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Overrides DhtBase.Temperature Remarks If last read was not successfull, it returns double.NaN Implements IDisposable"
  },
  "devices/Iot.Device.DHTxx.Dht11.html": {
    "href": "devices/Iot.Device.DHTxx.Dht11.html",
    "title": "Class Dht11 | nanoFramework Documentation",
    "keywords": "Class Dht11 Temperature and Humidity Sensor DHT11 Inheritance Object DhtBase Dht11 Implements IDisposable Inherited Members DhtBase._readBuff DhtBase._pin DhtBase._shouldDispose DhtBase._i2cDevice DhtBase._controller DhtBase.IsLastReadSuccessful DhtBase.Temperature DhtBase.Humidity DhtBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.DHTxx Assembly : Iot.Device.Dhtxx.dll Syntax public class Dht11 : DhtBase, IDisposable Constructors | Improve this Doc View Source Dht11(Int32, PinNumberingScheme, GpioController, Boolean) Create a DHT11 sensor Declaration public Dht11(int pin, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 pin The pin number (GPIO number) PinNumberingScheme pinNumberingScheme The GPIO pin numbering scheme GpioController gpioController GpioController related with operations on pins Boolean shouldDispose True to dispose the Gpio Controller Implements IDisposable"
  },
  "devices/Iot.Device.DHTxx.Dht12.html": {
    "href": "devices/Iot.Device.DHTxx.Dht12.html",
    "title": "Class Dht12 | nanoFramework Documentation",
    "keywords": "Class Dht12 Temperature and Humidity Sensor DHT12 Inheritance Object DhtBase Dht12 Implements IDisposable Inherited Members DhtBase._readBuff DhtBase._pin DhtBase._shouldDispose DhtBase._i2cDevice DhtBase._controller DhtBase.IsLastReadSuccessful DhtBase.Temperature DhtBase.Humidity DhtBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.DHTxx Assembly : Iot.Device.Dhtxx.dll Syntax public class Dht12 : DhtBase, IDisposable Constructors | Improve this Doc View Source Dht12(I2cDevice) Create a DHT12 sensor through I2C Declaration public Dht12(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice I2C Device | Improve this Doc View Source Dht12(Int32, PinNumberingScheme, GpioController, Boolean) Create a DHT12 sensor Declaration public Dht12(int pin, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 pin The pin number (GPIO number) PinNumberingScheme pinNumberingScheme The GPIO pin numbering scheme GpioController gpioController GpioController related with operations on pins Boolean shouldDispose True to dispose the Gpio Controller Fields | Improve this Doc View Source DefaultI2cAddress DHT12 Default I2C Address Declaration public const byte DefaultI2cAddress = 92 Field Value Type Description Byte Implements IDisposable"
  },
  "devices/Iot.Device.DHTxx.Dht21.html": {
    "href": "devices/Iot.Device.DHTxx.Dht21.html",
    "title": "Class Dht21 | nanoFramework Documentation",
    "keywords": "Class Dht21 Temperature and Humidity Sensor DHT21 Inheritance Object DhtBase Dht21 Implements IDisposable Inherited Members DhtBase._readBuff DhtBase._pin DhtBase._shouldDispose DhtBase._i2cDevice DhtBase._controller DhtBase.IsLastReadSuccessful DhtBase.Temperature DhtBase.Humidity DhtBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.DHTxx Assembly : Iot.Device.Dhtxx.dll Syntax public class Dht21 : DhtBase, IDisposable Constructors | Improve this Doc View Source Dht21(Int32, PinNumberingScheme, GpioController, Boolean) Create a DHT22 sensor Declaration public Dht21(int pin, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 pin The pin number (GPIO number) PinNumberingScheme pinNumberingScheme The GPIO pin numbering scheme GpioController gpioController GpioController related with operations on pins Boolean shouldDispose True to dispose the Gpio Controller Implements IDisposable"
  },
  "devices/Iot.Device.DHTxx.Dht22.html": {
    "href": "devices/Iot.Device.DHTxx.Dht22.html",
    "title": "Class Dht22 | nanoFramework Documentation",
    "keywords": "Class Dht22 Temperature and Humidity Sensor DHT22 Inheritance Object DhtBase Dht22 Implements IDisposable Inherited Members DhtBase._readBuff DhtBase._pin DhtBase._shouldDispose DhtBase._i2cDevice DhtBase._controller DhtBase.IsLastReadSuccessful DhtBase.Temperature DhtBase.Humidity DhtBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.DHTxx Assembly : Iot.Device.Dhtxx.dll Syntax public class Dht22 : DhtBase, IDisposable Constructors | Improve this Doc View Source Dht22(Int32, PinNumberingScheme, GpioController, Boolean) Create a DHT22 sensor Declaration public Dht22(int pin, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 pin The pin number (GPIO number) PinNumberingScheme pinNumberingScheme The GPIO pin numbering scheme GpioController gpioController GpioController related with operations on pins Boolean shouldDispose True to dispose the Gpio Controller Implements IDisposable"
  },
  "devices/Iot.Device.DHTxx.DhtBase.html": {
    "href": "devices/Iot.Device.DHTxx.DhtBase.html",
    "title": "Class DhtBase | nanoFramework Documentation",
    "keywords": "Class DhtBase Temperature and Humidity Sensor DHTxx Inheritance Object DhtBase Dht10 Dht11 Dht12 Dht21 Dht22 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.DHTxx Assembly : Iot.Device.Dhtxx.dll Syntax [Interface(\"Temperature and Humidity Sensor DHTxx\")] public abstract class DhtBase : IDisposable Constructors | Improve this Doc View Source DhtBase(I2cDevice) Create a DHT sensor through I2C (Only DHT12) Declaration public DhtBase(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. | Improve this Doc View Source DhtBase(Int32, PinNumberingScheme, GpioController, Boolean) Create a DHT sensor Declaration public DhtBase(int pin, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 pin The pin number (GPIO number) PinNumberingScheme pinNumberingScheme The GPIO pin numbering scheme GpioController gpioController GpioController related with operations on pins Boolean shouldDispose True to dispose the Gpio Controller Fields | Improve this Doc View Source _controller GpioController related with the _pin . Declaration protected GpioController _controller Field Value Type Description GpioController | Improve this Doc View Source _i2cDevice I2C device used to communicate with the device Declaration protected I2cDevice _i2cDevice Field Value Type Description I2cDevice | Improve this Doc View Source _pin GPIO pin Declaration protected readonly int _pin Field Value Type Description Int32 | Improve this Doc View Source _readBuff Read buffer Declaration protected byte[] _readBuff Field Value Type Description Byte [] | Improve this Doc View Source _shouldDispose True to dispose the Gpio Controller Declaration protected readonly bool _shouldDispose Field Value Type Description Boolean Properties | Improve this Doc View Source Humidity Get the last read of relative humidity in percentage Declaration [Telemetry] public virtual RelativeHumidity Humidity { get; } Property Value Type Description UnitsNet.RelativeHumidity Remarks If last read was not successful, it returns default(RelativeHumidity) | Improve this Doc View Source IsLastReadSuccessful How last read went, true for success, false for failure Declaration public bool IsLastReadSuccessful { get; } Property Value Type Description Boolean | Improve this Doc View Source Temperature Get the last read temperature Declaration [Telemetry] public virtual Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Remarks If last read was not successful, it returns default(Temperature) Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.DHTxx.html": {
    "href": "devices/Iot.Device.DHTxx.html",
    "title": "Namespace Iot.Device.DHTxx | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.DHTxx Classes Dht10 Temperature and Humidity Sensor DHT10 Dht11 Temperature and Humidity Sensor DHT11 Dht12 Temperature and Humidity Sensor DHT12 Dht21 Temperature and Humidity Sensor DHT21 Dht22 Temperature and Humidity Sensor DHT22 DhtBase Temperature and Humidity Sensor DHTxx"
  },
  "devices/Iot.Device.DistanceSensor.html": {
    "href": "devices/Iot.Device.DistanceSensor.html",
    "title": "Namespace Iot.Device.DistanceSensor | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.DistanceSensor Classes LidarLiteV3 Lidar Lite v3 is a long-range fixed position distance sensor by Garmin."
  },
  "devices/Iot.Device.DistanceSensor.LidarLiteV3.html": {
    "href": "devices/Iot.Device.DistanceSensor.LidarLiteV3.html",
    "title": "Class LidarLiteV3 | nanoFramework Documentation",
    "keywords": "Class LidarLiteV3 Lidar Lite v3 is a long-range fixed position distance sensor by Garmin. Inheritance Object LidarLiteV3 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.DistanceSensor Assembly : Iot.Device.LidarLiteV3.dll Syntax public class LidarLiteV3 : IDisposable Constructors | Improve this Doc View Source LidarLiteV3(I2cDevice, GpioController, Int32, Boolean) Initialize the LidarLiteV3 Declaration public LidarLiteV3(I2cDevice i2cDevice, GpioController gpioController = null, int powerEnablePin = -1, bool shouldDispose = true) Parameters Type Name Description I2cDevice i2cDevice I2C device GpioController gpioController GPIO controller Int32 powerEnablePin The pin number used to control power to the device Boolean shouldDispose True (the default) if the GPIO controller shall be disposed when disposing this instance. Fields | Improve this Doc View Source DefaultI2cAddress Default address for LidarLiteV3 Declaration public const byte DefaultI2cAddress = 98 Field Value Type Description Byte Properties | Improve this Doc View Source AcquisitionSettings Get or set the various settings to control the acquistion behavior. Declaration public AcquisitionSettings AcquisitionSettings { get; set; } Property Value Type Description AcquisitionSettings | Improve this Doc View Source AlgorithmBypassThreshold Get or set the threshold of peak value that bypasses the internal algorithm. Recommended non-default values are 32 for higher sensitivity but higher erronenous measurement and 96 for reduced sensitivity and fewer erroneous measurements. Declaration public int AlgorithmBypassThreshold { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DifferenceBetweenLastTwoDistances Get the difference between the current and last measurement resulting in a signed (2's complement) 8-bit number. Positive is away from the device. Declaration public Length DifferenceBetweenLastTwoDistances { get; } Property Value Type Description UnitsNet.Length | Improve this Doc View Source LastDistance Get the last distance measurement. Declaration public Length LastDistance { get; } Property Value Type Description UnitsNet.Length | Improve this Doc View Source PowerMode Get or set the power control option. Declaration public PowerMode PowerMode { get; set; } Property Value Type Description PowerMode | Improve this Doc View Source Status Get the system status Declaration public SystemStatus Status { get; } Property Value Type Description SystemStatus Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source MeasureDistance(Boolean) Measure distance. Declaration public Length MeasureDistance(bool withReceiverBiasCorrection = true) Parameters Type Name Description Boolean withReceiverBiasCorrection Faster without bias correction, but more prone to errors if condition changes. Returns Type Description UnitsNet.Length Distance as a length unit. Remarks Note: Do not call if running while in repetition mode. It will block until repetition finishes (forever if infinite). | Improve this Doc View Source PowerOff() Power off the device if GPIO controller and power enable pin is provided. Declaration public void PowerOff() | Improve this Doc View Source PowerOn() Power on the device if GPIO controller and power enable pin is provided. Declaration public void PowerOn() | Improve this Doc View Source Reset() Reset FPGA, all registers return to default values Declaration public void Reset() | Improve this Doc View Source SetI2cAddressAndDispose(Byte) Set a new I2C address and dispose the device. Declaration public void SetI2cAddressAndDispose(byte address) Parameters Type Name Description Byte address new address, valid values are 7-bit values with 0 in the LSB. Remarks Note, if the device is powered off or reset, the IC2 address will reset to the default address. | Improve this Doc View Source SetMeasurementRepetitionMode(MeasurementRepetition, Int32, Int32) Set the repetition mode to enable automatic measurement. Declaration public void SetMeasurementRepetitionMode(MeasurementRepetition measurementRepetition, int count = -1, int delay = -1) Parameters Type Name Description MeasurementRepetition measurementRepetition Repetition mode, either Off, Repeat, or RepeatInfinitely. Int32 count If Repeat, the number of times to repeat the measurement. Int32 delay The delay between each measurements. Note the unit does not directly to hz, a value of 20 maps to about 100 hz. Implements IDisposable"
  },
  "devices/Iot.Device.DistanceSensor.Models.LidarLiteV3.AcquisitionSettings.html": {
    "href": "devices/Iot.Device.DistanceSensor.Models.LidarLiteV3.AcquisitionSettings.html",
    "title": "Enum AcquisitionSettings | nanoFramework Documentation",
    "keywords": "Enum AcquisitionSettings Various acquisition behavior settings Namespace : Iot.Device.DistanceSensor.Models.LidarLiteV3 Assembly : Iot.Device.LidarLiteV3.dll Syntax [Flags] public enum AcquisitionSettings Fields Name Description EnableQuickTermination Enable measurement quick termination EnableReferenceFilter Enable reference filter, averages 8 reference measurements for increase consistency EnableReferenceProcess Enables reference process during measurement UseCustomDelay Use custom delay instead of default delay UseDefaultReferenceAcquisition Enable default reference acquisition count (5) instead of reference acquisition count set in REF_COUNT_VAL (0x12)."
  },
  "devices/Iot.Device.DistanceSensor.Models.LidarLiteV3.html": {
    "href": "devices/Iot.Device.DistanceSensor.Models.LidarLiteV3.html",
    "title": "Namespace Iot.Device.DistanceSensor.Models.LidarLiteV3 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.DistanceSensor.Models.LidarLiteV3 Enums AcquisitionSettings Various acquisition behavior settings MeasurementRepetition Measurement repetition modes PowerMode Power mode flags SystemStatus System status flags"
  },
  "devices/Iot.Device.DistanceSensor.Models.LidarLiteV3.MeasurementRepetition.html": {
    "href": "devices/Iot.Device.DistanceSensor.Models.LidarLiteV3.MeasurementRepetition.html",
    "title": "Enum MeasurementRepetition | nanoFramework Documentation",
    "keywords": "Enum MeasurementRepetition Measurement repetition modes Namespace : Iot.Device.DistanceSensor.Models.LidarLiteV3 Assembly : Iot.Device.LidarLiteV3.dll Syntax public enum MeasurementRepetition Remarks The device by default does measurements on-demand, this conserves power usage. However, it can be configured to run in a loop or infinite loop on the device itself. Since there's less overhead, it will have more accurate timing and lead to more accurate velocity measurements. Fields Name Description Off Disabled, measurements are done once per acq command. Repeat Measurements are done repetitively n number of times per acq command as defined in OUTER_LOOP_COUNT (0x11). RepeatIndefinitely Measurements are done repetitively forever."
  },
  "devices/Iot.Device.DistanceSensor.Models.LidarLiteV3.PowerMode.html": {
    "href": "devices/Iot.Device.DistanceSensor.Models.LidarLiteV3.PowerMode.html",
    "title": "Enum PowerMode | nanoFramework Documentation",
    "keywords": "Enum PowerMode Power mode flags Namespace : Iot.Device.DistanceSensor.Models.LidarLiteV3 Assembly : Iot.Device.LidarLiteV3.dll Syntax [Flags] public enum PowerMode Fields Name Description DisableReceiverCircuit Disable the receiver circuit. On Turn on the device. Sleep Put the device to sleep."
  },
  "devices/Iot.Device.DistanceSensor.Models.LidarLiteV3.SystemStatus.html": {
    "href": "devices/Iot.Device.DistanceSensor.Models.LidarLiteV3.SystemStatus.html",
    "title": "Enum SystemStatus | nanoFramework Documentation",
    "keywords": "Enum SystemStatus System status flags Namespace : Iot.Device.DistanceSensor.Models.LidarLiteV3 Assembly : Iot.Device.LidarLiteV3.dll Syntax [Flags] public enum SystemStatus Fields Name Description BusyFlag Device is busy callibrating or taking a measurement. Health Health status, indicating reference and receiver bias are operational InvalidSignal Peak not detected in correlation record, measurement is invalid. ProcessError System error detected during measurement ReferenceOverflow Reference data in correlation record has reached the maximum value before overflow. This occurs periodically. SecondaryReturn Secondary return detected in correlation record SignalOverflow Signal data in correlation record has reached the maximum value before overflow. This occurs with a strong received signal strength."
  },
  "devices/Iot.Device.Hcsr04.Hcsr04.html": {
    "href": "devices/Iot.Device.Hcsr04.Hcsr04.html",
    "title": "Class Hcsr04 | nanoFramework Documentation",
    "keywords": "Class Hcsr04 HC-SR04 - Ultrasonic Ranging Module Inheritance Object Hcsr04 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Hcsr04 Assembly : Iot.Device.Hcsr04.dll Syntax [Interface(\"HC-SR04 - Ultrasonic Ranging Module\")] public class Hcsr04 : IDisposable Constructors | Improve this Doc View Source Hcsr04(GpioController, Int32, Int32, Boolean) Creates a new instance of the HC-SCR04 sonar. Declaration public Hcsr04(GpioController gpioController, int triggerPin, int echoPin, bool shouldDispose = true) Parameters Type Name Description GpioController gpioController GPIO controller related with the pins Int32 triggerPin Trigger pulse input. Int32 echoPin Trigger pulse output. Boolean shouldDispose True to dispose the Gpio Controller | Improve this Doc View Source Hcsr04(Int32, Int32, PinNumberingScheme) Creates a new instance of the HC-SCR04 sonar. Declaration public Hcsr04(int triggerPin, int echoPin, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical) Parameters Type Name Description Int32 triggerPin Trigger pulse input. Int32 echoPin Trigger pulse output. PinNumberingScheme pinNumberingScheme Pin Numbering Scheme Properties | Improve this Doc View Source Distance Gets the current distance, usual range from 2 cm to 400 cm. Declaration [Telemetry] public Length Distance { get; } Property Value Type Description UnitsNet.Length Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source TryGetDistance(out Length) Try to gets the current distance, , usual range from 2 cm to 400 cm Declaration public bool TryGetDistance(out Length result) Parameters Type Name Description UnitsNet.Length result Length Returns Type Description Boolean True if success Implements IDisposable"
  },
  "devices/Iot.Device.Hcsr04.html": {
    "href": "devices/Iot.Device.Hcsr04.html",
    "title": "Namespace Iot.Device.Hcsr04 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Hcsr04 Classes Hcsr04 HC-SR04 - Ultrasonic Ranging Module"
  },
  "devices/Iot.Device.Hcsr501.Hcsr501.Hcsr501ValueChangedHandle.html": {
    "href": "devices/Iot.Device.Hcsr501.Hcsr501.Hcsr501ValueChangedHandle.html",
    "title": "Delegate Hcsr501.Hcsr501ValueChangedHandle | nanoFramework Documentation",
    "keywords": "Delegate Hcsr501.Hcsr501ValueChangedHandle Delegate used for Hcsr501ValueChanged event Namespace : Iot.Device.Hcsr501 Assembly : Iot.Device.Hcsr501.dll Syntax public delegate void Hcsr501ValueChangedHandle(object sender, Hcsr501ValueChangedEventArgs e); Parameters Type Name Description Object sender Object firing the event Hcsr501ValueChangedEventArgs e Event arguments"
  },
  "devices/Iot.Device.Hcsr501.Hcsr501.html": {
    "href": "devices/Iot.Device.Hcsr501.Hcsr501.html",
    "title": "Class Hcsr501 | nanoFramework Documentation",
    "keywords": "Class Hcsr501 PIR Sensor HC-SR501 Inheritance Object Hcsr501 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Hcsr501 Assembly : Iot.Device.Hcsr501.dll Syntax [Interface(\"PIR Sensor HC-SR501\")] public class Hcsr501 : IDisposable Constructors | Improve this Doc View Source Hcsr501(Int32, PinNumberingScheme, GpioController, Boolean) Creates a new instance of the HC-SCR501. Declaration public Hcsr501(int outPin, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 outPin OUT Pin PinNumberingScheme pinNumberingScheme Pin Numbering Scheme GpioController gpioController GpioController related with operations on pins Boolean shouldDispose True to dispose the Gpio Controller Properties | Improve this Doc View Source IsMotionDetected If a motion is detected, return true. Declaration [Telemetry] public bool IsMotionDetected { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() Events | Improve this Doc View Source Hcsr501ValueChanged Triggering when HC-SR501 value changes Declaration public event Hcsr501.Hcsr501ValueChangedHandle Hcsr501ValueChanged Event Type Type Description Hcsr501.Hcsr501ValueChangedHandle Implements IDisposable"
  },
  "devices/Iot.Device.Hcsr501.Hcsr501ValueChangedEventArgs.html": {
    "href": "devices/Iot.Device.Hcsr501.Hcsr501ValueChangedEventArgs.html",
    "title": "Class Hcsr501ValueChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class Hcsr501ValueChangedEventArgs HC-SR501 Value Changed Event Args Inheritance Object EventArgs Hcsr501ValueChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Hcsr501 Assembly : Iot.Device.Hcsr501.dll Syntax public class Hcsr501ValueChangedEventArgs : EventArgs Constructors | Improve this Doc View Source Hcsr501ValueChangedEventArgs(PinValue) Constructs Hcsr501ValueChangedEventArgs instance Declaration public Hcsr501ValueChangedEventArgs(PinValue value) Parameters Type Name Description PinValue value New value of pin Properties | Improve this Doc View Source PinValue HC-SR501 OUT Pin Value Declaration public PinValue PinValue { get; } Property Value Type Description PinValue"
  },
  "devices/Iot.Device.Hcsr501.html": {
    "href": "devices/Iot.Device.Hcsr501.html",
    "title": "Namespace Iot.Device.Hcsr501 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Hcsr501 Classes Hcsr501 PIR Sensor HC-SR501 Hcsr501ValueChangedEventArgs HC-SR501 Value Changed Event Args Delegates Hcsr501.Hcsr501ValueChangedHandle Delegate used for Hcsr501ValueChanged event"
  },
  "devices/Iot.Device.Hmc5883l.Gain.html": {
    "href": "devices/Iot.Device.Hmc5883l.Gain.html",
    "title": "Enum Gain | nanoFramework Documentation",
    "keywords": "Enum Gain HMC5883L Gain Setting Namespace : Iot.Device.Hmc5883l Assembly : Iot.Device.Hmc5883l.dll Syntax public enum Gain Fields Name Description Gain0230 230, recommended sensor field range: ±8.1 Ga Gain0330 330, recommended sensor field range: ±5.6 Ga Gain0390 390, recommended sensor field range: ±4.7 Ga Gain0440 440, recommended sensor field range: ±4.0 Ga Gain0660 660, recommended sensor field range: ±2.5 Ga Gain0820 820, recommended sensor field range: ±1.9 Ga Gain1090 1090, recommended sensor field range: ±1.3 Ga Gain1370 1370, recommended sensor field range: ±0.88 Ga"
  },
  "devices/Iot.Device.Hmc5883l.Hmc5883l.html": {
    "href": "devices/Iot.Device.Hmc5883l.Hmc5883l.html",
    "title": "Class Hmc5883l | nanoFramework Documentation",
    "keywords": "Class Hmc5883l 3-Axis Digital Compass HMC5883L Inheritance Object Hmc5883l Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Hmc5883l Assembly : Iot.Device.Hmc5883l.dll Syntax [Interface(\"3-Axis Digital Compass HMC5883L\")] public class Hmc5883l : IDisposable Constructors | Improve this Doc View Source Hmc5883l(I2cDevice, Gain, MeasuringMode, OutputRate, SamplesAmount, MeasurementConfiguration) Initialize a new HMC5883L device connected through I2C Declaration public Hmc5883l(I2cDevice i2cDevice, Gain gain = Gain.Gain1090, MeasuringMode measuringMode = MeasuringMode.Continuous, OutputRate outputRate = OutputRate.Rate15, SamplesAmount samplesAmount = SamplesAmount.One, MeasurementConfiguration measurementConfig = MeasurementConfiguration.Normal) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Gain gain Gain Setting MeasuringMode measuringMode The Mode of Measuring OutputRate outputRate Typical Data Output Rate (Hz) SamplesAmount samplesAmount Number of samples averaged per measurement output MeasurementConfiguration measurementConfig Measurement configuration Fields | Improve this Doc View Source DefaultI2cAddress HMC5883L Default I2C Address Declaration public const byte DefaultI2cAddress = 30 Field Value Type Description Byte Properties | Improve this Doc View Source DeviceStatus HMC5883L Status Declaration [Telemetry] public Status DeviceStatus { get; } Property Value Type Description Status | Improve this Doc View Source DirectionVector HMC5883L Direction Vector Declaration [Telemetry] public Vector3 DirectionVector { get; } Property Value Type Description Vector3 | Improve this Doc View Source Heading HMC5883L Heading (DEG) Declaration public double Heading { get; } Property Value Type Description Double Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Hmc5883l.html": {
    "href": "devices/Iot.Device.Hmc5883l.html",
    "title": "Namespace Iot.Device.Hmc5883l | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Hmc5883l Classes Hmc5883l 3-Axis Digital Compass HMC5883L Enums Gain HMC5883L Gain Setting MeasurementConfiguration Measurement configuration. This enum defines the measurement flow of the device, specifically whether or not to incorporate an applied bias to the sensor into the measurement. MeasuringMode The mode of HMC5883L measuring OutputRate HMC5883L Typical Data Output Rate (Hz) SamplesAmount Number of samples averaged (1 to 8) per measurement output. Status The status of HMC5883L device"
  },
  "devices/Iot.Device.Hmc5883l.MeasurementConfiguration.html": {
    "href": "devices/Iot.Device.Hmc5883l.MeasurementConfiguration.html",
    "title": "Enum MeasurementConfiguration | nanoFramework Documentation",
    "keywords": "Enum MeasurementConfiguration Measurement configuration. This enum defines the measurement flow of the device, specifically whether or not to incorporate an applied bias to the sensor into the measurement. Namespace : Iot.Device.Hmc5883l Assembly : Iot.Device.Hmc5883l.dll Syntax public enum MeasurementConfiguration : byte Fields Name Description NegativeBias Negative bias configuration for X and Y axes, positive bias configuration for Z axis. In this configuration, a negative current is forced across the resistive load for X and Y axes, a positive current for Z axis. Normal Normal measurement configuration (default). In normal measurement configuration the device follows normal measurement flow. The positive and negative pins of the resistive load are left floating and high impedance. PositiveBiasConfiguration Positive bias configuration for X and Y axes, negative bias configuration for Z axis. In this configuration, a positive current is forced across the resistive load for X and Y axes, a negative current for Z axis."
  },
  "devices/Iot.Device.Hmc5883l.MeasuringMode.html": {
    "href": "devices/Iot.Device.Hmc5883l.MeasuringMode.html",
    "title": "Enum MeasuringMode | nanoFramework Documentation",
    "keywords": "Enum MeasuringMode The mode of HMC5883L measuring Namespace : Iot.Device.Hmc5883l Assembly : Iot.Device.Hmc5883l.dll Syntax public enum MeasuringMode Fields Name Description Continuous Continuous Measuring Mode Single Single Measuring Mode (Measure only once. In this mode, OutputRate will be invalid.)"
  },
  "devices/Iot.Device.Hmc5883l.OutputRate.html": {
    "href": "devices/Iot.Device.Hmc5883l.OutputRate.html",
    "title": "Enum OutputRate | nanoFramework Documentation",
    "keywords": "Enum OutputRate HMC5883L Typical Data Output Rate (Hz) Namespace : Iot.Device.Hmc5883l Assembly : Iot.Device.Hmc5883l.dll Syntax public enum OutputRate Fields Name Description Rate00_75 0.75 Hz Rate01_5 1.5 Hz Rate03 3 Hz Rate07_5 7.5 Hz Rate15 15 Hz Rate30 30 Hz Rate75 75 Hz"
  },
  "devices/Iot.Device.Hmc5883l.SamplesAmount.html": {
    "href": "devices/Iot.Device.Hmc5883l.SamplesAmount.html",
    "title": "Enum SamplesAmount | nanoFramework Documentation",
    "keywords": "Enum SamplesAmount Number of samples averaged (1 to 8) per measurement output. Namespace : Iot.Device.Hmc5883l Assembly : Iot.Device.Hmc5883l.dll Syntax public enum SamplesAmount : byte Fields Name Description Eight 8 samples per measurement output. Four 4 samples per measurement output. One 1 (Default) samples per measurement output. Two 2 samples per measurement output."
  },
  "devices/Iot.Device.Hmc5883l.Status.html": {
    "href": "devices/Iot.Device.Hmc5883l.Status.html",
    "title": "Enum Status | nanoFramework Documentation",
    "keywords": "Enum Status The status of HMC5883L device Namespace : Iot.Device.Hmc5883l Assembly : Iot.Device.Hmc5883l.dll Syntax [Flags] public enum Status : byte Fields Name Description Lock Data output register lock. This bit is set when some but not all for of the six data output registers have been read. When this bit is set, the six data output registers are locked and any new data will not be placed in these register until one of four conditions are met: all six have been read or the mode changed, a POR is issued, the mode is changed, the measurement is changed. Ready Ready Bit. Set when data is written to all six data registers. Cleared when device initiates a write to the data output registers, when in off mode, and after one or more of the data output registers are written to. When RDY bit is clear it shall remain cleared for a minimum of a 250 μs. RegulatorEnabled Regulator Enabled Bit. This bit is set when the internal voltage regulator is enabled. This bit is cleared when the internal regulator is disabled."
  },
  "devices/Iot.Device.html": {
    "href": "devices/Iot.Device.html",
    "title": "Namespace Iot.Device | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device Classes MathExtensions Implementations of some functions missing in older .NET versions"
  },
  "devices/Iot.Device.Hts221.html": {
    "href": "devices/Iot.Device.Hts221.html",
    "title": "Namespace Iot.Device.Hts221 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Hts221 Classes Hts221 HTS221 - Capacitive digital sensor for relative humidity and temperature"
  },
  "devices/Iot.Device.Hts221.Hts221.html": {
    "href": "devices/Iot.Device.Hts221.Hts221.html",
    "title": "Class Hts221 | nanoFramework Documentation",
    "keywords": "Class Hts221 HTS221 - Capacitive digital sensor for relative humidity and temperature Inheritance Object Hts221 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Hts221 Assembly : Iot.Device.Hts221.dll Syntax [Interface(\"HTS221 - Capacitive digital sensor for relative humidity and temperature\")] public class Hts221 : IDisposable Constructors | Improve this Doc View Source Hts221(I2cDevice) Hts221 - Temperature and humidity sensor Declaration public Hts221(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice Properties | Improve this Doc View Source Humidity Relative humidity Declaration [Telemetry] public RelativeHumidity Humidity { get; } Property Value Type Description UnitsNet.RelativeHumidity | Improve this Doc View Source Temperature Temperature Declaration [Telemetry] public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Imu.AccelerometerBandwidth.html": {
    "href": "devices/Iot.Device.Imu.AccelerometerBandwidth.html",
    "title": "Enum AccelerometerBandwidth | nanoFramework Documentation",
    "keywords": "Enum AccelerometerBandwidth Bandwidth used for normal measurement of the accelerometer using filter block. This can be further reduced using SampleRateDivider with all modes except 1130Hz. Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax public enum AccelerometerBandwidth Fields Name Description Bandwidth0005Hz Bandwidth 5Hz Bandwidth0010Hz Bandwidth 10Hz Bandwidth0020Hz Bandwidth 20Hz Bandwidth0041Hz Bandwidth 41Hz Bandwidth0092Hz Bandwidth 92Hz Bandwidth0184Hz Bandwidth 184Hz Bandwidth0460Hz Bandwidth 460Hz Bandwidth1130Hz Bandwidth 1130Hz"
  },
  "devices/Iot.Device.Imu.AccelerometerLowPowerFrequency.html": {
    "href": "devices/Iot.Device.Imu.AccelerometerLowPowerFrequency.html",
    "title": "Enum AccelerometerLowPowerFrequency | nanoFramework Documentation",
    "keywords": "Enum AccelerometerLowPowerFrequency Frequency used to measure data for the low power consumption mode The chip will wake up to take a sample of accelerometer Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax public enum AccelerometerLowPowerFrequency Fields Name Description Frequency0Dot24Hz Frequency 0.24Hz Frequency0Dot49Hz Frequency 0.49Hz Frequency0Dot98Hz Frequency 0.98Hz Frequency125Hz Frequency 125Hz Frequency15Dot63Hz Frequency 15.63Hz Frequency1Dot95Hz Frequency 1.95Hz Frequency250Hz Frequency 250Hz Frequency31Dot25Hz Frequency 31.25Hz Frequency3Dot91Hz Frequency 3.91Hz Frequency500Hz Frequency 500Hz Frequency62Dot5Hz Frequency 62.5Hz Frequency7dot81Hz Frequency 7.81Hz"
  },
  "devices/Iot.Device.Imu.AccelerometerRange.html": {
    "href": "devices/Iot.Device.Imu.AccelerometerRange.html",
    "title": "Enum AccelerometerRange | nanoFramework Documentation",
    "keywords": "Enum AccelerometerRange Range of measurement used by the accelerometer in G Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax public enum AccelerometerRange Fields Name Description Range02G Range 2G Range04G Range 4G Range08G Range 8G Range16G Range 16G"
  },
  "devices/Iot.Device.Imu.DisableModes.html": {
    "href": "devices/Iot.Device.Imu.DisableModes.html",
    "title": "Enum DisableModes | nanoFramework Documentation",
    "keywords": "Enum DisableModes Disable modes for the gyroscope and accelerometer axes Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax [Flags] public enum DisableModes Fields Name Description DisableAccelerometerX Disable Accelerometer X DisableAccelerometerY Disable Accelerometer Y DisableAccelerometerZ Disable Accelerometer Z DisableGyroscopeX Disable Gyroscope X DisableGyroscopeY Disable Gyroscope Y DisableGyroscopeZ Disable Gyroscope Z DisableNone Disable None"
  },
  "devices/Iot.Device.Imu.FifoModes.html": {
    "href": "devices/Iot.Device.Imu.FifoModes.html",
    "title": "Enum FifoModes | nanoFramework Documentation",
    "keywords": "Enum FifoModes You can select the sensors from which you want data FIFO modes used to select the accelerometer, gyroscope axises, temperature and I2C slaves You can combine any of those modes. Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax [Flags] public enum FifoModes Fields Name Description Accelerometer Accelerometer GyroscopeX Gyroscope X GyroscopeY Gyroscope Y GyroscopeZ Gyroscope Z I2CSlave0 I2C Slave 0 I2CSlave1 I2C Slave 1 I2CSlave2 I2C Slave 2 None None Temperature Temperature"
  },
  "devices/Iot.Device.Imu.GyroscopeAccelerometer.html": {
    "href": "devices/Iot.Device.Imu.GyroscopeAccelerometer.html",
    "title": "Class GyroscopeAccelerometer | nanoFramework Documentation",
    "keywords": "Class GyroscopeAccelerometer Inheritance Object GyroscopeAccelerometer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax public class GyroscopeAccelerometer Constructors | Improve this Doc View Source GyroscopeAccelerometer(Vector3, Vector3) Declaration public GyroscopeAccelerometer(Vector3 gyro, Vector3 acc) Parameters Type Name Description Vector3 gyro Vector3 acc Properties | Improve this Doc View Source Accelerometer Declaration public Vector3 Accelerometer { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source Gyroscope Declaration public Vector3 Gyroscope { get; set; } Property Value Type Description Vector3"
  },
  "devices/Iot.Device.Imu.GyroscopeBandwidth.html": {
    "href": "devices/Iot.Device.Imu.GyroscopeBandwidth.html",
    "title": "Enum GyroscopeBandwidth | nanoFramework Documentation",
    "keywords": "Enum GyroscopeBandwidth Gyroscope frequency used for measurement Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax public enum GyroscopeBandwidth Fields Name Description Bandwidth0005Hz Bandwidth 5Hz Bandwidth0010Hz Bandwidth 10Hz Bandwidth0020Hz Bandwidth 20Hz Bandwidth0041Hz Bandwidth 41Hz Bandwidth0092Hz Bandwidth 92Hz Bandwidth0184Hz Bandwidth 184Hz Bandwidth0250Hz Bandwidth 250Hz Bandwidth3600Hz Bandwidth 3600Hz Bandwidth3600HzFS32 Bandwidth 3600Hz FS 32 Bandwidth8800HzFS32 Bandwidth 8800Hz FS 32"
  },
  "devices/Iot.Device.Imu.GyroscopeRange.html": {
    "href": "devices/Iot.Device.Imu.GyroscopeRange.html",
    "title": "Enum GyroscopeRange | nanoFramework Documentation",
    "keywords": "Enum GyroscopeRange Range used for the gyroscope precision measurement Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax public enum GyroscopeRange Fields Name Description Range0250Dps Range 250Dps Range0500Dps Range 500Dps Range1000Dps Range 1000Dps Range2000Dps Range 2000Dps"
  },
  "devices/Iot.Device.Imu.html": {
    "href": "devices/Iot.Device.Imu.html",
    "title": "Namespace Iot.Device.Imu | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Imu Classes GyroscopeAccelerometer Mpu6500 MPU6500 - gyroscope, accelerometer and temperature sensor Mpu9250 MPU9250 - gyroscope, accelerometer, temperature and magnetometer (thru an embedded AK8963). Enums AccelerometerBandwidth Bandwidth used for normal measurement of the accelerometer using filter block. This can be further reduced using SampleRateDivider with all modes except 1130Hz. AccelerometerLowPowerFrequency Frequency used to measure data for the low power consumption mode The chip will wake up to take a sample of accelerometer AccelerometerRange Range of measurement used by the accelerometer in G DisableModes Disable modes for the gyroscope and accelerometer axes FifoModes You can select the sensors from which you want data FIFO modes used to select the accelerometer, gyroscope axises, temperature and I2C slaves You can combine any of those modes. GyroscopeBandwidth Gyroscope frequency used for measurement GyroscopeRange Range used for the gyroscope precision measurement I2cBusFrequency Frequency of the slave I2C bus I2cChannel I2C slave channel"
  },
  "devices/Iot.Device.Imu.I2cBusFrequency.html": {
    "href": "devices/Iot.Device.Imu.I2cBusFrequency.html",
    "title": "Enum I2cBusFrequency | nanoFramework Documentation",
    "keywords": "Enum I2cBusFrequency Frequency of the slave I2C bus Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax public enum I2cBusFrequency Fields Name Description Frequency258kHz Frequency 258kHz Frequency267kHz Frequency 267kHz Frequency276kHz Frequency 276kHz Frequency286kHz Frequency 286kHz Frequency296kHz Frequency 296kHz Frequency308kHz Frequency 308kHz Frequency320kHz Frequency 320kHz Frequency333kHz Frequency 333kHz Frequency348kHz Frequency 348kHz Frequency364kHz Frequency 364kHz Frequency381kHz Frequency 381kHz Frequency400kHz Frequency 400kHz Frequency421kHz Frequency 421kHz Frequency444kHz Frequency 444kHz Frequency471kHz Frequency 471kHz Frequency500kHz Frequency 500kHz"
  },
  "devices/Iot.Device.Imu.I2cChannel.html": {
    "href": "devices/Iot.Device.Imu.I2cChannel.html",
    "title": "Enum I2cChannel | nanoFramework Documentation",
    "keywords": "Enum I2cChannel I2C slave channel Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax public enum I2cChannel Fields Name Description Slave0 Slave 0 Slave1 Slave 1 Slave2 Slave 2 Slave3 Slave 3 Slave4 Slave 4"
  },
  "devices/Iot.Device.Imu.Mpu6500.html": {
    "href": "devices/Iot.Device.Imu.Mpu6500.html",
    "title": "Class Mpu6500 | nanoFramework Documentation",
    "keywords": "Class Mpu6500 MPU6500 - gyroscope, accelerometer and temperature sensor Inheritance Object Mpu6500 Mpu9250 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax [Interface(\"MPU6500 - gyroscope, accelerometer and temperature sensor\")] public class Mpu6500 : IDisposable Constructors | Improve this Doc View Source Mpu6500(I2cDevice) Initialize the MPU6500 Declaration public Mpu6500(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device Fields | Improve this Doc View Source DefaultI2cAddress Default address for MPU9250 Declaration public const byte DefaultI2cAddress = 104 Field Value Type Description Byte | Improve this Doc View Source SecondI2cAddress Second address for MPU9250 Declaration public const byte SecondI2cAddress = 105 Field Value Type Description Byte Properties | Improve this Doc View Source AccelerationScale Get the real accelerometer bandwidth. This allows to calculate the real degree per second Declaration [Property] public float AccelerationScale { get; } Property Value Type Description Single | Improve this Doc View Source AccelerometerBandwidth Get or set the accelerometer bandwidth Declaration [Property] public AccelerometerBandwidth AccelerometerBandwidth { get; set; } Property Value Type Description AccelerometerBandwidth | Improve this Doc View Source AccelerometerBias Accelerometer bias data Declaration [Property] public Vector3 AccelerometerBias { get; } Property Value Type Description Vector3 | Improve this Doc View Source AccelerometerLowPowerFrequency Set or get the accelerometer low power mode Declaration [Property] public AccelerometerLowPowerFrequency AccelerometerLowPowerFrequency { get; set; } Property Value Type Description AccelerometerLowPowerFrequency | Improve this Doc View Source AccelerometerRange Get or set the accelerometer range Declaration [Property] public AccelerometerRange AccelerometerRange { get; set; } Property Value Type Description AccelerometerRange | Improve this Doc View Source DisableModes Get or set the elements to disable. It can be any axes of the accelerometer and or the gyroscope Declaration public DisableModes DisableModes { get; set; } Property Value Type Description DisableModes | Improve this Doc View Source FifoCount Get the number of elements to read from the FIFO (First In First Out) buffer Declaration public uint FifoCount { get; } Property Value Type Description UInt32 | Improve this Doc View Source FifoModes Get or set the FIFO (First In First Out) modes Declaration public FifoModes FifoModes { get; set; } Property Value Type Description FifoModes | Improve this Doc View Source GyroscopeBandwidth Get or set the gyroscope bandwidth Declaration [Property] public GyroscopeBandwidth GyroscopeBandwidth { get; set; } Property Value Type Description GyroscopeBandwidth | Improve this Doc View Source GyroscopeBias Gyroscope bias data Declaration [Property] public Vector3 GyroscopeBias { get; } Property Value Type Description Vector3 | Improve this Doc View Source GyroscopeRange Get or set the gyroscope range Declaration [Property] public GyroscopeRange GyroscopeRange { get; set; } Property Value Type Description GyroscopeRange | Improve this Doc View Source GyroscopeScale Get the real gyroscope bandwidth. This allows to calculate the real angular rate in degree per second Declaration [Property] public float GyroscopeScale { get; } Property Value Type Description Single | Improve this Doc View Source SampleRateDivider Get or set the sample diver mode Declaration [Property] public byte SampleRateDivider { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source CalibrateGyroscopeAccelerometer() Perform full calibration the gyroscope and the accelerometer It will automatically adjust as well the offset stored in the device The result bias will be stored in the AcceloremeterBias and GyroscopeBias Declaration [Command] public GyroscopeAccelerometer CalibrateGyroscopeAccelerometer() Returns Type Description GyroscopeAccelerometer Gyroscope and accelerometer bias | Improve this Doc View Source Dispose() Cleanup everything Declaration public void Dispose() | Improve this Doc View Source GetAccelerometer() Get the accelerometer in G Declaration [Telemetry(\"Acceleration\")] public Vector3 GetAccelerometer() Returns Type Description Vector3 Remarks Vector axes are the following: +Z +Y \\ | / \\ | / |/ /| / | / | +X | Improve this Doc View Source GetGyroscopeReading() Get the gyroscope in degrees per seconds Declaration [Telemetry(\"AngularRate\")] public Vector3 GetGyroscopeReading() Returns Type Description Vector3 Remarks Vector axes are the following: +Z +Y \\ | / \\ | / |/ /| / | / | +X | Improve this Doc View Source GetTemperature() Get the temperature Declaration [Telemetry(\"Temperature\")] public Temperature GetTemperature() Returns Type Description UnitsNet.Temperature | Improve this Doc View Source ReadByteFromSlaveDevice(I2cChannel, Byte, Byte, SpanByte) Read data from any of the I2C slave attached to the MPU9250 Declaration public void ReadByteFromSlaveDevice(I2cChannel i2cChannel, byte address, byte register, SpanByte readBytes) Parameters Type Name Description I2cChannel i2cChannel The slave channel to attached to the I2C device Byte address The I2C address of the slave I2C element Byte register The register to read from the slave I2C element SpanByte readBytes The read data | Improve this Doc View Source ReadFifo(SpanByte) Read data in the FIFO (First In First Out) buffer, read as many data as the size of readData byte span You should read the number of data available in the FifoCount property then read them here. You will read only data you have selected in FifoModes. Data are in the order of the Register from 0x3B to 0x60. ACCEL_XOUT_H and ACCEL_XOUT_L ACCEL_YOUT_H and ACCEL_YOUT_L ACCEL_ZOUT_H and ACCEL_ZOUT_L TEMP_OUT_H and TEMP_OUT_L GYRO_XOUT_H and GYRO_XOUT_L GYRO_YOUT_H and GYRO_YOUT_L GYRO_ZOUT_H and GYRO_ZOUT_L EXT_SENS_DATA_00 to EXT_SENS_DATA_24 Declaration public void ReadFifo(SpanByte readData) Parameters Type Name Description SpanByte readData Data which will be read | Improve this Doc View Source RunGyroscopeAccelerometerSelfTest() Run a self test and returns the gyroscope and accelerometer vectores a. If factory Self-Test values ST_OTP≠0, compare the current Self-Test response (GXST, GYST, GZST, AXST, AYST and AZST) to the factory Self-Test values (ST_OTP) and report Self-Test is passing if all the following criteria are fulfilled: Axis | Pass criteria X-gyro | (GXST / GXST_OTP) > 0.5 Y-gyro | (GYST / GYST_OTP) > 0.5 Z-gyro | (GZST / GZST_OTP) > 0.5 X-Accel | 0.5 < (AXST / AXST_OTP) < 1.5 Y-Accel | 0.5 < (AYST / AYST_OTP) < 1.5 Z-Accel | 0.5 < (AZST / AZST_OTP) < 1.5 b. If factory Self-Test values ST_OTP=0, compare the current Self-Test response (GXST, GYST, GZST, AXST, AYST and AZST) to the ST absolute limits (ST_AL) and report Self-Test is passing if all the following criteria are fulfilled. Axis | Pass criteria X-gyro | |GXST| ≥ 60dps Y-gyro | |GYST| ≥ 60dps Z-gyro | |GZST| ≥ 60dps X-Accel| 225mgee ≤ |AXST| ≤ 675mgee Y-Accel| 225mgee ≤ |AXST| ≤ 675mgee Z-Accel| 225mgee ≤ |AXST| ≤ 675mgee c. If the Self-Test passes criteria (a) and (b), it’s necessary to check gyro offset values. Report passing Self-Test if the following criteria fulfilled. Axis | Pass criteria X-gyro | |GXOFFSET| ≤ 20dps Y-gyro | |GYOFFSET| ≤ 20dps Z-gyro | |GZOFFSET| ≤ 20dps Declaration [Command] public GyroscopeAccelerometer RunGyroscopeAccelerometerSelfTest() Returns Type Description GyroscopeAccelerometer the gyroscope and accelerometer vectors | Improve this Doc View Source SetWakeOnMotion(UInt32, AccelerometerLowPowerFrequency) Setup the Wake On Motion. This mode generate a rising signal on pin INT You can catch it with a normal GPIO and place an interruption on it if supported Reading the sensor won't give any value until it wakes up periodically Only Accelerator data is available in this mode Declaration [Command] public void SetWakeOnMotion(uint accelerometerThreshold, AccelerometerLowPowerFrequency acceleratorLowPower) Parameters Type Name Description UInt32 accelerometerThreshold Threshold of magnetometer x/y/z axes. LSB = 4mg. Range is 0mg to 1020mg AccelerometerLowPowerFrequency acceleratorLowPower Frequency used to measure data for the low power consumption mode | Improve this Doc View Source WriteByteToSlaveDevice(I2cChannel, Byte, Byte, Byte) Write data on any of the I2C slave attached to the MPU9250 Declaration public void WriteByteToSlaveDevice(I2cChannel i2cChannel, byte address, byte register, byte data) Parameters Type Name Description I2cChannel i2cChannel The slave channel to attached to the I2C device Byte address The I2C address of the slave I2C element Byte register The register to write to the slave I2C element Byte data The byte data to write to the slave I2C element Implements IDisposable"
  },
  "devices/Iot.Device.Imu.Mpu9250.html": {
    "href": "devices/Iot.Device.Imu.Mpu9250.html",
    "title": "Class Mpu9250 | nanoFramework Documentation",
    "keywords": "Class Mpu9250 MPU9250 - gyroscope, accelerometer, temperature and magnetometer (thru an embedded AK8963). Inheritance Object Mpu6500 Mpu9250 Implements IDisposable Inherited Members Mpu6500.DefaultI2cAddress Mpu6500.SecondI2cAddress Mpu6500.AccelerometerBias Mpu6500.AccelerometerRange Mpu6500.AccelerometerBandwidth Mpu6500.AccelerationScale Mpu6500.GetAccelerometer() Mpu6500.AccelerometerLowPowerFrequency Mpu6500.GyroscopeBias Mpu6500.GyroscopeRange Mpu6500.GyroscopeBandwidth Mpu6500.GyroscopeScale Mpu6500.GetGyroscopeReading() Mpu6500.GetTemperature() Mpu6500.SampleRateDivider Mpu6500.DisableModes Mpu6500.FifoCount Mpu6500.FifoModes Mpu6500.ReadFifo(SpanByte) Mpu6500.CalibrateGyroscopeAccelerometer() Mpu6500.RunGyroscopeAccelerometerSelfTest() Mpu6500.WriteByteToSlaveDevice(I2cChannel, Byte, Byte, Byte) Mpu6500.ReadByteFromSlaveDevice(I2cChannel, Byte, Byte, SpanByte) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Imu Assembly : Iot.Device.Mpu9250.dll Syntax [Interface(\"MPU9250 - gyroscope, accelerometer, temperature and magnetometer (thru an embedded AK8963)\")] public class Mpu9250 : Mpu6500, IDisposable Constructors | Improve this Doc View Source Mpu9250(I2cDevice, Boolean, I2cDevice) Initialize the MPU9250 Declaration public Mpu9250(I2cDevice i2cDevice, bool shouldDispose = true, I2cDevice i2CDeviceAk8963 = null) Parameters Type Name Description I2cDevice i2cDevice The I2C device Boolean shouldDispose Will automatically dispose the I2C device if true I2cDevice i2CDeviceAk8963 An I2C Device for the AK8963 when exposed and not behind the MPU9250 Properties | Improve this Doc View Source HasDataToRead True if there is a data to read Declaration public bool HasDataToRead { get; } Property Value Type Description Boolean | Improve this Doc View Source MagnetometerAdjustment Get the magnetometer hardware adjustment bias Declaration [Property] public Vector3 MagnetometerAdjustment { get; } Property Value Type Description Vector3 | Improve this Doc View Source MagnetometerMeasurementMode Select the magnetometer measurement mode Declaration public MeasurementMode MagnetometerMeasurementMode { get; set; } Property Value Type Description MeasurementMode | Improve this Doc View Source MagnetometerOutputBitMode Select the magnetometer output bit rate Declaration [Property] public OutputBitMode MagnetometerOutputBitMode { get; set; } Property Value Type Description OutputBitMode | Improve this Doc View Source MagnometerBias Get the magnetometer bias Declaration [Property] public Vector3 MagnometerBias { get; } Property Value Type Description Vector3 Remarks Vector axes are the following: +Z +Y \\ | / \\ | / |/ /| / | / | +X Methods | Improve this Doc View Source CalibrateMagnetometer(Int32) Calibrate the magnetometer. Make sure your sensor is as far as possible of magnet. Move your sensor in all direction to make sure it will get enough data in all points of space Calculate as well the magnetometer bias Declaration [Command] public Vector3 CalibrateMagnetometer(int calibrationCounts = 1000) Parameters Type Name Description Int32 calibrationCounts number of points to read during calibration, default is 1000 Returns Type Description Vector3 Returns the factory calibration data | Improve this Doc View Source Dispose() Cleanup everything Declaration public void Dispose() | Improve this Doc View Source GetMagnetometerVersion() Check if the magnetometer version is the correct one (0x48) Declaration [Property(\"MagnetometerVersion\")] public byte GetMagnetometerVersion() Returns Type Description Byte Returns the Magnetometer version number Remarks When the wake on motion is on, you can't read the magnetometer, so this function returns 0 | Improve this Doc View Source ReadMagnetometer(Boolean) Read the magnetometer with bias correction and can wait for new data to be present Declaration [Telemetry(\"MagneticInduction\")] public Vector3 ReadMagnetometer(bool waitForData = true) Parameters Type Name Description Boolean waitForData true to wait for new data Returns Type Description Vector3 The data from the magnetometer Remarks Vector axes are the following: +Z +Y \\ | / \\ | / |/ /| / | / | +X | Improve this Doc View Source ReadMagnetometerWithoutCorrection(Boolean) Read the magnetometer without bias correction and can wait for new data to be present Declaration public Vector3 ReadMagnetometerWithoutCorrection(bool waitForData = true) Parameters Type Name Description Boolean waitForData true to wait for new data Returns Type Description Vector3 The data from the magnetometer Remarks Vector axes are the following: +Z +Y \\ | / \\ | / |/ /| / | / | +X | Improve this Doc View Source SetWakeOnMotion(UInt32, AccelerometerLowPowerFrequency) Setup the Wake On Motion. This mode generate a rising signal on pin INT You can catch it with a normal GPIO and place an interruption on it if supported Reading the sensor won't give any value until it wakes up periodically Only Accelerator data is available in this mode Declaration public void SetWakeOnMotion(uint accelerometerThreshold, AccelerometerLowPowerFrequency acceleratorLowPower) Parameters Type Name Description UInt32 accelerometerThreshold Threshold of magnetometer x/y/z axes. LSB = 4mg. Range is 0mg to 1020mg AccelerometerLowPowerFrequency acceleratorLowPower Frequency used to measure data for the low power consumption mode Implements IDisposable"
  },
  "devices/Iot.Device.Ip5306.ButtonPress.html": {
    "href": "devices/Iot.Device.Ip5306.ButtonPress.html",
    "title": "Enum ButtonPress | nanoFramework Documentation",
    "keywords": "Enum ButtonPress Button press Namespace : Iot.Device.Ip5306 Assembly : Iot.Device.Ip5306.dll Syntax public enum ButtonPress Fields Name Description Doubleclick Short press twice LongPress Long press"
  },
  "devices/Iot.Device.Ip5306.ButtonPressed.html": {
    "href": "devices/Iot.Device.Ip5306.ButtonPressed.html",
    "title": "Enum ButtonPressed | nanoFramework Documentation",
    "keywords": "Enum ButtonPressed Button status Namespace : Iot.Device.Ip5306 Assembly : Iot.Device.Ip5306.dll Syntax [Flags] public enum ButtonPressed Fields Name Description DoubleClicked Double click LongPressed Long press NotPressed Not pressed ShortPressed Short press"
  },
  "devices/Iot.Device.Ip5306.ChargingBatteryVoltage.html": {
    "href": "devices/Iot.Device.Ip5306.ChargingBatteryVoltage.html",
    "title": "Enum ChargingBatteryVoltage | nanoFramework Documentation",
    "keywords": "Enum ChargingBatteryVoltage Charging battery voltage Namespace : Iot.Device.Ip5306 Assembly : Iot.Device.Ip5306.dll Syntax public enum ChargingBatteryVoltage Fields Name Description V4_2 4.2 Volt V4_3 4.3 Volt V4_35 4.35 Volt V4_4 4.4 Volt"
  },
  "devices/Iot.Device.Ip5306.ChargingCutOffCurrent.html": {
    "href": "devices/Iot.Device.Ip5306.ChargingCutOffCurrent.html",
    "title": "Enum ChargingCutOffCurrent | nanoFramework Documentation",
    "keywords": "Enum ChargingCutOffCurrent Charging cut off current Namespace : Iot.Device.Ip5306 Assembly : Iot.Device.Ip5306.dll Syntax public enum ChargingCutOffCurrent Fields Name Description C200mA 200 milli Ampere C400mA 400 milli Ampere C500mA 500 milli Ampere C600mA 600 milli Ampere"
  },
  "devices/Iot.Device.Ip5306.ChargingCutOffVoltage.html": {
    "href": "devices/Iot.Device.Ip5306.ChargingCutOffVoltage.html",
    "title": "Enum ChargingCutOffVoltage | nanoFramework Documentation",
    "keywords": "Enum ChargingCutOffVoltage Charging cut off voltage Namespace : Iot.Device.Ip5306 Assembly : Iot.Device.Ip5306.dll Syntax public enum ChargingCutOffVoltage Fields Name Description V4_14 4.14 Volt V4_17 4.17 Volt V4_185 4.185 Volt V4_2 4.2 Volt"
  },
  "devices/Iot.Device.Ip5306.ChargingLoopSelection.html": {
    "href": "devices/Iot.Device.Ip5306.ChargingLoopSelection.html",
    "title": "Enum ChargingLoopSelection | nanoFramework Documentation",
    "keywords": "Enum ChargingLoopSelection Charging loop selection Namespace : Iot.Device.Ip5306 Assembly : Iot.Device.Ip5306.dll Syntax public enum ChargingLoopSelection Fields Name Description Battery Battery Vin V in"
  },
  "devices/Iot.Device.Ip5306.ChargingUnderVoltage.html": {
    "href": "devices/Iot.Device.Ip5306.ChargingUnderVoltage.html",
    "title": "Enum ChargingUnderVoltage | nanoFramework Documentation",
    "keywords": "Enum ChargingUnderVoltage Charging under voltage Namespace : Iot.Device.Ip5306 Assembly : Iot.Device.Ip5306.dll Syntax public enum ChargingUnderVoltage Fields Name Description V4_45 4.45 Volt V4_5 4.5 Volt V4_55 4.55 Volt V4_6 4.6 Volt V4_65 4.65 Volt V4_7 4.7 Volt V4_75 4.75 Volt V4_8 4.8 Volt"
  },
  "devices/Iot.Device.Ip5306.ConstantChargingVoltage.html": {
    "href": "devices/Iot.Device.Ip5306.ConstantChargingVoltage.html",
    "title": "Enum ConstantChargingVoltage | nanoFramework Documentation",
    "keywords": "Enum ConstantChargingVoltage Constant charging voltage Namespace : Iot.Device.Ip5306 Assembly : Iot.Device.Ip5306.dll Syntax public enum ConstantChargingVoltage Fields Name Description None No constant charging voltage Vm14 14 milli Volt Vm28 28 milli Volt Vm42 42 milli Volt"
  },
  "devices/Iot.Device.Ip5306.html": {
    "href": "devices/Iot.Device.Ip5306.html",
    "title": "Namespace Iot.Device.Ip5306 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ip5306 Classes Ip5306 IP5306 - Power management device Enums ButtonPress Button press ButtonPressed Button status ChargingBatteryVoltage Charging battery voltage ChargingCutOffCurrent Charging cut off current ChargingCutOffVoltage Charging cut off voltage ChargingLoopSelection Charging loop selection ChargingUnderVoltage Charging under voltage ConstantChargingVoltage Constant charging voltage LightDutyShutdownTime Light duty shutdown time"
  },
  "devices/Iot.Device.Ip5306.Ip5306.html": {
    "href": "devices/Iot.Device.Ip5306.Ip5306.html",
    "title": "Class Ip5306 | nanoFramework Documentation",
    "keywords": "Class Ip5306 IP5306 - Power management device Inheritance Object Ip5306 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ip5306 Assembly : Iot.Device.Ip5306.dll Syntax public class Ip5306 Constructors | Improve this Doc View Source Ip5306(I2cDevice) Creates an instance of IP5306 Declaration public Ip5306(I2cDevice i2c) Parameters Type Name Description I2cDevice i2c Fields | Improve this Doc View Source DefaultI2cAddress Default IP5306 I2C address Declaration public const int DefaultI2cAddress = 234 Field Value Type Description Int32 | Improve this Doc View Source SecondaryI2cAddress Possible address as well, used in M5Stack Declaration public const int SecondaryI2cAddress = 117 Field Value Type Description Int32 Properties | Improve this Doc View Source AutoPowerOnEnabled Auto power on enabled. True as default. Declaration public bool AutoPowerOnEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source BoostEnabled Boost enabled. True as default. Declaration public bool BoostEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source BoostOutputEnabled Boost output enabled. True as default. Declaration public bool BoostOutputEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source BoostWhenVinUnpluggedEnabled Bosst when V in unplugges enabled. True as default. Declaration public bool BoostWhenVinUnpluggedEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ButtonOffEnabled Button off enabled. False as default. Declaration public bool ButtonOffEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ChargerEnabled Charger enabled. true as default. Declaration public bool ChargerEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ChargingBatteryVoltage Charging battery voltage. Default to 4.2 Volt. Declaration public ChargingBatteryVoltage ChargingBatteryVoltage { get; set; } Property Value Type Description ChargingBatteryVoltage | Improve this Doc View Source ChargingCurrent Charging current. Declaration public ElectricCurrent ChargingCurrent { get; set; } Property Value Type Description UnitsNet.ElectricCurrent Remarks Typical valut is between 50 and 3150 milli Ampere. Values are capted to 50 for anything under or 3150 for anything higher. | Improve this Doc View Source ChargingCutOffCurrent Charging cut off current. Default to 400 mA. Declaration public ChargingCutOffCurrent ChargingCutOffCurrent { get; set; } Property Value Type Description ChargingCutOffCurrent | Improve this Doc View Source ChargingCuttOffVoltage Charging cut off voltage. Default to 4.185 Volt. Declaration public ChargingCutOffVoltage ChargingCuttOffVoltage { get; set; } Property Value Type Description ChargingCutOffVoltage | Improve this Doc View Source ChargingLoopSelection Charging loop selection. Defautl to V in. Declaration public ChargingLoopSelection ChargingLoopSelection { get; set; } Property Value Type Description ChargingLoopSelection | Improve this Doc View Source ChargingUnderVoltage Charging under voltage. Default to 4.7 Volt. Declaration public ChargingUnderVoltage ChargingUnderVoltage { get; set; } Property Value Type Description ChargingUnderVoltage | Improve this Doc View Source ConstantChargingVoltage Constant charging voltage. Default to 14 milli Volt. Declaration public ConstantChargingVoltage ConstantChargingVoltage { get; set; } Property Value Type Description ConstantChargingVoltage | Improve this Doc View Source FlashLightBehavior Flash light behavior. Defautl to double click. Declaration public ButtonPress FlashLightBehavior { get; set; } Property Value Type Description ButtonPress | Improve this Doc View Source IsBatteryFull True if the battery is full. Declaration public bool IsBatteryFull { get; } Property Value Type Description Boolean | Improve this Doc View Source IsCharging True if the battery is charging. Declaration public bool IsCharging { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOutputLoadHigh True if the output is loaded to high. Declaration public bool IsOutputLoadHigh { get; } Property Value Type Description Boolean | Improve this Doc View Source LightDutyShutdownTime Light duty shutdown time. Default to 8 seconds. Declaration public LightDutyShutdownTime LightDutyShutdownTime { get; set; } Property Value Type Description LightDutyShutdownTime | Improve this Doc View Source LowPowerOffEnabled Low power off enabled. True as default. Declaration public bool LowPowerOffEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ShortPressToSwitchBosst Short press to switch boost enabled. False as default. Declaration public bool ShortPressToSwitchBosst { get; set; } Property Value Type Description Boolean | Improve this Doc View Source SwitchOffBoostBehavior Switch off boost behavior. Default to long press. Declaration public ButtonPress SwitchOffBoostBehavior { get; set; } Property Value Type Description ButtonPress Methods | Improve this Doc View Source GetButtonStatus() Gets the button status. Declaration public ButtonPressed GetButtonStatus() Returns Type Description ButtonPressed"
  },
  "devices/Iot.Device.Ip5306.LightDutyShutdownTime.html": {
    "href": "devices/Iot.Device.Ip5306.LightDutyShutdownTime.html",
    "title": "Enum LightDutyShutdownTime | nanoFramework Documentation",
    "keywords": "Enum LightDutyShutdownTime Light duty shutdown time Namespace : Iot.Device.Ip5306 Assembly : Iot.Device.Ip5306.dll Syntax public enum LightDutyShutdownTime Fields Name Description S08 8 seconds S16 16 seconds S32 32 seconds S64 64 seconds"
  },
  "devices/Iot.Device.KeyMatrix.html": {
    "href": "devices/Iot.Device.KeyMatrix.html",
    "title": "Namespace Iot.Device.KeyMatrix | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.KeyMatrix Classes KeyMatrix GPIO key matrix Driver KeyMatrixEvent Keyboard event Delegates KeyMatrix.KeyEventHandler Fire an event when a key is pressed or released"
  },
  "devices/Iot.Device.KeyMatrix.KeyMatrix.html": {
    "href": "devices/Iot.Device.KeyMatrix.KeyMatrix.html",
    "title": "Class KeyMatrix | nanoFramework Documentation",
    "keywords": "Class KeyMatrix GPIO key matrix Driver Inheritance Object KeyMatrix Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.KeyMatrix Assembly : Iot.Device.KeyMatrix.dll Syntax public class KeyMatrix : IDisposable Constructors | Improve this Doc View Source KeyMatrix(Int32[], Int32[], TimeSpan, GpioController, Boolean) Initialize key matrix Declaration public KeyMatrix(int[] outputPins, int[] inputPins, TimeSpan scanInterval, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 [] outputPins Output pins Int32 [] inputPins Input pins TimeSpan scanInterval Scanning interval in milliseconds GpioController gpioController GPIO controller Boolean shouldDispose True to dispose the GpioController Properties | Improve this Doc View Source InputPins Get input pins Declaration public int[] InputPins { get; } Property Value Type Description Int32 [] | Improve this Doc View Source Item[Int32] Get buttons' values by output Declaration public SpanPinValue this[int output] { get; } Parameters Type Name Description Int32 output Output index Property Value Type Description SpanPinValue | Improve this Doc View Source OutputPins Get output pins Declaration public int[] OutputPins { get; } Property Value Type Description Int32 [] | Improve this Doc View Source ScanInterval Get or set interval in milliseconds Declaration public TimeSpan ScanInterval { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source Values Get all buttons' values Declaration public SpanPinValue Values { get; } Property Value Type Description SpanPinValue Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source ReadKey() Blocks execution until a key event is received Declaration public KeyMatrixEvent ReadKey() Returns Type Description KeyMatrixEvent | Improve this Doc View Source StartListeningKeyEvent() Start listening to key events Declaration public void StartListeningKeyEvent() | Improve this Doc View Source StopListeningKeyEvent() Stop listening to key events Declaration public void StopListeningKeyEvent() Events | Improve this Doc View Source KeyEvent The raised event Declaration public event KeyMatrix.KeyEventHandler KeyEvent Event Type Type Description KeyMatrix.KeyEventHandler Implements IDisposable"
  },
  "devices/Iot.Device.KeyMatrix.KeyMatrix.KeyEventHandler.html": {
    "href": "devices/Iot.Device.KeyMatrix.KeyMatrix.KeyEventHandler.html",
    "title": "Delegate KeyMatrix.KeyEventHandler | nanoFramework Documentation",
    "keywords": "Delegate KeyMatrix.KeyEventHandler Fire an event when a key is pressed or released Namespace : Iot.Device.KeyMatrix Assembly : Iot.Device.KeyMatrix.dll Syntax public delegate void KeyEventHandler(object sender, KeyMatrixEvent keyMatrixEvent); Parameters Type Name Description Object sender The sender KeyMatrix KeyMatrixEvent keyMatrixEvent The key event"
  },
  "devices/Iot.Device.KeyMatrix.KeyMatrixEvent.html": {
    "href": "devices/Iot.Device.KeyMatrix.KeyMatrixEvent.html",
    "title": "Class KeyMatrixEvent | nanoFramework Documentation",
    "keywords": "Class KeyMatrixEvent Keyboard event Inheritance Object KeyMatrixEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.KeyMatrix Assembly : Iot.Device.KeyMatrix.dll Syntax public class KeyMatrixEvent Properties | Improve this Doc View Source EventType Event type of current button. PinEventTypes.Rising is pressed，PinEventTypes.Falling is released Declaration public PinEventTypes EventType { get; } Property Value Type Description PinEventTypes | Improve this Doc View Source Input Current button's input index Declaration public int Input { get; } Property Value Type Description Int32 | Improve this Doc View Source Output Current button's output index Declaration public int Output { get; } Property Value Type Description Int32"
  },
  "devices/Iot.Device.LiquidLevel.html": {
    "href": "devices/Iot.Device.LiquidLevel.html",
    "title": "Namespace Iot.Device.LiquidLevel | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.LiquidLevel Classes LiquidLevelSwitch Digital liquid level switch Llc200d3sh Optomax LLC200D3SH digital liquid level switch"
  },
  "devices/Iot.Device.LiquidLevel.LiquidLevelSwitch.html": {
    "href": "devices/Iot.Device.LiquidLevel.LiquidLevelSwitch.html",
    "title": "Class LiquidLevelSwitch | nanoFramework Documentation",
    "keywords": "Class LiquidLevelSwitch Digital liquid level switch Inheritance Object LiquidLevelSwitch Llc200d3sh Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.LiquidLevel Assembly : Iot.Device.LiquidLevel.dll Syntax [Interface(\"Digital liquid level switch\")] public class LiquidLevelSwitch : IDisposable Constructors | Improve this Doc View Source LiquidLevelSwitch(Int32, PinValue, GpioController, PinNumberingScheme, Boolean) Creates a new instance of the LiquidLevelSwitch. Declaration public LiquidLevelSwitch(int dataPin, PinValue liquidPresentPinState, GpioController gpioController = null, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, bool shouldDispose = true) Parameters Type Name Description Int32 dataPin The data pin PinValue liquidPresentPinState Data pin state representing liquid being present GpioController gpioController A Gpio Controller if you want to use a specific one PinNumberingScheme pinNumberingScheme Use the logical or physical pin layout Boolean shouldDispose True to dispose the Gpio Controller Methods | Improve this Doc View Source Dispose() Dispose Buzzer. Declaration public void Dispose() | Improve this Doc View Source IsLiquidPresent() Determines whether liquid is present. Declaration [Telemetry] public bool IsLiquidPresent() Returns Type Description Boolean true if liquid is present, otherwise false . Implements IDisposable"
  },
  "devices/Iot.Device.LiquidLevel.Llc200d3sh.html": {
    "href": "devices/Iot.Device.LiquidLevel.Llc200d3sh.html",
    "title": "Class Llc200d3sh | nanoFramework Documentation",
    "keywords": "Class Llc200d3sh Optomax LLC200D3SH digital liquid level switch Inheritance Object LiquidLevelSwitch Llc200d3sh Implements IDisposable Inherited Members LiquidLevelSwitch.IsLiquidPresent() LiquidLevelSwitch.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.LiquidLevel Assembly : Iot.Device.LiquidLevel.dll Syntax public class Llc200d3sh : LiquidLevelSwitch, IDisposable Constructors | Improve this Doc View Source Llc200d3sh(Int32, GpioController, PinNumberingScheme, Boolean) Creates a new instance of the Llc200d3sh. Declaration public Llc200d3sh(int pin, GpioController gpioController = null, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, bool shouldDispose = true) Parameters Type Name Description Int32 pin The data pin GpioController gpioController A Gpio Controller if you want to use a specific one PinNumberingScheme pinNumberingScheme Use the logical or physical pin layout Boolean shouldDispose True to dispose the Gpio Controller Implements IDisposable"
  },
  "devices/Iot.Device.Lm75.html": {
    "href": "devices/Iot.Device.Lm75.html",
    "title": "Namespace Iot.Device.Lm75 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Lm75 Classes Lm75 Digital Temperature Sensor LM75"
  },
  "devices/Iot.Device.Lm75.Lm75.html": {
    "href": "devices/Iot.Device.Lm75.Lm75.html",
    "title": "Class Lm75 | nanoFramework Documentation",
    "keywords": "Class Lm75 Digital Temperature Sensor LM75 Inheritance Object Lm75 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Lm75 Assembly : Iot.Device.Lm75.dll Syntax [Interface(\"Digital Temperature Sensor LM75\")] public class Lm75 : IDisposable Constructors | Improve this Doc View Source Lm75(I2cDevice) Creates a new instance of the LM75 Declaration public Lm75(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Fields | Improve this Doc View Source DefaultI2cAddress LM75 I2C Address Declaration public const byte DefaultI2cAddress = 72 Field Value Type Description Byte Properties | Improve this Doc View Source Disabled Disable LM75 Declaration [Telemetry] public bool Disabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Temperature LM75 Temperature Declaration [Telemetry] public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Lps25h.html": {
    "href": "devices/Iot.Device.Lps25h.html",
    "title": "Namespace Iot.Device.Lps25h | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Lps25h Classes Lps25h LPS25H - Piezoresistive pressure and thermometer sensor"
  },
  "devices/Iot.Device.Lps25h.Lps25h.html": {
    "href": "devices/Iot.Device.Lps25h.Lps25h.html",
    "title": "Class Lps25h | nanoFramework Documentation",
    "keywords": "Class Lps25h LPS25H - Piezoresistive pressure and thermometer sensor Inheritance Object Lps25h Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Lps25h Assembly : Iot.Device.Lps25h.dll Syntax [Interface(\"LPS25H - Piezoresistive pressure and thermometer sensor\")] public class Lps25h : IDisposable Constructors | Improve this Doc View Source Lps25h(I2cDevice) Lps25h - Pressure and temperature sensor Declaration public Lps25h(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice Properties | Improve this Doc View Source Pressure Pressure Declaration [Telemetry] public Pressure Pressure { get; } Property Value Type Description UnitsNet.Pressure | Improve this Doc View Source Temperature Temperature Declaration [Telemetry] public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Lsm9Ds1.AccelerationScale.html": {
    "href": "devices/Iot.Device.Lsm9Ds1.AccelerationScale.html",
    "title": "Enum AccelerationScale | nanoFramework Documentation",
    "keywords": "Enum AccelerationScale Acceleration scale Namespace : Iot.Device.Lsm9Ds1 Assembly : Iot.Device.Lsm9Ds1.dll Syntax public enum AccelerationScale : byte Fields Name Description Scale02G Acceleration 2G Scale04G Acceleration 4G Scale08G Acceleration 8G Scale16G Acceleration 16G"
  },
  "devices/Iot.Device.Lsm9Ds1.AngularRateScale.html": {
    "href": "devices/Iot.Device.Lsm9Ds1.AngularRateScale.html",
    "title": "Enum AngularRateScale | nanoFramework Documentation",
    "keywords": "Enum AngularRateScale Angular rate scale Namespace : Iot.Device.Lsm9Ds1 Assembly : Iot.Device.Lsm9Ds1.dll Syntax public enum AngularRateScale : byte Fields Name Description Scale0245Dps 245 degrees per second (DPS) Scale0500Dps 500 degrees per second (DPS) Scale2000Dps 2000 degrees per second (DPS)"
  },
  "devices/Iot.Device.Lsm9Ds1.html": {
    "href": "devices/Iot.Device.Lsm9Ds1.html",
    "title": "Namespace Iot.Device.Lsm9Ds1 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Lsm9Ds1 Classes Lsm9Ds1AccelerometerAndGyroscope LSM9DS1 accelerometer and gyroscope Lsm9Ds1Magnetometer LSM9DS1 magnetometer Enums AccelerationScale Acceleration scale AngularRateScale Angular rate scale MagneticInductionScale Magnetic induction scale"
  },
  "devices/Iot.Device.Lsm9Ds1.Lsm9Ds1AccelerometerAndGyroscope.html": {
    "href": "devices/Iot.Device.Lsm9Ds1.Lsm9Ds1AccelerometerAndGyroscope.html",
    "title": "Class Lsm9Ds1AccelerometerAndGyroscope | nanoFramework Documentation",
    "keywords": "Class Lsm9Ds1AccelerometerAndGyroscope LSM9DS1 accelerometer and gyroscope Inheritance Object Lsm9Ds1AccelerometerAndGyroscope Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Lsm9Ds1 Assembly : Iot.Device.Lsm9Ds1.dll Syntax [Interface(\"LSM9DS1 accelerometer and gyroscope\")] public class Lsm9Ds1AccelerometerAndGyroscope : IDisposable Constructors | Improve this Doc View Source Lsm9Ds1AccelerometerAndGyroscope(I2cDevice, AccelerationScale, AngularRateScale) Lsm9Ds1 - Accelerometer and Gyroscope bus Declaration public Lsm9Ds1AccelerometerAndGyroscope(I2cDevice i2cDevice, AccelerationScale accelerationScale = AccelerationScale.Scale02G, AngularRateScale angularRateScale = AngularRateScale.Scale0245Dps) Parameters Type Name Description I2cDevice i2cDevice AccelerationScale accelerationScale AngularRateScale angularRateScale Properties | Improve this Doc View Source Acceleration Acceleration measured in gravitational force Declaration [Telemetry] public Vector3 Acceleration { get; } Property Value Type Description Vector3 | Improve this Doc View Source AngularRate Acceleration measured in degrees per second (DPS) Declaration [Telemetry] public Vector3 AngularRate { get; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Lsm9Ds1.Lsm9Ds1Magnetometer.html": {
    "href": "devices/Iot.Device.Lsm9Ds1.Lsm9Ds1Magnetometer.html",
    "title": "Class Lsm9Ds1Magnetometer | nanoFramework Documentation",
    "keywords": "Class Lsm9Ds1Magnetometer LSM9DS1 magnetometer Inheritance Object Lsm9Ds1Magnetometer Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Lsm9Ds1 Assembly : Iot.Device.Lsm9Ds1.dll Syntax [Interface(\"LSM9DS1 magnetometer\")] public class Lsm9Ds1Magnetometer : IDisposable Constructors | Improve this Doc View Source Lsm9Ds1Magnetometer(I2cDevice, MagneticInductionScale) Lsm9Ds1 - Magnetometer bus Declaration public Lsm9Ds1Magnetometer(I2cDevice i2cDevice, MagneticInductionScale magneticInductionScale = MagneticInductionScale.Scale04G) Parameters Type Name Description I2cDevice i2cDevice MagneticInductionScale magneticInductionScale Properties | Improve this Doc View Source MagneticInduction Magnetic Induction measured in Gauss (G) Declaration [Telemetry] public Vector3 MagneticInduction { get; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Lsm9Ds1.MagneticInductionScale.html": {
    "href": "devices/Iot.Device.Lsm9Ds1.MagneticInductionScale.html",
    "title": "Enum MagneticInductionScale | nanoFramework Documentation",
    "keywords": "Enum MagneticInductionScale Magnetic induction scale Namespace : Iot.Device.Lsm9Ds1 Assembly : Iot.Device.Lsm9Ds1.dll Syntax public enum MagneticInductionScale : byte Fields Name Description Scale04G 4G scale Scale08G 8G scale Scale12G 12G scale Scale16G 16G scale"
  },
  "devices/Iot.Device.Magnetometer.Ak8963.html": {
    "href": "devices/Iot.Device.Magnetometer.Ak8963.html",
    "title": "Class Ak8963 | nanoFramework Documentation",
    "keywords": "Class Ak8963 AK8963 class implementing a magnetometer Inheritance Object Ak8963 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Magnetometer Assembly : Iot.Device.Ak8963.dll Syntax [Interface(\"AK8963 class implementing a magnetometer\")] public sealed class Ak8963 : IDisposable Constructors | Improve this Doc View Source Ak8963(I2cDevice) Default constructor for an independent AK8963 Declaration public Ak8963(I2cDevice i2CDevice) Parameters Type Name Description I2cDevice i2CDevice The I2C device | Improve this Doc View Source Ak8963(I2cDevice, Ak8963I2cBase, Boolean) Constructor to use if AK8963 is behind another element and need a special I2C protocol like when used with the MPU9250 Declaration public Ak8963(I2cDevice i2cDevice, Ak8963I2cBase ak8963Interface, bool shouldDispose = true) Parameters Type Name Description I2cDevice i2cDevice The I2C device Ak8963I2cBase ak8963Interface The specific interface to communicate with the AK8963 Boolean shouldDispose True to dispose the I2C device when class is disposed Fields | Improve this Doc View Source DefaultI2cAddress Default I2C address for the AK8963 Declaration public const byte DefaultI2cAddress = 12 Field Value Type Description Byte Properties | Improve this Doc View Source DefaultTimeout Default timeout to use when timeout is not provided in the reading methods Declaration [Property] public TimeSpan DefaultTimeout { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source HasDataToRead True if there is a data to read Declaration public bool HasDataToRead { get; } Property Value Type Description Boolean | Improve this Doc View Source MageneticFieldGeneratorEnabled Get or set the device self test mode. If set to true, this creates a magnetic field Once you read it, you will have the results of the self test 14-bit output(BIT=“0”) | HX[15:0] | HY[15:0] | HZ[15:0] Criteria | -50 =< HX =< 50 | -50 =< HY =< 50 | -800 =< HZ =< -200 16-bit output(BIT=“1”) | HX[15:0] | HY[15:0] | HZ[15:0] Criteria | -200 =< HX =< 200 | -200 =< HY =< 200 | -3200 =< HZ =< -800 Declaration [Property] public bool MageneticFieldGeneratorEnabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MagnetometerAdjustment Get the magnetometer hardware adjustment bias Declaration [Property] public Vector3 MagnetometerAdjustment { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source MagnetometerBias Get the magnetometer bias Declaration [Property] public Vector3 MagnetometerBias { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source MeasurementMode Select the measurement mode Declaration [Property] public MeasurementMode MeasurementMode { get; set; } Property Value Type Description MeasurementMode | Improve this Doc View Source OutputBitMode Select the output bit rate Declaration [Property] public OutputBitMode OutputBitMode { get; set; } Property Value Type Description OutputBitMode Methods | Improve this Doc View Source CalibrateMagnetometer(Int32) Calibrate the magnetometer. Make sure your sensor is as far as possible of magnet Calculate as well the magnetometer bias. Please make sure you are moving the magnetometer all over space, rotating it. Please make sure you are not close to any magnetic field like magnet or phone Declaration public Vector3 CalibrateMagnetometer(int numberOfMeasurements = 1000) Parameters Type Name Description Int32 numberOfMeasurements Number of measurement for the calibration, default is 1000 Returns Type Description Vector3 Returns the factory calibration data | Improve this Doc View Source Dispose() Cleanup everything Declaration public void Dispose() | Improve this Doc View Source GetDeviceInfo() Get the device information Declaration public byte GetDeviceInfo() Returns Type Description Byte The device information | Improve this Doc View Source IsVersionCorrect() Check if the version is the correct one (0x48). This is fixed for this device Page 28 from the documentation : Device ID of AKM. It is described in one byte and fixed value. 48H: fixed Declaration public bool IsVersionCorrect() Returns Type Description Boolean Returns true if the version match | Improve this Doc View Source ReadMagnetometer(Boolean) Read the magnetometer with bias correction and can wait for new data to be present Declaration [Telemetry(\"Magnetometer\")] public Vector3 ReadMagnetometer(bool waitForData = true) Parameters Type Name Description Boolean waitForData true to wait for new data Returns Type Description Vector3 The data from the magnetometer Remarks Vector axes are the following: +X \\ | / \\ | / |/ /| / | / | +Z +Y | Improve this Doc View Source ReadMagnetometer(Boolean, TimeSpan) Read the magnetometer with bias correction and can wait for new data to be present Declaration public Vector3 ReadMagnetometer(bool waitForData, TimeSpan timeout) Parameters Type Name Description Boolean waitForData true to wait for new data TimeSpan timeout timeout for waiting the data, ignored if waitForData is false Returns Type Description Vector3 The data from the magnetometer Remarks Vector axes are the following: +X \\ | / \\ | / |/ /| / | / | +Z +Y | Improve this Doc View Source ReadMagnetometerWithoutCorrection(Boolean) Read the magnetometer without Bias correction and can wait for new data to be present Declaration public Vector3 ReadMagnetometerWithoutCorrection(bool waitForData = true) Parameters Type Name Description Boolean waitForData true to wait for new data Returns Type Description Vector3 The data from the magnetometer Remarks Vector axes are the following: +X \\ | / \\ | / |/ /| / | / | +Z +Y | Improve this Doc View Source ReadMagnetometerWithoutCorrection(Boolean, TimeSpan) Read the magnetometer without Bias correction and can wait for new data to be present Declaration public Vector3 ReadMagnetometerWithoutCorrection(bool waitForData, TimeSpan timeout) Parameters Type Name Description Boolean waitForData true to wait for new data TimeSpan timeout timeout for waiting the data, ignored if waitForData is false Returns Type Description Vector3 The data from the magnetometer Remarks Vector axes are the following: +X \\ | / \\ | / |/ /| / | / | +Z +Y | Improve this Doc View Source Reset() Reset the device Declaration [Command] public void Reset() Implements IDisposable"
  },
  "devices/Iot.Device.Magnetometer.Ak8963I2c.html": {
    "href": "devices/Iot.Device.Magnetometer.Ak8963I2c.html",
    "title": "Class Ak8963I2c | nanoFramework Documentation",
    "keywords": "Class Ak8963I2c Default I2C interface for the AK8963 Inheritance Object Ak8963I2cBase Ak8963I2c Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Magnetometer Assembly : Iot.Device.Ak8963.dll Syntax public class Ak8963I2c : Ak8963I2cBase Methods | Improve this Doc View Source ReadByte(I2cDevice, Byte) Read a byte Declaration public override byte ReadByte(I2cDevice i2cDevice, byte reg) Parameters Type Name Description I2cDevice i2cDevice An I2C device Byte reg The register to read Returns Type Description Byte The register value Overrides Ak8963I2cBase.ReadByte(I2cDevice, Byte) | Improve this Doc View Source ReadBytes(I2cDevice, Byte, SpanByte) Read a byte array Declaration public override void ReadBytes(I2cDevice i2cDevice, byte reg, SpanByte readBytes) Parameters Type Name Description I2cDevice i2cDevice An I2C device Byte reg The register to read SpanByte readBytes A span of bytes with the read values Overrides Ak8963I2cBase.ReadBytes(I2cDevice, Byte, SpanByte) | Improve this Doc View Source WriteRegister(I2cDevice, Byte, Byte) Write a byte Declaration public override void WriteRegister(I2cDevice i2cDevice, byte reg, byte data) Parameters Type Name Description I2cDevice i2cDevice An I2C device Byte reg The register to read Byte data A byte to write Overrides Ak8963I2cBase.WriteRegister(I2cDevice, Byte, Byte)"
  },
  "devices/Iot.Device.Magnetometer.Ak8963I2cBase.html": {
    "href": "devices/Iot.Device.Magnetometer.Ak8963I2cBase.html",
    "title": "Class Ak8963I2cBase | nanoFramework Documentation",
    "keywords": "Class Ak8963I2cBase Abstract class for AK8963 the I2C interface. This sensor can be found as a sub I2C sensor like in the MPU9250. The access is done thru another I2C device and the core I2C primitive are different. Use those 3 primitive to define the access to read and write bytes to the AK8963 Inheritance Object Ak8963I2cBase Ak8963I2c Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Magnetometer Assembly : Iot.Device.Ak8963.dll Syntax public abstract class Ak8963I2cBase Methods | Improve this Doc View Source ReadByte(I2cDevice, Byte) Read a byte on a specific register Declaration public abstract byte ReadByte(I2cDevice i2CDevice, byte reg) Parameters Type Name Description I2cDevice i2CDevice I2C device Byte reg The register to read Returns Type Description Byte | Improve this Doc View Source ReadBytes(I2cDevice, Byte, SpanByte) Read bytes on a specific AK8963 register Declaration public abstract void ReadBytes(I2cDevice i2CDevice, byte reg, SpanByte readBytes) Parameters Type Name Description I2cDevice i2CDevice I2C device Byte reg The register to read SpanByte readBytes Span of byte to store the data read | Improve this Doc View Source WriteRegister(I2cDevice, Byte, Byte) Write a register of the AK8963 Declaration public abstract void WriteRegister(I2cDevice i2CDevice, byte reg, byte data) Parameters Type Name Description I2cDevice i2CDevice I2C device Byte reg The register to write Byte data The data byte to write"
  },
  "devices/Iot.Device.Magnetometer.Bmm150.html": {
    "href": "devices/Iot.Device.Magnetometer.Bmm150.html",
    "title": "Class Bmm150 | nanoFramework Documentation",
    "keywords": "Class Bmm150 Bmm150 class implementing a magnetometer Inheritance Object Bmm150 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Magnetometer Assembly : Iot.Device.Bmm150.dll Syntax [Interface(\"Bmm150 class implementing a magnetometer\")] public sealed class Bmm150 : IDisposable Constructors | Improve this Doc View Source Bmm150(I2cDevice) Default constructor for an independent Bmm150 Declaration public Bmm150(I2cDevice i2CDevice) Parameters Type Name Description I2cDevice i2CDevice The I2C device | Improve this Doc View Source Bmm150(I2cDevice, Bmm150I2cBase, Boolean) Constructor to use if Bmm150 is behind another element and need a special I2C protocol like when used with the MPU9250 Declaration public Bmm150(I2cDevice i2cDevice, Bmm150I2cBase Bmm150Interface, bool shouldDispose = true) Parameters Type Name Description I2cDevice i2cDevice The I2C device Bmm150I2cBase Bmm150Interface The specific interface to communicate with the Bmm150 Boolean shouldDispose True to dispose the I2C device when class is disposed Fields | Improve this Doc View Source PrimaryI2cAddress Primary I2C address for the Bmm150 In the official sheet (P36) states that address is 0x13: https://github.com/m5stack/M5_BMM150/blob/master/src/M5_BMM150_DEFS.h#L163 Declaration public const byte PrimaryI2cAddress = 19 Field Value Type Description Byte | Improve this Doc View Source SecondaryI2cAddress Secondary I2C address for the Bmm150 In the official sheet (P36) states that address is 0x13, alhtough for m5stack is 0x10 Declaration public const byte SecondaryI2cAddress = 16 Field Value Type Description Byte Properties | Improve this Doc View Source CalibrationCompensation Gets or sets Magnetometer calibration compensation vector Declaration public Vector3 CalibrationCompensation { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source DefaultTimeout Default timeout to use when timeout is not provided in the reading methods Declaration [Property] public TimeSpan DefaultTimeout { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source HasDataToRead True if there is a data to read Declaration public bool HasDataToRead { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVersionCorrect Check if the version is the correct one (0x32). This is fixed for this device Declaration public bool IsVersionCorrect { get; } Property Value Type Description Boolean Returns true if the version match Methods | Improve this Doc View Source CalibrateMagnetometer(Int32) Calibrate the magnetometer. Please make sure you are not close to any magnetic field like magnet or phone Please make sure you are moving the magnetometer all over space, rotating it. Declaration public void CalibrateMagnetometer(int numberOfMeasurements = 100) Parameters Type Name Description Int32 numberOfMeasurements Number of measurement for the calibration, default is 100 | Improve this Doc View Source Dispose() Cleanup everything Declaration public void Dispose() | Improve this Doc View Source GetDeviceInfo() Get the device information Declaration public byte GetDeviceInfo() Returns Type Description Byte The device information | Improve this Doc View Source ReadMagnetometer(Boolean) Read the magnetometer with bias correction and can wait for new data to be present Declaration [Telemetry(\"Magnetometer\")] public Vector3 ReadMagnetometer(bool waitForData = true) Parameters Type Name Description Boolean waitForData true to wait for new data Returns Type Description Vector3 The data from the magnetometer | Improve this Doc View Source ReadMagnetometer(Boolean, TimeSpan) Read the magnetometer with compensation calculation and can wait for new data to be present Declaration public Vector3 ReadMagnetometer(bool waitForData, TimeSpan timeout) Parameters Type Name Description Boolean waitForData true to wait for new data TimeSpan timeout timeout for waiting the data, ignored if waitForData is false Returns Type Description Vector3 The data from the magnetometer | Improve this Doc View Source ReadMagnetometerWithoutCorrection(Boolean) Read the magnetometer without Bias correction and can wait for new data to be present Declaration public Vector3 ReadMagnetometerWithoutCorrection(bool waitForData = true) Parameters Type Name Description Boolean waitForData true to wait for new data Returns Type Description Vector3 The data from the magnetometer | Improve this Doc View Source ReadMagnetometerWithoutCorrection(Boolean, TimeSpan) Read the magnetometer without Bias correction and can wait for new data to be present More info, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L921 Declaration public Vector3 ReadMagnetometerWithoutCorrection(bool waitForData, TimeSpan timeout) Parameters Type Name Description Boolean waitForData true to wait for new data TimeSpan timeout timeout for waiting the data, ignored if waitForData is false Returns Type Description Vector3 The data from the magnetometer Implements IDisposable"
  },
  "devices/Iot.Device.Magnetometer.Bmm150Compensation.html": {
    "href": "devices/Iot.Device.Magnetometer.Bmm150Compensation.html",
    "title": "Class Bmm150Compensation | nanoFramework Documentation",
    "keywords": "Class Bmm150Compensation Implements the Bmm150 magnetic field data (off-chip) temperature compensation functions https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmm150-ds001.pdf Page 15 Inheritance Object Bmm150Compensation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Magnetometer Assembly : Iot.Device.Bmm150.dll Syntax public class Bmm150Compensation Methods | Improve this Doc View Source CompensateX(Double, UInt32, Bmm150TrimRegisterData) Returns the compensated magnetometer x axis data(micro-tesla) in float. More details, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1614 Declaration public static double CompensateX(double x, uint rhall, Bmm150TrimRegisterData trimData) Parameters Type Name Description Double x axis raw value UInt32 rhall temperature compensation value (RHALL) Bmm150TrimRegisterData trimData trim registers values Returns Type Description Double compensated magnetometer x axis data(micro-tesla) in float | Improve this Doc View Source CompensateY(Double, UInt32, Bmm150TrimRegisterData) Returns the compensated magnetometer y axis data(micro-tesla) in float. More details, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1648 Declaration public static double CompensateY(double y, uint rhall, Bmm150TrimRegisterData trimData) Parameters Type Name Description Double y axis raw value UInt32 rhall temperature compensation value (RHALL) Bmm150TrimRegisterData trimData trim registers values Returns Type Description Double compensated magnetometer y axis data(micro-tesla) in float | Improve this Doc View Source CompensateZ(Double, UInt32, Bmm150TrimRegisterData) Returns the compensated magnetometer z axis data(micro-tesla) in float. More details, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1682 Declaration public static double CompensateZ(double z, uint rhall, Bmm150TrimRegisterData trimData) Parameters Type Name Description Double z axis raw value UInt32 rhall temperature compensation value (RHALL) Bmm150TrimRegisterData trimData trim registers values Returns Type Description Double compensated magnetometer z axis data(micro-tesla) in float"
  },
  "devices/Iot.Device.Magnetometer.Bmm150I2c.html": {
    "href": "devices/Iot.Device.Magnetometer.Bmm150I2c.html",
    "title": "Class Bmm150I2c | nanoFramework Documentation",
    "keywords": "Class Bmm150I2c Default I2C interface for the Bmm150 Inheritance Object Bmm150I2cBase Bmm150I2c Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Magnetometer Assembly : Iot.Device.Bmm150.dll Syntax public class Bmm150I2c : Bmm150I2cBase Methods | Improve this Doc View Source ReadByte(I2cDevice, Byte) Read a byte Declaration public override byte ReadByte(I2cDevice i2cDevice, byte reg) Parameters Type Name Description I2cDevice i2cDevice An I2C device Byte reg The register to read Returns Type Description Byte The register value Overrides Bmm150I2cBase.ReadByte(I2cDevice, Byte) | Improve this Doc View Source ReadBytes(I2cDevice, Byte, SpanByte) Read a byte array Declaration public override void ReadBytes(I2cDevice i2cDevice, byte reg, SpanByte readBytes) Parameters Type Name Description I2cDevice i2cDevice An I2C device Byte reg The register to read SpanByte readBytes A span of bytes with the read values Overrides Bmm150I2cBase.ReadBytes(I2cDevice, Byte, SpanByte) | Improve this Doc View Source WriteRegister(I2cDevice, Byte, Byte) Write a byte Declaration public override void WriteRegister(I2cDevice i2cDevice, byte reg, byte data) Parameters Type Name Description I2cDevice i2cDevice An I2C device Byte reg The register to read Byte data A byte to write Overrides Bmm150I2cBase.WriteRegister(I2cDevice, Byte, Byte)"
  },
  "devices/Iot.Device.Magnetometer.Bmm150I2cBase.html": {
    "href": "devices/Iot.Device.Magnetometer.Bmm150I2cBase.html",
    "title": "Class Bmm150I2cBase | nanoFramework Documentation",
    "keywords": "Class Bmm150I2cBase Abstract class for Bmm150 the I2C interface. This sensor can be found as a sub I2C sensor like in the MPU9250. The access is done thru another I2C device and the core I2C primitive are different. Use those 3 primitive to define the access to read and write bytes to the Bmm150 Inheritance Object Bmm150I2cBase Bmm150I2c Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Magnetometer Assembly : Iot.Device.Bmm150.dll Syntax public abstract class Bmm150I2cBase Methods | Improve this Doc View Source ReadByte(I2cDevice, Byte) Read a byte on a specific register Declaration public abstract byte ReadByte(I2cDevice i2CDevice, byte reg) Parameters Type Name Description I2cDevice i2CDevice I2C device Byte reg The register to read Returns Type Description Byte | Improve this Doc View Source ReadBytes(I2cDevice, Byte, SpanByte) Read bytes on a specific Bmm150 register Declaration public abstract void ReadBytes(I2cDevice i2CDevice, byte reg, SpanByte readBytes) Parameters Type Name Description I2cDevice i2CDevice I2C device Byte reg The register to read SpanByte readBytes Span of byte to store the data read | Improve this Doc View Source WriteRegister(I2cDevice, Byte, Byte) Write a register of the Bmm150 Declaration public abstract void WriteRegister(I2cDevice i2CDevice, byte reg, byte data) Parameters Type Name Description I2cDevice i2CDevice I2C device Byte reg The register to write Byte data The data byte to write"
  },
  "devices/Iot.Device.Magnetometer.Bmm150TrimRegisterData.html": {
    "href": "devices/Iot.Device.Magnetometer.Bmm150TrimRegisterData.html",
    "title": "Class Bmm150TrimRegisterData | nanoFramework Documentation",
    "keywords": "Class Bmm150TrimRegisterData Represents the trim registers of the sensor (trim values in the \"trim_data\" of device structure). Inheritance Object Bmm150TrimRegisterData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Magnetometer Assembly : Iot.Device.Bmm150.dll Syntax public class Bmm150TrimRegisterData Constructors | Improve this Doc View Source Bmm150TrimRegisterData() Creates a new instace Declaration public Bmm150TrimRegisterData() | Improve this Doc View Source Bmm150TrimRegisterData(SpanByte, SpanByte, SpanByte) Creates a new instace based on the trim registers SpanBytes Declaration public Bmm150TrimRegisterData(SpanByte trimX1y1Data, SpanByte trimXyzData, SpanByte trimXy1Xy2Data) Parameters Type Name Description SpanByte trimX1y1Data trimX1y1Data bytes SpanByte trimXyzData trimXyzData bytes SpanByte trimXy1Xy2Data trimXy1Xy2Data bytes Properties | Improve this Doc View Source DigX1 trim DigX1 data Declaration public byte DigX1 { get; set; } Property Value Type Description Byte | Improve this Doc View Source DigX2 trim DigX2 data Declaration public byte DigX2 { get; set; } Property Value Type Description Byte | Improve this Doc View Source DigXy1 trim DigXy1 data Declaration public int DigXy1 { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DigXy2 trim DigXy2 data Declaration public int DigXy2 { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DigXyz1 trim DigXyz1 data Declaration public int DigXyz1 { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DigY1 trim DigY1 data Declaration public byte DigY1 { get; set; } Property Value Type Description Byte | Improve this Doc View Source DigY2 trim DigY2 data Declaration public byte DigY2 { get; set; } Property Value Type Description Byte | Improve this Doc View Source DigZ1 trim DigZ1 data Declaration public int DigZ1 { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DigZ2 trim DigZ2 data Declaration public int DigZ2 { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DigZ3 trim DigZ3 data Declaration public int DigZ3 { get; set; } Property Value Type Description Int32 | Improve this Doc View Source DigZ4 trim DigZ4 data Declaration public int DigZ4 { get; set; } Property Value Type Description Int32"
  },
  "devices/Iot.Device.Magnetometer.html": {
    "href": "devices/Iot.Device.Magnetometer.html",
    "title": "Namespace Iot.Device.Magnetometer | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Magnetometer Classes Ak8963 AK8963 class implementing a magnetometer Ak8963I2c Default I2C interface for the AK8963 Ak8963I2cBase Abstract class for AK8963 the I2C interface. This sensor can be found as a sub I2C sensor like in the MPU9250. The access is done thru another I2C device and the core I2C primitive are different. Use those 3 primitive to define the access to read and write bytes to the AK8963 Bmm150 Bmm150 class implementing a magnetometer Bmm150Compensation Implements the Bmm150 magnetic field data (off-chip) temperature compensation functions https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmm150-ds001.pdf Page 15 Bmm150I2c Default I2C interface for the Bmm150 Bmm150I2cBase Abstract class for Bmm150 the I2C interface. This sensor can be found as a sub I2C sensor like in the MPU9250. The access is done thru another I2C device and the core I2C primitive are different. Use those 3 primitive to define the access to read and write bytes to the Bmm150 Bmm150TrimRegisterData Represents the trim registers of the sensor (trim values in the \"trim_data\" of device structure). Enums MeasurementMode Measurement used by the AK8963 OutputBitMode Sampling mode"
  },
  "devices/Iot.Device.Magnetometer.MeasurementMode.html": {
    "href": "devices/Iot.Device.Magnetometer.MeasurementMode.html",
    "title": "Enum MeasurementMode | nanoFramework Documentation",
    "keywords": "Enum MeasurementMode Measurement used by the AK8963 Namespace : Iot.Device.Magnetometer Assembly : Iot.Device.Ak8963.dll Syntax public enum MeasurementMode Fields Name Description ContinuousMeasurement100Hz Continuous Measurement at 100Hz ContinuousMeasurement8Hz Continuous Measurement at 8Hz ExternalTriggedMeasurement External Trigged Measurement FuseRomAccess Fuse Rom Access PowerDown Power Down SelfTest Self Test SingleMeasurement Single Measurement"
  },
  "devices/Iot.Device.Magnetometer.OutputBitMode.html": {
    "href": "devices/Iot.Device.Magnetometer.OutputBitMode.html",
    "title": "Enum OutputBitMode | nanoFramework Documentation",
    "keywords": "Enum OutputBitMode Sampling mode Namespace : Iot.Device.Magnetometer Assembly : Iot.Device.Ak8963.dll Syntax public enum OutputBitMode Fields Name Description Output14bit Output 14 bit Output16bit Output 16 bit"
  },
  "devices/Iot.Device.MathExtensions.html": {
    "href": "devices/Iot.Device.MathExtensions.html",
    "title": "Class MathExtensions | nanoFramework Documentation",
    "keywords": "Class MathExtensions Implementations of some functions missing in older .NET versions Inheritance Object MathExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device Assembly : Iot.Device.Tcs3472x.dll Syntax public static class MathExtensions Methods | Improve this Doc View Source Clamp(Byte, Byte, Byte) Returns val, limited to the range min-max (inclusive) Declaration public static byte Clamp(byte val, byte min, byte max) Parameters Type Name Description Byte val Byte min Byte max Returns Type Description Byte | Improve this Doc View Source Clamp(Byte, Byte, Byte) Returns val, limited to the range min-max (inclusive) Declaration public static byte Clamp(byte val, byte min, byte max) Parameters Type Name Description Byte val Byte min Byte max Returns Type Description Byte | Improve this Doc View Source Clamp(Double, Double, Double) Returns val, limited to the range min-max (inclusive) Declaration public static double Clamp(double val, double min, double max) Parameters Type Name Description Double val Double min Double max Returns Type Description Double | Improve this Doc View Source Clamp(Double, Double, Double) Returns val, limited to the range min-max (inclusive) Declaration public static double Clamp(double val, double min, double max) Parameters Type Name Description Double val Double min Double max Returns Type Description Double | Improve this Doc View Source Clamp(Int32, Int32, Int32) Returns val, limited to the range min-max (inclusive) Declaration public static int Clamp(int val, int min, int max) Parameters Type Name Description Int32 val Int32 min Int32 max Returns Type Description Int32 | Improve this Doc View Source Clamp(Int32, Int32, Int32) Returns val, limited to the range min-max (inclusive) Declaration public static int Clamp(int val, int min, int max) Parameters Type Name Description Int32 val Int32 min Int32 max Returns Type Description Int32 | Improve this Doc View Source Clamp(Int64, Int64, Int64) Returns val, limited to the range min-max (inclusive) Declaration public static long Clamp(long val, long min, long max) Parameters Type Name Description Int64 val Int64 min Int64 max Returns Type Description Int64 | Improve this Doc View Source Clamp(Int64, Int64, Int64) Returns val, limited to the range min-max (inclusive) Declaration public static long Clamp(long val, long min, long max) Parameters Type Name Description Int64 val Int64 min Int64 max Returns Type Description Int64 | Improve this Doc View Source Clamp(UInt32, UInt32, UInt32) Returns val, limited to the range min-max (inclusive) Declaration public static uint Clamp(uint val, uint min, uint max) Parameters Type Name Description UInt32 val UInt32 min UInt32 max Returns Type Description UInt32 | Improve this Doc View Source Clamp(UInt32, UInt32, UInt32) Returns val, limited to the range min-max (inclusive) Declaration public static uint Clamp(uint val, uint min, uint max) Parameters Type Name Description UInt32 val UInt32 min UInt32 max Returns Type Description UInt32"
  },
  "devices/Iot.Device.Max31856.html": {
    "href": "devices/Iot.Device.Max31856.html",
    "title": "Namespace Iot.Device.Max31856 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Max31856 Classes Max31856 Max31856 - cold-junction compensated thermocouple to digital converter Enums ThermocoupleType Sets the Thermocouple Type"
  },
  "devices/Iot.Device.Max31856.Max31856.html": {
    "href": "devices/Iot.Device.Max31856.Max31856.html",
    "title": "Class Max31856 | nanoFramework Documentation",
    "keywords": "Class Max31856 Max31856 - cold-junction compensated thermocouple to digital converter Inheritance Object Max31856 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Max31856 Assembly : Iot.Device.Max31856.dll Syntax public class Max31856 : IDisposable Constructors | Improve this Doc View Source Max31856(SpiDevice, ThermocoupleType) Creates a new instance of the Max31856. Declaration public Max31856(SpiDevice spiDevice, ThermocoupleType thermocoupleType = ThermocoupleType.T) Parameters Type Name Description SpiDevice spiDevice The communications channel to a device on a SPI bus ThermocoupleType thermocoupleType Thermocouple type. It Defaults to T. Fields | Improve this Doc View Source SpiClockFrequency Spi Clock Frequency Declaration public const int SpiClockFrequency = 5000000 Field Value Type Description Int32 | Improve this Doc View Source SpiDataFlow SPI data flow Declaration public const DataFlow SpiDataFlow = DataFlow.MsbFirst Field Value Type Description DataFlow | Improve this Doc View Source SpiModeSetup SPI Mode Declaration public const SpiMode SpiModeSetup = SpiMode.Mode1 Field Value Type Description SpiMode Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetColdJunctionTemperature() Reads the temperature from the Cold-Junction sensor Declaration public Temperature GetColdJunctionTemperature() Returns Type Description UnitsNet.Temperature Temperature, precision +- 0.7 Celsius range from -20 Celsius to +85 Celsius | Improve this Doc View Source GetTemperature() Command to Get Temperature from the device Declaration public Temperature GetTemperature() Returns Type Description UnitsNet.Temperature Implements IDisposable"
  },
  "devices/Iot.Device.Max31856.ThermocoupleType.html": {
    "href": "devices/Iot.Device.Max31856.ThermocoupleType.html",
    "title": "Enum ThermocoupleType | nanoFramework Documentation",
    "keywords": "Enum ThermocoupleType Sets the Thermocouple Type Namespace : Iot.Device.Max31856 Assembly : Iot.Device.Max31856.dll Syntax public enum ThermocoupleType : byte Fields Name Description B Type B thermocouple E Type E thermocouple J Type J thermocouple K Type K thermocouple N Type N thermocouple R Type R thermocouple S Type S thermocouple T Type T thermocouple"
  },
  "devices/Iot.Device.Max31865.ConversionFilterMode.html": {
    "href": "devices/Iot.Device.Max31865.ConversionFilterMode.html",
    "title": "Enum ConversionFilterMode | nanoFramework Documentation",
    "keywords": "Enum ConversionFilterMode Notch frequencies for the noise rejection filter Namespace : Iot.Device.Max31865 Assembly : Iot.Device.Max31865.dll Syntax public enum ConversionFilterMode : byte Fields Name Description Filter50Hz Reject 50Hz and its harmonics Filter60Hz Reject 60Hz and its harmonics"
  },
  "devices/Iot.Device.Max31865.FaultStatus.html": {
    "href": "devices/Iot.Device.Max31865.FaultStatus.html",
    "title": "Class FaultStatus | nanoFramework Documentation",
    "keywords": "Class FaultStatus MAX31865 Fault Status Inheritance Object FaultStatus Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Max31865 Assembly : Iot.Device.Max31865.dll Syntax public class FaultStatus Constructors | Improve this Doc View Source FaultStatus(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) FaultStatus Constructor Declaration public FaultStatus(bool overUnderVoltage, bool resistanceTemperatureDetectorLow, bool referenceInLow, bool referenceInHigh, bool lowThreshold, bool highThreshold) Parameters Type Name Description Boolean overUnderVoltage If an overvoltage or undervoltage has occurred. Boolean resistanceTemperatureDetectorLow Resistance temperature detector is low. Boolean referenceInLow Reference in is low. Boolean referenceInHigh Reference in is high. Boolean lowThreshold The ADC conversion is less than or equal to the low threshold. Boolean highThreshold The ADC conversion is greater than or equal to the high threshold. Properties | Improve this Doc View Source HighThreshold The ADC conversion is greater than or equal to the high threshold. Declaration public bool HighThreshold { get; set; } Property Value Type Description Boolean | Improve this Doc View Source LowThreshold The ADC conversion is less than or equal to the low threshold. Declaration public bool LowThreshold { get; set; } Property Value Type Description Boolean | Improve this Doc View Source OverUnderVoltage If an overvoltage or undervoltage has occurred. Declaration public bool OverUnderVoltage { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ReferenceInHigh Reference in is high. Declaration public bool ReferenceInHigh { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ReferenceInLow Reference in is low. Declaration public bool ReferenceInLow { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ResistanceTemperatureDetectorLow Resistance temperature detector is low. Declaration public bool ResistanceTemperatureDetectorLow { get; set; } Property Value Type Description Boolean"
  },
  "devices/Iot.Device.Max31865.html": {
    "href": "devices/Iot.Device.Max31865.html",
    "title": "Namespace Iot.Device.Max31865 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Max31865 Classes FaultStatus MAX31865 Fault Status Max31865 MAX31865 Resistance Temperature Detector to Digital Converter Enums ConversionFilterMode Notch frequencies for the noise rejection filter PlatinumResistanceThermometerType Type of Platinum Thermometer temperature sensor ResistanceTemperatureDetectorWires Number of platinum thermometer sensor wires"
  },
  "devices/Iot.Device.Max31865.Max31865.html": {
    "href": "devices/Iot.Device.Max31865.Max31865.html",
    "title": "Class Max31865 | nanoFramework Documentation",
    "keywords": "Class Max31865 MAX31865 Resistance Temperature Detector to Digital Converter Inheritance Object Max31865 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Max31865 Assembly : Iot.Device.Max31865.dll Syntax public class Max31865 : IDisposable Remarks Documentation https://datasheets.maximintegrated.com/en/ds/MAX31865.pdf Constructors | Improve this Doc View Source Max31865(SpiDevice, PlatinumResistanceThermometerType, ResistanceTemperatureDetectorWires, ElectricResistance, ConversionFilterMode, Boolean) Creates a new instance of the MAX31865. Declaration public Max31865(SpiDevice spiDevice, PlatinumResistanceThermometerType platinumResistanceThermometerType, ResistanceTemperatureDetectorWires resistanceTemperatureDetectorWires, ElectricResistance referenceResistor, ConversionFilterMode filterMode = ConversionFilterMode.Filter60Hz, bool shouldDispose = true) Parameters Type Name Description SpiDevice spiDevice The communications channel to a device on a SPI bus PlatinumResistanceThermometerType platinumResistanceThermometerType The type of Platinum Resistance Thermometer ResistanceTemperatureDetectorWires resistanceTemperatureDetectorWires The number of wires the Platinum Resistance Thermometer has UnitsNet.ElectricResistance referenceResistor The reference resistor value in Ohms. ConversionFilterMode filterMode Noise rejection filter mode Boolean shouldDispose True to dispose the SPI device Fields | Improve this Doc View Source SpiClockFrequency MAX31865 Spi Clock Frequency Declaration public const int SpiClockFrequency = 5000000 Field Value Type Description Int32 | Improve this Doc View Source SpiDataFlow MAX31865 SPI Data Flow Declaration public const DataFlow SpiDataFlow = DataFlow.MsbFirst Field Value Type Description DataFlow | Improve this Doc View Source SpiMode1 MAX31865 SPI Mode 1 Declaration public const SpiMode SpiMode1 = SpiMode.Mode1 Field Value Type Description SpiMode | Improve this Doc View Source SpiMode3 MAX31865 SPI Mode 3 Declaration public const SpiMode SpiMode3 = SpiMode.Mode3 Field Value Type Description SpiMode Properties | Improve this Doc View Source Faults The fault state of the sensor Declaration public FaultStatus Faults { get; } Property Value Type Description FaultStatus | Improve this Doc View Source Temperature MAX31865 Temperature Declaration public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Max31865.PlatinumResistanceThermometerType.html": {
    "href": "devices/Iot.Device.Max31865.PlatinumResistanceThermometerType.html",
    "title": "Enum PlatinumResistanceThermometerType | nanoFramework Documentation",
    "keywords": "Enum PlatinumResistanceThermometerType Type of Platinum Thermometer temperature sensor Namespace : Iot.Device.Max31865 Assembly : Iot.Device.Max31865.dll Syntax public enum PlatinumResistanceThermometerType : short Fields Name Description Pt100 Platinum Thermometer 100 temperature sensor Pt1000 Platinum Thermometer 1000 temperature sensor"
  },
  "devices/Iot.Device.Max31865.ResistanceTemperatureDetectorWires.html": {
    "href": "devices/Iot.Device.Max31865.ResistanceTemperatureDetectorWires.html",
    "title": "Enum ResistanceTemperatureDetectorWires | nanoFramework Documentation",
    "keywords": "Enum ResistanceTemperatureDetectorWires Number of platinum thermometer sensor wires Namespace : Iot.Device.Max31865 Assembly : Iot.Device.Max31865.dll Syntax public enum ResistanceTemperatureDetectorWires : byte Fields Name Description FourWire Four wire platinum thermometer sensor ThreeWire Three wire platinum thermometer sensor TwoWire Two wire platinum thermometer sensor"
  },
  "devices/Iot.Device.Max44009.html": {
    "href": "devices/Iot.Device.Max44009.html",
    "title": "Namespace Iot.Device.Max44009 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Max44009 Classes Max44009 Ambient Light Sensor MAX44009 Enums IntegrationTime Measurement Cycle WorkingMode MAX44009 Working Mode"
  },
  "devices/Iot.Device.Max44009.IntegrationTime.html": {
    "href": "devices/Iot.Device.Max44009.IntegrationTime.html",
    "title": "Enum IntegrationTime | nanoFramework Documentation",
    "keywords": "Enum IntegrationTime Measurement Cycle Namespace : Iot.Device.Max44009 Assembly : Iot.Device.Max44009.dll Syntax public enum IntegrationTime : byte Fields Name Description Time006_25 6.25ms Time012_5 12.5ms Time025 25ms Time050 50ms Time100 100ms Time200 200ms Time400 400ms Time800 800ms"
  },
  "devices/Iot.Device.Max44009.Max44009.html": {
    "href": "devices/Iot.Device.Max44009.Max44009.html",
    "title": "Class Max44009 | nanoFramework Documentation",
    "keywords": "Class Max44009 Ambient Light Sensor MAX44009 Inheritance Object Max44009 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Max44009 Assembly : Iot.Device.Max44009.dll Syntax [Interface(\"Ambient Light Sensor MAX44009\")] public class Max44009 : IDisposable Constructors | Improve this Doc View Source Max44009(I2cDevice) Creates a new instance of the MAX44009, MAX44009 working mode is default. (Consume lowest power) Declaration public Max44009(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. | Improve this Doc View Source Max44009(I2cDevice, IntegrationTime) Creates a new instance of the MAX44009, MAX44009 working mode is continuous. (Consume slightly higher power than in the default mode) Declaration public Max44009(I2cDevice i2cDevice, IntegrationTime integrationTime) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. IntegrationTime integrationTime Measurement Cycle Fields | Improve this Doc View Source DefaultI2cAddress MAX44009 Default I2C Address Declaration public const byte DefaultI2cAddress = 74 Field Value Type Description Byte Properties | Improve this Doc View Source Illuminance MAX44009 Illuminance (Lux) Declaration [Telemetry] public double Illuminance { get; } Property Value Type Description Double Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Max44009.WorkingMode.html": {
    "href": "devices/Iot.Device.Max44009.WorkingMode.html",
    "title": "Enum WorkingMode | nanoFramework Documentation",
    "keywords": "Enum WorkingMode MAX44009 Working Mode Namespace : Iot.Device.Max44009 Assembly : Iot.Device.Max44009.dll Syntax public enum WorkingMode Fields Name Description Continuous Measure lux intensity continuously. If integration time is 6.25ms, readings are taken every 6.25ms. If integration time is 800ms, readings are taken every 800ms. Default Measure lux intensity only once every 800ms regardless of integration time."
  },
  "devices/Iot.Device.Max7219.DeviceIdDigit.html": {
    "href": "devices/Iot.Device.Max7219.DeviceIdDigit.html",
    "title": "Class DeviceIdDigit | nanoFramework Documentation",
    "keywords": "Class DeviceIdDigit Inheritance Object DeviceIdDigit Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Max7219 Assembly : Iot.Device.Max7219.dll Syntax public class DeviceIdDigit Constructors | Improve this Doc View Source DeviceIdDigit(Int32, Int32) Declaration public DeviceIdDigit(int deviceId, int digit) Parameters Type Name Description Int32 deviceId Int32 digit Properties | Improve this Doc View Source DeviceId Declaration public int DeviceId { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Digit Declaration public int Digit { get; set; } Property Value Type Description Int32"
  },
  "devices/Iot.Device.Max7219.FixedSizeFont.html": {
    "href": "devices/Iot.Device.Max7219.FixedSizeFont.html",
    "title": "Class FixedSizeFont | nanoFramework Documentation",
    "keywords": "Class FixedSizeFont Implementation of a IFont that uses a common array for all characters. The number of bytes per character is constant and zero values between the characters are trimmed. Inheritance Object FixedSizeFont Implements IFont Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Max7219 Assembly : Iot.Device.Max7219.dll Syntax public class FixedSizeFont : IFont Constructors | Improve this Doc View Source FixedSizeFont(Int32, Byte[], Int32) Constructs FixedSizeFont instance Declaration public FixedSizeFont(int bytesPerCharacter, byte[] data, int spaceWidth = 3) Parameters Type Name Description Int32 bytesPerCharacter number of bytes per character Byte [] data Font data Int32 spaceWidth Space width Properties | Improve this Doc View Source Item[Char] Get character information Declaration public ListByte this[char chr] { get; } Parameters Type Name Description Char chr Property Value Type Description ListByte Implements IFont"
  },
  "devices/Iot.Device.Max7219.Fonts.html": {
    "href": "devices/Iot.Device.Max7219.Fonts.html",
    "title": "Class Fonts | nanoFramework Documentation",
    "keywords": "Class Fonts Data about Max7219 fonts Inheritance Object Fonts Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Max7219 Assembly : Iot.Device.Max7219.dll Syntax public static class Fonts Fields | Improve this Doc View Source CP437 CP437 font data Declaration public static readonly IFont CP437 Field Value Type Description IFont | Improve this Doc View Source CyrillicUkrainian Cyrillic Ukrainian font Declaration public static readonly IFont CyrillicUkrainian Field Value Type Description IFont | Improve this Doc View Source LCD LCD font Declaration public static readonly IFont LCD Field Value Type Description IFont | Improve this Doc View Source Sinclair Sinclair font Declaration public static readonly IFont Sinclair Field Value Type Description IFont | Improve this Doc View Source Tiny Tiny font Declaration public static readonly IFont Tiny Field Value Type Description IFont Properties | Improve this Doc View Source Default Default Max7219 font Declaration public static IFont Default { get; } Property Value Type Description IFont"
  },
  "devices/Iot.Device.Max7219.html": {
    "href": "devices/Iot.Device.Max7219.html",
    "title": "Namespace Iot.Device.Max7219 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Max7219 Classes DeviceIdDigit FixedSizeFont Implementation of a IFont that uses a common array for all characters. The number of bytes per character is constant and zero values between the characters are trimmed. Fonts Data about Max7219 fonts ListByte List class for type Byte that has been automatically generated MatrixGraphics Graphical functions for a MAX7219 device Max7219 Max7219 LED matrix driver Structs ListByte.Enumerator Enumerates the elements of a System.Collections.Generic.List. Interfaces IFont A font contains one list of bytes per character which can be written to the matrix to represent the character. Enums RotationType Rotation if several displays are rotated in a row."
  },
  "devices/Iot.Device.Max7219.IFont.html": {
    "href": "devices/Iot.Device.Max7219.IFont.html",
    "title": "Interface IFont | nanoFramework Documentation",
    "keywords": "Interface IFont A font contains one list of bytes per character which can be written to the matrix to represent the character. Namespace : Iot.Device.Max7219 Assembly : Iot.Device.Max7219.dll Syntax public interface IFont Remarks Each character consists of a list of bytes where a single byte represents a column of the display. Examples This example shows how the 'A' char could by encoded: var aBytes = new byte[] { 0b1111100, 0b1111110, 0b0010011, 0b0010011, 0b1111110, 0b1111100, 0b0000000, 0b0000000 }; Properties | Improve this Doc View Source Item[Char] Returns a list of bytes for a given character to be written to a matrix. Declaration ListByte this[char chr] { get; } Parameters Type Name Description Char chr Property Value Type Description ListByte"
  },
  "devices/Iot.Device.Max7219.ListByte.Enumerator.html": {
    "href": "devices/Iot.Device.Max7219.ListByte.Enumerator.html",
    "title": "Struct ListByte.Enumerator | nanoFramework Documentation",
    "keywords": "Struct ListByte.Enumerator Enumerates the elements of a System.Collections.Generic.List. Implements IEnumerator IDisposable Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Iot.Device.Max7219 Assembly : Iot.Device.Max7219.dll Syntax public struct Enumerator : IEnumerator, IDisposable Constructors | Improve this Doc View Source Enumerator(ListByte) Create an enumerator of the collection Declaration public Enumerator(ListByte collection) Parameters Type Name Description ListByte collection Properties | Improve this Doc View Source Current Gets the element at the current position of the enumerator. Declaration public readonly byte Current { get; } Property Value Type Description Byte Methods | Improve this Doc View Source Dispose() Releases all resources used by the System.Collections.Generic.List.Enumerator. Declaration public void Dispose() | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the System.Collections.Generic.List. Declaration public bool MoveNext() Returns Type Description Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. | Improve this Doc View Source Reset() Move back to first position Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration readonly object IEnumerator.Current { get; } Returns Type Description Object Implements IEnumerator IDisposable"
  },
  "devices/Iot.Device.Max7219.ListByte.html": {
    "href": "devices/Iot.Device.Max7219.ListByte.html",
    "title": "Class ListByte | nanoFramework Documentation",
    "keywords": "Class ListByte List class for type Byte that has been automatically generated Inheritance Object ListByte Implements IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Max7219 Assembly : Iot.Device.Max7219.dll Syntax public class ListByte : IEnumerable Constructors | Improve this Doc View Source ListByte() Initializes a new instance of the System.Collections.Generic.List class that is empty and has the default initial capacity. Declaration public ListByte() | Improve this Doc View Source ListByte(IEnumerable) Initializes a new instance of the System.Collections.Generic.List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. Declaration public ListByte(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements are copied to the new list. Exceptions Type Condition ArgumentNullException collection is null | Improve this Doc View Source ListByte(Int32) Initializes a new instance of the System.Collections.Generic.List class that is empty and has the specified initial capacity. Declaration public ListByte(int capacity) Parameters Type Name Description Int32 capacity The number of elements that the new list can initially store. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 0. Properties | Improve this Doc View Source Capacity Gets or sets the total number of elements the internal data structure can hold without resizing. Declaration public int Capacity { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException System.Collections.Generic.List.Capacity is set to a value that is less than System.Collections.Generic.List.Count | Improve this Doc View Source Count Gets the number of elements contained in the System.Collections.Generic.List Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Gets or sets the element at the specified index. Declaration public byte this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description Byte The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is equal to or greater than System.Collections.Generic.List.Count. Methods | Improve this Doc View Source Add(Byte) Adds an object to the end of the System.Collections.Generic.List. Declaration public void Add(byte item) Parameters Type Name Description Byte item The object to be added to the end of the System.Collections.Generic.List. The value can be null for reference types. | Improve this Doc View Source AddRange(IEnumerable) Adds the elements of the specified collection to the end of the System.Collections.Generic.List. Declaration public void AddRange(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements should be added to the end of the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type byte is a reference type. Exceptions Type Condition ArgumentNullException collection is null. | Improve this Doc View Source Contains(Byte) Determines whether an element is in the System.Collections.Generic.List. Declaration public bool Contains(byte item) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is found in the System.Collections.Generic.List; otherwise, false. | Improve this Doc View Source CopyTo(Byte[]) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the beginning of the target array. Declaration public void CopyTo(byte[] array) Parameters Type Name Description Byte [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Exceptions Type Condition ArgumentNullException array is null. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the number of elements that the destination array can contain. | Improve this Doc View Source CopyTo(Byte[], Int32) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(byte[] array, int arrayIndex) Parameters Type Name Description Byte [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source CopyTo(Int32, Byte[], Int32, Int32) Copies a range of elements from the System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(int index, byte[] array, int arrayIndex, int count) Parameters Type Name Description Int32 index The zero-based index in the source System.Collections.Generic.List at which copying begins. Byte [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Int32 count The number of elements to copy. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than 0. -or- arrayIndex is less than 0. -or- count is less than 0. ArgumentException index is equal to or greater than the System.Collections.Generic.List.Count of the source System.Collections.Generic.List. -or- The number of elements from index to the end of the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the System.Collections.Generic.List. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator A System.Collections.Generic.List.Enumerator for the System.Collections.Generic.List. | Improve this Doc View Source GetRange(Int32, Int32) Creates a shallow copy of a range of elements in the source System.Collections.Generic.List. Declaration public ListByte GetRange(int index, int count) Parameters Type Name Description Int32 index The zero-based System.Collections.Generic.List index at which the range starts. Int32 count The number of elements in the range. Returns Type Description ListByte A shallow copy of a range of elements in the source System.Collections.Generic.List. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(Byte) Searches for the specified object and returns the zero-based index of the first occurrence within the entire System.Collections.Generic.List. Declaration public int IndexOf(byte item) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the first occurrence of item within the entire System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source IndexOf(Byte, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that extends from the specified index to the last element. Declaration public int IndexOf(byte item, int index) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that extends from index to the last element, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(Byte, Int32, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that starts at the specified index and contains the specified number of elements. Declaration public int IndexOf(byte item, int index, int count) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that starts at index and contains count number of elements, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source Insert(Int32, Byte) Inserts an element into the System.Collections.Generic.List at the specified index. Declaration public void Insert(int index, byte item) Parameters Type Name Description Int32 index The zero-based index at which item should be inserted. Byte item The object to insert. The value can be null for reference types. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source InsertRange(Int32, IEnumerable) Inserts the elements of a collection into the System.Collections.Generic.List at the specified index. Declaration public void InsertRange(int index, IEnumerable collection) Parameters Type Name Description Int32 index The zero-based index at which the new elements should be inserted. IEnumerable collection The collection whose elements should be inserted into the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type byte is a reference type. Exceptions Type Condition ArgumentNullException collection is null. ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source LastIndexOf(Byte) Searches for the specified object and returns the zero-based index of the last occurrence within the entire System.Collections.Generic.List. Declaration public int LastIndexOf(byte item) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the last occurrence of item within the entire the System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source LastIndexOf(Byte, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that extends from the first element to the specified index. Declaration public int LastIndexOf(byte item, int index) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that extends from the first element to index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source LastIndexOf(Byte, Int32, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that contains the specified number of elements and ends at the specified index. Declaration public int LastIndexOf(byte item, int index, int count) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that contains count number of elements and ends at index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source Remove(Byte) Removes the first occurrence of a specific object from the System.Collections.Generic.List. Declaration public bool Remove(byte item) Parameters Type Name Description Byte item The object to remove from the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the System.Collections.Generic.List. | Improve this Doc View Source RemoveAt(Int32) Removes the element at the specified index of the System.Collections.Generic.List. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. | Improve this Doc View Source RemoveRange(Int32, Int32) Removes a range of elements from the System.Collections.Generic.List. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The zero-based starting index of the range of elements to remove. Int32 count The number of elements to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source ToArray() Copies the elements of the System.Collections.Generic.List to a new array. Declaration public byte[] ToArray() Returns Type Description Byte [] An array containing copies of the elements of the System.Collections.Generic.List. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IEnumerable"
  },
  "devices/Iot.Device.Max7219.MatrixGraphics.html": {
    "href": "devices/Iot.Device.Max7219.MatrixGraphics.html",
    "title": "Class MatrixGraphics | nanoFramework Documentation",
    "keywords": "Class MatrixGraphics Graphical functions for a MAX7219 device Inheritance Object MatrixGraphics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Max7219 Assembly : Iot.Device.Max7219.dll Syntax public class MatrixGraphics Constructors | Improve this Doc View Source MatrixGraphics(Max7219, IFont) Constructs MatrixGraphics instance Declaration public MatrixGraphics(Max7219 device, IFont font) Parameters Type Name Description Max7219 device Max7219 device IFont font Font to use for drawing text Properties | Improve this Doc View Source Font Font used for drawing text Declaration public IFont Font { get; set; } Property Value Type Description IFont Methods | Improve this Doc View Source ScrollDown(Boolean) Scrolls the underlying buffer (for all cascaded devices) down one pixel Declaration public void ScrollDown(bool flush = true) Parameters Type Name Description Boolean flush | Improve this Doc View Source ScrollLeft(Byte, Boolean) Scrolls the underlying buffer (for all cascaded devices) to the left Declaration public void ScrollLeft(byte value, bool flush = true) Parameters Type Name Description Byte value Boolean flush | Improve this Doc View Source ScrollRight(Byte, Boolean) Scrolls the underlying buffer (for all cascaded devices) to the right Declaration public void ScrollRight(byte value, bool flush = true) Parameters Type Name Description Byte value Boolean flush | Improve this Doc View Source ScrollUp(Boolean) Scrolls the underlying buffer (for all cascaded devices) up one pixel Declaration public void ScrollUp(bool flush = true) Parameters Type Name Description Boolean flush | Improve this Doc View Source ShowMessage(String, Int32, Boolean) Shows a message on the device. If it's longer then the total width (or == true), it transitions the text message across the devices from right-to-left. Declaration public void ShowMessage(string text, int delayInMilliseconds = 50, bool alwaysScroll = false) Parameters Type Name Description String text Int32 delayInMilliseconds Boolean alwaysScroll | Improve this Doc View Source WriteLetter(Int32, Char, Boolean) Writes a char to the given device with the specified font. Declaration public void WriteLetter(int deviceId, char chr, bool flush = true) Parameters Type Name Description Int32 deviceId Char chr Boolean flush"
  },
  "devices/Iot.Device.Max7219.Max7219.html": {
    "href": "devices/Iot.Device.Max7219.Max7219.html",
    "title": "Class Max7219 | nanoFramework Documentation",
    "keywords": "Class Max7219 Max7219 LED matrix driver Inheritance Object Max7219 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Max7219 Assembly : Iot.Device.Max7219.dll Syntax public class Max7219 : IDisposable Constructors | Improve this Doc View Source Max7219(SpiDevice, Int32, RotationType) Creates a Max7219 Device given a to communicate over and the number of devices that are cascaded. Declaration public Max7219(SpiDevice spiDevice, int cascadedDevices = 1, RotationType rotation = RotationType.None) Parameters Type Name Description SpiDevice spiDevice Int32 cascadedDevices RotationType rotation Fields | Improve this Doc View Source NumDigits Number of digits Register per Module Declaration public const int NumDigits = 8 Field Value Type Description Int32 | Improve this Doc View Source SpiClockFrequency MAX7219 Spi Clock Frequency Declaration public const int SpiClockFrequency = 10000000 Field Value Type Description Int32 | Improve this Doc View Source SpiMode MAX7219 SPI Mode Declaration public const SpiMode SpiMode = SpiMode.Mode0 Field Value Type Description SpiMode Properties | Improve this Doc View Source CascadedDevices Number of cascaded devices Declaration public int CascadedDevices { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[DeviceIdDigit] Gets or Sets the value to the digit value for a given device and digit position Declaration public byte this[DeviceIdDigit device] { get; set; } Parameters Type Name Description DeviceIdDigit device Property Value Type Description Byte | Improve this Doc View Source Item[Int32] Gets or Sets the value to the digit value for a given absolute index Declaration public byte this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description Byte | Improve this Doc View Source Length Gets the total number of digits (cascaded devices * num digits) Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Rotation The Rotation to be applied (when modules are assembled rotated way) Declaration public RotationType Rotation { get; set; } Property Value Type Description RotationType Methods | Improve this Doc View Source Brightness(Int32) Sets the brightness of all cascaded devices to the same intensity level. Declaration public void Brightness(int intensity) Parameters Type Name Description Int32 intensity intensity level ranging from 0..15. | Improve this Doc View Source Clear(Int32, Int32, Boolean) Clears the buffer from the given start to end (exclusive) and flushes Declaration public void Clear(int start, int end, bool flush = true) Parameters Type Name Description Int32 start Int32 end Boolean flush | Improve this Doc View Source ClearAll(Boolean) Clears the buffer from the given start to end and flushes Declaration public void ClearAll(bool flush = true) Parameters Type Name Description Boolean flush | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Flush() Writes all the Values to the devices. Declaration public void Flush() | Improve this Doc View Source Init() Standard initialization routine. Declaration public void Init() | Improve this Doc View Source WriteBuffer(Byte[][]) Writes a two dimensional buffer containing all the values to the devices. Declaration public void WriteBuffer(byte[][] buffer) Parameters Type Name Description Byte [][] buffer Implements IDisposable"
  },
  "devices/Iot.Device.Max7219.RotationType.html": {
    "href": "devices/Iot.Device.Max7219.RotationType.html",
    "title": "Enum RotationType | nanoFramework Documentation",
    "keywords": "Enum RotationType Rotation if several displays are rotated in a row. Namespace : Iot.Device.Max7219 Assembly : Iot.Device.Max7219.dll Syntax public enum RotationType Fields Name Description Half each device is turned by 180 degree Left each device is turned 90 degree to the left None No rotation needed Right each device is turned 90 degree to the right"
  },
  "devices/Iot.Device.Mcp25xxx.html": {
    "href": "devices/Iot.Device.Mcp25xxx.html",
    "title": "Namespace Iot.Device.Mcp25xxx | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp25xxx Classes Mcp2515 Driver for the Microchip MCP2515 CAN controller. Mcp25625 Driver for the Microchip MCP25625 CAN controller. Mcp25xxx A general purpose driver for the Microchip MCP25 CAN controller device family. RxStatusResponse Response from RX STATUS instruction. Enums InstructionFormat MCP25xxx instruction format ReadStatusResponse Response from READ STATUS instruction. RxBufferAddressPointer Address Pointer to one of four locations for the receive buffer. RxStatusResponse.FilterMatchType Filter match type RxStatusResponse.MessageReceivedType The extended ID bit is mapped to bit 4. The RTR bit is mapped to bit 3. RxStatusResponse.ReceivedMessageType RXxIF (CANINTF) bits are mapped to bits 7 and 6. TxBufferAddressPointer Address Pointer to one of six locations for the transmit buffer."
  },
  "devices/Iot.Device.Mcp25xxx.InstructionFormat.html": {
    "href": "devices/Iot.Device.Mcp25xxx.InstructionFormat.html",
    "title": "Enum InstructionFormat | nanoFramework Documentation",
    "keywords": "Enum InstructionFormat MCP25xxx instruction format Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum InstructionFormat : byte Fields Name Description BitModify Allows the user to set or clear individual bits in a particular register. LoadTxBuffer When loading a transmit buffer, reduces the overhead of a normal WRITE command by placing the Address Pointer at one of six locations, as indicated by the 3 lower bits. Read Reads data from the register beginning at the selected address. ReadRxBuffer When reading a receive buffer, reduces the overhead of a normal READ command by placing the Address Pointer at one of four locations, as indicated by the lower 2nd and 3rd bits. ReadStatus Quick polling command that reads several Status bits for transmit and receive functions. RequestToSend Instructs the controller to begin the message transmission sequence for any of the transmit buffers. Buffers are indicated by the 3 lower bits. Reset Resets the internal registers to the default state, sets Configuration mode. RxStatus Quick polling command that indicates a filter match and message type (standard, extended and/or remote) of the received message. Write Writes data to the register beginning at the selected address."
  },
  "devices/Iot.Device.Mcp25xxx.Mcp2515.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Mcp2515.html",
    "title": "Class Mcp2515 | nanoFramework Documentation",
    "keywords": "Class Mcp2515 Driver for the Microchip MCP2515 CAN controller. Inheritance Object Mcp25xxx Mcp2515 Implements IDisposable Inherited Members Mcp25xxx.Tx0RtsPin Mcp25xxx.Tx1RtsPin Mcp25xxx.Tx2RtsPin Mcp25xxx.ResetPin Mcp25xxx.InterruptPin Mcp25xxx.Rx0BfPin Mcp25xxx.Rx1BfPin Mcp25xxx.Reset() Mcp25xxx.Read(Address) Mcp25xxx.ReadRxBuffer(RxBufferAddressPointer, Int32) Mcp25xxx.WriteByte(Address, Byte) Mcp25xxx.WriteByte(IRegister) Mcp25xxx.Write(Address, SpanByte) Mcp25xxx.LoadTxBuffer(TxBufferAddressPointer, SpanByte) Mcp25xxx.RequestToSend(Boolean, Boolean, Boolean) Mcp25xxx.ReadStatus() Mcp25xxx.RxStatus() Mcp25xxx.BitModify(Address, Byte, Byte) Mcp25xxx.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax public class Mcp2515 : Mcp25xxx, IDisposable Constructors | Improve this Doc View Source Mcp2515(SpiDevice, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, GpioController, Boolean) Initializes a new instance of the Mcp2515 class. Declaration public Mcp2515(SpiDevice spiDevice, int reset = -1, int tx0rts = -1, int tx1rts = -1, int tx2rts = -1, int interrupt = -1, int rx0bf = -1, int rx1bf = -1, int clkout = -1, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description SpiDevice spiDevice The SPI device used for communication. Int32 reset The output pin number that is connected to Reset. Int32 tx0rts The output pin number that is connected to Tx0RTS. Int32 tx1rts The output pin number that is connected to Tx1RTS. Int32 tx2rts The output pin number that is connected to Tx2RTS. Int32 interrupt The input pin number that is connected to INT. Int32 rx0bf The input pin number that is connected to Rx0BF. Int32 rx1bf The input pin number that is connected to Rx1BF. Int32 clkout The input pin number that is connected to CLKOUT. GpioController gpioController The GPIO controller for defined external pins. If not specified, the default controller will be used. Boolean shouldDispose True to dispose the Gpio Controller Implements IDisposable"
  },
  "devices/Iot.Device.Mcp25xxx.Mcp25625.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Mcp25625.html",
    "title": "Class Mcp25625 | nanoFramework Documentation",
    "keywords": "Class Mcp25625 Driver for the Microchip MCP25625 CAN controller. Inheritance Object Mcp25xxx Mcp25625 Implements IDisposable Inherited Members Mcp25xxx.Tx0RtsPin Mcp25xxx.Tx1RtsPin Mcp25xxx.Tx2RtsPin Mcp25xxx.ResetPin Mcp25xxx.InterruptPin Mcp25xxx.Rx0BfPin Mcp25xxx.Rx1BfPin Mcp25xxx.Reset() Mcp25xxx.Read(Address) Mcp25xxx.ReadRxBuffer(RxBufferAddressPointer, Int32) Mcp25xxx.WriteByte(Address, Byte) Mcp25xxx.WriteByte(IRegister) Mcp25xxx.Write(Address, SpanByte) Mcp25xxx.LoadTxBuffer(TxBufferAddressPointer, SpanByte) Mcp25xxx.RequestToSend(Boolean, Boolean, Boolean) Mcp25xxx.ReadStatus() Mcp25xxx.RxStatus() Mcp25xxx.BitModify(Address, Byte, Byte) Mcp25xxx.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax public class Mcp25625 : Mcp25xxx, IDisposable Constructors | Improve this Doc View Source Mcp25625(SpiDevice, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, GpioController, Boolean) Initializes a new instance of the Mcp25625 class. Declaration public Mcp25625(SpiDevice spiDevice, int reset = -1, int tx0rts = -1, int tx1rts = -1, int tx2rts = -1, int standby = -1, int interrupt = -1, int rx0bf = -1, int rx1bf = -1, int clkout = -1, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description SpiDevice spiDevice The SPI device used for communication. Int32 reset The output pin number that is connected to Reset. Int32 tx0rts The output pin number that is connected to Tx0RTS. Int32 tx1rts The output pin number that is connected to Tx1RTS. Int32 tx2rts The output pin number that is connected to Tx2RTS. Int32 standby The output pin number that is connected to STBY. Int32 interrupt The input pin number that is connected to INT. Int32 rx0bf The input pin number that is connected to Rx0BF. Int32 rx1bf The input pin number that is connected to Rx1BF. Int32 clkout The input pin number that is connected to CLKOUT. GpioController gpioController The GPIO controller for defined external pins. If not specified, the default controller will be used. Boolean shouldDispose True to dispose the Gpio Controller Properties | Improve this Doc View Source StandbyPin Writes a value to Standby (STBY) pin. Declaration public PinValue StandbyPin { set; } Property Value Type Description PinValue Implements IDisposable"
  },
  "devices/Iot.Device.Mcp25xxx.Mcp25xxx.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Mcp25xxx.html",
    "title": "Class Mcp25xxx | nanoFramework Documentation",
    "keywords": "Class Mcp25xxx A general purpose driver for the Microchip MCP25 CAN controller device family. Inheritance Object Mcp25xxx Mcp2515 Mcp25625 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax public abstract class Mcp25xxx : IDisposable Constructors | Improve this Doc View Source Mcp25xxx(SpiDevice, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, GpioController, Boolean) A general purpose driver for the Microchip MCP25 CAN controller device family. Declaration public Mcp25xxx(SpiDevice spiDevice, int reset = -1, int tx0rts = -1, int tx1rts = -1, int tx2rts = -1, int interrupt = -1, int rx0bf = -1, int rx1bf = -1, int clkout = -1, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description SpiDevice spiDevice The SPI device used for communication. Int32 reset The output pin number that is connected to Reset. Int32 tx0rts The output pin number that is connected to Tx0RTS. Int32 tx1rts The output pin number that is connected to Tx1RTS. Int32 tx2rts The output pin number that is connected to Tx2RTS. Int32 interrupt The input pin number that is connected to INT. Int32 rx0bf The input pin number that is connected to Rx0BF. Int32 rx1bf The input pin number that is connected to Rx1BF. Int32 clkout The input pin number that is connected to CLKOUT. GpioController gpioController The GPIO controller for defined external pins. If not specified, the default controller will be used. Boolean shouldDispose True to dispose the Gpio Controller Properties | Improve this Doc View Source InterruptPin Reads the current value of Interrupt pin. Declaration public PinValue InterruptPin { get; } Property Value Type Description PinValue | Improve this Doc View Source ResetPin Writes a value to Reset pin. Declaration public PinValue ResetPin { set; } Property Value Type Description PinValue | Improve this Doc View Source Rx0BfPin Reads the current value of Rx0BF pin. Declaration public PinValue Rx0BfPin { get; } Property Value Type Description PinValue | Improve this Doc View Source Rx1BfPin Reads the current value of Rx1BF pin. Declaration public PinValue Rx1BfPin { get; } Property Value Type Description PinValue | Improve this Doc View Source Tx0RtsPin Writes a value to Tx0RTS pin. Declaration public PinValue Tx0RtsPin { set; } Property Value Type Description PinValue | Improve this Doc View Source Tx1RtsPin Writes a value to Tx1RTS pin. Declaration public PinValue Tx1RtsPin { set; } Property Value Type Description PinValue | Improve this Doc View Source Tx2RtsPin Writes a value to Tx2RTS pin. Declaration public PinValue Tx2RtsPin { set; } Property Value Type Description PinValue Methods | Improve this Doc View Source BitModify(Address, Byte, Byte) Allows the user to set or clear individual bits in a particular register. Not all registers can be bit modified with this command. Declaration public void BitModify(Address address, byte mask, byte value) Parameters Type Name Description Address address The address to write data. Byte mask The mask to determine which bits in the register will be allowed to change. A '1' will allow a bit to change while a '0' will not. Byte value The value to be written. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source LoadTxBuffer(TxBufferAddressPointer, SpanByte) When loading a transmit buffer, reduces the overhead of a normal WRITE command by placing the Address Pointer at one of six locations for transmit buffer. Declaration public void LoadTxBuffer(TxBufferAddressPointer addressPointer, SpanByte buffer) Parameters Type Name Description TxBufferAddressPointer addressPointer The Address Pointer to one of six locations for the transmit buffer. SpanByte buffer The data to load in transmit buffer. | Improve this Doc View Source Read(Address) Reads data from the register beginning at the selected address. Declaration public byte Read(Address address) Parameters Type Name Description Address address The address to read. Returns Type Description Byte The value of address read. | Improve this Doc View Source ReadRxBuffer(RxBufferAddressPointer, Int32) When reading a receive buffer, reduces the overhead of a normal READ command by placing the Address Pointer at one of four locations for the receive buffer. Declaration public byte[] ReadRxBuffer(RxBufferAddressPointer addressPointer, int byteCount = 1) Parameters Type Name Description RxBufferAddressPointer addressPointer The Address Pointer to one of four locations for the receive buffer. Int32 byteCount Number of bytes to read. This must be one or more to read. Returns Type Description Byte [] The value of address read. | Improve this Doc View Source ReadStatus() Quick polling command that reads several Status bits for transmit and receive functions. Declaration public ReadStatusResponse ReadStatus() Returns Type Description ReadStatusResponse The response from READ STATUS instruction. | Improve this Doc View Source RequestToSend(Boolean, Boolean, Boolean) Instructs the controller to begin the message transmission sequence for any of the transmit buffers. Declaration public void RequestToSend(bool txb0, bool txb1, bool txb2) Parameters Type Name Description Boolean txb0 Instructs the controller to begin the message transmission sequence for TxB0. Boolean txb1 Instructs the controller to begin the message transmission sequence for TxB1. Boolean txb2 Instructs the controller to begin the message transmission sequence for TxB2. | Improve this Doc View Source Reset() Resets the internal registers to the default state and sets Configuration mode. Declaration public void Reset() | Improve this Doc View Source RxStatus() Quick polling command that indicates a filter match and message type (standard, extended and/or remote) of the received message. Declaration public RxStatusResponse RxStatus() Returns Type Description RxStatusResponse Response from RX STATUS instruction. | Improve this Doc View Source Write(Address, SpanByte) Writes data to the register beginning at the selected address. Declaration public void Write(Address address, SpanByte buffer) Parameters Type Name Description Address address The starting address to write data. SpanByte buffer The buffer that contains the data to be written. | Improve this Doc View Source WriteByte(Address, Byte) Writes one byte to the register beginning at the selected address. Declaration public void WriteByte(Address address, byte value) Parameters Type Name Description Address address The address to write the data. Byte value The value to be written. | Improve this Doc View Source WriteByte(IRegister) Writes a byte to the selected register address. Declaration public void WriteByte(IRegister register) Parameters Type Name Description IRegister register The register to write the data. Implements IDisposable"
  },
  "devices/Iot.Device.Mcp25xxx.ReadStatusResponse.html": {
    "href": "devices/Iot.Device.Mcp25xxx.ReadStatusResponse.html",
    "title": "Enum ReadStatusResponse | nanoFramework Documentation",
    "keywords": "Enum ReadStatusResponse Response from READ STATUS instruction. Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax [Flags] public enum ReadStatusResponse : byte Fields Name Description Rx0If RX0IF (CANINTF Register). Rx1If RX1IF (CANINTF Register). Tx0If TX0IF (CANINTF Register). Tx0Req TXREQ (TXB0CTRL Register). Tx1If TX1IF (CANINTF Register). Tx1Req TXREQ (TXB1CTRL Register). Tx2If TX2IF (CANINTF Register). Tx2Req TXREQ (TXB2CTRL Register)."
  },
  "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.html",
    "title": "Namespace Iot.Device.Mcp25xxx.Register.AcceptanceFilter | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp25xxx.Register.AcceptanceFilter Classes RxFxEid0 Filter Extended Identifier Low Register. RxFxEid8 Filter Extended Identifier High Register. RxFxSidh Filter Standard Identifier High Register. RxFxSidl Filter Standard Identifier Low Register. RxMxEid0 Mask Extended Identifier Low Register. RxMxEid8 Mask Extended Identifier High Register. RxMxSidh Mask Standard Identifier High Register. RxMxSidl Mask Standard Identifier Low Register."
  },
  "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid0.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid0.html",
    "title": "Class RxFxEid0 | nanoFramework Documentation",
    "keywords": "Class RxFxEid0 Filter Extended Identifier Low Register. Inheritance Object RxFxEid0 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.AcceptanceFilter Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxFxEid0 : IRegister Constructors | Improve this Doc View Source RxFxEid0(Byte, Byte) Initializes a new instance of the RxFxEid0 class. Declaration public RxFxEid0(byte rxFilterNumber, byte extendedIdentifier) Parameters Type Name Description Byte rxFilterNumber Receive Filter Number. Must be a value of 0 - 5. Byte extendedIdentifier EID[7:0]: Extended Identifier bits. These bits hold the filter bits to be applied to bits[7:0] of the Extended Identifier portion of a received message or to Byte 1 in received data if corresponding with RXM[1:0] = 00 and EXIDE = 0. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifier EID[7:0]: Extended Identifier bits. These bits hold the filter bits to be applied to bits[7:0] of the Extended Identifier portion of a received message or to Byte 1 in received data if corresponding with RXM[1:0] = 00 and EXIDE = 0. Declaration public byte ExtendedIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source RxFilterNumber Receive Filter Number. Must be a value of 0 - 5. Declaration public byte RxFilterNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxFilterNumber(Address) Gets the Rx Filter Number based on the register address. Declaration public static byte GetRxFilterNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Filter Number. Returns Type Description Byte The Rx Filter Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid8.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid8.html",
    "title": "Class RxFxEid8 | nanoFramework Documentation",
    "keywords": "Class RxFxEid8 Filter Extended Identifier High Register. Inheritance Object RxFxEid8 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.AcceptanceFilter Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxFxEid8 : IRegister Constructors | Improve this Doc View Source RxFxEid8(Byte, Byte) Initializes a new instance of the RxFxEid8 class. Declaration public RxFxEid8(byte rxFilterNumber, byte extendedIdentifier) Parameters Type Name Description Byte rxFilterNumber Receive Filter Number. Must be a value of 0 - 5. Byte extendedIdentifier EID[15:]: Extended Identifier bits. These bits hold the filter bits to be applied to bits[15:8] of the Extended Identifier portion of a received message or to Byte 0 in received data if corresponding with RXM[1:0] = 00 and EXIDE = 0. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifier EID[15:]: Extended Identifier bits. These bits hold the filter bits to be applied to bits[15:8] of the Extended Identifier portion of a received message or to Byte 0 in received data if corresponding with RXM[1:0] = 00 and EXIDE = 0. Declaration public byte ExtendedIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source RxFilterNumber Receive Filter Number. Must be a value of 0 - 5. Declaration public byte RxFilterNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxFilterNumber(Address) Gets the Rx Filter Number based on the register address. Declaration public static byte GetRxFilterNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Filter Number. Returns Type Description Byte The Rx Filter Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidh.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidh.html",
    "title": "Class RxFxSidh | nanoFramework Documentation",
    "keywords": "Class RxFxSidh Filter Standard Identifier High Register. Inheritance Object RxFxSidh Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.AcceptanceFilter Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxFxSidh : IRegister Constructors | Improve this Doc View Source RxFxSidh(Byte, Byte) Initializes a new instance of the RxFxSidh class. Declaration public RxFxSidh(byte rxFilterNumber, byte standardIdentifierFilter) Parameters Type Name Description Byte rxFilterNumber Receive Filter Number. Must be a value of 0 - 5. Byte standardIdentifierFilter SID[10:3]: Standard Identifier Filter bits These bits hold the filter bits to be applied to bits[10:3] of the Standard Identifier portion of a received message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source RxFilterNumber Receive Filter Number. Must be a value of 0 - 5. Declaration public byte RxFilterNumber { get; } Property Value Type Description Byte | Improve this Doc View Source StandardIdentifierFilter SID[10:3]: Standard Identifier Filter bits These bits hold the filter bits to be applied to bits[10:3] of the Standard Identifier portion of a received message. Declaration public byte StandardIdentifierFilter { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxFilterNumber(Address) Gets the Rx Filter Number based on the register address. Declaration public static byte GetRxFilterNumber(Address address) Parameters Type Name Description Address address The address to up look Rx Filter Number. Returns Type Description Byte The Rx Filter Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.html",
    "title": "Class RxFxSidl | nanoFramework Documentation",
    "keywords": "Class RxFxSidl Filter Standard Identifier Low Register. Inheritance Object RxFxSidl Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.AcceptanceFilter Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxFxSidl : IRegister Constructors | Improve this Doc View Source RxFxSidl(Byte, Byte) Initializes a new instance of the RxFxSidl class. Declaration public RxFxSidl(byte rxFilterNumber, byte value) Parameters Type Name Description Byte rxFilterNumber Receive Filter Number. Must be a value of 0 - 5. Byte value The value that represents the register contents. | Improve this Doc View Source RxFxSidl(Byte, Byte, Boolean, Byte) Initializes a new instance of the RxFxSidl class. Declaration public RxFxSidl(byte rxFilterNumber, byte extendedIdentifierFilter, bool extendedIdentifierEnable, byte standardIdentifierFilter) Parameters Type Name Description Byte rxFilterNumber Receive Filter Number. Must be a value of 0 - 5. Byte extendedIdentifierFilter EID[17:16]: Extended Identifier Filter bits. These bits hold the filter bits to be applied to bits[17:16] of the Extended Identifier portion of a received message. Boolean extendedIdentifierEnable EXIDE: Extended Identifier Enable bit. True = Filter is applied only to extended frames. False = Filter is applied only to standard frames. Byte standardIdentifierFilter SID[2:0]: Standard Identifier Filter bits. These bits hold the filter bits to be applied to bits[2:0] of the Standard Identifier portion of a received message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifierEnable EXIDE: Extended Identifier Enable bit. True = Filter is applied only to extended frames. False = Filter is applied only to standard frames. Declaration public bool ExtendedIdentifierEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source ExtendedIdentifierFilter EID[17:16]: Extended Identifier Filter bits. These bits hold the filter bits to be applied to bits[17:16] of the Extended Identifier portion of a received message. Declaration public byte ExtendedIdentifierFilter { get; } Property Value Type Description Byte | Improve this Doc View Source RxFilterNumber Receive Filter Number. Must be a value of 0 - 5. Declaration public byte RxFilterNumber { get; } Property Value Type Description Byte | Improve this Doc View Source StandardIdentifierFilter SID[2:0]:Standard Identifier Filter bits. These bits hold the filter bits to be applied to bits[2:0] of the Standard Identifier portion of a received message. Declaration public byte StandardIdentifierFilter { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxFilterNumber(Address) Gets the Rx Filter Number based on the register address. Declaration public static byte GetRxFilterNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Filter Number. Returns Type Description Byte The Rx Filter Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid0.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid0.html",
    "title": "Class RxMxEid0 | nanoFramework Documentation",
    "keywords": "Class RxMxEid0 Mask Extended Identifier Low Register. Inheritance Object RxMxEid0 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.AcceptanceFilter Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxMxEid0 : IRegister Constructors | Improve this Doc View Source RxMxEid0(Byte, Byte) Initializes a new instance of the RxMxEid0 class. Declaration public RxMxEid0(byte rxMaskNumber, byte extendedIdentifierMask) Parameters Type Name Description Byte rxMaskNumber Receive Mask Number. Must be a value of 0 - 1. Byte extendedIdentifierMask EID[7:0]: Extended Identifier Mask bits. These bits hold the filter bits to be applied to bits[7:0] of the Extended Identifier portion of a received message.If corresponding with RXM[1:0] = 00 and EXIDE = 0, these bits are applied to Byte 1 in received data. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifierMask EID[7:0]: Extended Identifier Mask bits. These bits hold the filter bits to be applied to bits[7:0] of the Extended Identifier portion of a received message.If corresponding with RXM[1:0] = 00 and EXIDE = 0, these bits are applied to Byte 1 in received data. Declaration public byte ExtendedIdentifierMask { get; } Property Value Type Description Byte | Improve this Doc View Source RxMaskNumber Receive Mask Number. Must be a value of 0 - 1. Declaration public byte RxMaskNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxMaskNumber(Address) Gets the Rx Mask Number based on the register address. Declaration public static byte GetRxMaskNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Mask Number. Returns Type Description Byte The Rx Mask Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid8.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid8.html",
    "title": "Class RxMxEid8 | nanoFramework Documentation",
    "keywords": "Class RxMxEid8 Mask Extended Identifier High Register. Inheritance Object RxMxEid8 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.AcceptanceFilter Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxMxEid8 : IRegister Constructors | Improve this Doc View Source RxMxEid8(Byte, Byte) Initializes a new instance of the RxMxEid8 class. Declaration public RxMxEid8(byte rxMaskNumber, byte extendedIdentifier) Parameters Type Name Description Byte rxMaskNumber Receive Mask Number. Must be a value of 0 - 1. Byte extendedIdentifier EID[15:8]: Extended Identifier bits. These bits hold the filter bits to be applied to bits[15:8] of the Extended Identifier portion of a received message.If corresponding with RXM[1:0] = 00 and EXIDE = 0, these bits are applied to Byte 0 in received data. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifier EID[15:8]: Extended Identifier bits. These bits hold the filter bits to be applied to bits[15:8] of the Extended Identifier portion of a received message.If corresponding with RXM[1:0] = 00 and EXIDE = 0, these bits are applied to Byte 0 in received data. Declaration public byte ExtendedIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source RxMaskNumber Receive Mask Number. Must be a value of 0 - 1. Declaration public byte RxMaskNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxMaskNumber(Address) Gets the Rx Mask Number based on the register address. Declaration public static byte GetRxMaskNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Mask Number. Returns Type Description Byte The Rx Mask Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidh.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidh.html",
    "title": "Class RxMxSidh | nanoFramework Documentation",
    "keywords": "Class RxMxSidh Mask Standard Identifier High Register. Inheritance Object RxMxSidh Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.AcceptanceFilter Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxMxSidh : IRegister Constructors | Improve this Doc View Source RxMxSidh(Byte, Byte) Initializes a new instance of the RxMxSidh class. Declaration public RxMxSidh(byte rxMaskNumber, byte standardIdentifierMask) Parameters Type Name Description Byte rxMaskNumber Receive Mask Number. Must be a value of 0 - 1. Byte standardIdentifierMask SID[10:3]: Standard Identifier Mask bits. These bits hold the mask bits to be applied to bits[10:3] of the Standard Identifier portion of a received message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source RxMaskNumber Receive Mask Number. Must be a value of 0 - 1. Declaration public byte RxMaskNumber { get; } Property Value Type Description Byte | Improve this Doc View Source StandardIdentifierMask SID[10:3]: Standard Identifier Mask bits. These bits hold the mask bits to be applied to bits[10:3] of the Standard Identifier portion of a received message. Declaration public byte StandardIdentifierMask { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxMaskNumber(Address) Gets the Rx Mask Number based on the register address. Declaration public static byte GetRxMaskNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Mask Number. Returns Type Description Byte The Rx Mask Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl.html",
    "title": "Class RxMxSidl | nanoFramework Documentation",
    "keywords": "Class RxMxSidl Mask Standard Identifier Low Register. Inheritance Object RxMxSidl Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.AcceptanceFilter Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxMxSidl : IRegister Constructors | Improve this Doc View Source RxMxSidl(Byte, Byte) Initializes a new instance of the RxMxSidl class. Declaration public RxMxSidl(byte rxMaskNumber, byte value) Parameters Type Name Description Byte rxMaskNumber Receive Mask Number. Must be a value of 0 - 1. Byte value The value that represents the register contents. | Improve this Doc View Source RxMxSidl(Byte, Byte, Byte) Initializes a new instance of the RxMxSidl class. Declaration public RxMxSidl(byte rxMaskNumber, byte extendedIdentifierMask, byte standardIdentifierMask) Parameters Type Name Description Byte rxMaskNumber Receive Mask Number. Must be a value of 0 - 1. Byte extendedIdentifierMask EID[17:16]: Extended Identifier Mask bits. These bits hold the mask bits to be applied to bits[17:16] of the Extended Identifier portion of a received message. Byte standardIdentifierMask SID[2:0]: Standard Identifier Mask bits. These bits hold the mask bits to be applied to bits[2:0] of the Standard Identifier portion of a received message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifierMask EID[17:16]: Extended Identifier Mask bits. These bits hold the mask bits to be applied to bits[17:16] of the Extended Identifier portion of a received message. Declaration public byte ExtendedIdentifierMask { get; } Property Value Type Description Byte | Improve this Doc View Source RxMaskNumber Receive Mask Number. Must be a value of 0 - 1. Declaration public byte RxMaskNumber { get; } Property Value Type Description Byte | Improve this Doc View Source StandardIdentifierMask SID[2:0]: Standard Identifier Mask bits. These bits hold the mask bits to be applied to bits[2:0] of the Standard Identifier portion of a received message. Declaration public byte StandardIdentifierMask { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxMaskNumber(Address) Gets the Rx Mask Number based on the register address. Declaration public static byte GetRxMaskNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Mask Number. Returns Type Description Byte The Rx Mask Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.Address.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.Address.html",
    "title": "Enum Address | nanoFramework Documentation",
    "keywords": "Enum Address Control Register Summary. Namespace : Iot.Device.Mcp25xxx.Register Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum Address : byte Fields Name Description BfpCtrl RxnBF Pin Control and Status Register. CanCtrl CAN Control Register. CanIntE CAN Interrupt Enable Register. CanIntF CAN Interrupt Flag Register. CanStat CAN Status Register. Cnf1 Configuration 1 Register. Cnf2 Configuration 2 Register. Cnf3 Configuration 3 Register. Eflg Error Flag Register. Rec Receiver Error Counter Register. RxB0Ctrl Receive Buffer 0 Control Register. RxB0D0 Receive Buffer 0 Data Byte 0 Register. RxB0D1 Receive Buffer 0 Data Byte 1 Register. RxB0D2 Receive Buffer 0 Data Byte 2 Register. RxB0D3 Receive Buffer 0 Data Byte 3 Register. RxB0D4 Receive Buffer 0 Data Byte 4 Register. RxB0D5 Receive Buffer 0 Data Byte 5 Register. RxB0D6 Receive Buffer 0 Data Byte 6 Register. RxB0D7 Receive Buffer 0 Data Byte 7 Register. RxB0Dlc Receive Buffer 0 Data Length Code Register. RxB0Eid0 Receive Buffer 0 Extended Identifier Low Register. RxB0Eid8 Receive Buffer 0 Extended Identifier High Register. RxB0Sidh Receive Buffer 0 Standard Identifier High Register. RxB0Sidl Receive Buffer 0 Standard Identifier Low Register. RxB1Ctrl Receive Buffer 1 Control Register. RxB1D0 Receive Buffer 1 Data Byte 0 Register. RxB1D1 Receive Buffer 1 Data Byte 1 Register. RxB1D2 Receive Buffer 1 Data Byte 2 Register. RxB1D3 Receive Buffer 1 Data Byte 3 Register. RxB1D4 Receive Buffer 1 Data Byte 4 Register. RxB1D5 Receive Buffer 1 Data Byte 5 Register. RxB1D6 Receive Buffer 1 Data Byte 6 Register. RxB1D7 Receive Buffer 1 Data Byte 7 Register. RxB1Dlc Receive Buffer 1 Data Length Code Register. RxB1Eid0 Receive Buffer 1 Extended Identifier Low Register. RxB1Eid8 Receive Buffer 1 Extended Identifier High Register. RxB1Sidh Receive Buffer 1 Standard Identifier High Register. RxB1Sidl Receive Buffer 1 Standard Identifier Low Register. RxF0Eid0 Filter 0 Extended Identifier Low Register. RxF0Eid8 Filter 0 Extended Identifier High Register. RxF0Sidh Filter 0 Standard Identifier High Register. RxF0Sidl Filter 0 Standard Identifier Low Register. RxF1Eid0 Filter 1 Extended Identifier Low Register. RxF1Eid8 Filter 1 Extended Identifier High Register. RxF1Sidh Filter 1 Standard Identifier High Register. RxF1Sidl Filter 1 Standard Identifier Low Register. RxF2Eid0 Filter 2 Extended Identifier Low Register. RxF2Eid8 Filter 2 Extended Identifier High Register. RxF2Sidh Filter 2 Standard Identifier High Register. RxF2Sidl Filter 2 Standard Identifier Low Register. RxF3Eid0 Filter 3 Extended Identifier Low Register. RxF3Eid8 Filter 3 Extended Identifier High Register. RxF3Sidh Filter 3 Standard Identifier High Register. RxF3Sidl Filter 3 Standard Identifier Low Register. RxF4Eid0 Filter 4 Extended Identifier Low Register. RxF4Eid8 Filter 4 Extended Identifier High Register. RxF4Sidh Filter 4 Standard Identifier High Register. RxF4Sidl Filter 4 Standard Identifier Low Register. RxF5Eid0 Filter 5 Extended Identifier Low Register. RxF5Eid8 Filter 5 Extended Identifier High Register. RxF5Sidh Filter 5 Standard Identifier High Register. RxF5Sidl Filter 5 Standard Identifier Low Register. RxM0Eid0 Mask 0 Extended Identifier Low Register. RxM0Eid8 Mask 0 Extended Identifier High Register. RxM0Sidh Mask 0 Standard Identifier High Register. RxM0Sidl Mask 0 Standard Identifier Low Register. RxM1Eid0 Mask 1 Extended Identifier Low Register. RxM1Eid8 Mask 1 Extended Identifier High Register. RxM1Sidh Mask 1 Standard Identifier High Register. RxM1Sidl Mask 1 Standard Identifier Low Register. Tec Transmit Error Counter Register. TxB0Ctrl Transmit Buffer 0 Control Register. TxB0D0 Transmit Buffer 0 Data Byte 0 Register. TxB0D1 Transmit Buffer 0 Data Byte 1 Register. TxB0D2 Transmit Buffer 0 Data Byte 2 Register. TxB0D3 Transmit Buffer 0 Data Byte 3 Register. TxB0D4 Transmit Buffer 0 Data Byte 4 Register. TxB0D5 Transmit Buffer 0 Data Byte 5 Register. TxB0D6 Transmit Buffer 0 Data Byte 6 Register. TxB0D7 Transmit Buffer 0 Data Byte 7 Register. TxB0Dlc Transmit Buffer 0 Data Length Code Register. TxB0Eid0 Transmit Buffer 0 Extended Identifier Low Register. TxB0Eid8 Transmit Buffer 0 Extended Identifier High Register. TxB0Sidh Transmit Buffer 0 Standard Identifier High Register. TxB0Sidl Transmit Buffer 0 Standard Identifier Low Register. TxB1Ctrl Transmit Buffer 1 Control Register. TxB1D0 Transmit Buffer 1 Data Byte 0 Register. TxB1D1 Transmit Buffer 1 Data Byte 1 Register. TxB1D2 Transmit Buffer 1 Data Byte 2 Register. TxB1D3 Transmit Buffer 1 Data Byte 3 Register. TxB1D4 Transmit Buffer 1 Data Byte 4 Register. TxB1D5 Transmit Buffer 1 Data Byte 5 Register. TxB1D6 Transmit Buffer 1 Data Byte 6 Register. TxB1D7 Transmit Buffer 1 Data Byte 7 Register. TxB1Dlc Transmit Buffer 1 Data Length Code Register. TxB1Eid0 Transmit Buffer 1 Extended Identifier Low Register. TxB1Eid8 Transmit Buffer 1 Extended Identifier High Register. TxB1Sidh Transmit Buffer 1 Standard Identifier High Register. TxB1Sidl Transmit Buffer 1 Standard Identifier Low Register. TxB2Ctrl Transmit Buffer 2 Control Register. TxB2D0 Transmit Buffer 2 Data Byte 0 Register. TxB2D1 Transmit Buffer 2 Data Byte 1 Register. TxB2D2 Transmit Buffer 2 Data Byte 2 Register. TxB2D3 Transmit Buffer 2 Data Byte 3 Register. TxB2D4 Transmit Buffer 2 Data Byte 4 Register. TxB2D5 Transmit Buffer 2 Data Byte 5 Register. TxB2D6 Transmit Buffer 2 Data Byte 6 Register. TxB2D7 Transmit Buffer 2 Data Byte 7 Register. TxB2Dlc Transmit Buffer 2 Data Length Code Register. TxB2Eid0 Transmit Buffer 2 Extended Identifier Low Register. TxB2Eid8 Transmit Buffer 2 Extended Identifier High Register. TxB2Sidh Transmit Buffer 2 Standard Identifier High Register. TxB2Sidl Transmit Buffer 2 Standard Identifier Low Register. TxRtsCtrl TxnRTS Pin Control and Status Register."
  },
  "devices/Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.html",
    "title": "Class Cnf1 | nanoFramework Documentation",
    "keywords": "Class Cnf1 Configuration 1 Register. Inheritance Object Cnf1 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.BitTimeConfiguration Assembly : Iot.Device.Mcp25xxx.dll Syntax public class Cnf1 : IRegister Constructors | Improve this Doc View Source Cnf1(Byte) Initializes a new instance of the Cnf1 class. Declaration public Cnf1(byte value) Parameters Type Name Description Byte value The value that represents the register contents. | Improve this Doc View Source Cnf1(Byte, Cnf1.JumpWidthLength) Initializes a new instance of the Cnf1 class. Declaration public Cnf1(byte baudRatePrescaler, Cnf1.JumpWidthLength synchronizationJumpWidthLength) Parameters Type Name Description Byte baudRatePrescaler BRP[5:0]: Baud Rate Prescaler bits. TQ = 2 x (BRP[5:0] + 1)/FOSC. Cnf1.JumpWidthLength synchronizationJumpWidthLength SJW[1:0]: Synchronization Jump Width Length bits. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source BaudRatePrescaler BRP[5:0]: Baud Rate Prescaler bits. TQ = 2 x (BRP[5:0] + 1)/FOSC. Declaration public byte BaudRatePrescaler { get; } Property Value Type Description Byte | Improve this Doc View Source SynchronizationJumpWidthLength SJW[1:0]: Synchronization Jump Width Length bits. Declaration public Cnf1.JumpWidthLength SynchronizationJumpWidthLength { get; } Property Value Type Description Cnf1.JumpWidthLength Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.JumpWidthLength.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.JumpWidthLength.html",
    "title": "Enum Cnf1.JumpWidthLength | nanoFramework Documentation",
    "keywords": "Enum Cnf1.JumpWidthLength Synchronization Jump Width Length. Namespace : Iot.Device.Mcp25xxx.Register.BitTimeConfiguration Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum JumpWidthLength Fields Name Description Tqx1 Length = 1 x TQ. Tqx2 Length = 2 x TQ. Tqx3 Length = 3 x TQ. Tqx4 Length = 4 x TQ."
  },
  "devices/Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2.html",
    "title": "Class Cnf2 | nanoFramework Documentation",
    "keywords": "Class Cnf2 Configuration 2 Register. Inheritance Object Cnf2 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.BitTimeConfiguration Assembly : Iot.Device.Mcp25xxx.dll Syntax public class Cnf2 : IRegister Constructors | Improve this Doc View Source Cnf2(Byte) Initializes a new instance of the Cnf2 class. Declaration public Cnf2(byte value) Parameters Type Name Description Byte value The value that represents the register contents. | Improve this Doc View Source Cnf2(Byte, Byte, Boolean, Boolean) Initializes a new instance of the Cnf2 class. Declaration public Cnf2(byte propagationSegmentLength, byte ps1Length, bool samplePointConfiguration, bool ps2BitTimeLength) Parameters Type Name Description Byte propagationSegmentLength PRSEG[2:0]: Propagation Segment Length bits. Byte ps1Length PHSEG1[2:0]: PS1 Length bits. Boolean samplePointConfiguration SAM: Sample Point Configuration bit. True = Bus line is sampled three times at the sample point. False = Bus line is sampled once at the sample point. Boolean ps2BitTimeLength BTLMODE: PS2 Bit Time Length bit. True = Length of PS2 is determined by the PHSEG2[2:0] bits of CNF3. False = Length of PS2 is the greater of PS1 and IPT(2 TQ). Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source PropagationSegmentLength PRSEG[2:0]: Propagation Segment Length bits. Declaration public byte PropagationSegmentLength { get; } Property Value Type Description Byte | Improve this Doc View Source Ps1Length PHSEG1[2:0]: PS1 Length bits. Declaration public byte Ps1Length { get; } Property Value Type Description Byte | Improve this Doc View Source Ps2BitTimeLength BTLMODE: PS2 Bit Time Length bit. True = Length of PS2 is determined by the PHSEG2[2:0] bits of CNF3. False = Length of PS2 is the greater of PS1 and IPT(2 TQ). Declaration public bool Ps2BitTimeLength { get; } Property Value Type Description Boolean | Improve this Doc View Source SamplePointConfiguration SAM: Sample Point Configuration bit. True = Bus line is sampled three times at the sample point. False = Bus line is sampled once at the sample point. Declaration public bool SamplePointConfiguration { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf3.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf3.html",
    "title": "Class Cnf3 | nanoFramework Documentation",
    "keywords": "Class Cnf3 Configuration 3 Register. Inheritance Object Cnf3 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.BitTimeConfiguration Assembly : Iot.Device.Mcp25xxx.dll Syntax public class Cnf3 : IRegister Constructors | Improve this Doc View Source Cnf3(Byte) Initializes a new instance of the Cnf3 class. Declaration public Cnf3(byte value) Parameters Type Name Description Byte value The value that represents the register contents. | Improve this Doc View Source Cnf3(Byte, Boolean, Boolean) Initializes a new instance of the Cnf3 class. Declaration public Cnf3(byte ps2Length, bool wakeUpFilter, bool startOfFrameSignal) Parameters Type Name Description Byte ps2Length PHSEG2[2:0]: PS2 Length bits. (PHSEG2[2:0] + 1) x TQ. Minimum valid setting for PS2 is 2 TQ. Boolean wakeUpFilter WAKFIL: Wake-up Filter bit. True = Wake-up filter is enabled. False = Wake-up filter is disabled. Boolean startOfFrameSignal SOF: Start-of-Frame Signal bit. If CLKEN(CANCTRL[2]) = 1: True = CLKOUT pin is enabled for SOF signal. False = CLKOUT pin is enabled for clock out function; If CLKEN(CANCTRL[2]) = 0: Bit is don’t care. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source Ps2Length PHSEG2[2:0]: PS2 Length bits. (PHSEG2[2:0] + 1) x TQ. Minimum valid setting for PS2 is 2 TQ. Declaration public byte Ps2Length { get; } Property Value Type Description Byte | Improve this Doc View Source StartOfFrameSignal SOF: Start-of-Frame Signal bit. If CLKEN(CANCTRL[2]) = 1: True = CLKOUT pin is enabled for SOF signal. False = CLKOUT pin is enabled for clock out function; If CLKEN(CANCTRL[2]) = 0: Bit is don’t care. Declaration public bool StartOfFrameSignal { get; } Property Value Type Description Boolean | Improve this Doc View Source WakeUpFilter WAKFIL: Wake-up Filter bit. True = Wake-up filter is enabled. False = Wake-up filter is disabled. Declaration public bool WakeUpFilter { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.html",
    "title": "Namespace Iot.Device.Mcp25xxx.Register.BitTimeConfiguration | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp25xxx.Register.BitTimeConfiguration Classes Cnf1 Configuration 1 Register. Cnf2 Configuration 2 Register. Cnf3 Configuration 3 Register. Enums Cnf1.JumpWidthLength Synchronization Jump Width Length."
  },
  "devices/Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.html",
    "title": "Class CanCtrl | nanoFramework Documentation",
    "keywords": "Class CanCtrl CAN Control Register. Inheritance Object CanCtrl Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.CanControl Assembly : Iot.Device.Mcp25xxx.dll Syntax public class CanCtrl : IRegister Constructors | Improve this Doc View Source CanCtrl(CanCtrl.PinPrescaler, Boolean, Boolean, Boolean, OperationMode) Initializes a new instance of the CanCtrl class. Declaration public CanCtrl(CanCtrl.PinPrescaler clkOutPinPrescaler, bool clkOutPinEnable, bool oneShotMode, bool abortAllPendingTransmissions, OperationMode requestOperationMode) Parameters Type Name Description CanCtrl.PinPrescaler clkOutPinPrescaler CLKPRE[1:0]: CLKOUT Pin Prescaler bits. Boolean clkOutPinEnable CLKEN: CLKOUT Pin Enable bit. True = CLKOUT pin is enabled. False = CLKOUT pin is disabled(pin is in a high-impedance state). Boolean oneShotMode OSM: One-Shot Mode bit. True = Enabled: Message will only attempt to transmit one time. False = Disabled: Messages will reattempt transmission if required. Boolean abortAllPendingTransmissions ABAT: Abort All Pending Transmissions bit. True = Requests abort of all pending transmit buffers. False = Terminates request to abort all transmissions. OperationMode requestOperationMode REQOP[2:0]: Request Operation mode bits. | Improve this Doc View Source CanCtrl(Byte) Initializes a new instance of the CanCtrl class. Declaration public CanCtrl(byte value) Parameters Type Name Description Byte value The value that represents the register contents. Properties | Improve this Doc View Source AbortAllPendingTransmissions ABAT: Abort All Pending Transmissions bit. True = Requests abort of all pending transmit buffers. False = Terminates request to abort all transmissions. Declaration public bool AbortAllPendingTransmissions { get; } Property Value Type Description Boolean | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ClkOutPinEnable CLKEN: CLKOUT Pin Enable bit. True = CLKOUT pin is enabled. False = CLKOUT pin is disabled (pin is in a high-impedance state). Declaration public bool ClkOutPinEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source ClkOutPinPrescaler CLKPRE[1:0]: CLKOUT Pin Prescaler bits. Declaration public CanCtrl.PinPrescaler ClkOutPinPrescaler { get; } Property Value Type Description CanCtrl.PinPrescaler | Improve this Doc View Source OneShotMode OSM: One-Shot Mode bit. True = Enabled: Message will only attempt to transmit one time. False = Disabled: Messages will reattempt transmission if required. Declaration public bool OneShotMode { get; } Property Value Type Description Boolean | Improve this Doc View Source RequestOperationMode REQOP[2:0]: Request Operation mode bits. Declaration public OperationMode RequestOperationMode { get; } Property Value Type Description OperationMode Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.PinPrescaler.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.PinPrescaler.html",
    "title": "Enum CanCtrl.PinPrescaler | nanoFramework Documentation",
    "keywords": "Enum CanCtrl.PinPrescaler CLKOUT Pin Prescaler. Namespace : Iot.Device.Mcp25xxx.Register.CanControl Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum PinPrescaler Fields Name Description ClockDivideBy1 FCLKOUT = System Clock/1. ClockDivideBy2 FCLKOUT = System Clock/2. ClockDivideBy4 FCLKOUT = System Clock/4. ClockDivideBy8 FCLKOUT = System Clock/8."
  },
  "devices/Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode.html",
    "title": "Enum CanStat.FlagCode | nanoFramework Documentation",
    "keywords": "Enum CanStat.FlagCode Interrupt Flag Code. Namespace : Iot.Device.Mcp25xxx.Register.CanControl Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum FlagCode Fields Name Description Error Error interrupt. No No Interrupt. RxB0 RXB0 interrupt. RxB1 RXB1 interrupt. TxB0 TXB0 interrupt. TxB1 TXB1 interrupt. TxB2 TXB2 interrupt. WakeUp Wake-up interrupt."
  },
  "devices/Iot.Device.Mcp25xxx.Register.CanControl.CanStat.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.CanControl.CanStat.html",
    "title": "Class CanStat | nanoFramework Documentation",
    "keywords": "Class CanStat CAN Status Register. Inheritance Object CanStat Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.CanControl Assembly : Iot.Device.Mcp25xxx.dll Syntax public class CanStat : IRegister Constructors | Improve this Doc View Source CanStat(CanStat.FlagCode, OperationMode) Initializes a new instance of the CanStat class. Declaration public CanStat(CanStat.FlagCode interruptFlagCode, OperationMode operationMode) Parameters Type Name Description CanStat.FlagCode interruptFlagCode ICOD[2:0]: Interrupt Flag Code bits. OperationMode operationMode OPMOD[2:0]: Operation Mode bits. | Improve this Doc View Source CanStat(Byte) Initializes a new instance of the CanStat class. Declaration public CanStat(byte value) Parameters Type Name Description Byte value The value that represents the register contents. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source InterruptFlagCode ICOD[2:0]: Interrupt Flag Code bits. Declaration public CanStat.FlagCode InterruptFlagCode { get; } Property Value Type Description CanStat.FlagCode | Improve this Doc View Source OperationMode OPMOD[2:0]: Operation Mode bits. Declaration public OperationMode OperationMode { get; } Property Value Type Description OperationMode Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.CanControl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.CanControl.html",
    "title": "Namespace Iot.Device.Mcp25xxx.Register.CanControl | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp25xxx.Register.CanControl Classes CanCtrl CAN Control Register. CanStat CAN Status Register. Enums CanCtrl.PinPrescaler CLKOUT Pin Prescaler. CanStat.FlagCode Interrupt Flag Code."
  },
  "devices/Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.html",
    "title": "Class Eflg | nanoFramework Documentation",
    "keywords": "Class Eflg Error Flag Register. Inheritance Object Eflg Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.ErrorDetection Assembly : Iot.Device.Mcp25xxx.dll Syntax public class Eflg : IRegister Constructors | Improve this Doc View Source Eflg(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) Initializes a new instance of the Eflg class. Declaration public Eflg(bool errorWarningFlag, bool receiveErrorWarningFlag, bool transmitErrorWarningFlag, bool receiveErrorPassiveFlag, bool transmitErrorPassiveFlag, bool busOffErrorFlag, bool receiveBuffer0OverflowFlag, bool receiveBuffer1OverflowFlag) Parameters Type Name Description Boolean errorWarningFlag EWARN: Error Warning Flag bit. Sets when TEC or REC is equal to or greater than 96 (TXWAR or RXWAR = 1). Resets when both REC and TEC are less than 96. Boolean receiveErrorWarningFlag RXWAR: Receive Error Warning Flag bit. Sets when REC is equal to or greater than 96. Resets when REC is less than 96. Boolean transmitErrorWarningFlag TXWAR: Transmit Error Warning Flag bit. Sets when TEC is equal to or greater than 96. Resets when TEC is less than 96. Boolean receiveErrorPassiveFlag RXEP: Receive Error-Passive Flag bit. Sets when REC is equal to or greater than 128. Resets when REC is less than 128. Boolean transmitErrorPassiveFlag TXEP: Transmit Error-Passive Flag bit. Sets when TEC is equal to or greater than 128. Resets when TEC is less than 128. Boolean busOffErrorFlag TXBO: Bus-Off Error Flag bit. Bit sets when TEC reaches 255. Resets after a successful bus recovery sequence. Boolean receiveBuffer0OverflowFlag RX0OVR: Receive Buffer 0 Overflow Flag bit. Sets when a valid message is received for RXB0 and the RX0IF bit in the CANINTF register is ‘1’. Must be reset by MCU. Boolean receiveBuffer1OverflowFlag RX1OVR: Receive Buffer 1 Overflow Flag bit. Sets when a valid message is received for RXB1 and the RX1IF bit in the CANINTF register is ‘1’. Must be reset by MCU. | Improve this Doc View Source Eflg(Byte) Initializes a new instance of the Eflg class. Declaration public Eflg(byte value) Parameters Type Name Description Byte value The value that represents the register contents. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source BusOffErrorFlag TXBO: Bus-Off Error Flag bit. Bit sets when TEC reaches 255. Resets after a successful bus recovery sequence. Declaration public bool BusOffErrorFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source ErrorWarningFlag EWARN: Error Warning Flag bit. Sets when TEC or REC is equal to or greater than 96 (TXWAR or RXWAR = 1). Resets when both REC and TEC are less than 96. Declaration public bool ErrorWarningFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source ReceiveBuffer0OverflowFlag RX0OVR: Receive Buffer 0 Overflow Flag bit. Sets when a valid message is received for RXB0 and the RX0IF bit in the CANINTF register is ‘1’. Must be reset by MCU. Declaration public bool ReceiveBuffer0OverflowFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source ReceiveBuffer1OverflowFlag RX1OVR: Receive Buffer 1 Overflow Flag bit. Sets when a valid message is received for RXB1 and the RX1IF bit in the CANINTF register is ‘1’. Must be reset by MCU. Declaration public bool ReceiveBuffer1OverflowFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source ReceiveErrorPassiveFlag RXEP: Receive Error-Passive Flag bit. Sets when REC is equal to or greater than 128. Resets when REC is less than 128. Declaration public bool ReceiveErrorPassiveFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source ReceiveErrorWarningFlag RXWAR: Receive Error Warning Flag bit. Sets when REC is equal to or greater than 96. Resets when REC is less than 96. Declaration public bool ReceiveErrorWarningFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source TransmitErrorPassiveFlag TXEP: Transmit Error-Passive Flag bit. Sets when TEC is equal to or greater than 128. Resets when TEC is less than 128. Declaration public bool TransmitErrorPassiveFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source TransmitErrorWarningFlag TXWAR: Transmit Error Warning Flag bit. Sets when TEC is equal to or greater than 96. Resets when TEC is less than 96. Declaration public bool TransmitErrorWarningFlag { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.ErrorDetection.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.ErrorDetection.html",
    "title": "Namespace Iot.Device.Mcp25xxx.Register.ErrorDetection | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp25xxx.Register.ErrorDetection Classes Eflg Error Flag Register. Rec Receiver Error Counter Register. Tec Transmit Error Counter Register."
  },
  "devices/Iot.Device.Mcp25xxx.Register.ErrorDetection.Rec.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.ErrorDetection.Rec.html",
    "title": "Class Rec | nanoFramework Documentation",
    "keywords": "Class Rec Receiver Error Counter Register. Inheritance Object Rec Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.ErrorDetection Assembly : Iot.Device.Mcp25xxx.dll Syntax public class Rec : IRegister Constructors | Improve this Doc View Source Rec(Byte) Initializes a new instance of the Rec class. Declaration public Rec(byte receiveErrorCount) Parameters Type Name Description Byte receiveErrorCount REC[7:0]: Receive Error Count bits. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ReceiveErrorCount REC[7:0]: Receive Error Count bits. Declaration public byte ReceiveErrorCount { get; } Property Value Type Description Byte Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.ErrorDetection.Tec.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.ErrorDetection.Tec.html",
    "title": "Class Tec | nanoFramework Documentation",
    "keywords": "Class Tec Transmit Error Counter Register. Inheritance Object Tec Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.ErrorDetection Assembly : Iot.Device.Mcp25xxx.dll Syntax public class Tec : IRegister Constructors | Improve this Doc View Source Tec(Byte) Initializes a new instance of the Tec class. Declaration public Tec(byte transmitErrorCount) Parameters Type Name Description Byte transmitErrorCount TEC[7:0]: Transmit Error Count bits. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source TransmitErrorCount TEC[7:0]: Transmit Error Count bits. Declaration public byte TransmitErrorCount { get; } Property Value Type Description Byte Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.html",
    "title": "Namespace Iot.Device.Mcp25xxx.Register | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp25xxx.Register Interfaces IRegister Mcp25xxx register interface Enums Address Control Register Summary."
  },
  "devices/Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.html",
    "title": "Class CanIntE | nanoFramework Documentation",
    "keywords": "Class CanIntE CAN Interrupt Enable Register. Inheritance Object CanIntE Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.Interrupt Assembly : Iot.Device.Mcp25xxx.dll Syntax public class CanIntE : IRegister Constructors | Improve this Doc View Source CanIntE(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) Initializes a new instance of the CanIntE class. Declaration public CanIntE(bool receiveBuffer0FullInterruptEnable, bool receiveBuffer1FullInterruptEnable, bool transmitBuffer0EmptyInterruptEnable, bool transmitBuffer1EmptyInterruptEnable, bool transmitBuffer2EmptyInterruptEnable, bool errorInterruptEnable, bool wakeUpInterruptEnable, bool messageErrorInterruptEnable) Parameters Type Name Description Boolean receiveBuffer0FullInterruptEnable RX0IE: Receive Buffer 0 Full Interrupt Enable bit. True = Interrupt when message is received in RXB0. False = Disabled. Boolean receiveBuffer1FullInterruptEnable RX1IE: Receive Buffer 1 Full Interrupt Enable bit. True = Interrupt when message is received in RXB1. False = Disabled. Boolean transmitBuffer0EmptyInterruptEnable TX0IE: Transmit Buffer 0 Empty Interrupt Enable bit. True = Interrupt on TXB0 becoming empty. False = Disabled. Boolean transmitBuffer1EmptyInterruptEnable TX1IE: Transmit Buffer 1 Empty Interrupt Enable bit. True = Interrupt on TXB1 becoming empty. False = Disabled. Boolean transmitBuffer2EmptyInterruptEnable TX2IE: Transmit Buffer 2 Empty Interrupt Enable bit. True = Interrupt on TXB2 becoming empty. False = Disabled. Boolean errorInterruptEnable ERRIE: Error Interrupt Enable bit (multiple sources in the EFLG register). True = Interrupt on EFLG error condition change. False = Disabled. Boolean wakeUpInterruptEnable WAKIE: Wake-up Interrupt Enable bit. True = Interrupt on CAN bus activity. False = Disabled. Boolean messageErrorInterruptEnable MERRE: Message Error Interrupt Enable bit. True = Interrupt on error during message reception or transmission. False = Disabled. | Improve this Doc View Source CanIntE(Byte) Initializes a new instance of the CanIntE class. Declaration public CanIntE(byte value) Parameters Type Name Description Byte value The value that represents the register contents. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ErrorInterruptEnable ERRIE: Error Interrupt Enable bit (multiple sources in the EFLG register). True = Interrupt on EFLG error condition change. False = Disabled. Declaration public bool ErrorInterruptEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source MessageErrorInterruptEnable MERRE: Message Error Interrupt Enable bit. True = Interrupt on error during message reception or transmission. False = Disabled. Declaration public bool MessageErrorInterruptEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source ReceiveBuffer0FullInterruptEnable RX0IE: Receive Buffer 0 Full Interrupt Enable bit. True = Interrupt when message is received in RXB0. False = Disabled. Declaration public bool ReceiveBuffer0FullInterruptEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source ReceiveBuffer1FullInterruptEnable RX1IE: Receive Buffer 1 Full Interrupt Enable bit. True = Interrupt when message is received in RXB1. False = Disabled. Declaration public bool ReceiveBuffer1FullInterruptEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source TransmitBuffer0EmptyInterruptEnable TX0IE: Transmit Buffer 0 Empty Interrupt Enable bit. True = Interrupt on TXB0 becoming empty. False = Disabled. Declaration public bool TransmitBuffer0EmptyInterruptEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source TransmitBuffer1EmptyInterruptEnable TX1IE: Transmit Buffer 1 Empty Interrupt Enable bit. True = Interrupt on TXB1 becoming empty. False = Disabled. Declaration public bool TransmitBuffer1EmptyInterruptEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source TransmitBuffer2EmptyInterruptEnable TX2IE: Transmit Buffer 2 Empty Interrupt Enable bit. True = Interrupt on TXB2 becoming empty. False = Disabled. Declaration public bool TransmitBuffer2EmptyInterruptEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source WakeUpInterruptEnable WAKIE: Wake-up Interrupt Enable bit. True = Interrupt on CAN bus activity. False = Disabled. Declaration public bool WakeUpInterruptEnable { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.html",
    "title": "Class CanIntF | nanoFramework Documentation",
    "keywords": "Class CanIntF CAN Interrupt Flag Register. Inheritance Object CanIntF Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.Interrupt Assembly : Iot.Device.Mcp25xxx.dll Syntax public class CanIntF : IRegister Constructors | Improve this Doc View Source CanIntF(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) Initializes a new instance of the CanIntF class. Declaration public CanIntF(bool receiveBuffer0FullInterruptFlag, bool receiveBuffer1FullInterruptFlag, bool transmitBuffer0EmptyInterruptFlag, bool transmitBuffer1EmptyInterruptFlag, bool transmitBuffer2EmptyInterruptFlag, bool errorInterruptFlag, bool wakeUpInterruptFlag, bool messageErrorInterruptFlag) Parameters Type Name Description Boolean receiveBuffer0FullInterruptFlag RX0IF: Receive Buffer 0 Full Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Boolean receiveBuffer1FullInterruptFlag RX1IF: Receive Buffer 1 Full Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Boolean transmitBuffer0EmptyInterruptFlag TX0IF: Transmit Buffer 0 Empty Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Boolean transmitBuffer1EmptyInterruptFlag TX1IF: Transmit Buffer 1 Empty Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Boolean transmitBuffer2EmptyInterruptFlag TX2IF: Transmit Buffer 2 Empty Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Boolean errorInterruptFlag ERRIF: Error Interrupt Flag bit (multiple sources in the EFLG register). True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Boolean wakeUpInterruptFlag WAKIF: Wake-up Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Boolean messageErrorInterruptFlag MERRF: Message Error Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. | Improve this Doc View Source CanIntF(Byte) Initializes a new instance of the CanIntF class. Declaration public CanIntF(byte value) Parameters Type Name Description Byte value The value that represents the register contents. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ErrorInterruptFlag ERRIF: Error Interrupt Flag bit (multiple sources in the EFLG register). True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Declaration public bool ErrorInterruptFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source MessageErrorInterruptFlag MERRF: Message Error Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Declaration public bool MessageErrorInterruptFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source ReceiveBuffer0FullInterruptFlag RX0IF: Receive Buffer 0 Full Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Declaration public bool ReceiveBuffer0FullInterruptFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source ReceiveBuffer1FullInterruptFlag RX1IF: Receive Buffer 1 Full Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Declaration public bool ReceiveBuffer1FullInterruptFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source TransmitBuffer0EmptyInterruptFlag TX0IF: Transmit Buffer 0 Empty Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Declaration public bool TransmitBuffer0EmptyInterruptFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source TransmitBuffer1EmptyInterruptFlag TX1IF: Transmit Buffer 1 Empty Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Declaration public bool TransmitBuffer1EmptyInterruptFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source TransmitBuffer2EmptyInterruptFlag TX2IF: Transmit Buffer 2 Empty Interrupt Flag bit. True = Interrupt pending (must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Declaration public bool TransmitBuffer2EmptyInterruptFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source WakeUpInterruptFlag WAKIF: Wake-up Interrupt Flag bit. True = Interrupt pending(must be cleared by MCU to reset interrupt condition). False = No interrupt pending. Declaration public bool WakeUpInterruptFlag { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.Interrupt.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.Interrupt.html",
    "title": "Namespace Iot.Device.Mcp25xxx.Register.Interrupt | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp25xxx.Register.Interrupt Classes CanIntE CAN Interrupt Enable Register. CanIntF CAN Interrupt Flag Register."
  },
  "devices/Iot.Device.Mcp25xxx.Register.IRegister.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.IRegister.html",
    "title": "Interface IRegister | nanoFramework Documentation",
    "keywords": "Interface IRegister Mcp25xxx register interface Namespace : Iot.Device.Mcp25xxx.Register Assembly : Iot.Device.Mcp25xxx.dll Syntax public interface IRegister Properties | Improve this Doc View Source Address Gets the address of the register. Declaration Address Address { get; } Property Value Type Description Address The address of the register. Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration byte ToByte() Returns Type Description Byte The byte that represent the register contents."
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.html",
    "title": "Class BfpCtrl | nanoFramework Documentation",
    "keywords": "Class BfpCtrl RxnBF Pin Control and Status Register. Inheritance Object BfpCtrl Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public class BfpCtrl : IRegister Constructors | Improve this Doc View Source BfpCtrl(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) Initializes a new instance of the BfpCtrl class. Declaration public BfpCtrl(bool rx0bfPinOperationMode, bool rx1bfPinOperationMode, bool rx0bfPinFunctionEnable, bool rx1bfPinFunctionEnable, bool rx0bfPinState, bool rx1bfPinState) Parameters Type Name Description Boolean rx0bfPinOperationMode B0BFM: Rx0BF Pin Operation mode bit. True = Pin is used as an interrupt when a valid message is loaded into RXB0. False = Digital Output mode. Boolean rx1bfPinOperationMode B1BFM: Rx1BF Pin Operation mode bit. True = Pin is used as an interrupt when a valid message is loaded into RXB1. False = Digital Output mode. Boolean rx0bfPinFunctionEnable B0BFE: Rx0BF Pin Function Enable bit. True = Pin function is enabled, operation mode is determined by the B0BFM bit. False = Pin function is disabled, pin goes to the high-impedance state. Boolean rx1bfPinFunctionEnable B1BFE: Rx1BF Pin Function Enable bit. True = Pin function is enabled, operation mode is determined by the B1BFM bit. False = Pin function is disabled, pin goes to the high-impedance state. Boolean rx0bfPinState B0BFS: Rx0BF Pin State bit (Digital Output mode only). Reads as '0' when Rx0BF is configured as an interrupt pin. Boolean rx1bfPinState B1BFS: Rx1BF Pin State bit (Digital Output mode only). Reads as '0' when Rx1BF is configured as an interrupt pin. | Improve this Doc View Source BfpCtrl(Byte) Initializes a new instance of the BfpCtrl class. Declaration public BfpCtrl(byte value) Parameters Type Name Description Byte value The value that represents the register contents. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source Rx0bfPinFunctionEnable B0BFE: Rx0BF Pin Function Enable bit. True = Pin function is enabled, operation mode is determined by the B0BFM bit. False = Pin function is disabled, pin goes to the high-impedance state. Declaration public bool Rx0bfPinFunctionEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source Rx0bfPinOperationMode B0BFM: Rx0BF Pin Operation mode bit. True = Pin is used as an interrupt when a valid message is loaded into RXB0. False = Digital Output mode. Declaration public bool Rx0bfPinOperationMode { get; } Property Value Type Description Boolean | Improve this Doc View Source Rx0bfPinState B0BFS: Rx0BF Pin State bit (Digital Output mode only). Reads as '0' when Rx0BF is configured as an interrupt pin. Declaration public bool Rx0bfPinState { get; } Property Value Type Description Boolean | Improve this Doc View Source Rx1bfPinFunctionEnable B1BFE: Rx1BF Pin Function Enable bit. True = Pin function is enabled, operation mode is determined by the B1BFM bit. False = Pin function is disabled, pin goes to the high-impedance state. Declaration public bool Rx1bfPinFunctionEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source Rx1bfPinOperationMode B1BFM: Rx1BF Pin Operation mode bit. True = Pin is used as an interrupt when a valid message is loaded into RXB1. False = Digital Output mode. Declaration public bool Rx1bfPinOperationMode { get; } Property Value Type Description Boolean | Improve this Doc View Source Rx1bfPinState B1BFS: Rx1BF Pin State bit (Digital Output mode only). Reads as '0' when Rx1BF is configured as an interrupt pin. Declaration public bool Rx1bfPinState { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.html",
    "title": "Namespace Iot.Device.Mcp25xxx.Register.MessageReceive | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp25xxx.Register.MessageReceive Classes BfpCtrl RxnBF Pin Control and Status Register. RxB0Ctrl Receive Buffer 0 Control Register. RxB1Ctrl Receive Buffer 1 Control Register. RxBxDlc Receive Buffer Data Length Code Register. RxBxDn Receive Buffer Data Byte Register. RxBxEid0 Receive Buffer Extended Identifier Low Register. RxBxEid8 Receive Buffer Extended Identifier High Register. RxBxSidh Receive Buffer Standard Identifier High Register. RxBxSidl Receive Buffer Standard Identifier Low Register. Enums OperatingMode Receive Buffer Operating mode bits. RxB1Ctrl.Filter Filter Hit bits."
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.OperatingMode.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.OperatingMode.html",
    "title": "Enum OperatingMode | nanoFramework Documentation",
    "keywords": "Enum OperatingMode Receive Buffer Operating mode bits. Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum OperatingMode Fields Name Description ReceiveAllValidMessages Receives all valid messages using either Standard or Extended Identifiers that meet filter criteria. Reserved1 Reserved. Reserved2 Reserved. TurnsMaskFiltersOff Turns mask/filters off; receives any message."
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.html",
    "title": "Class RxB0Ctrl | nanoFramework Documentation",
    "keywords": "Class RxB0Ctrl Receive Buffer 0 Control Register. Inheritance Object RxB0Ctrl Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxB0Ctrl : IRegister Constructors | Improve this Doc View Source RxB0Ctrl(Boolean, Boolean, Boolean, OperatingMode) Initializes a new instance of the RxB0Ctrl class. Declaration public RxB0Ctrl(bool filterHit, bool rolloverEnable, bool receivedRemoteTransferRequest, OperatingMode receiveBufferOperatingMode) Parameters Type Name Description Boolean filterHit FILHIT0: Indicates which acceptance filter enabled the reception of a message. True = Acceptance Filter 1 (RXF1). False = Acceptance Filter 0 (RXF0). Boolean rolloverEnable BUKT: Rollover Enable bit. True = RXB0 message will roll over and be written to RXB1 if RXB0 is full. False = Rollover is disabled. Boolean receivedRemoteTransferRequest RXRTR: Received Remote Transfer Request bit. True = Remote Transfer Request received. False = No Remote Transfer Request received. OperatingMode receiveBufferOperatingMode RXM[1:0]: Receive Buffer Operating mode bits. | Improve this Doc View Source RxB0Ctrl(Byte) Initializes a new instance of the RxB0Ctrl class. Declaration public RxB0Ctrl(byte value) Parameters Type Name Description Byte value The value that represents the register contents. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source Bukt1 BUKT: Read-Only copy of BUKT bit (used internally by the MCP25625). Declaration public bool Bukt1 { get; } Property Value Type Description Boolean | Improve this Doc View Source FilterHit FILHIT0: Indicates which acceptance filter enabled the reception of a message. True = Acceptance Filter 1 (RXF1). False = Acceptance Filter 0 (RXF0). Declaration public bool FilterHit { get; } Property Value Type Description Boolean | Improve this Doc View Source ReceiveBufferOperatingMode RXM[1:0]: Receive Buffer Operating mode bits. Declaration public OperatingMode ReceiveBufferOperatingMode { get; } Property Value Type Description OperatingMode | Improve this Doc View Source ReceivedRemoteTransferRequest RXRTR: Received Remote Transfer Request bit. True = Remote Transfer Request received. False = No Remote Transfer Request received. Declaration public bool ReceivedRemoteTransferRequest { get; } Property Value Type Description Boolean | Improve this Doc View Source RolloverEnable Rollover Enable bit. True = RXB0 message will roll over and be written to RXB1 if RXB0 is full. False = Rollover is disabled. Declaration public bool RolloverEnable { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Filter.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Filter.html",
    "title": "Enum RxB1Ctrl.Filter | nanoFramework Documentation",
    "keywords": "Enum RxB1Ctrl.Filter Filter Hit bits. Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum Filter Fields Name Description Filter0 Acceptance Filter 0 (RXF0) (only if the BUKT bit is set in RXB0CTRL). Filter1 Acceptance Filter 1 (RXF1) (only if the BUKT bit is set in RXB0CTRL). Filter2 Acceptance Filter 2 (RXF2). Filter3 Acceptance Filter 3 (RXF3). Filter4 Acceptance Filter 4 (RXF4). Filter5 Acceptance Filter 5 (RXF5)."
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.html",
    "title": "Class RxB1Ctrl | nanoFramework Documentation",
    "keywords": "Class RxB1Ctrl Receive Buffer 1 Control Register. Inheritance Object RxB1Ctrl Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxB1Ctrl : IRegister Constructors | Improve this Doc View Source RxB1Ctrl(RxB1Ctrl.Filter, Boolean, OperatingMode) Initializes a new instance of the RxB1Ctrl class. Declaration public RxB1Ctrl(RxB1Ctrl.Filter filterHit, bool receivedRemoteTransferRequest, OperatingMode receiveBufferOperatingMode) Parameters Type Name Description RxB1Ctrl.Filter filterHit FILHIT[2:0]: Receive Buffer Operating mode bits Boolean receivedRemoteTransferRequest RXRTR: Received Remote Transfer Request bit. True = Remote Transfer Request received. False = No Remote Transfer Request received. OperatingMode receiveBufferOperatingMode RXM[1:0]: Receive Buffer Operating mode bits. | Improve this Doc View Source RxB1Ctrl(Byte) Initializes a new instance of the RxB1Ctrl class. Declaration public RxB1Ctrl(byte value) Parameters Type Name Description Byte value The value that represents the register contents. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source FilterHit FILHIT[2:0]: Filter Hit bits. Declaration public RxB1Ctrl.Filter FilterHit { get; } Property Value Type Description RxB1Ctrl.Filter | Improve this Doc View Source ReceiveBufferOperatingMode RXM[1:0]: Receive Buffer Operating mode bits. Declaration public OperatingMode ReceiveBufferOperatingMode { get; } Property Value Type Description OperatingMode | Improve this Doc View Source ReceivedRemoteTransferRequest RXRTR: Received Remote Transfer Request bit. True = Remote Transfer Request received. False = No Remote Transfer Request received. Declaration public bool ReceivedRemoteTransferRequest { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc.html",
    "title": "Class RxBxDlc | nanoFramework Documentation",
    "keywords": "Class RxBxDlc Receive Buffer Data Length Code Register. Inheritance Object RxBxDlc Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxBxDlc : IRegister Constructors | Improve this Doc View Source RxBxDlc(Byte, Byte) Initializes a new instance of the RxBxDlc class. Declaration public RxBxDlc(byte rxBufferNumber, byte value) Parameters Type Name Description Byte rxBufferNumber Rx buffer number Byte value The value that represents the register contents. | Improve this Doc View Source RxBxDlc(Byte, Byte, Boolean) Initializes a new instance of the RxBxDlc class. Declaration public RxBxDlc(byte rxBufferNumber, byte dataLengthCode, bool extendedFrameRemoteTransmissionRequest) Parameters Type Name Description Byte rxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Byte dataLengthCode DLC[3:0]: Data Length Code bits. Indicates the number of data bytes that were received. (0 to 8 bytes). Boolean extendedFrameRemoteTransmissionRequest RTR: Extended Frame Remote Transmission Request bit. (valid only when the IDE bit in the RXBxSIDL register is '1'). True = Extended frame Remote Transmit Request received. False = Extended data frame received. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source DataLengthCode DLC[3:0]: Data Length Code bits. Indicates the number of data bytes that were received. (0 to 8 bytes). Declaration public byte DataLengthCode { get; } Property Value Type Description Byte | Improve this Doc View Source ExtendedFrameRemoteTransmissionRequest RTR: Extended Frame Remote Transmission Request bit. (valid only when the IDE bit in the RXBxSIDL register is '1'). True = Extended frame Remote Transmit Request received. False = Extended data frame received. Declaration public bool ExtendedFrameRemoteTransmissionRequest { get; } Property Value Type Description Boolean | Improve this Doc View Source RxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Declaration public byte RxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxBufferNumber(Address) Gets the Rx Buffer Number based on the register address. Declaration public static byte GetRxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Buffer Number. Returns Type Description Byte The Rx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDn.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDn.html",
    "title": "Class RxBxDn | nanoFramework Documentation",
    "keywords": "Class RxBxDn Receive Buffer Data Byte Register. Inheritance Object RxBxDn Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxBxDn : IRegister Constructors | Improve this Doc View Source RxBxDn(Byte, Byte, Byte) Initializes a new instance of the RxBxDn class. Declaration public RxBxDn(byte rxBufferNumber, byte index, byte receiveBufferDataFieldBytes) Parameters Type Name Description Byte rxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Byte index Index of data. Must be a value of 0 - 7. Byte receiveBufferDataFieldBytes RBxD[7:0]: Receive Buffer Data Field Bytes. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source Index Index of data. Must be a value of 0 - 7. Declaration public byte Index { get; } Property Value Type Description Byte | Improve this Doc View Source ReceiveBufferDataFieldBytes RBxD[7:0]: Receive Buffer Data Field Bytes. Declaration public byte ReceiveBufferDataFieldBytes { get; } Property Value Type Description Byte | Improve this Doc View Source RxBufferNumber Receive Buffer Number. Declaration public byte RxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxBufferNumber(Address) Gets the Rx Buffer Number based on the register address. Declaration public static byte GetRxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Buffer Number. Returns Type Description Byte The Rx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid0.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid0.html",
    "title": "Class RxBxEid0 | nanoFramework Documentation",
    "keywords": "Class RxBxEid0 Receive Buffer Extended Identifier Low Register. Inheritance Object RxBxEid0 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxBxEid0 : IRegister Constructors | Improve this Doc View Source RxBxEid0(Byte, Byte) Initializes a new instance of the RxBxEid0 class. Declaration public RxBxEid0(byte rxBufferNumber, byte extendedIdentifier) Parameters Type Name Description Byte rxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Byte extendedIdentifier EID[7:0]: Extended Identifier bits. These bits hold the Least Significant eight bits of the Extended Identifier for the received message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifier EID[7:0]: Extended Identifier bits. These bits hold the Least Significant eight bits of the Extended Identifier for the received message. Declaration public byte ExtendedIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source RxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Declaration public byte RxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxBufferNumber(Address) Gets the Rx Buffer Number based on the register address. Declaration public static byte GetRxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Buffer Number. Returns Type Description Byte The Rx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid8.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid8.html",
    "title": "Class RxBxEid8 | nanoFramework Documentation",
    "keywords": "Class RxBxEid8 Receive Buffer Extended Identifier High Register. Inheritance Object RxBxEid8 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxBxEid8 : IRegister Constructors | Improve this Doc View Source RxBxEid8(Byte, Byte) Initializes a new instance of the RxBxEid8 class. Declaration public RxBxEid8(byte rxBufferNumber, byte extendedIdentifier) Parameters Type Name Description Byte rxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Byte extendedIdentifier EID[15:8]: Extended Identifier bits. These bits hold bits 15 through 8 of the Extended Identifier for the received message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifier EID[15:8]: Extended Identifier bits. These bits hold bits 15 through 8 of the Extended Identifier for the received message. Declaration public byte ExtendedIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source RxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Declaration public byte RxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxBufferNumber(Address) Gets the Rx Buffer Number based on the register address. Declaration public static byte GetRxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Buffer Number. Returns Type Description Byte The Rx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidh.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidh.html",
    "title": "Class RxBxSidh | nanoFramework Documentation",
    "keywords": "Class RxBxSidh Receive Buffer Standard Identifier High Register. Inheritance Object RxBxSidh Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxBxSidh : IRegister Constructors | Improve this Doc View Source RxBxSidh(Byte, Byte) Initializes a new instance of the RxBxSidh class. Declaration public RxBxSidh(byte rxBufferNumber, byte standardIdentifier) Parameters Type Name Description Byte rxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Byte standardIdentifier SID[10:3]: Standard Identifier bits. These bits contain the eight Most Significant bits of the Standard Identifier for the received message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source RxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Declaration public byte RxBufferNumber { get; } Property Value Type Description Byte | Improve this Doc View Source StandardIdentifier SID[10:3]: Standard Identifier bits. These bits contain the eight Most Significant bits of the Standard Identifier for the received message. Declaration public byte StandardIdentifier { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxBufferNumber(Address) Gets the Rx Buffer Number based on the register address. Declaration public static byte GetRxBufferNumber(Address address) Parameters Type Name Description Address address The address to up look Rx Buffer Number. Returns Type Description Byte The Rx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.html",
    "title": "Class RxBxSidl | nanoFramework Documentation",
    "keywords": "Class RxBxSidl Receive Buffer Standard Identifier Low Register. Inheritance Object RxBxSidl Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageReceive Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxBxSidl : IRegister Constructors | Improve this Doc View Source RxBxSidl(Byte, Byte) Initializes a new instance of the RxBxSidl class. Declaration public RxBxSidl(byte rxBufferNumber, byte value) Parameters Type Name Description Byte rxBufferNumber Rx buffer number Byte value The value that represents the register contents. | Improve this Doc View Source RxBxSidl(Byte, Byte, Boolean, Boolean, Byte) Initializes a new instance of the RxBxSidl class. Declaration public RxBxSidl(byte rxBufferNumber, byte extendedIdentifier, bool extendedIdentifierFlag, bool standardFrameRemoteTransmitRequest, byte standardIdentifier) Parameters Type Name Description Byte rxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Byte extendedIdentifier EID[17:16]: Extended Identifier bits. These bits contain the two Most Significant bits of the Extended Identifier for the received message. Boolean extendedIdentifierFlag IDE: Extended Identifier Flag bit. This is sometimes referred to as EFF. This bit indicates whether the received message was a standard or an extended frame. True = Received message was an extended frame. False = Received message was a standard frame. Boolean standardFrameRemoteTransmitRequest SRR: Standard Frame Remote Transmit Request bit (valid only if the IDE bit = 0). True = Standard frame Remote Transmit Request received. False = Standard data frame received. Byte standardIdentifier SID[2:0]: Standard Identifier bits. These bits contain the three Least Significant bits of the Standard Identifier for the received message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifier EID[17:16]: Extended Identifier bits. These bits contain the two Most Significant bits of the Extended Identifier for the received message. Declaration public byte ExtendedIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source ExtendedIdentifierFlag IDE: Extended Identifier Flag bit. This bit indicates whether the received message was a standard or an extended frame. True = Received message was an extended frame. False = Received message was a standard frame. Declaration public bool ExtendedIdentifierFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source RxBufferNumber Receive Buffer Number. Must be a value of 0 - 1. Declaration public byte RxBufferNumber { get; } Property Value Type Description Byte | Improve this Doc View Source StandardFrameRemoteTransmitRequest SRR: Standard Frame Remote Transmit Request bit (valid only if the IDE bit = 0). True = Standard frame Remote Transmit Request received. False = Standard data frame received. Declaration public bool StandardFrameRemoteTransmitRequest { get; } Property Value Type Description Boolean | Improve this Doc View Source StandardIdentifier SID[2:0]: Standard Identifier bits. These bits contain the three Least Significant bits of the Standard Identifier for the received message. Declaration public byte StandardIdentifier { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetRxBufferNumber(Address) Gets the Rx Buffer Number based on the register address. Declaration public static byte GetRxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Rx Buffer Number. Returns Type Description Byte The Rx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.html",
    "title": "Namespace Iot.Device.Mcp25xxx.Register.MessageTransmit | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp25xxx.Register.MessageTransmit Classes TxBxCtrl Transmit Buffer Control Register. TxBxDlc Transmit Buffer Data Length Code Register. TxBxDn Transmit Buffer Data Byte Register. TxBxEid0 Transmit Buffer Extended Identifier Low Register. TxBxEid8 Transmit Buffer Extended Identifier High Register. TxBxSidh Transmit Buffer Standard Identifier High Register. TxBxSidl Transmit Buffer Standard Identifier Low Register. TxRtsCtrl TxnRTS Pin Control and Status Register. Enums TxBxCtrl.BufferPriority Transmit Buffer Priority."
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.BufferPriority.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.BufferPriority.html",
    "title": "Enum TxBxCtrl.BufferPriority | nanoFramework Documentation",
    "keywords": "Enum TxBxCtrl.BufferPriority Transmit Buffer Priority. Namespace : Iot.Device.Mcp25xxx.Register.MessageTransmit Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum BufferPriority Fields Name Description HighestMessage Highest message priority. HighIntermediateMessage High intermediate message priority. LowestMessage Lowest message priority. LowIntermediateMessage Low intermediate message priority."
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.html",
    "title": "Class TxBxCtrl | nanoFramework Documentation",
    "keywords": "Class TxBxCtrl Transmit Buffer Control Register. Inheritance Object TxBxCtrl Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageTransmit Assembly : Iot.Device.Mcp25xxx.dll Syntax public class TxBxCtrl : IRegister Constructors | Improve this Doc View Source TxBxCtrl(Byte, TxBxCtrl.BufferPriority, Boolean, Boolean, Boolean, Boolean) Initializes a new instance of the TxBxCtrl class. Declaration public TxBxCtrl(byte txBufferNumber, TxBxCtrl.BufferPriority transmitBufferPriority, bool messageTransmitRequest, bool transmissionErrorDetected, bool messageLostArbitration, bool messageAbortedFlag) Parameters Type Name Description Byte txBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. TxBxCtrl.BufferPriority transmitBufferPriority TXP[1:0]: Transmit Buffer Priority bits. Boolean messageTransmitRequest TXREQ: Message Transmit Request bit. True = Buffer is currently pending transmission (MCU sets this bit to request message be transmitted bit is automatically cleared when the message is sent). False = Buffer is not currently pending transmission (MCU can clear this bit to request a message abort). Boolean transmissionErrorDetected TXERR: Transmission Error Detected bit. True = A bus error occurred while the message was being transmitted. False = No bus error occurred while the message was being transmitted. Boolean messageLostArbitration MLOA: Message Lost Arbitration bit. True = Message lost arbitration while being sent. False = Message did not lose arbitration while being sent. Boolean messageAbortedFlag ABTF: Message Aborted Flag bit. True = Message was aborted. False = Message completed transmission successfully. | Improve this Doc View Source TxBxCtrl(Byte, Byte) Initializes a new instance of the TxBxCtrl class. Declaration public TxBxCtrl(byte txBufferNumber, byte value) Parameters Type Name Description Byte txBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Byte value The value that represents the register contents. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source MessageAbortedFlag ABTF: Message Aborted Flag bit. True = Message was aborted. False = Message completed transmission successfully. Declaration public bool MessageAbortedFlag { get; } Property Value Type Description Boolean | Improve this Doc View Source MessageLostArbitration MLOA: Message Lost Arbitration bit. True = Message lost arbitration while being sent. False = Message did not lose arbitration while being sent. Declaration public bool MessageLostArbitration { get; } Property Value Type Description Boolean | Improve this Doc View Source MessageTransmitRequest TXREQ: Message Transmit Request bit. True = Buffer is currently pending transmission (MCU sets this bit to request message be transmitted bit is automatically cleared when the message is sent). False = Buffer is not currently pending transmission (MCU can clear this bit to request a message abort). Declaration public bool MessageTransmitRequest { get; } Property Value Type Description Boolean | Improve this Doc View Source TransmissionErrorDetected TXERR: Transmission Error Detected bit. True = A bus error occurred while the message was being transmitted. False = No bus error occurred while the message was being transmitted. Declaration public bool TransmissionErrorDetected { get; } Property Value Type Description Boolean | Improve this Doc View Source TransmitBufferPriority TXP[1:0]: Transmit Buffer Priority bits. Declaration public TxBxCtrl.BufferPriority TransmitBufferPriority { get; } Property Value Type Description TxBxCtrl.BufferPriority | Improve this Doc View Source TxBufferNumber Transmit Buffer Number. Declaration public byte TxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetTxBufferNumber(Address) Gets the Tx Buffer Number based on the register address. Declaration public static byte GetTxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Tx Buffer Number. Returns Type Description Byte The Tx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc.html",
    "title": "Class TxBxDlc | nanoFramework Documentation",
    "keywords": "Class TxBxDlc Transmit Buffer Data Length Code Register. Inheritance Object TxBxDlc Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageTransmit Assembly : Iot.Device.Mcp25xxx.dll Syntax public class TxBxDlc : IRegister Constructors | Improve this Doc View Source TxBxDlc(Byte, Byte) Initializes a new instance of the TxBxDlc class. Declaration public TxBxDlc(byte txBufferNumber, byte value) Parameters Type Name Description Byte txBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Byte value The value that represents the register contents. | Improve this Doc View Source TxBxDlc(Byte, Int32, Boolean) Initializes a new instance of the TxBxDlc class. Declaration public TxBxDlc(byte txBufferNumber, int dataLengthCode, bool remoteTransmissionRequest) Parameters Type Name Description Byte txBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Int32 dataLengthCode DLC[3:0]: Data Length Code bits. Sets the number of data bytes to be transmitted (0 to 8 bytes). Boolean remoteTransmissionRequest RTR: Remote Transmission Request bit. True = Transmitted message will be a Remote Transmit Request. False = Transmitted message will be a data frame. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source DataLengthCode DLC[3:0]: Data Length Code bits. Sets the number of data bytes to be transmitted (0 to 8 bytes). It is possible to set the DLC[3:0] bits to a value greater than eight; however, only eight bytes are transmitted. Declaration public int DataLengthCode { get; } Property Value Type Description Int32 | Improve this Doc View Source RemoteTransmissionRequest RTR: Remote Transmission Request bit. True = Transmitted message will be a Remote Transmit Request. False = Transmitted message will be a data frame. Declaration public bool RemoteTransmissionRequest { get; } Property Value Type Description Boolean | Improve this Doc View Source TxBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Declaration public byte TxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetTxBufferNumber(Address) Gets the Tx Buffer Number based on the register address. Declaration public static byte GetTxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Tx Buffer Number. Returns Type Description Byte The Tx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDn.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDn.html",
    "title": "Class TxBxDn | nanoFramework Documentation",
    "keywords": "Class TxBxDn Transmit Buffer Data Byte Register. Inheritance Object TxBxDn Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageTransmit Assembly : Iot.Device.Mcp25xxx.dll Syntax public class TxBxDn : IRegister Constructors | Improve this Doc View Source TxBxDn(Byte, Int32, Byte) Initializes a new instance of the TxBxDn class. Declaration public TxBxDn(byte txBufferNumber, int index, byte transmitBufferDataFieldBytes) Parameters Type Name Description Byte txBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Int32 index Index of data. Must be a value of 0 - 7. Byte transmitBufferDataFieldBytes TXBxDn[7:0]: Transmit Buffer Data Field Bytes. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source Index Index of data. Must be a value of 0 - 7. Declaration public int Index { get; } Property Value Type Description Int32 | Improve this Doc View Source TransmitBufferDataFieldBytes TXBxDn[7:0]: Transmit Buffer Data Field Bytes. Declaration public byte TransmitBufferDataFieldBytes { get; } Property Value Type Description Byte | Improve this Doc View Source TxBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Declaration public byte TxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetTxBufferNumber(Address) Gets the Tx Buffer Number based on the register address. Declaration public static byte GetTxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Tx Buffer Number. Returns Type Description Byte The Tx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid0.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid0.html",
    "title": "Class TxBxEid0 | nanoFramework Documentation",
    "keywords": "Class TxBxEid0 Transmit Buffer Extended Identifier Low Register. Inheritance Object TxBxEid0 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageTransmit Assembly : Iot.Device.Mcp25xxx.dll Syntax public class TxBxEid0 : IRegister Constructors | Improve this Doc View Source TxBxEid0(Byte, Byte) Initializes a new instance of the TxBxEid0 class. Declaration public TxBxEid0(byte txBufferNumber, byte extendedIdentifier) Parameters Type Name Description Byte txBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Byte extendedIdentifier EID[7:0]: Extended Identifier bits. These bits hold the Least Significant eight bits of the Extended Identifier for the transmit message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifier EID[7:0]: Extended Identifier bits. These bits hold the Least Significant eight bits of the Extended Identifier for the transmit message. Declaration public byte ExtendedIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source TxBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Declaration public byte TxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetTxBufferNumber(Address) Gets the Tx Buffer Number based on the register address. Declaration public static byte GetTxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Tx Buffer Number. Returns Type Description Byte The Tx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid8.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid8.html",
    "title": "Class TxBxEid8 | nanoFramework Documentation",
    "keywords": "Class TxBxEid8 Transmit Buffer Extended Identifier High Register. Inheritance Object TxBxEid8 Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageTransmit Assembly : Iot.Device.Mcp25xxx.dll Syntax public class TxBxEid8 : IRegister Constructors | Improve this Doc View Source TxBxEid8(Byte, Byte) Initializes a new instance of the TxBxEid8 class. Declaration public TxBxEid8(byte txBufferNumber, byte extendedIdentifier) Parameters Type Name Description Byte txBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Byte extendedIdentifier EID[15:8]: Extended Identifier bits. These bits hold bits 15 through 8 of the Extended Identifier for the transmit message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifier EID[15:8]: Extended Identifier bits. These bits hold bits 15 through 8 of the Extended Identifier for the transmit message. Declaration public byte ExtendedIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source TxBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Declaration public byte TxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetTxBufferNumber(Address) Gets the Tx Buffer Number based on the register address. Declaration public static byte GetTxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Tx Buffer Number. Returns Type Description Byte The Tx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidh.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidh.html",
    "title": "Class TxBxSidh | nanoFramework Documentation",
    "keywords": "Class TxBxSidh Transmit Buffer Standard Identifier High Register. Inheritance Object TxBxSidh Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageTransmit Assembly : Iot.Device.Mcp25xxx.dll Syntax public class TxBxSidh : IRegister Constructors | Improve this Doc View Source TxBxSidh(Byte, Byte) Initializes a new instance of the TxBxSidh class. Declaration public TxBxSidh(byte txBufferNumber, byte standardIdentifier) Parameters Type Name Description Byte txBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Byte standardIdentifier SID[10:3]: Standard Identifier bits. These bits contain the eight Most Significant bits of the Standard Identifier for the transmit message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source StandardIdentifier SID[10:3]: Standard Identifier bits. These bits contain the eight Most Significant bits of the Standard Identifier for the transmit message. Declaration public byte StandardIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source TxBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Declaration public byte TxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetTxBufferNumber(Address) Gets the Tx Buffer Number based on the register address. Declaration public static byte GetTxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Tx Buffer Number. Returns Type Description Byte The Tx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.html",
    "title": "Class TxBxSidl | nanoFramework Documentation",
    "keywords": "Class TxBxSidl Transmit Buffer Standard Identifier Low Register. Inheritance Object TxBxSidl Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageTransmit Assembly : Iot.Device.Mcp25xxx.dll Syntax public class TxBxSidl : IRegister Constructors | Improve this Doc View Source TxBxSidl(Byte, Byte) Initializes a new instance of the TxBxSidl class. Declaration public TxBxSidl(byte txBufferNumber, byte value) Parameters Type Name Description Byte txBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Byte value The value that represents the register contents. | Improve this Doc View Source TxBxSidl(Byte, Byte, Boolean, Byte) Initializes a new instance of the TxBxSidl class. Declaration public TxBxSidl(byte txBufferNumber, byte extendedIdentifier, bool extendedIdentifierEnable, byte standardIdentifier) Parameters Type Name Description Byte txBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Byte extendedIdentifier EID[17:16]: Extended Identifier bits. These bits contain the two Most Significant bits of the Extended Identifier for the transmit message. Boolean extendedIdentifierEnable EXIDE: Extended Identifier Enable bit. True = Message will transmit the Extended Identifier. False = Message will transmit the Standard Identifier. Byte standardIdentifier SID[2:0]: Standard Identifier bits. These bits contain the three Least Significant bits of the Standard Identifier for the transmit message. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source ExtendedIdentifier EID[17:16]: Extended Identifier bits. These bits contain the two Most Significant bits of the Extended Identifier for the transmit message. Declaration public byte ExtendedIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source ExtendedIdentifierEnable EXIDE: Extended Identifier Enable bit. True = Message will transmit the Extended Identifier. False = Message will transmit the Standard Identifier. Declaration public bool ExtendedIdentifierEnable { get; } Property Value Type Description Boolean | Improve this Doc View Source StandardIdentifier SID[2:0]: Standard Identifier bits. These bits contain the three Least Significant bits of the Standard Identifier for the transmit message. Declaration public byte StandardIdentifier { get; } Property Value Type Description Byte | Improve this Doc View Source TxBufferNumber Transmit Buffer Number. Must be a value of 0 - 2. Declaration public byte TxBufferNumber { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetTxBufferNumber(Address) Gets the Tx Buffer Number based on the register address. Declaration public static byte GetTxBufferNumber(Address address) Parameters Type Name Description Address address The address to look up Tx Buffer Number. Returns Type Description Byte The Tx Buffer Number based on the register address. | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.html",
    "title": "Class TxRtsCtrl | nanoFramework Documentation",
    "keywords": "Class TxRtsCtrl TxnRTS Pin Control and Status Register. Inheritance Object TxRtsCtrl Implements IRegister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx.Register.MessageTransmit Assembly : Iot.Device.Mcp25xxx.dll Syntax public class TxRtsCtrl : IRegister Constructors | Improve this Doc View Source TxRtsCtrl(Boolean, Boolean, Boolean, Boolean, Boolean, Boolean) Initializes a new instance of the TxRtsCtrl class. Declaration public TxRtsCtrl(bool tx0RtsPinMode, bool tx1RtsPinMode, bool tx2RtsPinMode, bool tx0RtsPinState, bool tx1RtsPinState, bool tx2RtsPinState) Parameters Type Name Description Boolean tx0RtsPinMode B0RTSM: Tx0RTS Pin mode bit. True = Pin is used to request message transmission of TXB0 buffer (on falling edge). False = Digital input. Boolean tx1RtsPinMode B1RTSM: Tx1RTS Pin mode bit. True = Pin is used to request message transmission of TXB1 buffer (on falling edge). False = Digital input. Boolean tx2RtsPinMode B2RTSM: Tx2RTS Pin mode bit. True = Pin is used to request message transmission of TXB2 buffer (on falling edge). False = Digital input. Boolean tx0RtsPinState B0RTS: Tx0RTS Pin State bit. Reads state of Tx0RTS pin when in Digital Input mode. Reads as '0' when pin is in 'Request-to-Send' mode. Boolean tx1RtsPinState B1RTS: Tx1RTX Pin State bit. Reads state of Tx1RTS pin when in Digital Input mode. Reads as '0' when pin is in 'Request-to-Send' mode. Boolean tx2RtsPinState B2RTS: Tx2RTS Pin State bit. Reads state of Tx2RTS pin when in Digital Input mode. Reads as '0' when pin is in 'Request-to-Send' mode. | Improve this Doc View Source TxRtsCtrl(Byte) Initializes a new instance of the TxRtsCtrl class. Declaration public TxRtsCtrl(byte value) Parameters Type Name Description Byte value The value that represents the register contents. Properties | Improve this Doc View Source Address Gets the address of the register. Declaration public Address Address { get; } Property Value Type Description Address The address of the register. | Improve this Doc View Source Tx0RtsPinMode B0RTSM: Tx0RTS Pin mode bit. True = Pin is used to request message transmission of TXB0 buffer (on falling edge). False = Digital input. Declaration public bool Tx0RtsPinMode { get; } Property Value Type Description Boolean | Improve this Doc View Source Tx0RtsPinState B0RTS: Tx0RTS Pin State bit. Reads state of Tx0RTS pin when in Digital Input mode. Reads as '0' when pin is in 'Request-to-Send' mode. Declaration public bool Tx0RtsPinState { get; } Property Value Type Description Boolean | Improve this Doc View Source Tx1RtsPinMode B1RTSM: Tx1RTS Pin mode bit. True = Pin is used to request message transmission of TXB1 buffer (on falling edge). False = Digital input. Declaration public bool Tx1RtsPinMode { get; } Property Value Type Description Boolean | Improve this Doc View Source Tx1RtsPinState B1RTS: Tx1RTX Pin State bit. Reads state of Tx1RTS pin when in Digital Input mode. Reads as '0' when pin is in 'Request-to-Send' mode. Declaration public bool Tx1RtsPinState { get; } Property Value Type Description Boolean | Improve this Doc View Source Tx2RtsPinMode B2RTSM: Tx2RTS Pin mode bit. True = Pin is used to request message transmission of TXB2 buffer (on falling edge). False = Digital input. Declaration public bool Tx2RtsPinMode { get; } Property Value Type Description Boolean | Improve this Doc View Source Tx2RtsPinState B2RTS: Tx2RTS Pin State bit. Reads state of Tx2RTS pin when in Digital Input mode. Reads as '0' when pin is in 'Request-to-Send' mode. Declaration public bool Tx2RtsPinState { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source ToByte() Converts register contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the register contents. Implements IRegister"
  },
  "devices/Iot.Device.Mcp25xxx.RxBufferAddressPointer.html": {
    "href": "devices/Iot.Device.Mcp25xxx.RxBufferAddressPointer.html",
    "title": "Enum RxBufferAddressPointer | nanoFramework Documentation",
    "keywords": "Enum RxBufferAddressPointer Address Pointer to one of four locations for the receive buffer. Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum RxBufferAddressPointer Fields Name Description RxB0D0 Receive Buffer 0 starting at RXB0D0 (0x66). RxB0Sidh Receive Buffer 0 starting at RXB0SIDH (0x61). RxB1D0 Receive Buffer 1 starting at RXB1D0 (0x77). RxB1Sidh Receive Buffer 1 starting at RXB1SIDH (0x71)."
  },
  "devices/Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType.html": {
    "href": "devices/Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType.html",
    "title": "Enum RxStatusResponse.FilterMatchType | nanoFramework Documentation",
    "keywords": "Enum RxStatusResponse.FilterMatchType Filter match type Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum FilterMatchType Fields Name Description RxF0 RxF0 RxF0RolloverToRxB1 RxF0RolloverToRxB1 RxF1 RxF1 RxF1RolloverToRxB1 RxF1RolloverToRxB1 RxF2 RxF2 RxF3 RxF3 RxF4 RxF4 RxF5 RxF5"
  },
  "devices/Iot.Device.Mcp25xxx.RxStatusResponse.html": {
    "href": "devices/Iot.Device.Mcp25xxx.RxStatusResponse.html",
    "title": "Class RxStatusResponse | nanoFramework Documentation",
    "keywords": "Class RxStatusResponse Response from RX STATUS instruction. Inheritance Object RxStatusResponse Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax public class RxStatusResponse Constructors | Improve this Doc View Source RxStatusResponse(RxStatusResponse.FilterMatchType, RxStatusResponse.MessageReceivedType, RxStatusResponse.ReceivedMessageType) Initializes a new instance of the RxStatusResponse class. Declaration public RxStatusResponse(RxStatusResponse.FilterMatchType filterMatch, RxStatusResponse.MessageReceivedType messageTypeReceived, RxStatusResponse.ReceivedMessageType receivedMessage) Parameters Type Name Description RxStatusResponse.FilterMatchType filterMatch Filter match type RxStatusResponse.MessageReceivedType messageTypeReceived The extended ID bit is mapped to bit 4. The RTR bit is mapped to bit 3. RxStatusResponse.ReceivedMessageType receivedMessage RXxIF (CANINTF) bits are mapped to bits 7 and 6. | Improve this Doc View Source RxStatusResponse(Byte) Initializes a new instance of the RxStatusResponse class. Declaration public RxStatusResponse(byte value) Parameters Type Name Description Byte value The value that represents the ReceivedMessage, MessageTypeReceived and FilterMatch. Properties | Improve this Doc View Source FilterMatch Filter match type Declaration public RxStatusResponse.FilterMatchType FilterMatch { get; } Property Value Type Description RxStatusResponse.FilterMatchType | Improve this Doc View Source MessageTypeReceived The extended ID bit is mapped to bit 4. The RTR bit is mapped to bit 3. Declaration public RxStatusResponse.MessageReceivedType MessageTypeReceived { get; } Property Value Type Description RxStatusResponse.MessageReceivedType | Improve this Doc View Source ReceivedMessage RXxIF (CANINTF) bits are mapped to bits 7 and 6. Declaration public RxStatusResponse.ReceivedMessageType ReceivedMessage { get; } Property Value Type Description RxStatusResponse.ReceivedMessageType Methods | Improve this Doc View Source ToByte() Converts contents to a byte. Declaration public byte ToByte() Returns Type Description Byte The byte that represent the response contents."
  },
  "devices/Iot.Device.Mcp25xxx.RxStatusResponse.MessageReceivedType.html": {
    "href": "devices/Iot.Device.Mcp25xxx.RxStatusResponse.MessageReceivedType.html",
    "title": "Enum RxStatusResponse.MessageReceivedType | nanoFramework Documentation",
    "keywords": "Enum RxStatusResponse.MessageReceivedType The extended ID bit is mapped to bit 4. The RTR bit is mapped to bit 3. Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum MessageReceivedType Fields Name Description ExtendedDataFrame Extended Data Frame. ExtendedRemoteFrame Extended Remote Frame. StandardDataFrame Standard Data Frame. StandardRemoteFrame Standard Remote Frame."
  },
  "devices/Iot.Device.Mcp25xxx.RxStatusResponse.ReceivedMessageType.html": {
    "href": "devices/Iot.Device.Mcp25xxx.RxStatusResponse.ReceivedMessageType.html",
    "title": "Enum RxStatusResponse.ReceivedMessageType | nanoFramework Documentation",
    "keywords": "Enum RxStatusResponse.ReceivedMessageType RXxIF (CANINTF) bits are mapped to bits 7 and 6. Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum ReceivedMessageType Fields Name Description MessageInRxB0 Message in RXB0. MessageInRxB1 Message in RXB1. MessagesInBothBuffers Messages in Both Buffers. NoRxMessage No RX Message."
  },
  "devices/Iot.Device.Mcp25xxx.Tests.Register.CanControl.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Tests.Register.CanControl.html",
    "title": "Namespace Iot.Device.Mcp25xxx.Tests.Register.CanControl | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp25xxx.Tests.Register.CanControl Enums OperationMode Operation Mode."
  },
  "devices/Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode.html": {
    "href": "devices/Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode.html",
    "title": "Enum OperationMode | nanoFramework Documentation",
    "keywords": "Enum OperationMode Operation Mode. Namespace : Iot.Device.Mcp25xxx.Tests.Register.CanControl Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum OperationMode Fields Name Description Configuration Device is in Configuration mode. ListenOnly Device is in Listen-Only mode. Loopback Device is in Loopback mode. NormalOperation Device is in the Normal Operation mode. Sleep Device is in Sleep mode."
  },
  "devices/Iot.Device.Mcp25xxx.TxBufferAddressPointer.html": {
    "href": "devices/Iot.Device.Mcp25xxx.TxBufferAddressPointer.html",
    "title": "Enum TxBufferAddressPointer | nanoFramework Documentation",
    "keywords": "Enum TxBufferAddressPointer Address Pointer to one of six locations for the transmit buffer. Namespace : Iot.Device.Mcp25xxx Assembly : Iot.Device.Mcp25xxx.dll Syntax public enum TxBufferAddressPointer Fields Name Description TxB0D0 TX Buffer 0 starting at TXB0D0 (0x36). TxB0Sidh TX Buffer 0 starting at TXB0SIDH (0x31). TxB1D0 TX Buffer 1 starting at TXB1D0 (0x46). TxB1Sidh TX Buffer 1 starting at TXB1SIDH (0x41). TxB2D0 TX Buffer 2 starting at TXB2D0 (0x56). TxB2Sidh TX Buffer 2 starting at TXB2SIDH (0x51)."
  },
  "devices/Iot.Device.Mcp3428.AdcGain.html": {
    "href": "devices/Iot.Device.Mcp3428.AdcGain.html",
    "title": "Enum AdcGain | nanoFramework Documentation",
    "keywords": "Enum AdcGain Possible gain values of the ADC Namespace : Iot.Device.Mcp3428 Assembly : Iot.Device.Mcp3428.dll Syntax public enum AdcGain : byte Fields Name Description X1 1x gain X2 2x gain X4 4x gain X8 8x gain"
  },
  "devices/Iot.Device.Mcp3428.AdcMode.html": {
    "href": "devices/Iot.Device.Mcp3428.AdcMode.html",
    "title": "Enum AdcMode | nanoFramework Documentation",
    "keywords": "Enum AdcMode Possible operation modes of the ADC Namespace : Iot.Device.Mcp3428 Assembly : Iot.Device.Mcp3428.dll Syntax [Flags] public enum AdcMode : byte Fields Name Description Continuous Continuous mode OneShot One shot mode"
  },
  "devices/Iot.Device.Mcp3428.AdcResolution.html": {
    "href": "devices/Iot.Device.Mcp3428.AdcResolution.html",
    "title": "Enum AdcResolution | nanoFramework Documentation",
    "keywords": "Enum AdcResolution Possible resolution values of the ADC Namespace : Iot.Device.Mcp3428 Assembly : Iot.Device.Mcp3428.dll Syntax [Flags] public enum AdcResolution : byte Fields Name Description Bit12 12-bit resolution Bit14 14-bit resolution Bit16 16-bit resolution"
  },
  "devices/Iot.Device.Mcp3428.ConversionResult.html": {
    "href": "devices/Iot.Device.Mcp3428.ConversionResult.html",
    "title": "Struct ConversionResult | nanoFramework Documentation",
    "keywords": "Struct ConversionResult Conversion result Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Iot.Device.Mcp3428 Assembly : Iot.Device.Mcp3428.dll Syntax public readonly struct ConversionResult Constructors | Improve this Doc View Source ConversionResult(Byte, Int16, AdcResolution) Constructs ConversionResult instance Declaration public ConversionResult(byte channel, short rawData, AdcResolution resolution) Parameters Type Name Description Byte channel ADC channel Int16 rawData Raw ADC value AdcResolution resolution ADC resolution Properties | Improve this Doc View Source Accuracy Accuracy of the voltage measurement Declaration public readonly double Accuracy { get; } Property Value Type Description Double The LSB value. | Improve this Doc View Source Channel ID of the measuring channel. Declaration public readonly byte Channel { get; } Property Value Type Description Byte The channel. | Improve this Doc View Source RawValue Raw measurement data. Has to be scaled based on the measurement resolution to get voltage. Declaration public readonly short RawValue { get; } Property Value Type Description Int16 The raw data. | Improve this Doc View Source Voltage Gets the voltage. Declaration public readonly double Voltage { get; } Property Value Type Description Double The voltage. | Improve this Doc View Source VoltageDivisor Divisor to scale raw data. Declaration public readonly ushort VoltageDivisor { get; } Property Value Type Description UInt16 The divisor."
  },
  "devices/Iot.Device.Mcp3428.html": {
    "href": "devices/Iot.Device.Mcp3428.html",
    "title": "Namespace Iot.Device.Mcp3428 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp3428 Classes Mcp3426 Represents Mcp3426 ADC Mcp3427 Represents MCP3427 ADC Mcp3428 Represents MCP3428 ADC Mcp342x Base type for MCP342X ADC Structs ConversionResult Conversion result Enums AdcGain Possible gain values of the ADC AdcMode Possible operation modes of the ADC AdcResolution Possible resolution values of the ADC PinState Possible connection states for the address pins Delegates Mcp342x.ConversionResultHandler Event handler for ConversionResult"
  },
  "devices/Iot.Device.Mcp3428.Mcp3426.html": {
    "href": "devices/Iot.Device.Mcp3428.Mcp3426.html",
    "title": "Class Mcp3426 | nanoFramework Documentation",
    "keywords": "Class Mcp3426 Represents Mcp3426 ADC Inheritance Object Mcp342x Mcp3426 Implements IDisposable Inherited Members Mcp342x.LastBytes Mcp342x.LastChannel Mcp342x.Mode Mcp342x.InputGain Mcp342x.Resolution Mcp342x.ReadChannel(Int32) Mcp342x.OneShotRead(Int32) Mcp342x.WaitForConversion(TimeSpan, CancellationToken) Mcp342x.ReadConfigByte(Byte) Mcp342x.ReadValue(Int32) Mcp342x.SetConfig(Int32, AdcMode, AdcResolution, AdcGain, ListString) Mcp342x.WaitTime Mcp342x.ChannelCount Mcp342x.LastConversion Mcp342x.OnConversion Mcp342x.WriteConfig(Byte) Mcp342x.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp3428 Assembly : Iot.Device.Mcp3428.dll Syntax public class Mcp3426 : Mcp342x, IDisposable Constructors | Improve this Doc View Source Mcp3426(I2cDevice) Constructs Mcp3426 instance Declaration public Mcp3426(I2cDevice i2CDevice) Parameters Type Name Description I2cDevice i2CDevice I2C device used to communicate with the device | Improve this Doc View Source Mcp3426(I2cDevice, AdcMode, AdcResolution, AdcGain) Constructs Mcp3426 instance Declaration public Mcp3426(I2cDevice i2CDevice, AdcMode mode = AdcMode.Continuous, AdcResolution resolution = AdcResolution.Bit12, AdcGain pgaGain = AdcGain.X1) Parameters Type Name Description I2cDevice i2CDevice I2C device used to communicate with the device AdcMode mode ADC operation mode AdcResolution resolution ADC resolution AdcGain pgaGain PGA gain Fields | Improve this Doc View Source I2CAddress Default I2C address for the device Declaration public const int I2CAddress = 104 Field Value Type Description Int32 Implements IDisposable"
  },
  "devices/Iot.Device.Mcp3428.Mcp3427.html": {
    "href": "devices/Iot.Device.Mcp3428.Mcp3427.html",
    "title": "Class Mcp3427 | nanoFramework Documentation",
    "keywords": "Class Mcp3427 Represents MCP3427 ADC Inheritance Object Mcp342x Mcp3427 Implements IDisposable Inherited Members Mcp342x.LastBytes Mcp342x.LastChannel Mcp342x.Mode Mcp342x.InputGain Mcp342x.Resolution Mcp342x.ReadChannel(Int32) Mcp342x.OneShotRead(Int32) Mcp342x.WaitForConversion(TimeSpan, CancellationToken) Mcp342x.ReadConfigByte(Byte) Mcp342x.ReadValue(Int32) Mcp342x.SetConfig(Int32, AdcMode, AdcResolution, AdcGain, ListString) Mcp342x.WaitTime Mcp342x.ChannelCount Mcp342x.LastConversion Mcp342x.OnConversion Mcp342x.WriteConfig(Byte) Mcp342x.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp3428 Assembly : Iot.Device.Mcp3428.dll Syntax public class Mcp3427 : Mcp342x, IDisposable Constructors | Improve this Doc View Source Mcp3427(I2cDevice) Constructs Mcp3427 instance Declaration public Mcp3427(I2cDevice i2CDevice) Parameters Type Name Description I2cDevice i2CDevice I2C device used to communicate with the device | Improve this Doc View Source Mcp3427(I2cDevice, AdcMode, AdcResolution, AdcGain) Constructs Mcp3427 instance Declaration public Mcp3427(I2cDevice i2CDevice, AdcMode mode = AdcMode.Continuous, AdcResolution resolution = AdcResolution.Bit12, AdcGain pgaGain = AdcGain.X1) Parameters Type Name Description I2cDevice i2CDevice I2C device used to communicate with the device AdcMode mode ADC operation mode AdcResolution resolution ADC resolution AdcGain pgaGain PGA gain Methods | Improve this Doc View Source I2CAddressFromPins(PinState, PinState) Determine device I2C address based on the configuration pin states. Declaration public static int I2CAddressFromPins(PinState adr0, PinState adr1) Parameters Type Name Description PinState adr0 The adr0 pin state PinState adr1 The adr1 pin state Returns Type Description Int32 System.Int32. Implements IDisposable"
  },
  "devices/Iot.Device.Mcp3428.Mcp3428.html": {
    "href": "devices/Iot.Device.Mcp3428.Mcp3428.html",
    "title": "Class Mcp3428 | nanoFramework Documentation",
    "keywords": "Class Mcp3428 Represents MCP3428 ADC Inheritance Object Mcp342x Mcp3428 Implements IDisposable Inherited Members Mcp342x.LastBytes Mcp342x.LastChannel Mcp342x.Mode Mcp342x.InputGain Mcp342x.Resolution Mcp342x.ReadChannel(Int32) Mcp342x.OneShotRead(Int32) Mcp342x.WaitForConversion(TimeSpan, CancellationToken) Mcp342x.ReadConfigByte(Byte) Mcp342x.ReadValue(Int32) Mcp342x.SetConfig(Int32, AdcMode, AdcResolution, AdcGain, ListString) Mcp342x.WaitTime Mcp342x.ChannelCount Mcp342x.LastConversion Mcp342x.OnConversion Mcp342x.WriteConfig(Byte) Mcp342x.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp3428 Assembly : Iot.Device.Mcp3428.dll Syntax public class Mcp3428 : Mcp342x, IDisposable Constructors | Improve this Doc View Source Mcp3428(I2cDevice) Constructs Mcp3428 instance Declaration public Mcp3428(I2cDevice i2CDevice) Parameters Type Name Description I2cDevice i2CDevice I2C device used to communicate with the device | Improve this Doc View Source Mcp3428(I2cDevice, AdcMode, AdcResolution, AdcGain) Constructs Mcp3428 instance Declaration public Mcp3428(I2cDevice i2CDevice, AdcMode mode = AdcMode.Continuous, AdcResolution resolution = AdcResolution.Bit12, AdcGain pgaGain = AdcGain.X1) Parameters Type Name Description I2cDevice i2CDevice I2C device used to communicate with the device AdcMode mode ADC operation mode AdcResolution resolution ADC resolution AdcGain pgaGain PGA gain Methods | Improve this Doc View Source I2CAddressFromPins(PinState, PinState) Determine device I2C address based on the configuration pin states. Declaration public static int I2CAddressFromPins(PinState adr0, PinState adr1) Parameters Type Name Description PinState adr0 The adr0 pin state PinState adr1 The adr1 pin state Returns Type Description Int32 System.Int32. Implements IDisposable"
  },
  "devices/Iot.Device.Mcp3428.Mcp342x.ConversionResultHandler.html": {
    "href": "devices/Iot.Device.Mcp3428.Mcp342x.ConversionResultHandler.html",
    "title": "Delegate Mcp342x.ConversionResultHandler | nanoFramework Documentation",
    "keywords": "Delegate Mcp342x.ConversionResultHandler Event handler for ConversionResult Namespace : Iot.Device.Mcp3428 Assembly : Iot.Device.Mcp3428.dll Syntax public delegate void ConversionResultHandler(object sender, ConversionResult conversionResult); Parameters Type Name Description Object sender This class ConversionResult conversionResult Convertion results"
  },
  "devices/Iot.Device.Mcp3428.Mcp342x.html": {
    "href": "devices/Iot.Device.Mcp3428.Mcp342x.html",
    "title": "Class Mcp342x | nanoFramework Documentation",
    "keywords": "Class Mcp342x Base type for MCP342X ADC Inheritance Object Mcp342x Mcp3426 Mcp3427 Mcp3428 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp3428 Assembly : Iot.Device.Mcp3428.dll Syntax public abstract class Mcp342x : IDisposable Constructors | Improve this Doc View Source Mcp342x(I2cDevice, Int32) Protected constructor to easily generate MCP3426/7 devices whose only difference is channel count and I2C address Declaration protected Mcp342x(I2cDevice i2cDevice, int channels) Parameters Type Name Description I2cDevice i2cDevice The i2 c device. Int32 channels The channels. Properties | Improve this Doc View Source ChannelCount Number of channels Declaration public int ChannelCount { get; } Property Value Type Description Int32 | Improve this Doc View Source InputGain Gets or sets the input gain. Declaration public AdcGain InputGain { get; set; } Property Value Type Description AdcGain The pga gain. | Improve this Doc View Source LastBytes Gets the last transmitted bytes. Debug function Declaration public byte[] LastBytes { get; } Property Value Type Description Byte [] The last bytes. | Improve this Doc View Source LastChannel Channel most recently read Declaration public byte LastChannel { get; } Property Value Type Description Byte The last channel. | Improve this Doc View Source LastConversion Last conversion result Declaration protected ConversionResult LastConversion { get; set; } Property Value Type Description ConversionResult | Improve this Doc View Source Mode ADC mode Declaration public AdcMode Mode { get; set; } Property Value Type Description AdcMode | Improve this Doc View Source Resolution Gets or sets the bit resolution of the result. Declaration public AdcResolution Resolution { get; set; } Property Value Type Description AdcResolution The resolution. | Improve this Doc View Source WaitTime Wait period before operation is cancelled Declaration protected int WaitTime { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OneShotRead(Int32) Initiates One-shot reading and waits for the conversion to finish. Declaration protected void OneShotRead(int channel = -1) Parameters Type Name Description Int32 channel The channel. Exceptions Type Condition IOException Device is not in One-Shot mode or ADC Conversion was not ready after {tries} | Improve this Doc View Source ReadChannel(Int32) Reads the channel. Declaration public double ReadChannel(int channel) Parameters Type Name Description Int32 channel The channel. Returns Type Description Double System.Double. | Improve this Doc View Source ReadConfigByte(Byte) Read (or load) configuration byte Declaration protected void ReadConfigByte(byte config) Parameters Type Name Description Byte config Configuration to be read | Improve this Doc View Source ReadValue(Int32) Reads value on the specified channel Declaration protected double ReadValue(int channel = -1) Parameters Type Name Description Int32 channel Channel to read the data from Returns Type Description Double Value read from the channel | Improve this Doc View Source SetConfig(Int32, AdcMode, AdcResolution, AdcGain, ListString) Write configuration register and read back value Declaration protected bool SetConfig(int channel = 0, AdcMode mode = AdcMode.Continuous, AdcResolution resolution = AdcResolution.Bit12, AdcGain pgaGain = AdcGain.X1, ListString errorList = null) Parameters Type Name Description Int32 channel The channel. AdcMode mode The mode. AdcResolution resolution The resolution. AdcGain pgaGain The pga gain. ListString errorList List to write errors on failure Returns Type Description Boolean true if all values are set correctly, false otherwise. Exceptions Type Condition ArgumentOutOfRangeException channel | Improve this Doc View Source WaitForConversion(TimeSpan, CancellationToken) Waits for conversion to complete Declaration protected void WaitForConversion(TimeSpan waitSpan = default(TimeSpan), CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description TimeSpan waitSpan Time to wait for conversion before timing out CancellationToken cancellationToken Token which can be used to cancel the operation | Improve this Doc View Source WriteConfig(Byte) Writes configuration Declaration protected void WriteConfig(byte configByte) Parameters Type Name Description Byte configByte Configuration to write Events | Improve this Doc View Source OnConversion Event called when conversion is complete Declaration public event Mcp342x.ConversionResultHandler OnConversion Event Type Type Description Mcp342x.ConversionResultHandler Implements IDisposable"
  },
  "devices/Iot.Device.Mcp3428.PinState.html": {
    "href": "devices/Iot.Device.Mcp3428.PinState.html",
    "title": "Enum PinState | nanoFramework Documentation",
    "keywords": "Enum PinState Possible connection states for the address pins Namespace : Iot.Device.Mcp3428 Assembly : Iot.Device.Mcp3428.dll Syntax public enum PinState : byte Fields Name Description Floating Floating state High High state Low Low state"
  },
  "devices/Iot.Device.Mcp9808.html": {
    "href": "devices/Iot.Device.Mcp9808.html",
    "title": "Namespace Iot.Device.Mcp9808 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mcp9808 Classes Mcp9808 Microchip's MCP9808 I2C Temp sensor"
  },
  "devices/Iot.Device.Mcp9808.Mcp9808.html": {
    "href": "devices/Iot.Device.Mcp9808.Mcp9808.html",
    "title": "Class Mcp9808 | nanoFramework Documentation",
    "keywords": "Class Mcp9808 Microchip's MCP9808 I2C Temp sensor Inheritance Object Mcp9808 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mcp9808 Assembly : Iot.Device.Mcp9808.dll Syntax [Interface(\"Microchip's MCP9808 I2C Temp sensor\")] public class Mcp9808 : IDisposable Constructors | Improve this Doc View Source Mcp9808(I2cDevice) Creates a new instance of the MCP9808 Declaration public Mcp9808(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Fields | Improve this Doc View Source DefaultI2cAddress MCP9808 I2C Address Declaration public const byte DefaultI2cAddress = 24 Field Value Type Description Byte Properties | Improve this Doc View Source Disabled Disable MCP9808 Declaration [Property] public bool Disabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Temperature MCP9808 Temperature Declaration [Telemetry] public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() | Improve this Doc View Source GetResolution() Return the internal resolution register Declaration [Property(\"Resolution\")] public byte GetResolution() Returns Type Description Byte Resolution setting | Improve this Doc View Source Shutdown() Shuts down the device Declaration [Command] public void Shutdown() | Improve this Doc View Source Wake() Wakes-up the device Declaration [Command] public void Wake() Implements IDisposable"
  },
  "devices/Iot.Device.Mfrc522.Gain.html": {
    "href": "devices/Iot.Device.Mfrc522.Gain.html",
    "title": "Enum Gain | nanoFramework Documentation",
    "keywords": "Enum Gain The reception gain for the antenna Namespace : Iot.Device.Mfrc522 Assembly : Iot.Device.Mfrc522.dll Syntax public enum Gain Fields Name Description G18dBa Minimum gain 18 db G18dBb 18 db G23dBa 23 db G23dBb 23 db G33dB 33 db G38dB 38 db G43dB 43 db G48dB 48 db"
  },
  "devices/Iot.Device.Mfrc522.html": {
    "href": "devices/Iot.Device.Mfrc522.html",
    "title": "Namespace Iot.Device.Mfrc522 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mfrc522 Classes MfRc522 MfRc522 module Enums Gain The reception gain for the antenna MfrcCommand Command of MFRC522 reader SerialSpeed The serial UART speed in baud Status Status for the functions"
  },
  "devices/Iot.Device.Mfrc522.MfRc522.html": {
    "href": "devices/Iot.Device.Mfrc522.MfRc522.html",
    "title": "Class MfRc522 | nanoFramework Documentation",
    "keywords": "Class MfRc522 MfRc522 module Inheritance Object MfRc522 Implements IDisposable Namespace : Iot.Device.Mfrc522 Assembly : Iot.Device.Mfrc522.dll Syntax public class MfRc522 : CardTransceiver, IDisposable Constructors | Improve this Doc View Source MfRc522(I2cDevice, Int32, GpioController, Boolean) Constructor for MFRC5222 with I2C interface. Declaration public MfRc522(I2cDevice i2cDevice, int pinReset = -1, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description I2cDevice i2cDevice An I2C device, note that there is no default address for this device, it can be programmed with pins. Int32 pinReset A reset pin for the hardware reset. GpioController gpioController A GpioController for the hardware reset. Boolean shouldDispose True to dispose the GpioController. | Improve this Doc View Source MfRc522(SpiDevice, Int32, GpioController, Boolean) Constructor for MFRC5222 with SPI interface. Declaration public MfRc522(SpiDevice spiDevice, int pinReset = -1, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description SpiDevice spiDevice A SPI device Int32 pinReset A reset pin for the hardware reset. GpioController gpioController A GpioController for the hardware reset. Boolean shouldDispose True to dispose the GpioController. | Improve this Doc View Source MfRc522(SerialPort, Int32, GpioController, Boolean) Constructor for MFRC5222 with Serial Port interface. Declaration public MfRc522(SerialPort serialPort, int pinReset = -1, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description SerialPort serialPort A Serial Port, default speed is 9600 baud, no parity, 1 bit stop. Int32 pinReset A reset pin for the hardware reset. GpioController gpioController A GpioController for the hardware reset. Boolean shouldDispose True to dispose the GpioController. | Improve this Doc View Source MfRc522(String, Int32, GpioController, Boolean) Constructor for MFRC5222 with Serial Port interface. Declaration public MfRc522(string serialPort, int pinReset = -1, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description String serialPort A Serial Port name, will construct a SerialPort with default speed of 9600 baud, no parity, 1 bit stop. Int32 pinReset A reset pin for the hardware reset. GpioController gpioController A GpioController for the hardware reset. Boolean shouldDispose True to dispose the GpioController. Fields | Improve this Doc View Source DefaultSpiMode Only SPI Mode supported is Mode0 Declaration public const SpiMode DefaultSpiMode = SpiMode.Mode0 Field Value Type Description SpiMode | Improve this Doc View Source MaximumSpiClockFrequency The maximum speed for SPI transfer speed Declaration public const int MaximumSpiClockFrequency = 10000000 Field Value Type Description Int32 Properties | Improve this Doc View Source Enabled Switch on or off the antenna. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Gain Get or Set the gain. Declaration public Gain Gain { get; set; } Property Value Type Description Gain | Improve this Doc View Source SerialSpeed Set or Get the baud rate for the serial port communication. Default is 9600 baud. Declaration public SerialSpeed SerialSpeed { get; set; } Property Value Type Description SerialSpeed | Improve this Doc View Source Version Get the Version. Declaration public Version Version { get; } Property Value Type Description Version Remarks Only versions 1.0 and 2.0 are valid for authentic MFRC522. Some copies may not have a proper version but would just work. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Halt() Stop to communicate with a card. Declaration public bool Halt() Returns Type Description Boolean True if success. Remarks It's not because you don't get a positive result the card is not halt. | Improve this Doc View Source IsCardPresent(Byte[]) Check if a new card is present. Declaration public bool IsCardPresent(byte[] atqa) Parameters Type Name Description Byte [] atqa ATQA buffer must be 2 bytes length and will contain the ATQA answer if there is a card. Returns Type Description Boolean true if there is a card, else false. | Improve this Doc View Source ListenToCardIso14443TypeA(out Data106kbpsTypeA, TimeSpan) Listen to any 14443 Type A card. Declaration public bool ListenToCardIso14443TypeA(out Data106kbpsTypeA card, TimeSpan timeout) Parameters Type Name Description Data106kbpsTypeA card A card once detected. TimeSpan timeout A timeout for pulling the card. Returns Type Description Boolean True if success. | Improve this Doc View Source MifareAuthenticate(SpanByte, MifareCardCommand, Byte, SpanByte) Specific function to authenticate Mifare cards Declaration public Status MifareAuthenticate(SpanByte key, MifareCardCommand mifareCommand, byte blockAddress, SpanByte cardUid) Parameters Type Name Description SpanByte key A 6 bytes key MifareCardCommand mifareCommand MifareCardCommand.AuthenticationA or MifareCardCommand.AuthenticationB Byte blockAddress The block address to authenticate. SpanByte cardUid The 4 bytes UUID of the card. Returns Type Description Status True if success. | Improve this Doc View Source PrepareForSleep() Prepare for sleep, make sure cryptography is off and switch off the antenna. Declaration public void PrepareForSleep() | Improve this Doc View Source ReselectTarget(Byte) Declaration public override bool ReselectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Returns Type Description Boolean | Improve this Doc View Source SendAndReceiveData(MfrcCommand, SpanByte, SpanByte, Byte) Sand and Receive Data. Declaration public Status SendAndReceiveData(MfrcCommand command, SpanByte sendData, SpanByte receiveData, byte numberValidBitsLastByte = 8) Parameters Type Name Description MfrcCommand command The MFRC522 command. SpanByte sendData The data to send. SpanByte receiveData The data to receive. Note that you need to have at least the size of data you expect to receive. Byte numberValidBitsLastByte The number of bits valid in the last byte, 8 is the default. Returns Type Description Status True if the operation is successful. | Improve this Doc View Source SoftReset() Perform a soft reset. The configuration data of the internal buffer remains unchanged.All registers are set to the reset values.This command automatically terminates when finished. Declaration public void SoftReset() Remarks The SerialSpeedReg register is reset and therefore the serial data rate is set to 9600 baud. | Improve this Doc View Source Transceive(Byte, SpanByte, SpanByte) Declaration public override int Transceive(byte targetNumber, SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description Byte targetNumber SpanByte dataToSend SpanByte dataFromCard Returns Type Description Int32 Implements IDisposable"
  },
  "devices/Iot.Device.Mfrc522.MfrcCommand.html": {
    "href": "devices/Iot.Device.Mfrc522.MfrcCommand.html",
    "title": "Enum MfrcCommand | nanoFramework Documentation",
    "keywords": "Enum MfrcCommand Command of MFRC522 reader Namespace : Iot.Device.Mfrc522 Assembly : Iot.Device.Mfrc522.dll Syntax public enum MfrcCommand Remarks Most of the time, the only one you need to use is the Transceive command. The SendAndReceiveData function is already using some of those commands to allow send and receive scenarios Fields Name Description CalculateCrc Calculate CRC: activates the CRC coprocessor or performs a self test GenerateRandomId Generate Random Id: generates a 10-byte random ID number Idle Idle : no action, cancels current command execution Memory Memory: stores 25 bytes into the internal buffer MifareAuthenticate Mifare Authenticate: performs the MIFARE standard authentication as a reader NoCommandChange No Command Change: no command change, can be used to modify the CommandReg register bits without affecting the command, for example, the PowerDown bit Receive Receive: activates the receiver circuits ResetPhase Reset Phase: soft resets the MFRC522 Transceive Transceive: transmits data from FIFO buffer to antenna and automatically activates the receiver after transmission Transmit Transmit: transmits data from the FIFO buffer"
  },
  "devices/Iot.Device.Mfrc522.SerialSpeed.html": {
    "href": "devices/Iot.Device.Mfrc522.SerialSpeed.html",
    "title": "Enum SerialSpeed | nanoFramework Documentation",
    "keywords": "Enum SerialSpeed The serial UART speed in baud Namespace : Iot.Device.Mfrc522 Assembly : Iot.Device.Mfrc522.dll Syntax public enum SerialSpeed Fields Name Description B115200 115200 baud B1228800 1228800 baud B128000 128000 baud B14400 14400 baud B19200 19200 baud B230400 230400 baud B38400 38400 baud B460800 460800 baud B57600 57600 baud B7200 7200 baud B921600 921600 baud B9600 9600 baud"
  },
  "devices/Iot.Device.Mfrc522.Status.html": {
    "href": "devices/Iot.Device.Mfrc522.Status.html",
    "title": "Enum Status | nanoFramework Documentation",
    "keywords": "Enum Status Status for the functions Namespace : Iot.Device.Mfrc522 Assembly : Iot.Device.Mfrc522.dll Syntax public enum Status Fields Name Description Collision A collision has been detected, this allows for example to use retry mechanism Error An error happened Ok All happens perfectly Timeout Timeout in reading or writing to the card, it may means the card has been removed from the reader or is too far"
  },
  "devices/Iot.Device.Mlx90614.html": {
    "href": "devices/Iot.Device.Mlx90614.html",
    "title": "Namespace Iot.Device.Mlx90614 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mlx90614 Classes Mlx90614 Infra Red Thermometer MLX90614"
  },
  "devices/Iot.Device.Mlx90614.Mlx90614.html": {
    "href": "devices/Iot.Device.Mlx90614.Mlx90614.html",
    "title": "Class Mlx90614 | nanoFramework Documentation",
    "keywords": "Class Mlx90614 Infra Red Thermometer MLX90614 Inheritance Object Mlx90614 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mlx90614 Assembly : Iot.Device.Mlx90614.dll Syntax [Interface(\"Infra Red Thermometer MLX90614\")] public sealed class Mlx90614 : IDisposable Constructors | Improve this Doc View Source Mlx90614(I2cDevice) Creates a new instance of the MLX90614 Declaration public Mlx90614(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Fields | Improve this Doc View Source DefaultI2cAddress MLX90614 Default I2C Address Declaration public const byte DefaultI2cAddress = 90 Field Value Type Description Byte Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() | Improve this Doc View Source ReadAmbientTemperature() Read ambient temperature from MLX90614 Declaration [Telemetry(\"AmbientTemperature\")] public Temperature ReadAmbientTemperature() Returns Type Description UnitsNet.Temperature Temperature | Improve this Doc View Source ReadObjectTemperature() Read surface temperature of object from MLX90614 Declaration [Telemetry(\"ObjectTemperature\")] public Temperature ReadObjectTemperature() Returns Type Description UnitsNet.Temperature Temperature Implements IDisposable"
  },
  "devices/Iot.Device.Mpr121.Channels.html": {
    "href": "devices/Iot.Device.Mpr121.Channels.html",
    "title": "Enum Channels | nanoFramework Documentation",
    "keywords": "Enum Channels Mpr121 channels Namespace : Iot.Device.Mpr121 Assembly : Iot.Device.Mpr121.dll Syntax public enum Channels Fields Name Description Channel00 Channel 0 Channel01 Channel 1 Channel02 Channel 2 Channel03 Channel 3 Channel04 Channel 4 Channel05 Channel 5 Channel06 Channel 6 Channel07 Channel 7 Channel08 Channel 8 Channel09 Channel 9 Channel10 Channel 10 Channel11 Channel 11"
  },
  "devices/Iot.Device.Mpr121.ChannelStatusesChanged.html": {
    "href": "devices/Iot.Device.Mpr121.ChannelStatusesChanged.html",
    "title": "Delegate ChannelStatusesChanged | nanoFramework Documentation",
    "keywords": "Delegate ChannelStatusesChanged Notifies about a the channel statuses have been changed. Refresh period can be changed by setting PeriodRefresh property. Namespace : Iot.Device.Mpr121 Assembly : Iot.Device.Mpr121.dll Syntax public delegate void ChannelStatusesChanged(object sender, ChannelStatusesChangedEventArgs e); Parameters Type Name Description Object sender The sender MPR121 ChannelStatusesChangedEventArgs e The even arguments"
  },
  "devices/Iot.Device.Mpr121.ChannelStatusesChangedEventArgs.html": {
    "href": "devices/Iot.Device.Mpr121.ChannelStatusesChangedEventArgs.html",
    "title": "Class ChannelStatusesChangedEventArgs | nanoFramework Documentation",
    "keywords": "Class ChannelStatusesChangedEventArgs Represents the arguments of event rising when the channel statuses have been changed. Inheritance Object EventArgs ChannelStatusesChangedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mpr121 Assembly : Iot.Device.Mpr121.dll Syntax public class ChannelStatusesChangedEventArgs : EventArgs Constructors | Improve this Doc View Source ChannelStatusesChangedEventArgs(Boolean[]) Initialize event arguments. Declaration public ChannelStatusesChangedEventArgs(bool[] channelStatuses) Parameters Type Name Description Boolean [] channelStatuses The channel statuses. Properties | Improve this Doc View Source ChannelStatuses The channel statuses. Declaration public bool[] ChannelStatuses { get; } Property Value Type Description Boolean []"
  },
  "devices/Iot.Device.Mpr121.html": {
    "href": "devices/Iot.Device.Mpr121.html",
    "title": "Namespace Iot.Device.Mpr121 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mpr121 Classes ChannelStatusesChangedEventArgs Represents the arguments of event rising when the channel statuses have been changed. Mpr121 Supports MPR121 Proximity Capacitive Touch Sensor Controller. Mpr121Configuration Configuration for registers listed on datasheet page 8. Enums Channels Mpr121 channels Delegates ChannelStatusesChanged Notifies about a the channel statuses have been changed. Refresh period can be changed by setting PeriodRefresh property."
  },
  "devices/Iot.Device.Mpr121.Mpr121.html": {
    "href": "devices/Iot.Device.Mpr121.Mpr121.html",
    "title": "Class Mpr121 | nanoFramework Documentation",
    "keywords": "Class Mpr121 Supports MPR121 Proximity Capacitive Touch Sensor Controller. Inheritance Object Mpr121 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mpr121 Assembly : Iot.Device.Mpr121.dll Syntax public class Mpr121 : IDisposable Constructors | Improve this Doc View Source Mpr121(I2cDevice, Int32, Mpr121Configuration) Initialize a MPR121 controller. Declaration public Mpr121(I2cDevice i2cDevice, int periodRefresh = -1, Mpr121Configuration configuration = null) Parameters Type Name Description I2cDevice i2cDevice The i2c device. Int32 periodRefresh The period in milliseconds of refresing the channel statuses. Mpr121Configuration configuration The controller configuration. Fields | Improve this Doc View Source DefaultI2cAddress MPR121 Default I2C Address. Declaration public static readonly byte DefaultI2cAddress Field Value Type Description Byte Properties | Improve this Doc View Source PeriodRefresh Gets or sets the period in milliseconds to refresh the channels statuses. Declaration public int PeriodRefresh { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source ReadChannelStatus(Channels) Reads the channel status of MPR121 controller. Declaration public bool ReadChannelStatus(Channels channel) Parameters Type Name Description Channels channel The channel to read status. Returns Type Description Boolean | Improve this Doc View Source ReadChannelStatuses() Reads the channel statuses of MPR121 controller. Declaration public bool[] ReadChannelStatuses() Returns Type Description Boolean [] Events | Improve this Doc View Source ChannelStatusesChanged Notifies about a the channel statuses have been changed. Refresh period can be changed by setting PeriodRefresh property. Declaration public event ChannelStatusesChanged ChannelStatusesChanged Event Type Type Description ChannelStatusesChanged Implements IDisposable"
  },
  "devices/Iot.Device.Mpr121.Mpr121Configuration.html": {
    "href": "devices/Iot.Device.Mpr121.Mpr121Configuration.html",
    "title": "Class Mpr121Configuration | nanoFramework Documentation",
    "keywords": "Class Mpr121Configuration Configuration for registers listed on datasheet page 8. Inheritance Object Mpr121Configuration Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mpr121 Assembly : Iot.Device.Mpr121.dll Syntax public class Mpr121Configuration Properties | Improve this Doc View Source ChargeDischargeTimeConfiguration Filter/Global Charge Discharge Time Configuration (datasheet page 14). Declaration public byte ChargeDischargeTimeConfiguration { get; set; } Property Value Type Description Byte | Improve this Doc View Source ElectrodeConfiguration Electrode Configuration (datasheet page 15). Declaration public byte ElectrodeConfiguration { get; set; } Property Value Type Description Byte | Improve this Doc View Source ElectrodeReleaseThreshold Electrode release threshold. Declaration public byte ElectrodeReleaseThreshold { get; set; } Property Value Type Description Byte | Improve this Doc View Source ElectrodeTouchThreshold Electrode touch threshold. Declaration public byte ElectrodeTouchThreshold { get; set; } Property Value Type Description Byte | Improve this Doc View Source FilterDelayCountLimitFalling Determines the operation rate of the filter. A larger count limit means the filter delay is operating more slowly (falling). Declaration public byte FilterDelayCountLimitFalling { get; set; } Property Value Type Description Byte | Improve this Doc View Source FilterDelayCountLimitRising Determines the operation rate of the filter. A larger count limit means the filter delay is operating more slowly (rising). Declaration public byte FilterDelayCountLimitRising { get; set; } Property Value Type Description Byte | Improve this Doc View Source MaxHalfDeltaFalling Determines the largest magnitude of variation to pass through the baseline filter (falling). Declaration public byte MaxHalfDeltaFalling { get; set; } Property Value Type Description Byte | Improve this Doc View Source MaxHalfDeltaRising Determines the largest magnitude of variation to pass through the baseline filter (rising). Declaration public byte MaxHalfDeltaRising { get; set; } Property Value Type Description Byte | Improve this Doc View Source NoiseCountLimitFalling Determines the number of samples consecutively greater than the Max Half Delta value (falling). This is necessary to determine that it is not noise. Declaration public byte NoiseCountLimitFalling { get; set; } Property Value Type Description Byte | Improve this Doc View Source NoiseCountLimitRising Determines the number of samples consecutively greater than the Max Half Delta value (rising). This is necessary to determine that it is not noise. Declaration public byte NoiseCountLimitRising { get; set; } Property Value Type Description Byte | Improve this Doc View Source NoiseHalfDeltaFalling Determines the incremental change when non-noise drift is detected (falling). Declaration public byte NoiseHalfDeltaFalling { get; set; } Property Value Type Description Byte | Improve this Doc View Source NoiseHalfDeltaRising Determines the incremental change when non-noise drift is detected (rising). Declaration public byte NoiseHalfDeltaRising { get; set; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Mpu6886.AccelerometerLowPowerMode.html": {
    "href": "devices/Iot.Device.Mpu6886.AccelerometerLowPowerMode.html",
    "title": "Enum AccelerometerLowPowerMode | nanoFramework Documentation",
    "keywords": "Enum AccelerometerLowPowerMode Averaging filter settings for Low Power Accelerometer mode. (Datasheet page 37) Namespace : Iot.Device.Mpu6886 Assembly : Iot.Device.Mpu6886.dll Syntax public enum AccelerometerLowPowerMode Fields Name Description Average16Samples Average of 16 samples. Average32Samples Average of 32 samples. Average4Samples Average of 4 samples. Average8Samples Average of 8 samples."
  },
  "devices/Iot.Device.Mpu6886.AccelerometerScale.html": {
    "href": "devices/Iot.Device.Mpu6886.AccelerometerScale.html",
    "title": "Enum AccelerometerScale | nanoFramework Documentation",
    "keywords": "Enum AccelerometerScale Accelerometer scale. (Datasheet page 37) Namespace : Iot.Device.Mpu6886 Assembly : Iot.Device.Mpu6886.dll Syntax public enum AccelerometerScale Fields Name Description Scale16G +- 16G Scale2G +- 2G Scale4G +- 4G Scale8G +- 8G"
  },
  "devices/Iot.Device.Mpu6886.EnabledAxis.html": {
    "href": "devices/Iot.Device.Mpu6886.EnabledAxis.html",
    "title": "Enum EnabledAxis | nanoFramework Documentation",
    "keywords": "Enum EnabledAxis Axes to enable Namespace : Iot.Device.Mpu6886 Assembly : Iot.Device.Mpu6886.dll Syntax [Flags] public enum EnabledAxis Fields Name Description AccelerometerX Accelerometer X axis. AccelerometerY Accelerometer Y axis. AccelerometerZ Accelerometer Z axis. GyroscopeX Gyroscope X axis. GyroscopeY Gyroscope Y axis. GyroscopeZ Gyroscope Z axis."
  },
  "devices/Iot.Device.Mpu6886.GyroscopeScale.html": {
    "href": "devices/Iot.Device.Mpu6886.GyroscopeScale.html",
    "title": "Enum GyroscopeScale | nanoFramework Documentation",
    "keywords": "Enum GyroscopeScale Gyroscope scale. (Datasheet page 37) Namespace : Iot.Device.Mpu6886 Assembly : Iot.Device.Mpu6886.dll Syntax public enum GyroscopeScale Fields Name Description Scale1000dps +- 1000 dps Scale2000dps +- 2000 dps Scale250dps +- 250 dps Scale500dps +- 500 dps"
  },
  "devices/Iot.Device.Mpu6886.html": {
    "href": "devices/Iot.Device.Mpu6886.html",
    "title": "Namespace Iot.Device.Mpu6886 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Mpu6886 Classes Mpu6886AccelerometerGyroscope Mpu6886 accelerometer and gyroscope Enums AccelerometerLowPowerMode Averaging filter settings for Low Power Accelerometer mode. (Datasheet page 37) AccelerometerScale Accelerometer scale. (Datasheet page 37) EnabledAxis Axes to enable GyroscopeScale Gyroscope scale. (Datasheet page 37) InterruptEnable WoM interrupt on axes of accelerometer."
  },
  "devices/Iot.Device.Mpu6886.InterruptEnable.html": {
    "href": "devices/Iot.Device.Mpu6886.InterruptEnable.html",
    "title": "Enum InterruptEnable | nanoFramework Documentation",
    "keywords": "Enum InterruptEnable WoM interrupt on axes of accelerometer. Namespace : Iot.Device.Mpu6886 Assembly : Iot.Device.Mpu6886.dll Syntax [Flags] public enum InterruptEnable Fields Name Description None All axes disabled. Xaxis Enable X axis. Yaxis Enable Y axis. Zaxis Enable Z axis."
  },
  "devices/Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.html": {
    "href": "devices/Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.html",
    "title": "Class Mpu6886AccelerometerGyroscope | nanoFramework Documentation",
    "keywords": "Class Mpu6886AccelerometerGyroscope Mpu6886 accelerometer and gyroscope Inheritance Object Mpu6886AccelerometerGyroscope Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Mpu6886 Assembly : Iot.Device.Mpu6886.dll Syntax [Interface(\"Mpu6886 accelerometer and gyroscope\")] public class Mpu6886AccelerometerGyroscope : IDisposable Constructors | Improve this Doc View Source Mpu6886AccelerometerGyroscope(I2cDevice) Mpu6886 - Accelerometer and Gyroscope bus Declaration public Mpu6886AccelerometerGyroscope(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice Fields | Improve this Doc View Source DefaultI2cAddress The default I2C address for the MPU6886 sensor. (Datasheet page 49) Mind that the address can be configured as well for 0x69 depending upon the value driven on AD0 pin. Declaration public const int DefaultI2cAddress = 104 Field Value Type Description Int32 | Improve this Doc View Source SecondaryI2cAddress The secondary I2C address for the MPU6886 sensor. (Datasheet page 49) Declaration public const int SecondaryI2cAddress = 105 Field Value Type Description Int32 Properties | Improve this Doc View Source AccelerometerInterruptEnabled The axes on which the interrupt should be enabled. Declaration public InterruptEnable AccelerometerInterruptEnabled { get; set; } Property Value Type Description InterruptEnable | Improve this Doc View Source AccelerometerLowPowerMode Gets and sets the averaging filter settings for low power accelerometer mode. (Datasheet page 37) Declaration public AccelerometerLowPowerMode AccelerometerLowPowerMode { get; set; } Property Value Type Description AccelerometerLowPowerMode | Improve this Doc View Source AccelerometerScale Gets and sets the accelerometer full scale. (Datasheet page 37) Declaration public AccelerometerScale AccelerometerScale { get; set; } Property Value Type Description AccelerometerScale | Improve this Doc View Source EnabledAxes Sets the enabled axes of the gyroscope and accelerometer. (Datasheet page 47) Declaration public EnabledAxis EnabledAxes { get; set; } Property Value Type Description EnabledAxis | Improve this Doc View Source GyroscopeOffset Gets and sets the gyroscope offset in the GyroscopeOffsetAdjustment registers of the MPU6886. Setting the offset can be usefull when a custom callibration calculation is used, instead of the Calibrate function of this class. Declaration public Vector3 GyroscopeOffset { get; set; } Property Value Type Description Vector3 | Improve this Doc View Source GyroscopeScale Gets and sets the gyroscope full scale. (Datasheet page 37) Declaration public GyroscopeScale GyroscopeScale { get; set; } Property Value Type Description GyroscopeScale | Improve this Doc View Source SampleRateDivider Divides the internal sample rate (see register CONFIG) to generate the sample rate that controls sensor data output rate, FIFO sample rate. (Datasheet page 35) Declaration public byte SampleRateDivider { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Calibrate(Int32) Calibrate the gyroscope by calculating the offset values and storing them in the GyroscopeOffsetAdjustment registers of the MPU6886. Declaration public Vector3 Calibrate(int iterations) Parameters Type Name Description Int32 iterations The number of sample gyroscope values to read Returns Type Description Vector3 The calulated offset vector | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetAccelerometer() Reads the current accelerometer values from the registers, and compensates them with the accelerometer resolution. Declaration public Vector3 GetAccelerometer() Returns Type Description Vector3 Vector of acceleration | Improve this Doc View Source GetGyroscope() Reads the current gyroscope values from the registers, and compensates them with the gyroscope resolution. Declaration public Vector3 GetGyroscope() Returns Type Description Vector3 Vector of the rotation | Improve this Doc View Source GetInternalTemperature() Reads the register of the on-chip temperature sensor which represents the MPU-6886 die temperature. Declaration public Temperature GetInternalTemperature() Returns Type Description UnitsNet.Temperature Temperature in degrees Celcius | Improve this Doc View Source Reset() Reset the internal registers and restores the default settings. (Datasheet, page 47) Declaration public void Reset() | Improve this Doc View Source Sleep() Set the chip to sleep mode. (Datasheet, page 47) Declaration public void Sleep() | Improve this Doc View Source WakeUp() Disables the sleep mode. (Datasheet, page 47) Declaration public void WakeUp() Implements IDisposable"
  },
  "devices/Iot.Device.Multiplexing.CharlieplexSegment.html": {
    "href": "devices/Iot.Device.Multiplexing.CharlieplexSegment.html",
    "title": "Class CharlieplexSegment | nanoFramework Documentation",
    "keywords": "Class CharlieplexSegment Provides support for Charlieplex multiplexing. https://wikipedia.org/wiki/Charlieplexing Inheritance Object CharlieplexSegment Implements IOutputSegment IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Multiplexing Assembly : Iot.Device.Charlieplex.dll Syntax public class CharlieplexSegment : IOutputSegment, IDisposable Constructors | Improve this Doc View Source CharlieplexSegment(Int32[], Int32, GpioController, Boolean) Initializes a new Charlieplex type that can be use for multiplex over a relatively small number of GPIO pins. Declaration public CharlieplexSegment(int[] pins, int nodeCount = 0, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 [] pins The set of pins to use. Int32 nodeCount The count of nodes (like LEDs) that will be addressable. If 0, then the Charlieplex maximum is used for the pins provided (n^2-n). GpioController gpioController The GPIO Controller used for interrupt handling. Boolean shouldDispose True (the default) if the GPIO controller shall be disposed when disposing this instance. | Improve this Doc View Source CharlieplexSegment(Int32[], Int32, GpioController, Boolean) Initializes a new Charlieplex type that can be use for multiplex over a relatively small number of GPIO pins. Declaration public CharlieplexSegment(int[] pins, int nodeCount = 0, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 [] pins The set of pins to use. Int32 nodeCount The count of nodes (like LEDs) that will be addressable. If 0, then the Charlieplex maximum is used for the pins provided (n^2-n). GpioController gpioController The GPIO Controller used for interrupt handling. Boolean shouldDispose True (the default) if the GPIO controller shall be disposed when disposing this instance. Properties | Improve this Doc View Source Length The length of the segment; the number of GPIO pins it exposes. Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Length The length of the segment; the number of GPIO pins it exposes. Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source NodeCount The number of nodes (like LEDs) that can be addressed. Declaration public int NodeCount { get; } Property Value Type Description Int32 | Improve this Doc View Source NodeCount The number of nodes (like LEDs) that can be addressed. Declaration public int NodeCount { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Display(CancellationToken) Displays nodes in their current configuration for the specified duration. Declaration public void Display(CancellationToken token) Parameters Type Name Description CancellationToken token CancellationToken used to signal when method should exit. | Improve this Doc View Source Display(CancellationToken) Displays nodes in their current configuration for the specified duration. Declaration public void Display(CancellationToken token) Parameters Type Name Description CancellationToken token CancellationToken used to signal when method should exit. | Improve this Doc View Source Dispose() Cleanup. Failing to dispose this class, especially when callbacks are active, may lead to undefined behavior. Declaration public void Dispose() | Improve this Doc View Source Dispose() Cleanup. Failing to dispose this class, especially when callbacks are active, may lead to undefined behavior. Declaration public void Dispose() | Improve this Doc View Source GetNodes(Int32[], Int32) Provides the set of Charlie nodes given the set of pins and the count provided. If count = 0, then the Charlieplex maximum is used for the pins provided (n^2-n). Declaration public static CharlieplexSegmentNode[] GetNodes(int[] pins, int nodeCount = 0) Parameters Type Name Description Int32 [] pins The pins to use for the segment. Int32 nodeCount The number of nodes to use. Default is the Charlieplex maximum. Returns Type Description CharlieplexSegmentNode [] | Improve this Doc View Source GetNodes(Int32[], Int32) Provides the set of Charlie nodes given the set of pins and the count provided. If count = 0, then the Charlieplex maximum is used for the pins provided (n^2-n). Declaration public static CharlieplexSegmentNode[] GetNodes(int[] pins, int nodeCount = 0) Parameters Type Name Description Int32 [] pins The pins to use for the segment. Int32 nodeCount The number of nodes to use. Default is the Charlieplex maximum. Returns Type Description CharlieplexSegmentNode [] | Improve this Doc View Source Write(Int32, PinValue, TimeSpan) Write a PinValue to a node, to update Charlieplex segment. Address scheme is 0-based. Given 8 nodes, addresses would be 0-7. Displays nodes in their updated configuration for the specified duration. Declaration public void Write(int node, PinValue value, TimeSpan duration = default(TimeSpan)) Parameters Type Name Description Int32 node Node to update. PinValue value Value to write. TimeSpan duration Time to display segment, in milliseconds (default is 0; not displayed). | Improve this Doc View Source Write(Int32, PinValue, TimeSpan) Write a PinValue to a node, to update Charlieplex segment. Address scheme is 0-based. Given 8 nodes, addresses would be 0-7. Displays nodes in their updated configuration for the specified duration. Declaration public void Write(int node, PinValue value, TimeSpan duration = default(TimeSpan)) Parameters Type Name Description Int32 node Node to update. PinValue value Value to write. TimeSpan duration Time to display segment, in milliseconds (default is 0; not displayed). Explicit Interface Implementations | Improve this Doc View Source IOutputSegment.Display(CancellationToken) Displays current state of segment. Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring. Declaration void IOutputSegment.Display(CancellationToken token) Parameters Type Name Description CancellationToken token | Improve this Doc View Source IOutputSegment.Display(CancellationToken) Displays current state of segment. Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring. Declaration void IOutputSegment.Display(CancellationToken token) Parameters Type Name Description CancellationToken token | Improve this Doc View Source IOutputSegment.Item[Int32] Segment values. Declaration PinValue IOutputSegment.this[int index] { get; set; } Parameters Type Name Description Int32 index Returns Type Description PinValue | Improve this Doc View Source IOutputSegment.Item[Int32] Segment values. Declaration PinValue IOutputSegment.this[int index] { get; set; } Parameters Type Name Description Int32 index Returns Type Description PinValue | Improve this Doc View Source IOutputSegment.TurnOffAll() Clears shift register. Performs a latch. Declaration void IOutputSegment.TurnOffAll() | Improve this Doc View Source IOutputSegment.TurnOffAll() Clears shift register. Performs a latch. Declaration void IOutputSegment.TurnOffAll() | Improve this Doc View Source IOutputSegment.Write(Byte) Writes discrete underlying bits to a virtual segment. Writes each bit, left to right. Least significant bit will written to index 0. Does not display output. Declaration void IOutputSegment.Write(byte value) Parameters Type Name Description Byte value | Improve this Doc View Source IOutputSegment.Write(Byte) Writes discrete underlying bits to a virtual segment. Writes each bit, left to right. Least significant bit will written to index 0. Does not display output. Declaration void IOutputSegment.Write(byte value) Parameters Type Name Description Byte value | Improve this Doc View Source IOutputSegment.Write(Int32, PinValue) Writes a PinValue to a virtual segment. Does not display output. Declaration void IOutputSegment.Write(int index, PinValue value) Parameters Type Name Description Int32 index PinValue value | Improve this Doc View Source IOutputSegment.Write(Int32, PinValue) Writes a PinValue to a virtual segment. Does not display output. Declaration void IOutputSegment.Write(int index, PinValue value) Parameters Type Name Description Int32 index PinValue value | Improve this Doc View Source IOutputSegment.Write(SpanByte) Writes discrete underlying bits to a virtual output. Writes each byte, left to right. Least significant bit will written to index 0. Does not display output. Declaration void IOutputSegment.Write(SpanByte value) Parameters Type Name Description SpanByte value | Improve this Doc View Source IOutputSegment.Write(SpanByte) Writes discrete underlying bits to a virtual output. Writes each byte, left to right. Least significant bit will written to index 0. Does not display output. Declaration void IOutputSegment.Write(SpanByte value) Parameters Type Name Description SpanByte value Implements IOutputSegment IDisposable"
  },
  "devices/Iot.Device.Multiplexing.CharlieplexSegmentNode.html": {
    "href": "devices/Iot.Device.Multiplexing.CharlieplexSegmentNode.html",
    "title": "Struct CharlieplexSegmentNode | nanoFramework Documentation",
    "keywords": "Struct CharlieplexSegmentNode Represents a node in a Charlieplexed circuit. https://wikipedia.org/wiki/Charlieplexing Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Iot.Device.Multiplexing Assembly : Iot.Device.Charlieplex.dll Syntax public struct CharlieplexSegmentNode Fields | Improve this Doc View Source Anode Anode leg (power) for a device/load Declaration public int Anode Field Value Type Description Int32 | Improve this Doc View Source Anode Anode leg (power) for a device/load Declaration public int Anode Field Value Type Description Int32 | Improve this Doc View Source Cathode Cathode leg (ground) for a device/load Declaration public int Cathode Field Value Type Description Int32 | Improve this Doc View Source Cathode Cathode leg (ground) for a device/load Declaration public int Cathode Field Value Type Description Int32 | Improve this Doc View Source Value Value of node Declaration public PinValue Value Field Value Type Description PinValue | Improve this Doc View Source Value Value of node Declaration public PinValue Value Field Value Type Description PinValue"
  },
  "devices/Iot.Device.Multiplexing.GpioOutputSegment.html": {
    "href": "devices/Iot.Device.Multiplexing.GpioOutputSegment.html",
    "title": "Class GpioOutputSegment | nanoFramework Documentation",
    "keywords": "Class GpioOutputSegment IOutputSegment implementation that uses GpioController. Inheritance Object GpioOutputSegment Implements IOutputSegment IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Multiplexing Assembly : Iot.Device.Multiplexing.dll Syntax public class GpioOutputSegment : IOutputSegment, IDisposable Constructors | Improve this Doc View Source GpioOutputSegment(Int32[], GpioController, Boolean) IOutputSegment implementation that uses GpioController. Declaration public GpioOutputSegment(int[] pins, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 [] pins The GPIO pins that should be used and are connected. GpioController gpioController The GpioController to use. If one isn't provided, one will be created. Boolean shouldDispose The policy to use (true, by default) for disposing the GPIO controller when disposing this instance. Properties | Improve this Doc View Source Item[Int32] Segment values. Declaration public PinValue this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description PinValue | Improve this Doc View Source Length The length of the segment; the number of GPIO pins it exposes. Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Display(CancellationToken) Displays current state of segment. Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring. Declaration public void Display(CancellationToken token) Parameters Type Name Description CancellationToken token | Improve this Doc View Source Dispose() Disposes the underlying GpioController. Declaration public void Dispose() | Improve this Doc View Source TurnOffAll() Writes a byte to the underlying GpioController. Declaration public void TurnOffAll() | Improve this Doc View Source Write(Byte) Writes discrete underlying bits to a virtual segment. Writes each bit, left to right. Least significant bit will written to index 0. Does not display output. Declaration public void Write(byte value) Parameters Type Name Description Byte value | Improve this Doc View Source Write(Int32, PinValue) Writes a PinValue to a virtual segment. Does not display output. Declaration public void Write(int pin, PinValue value) Parameters Type Name Description Int32 pin PinValue value | Improve this Doc View Source Write(SpanByte) Writes discrete underlying bits to a virtual segment. Writes each byte, left to right. Least significant bit will written to index 0. Does not display output. Declaration public void Write(SpanByte value) Parameters Type Name Description SpanByte value Implements IOutputSegment IDisposable"
  },
  "devices/Iot.Device.Multiplexing.html": {
    "href": "devices/Iot.Device.Multiplexing.html",
    "title": "Namespace Iot.Device.Multiplexing | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Multiplexing Classes CharlieplexSegment Provides support for Charlieplex multiplexing. https://wikipedia.org/wiki/Charlieplexing GpioOutputSegment IOutputSegment implementation that uses GpioController. Mbi5027 MBI5027 16-Bit shift register With 3-State output register and error detection. Supports SPI and GPIO control. ShiftRegister Generic shift register implementation. Supports multiple register lengths. Compatible with SN74HC595, MBI5027 and MBI5168, for example. Supports SPI and GPIO control. Sn74hc595 SN74HC595 8-Bit Shift Registers With 3-State Output Registers Supports SPI and GPIO control Structs CharlieplexSegmentNode Represents a node in a Charlieplexed circuit. https://wikipedia.org/wiki/Charlieplexing Mbi5027PinMapping Represents pin bindings for the MBI5027. ShiftRegisterPinMapping Represents pin mappings for the ShiftRegister binding. Requires specifying 3 pins (serial data in, data clock, and latch). Can specify output enable pin (otherwise, wire to ground). Sn74hc595PinMapping Represents pin mapping for the Sn74hc595 binding. Requires specifying at least three pins (serial data in, data clock, and latch). The other two pins (output enable and shift register clear) should either be specified or separately wired. Interfaces IOutputSegment Abstracts a segment of outputs from multiplexing sources (like a shift register)."
  },
  "devices/Iot.Device.Multiplexing.IOutputSegment.html": {
    "href": "devices/Iot.Device.Multiplexing.IOutputSegment.html",
    "title": "Interface IOutputSegment | nanoFramework Documentation",
    "keywords": "Interface IOutputSegment Abstracts a segment of outputs from multiplexing sources (like a shift register). Inherited Members IDisposable.Dispose() Namespace : Iot.Device.Multiplexing Assembly : Iot.Device.Multiplexing.dll Syntax public interface IOutputSegment : IDisposable Properties | Improve this Doc View Source Item[Int32] Segment values. Declaration PinValue this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description PinValue | Improve this Doc View Source Length Length of segment (number of outputs) Declaration int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Display(CancellationToken) Displays current state of segment. Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring. Declaration void Display(CancellationToken token) Parameters Type Name Description CancellationToken token | Improve this Doc View Source TurnOffAll() Turns off all outputs. Declaration void TurnOffAll() | Improve this Doc View Source Write(Byte) Writes discrete underlying bits to a virtual segment. Writes each bit, left to right. Least significant bit will written to index 0. Does not display output. Declaration void Write(byte value) Parameters Type Name Description Byte value | Improve this Doc View Source Write(Int32, PinValue) Writes a PinValue to a virtual segment. Does not display output until calling Display() or Display(CancellationToken ct) methods. Declaration void Write(int index, PinValue value) Parameters Type Name Description Int32 index PinValue value | Improve this Doc View Source Write(SpanByte) Writes discrete underlying bits to a virtual output. Writes each byte, left to right. Least significant bit will written to index 0. Does not display output. Declaration void Write(SpanByte value) Parameters Type Name Description SpanByte value"
  },
  "devices/Iot.Device.Multiplexing.Mbi5027.html": {
    "href": "devices/Iot.Device.Multiplexing.Mbi5027.html",
    "title": "Class Mbi5027 | nanoFramework Documentation",
    "keywords": "Class Mbi5027 MBI5027 16-Bit shift register With 3-State output register and error detection. Supports SPI and GPIO control. Inheritance Object ShiftRegister Mbi5027 Implements IOutputSegment IDisposable Inherited Members ShiftRegister.GpioController ShiftRegister.SpiDevice ShiftRegister.BitLength ShiftRegister.UsesSpi ShiftRegister.UsesGpio ShiftRegister.ShiftClear() ShiftRegister.ShiftBit(PinValue) ShiftRegister.ShiftByte(Byte, Boolean) ShiftRegister.Latch() ShiftRegister.OutputEnable ShiftRegister.Dispose() ShiftRegister.Length ShiftRegister.IOutputSegment.Item[Int32] ShiftRegister.IOutputSegment.Write(Int32, PinValue) ShiftRegister.Write(Byte) ShiftRegister.Write(SpanByte) ShiftRegister.IOutputSegment.TurnOffAll() ShiftRegister.IOutputSegment.Display(CancellationToken) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Multiplexing Assembly : Iot.Device.Mbi5027.dll Syntax public class Mbi5027 : ShiftRegister, IOutputSegment, IDisposable Constructors | Improve this Doc View Source Mbi5027(Mbi5027PinMapping, Int32, GpioController, Boolean) Initialize a new shift register connected through GPIO. Declaration public Mbi5027(Mbi5027PinMapping pinMapping, int bitLength = 16, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Mbi5027PinMapping pinMapping The pin mapping to use by the binding. Int32 bitLength Bit length of register, including chained registers. Default is 16 bits. GpioController gpioController The GPIO Controller used for interrupt handling. Boolean shouldDispose Option (true by default) to dispose the GPIO controller when disposing this instance. | Improve this Doc View Source Mbi5027(SpiDevice, Int32) Initializes a new shift register device connected through SPI. Uses 3 pins (SDI -> SDI, SCLK -> SCLK, CE0 -> LE) Declaration public Mbi5027(SpiDevice spiDevice, int bitLength = 16) Parameters Type Name Description SpiDevice spiDevice SpiDevice used for serial communication. Int32 bitLength Bit length of register, including chained registers. Default is 8 bits. Methods | Improve this Doc View Source EnableDetectionMode() Enable open/short eror detection mode. Requires use of GPIO controller. Declaration public void EnableDetectionMode() | Improve this Doc View Source EnableNormalMode() Enable normal mode. Requires use of GPIO controller. Declaration public void EnableNormalMode() | Improve this Doc View Source ReadOutputErrorStatus() Read output error status. Requires use of GPIO controller. Declaration public PinValue[] ReadOutputErrorStatus() Returns Type Description PinValue [] Implements IOutputSegment IDisposable"
  },
  "devices/Iot.Device.Multiplexing.Mbi5027PinMapping.html": {
    "href": "devices/Iot.Device.Multiplexing.Mbi5027PinMapping.html",
    "title": "Struct Mbi5027PinMapping | nanoFramework Documentation",
    "keywords": "Struct Mbi5027PinMapping Represents pin bindings for the MBI5027. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Iot.Device.Multiplexing Assembly : Iot.Device.Mbi5027.dll Syntax public struct Mbi5027PinMapping Constructors | Improve this Doc View Source Mbi5027PinMapping(Int32, Int32, Int32, Int32, Int32) Declaration public Mbi5027PinMapping(int sdi, int clk, int le, int oe = -1, int sdo = -1) Parameters Type Name Description Int32 sdi Serial data in pin Int32 clk Shift register pin (shift to data register) Int32 le Register clock pin (latch) Int32 oe Output enable pin Int32 sdo Serial data out pin -- required for open circuit detection Properties | Improve this Doc View Source Clk Clk (data register clock) pin number. Declaration public int Clk { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source Complete Complete pin bindings for the MBI5027. Declaration public static readonly Mbi5027PinMapping Complete { get; } Property Value Type Description Mbi5027PinMapping | Improve this Doc View Source LE LE (shift register clock/latch) pin. Declaration public int LE { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source Minimal Minimal pin bindings for the MBI5027. Declaration public static readonly Mbi5027PinMapping Minimal { get; } Property Value Type Description Mbi5027PinMapping | Improve this Doc View Source OE OE (output enable) pin . Declaration public int OE { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source Sdi Serial data in pin. Declaration public int Sdi { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source Sdo Serial data out pin. Only used (directly) for open circuit detection. Declaration public int Sdo { readonly get; set; } Property Value Type Description Int32"
  },
  "devices/Iot.Device.Multiplexing.ShiftRegister.html": {
    "href": "devices/Iot.Device.Multiplexing.ShiftRegister.html",
    "title": "Class ShiftRegister | nanoFramework Documentation",
    "keywords": "Class ShiftRegister Generic shift register implementation. Supports multiple register lengths. Compatible with SN74HC595, MBI5027 and MBI5168, for example. Supports SPI and GPIO control. Inheritance Object ShiftRegister Mbi5027 Sn74hc595 Implements IOutputSegment IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Multiplexing Assembly : Iot.Device.Sn74hc595.dll Syntax public class ShiftRegister : IOutputSegment, IDisposable Constructors | Improve this Doc View Source ShiftRegister(ShiftRegisterPinMapping, Int32, GpioController, Boolean) Initialize a new shift register connected through GPIO. Declaration public ShiftRegister(ShiftRegisterPinMapping pinMapping, int bitLength, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description ShiftRegisterPinMapping pinMapping The pin mapping to use by the binding. Int32 bitLength Bit length of register, including chained registers. GpioController gpioController The GPIO Controller used for interrupt handling. Boolean shouldDispose True (the default) if the GPIO controller shall be disposed when disposing this instance. | Improve this Doc View Source ShiftRegister(SpiDevice, Int32) Initialize a new shift register device connected through SPI. Uses 3 pins (SDI -> SDI, SCLK -> SCLK, CE0 -> LE) Declaration public ShiftRegister(SpiDevice spiDevice, int bitLength) Parameters Type Name Description SpiDevice spiDevice SpiDevice used for serial communication. Int32 bitLength Bit length of register, including chained registers. Properties | Improve this Doc View Source BitLength Bit length across all connected registers. Declaration public int BitLength { get; } Property Value Type Description Int32 | Improve this Doc View Source GpioController GPIO controller. Declaration protected GpioController GpioController { get; } Property Value Type Description GpioController | Improve this Doc View Source Length The length of the segment; the number of GPIO pins it exposes. Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source OutputEnable Switch output register to high or low-impedance state. Enables or disables register outputs, but does not delete values. Requires use of GPIO controller. Declaration public bool OutputEnable { set; } Property Value Type Description Boolean | Improve this Doc View Source SpiDevice SPI device. Declaration protected SpiDevice SpiDevice { get; } Property Value Type Description SpiDevice | Improve this Doc View Source UsesGpio Reports if shift register is connected with GPIO. Declaration public bool UsesGpio { get; } Property Value Type Description Boolean | Improve this Doc View Source UsesSpi Reports if shift register is connected with SPI. Declaration public bool UsesSpi { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose() Cleanup. Failing to dispose this class, especially when callbacks are active, may lead to undefined behavior. Declaration public void Dispose() | Improve this Doc View Source Latch() Latches values in data register to output pi. Requires use of GPIO controller. Declaration public void Latch() | Improve this Doc View Source ShiftBit(PinValue) Writes PinValue value to storage register. This will shift existing values to the next storage slot. Does not latch. Requires use of GPIO controller. Declaration public void ShiftBit(PinValue value) Parameters Type Name Description PinValue value | Improve this Doc View Source ShiftByte(Byte, Boolean) Shifts a byte -- 8 bits -- to the storage register. Assumes register bit length evenly divisible by 8. Pushes / overwrites any existing values. Latches by default. Declaration public void ShiftByte(byte value, bool latch = true) Parameters Type Name Description Byte value Boolean latch | Improve this Doc View Source ShiftClear() Shifts zeros. Will dim all connected LEDs, for example. Assumes register bit length evenly divisible by 8. Supports GPIO controller or SPI device. Declaration public void ShiftClear() | Improve this Doc View Source Write(Byte) Writes discrete underlying bits to a virtual segment. Writes each bit, left to right. Least significant bit will written to index 0. Does not display output. Declaration public void Write(byte value) Parameters Type Name Description Byte value | Improve this Doc View Source Write(SpanByte) Writes discrete underlying bits to a virtual output. Writes each byte, left to right. Least significant bit will written to index 0. Does not display output. Declaration public void Write(SpanByte value) Parameters Type Name Description SpanByte value Explicit Interface Implementations | Improve this Doc View Source IOutputSegment.Display(CancellationToken) Displays current state of segment. Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring. Declaration void IOutputSegment.Display(CancellationToken token) Parameters Type Name Description CancellationToken token | Improve this Doc View Source IOutputSegment.Item[Int32] Segment values. Declaration PinValue IOutputSegment.this[int index] { get; set; } Parameters Type Name Description Int32 index Returns Type Description PinValue | Improve this Doc View Source IOutputSegment.TurnOffAll() Clears shift register. Performs a latch. Declaration void IOutputSegment.TurnOffAll() | Improve this Doc View Source IOutputSegment.Write(Int32, PinValue) Writes a PinValue to a virtual segment. Does not display output. Declaration void IOutputSegment.Write(int output, PinValue value) Parameters Type Name Description Int32 output PinValue value Implements IOutputSegment IDisposable"
  },
  "devices/Iot.Device.Multiplexing.ShiftRegisterPinMapping.html": {
    "href": "devices/Iot.Device.Multiplexing.ShiftRegisterPinMapping.html",
    "title": "Struct ShiftRegisterPinMapping | nanoFramework Documentation",
    "keywords": "Struct ShiftRegisterPinMapping Represents pin mappings for the ShiftRegister binding. Requires specifying 3 pins (serial data in, data clock, and latch). Can specify output enable pin (otherwise, wire to ground). Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Iot.Device.Multiplexing Assembly : Iot.Device.Sn74hc595.dll Syntax public struct ShiftRegisterPinMapping Constructors | Improve this Doc View Source ShiftRegisterPinMapping(Int32, Int32, Int32, Int32) Declaration public ShiftRegisterPinMapping(int serialData, int clock, int latchEnable, int outputEnable = -1) Parameters Type Name Description Int32 serialData Serial data in pin Int32 clock Shift register clock pin Int32 latchEnable Register clock pin (latch) Int32 outputEnable Output enable pin Properties | Improve this Doc View Source Clock Storage register clock pin. Declaration public int Clock { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source Complete Complete pin bindings for ShiftRegister. Declaration public static readonly ShiftRegisterPinMapping Complete { get; } Property Value Type Description ShiftRegisterPinMapping | Improve this Doc View Source LatchEnable Shift register clock pin. Declaration public int LatchEnable { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source Minimal Minimal pin bindings for ShiftRegister. Output enable should be wired to ground when using Minimal mapping. Declaration public static readonly ShiftRegisterPinMapping Minimal { get; } Property Value Type Description ShiftRegisterPinMapping | Improve this Doc View Source OutputEnable Output enable pin. Declaration public int OutputEnable { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source SerialDataInput Serial data in pin. Declaration public int SerialDataInput { readonly get; set; } Property Value Type Description Int32"
  },
  "devices/Iot.Device.Multiplexing.Sn74hc595.html": {
    "href": "devices/Iot.Device.Multiplexing.Sn74hc595.html",
    "title": "Class Sn74hc595 | nanoFramework Documentation",
    "keywords": "Class Sn74hc595 SN74HC595 8-Bit Shift Registers With 3-State Output Registers Supports SPI and GPIO control Inheritance Object ShiftRegister Sn74hc595 Implements IOutputSegment IDisposable Inherited Members ShiftRegister.GpioController ShiftRegister.SpiDevice ShiftRegister.BitLength ShiftRegister.UsesSpi ShiftRegister.UsesGpio ShiftRegister.ShiftClear() ShiftRegister.ShiftBit(PinValue) ShiftRegister.ShiftByte(Byte, Boolean) ShiftRegister.Latch() ShiftRegister.OutputEnable ShiftRegister.Dispose() ShiftRegister.Length ShiftRegister.IOutputSegment.Item[Int32] ShiftRegister.IOutputSegment.Write(Int32, PinValue) ShiftRegister.Write(Byte) ShiftRegister.Write(SpanByte) ShiftRegister.IOutputSegment.TurnOffAll() ShiftRegister.IOutputSegment.Display(CancellationToken) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Multiplexing Assembly : Iot.Device.Sn74hc595.dll Syntax public class Sn74hc595 : ShiftRegister, IOutputSegment, IDisposable Constructors | Improve this Doc View Source Sn74hc595(Sn74hc595PinMapping, Int32, GpioController, Boolean) Initialize a new shift register connected through GPIO. Declaration public Sn74hc595(Sn74hc595PinMapping pinMapping, int bitLength = 8, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Sn74hc595PinMapping pinMapping The pin mapping to use by the binding. Int32 bitLength Bit length of register, including chained registers. Default is 8 bits. GpioController gpioController The GPIO Controller used for interrupt handling. Boolean shouldDispose True (the default) if the GPIO controller shall be disposed when disposing this instance. Methods | Improve this Doc View Source ClearStorage(Boolean) Clear storage register. Requires use of GPIO controller. Declaration public void ClearStorage(bool latch = true) Parameters Type Name Description Boolean latch Implements IOutputSegment IDisposable"
  },
  "devices/Iot.Device.Multiplexing.Sn74hc595PinMapping.html": {
    "href": "devices/Iot.Device.Multiplexing.Sn74hc595PinMapping.html",
    "title": "Struct Sn74hc595PinMapping | nanoFramework Documentation",
    "keywords": "Struct Sn74hc595PinMapping Represents pin mapping for the Sn74hc595 binding. Requires specifying at least three pins (serial data in, data clock, and latch). The other two pins (output enable and shift register clear) should either be specified or separately wired. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : Iot.Device.Multiplexing Assembly : Iot.Device.Sn74hc595.dll Syntax public struct Sn74hc595PinMapping Constructors | Improve this Doc View Source Sn74hc595PinMapping(Int32, Int32, Int32, Int32, Int32) Declaration public Sn74hc595PinMapping(int ser, int srclk, int rclk, int oe = -1, int srclr = -1) Parameters Type Name Description Int32 ser Serial data pin Int32 srclk Shift register pin (shift to data register) Int32 rclk Register clock pin (latch) Int32 oe Output enable pin Int32 srclr Shift register clear pin (shift register is cleared) Properties | Improve this Doc View Source Complete Standard pin bindings for the Sn74hc595. Declaration public static readonly Sn74hc595PinMapping Complete { get; } Property Value Type Description Sn74hc595PinMapping | Improve this Doc View Source Minimal Minimal pin bindings for the Sn74hc595. Output enable should be wired to ground when using Minimal mapping. Shift register clear should be wired high when using Minimal mapping. Declaration public static readonly Sn74hc595PinMapping Minimal { get; } Property Value Type Description Sn74hc595PinMapping | Improve this Doc View Source OE OE (output enable) pin number. Declaration public int OE { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source RClk RCLK (latch) pin number. Declaration public int RClk { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source Ser SER (data) pin number. Declaration public int Ser { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source SrClk SRCLK (shift) pin number. Declaration public int SrClk { readonly get; set; } Property Value Type Description Int32 | Improve this Doc View Source SrClr SRCLR (clear register) pin number. Declaration public int SrClr { readonly get; set; } Property Value Type Description Int32"
  },
  "devices/Iot.Device.Multiplexing.Utility.html": {
    "href": "devices/Iot.Device.Multiplexing.Utility.html",
    "title": "Namespace Iot.Device.Multiplexing.Utility | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Multiplexing.Utility Classes VirtualOutputSegment Interface that abstracts multiplexing over a segment of outputs."
  },
  "devices/Iot.Device.Multiplexing.Utility.VirtualOutputSegment.html": {
    "href": "devices/Iot.Device.Multiplexing.Utility.VirtualOutputSegment.html",
    "title": "Class VirtualOutputSegment | nanoFramework Documentation",
    "keywords": "Class VirtualOutputSegment Interface that abstracts multiplexing over a segment of outputs. Inheritance Object VirtualOutputSegment Implements IOutputSegment IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Multiplexing.Utility Assembly : Iot.Device.Multiplexing.dll Syntax public sealed class VirtualOutputSegment : IOutputSegment, IDisposable Constructors | Improve this Doc View Source VirtualOutputSegment(Int32) A virtual implementation of IOutputSegment that manages the values of a set of virtual outputs. This type is intended as a helper to be used in IOutputSegment implementations. Declaration public VirtualOutputSegment(int length) Parameters Type Name Description Int32 length The number of outputs in the segment. Properties | Improve this Doc View Source Item[Int32] Segment values. Declaration public PinValue this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description PinValue | Improve this Doc View Source Length Length of segment (number of outputs). Declaration public int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Display(CancellationToken) Displays current state of segment. Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring. Declaration public void Display(CancellationToken token) Parameters Type Name Description CancellationToken token | Improve this Doc View Source Dispose() Disposes any native resources. Declaration public void Dispose() | Improve this Doc View Source TurnOffAll() Writes a Low PinValue to all outputs. Performs a latch. Declaration public void TurnOffAll() | Improve this Doc View Source Write(Byte) Writes discrete underlying bits to a virtual segment. Writes each bit, left to right. Least significant bit will written to index 0. Does not display output. Declaration public void Write(byte value) Parameters Type Name Description Byte value | Improve this Doc View Source Write(Int32, PinValue) Writes a PinValue to a virtual segment. Does not display output. Declaration public void Write(int output, PinValue value) Parameters Type Name Description Int32 output PinValue value | Improve this Doc View Source Write(SpanByte) Writes discrete underlying bits to a virtual output. Writes each byte, left to right. Least significant bit will written to index 0. Does not display output. Declaration public void Write(SpanByte value) Parameters Type Name Description SpanByte value Implements IOutputSegment IDisposable"
  },
  "devices/Iot.Device.Ndef.Doublet.html": {
    "href": "devices/Iot.Device.Ndef.Doublet.html",
    "title": "Class Doublet | nanoFramework Documentation",
    "keywords": "Class Doublet Doublet containing the start and size of the message Inheritance Object Doublet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax public class Doublet Constructors | Improve this Doc View Source Doublet(Int32, Int32) Constructor Declaration public Doublet(int b1, int b2) Parameters Type Name Description Int32 b1 Start Int32 b2 Size Properties | Improve this Doc View Source Size Size of the message Declaration public int Size { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Start Start of the message Declaration public int Start { get; set; } Property Value Type Description Int32"
  },
  "devices/Iot.Device.Ndef.GeneralePurposeByteConditions.html": {
    "href": "devices/Iot.Device.Ndef.GeneralePurposeByteConditions.html",
    "title": "Enum GeneralePurposeByteConditions | nanoFramework Documentation",
    "keywords": "Enum GeneralePurposeByteConditions This is used to assess the block sector and understand the read/write conditions Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax [Flags] public enum GeneralePurposeByteConditions Fields Name Description NoReadAccess No read access NoWriteAccess No write access ReadAccess Read access WriteAccess Write access"
  },
  "devices/Iot.Device.Ndef.GeoRecord.html": {
    "href": "devices/Iot.Device.Ndef.GeoRecord.html",
    "title": "Class GeoRecord | nanoFramework Documentation",
    "keywords": "Class GeoRecord Geo Record geo:latitude,longitude where both latitude and longitude are double with . for decimal point Inheritance Object NdefRecord UriRecord GeoRecord Inherited Members UriRecord.UriType UriRecord.Uri UriRecord.FullUri UriRecord.IsUriRecord(NdefRecord) NdefRecord.Header NdefRecord.Payload NdefRecord.Length NdefRecord.Serialize(SpanByte) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax public class GeoRecord : UriRecord Constructors | Improve this Doc View Source GeoRecord(NdefRecord) Create a Geo Record from a NDEF record Declaration public GeoRecord(NdefRecord ndefRecord) Parameters Type Name Description NdefRecord ndefRecord The NDEF record to create the Geo Record | Improve this Doc View Source GeoRecord(Double, Double) Create a Geo Record from a latitude and a longitude Declaration public GeoRecord(double latitude, double longitude) Parameters Type Name Description Double latitude Latitude Double longitude Longitude | Improve this Doc View Source GeoRecord(SpanByte) Create a Geo Record from a span of bytes Declaration public GeoRecord(SpanByte record) Parameters Type Name Description SpanByte record A raw span of byte containing the Geo Record Properties | Improve this Doc View Source Latitude The latitude Declaration public double Latitude { get; set; } Property Value Type Description Double | Improve this Doc View Source Longitude The longitude Declaration public double Longitude { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source IsGeoRecord(NdefRecord) Check if it's a valid NDEF Geo Record Declaration public static bool IsGeoRecord(NdefRecord ndefRecord) Parameters Type Name Description NdefRecord ndefRecord A valid NDEF Record Returns Type Description Boolean"
  },
  "devices/Iot.Device.Ndef.html": {
    "href": "devices/Iot.Device.Ndef.html",
    "title": "Namespace Iot.Device.Ndef | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ndef Classes Doublet Doublet containing the start and size of the message GeoRecord Geo Record geo:latitude,longitude where both latitude and longitude are double with . for decimal point MediaRecord Create a Media NDEF Record class NdefMessage Create a NDEF = NFC Data Exchange Format Message class NdefRecord Create a NDEF Record class RecordHeader Record header of NDEF message TextRecord Create a Text Record class UriRecord Create a Uri Record class Enums GeneralePurposeByteConditions This is used to assess the block sector and understand the read/write conditions MessageFlag Message flag TypeNameFormat The Type Name Format (TNF) UriType Uri type"
  },
  "devices/Iot.Device.Ndef.MediaRecord.html": {
    "href": "devices/Iot.Device.Ndef.MediaRecord.html",
    "title": "Class MediaRecord | nanoFramework Documentation",
    "keywords": "Class MediaRecord Create a Media NDEF Record class Inheritance Object NdefRecord MediaRecord Inherited Members NdefRecord.Header NdefRecord.Payload NdefRecord.Length NdefRecord.Serialize(SpanByte) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax public class MediaRecord : NdefRecord Constructors | Improve this Doc View Source MediaRecord(NdefRecord) Create a Media Record from a NDEF Record Declaration public MediaRecord(NdefRecord ndefRecord) Parameters Type Name Description NdefRecord ndefRecord A valid NDEF Record | Improve this Doc View Source MediaRecord(String, SpanByte) Create a Media Record from the type and the payload Declaration public MediaRecord(string payloadType, SpanByte payload) Parameters Type Name Description String payloadType The payload type SpanByte payload The byte payload Properties | Improve this Doc View Source IsTextType True if the payload is text based Declaration public bool IsTextType { get; } Property Value Type Description Boolean | Improve this Doc View Source PayloadType Returns the Media Payload type Declaration public string PayloadType { get; set; } Property Value Type Description String Methods | Improve this Doc View Source IsMediaRecord(NdefRecord) Check if it's a valid Media Record Declaration public static bool IsMediaRecord(NdefRecord ndefRecord) Parameters Type Name Description NdefRecord ndefRecord A valid NDEF Record Returns Type Description Boolean | Improve this Doc View Source TryGetPayloadAsText(out String) Try to get our the encoded text Declaration public bool TryGetPayloadAsText(out string payloadAsText) Parameters Type Name Description String payloadAsText The payload as a text Returns Type Description Boolean True if success"
  },
  "devices/Iot.Device.Ndef.MessageFlag.html": {
    "href": "devices/Iot.Device.Ndef.MessageFlag.html",
    "title": "Enum MessageFlag | nanoFramework Documentation",
    "keywords": "Enum MessageFlag Message flag Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax [Flags] public enum MessageFlag Fields Name Description ChunkFlag This is part of multi composed record IdLength Is the id length present or not MessageBegin The first record of a NDEF message MessageEnd The last record of a NDEF message ShortRecord Short message"
  },
  "devices/Iot.Device.Ndef.NdefMessage.html": {
    "href": "devices/Iot.Device.Ndef.NdefMessage.html",
    "title": "Class NdefMessage | nanoFramework Documentation",
    "keywords": "Class NdefMessage Create a NDEF = NFC Data Exchange Format Message class Inheritance Object NdefMessage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax public class NdefMessage Constructors | Improve this Doc View Source NdefMessage() Create an empty NDEF Message Declaration public NdefMessage() | Improve this Doc View Source NdefMessage(SpanByte) Create NDEF Message from a span of bytes Declaration public NdefMessage(SpanByte message) Parameters Type Name Description SpanByte message the message in span of bytes Fields | Improve this Doc View Source GeneralPurposeByteNdefVersion Associated with the GeneralPurposeByteConsitions, it tells if a sector is read/write and a valid NDEF sector Declaration public const byte GeneralPurposeByteNdefVersion = 64 Field Value Type Description Byte Properties | Improve this Doc View Source Length Get the length of the message Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Records List of all NDEF Records Declaration public ListNdefRecord Records { get; set; } Property Value Type Description ListNdefRecord Methods | Improve this Doc View Source ExtractMessage(SpanByte) Extract an NDEF message from a raw byte array Declaration public static byte[] ExtractMessage(SpanByte toExtract) Parameters Type Name Description SpanByte toExtract The byte array where the message is Returns Type Description Byte [] A byte array containing the message itself | Improve this Doc View Source GetStartSizeNdef(SpanByte) From a raw message, find the start and stop of an NDEF message Declaration public static Doublet GetStartSizeNdef(SpanByte toExtract) Parameters Type Name Description SpanByte toExtract The byte array where the message is Returns Type Description Doublet The start and end position | Improve this Doc View Source Serialize(SpanByte) Serialize the message in a span of bytes Declaration public void Serialize(SpanByte messageSerialized) Parameters Type Name Description SpanByte messageSerialized Span of bytes for the serialized message"
  },
  "devices/Iot.Device.Ndef.NdefRecord.html": {
    "href": "devices/Iot.Device.Ndef.NdefRecord.html",
    "title": "Class NdefRecord | nanoFramework Documentation",
    "keywords": "Class NdefRecord Create a NDEF Record class Inheritance Object NdefRecord MediaRecord TextRecord UriRecord Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax public class NdefRecord Constructors | Improve this Doc View Source NdefRecord() Create an empty NDEF Record, payload will be null Declaration public NdefRecord() | Improve this Doc View Source NdefRecord(SpanByte) Create a NDEF Record from a span of bytes Declaration public NdefRecord(SpanByte record) Parameters Type Name Description SpanByte record A span of bytes containing the NDEF Record | Improve this Doc View Source NdefRecord(SpanByte, RecordHeader) Create a NDEF Record from a Payload and a Header Declaration public NdefRecord(SpanByte payload, RecordHeader recordHeader = null) Parameters Type Name Description SpanByte payload The byte payload RecordHeader recordHeader A header, if not header specify, a default empty header will be created Properties | Improve this Doc View Source Header The record header Declaration public RecordHeader Header { get; } Property Value Type Description RecordHeader | Improve this Doc View Source Length The length of the NDEF Record Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Payload The record payload Declaration public byte[] Payload { get; } Property Value Type Description Byte [] Methods | Improve this Doc View Source Serialize(SpanByte) Serialize the NDEF Record Declaration public void Serialize(SpanByte record) Parameters Type Name Description SpanByte record The serialized record in a byte span"
  },
  "devices/Iot.Device.Ndef.RecordHeader.html": {
    "href": "devices/Iot.Device.Ndef.RecordHeader.html",
    "title": "Class RecordHeader | nanoFramework Documentation",
    "keywords": "Class RecordHeader Record header of NDEF message Inheritance Object RecordHeader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax public class RecordHeader Constructors | Improve this Doc View Source RecordHeader() Create a full empty Record Header Declaration public RecordHeader() | Improve this Doc View Source RecordHeader(SpanByte) Create a header from a span of bytes Declaration public RecordHeader(SpanByte recordToDecode) Parameters Type Name Description SpanByte recordToDecode A span of bytes Properties | Improve this Doc View Source IdLength Id Length Declaration public byte IdLength { get; } Property Value Type Description Byte | Improve this Doc View Source IsComposedMessage True if it's a composed message Declaration public bool IsComposedMessage { get; } Property Value Type Description Boolean | Improve this Doc View Source IsFirstMessage True if it's the first NDEF Record in the Message Declaration public bool IsFirstMessage { get; } Property Value Type Description Boolean | Improve this Doc View Source IsLastMessage True if it's the last NDEF Record in the Message Declaration public bool IsLastMessage { get; } Property Value Type Description Boolean | Improve this Doc View Source Length The Length of the Header Declaration public int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source MessageFlag Message flag Declaration public MessageFlag MessageFlag { get; set; } Property Value Type Description MessageFlag | Improve this Doc View Source PayloadId Payload Id Declaration public byte[] PayloadId { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source PayloadLength Payload length Declaration public uint PayloadLength { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source PayloadType Payload Type Declaration public byte[] PayloadType { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source PayloadTypeLength Length of the Payload Type Declaration public byte PayloadTypeLength { get; } Property Value Type Description Byte | Improve this Doc View Source TypeNameFormat Type of name format Declaration public TypeNameFormat TypeNameFormat { get; set; } Property Value Type Description TypeNameFormat Methods | Improve this Doc View Source Serialize(SpanByte) Serialize the header Declaration public void Serialize(SpanByte header) Parameters Type Name Description SpanByte header Serialized byte span"
  },
  "devices/Iot.Device.Ndef.TextRecord.html": {
    "href": "devices/Iot.Device.Ndef.TextRecord.html",
    "title": "Class TextRecord | nanoFramework Documentation",
    "keywords": "Class TextRecord Create a Text Record class Inheritance Object NdefRecord TextRecord Inherited Members NdefRecord.Header NdefRecord.Payload NdefRecord.Length NdefRecord.Serialize(SpanByte) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax public class TextRecord : NdefRecord Constructors | Improve this Doc View Source TextRecord(NdefRecord) Create a Text Record from a NDEF Record Declaration public TextRecord(NdefRecord ndefRecord) Parameters Type Name Description NdefRecord ndefRecord A valid NDEF Record | Improve this Doc View Source TextRecord(SpanByte) Create a Text Record from a span of bytes Declaration public TextRecord(SpanByte record) Parameters Type Name Description SpanByte record The record as a span of bytes | Improve this Doc View Source TextRecord(String, String, Encoding) Create a Text Record based on its characteristics Declaration public TextRecord(string text, string language, Encoding encoding) Parameters Type Name Description String text The text payload String language The language of the text Encoding encoding The Encoding type. Encoding Properties | Improve this Doc View Source Encoding The Encoding type used for the text, only UTF8 and Unicode are valid Declaration public Encoding Encoding { get; set; } Property Value Type Description Encoding | Improve this Doc View Source LanguageCode A valid language code, should be less than 63 characters Declaration public string LanguageCode { get; set; } Property Value Type Description String | Improve this Doc View Source Text The text payload Declaration public string Text { get; set; } Property Value Type Description String Methods | Improve this Doc View Source IsTextRecord(NdefRecord) Check if it's a valid Text Record Declaration public static bool IsTextRecord(NdefRecord ndefRecord) Parameters Type Name Description NdefRecord ndefRecord The NDEF Record to check Returns Type Description Boolean True if it's a valid Text Record"
  },
  "devices/Iot.Device.Ndef.TypeNameFormat.html": {
    "href": "devices/Iot.Device.Ndef.TypeNameFormat.html",
    "title": "Enum TypeNameFormat | nanoFramework Documentation",
    "keywords": "Enum TypeNameFormat The Type Name Format (TNF) Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax public enum TypeNameFormat Fields Name Description Empty Empty MediaType Media-type as defined in RFC 2046 [RFC 2046] NfcForumExternal NFC Forum external type [NFC RTD] NfcWellKnowType NFC Forum well-known type [NFC RTD] Reserved Reserved Unchanged Unchanged (see section 2.3.3) UniformResourceIdentifier Absolute URI as defined in RFC 3986 [RFC 3986] Unknown Unknown"
  },
  "devices/Iot.Device.Ndef.UriRecord.html": {
    "href": "devices/Iot.Device.Ndef.UriRecord.html",
    "title": "Class UriRecord | nanoFramework Documentation",
    "keywords": "Class UriRecord Create a Uri Record class Inheritance Object NdefRecord UriRecord GeoRecord Inherited Members NdefRecord.Header NdefRecord.Payload NdefRecord.Length NdefRecord.Serialize(SpanByte) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax public class UriRecord : NdefRecord Constructors | Improve this Doc View Source UriRecord(NdefRecord) Create a URI Record from a valid NDEF Record Declaration public UriRecord(NdefRecord ndefRecord) Parameters Type Name Description NdefRecord ndefRecord A valid NDEF Record | Improve this Doc View Source UriRecord(UriType, String) Create a Uri Record from a Uri Type and a Uri Declaration public UriRecord(UriType uriType, string uri) Parameters Type Name Description UriType uriType The Uri type String uri A Uri | Improve this Doc View Source UriRecord(SpanByte) Create a Uri Record from a span of bytes Declaration public UriRecord(SpanByte record) Parameters Type Name Description SpanByte record Record as a span of byte Properties | Improve this Doc View Source FullUri The full Uri Declaration public string FullUri { get; } Property Value Type Description String | Improve this Doc View Source Uri Uri to encode Declaration public string Uri { get; set; } Property Value Type Description String Remarks The Uri should be URL encoded to be valid in most cases. Consider encoding it. | Improve this Doc View Source UriType Uri Type Declaration public UriType UriType { get; set; } Property Value Type Description UriType Methods | Improve this Doc View Source IsUriRecord(NdefRecord) True if this is a valid URI Record Declaration public static bool IsUriRecord(NdefRecord ndefRecord) Parameters Type Name Description NdefRecord ndefRecord A valid NDEF Record Returns Type Description Boolean"
  },
  "devices/Iot.Device.Ndef.UriType.html": {
    "href": "devices/Iot.Device.Ndef.UriType.html",
    "title": "Enum UriType | nanoFramework Documentation",
    "keywords": "Enum UriType Uri type Namespace : Iot.Device.Ndef Assembly : Iot.Device.Ndef.dll Syntax public enum UriType Fields Name Description Btgoep btgoep:// Btl2Cap btl2cap:// Btspp btspp:// Dav dav:// File file:// Ftp ftp:// FtpAnonymousAnonymous ftp://anonymous:anonymous@ FtpFtp ftp://ftp. Ftps ftps:// Http http:// Https https:// HttpsWww https://www. HttpWww http://www. Imap imap: Irdaobex irdaobex:// MailTo mailto: News news: Nfs nfs:// NoFormat No prepending is done, and the URI field contains the unabridged URI. Pop pop: Rtsp rtsp:// Sftp sftp:// Sip sip: Sips sips: Smb smb:// Tcpobex tcpobex:// Tel tel: Telnet telnet:// Tftp tftp: Urn urn: UrnEpc urn:epc: UrnEpcId urn:epc:id: UrnEpcPat urn:epc:pat: UrnEpcRaw urn:epc:raw: UrnEpcTag urn:epc:tag: UrnNfc urn:nfc:"
  },
  "devices/Iot.Device.Nrf24l01.DataRate.html": {
    "href": "devices/Iot.Device.Nrf24l01.DataRate.html",
    "title": "Enum DataRate | nanoFramework Documentation",
    "keywords": "Enum DataRate nRF24L01 Send Data Rate Namespace : Iot.Device.Nrf24l01 Assembly : Iot.Device.Nrf24l01.dll Syntax public enum DataRate Fields Name Description Rate1Mbps 1Mbps Rate2Mbps 2Mbps"
  },
  "devices/Iot.Device.Nrf24l01.DataReceivedEventArgs.html": {
    "href": "devices/Iot.Device.Nrf24l01.DataReceivedEventArgs.html",
    "title": "Class DataReceivedEventArgs | nanoFramework Documentation",
    "keywords": "Class DataReceivedEventArgs nRF24L01 Data Received Event Args Inheritance Object EventArgs DataReceivedEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Nrf24l01 Assembly : Iot.Device.Nrf24l01.dll Syntax public class DataReceivedEventArgs : EventArgs Constructors | Improve this Doc View Source DataReceivedEventArgs(Byte[]) Constructs DataReceivedEventArgs instance Declaration public DataReceivedEventArgs(byte[] data) Parameters Type Name Description Byte [] data Data received Properties | Improve this Doc View Source Data nRF24L01 Received Data Declaration public byte[] Data { get; } Property Value Type Description Byte []"
  },
  "devices/Iot.Device.Nrf24l01.html": {
    "href": "devices/Iot.Device.Nrf24l01.html",
    "title": "Namespace Iot.Device.Nrf24l01 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Nrf24l01 Classes DataReceivedEventArgs nRF24L01 Data Received Event Args Nrf24l01 Single chip 2.4 GHz Transceiver nRF24L01 Nrf24l01Pipe nRF24L01 Receive Pipe Enums DataRate nRF24L01 Send Data Rate OutputPower nRF24l01 Output Power PowerMode nRF24L01 Power Mode WorkingMode nRF24L01 Working Mode Delegates Nrf24l01.DataReceivedHandle Delegate representing event that data was received"
  },
  "devices/Iot.Device.Nrf24l01.Nrf24l01.DataReceivedHandle.html": {
    "href": "devices/Iot.Device.Nrf24l01.Nrf24l01.DataReceivedHandle.html",
    "title": "Delegate Nrf24l01.DataReceivedHandle | nanoFramework Documentation",
    "keywords": "Delegate Nrf24l01.DataReceivedHandle Delegate representing event that data was received Namespace : Iot.Device.Nrf24l01 Assembly : Iot.Device.Nrf24l01.dll Syntax public delegate void DataReceivedHandle(object sender, DataReceivedEventArgs e); Parameters Type Name Description Object sender Object sending the event DataReceivedEventArgs e Arguments for the event"
  },
  "devices/Iot.Device.Nrf24l01.Nrf24l01.html": {
    "href": "devices/Iot.Device.Nrf24l01.Nrf24l01.html",
    "title": "Class Nrf24l01 | nanoFramework Documentation",
    "keywords": "Class Nrf24l01 Single chip 2.4 GHz Transceiver nRF24L01 Inheritance Object Nrf24l01 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Nrf24l01 Assembly : Iot.Device.Nrf24l01.dll Syntax public class Nrf24l01 : IDisposable Constructors | Improve this Doc View Source Nrf24l01(SpiDevice, Int32, Int32, Byte, Byte, OutputPower, DataRate, PinNumberingScheme, GpioController, Boolean) Creates a new instance of the nRF24L01. Declaration public Nrf24l01(SpiDevice sensor, int ce, int irq, byte packetSize, byte channel = 2, OutputPower outputPower = OutputPower.N00dBm, DataRate dataRate = DataRate.Rate2Mbps, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description SpiDevice sensor The communications channel to a device on a SPI bus Int32 ce CE Pin Int32 irq IRQ Pin Byte packetSize Receive Packet Size Byte channel Working Channel OutputPower outputPower Output Power DataRate dataRate Send Data Rate PinNumberingScheme pinNumberingScheme Pin Numbering Scheme GpioController gpioController GpioController related with operations on pins Boolean shouldDispose True to dispose the Gpio Controller Fields | Improve this Doc View Source SpiClockFrequency NRF24L01 SPI Clock Frequency Declaration public const int SpiClockFrequency = 2000000 Field Value Type Description Int32 | Improve this Doc View Source SpiMode NRF24L01 SPI Mode Declaration public const SpiMode SpiMode = SpiMode.Mode0 Field Value Type Description SpiMode Properties | Improve this Doc View Source Address nRF24L01 Send Address Declaration public byte[] Address { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source Channel nRF24L01 Working Channel Declaration public byte Channel { get; set; } Property Value Type Description Byte | Improve this Doc View Source DataRate nRF24L01 Send Rate Declaration public DataRate DataRate { get; set; } Property Value Type Description DataRate | Improve this Doc View Source OutputPower nRF24L01 Output Power Declaration public OutputPower OutputPower { get; set; } Property Value Type Description OutputPower | Improve this Doc View Source PacketSize nRF24L01 Receive Packet Size Declaration public byte PacketSize { get; set; } Property Value Type Description Byte | Improve this Doc View Source Pipe0 nRF24L01 Pipe 0 Declaration public Nrf24l01Pipe Pipe0 { get; } Property Value Type Description Nrf24l01Pipe | Improve this Doc View Source Pipe1 nRF24L01 Pipe 1 Declaration public Nrf24l01Pipe Pipe1 { get; } Property Value Type Description Nrf24l01Pipe | Improve this Doc View Source Pipe2 nRF24L01 Pipe 2 Declaration public Nrf24l01Pipe Pipe2 { get; } Property Value Type Description Nrf24l01Pipe | Improve this Doc View Source Pipe3 nRF24L01 Pipe 3 Declaration public Nrf24l01Pipe Pipe3 { get; } Property Value Type Description Nrf24l01Pipe | Improve this Doc View Source Pipe4 nRF24L01 Pipe 4 Declaration public Nrf24l01Pipe Pipe4 { get; } Property Value Type Description Nrf24l01Pipe | Improve this Doc View Source Pipe5 nRF24L01 Pipe 5 Declaration public Nrf24l01Pipe Pipe5 { get; } Property Value Type Description Nrf24l01Pipe | Improve this Doc View Source PowerMode nRF24L01 Power Mode Declaration public PowerMode PowerMode { get; set; } Property Value Type Description PowerMode | Improve this Doc View Source WorkingMode nRF24L01 Working Mode Declaration public WorkingMode WorkingMode { get; set; } Property Value Type Description WorkingMode Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() | Improve this Doc View Source Receive(Byte) Receive Declaration public SpanByte Receive(byte length) Parameters Type Name Description Byte length Packet Size Returns Type Description SpanByte Data | Improve this Doc View Source Send(Byte[]) Send Declaration public void Send(byte[] data) Parameters Type Name Description Byte [] data Send Data Events | Improve this Doc View Source DataReceived Triggering when data was received Declaration public event Nrf24l01.DataReceivedHandle DataReceived Event Type Type Description Nrf24l01.DataReceivedHandle Implements IDisposable"
  },
  "devices/Iot.Device.Nrf24l01.Nrf24l01Pipe.html": {
    "href": "devices/Iot.Device.Nrf24l01.Nrf24l01Pipe.html",
    "title": "Class Nrf24l01Pipe | nanoFramework Documentation",
    "keywords": "Class Nrf24l01Pipe nRF24L01 Receive Pipe Inheritance Object Nrf24l01Pipe Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Nrf24l01 Assembly : Iot.Device.Nrf24l01.dll Syntax public class Nrf24l01Pipe Constructors | Improve this Doc View Source Nrf24l01Pipe(Nrf24l01, Byte) Creates a new instance of the Nrf24l01Pipe Declaration public Nrf24l01Pipe(Nrf24l01 nrf, byte pipeID) Parameters Type Name Description Nrf24l01 nrf nRF24L01 Byte pipeID Pipe ID Properties | Improve this Doc View Source Address Receive Pipe Address Declaration public byte[] Address { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source AutoAck Auto Acknowledgment Declaration public bool AutoAck { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Enable Enable Pipe Declaration public bool Enable { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Payload Receive Pipe Payload Declaration public byte Payload { get; set; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Nrf24l01.OutputPower.html": {
    "href": "devices/Iot.Device.Nrf24l01.OutputPower.html",
    "title": "Enum OutputPower | nanoFramework Documentation",
    "keywords": "Enum OutputPower nRF24l01 Output Power Namespace : Iot.Device.Nrf24l01 Assembly : Iot.Device.Nrf24l01.dll Syntax public enum OutputPower Fields Name Description N00dBm 0dBm N06dBm -6dBm N12dBm -12dBm N18dBm -18dBm"
  },
  "devices/Iot.Device.Nrf24l01.PowerMode.html": {
    "href": "devices/Iot.Device.Nrf24l01.PowerMode.html",
    "title": "Enum PowerMode | nanoFramework Documentation",
    "keywords": "Enum PowerMode nRF24L01 Power Mode Namespace : Iot.Device.Nrf24l01 Assembly : Iot.Device.Nrf24l01.dll Syntax public enum PowerMode Fields Name Description DOWN nRF24L01 Off UP nRF24L01 On"
  },
  "devices/Iot.Device.Nrf24l01.WorkingMode.html": {
    "href": "devices/Iot.Device.Nrf24l01.WorkingMode.html",
    "title": "Enum WorkingMode | nanoFramework Documentation",
    "keywords": "Enum WorkingMode nRF24L01 Working Mode Namespace : Iot.Device.Nrf24l01 Assembly : Iot.Device.Nrf24l01.dll Syntax public enum WorkingMode Fields Name Description Receive Receive Mode Transmit Transmit Mode"
  },
  "devices/Iot.Device.Pca95x4.html": {
    "href": "devices/Iot.Device.Pca95x4.html",
    "title": "Namespace Iot.Device.Pca95x4 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Pca95x4 Classes Pca95x4 A general purpose parallel I/O expansion for I2C applications. Enums Register PCA95X4 register"
  },
  "devices/Iot.Device.Pca95x4.Pca95x4.html": {
    "href": "devices/Iot.Device.Pca95x4.Pca95x4.html",
    "title": "Class Pca95x4 | nanoFramework Documentation",
    "keywords": "Class Pca95x4 A general purpose parallel I/O expansion for I2C applications. Inheritance Object Pca95x4 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pca95x4 Assembly : Iot.Device.Pca95x4.dll Syntax public class Pca95x4 : IDisposable Constructors | Improve this Doc View Source Pca95x4(I2cDevice, Int32, GpioController, Boolean) Initializes new instance of Pca95x4. A general purpose parallel I/O expansion for I2C applications. Declaration public Pca95x4(I2cDevice i2cDevice, int interrupt = -1, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Int32 interrupt The input pin number that is connected to the interrupt (INT). GpioController gpioController GpioController related with operations on pins Boolean shouldDispose True to dispose the Gpio Controller Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source InvertInputRegisterBitPolarity(Int32, Boolean) Inverts Input Register bit polarity. Declaration public void InvertInputRegisterBitPolarity(int bitNumber, bool invert) Parameters Type Name Description Int32 bitNumber The Input Register bit number to invert. Boolean invert Determines if the Input Register bit polarity is inverted. | Improve this Doc View Source InvertInputRegisterPolarity(Boolean) Inverts Input Register polarity. Declaration public void InvertInputRegisterPolarity(bool invert) Parameters Type Name Description Boolean invert Determines if Inputer Register polarity is inverted. | Improve this Doc View Source Read(Register) Reads a byte from a register. Declaration public byte Read(Register register) Parameters Type Name Description Register register The register to read. Returns Type Description Byte The data read from the register. | Improve this Doc View Source ReadBit(Register, Int32) Reads a bit from a register. Declaration public bool ReadBit(Register register, int bitNumber) Parameters Type Name Description Register register The register to read. Int32 bitNumber The register bit number to read. Returns Type Description Boolean The value of the register bit read. | Improve this Doc View Source ReadInterrupt() Reads the pin value of the interrupt (INT). Declaration public PinValue ReadInterrupt() Returns Type Description PinValue The pin value of the interrupt (INT). | Improve this Doc View Source Write(Register, Byte) Writes a byte to a register. Declaration public void Write(Register register, byte data) Parameters Type Name Description Register register The register to write. Byte data The data to write to the register. | Improve this Doc View Source WriteBit(Register, Int32, Boolean) Writes to a register bit. Declaration public void WriteBit(Register register, int bitNumber, bool bit) Parameters Type Name Description Register register The register to write. Int32 bitNumber The register bit number to write. Boolean bit The value to write to register bit. Implements IDisposable"
  },
  "devices/Iot.Device.Pca95x4.Register.html": {
    "href": "devices/Iot.Device.Pca95x4.Register.html",
    "title": "Enum Register | nanoFramework Documentation",
    "keywords": "Enum Register PCA95X4 register Namespace : Iot.Device.Pca95x4 Assembly : Iot.Device.Pca95x4.dll Syntax public enum Register Fields Name Description Configuration This register configures the directions of the I/O pins. If a bit in this register is set, the corresponding port pin is enabled as an input with high-impedance output driver. If a bit in this register is cleared, the corresponding port pin is enabled as an output. At reset, the I/Os are configured as inputs with a weak pull-up to VDD. InputPort This register is a read-only port. It reflects the incoming logic levels of the pins, regardless of whether the pin is defined as an input or an output by Register 3. Writes to this register have no effect. OutputPort This register reflects the outgoing logic levels of the pins defined as outputs by Register 3. Bit values in this register have no effect on pins defined as inputs. Reads from this register return the value that is in the flip-flop controlling the output selection, not the actual pin value. PolarityInversion This register allows the user to invert the polarity of the Input Port register data. If a bit in this register is set (written with ‘1’), the corresponding Input Port data is inverted. If a bit in this register is cleared (written with a '0'), the Input Port data polarity is retained."
  },
  "devices/Iot.Device.Pn5180.Doublet.html": {
    "href": "devices/Iot.Device.Pn5180.Doublet.html",
    "title": "Class Doublet | nanoFramework Documentation",
    "keywords": "Class Doublet Doublet containing the number of available bytes and valid bits Inheritance Object Doublet Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public class Doublet Constructors | Improve this Doc View Source Doublet(Int32, Int32) Constructor Declaration public Doublet(int bytes, int validBits) Parameters Type Name Description Int32 bytes Available bytes Int32 validBits Number of valid bits Properties | Improve this Doc View Source Bytes Available bytes Declaration public int Bytes { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ValidBits Number of valid bits Declaration public int ValidBits { get; set; } Property Value Type Description Int32"
  },
  "devices/Iot.Device.Pn5180.EepromAddress.html": {
    "href": "devices/Iot.Device.Pn5180.EepromAddress.html",
    "title": "Enum EepromAddress | nanoFramework Documentation",
    "keywords": "Enum EepromAddress All EEPROM addresses, please refer to the documentation for more information. Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public enum EepromAddress Fields Name Description AGC_CONTROL AGC_CONTROL CLOCK_CONFIG CLOCK_CONFIG DieIdentifier DieIdentifier DigiDelay_15693 DigiDelay_15693 DigiDelay_18000_2_848 DigiDelay_18000_2_848 DigiDelay_18000_4_848 DigiDelay_18000_4_848 DigiDelay_A_848 DigiDelay_A_848 DigiDelay_B_848 DigiDelay_B_848 DigiDelay_F_424 DigiDelay_F_424 DPC_AGC_GEAR_LUT DPC_AGC_GEAR_LUT DPC_AGC_GEAR_LUT_SIZE DPC_AGC_GEAR_LUT_SIZE DPC_AGC_SHIFT_VALUE DPC_AGC_SHIFT_VALUE DPC_CONTROL DPC_CONTROL DPC_DEBUG DPC_DEBUG DPC_GUARD_FAST_MODE DPC_GUARD_FAST_MODE DPC_GUARD_FIELD_ON DPC_GUARD_FIELD_ON DPC_GUARD_SOF_DETECTED DPC_GUARD_SOF_DETECTED DPC_THRSH_HIGH DPC_THRSH_HIGH DPC_THRSH_LOW DPC_THRSH_LOW DPC_TIME DPC_TIME DPC_XI DPC_XI EepromVersion EepromVersion FELICA_POLLING_RESPONSE FELICA_POLLING_RESPONSE FIELD_ON_CP_SETTLE_TIME FIELD_ON_CP_SETTLE_TIME FirmwareVersion FirmwareVersion IDLE_IRQ_AFTER_BOOT IDLE_IRQ_AFTER_BOOT IRQ_PIN_CONFIG IRQ_PIN_CONFIG LPCD_FIELD_ON_TIME LPCD_FIELD_ON_TIME LPCD_GPO_TOGGLE_AFTER_FIELD_OFF LPCD_GPO_TOGGLE_AFTER_FIELD_OFF LPCD_GPO_TOGGLE_BEFORE_FIELD_ON LPCD_GPO_TOGGLE_BEFORE_FIELD_ON LPCD_REFERENCE_VALUE LPCD_REFERENCE_VALUE LPCD_REFVAL_GPO_CONTROL LPCD_REFVAL_GPO_CONTROL LPCD_THRESHOLD LPCD_THRESHOLD MapTb1_to_Tb0 MapTb1_to_Tb0 MFC_AUTH_TIMEOUT MFC_AUTH_TIMEOUT Misc_Config Misc_Config MISO_PULLUP_ENABLE MISO_PULLUP_ENABLE NFCID1 NFCID1 NFCLD_SENSITIVITY_VAL NFCLD_SENSITIVITY_VAL NumPadSignalMaps NumPadSignalMaps PadSignalMap PadSignalMap PCD_AWC_DRC_LUT PCD_AWC_DRC_LUT PCD_AWC_DRC_LUT_SIZE PCD_AWC_DRC_LUT_SIZE PLL_DEFAULT_SETTING PLL_DEFAULT_SETTING PLL_DEFAULT_SETTING_ALM PLL_DEFAULT_SETTING_ALM PLL_LOCK_SETTING PLL_LOCK_SETTING ProductVersion RANDOM_UID_ENABLE RANDOM_UID_ENABLE RandomUID_enable RandomUID_enable RF_DEBOUNCE_TIMEOUT RF_DEBOUNCE_TIMEOUT SEL_RES SEL_RES SENS_RES SENS_RES TbDac1 TbDac1 TbDac2 TbDac2 TbSelect TbSelect TESTBUS_ENABLE TESTBUS_ENABLE TestbusMode TestbusMode XTAL_BOOT_TIME XTAL_BOOT_TIME"
  },
  "devices/Iot.Device.Pn5180.EepromAddress_1.html": {
    "href": "devices/Iot.Device.Pn5180.EepromAddress_1.html",
    "title": "Enum EepromAddress | nanoFramework Documentation",
    "keywords": "Enum EepromAddress All EEPROM addresses, please refer to the documentation for more information. Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public enum EepromAddress Fields Name Description AGC_CONTROL AGC_CONTROL CLOCK_CONFIG CLOCK_CONFIG DieIdentifier DieIdentifier DigiDelay_15693 DigiDelay_15693 DigiDelay_18000_2_848 DigiDelay_18000_2_848 DigiDelay_18000_4_848 DigiDelay_18000_4_848 DigiDelay_A_848 DigiDelay_A_848 DigiDelay_B_848 DigiDelay_B_848 DigiDelay_F_424 DigiDelay_F_424 DPC_AGC_GEAR_LUT DPC_AGC_GEAR_LUT DPC_AGC_GEAR_LUT_SIZE DPC_AGC_GEAR_LUT_SIZE DPC_AGC_SHIFT_VALUE DPC_AGC_SHIFT_VALUE DPC_CONTROL DPC_CONTROL DPC_DEBUG DPC_DEBUG DPC_GUARD_FAST_MODE DPC_GUARD_FAST_MODE DPC_GUARD_FIELD_ON DPC_GUARD_FIELD_ON DPC_GUARD_SOF_DETECTED DPC_GUARD_SOF_DETECTED DPC_THRSH_HIGH DPC_THRSH_HIGH DPC_THRSH_LOW DPC_THRSH_LOW DPC_TIME DPC_TIME DPC_XI DPC_XI EepromVersion EepromVersion FELICA_POLLING_RESPONSE FELICA_POLLING_RESPONSE FIELD_ON_CP_SETTLE_TIME FIELD_ON_CP_SETTLE_TIME FirmwareVersion FirmwareVersion IDLE_IRQ_AFTER_BOOT IDLE_IRQ_AFTER_BOOT IRQ_PIN_CONFIG IRQ_PIN_CONFIG LPCD_FIELD_ON_TIME LPCD_FIELD_ON_TIME LPCD_GPO_TOGGLE_AFTER_FIELD_OFF LPCD_GPO_TOGGLE_AFTER_FIELD_OFF LPCD_GPO_TOGGLE_BEFORE_FIELD_ON LPCD_GPO_TOGGLE_BEFORE_FIELD_ON LPCD_REFERENCE_VALUE LPCD_REFERENCE_VALUE LPCD_REFVAL_GPO_CONTROL LPCD_REFVAL_GPO_CONTROL LPCD_THRESHOLD LPCD_THRESHOLD MapTb1_to_Tb0 MapTb1_to_Tb0 MFC_AUTH_TIMEOUT MFC_AUTH_TIMEOUT Misc_Config Misc_Config MISO_PULLUP_ENABLE MISO_PULLUP_ENABLE NFCID1 NFCID1 NFCLD_SENSITIVITY_VAL NFCLD_SENSITIVITY_VAL NumPadSignalMaps NumPadSignalMaps PadSignalMap PadSignalMap PCD_AWC_DRC_LUT PCD_AWC_DRC_LUT PCD_AWC_DRC_LUT_SIZE PCD_AWC_DRC_LUT_SIZE PLL_DEFAULT_SETTING PLL_DEFAULT_SETTING PLL_DEFAULT_SETTING_ALM PLL_DEFAULT_SETTING_ALM PLL_LOCK_SETTING PLL_LOCK_SETTING ProductVersion RANDOM_UID_ENABLE RANDOM_UID_ENABLE RandomUID_enable RandomUID_enable RF_DEBOUNCE_TIMEOUT RF_DEBOUNCE_TIMEOUT SEL_RES SEL_RES SENS_RES SENS_RES TbDac1 TbDac1 TbDac2 TbDac2 TbSelect TbSelect TESTBUS_ENABLE TESTBUS_ENABLE TestbusMode TestbusMode XTAL_BOOT_TIME XTAL_BOOT_TIME"
  },
  "devices/Iot.Device.Pn5180.html": {
    "href": "devices/Iot.Device.Pn5180.html",
    "title": "Namespace Iot.Device.Pn5180 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Pn5180 Classes Doublet Doublet containing the number of available bytes and valid bits Pn5180 A PN5180 class offering RFID and NFC functionalities. Implement the CardTransceiver class to allow Mifare, Credit Card support TripletVersion Versions of the reader Enums EepromAddress All EEPROM addresses, please refer to the documentation for more information. EepromAddress All EEPROM addresses, please refer to the documentation for more information. RadioFrequencyCollision The radio frequence collision RadioFrequencyCollision The radio frequence collision RadioFrequencyStatus The radio frequency status RadioFrequencyStatus The radio frequency status ReceiverRadioFrequencyConfiguration Receiver radio frequency configuration ReceiverRadioFrequencyConfiguration Receiver radio frequency configuration TransmitterRadioFrequencyConfiguration Transmitter radio frequency configuration TransmitterRadioFrequencyConfiguration Transmitter radio frequency configuration"
  },
  "devices/Iot.Device.Pn5180.Pn5180.html": {
    "href": "devices/Iot.Device.Pn5180.Pn5180.html",
    "title": "Class Pn5180 | nanoFramework Documentation",
    "keywords": "Class Pn5180 A PN5180 class offering RFID and NFC functionalities. Implement the CardTransceiver class to allow Mifare, Credit Card support Inheritance Object Pn5180 Implements IDisposable CardTransceiver Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public class Pn5180 : CardTransceiver, IDisposable, CardTransceiver Constructors | Improve this Doc View Source Pn5180(SpiDevice, Int32, Int32, GpioController, Boolean) Create a PN5180 RFID/NFC reader Declaration public Pn5180(SpiDevice spiDevice, int pinBusy, int pinNss, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description SpiDevice spiDevice The SPI device Int32 pinBusy The pin for the busy line Int32 pinNss The pin for the SPI select line. This has to be handle differently than thru the normal process as PN5180 has a specific way of working GpioController gpioController A GPIO controller, null will use a default one Boolean shouldDispose Dispose the SPI and the GPIO controller at the end if true | Improve this Doc View Source Pn5180(SpiDevice, Int32, Int32, GpioController, Boolean) Create a PN5180 RFID/NFC reader Declaration public Pn5180(SpiDevice spiDevice, int pinBusy, int pinNss, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description SpiDevice spiDevice The SPI device Int32 pinBusy The pin for the busy line Int32 pinNss The pin for the SPI select line. This has to be handle differently than thru the normal process as PN5180 has a specific way of working GpioController gpioController A GPIO controller, null will use a default one Boolean shouldDispose Dispose the SPI and the GPIO controller at the end if true Fields | Improve this Doc View Source DefaultSpiMode Only SPI Mode supported is Mode0 Declaration public const SpiMode DefaultSpiMode = SpiMode.Mode0 Field Value Type Description SpiMode | Improve this Doc View Source DefaultSpiMode Only SPI Mode supported is Mode0 Declaration public const SpiMode DefaultSpiMode = SpiMode.Mode0 Field Value Type Description SpiMode | Improve this Doc View Source MaximumSpiClockFrequency PN532 SPI Clock Frequency Declaration public const int MaximumSpiClockFrequency = 7000000 Field Value Type Description Int32 | Improve this Doc View Source MaximumSpiClockFrequency PN532 SPI Clock Frequency Declaration public const int MaximumSpiClockFrequency = 7000000 Field Value Type Description Int32 | Improve this Doc View Source RadioFrequencyConfigurationSize A radio Frequency configuration element size is 5 bytes Byte 1 = Register Address next 4 bytes = data of the register Declaration public const int RadioFrequencyConfigurationSize = 5 Field Value Type Description Int32 | Improve this Doc View Source RadioFrequencyConfigurationSize A radio Frequency configuration element size is 5 bytes Byte 1 = Register Address next 4 bytes = data of the register Declaration public const int RadioFrequencyConfigurationSize = 5 Field Value Type Description Int32 Properties | Improve this Doc View Source CrcReceptionTransfer Set on of off the CRC calculation for the Transfer and Reception Switch off is needed for anticollision operation on type A cards. Otherwise normal state is on Declaration public bool CrcReceptionTransfer { get; set; } Property Value Type Description Boolean | Improve this Doc View Source CrcReceptionTransfer Set on of off the CRC calculation for the Transfer and Reception Switch off is needed for anticollision operation on type A cards. Otherwise normal state is on Declaration public bool CrcReceptionTransfer { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RadioFrequencyCollision True to disable the Radio Frequency collision avoidance according to ISO/IEC 18092 False to use Active Communication mode according to ISO/IEC 18092 Declaration public RadioFrequencyCollision RadioFrequencyCollision { get; set; } Property Value Type Description RadioFrequencyCollision | Improve this Doc View Source RadioFrequencyCollision True to disable the Radio Frequency collision avoidance according to ISO/IEC 18092 False to use Active Communication mode according to ISO/IEC 18092 Declaration public RadioFrequencyCollision RadioFrequencyCollision { get; set; } Property Value Type Description RadioFrequencyCollision | Improve this Doc View Source RadioFrequencyField Get or set the radio frequency field. True for on, false for off Declaration public bool RadioFrequencyField { get; set; } Property Value Type Description Boolean | Improve this Doc View Source RadioFrequencyField Get or set the radio frequency field. True for on, false for off Declaration public bool RadioFrequencyField { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source CalculateCrcA(SpanByte, SpanByte) Provide a calculation of CRC for Type A cards Declaration public void CalculateCrcA(SpanByte buffer, SpanByte crc) Parameters Type Name Description SpanByte buffer The buffer to process SpanByte crc The CRC, Must be a 2 bytes buffer | Improve this Doc View Source CalculateCrcA(SpanByte, SpanByte) Provide a calculation of CRC for Type A cards Declaration public void CalculateCrcA(SpanByte buffer, SpanByte crc) Parameters Type Name Description SpanByte buffer The buffer to process SpanByte crc The CRC, Must be a 2 bytes buffer | Improve this Doc View Source CalculateCrcB(SpanByte, SpanByte) Provide a calculation of CRC for Type B cards Declaration public void CalculateCrcB(SpanByte buffer, SpanByte crc) Parameters Type Name Description SpanByte buffer The buffer to process SpanByte crc The CRC, Must be a 2 bytes buffer | Improve this Doc View Source CalculateCrcB(SpanByte, SpanByte) Provide a calculation of CRC for Type B cards Declaration public void CalculateCrcB(SpanByte buffer, SpanByte crc) Parameters Type Name Description SpanByte buffer The buffer to process SpanByte crc The CRC, Must be a 2 bytes buffer | Improve this Doc View Source DeselectCardTypeB(Data106kbpsTypeB) Deselect a 14443 Type B card Declaration public bool DeselectCardTypeB(Data106kbpsTypeB card) Parameters Type Name Description Data106kbpsTypeB card The card to deselect Returns Type Description Boolean True if success | Improve this Doc View Source DeselectCardTypeB(Data106kbpsTypeB) Deselect a 14443 Type B card Declaration public bool DeselectCardTypeB(Data106kbpsTypeB card) Parameters Type Name Description Data106kbpsTypeB card The card to deselect Returns Type Description Boolean True if success | Improve this Doc View Source Dispose() Dispose Declaration public void Dispose() | Improve this Doc View Source Dispose() Dispose Declaration public void Dispose() | Improve this Doc View Source GetIdentifier(SpanByte) Get the PN5180 identifier, this is a 16 byte long Declaration public bool GetIdentifier(SpanByte outputIdentifier) Parameters Type Name Description SpanByte outputIdentifier A 16 byte buffer Returns Type Description Boolean True if success | Improve this Doc View Source GetIdentifier(SpanByte) Get the PN5180 identifier, this is a 16 byte long Declaration public bool GetIdentifier(SpanByte outputIdentifier) Parameters Type Name Description SpanByte outputIdentifier A 16 byte buffer Returns Type Description Boolean True if success | Improve this Doc View Source GetNumberOfBytesReceivedAndValidBits() Get the number of bytes to read and the valid number of bits in the last byte If the full byte is valid then the value of the valid bit is 0 Declaration public Doublet GetNumberOfBytesReceivedAndValidBits() Returns Type Description Doublet A tuple whit the number of bytes to read and the number of valid bits in the last byte. If all bits are valid, then the value of valid bits is 0 | Improve this Doc View Source GetNumberOfBytesReceivedAndValidBits() Get the number of bytes to read and the valid number of bits in the last byte If the full byte is valid then the value of the valid bit is 0 Declaration public Doublet GetNumberOfBytesReceivedAndValidBits() Returns Type Description Doublet A tuple whit the number of bytes to read and the number of valid bits in the last byte. If all bits are valid, then the value of valid bits is 0 | Improve this Doc View Source GetRadioFrequencyConfigSize(ReceiverRadioFrequencyConfiguration) Get the size of the configuration of a specific receiver configuration Declaration public int GetRadioFrequencyConfigSize(ReceiverRadioFrequencyConfiguration receiver) Parameters Type Name Description ReceiverRadioFrequencyConfiguration receiver The receiver configuration Returns Type Description Int32 True if success | Improve this Doc View Source GetRadioFrequencyConfigSize(ReceiverRadioFrequencyConfiguration) Get the size of the configuration of a specific receiver configuration Declaration public int GetRadioFrequencyConfigSize(ReceiverRadioFrequencyConfiguration receiver) Parameters Type Name Description ReceiverRadioFrequencyConfiguration receiver The receiver configuration Returns Type Description Int32 True if success | Improve this Doc View Source GetRadioFrequencyConfigSize(TransmitterRadioFrequencyConfiguration) Get the size of the configuration of a specific transmitter configuration Declaration public int GetRadioFrequencyConfigSize(TransmitterRadioFrequencyConfiguration transmitter) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration Returns Type Description Int32 True if success | Improve this Doc View Source GetRadioFrequencyConfigSize(TransmitterRadioFrequencyConfiguration) Get the size of the configuration of a specific transmitter configuration Declaration public int GetRadioFrequencyConfigSize(TransmitterRadioFrequencyConfiguration transmitter) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration Returns Type Description Int32 True if success | Improve this Doc View Source GetRadioFrequencyStatus() Get the radio frenquency status Declaration public RadioFrequencyStatus GetRadioFrequencyStatus() Returns Type Description RadioFrequencyStatus The radio frequence status | Improve this Doc View Source GetRadioFrequencyStatus() Get the radio frenquency status Declaration public RadioFrequencyStatus GetRadioFrequencyStatus() Returns Type Description RadioFrequencyStatus The radio frequence status | Improve this Doc View Source GetVersions() Get the Product, Firmware and EEPROM versions of the PN8150 Declaration public TripletVersion GetVersions() Returns Type Description TripletVersion A tuple with the Product, Firmware and EEPROM versions | Improve this Doc View Source GetVersions() Get the Product, Firmware and EEPROM versions of the PN8150 Declaration public TripletVersion GetVersions() Returns Type Description TripletVersion A tuple with the Product, Firmware and EEPROM versions | Improve this Doc View Source IsRadioFrequencyFieldExternal() Is the external field activated? Declaration public bool IsRadioFrequencyFieldExternal() Returns Type Description Boolean True if active, false if not | Improve this Doc View Source IsRadioFrequencyFieldExternal() Is the external field activated? Declaration public bool IsRadioFrequencyFieldExternal() Returns Type Description Boolean True if active, false if not | Improve this Doc View Source ListenToCardIso14443TypeA(TransmitterRadioFrequencyConfiguration, ReceiverRadioFrequencyConfiguration, out Nullable<Data106kbpsTypeA>, Int32) Listen to any 14443 Type A card Declaration public bool ListenToCardIso14443TypeA(TransmitterRadioFrequencyConfiguration transmitter, ReceiverRadioFrequencyConfiguration receiver, out Data106kbpsTypeA? card, int timeoutPollingMilliseconds) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration, should be compatible with type A card ReceiverRadioFrequencyConfiguration receiver The receiver configuration, should be compatible with type A card Nullable < Data106kbpsTypeA > card The type A card once detected Int32 timeoutPollingMilliseconds The time to poll the card in milliseconds. Card detection will stop once the detection time will be over Returns Type Description Boolean True if a 14443 Type A card has been detected | Improve this Doc View Source ListenToCardIso14443TypeA(TransmitterRadioFrequencyConfiguration, ReceiverRadioFrequencyConfiguration, out Nullable<Data106kbpsTypeA>, Int32) Listen to any 14443 Type A card Declaration public bool ListenToCardIso14443TypeA(TransmitterRadioFrequencyConfiguration transmitter, ReceiverRadioFrequencyConfiguration receiver, out Data106kbpsTypeA? card, int timeoutPollingMilliseconds) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration, should be compatible with type A card ReceiverRadioFrequencyConfiguration receiver The receiver configuration, should be compatible with type A card Nullable < Data106kbpsTypeA > card The type A card once detected Int32 timeoutPollingMilliseconds The time to poll the card in milliseconds. Card detection will stop once the detection time will be over Returns Type Description Boolean True if a 14443 Type A card has been detected | Improve this Doc View Source ListenToCardIso14443TypeB(TransmitterRadioFrequencyConfiguration, ReceiverRadioFrequencyConfiguration, out Nullable<Data106kbpsTypeB>, Int32) Listen to any 14443 Type B card Declaration public bool ListenToCardIso14443TypeB(TransmitterRadioFrequencyConfiguration transmitter, ReceiverRadioFrequencyConfiguration receiver, out Data106kbpsTypeB? card, int timeoutPollingMilliseconds) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration, should be compatible with type B card ReceiverRadioFrequencyConfiguration receiver The receiver configuration, should be compatible with type A card Nullable < Data106kbpsTypeB > card The type B card once detected Int32 timeoutPollingMilliseconds The time to poll the card in milliseconds. Card detection will stop once the detection time will be over Returns Type Description Boolean True if a 14443 Type B card has been detected | Improve this Doc View Source ListenToCardIso14443TypeB(TransmitterRadioFrequencyConfiguration, ReceiverRadioFrequencyConfiguration, out Nullable<Data106kbpsTypeB>, Int32) Listen to any 14443 Type B card Declaration public bool ListenToCardIso14443TypeB(TransmitterRadioFrequencyConfiguration transmitter, ReceiverRadioFrequencyConfiguration receiver, out Data106kbpsTypeB? card, int timeoutPollingMilliseconds) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration, should be compatible with type B card ReceiverRadioFrequencyConfiguration receiver The receiver configuration, should be compatible with type A card Nullable < Data106kbpsTypeB > card The type B card once detected Int32 timeoutPollingMilliseconds The time to poll the card in milliseconds. Card detection will stop once the detection time will be over Returns Type Description Boolean True if a 14443 Type B card has been detected | Improve this Doc View Source LoadRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration, ReceiverRadioFrequencyConfiguration) Load a specific radio frequency configuration Declaration public bool LoadRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration transmitter, ReceiverRadioFrequencyConfiguration receiver) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration ReceiverRadioFrequencyConfiguration receiver The receiver configuration Returns Type Description Boolean True if success | Improve this Doc View Source LoadRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration, ReceiverRadioFrequencyConfiguration) Load a specific radio frequency configuration Declaration public bool LoadRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration transmitter, ReceiverRadioFrequencyConfiguration receiver) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration ReceiverRadioFrequencyConfiguration receiver The receiver configuration Returns Type Description Boolean True if success | Improve this Doc View Source MifareAuthenticate(SpanByte, MifareCardCommand, Byte, SpanByte) Specific function to authenticate Mifare cards Declaration public bool MifareAuthenticate(SpanByte key, MifareCardCommand mifareCommand, byte blockAddress, SpanByte cardUid) Parameters Type Name Description SpanByte key A 6 bytes key MifareCardCommand mifareCommand MifareCardCommand.AuthenticationA or MifareCardCommand.AuthenticationB Byte blockAddress The block address to authenticate SpanByte cardUid The 4 bytes UUID of the card Returns Type Description Boolean True if success | Improve this Doc View Source MifareAuthenticate(SpanByte, MifareCardCommand, Byte, SpanByte) Specific function to authenticate Mifare cards Declaration public bool MifareAuthenticate(SpanByte key, MifareCardCommand mifareCommand, byte blockAddress, SpanByte cardUid) Parameters Type Name Description SpanByte key A 6 bytes key MifareCardCommand mifareCommand MifareCardCommand.AuthenticationA or MifareCardCommand.AuthenticationB Byte blockAddress The block address to authenticate SpanByte cardUid The 4 bytes UUID of the card Returns Type Description Boolean True if success | Improve this Doc View Source ReadAllEeprom(SpanByte) Read the full EEPROM Declaration public bool ReadAllEeprom(SpanByte eeprom) Parameters Type Name Description SpanByte eeprom At 255 bytes buffer Returns Type Description Boolean True if success | Improve this Doc View Source ReadAllEeprom(SpanByte) Read the full EEPROM Declaration public bool ReadAllEeprom(SpanByte eeprom) Parameters Type Name Description SpanByte eeprom At 255 bytes buffer Returns Type Description Boolean True if success | Improve this Doc View Source ReadDataFromCard(SpanByte) Read data from a card. Declaration public bool ReadDataFromCard(SpanByte toRead) Parameters Type Name Description SpanByte toRead The span of byte to read Returns Type Description Boolean True if success Remarks Using this function you'll have to manage yourself the possible low level communication protocol. This function write directly to the card all the bytes. Please make sure you'll first load specific radio frequence settings, detect a card, select it and then send data | Improve this Doc View Source ReadDataFromCard(SpanByte) Read data from a card. Declaration public bool ReadDataFromCard(SpanByte toRead) Parameters Type Name Description SpanByte toRead The span of byte to read Returns Type Description Boolean True if success Remarks Using this function you'll have to manage yourself the possible low level communication protocol. This function write directly to the card all the bytes. Please make sure you'll first load specific radio frequence settings, detect a card, select it and then send data | Improve this Doc View Source ReadDataFromCard(SpanByte, out Int32) Read all the data from the card Declaration public bool ReadDataFromCard(SpanByte toRead, out int bytesRead) Parameters Type Name Description SpanByte toRead The span of byte to read Int32 bytesRead number of bytes read Returns Type Description Boolean A byte array with all the read elements, null if nothing can be read Remarks Using this function you'll have to manage yourself the possible low level communication protocol. This function write directly to the card all the bytes. Please make sure you'll first load specific radio frequence settings, detect a card, select it and then send data | Improve this Doc View Source ReadDataFromCard(SpanByte, out Int32) Read all the data from the card Declaration public bool ReadDataFromCard(SpanByte toRead, out int bytesRead) Parameters Type Name Description SpanByte toRead The span of byte to read Int32 bytesRead number of bytes read Returns Type Description Boolean A byte array with all the read elements, null if nothing can be read Remarks Using this function you'll have to manage yourself the possible low level communication protocol. This function write directly to the card all the bytes. Please make sure you'll first load specific radio frequence settings, detect a card, select it and then send data | Improve this Doc View Source ReadEeprom(EepromAddress, SpanByte) Read a specific part of the EEPROM Declaration public bool ReadEeprom(EepromAddress address, SpanByte eeprom) Parameters Type Name Description EepromAddress address The EEPROM address SpanByte eeprom A span of byte to read the EEPROM Returns Type Description Boolean True if success | Improve this Doc View Source ReadEeprom(EepromAddress, SpanByte) Read a specific part of the EEPROM Declaration public bool ReadEeprom(EepromAddress address, SpanByte eeprom) Parameters Type Name Description EepromAddress address The EEPROM address SpanByte eeprom A span of byte to read the EEPROM Returns Type Description Boolean True if success | Improve this Doc View Source ReselectTarget(Byte) Declaration public override bool ReselectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Returns Type Description Boolean | Improve this Doc View Source ReselectTarget(Byte) Declaration public override bool ReselectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Returns Type Description Boolean | Improve this Doc View Source RetrieveRadioFrequencyConfiguration(ReceiverRadioFrequencyConfiguration, SpanByte) Retrieve the radio frequency configuration Declaration public bool RetrieveRadioFrequencyConfiguration(ReceiverRadioFrequencyConfiguration receiver, SpanByte configuration) Parameters Type Name Description ReceiverRadioFrequencyConfiguration receiver The receiver configuration SpanByte configuration A span of bytes for the configuration. Should be a multiple of 5 with the size of Returns Type Description Boolean True if success | Improve this Doc View Source RetrieveRadioFrequencyConfiguration(ReceiverRadioFrequencyConfiguration, SpanByte) Retrieve the radio frequency configuration Declaration public bool RetrieveRadioFrequencyConfiguration(ReceiverRadioFrequencyConfiguration receiver, SpanByte configuration) Parameters Type Name Description ReceiverRadioFrequencyConfiguration receiver The receiver configuration SpanByte configuration A span of bytes for the configuration. Should be a multiple of 5 with the size of Returns Type Description Boolean True if success | Improve this Doc View Source RetrieveRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration, SpanByte) Retrieve the radio frequency configuration Declaration public bool RetrieveRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration transmitter, SpanByte configuration) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration SpanByte configuration A span of bytes for the configuration. Should be a multiple of 5 with the size of Returns Type Description Boolean True if success | Improve this Doc View Source RetrieveRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration, SpanByte) Retrieve the radio frequency configuration Declaration public bool RetrieveRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration transmitter, SpanByte configuration) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration SpanByte configuration A span of bytes for the configuration. Should be a multiple of 5 with the size of Returns Type Description Boolean True if success | Improve this Doc View Source SendDataToCard(SpanByte, Int32) Send data to a card. Declaration public bool SendDataToCard(SpanByte toSend, int numberValidBitsLastByte = 8) Parameters Type Name Description SpanByte toSend The span of byte to send Int32 numberValidBitsLastByte The number of bits valid in the last byte, 8 is the default. If validBits == 3 then it's equivalent to apply a mask of 0b000_0111 to get the correct valid bits Returns Type Description Boolean True if success Remarks Using this function you'll have to manage yourself the possible low level communication protocol. This function write directly to the card all the bytes. Please make sure you'll first load specific radio frequence settings, detect a card, select it and then send data | Improve this Doc View Source SendDataToCard(SpanByte, Int32) Send data to a card. Declaration public bool SendDataToCard(SpanByte toSend, int numberValidBitsLastByte = 8) Parameters Type Name Description SpanByte toSend The span of byte to send Int32 numberValidBitsLastByte The number of bits valid in the last byte, 8 is the default. If validBits == 3 then it's equivalent to apply a mask of 0b000_0111 to get the correct valid bits Returns Type Description Boolean True if success Remarks Using this function you'll have to manage yourself the possible low level communication protocol. This function write directly to the card all the bytes. Please make sure you'll first load specific radio frequence settings, detect a card, select it and then send data | Improve this Doc View Source Transceive(Byte, SpanByte, SpanByte) Declaration public override int Transceive(byte targetNumber, SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description Byte targetNumber SpanByte dataToSend SpanByte dataFromCard Returns Type Description Int32 | Improve this Doc View Source Transceive(Byte, SpanByte, SpanByte) Declaration public override int Transceive(byte targetNumber, SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description Byte targetNumber SpanByte dataToSend SpanByte dataFromCard Returns Type Description Int32 | Improve this Doc View Source UpdateRadioFrequencyConfiguration(ReceiverRadioFrequencyConfiguration, SpanByte) Update the radio frequency configuration Declaration public bool UpdateRadioFrequencyConfiguration(ReceiverRadioFrequencyConfiguration receiver, SpanByte configuration) Parameters Type Name Description ReceiverRadioFrequencyConfiguration receiver The receiver configuration SpanByte configuration A span of bytes for the configuration. Should be a multiple of 5 with the size of Returns Type Description Boolean True if success | Improve this Doc View Source UpdateRadioFrequencyConfiguration(ReceiverRadioFrequencyConfiguration, SpanByte) Update the radio frequency configuration Declaration public bool UpdateRadioFrequencyConfiguration(ReceiverRadioFrequencyConfiguration receiver, SpanByte configuration) Parameters Type Name Description ReceiverRadioFrequencyConfiguration receiver The receiver configuration SpanByte configuration A span of bytes for the configuration. Should be a multiple of 5 with the size of Returns Type Description Boolean True if success | Improve this Doc View Source UpdateRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration, SpanByte) Update the radio frequency configuration Declaration public bool UpdateRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration transmitter, SpanByte configuration) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration SpanByte configuration A span of bytes for the configuration. Should be a multiple of 5 with the size of Returns Type Description Boolean True if success | Improve this Doc View Source UpdateRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration, SpanByte) Update the radio frequency configuration Declaration public bool UpdateRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration transmitter, SpanByte configuration) Parameters Type Name Description TransmitterRadioFrequencyConfiguration transmitter The transmitter configuration SpanByte configuration A span of bytes for the configuration. Should be a multiple of 5 with the size of Returns Type Description Boolean True if success | Improve this Doc View Source WriteAllEeprom(SpanByte) Write all the EEPROM Declaration public bool WriteAllEeprom(SpanByte eeprom) Parameters Type Name Description SpanByte eeprom A 255 bytes buffer Returns Type Description Boolean True if success | Improve this Doc View Source WriteAllEeprom(SpanByte) Write all the EEPROM Declaration public bool WriteAllEeprom(SpanByte eeprom) Parameters Type Name Description SpanByte eeprom A 255 bytes buffer Returns Type Description Boolean True if success | Improve this Doc View Source WriteEeprom(EepromAddress, SpanByte) Write the EEPROM at a specific address Declaration public bool WriteEeprom(EepromAddress address, SpanByte eeprom) Parameters Type Name Description EepromAddress address The EEPROM address SpanByte eeprom A span of byte to write the EEPROM Returns Type Description Boolean True if success | Improve this Doc View Source WriteEeprom(EepromAddress, SpanByte) Write the EEPROM at a specific address Declaration public bool WriteEeprom(EepromAddress address, SpanByte eeprom) Parameters Type Name Description EepromAddress address The EEPROM address SpanByte eeprom A span of byte to write the EEPROM Returns Type Description Boolean True if success Implements IDisposable CardTransceiver"
  },
  "devices/Iot.Device.Pn5180.RadioFrequencyCollision.html": {
    "href": "devices/Iot.Device.Pn5180.RadioFrequencyCollision.html",
    "title": "Enum RadioFrequencyCollision | nanoFramework Documentation",
    "keywords": "Enum RadioFrequencyCollision The radio frequence collision Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public enum RadioFrequencyCollision Fields Name Description DisableCollision disable collision avoidance according to ISO/IEC 18092 Normal Normal mode UseActiveCommunication Use Active Communication mode according to ISO/IEC 18092"
  },
  "devices/Iot.Device.Pn5180.RadioFrequencyCollision_1.html": {
    "href": "devices/Iot.Device.Pn5180.RadioFrequencyCollision_1.html",
    "title": "Enum RadioFrequencyCollision | nanoFramework Documentation",
    "keywords": "Enum RadioFrequencyCollision The radio frequence collision Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public enum RadioFrequencyCollision Fields Name Description DisableCollision disable collision avoidance according to ISO/IEC 18092 Normal Normal mode UseActiveCommunication Use Active Communication mode according to ISO/IEC 18092"
  },
  "devices/Iot.Device.Pn5180.RadioFrequencyStatus.html": {
    "href": "devices/Iot.Device.Pn5180.RadioFrequencyStatus.html",
    "title": "Enum RadioFrequencyStatus | nanoFramework Documentation",
    "keywords": "Enum RadioFrequencyStatus The radio frequency status Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public enum RadioFrequencyStatus Fields Name Description Error Error Idle Idle LoopBack LoopBack Receiving Receiving Transmitting Transmitting WaitForData Wait For Data WaitReceive Wait Receive WaitTransmit Wait Transmit"
  },
  "devices/Iot.Device.Pn5180.RadioFrequencyStatus_1.html": {
    "href": "devices/Iot.Device.Pn5180.RadioFrequencyStatus_1.html",
    "title": "Enum RadioFrequencyStatus | nanoFramework Documentation",
    "keywords": "Enum RadioFrequencyStatus The radio frequency status Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public enum RadioFrequencyStatus Fields Name Description Error Error Idle Idle LoopBack LoopBack Receiving Receiving Transmitting Transmitting WaitForData Wait For Data WaitReceive Wait Receive WaitTransmit Wait Transmit"
  },
  "devices/Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.html": {
    "href": "devices/Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.html",
    "title": "Enum ReceiverRadioFrequencyConfiguration | nanoFramework Documentation",
    "keywords": "Enum ReceiverRadioFrequencyConfiguration Receiver radio frequency configuration Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public enum ReceiverRadioFrequencyConfiguration Fields Name Description FeliCa_Nfc_PI_212_212 Protocol: FeliCa / NFC PI 212 Speed (kbit/s): 212 FeliCa_Nfc_PI_212_424 Protocol: FeliCa / NFC PI 212 Speed (kbit/s): 424 GTM_ALL Protocol: GTM Speed (kbit/s): ALL Iso14443A_212 Protocol: ISO 14443-A Speed (kbit/s): 212 Iso14443A_424 Protocol: ISO 14443-A Speed (kbit/s): 424 Iso14443A_848 Protocol: ISO 14443-A Speed (kbit/s): 848 Iso14443A_Active_106 Protocol: ISO 14443-A Speed (kbit/s): 106 Iso14443A_Active_212 Protocol: ISO 14443-A Speed (kbit/s): 212 Iso14443A_Active_424 Protocol: ISO 14443-A Speed (kbit/s): 424 Iso14443A_Nfc_PI_106_106 Protocol: ISO 14443-A / NFC PI-106 Speed (kbit/s): 106 Iso14443A_PICC_106 Protocol: ISO 14443-A PICC Speed (kbit/s): 106 Iso14443A_PICC_212 Protocol: ISO 14443-A PICC Speed (kbit/s): 212 Iso14443A_PICC_424 Protocol: ISO 14443-A PICC Speed (kbit/s): 424 Iso14443A_PICC_848 Protocol: ISO 14443-A PICC Speed (kbit/s): 848 Iso14443B_106 Protocol: ISO 14443-B Speed (kbit/s): 106 Iso14443B_212 Protocol: ISO 14443-B Speed (kbit/s): 212 Iso14443B_424 Protocol: ISO 14443-B Speed (kbit/s): 424 Iso14443B_848 Protocol: ISO 14443-B Speed (kbit/s): 848 Iso15693_26 Protocol: ISO 15693 Speed (kbit/s): 26 Iso15693_53 Protocol: ISO 15693 Speed (kbit/s): 53 Iso18003M3_Manch_424_2_212 Protocol: ISO 18003M3 Manch. 424_2 Speed (kbit/s): 212 Iso18003M3_Manch_424_4_106 Protocol: ISO 18003M3 Manch. 424_4 Speed (kbit/s): 106 Iso18003M3_Manch_848_2_424 Protocol: ISO 18003M3 Manch. 848_2 Speed (kbit/s): 424 Iso18003M3_Manch_848_4_212 Protocol: ISO 18003M3 Manch. 848_4 Speed (kbit/s): 212 Nfc_Active_Initiator_106 Protocol: NFC-Active Initiator Speed (kbit/s): 106 Nfc_Active_Initiator_212 Protocol: NFC-Active Initiator Speed (kbit/s): 212 Nfc_Active_Initiator_424 Protocol: NFC-Active Initiator Speed (kbit/s): 424 Nfc_PassiveTarget_212 Protocol: NFC Passive Target Speed (kbit/s): 212 Nfc_PassiveTarget_424 Protocol: NFC Passive Target Speed (kbit/s): 424 NoChange No cahnge"
  },
  "devices/Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration_1.html": {
    "href": "devices/Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration_1.html",
    "title": "Enum ReceiverRadioFrequencyConfiguration | nanoFramework Documentation",
    "keywords": "Enum ReceiverRadioFrequencyConfiguration Receiver radio frequency configuration Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public enum ReceiverRadioFrequencyConfiguration Fields Name Description FeliCa_Nfc_PI_212_212 Protocol: FeliCa / NFC PI 212 Speed (kbit/s): 212 FeliCa_Nfc_PI_212_424 Protocol: FeliCa / NFC PI 212 Speed (kbit/s): 424 GTM_ALL Protocol: GTM Speed (kbit/s): ALL Iso14443A_212 Protocol: ISO 14443-A Speed (kbit/s): 212 Iso14443A_424 Protocol: ISO 14443-A Speed (kbit/s): 424 Iso14443A_848 Protocol: ISO 14443-A Speed (kbit/s): 848 Iso14443A_Active_106 Protocol: ISO 14443-A Speed (kbit/s): 106 Iso14443A_Active_212 Protocol: ISO 14443-A Speed (kbit/s): 212 Iso14443A_Active_424 Protocol: ISO 14443-A Speed (kbit/s): 424 Iso14443A_Nfc_PI_106_106 Protocol: ISO 14443-A / NFC PI-106 Speed (kbit/s): 106 Iso14443A_PICC_106 Protocol: ISO 14443-A PICC Speed (kbit/s): 106 Iso14443A_PICC_212 Protocol: ISO 14443-A PICC Speed (kbit/s): 212 Iso14443A_PICC_424 Protocol: ISO 14443-A PICC Speed (kbit/s): 424 Iso14443A_PICC_848 Protocol: ISO 14443-A PICC Speed (kbit/s): 848 Iso14443B_106 Protocol: ISO 14443-B Speed (kbit/s): 106 Iso14443B_212 Protocol: ISO 14443-B Speed (kbit/s): 212 Iso14443B_424 Protocol: ISO 14443-B Speed (kbit/s): 424 Iso14443B_848 Protocol: ISO 14443-B Speed (kbit/s): 848 Iso15693_26 Protocol: ISO 15693 Speed (kbit/s): 26 Iso15693_53 Protocol: ISO 15693 Speed (kbit/s): 53 Iso18003M3_Manch_424_2_212 Protocol: ISO 18003M3 Manch. 424_2 Speed (kbit/s): 212 Iso18003M3_Manch_424_4_106 Protocol: ISO 18003M3 Manch. 424_4 Speed (kbit/s): 106 Iso18003M3_Manch_848_2_424 Protocol: ISO 18003M3 Manch. 848_2 Speed (kbit/s): 424 Iso18003M3_Manch_848_4_212 Protocol: ISO 18003M3 Manch. 848_4 Speed (kbit/s): 212 Nfc_Active_Initiator_106 Protocol: NFC-Active Initiator Speed (kbit/s): 106 Nfc_Active_Initiator_212 Protocol: NFC-Active Initiator Speed (kbit/s): 212 Nfc_Active_Initiator_424 Protocol: NFC-Active Initiator Speed (kbit/s): 424 Nfc_PassiveTarget_212 Protocol: NFC Passive Target Speed (kbit/s): 212 Nfc_PassiveTarget_424 Protocol: NFC Passive Target Speed (kbit/s): 424 NoChange No cahnge"
  },
  "devices/Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.html": {
    "href": "devices/Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.html",
    "title": "Enum TransmitterRadioFrequencyConfiguration | nanoFramework Documentation",
    "keywords": "Enum TransmitterRadioFrequencyConfiguration Transmitter radio frequency configuration Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public enum TransmitterRadioFrequencyConfiguration Fields Name Description FeliCa_Nfc_PI_212_212 Protocol: FeliCa / NFC PI 212 Speed (kbit/s): 212 FeliCa_Nfc_PI_424_424 Protocol: FeliCa / NFC PI 424 Speed (kbit/s): 424 GTM_ALL Protocol: GTM Speed (kbit/s): ALL Iso14443A_212 Protocol: ISO 14443-A Speed (kbit/s): 212 Iso14443A_424 Protocol: ISO 14443-A Speed (kbit/s): 424 Iso14443A_848 Protocol: ISO 14443-A Speed (kbit/s): 848 Iso14443A_Nfc_PI_106_106 Protocol: ISO 14443-A / NFC PI-106 Speed (kbit/s): 106 Iso14443A_PICC_212 Protocol: ISO 14443-A PICC Speed (kbit/s): 212 Iso14443A_PICC_424 Protocol: ISO 14443-A PICC Speed (kbit/s): 424 Iso14443A_PICC_848 Protocol: ISO 14443-A PICC Speed (kbit/s): 848 Iso14443B_106 Protocol: ISO 14443-B Speed (kbit/s): 106 Iso14443B_212 Protocol: ISO 14443-B Speed (kbit/s): 212 Iso14443B_424 Protocol: ISO 14443-B Speed (kbit/s): 424 Iso14443B_848 Protocol: ISO 14443-B Speed (kbit/s): 848 Iso15693_ASK10_26 Protocol: ISO 15693 ASK10 Speed (kbit/s): 26 Iso15693_ASK100_26 Protocol: ISO 15693 ASK100 Speed (kbit/s): 26 Iso18003M3_Manch_424_2_Tari_9_44 Protocol: ISO 18003M3 Manch. 424_2 Speed (kbit/s): Tari=9.44 Iso18003M3_Manch_424_4_106 Protocol: ISO 18003M3 Manch. 424_4 Speed (kbit/s): 106 Iso18003M3_Manch_424_4_Tari_18_88 Protocol: ISO 18003M3 Manch. 424_4 Speed (kbit/s): Tari=18.88 Iso18003M3_Manch_848_2_Tari_9_44 Protocol: ISO 18003M3 Manch. 848_2 Speed (kbit/s): Tari=9.44 Iso18003M3_Manch_848_4_Tari_18_88 Protocol: ISO 18003M3 Manch. 848_4 Speed (kbit/s): Tari=18.88 Nfc_Active_Initiator_106 Protocol: NFC-Active Initiator Speed (kbit/s): 106 Nfc_Active_Initiator_212 Protocol: NFC-Active Initiator Speed (kbit/s): 212 Nfc_Active_Initiator_424 Protocol: NFC-Active Initiator Speed (kbit/s): 424 Nfc_ActiveTarget_106_106 Protocol: NFC Active Target 106 Speed (kbit/s): 106 Nfc_ActiveTarget_212_212 Protocol: NFC Active Target 212 Speed (kbit/s): 212 Nfc_ActiveTarget_424_424 Protocol: NFC Active Target 424 Speed (kbit/s): 424 Nfc_PassiveTarget_212 Protocol: NFC Passive Target Speed (kbit/s): 212 Nfc_PassiveTarget_424 Protocol: NFC Passive Target Speed (kbit/s): 424 NoChange No change"
  },
  "devices/Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration_1.html": {
    "href": "devices/Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration_1.html",
    "title": "Enum TransmitterRadioFrequencyConfiguration | nanoFramework Documentation",
    "keywords": "Enum TransmitterRadioFrequencyConfiguration Transmitter radio frequency configuration Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public enum TransmitterRadioFrequencyConfiguration Fields Name Description FeliCa_Nfc_PI_212_212 Protocol: FeliCa / NFC PI 212 Speed (kbit/s): 212 FeliCa_Nfc_PI_424_424 Protocol: FeliCa / NFC PI 424 Speed (kbit/s): 424 GTM_ALL Protocol: GTM Speed (kbit/s): ALL Iso14443A_212 Protocol: ISO 14443-A Speed (kbit/s): 212 Iso14443A_424 Protocol: ISO 14443-A Speed (kbit/s): 424 Iso14443A_848 Protocol: ISO 14443-A Speed (kbit/s): 848 Iso14443A_Nfc_PI_106_106 Protocol: ISO 14443-A / NFC PI-106 Speed (kbit/s): 106 Iso14443A_PICC_212 Protocol: ISO 14443-A PICC Speed (kbit/s): 212 Iso14443A_PICC_424 Protocol: ISO 14443-A PICC Speed (kbit/s): 424 Iso14443A_PICC_848 Protocol: ISO 14443-A PICC Speed (kbit/s): 848 Iso14443B_106 Protocol: ISO 14443-B Speed (kbit/s): 106 Iso14443B_212 Protocol: ISO 14443-B Speed (kbit/s): 212 Iso14443B_424 Protocol: ISO 14443-B Speed (kbit/s): 424 Iso14443B_848 Protocol: ISO 14443-B Speed (kbit/s): 848 Iso15693_ASK10_26 Protocol: ISO 15693 ASK10 Speed (kbit/s): 26 Iso15693_ASK100_26 Protocol: ISO 15693 ASK100 Speed (kbit/s): 26 Iso18003M3_Manch_424_2_Tari_9_44 Protocol: ISO 18003M3 Manch. 424_2 Speed (kbit/s): Tari=9.44 Iso18003M3_Manch_424_4_106 Protocol: ISO 18003M3 Manch. 424_4 Speed (kbit/s): 106 Iso18003M3_Manch_424_4_Tari_18_88 Protocol: ISO 18003M3 Manch. 424_4 Speed (kbit/s): Tari=18.88 Iso18003M3_Manch_848_2_Tari_9_44 Protocol: ISO 18003M3 Manch. 848_2 Speed (kbit/s): Tari=9.44 Iso18003M3_Manch_848_4_Tari_18_88 Protocol: ISO 18003M3 Manch. 848_4 Speed (kbit/s): Tari=18.88 Nfc_Active_Initiator_106 Protocol: NFC-Active Initiator Speed (kbit/s): 106 Nfc_Active_Initiator_212 Protocol: NFC-Active Initiator Speed (kbit/s): 212 Nfc_Active_Initiator_424 Protocol: NFC-Active Initiator Speed (kbit/s): 424 Nfc_ActiveTarget_106_106 Protocol: NFC Active Target 106 Speed (kbit/s): 106 Nfc_ActiveTarget_212_212 Protocol: NFC Active Target 212 Speed (kbit/s): 212 Nfc_ActiveTarget_424_424 Protocol: NFC Active Target 424 Speed (kbit/s): 424 Nfc_PassiveTarget_212 Protocol: NFC Passive Target Speed (kbit/s): 212 Nfc_PassiveTarget_424 Protocol: NFC Passive Target Speed (kbit/s): 424 NoChange No change"
  },
  "devices/Iot.Device.Pn5180.TripletVersion.html": {
    "href": "devices/Iot.Device.Pn5180.TripletVersion.html",
    "title": "Class TripletVersion | nanoFramework Documentation",
    "keywords": "Class TripletVersion Versions of the reader Inheritance Object TripletVersion Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn5180 Assembly : Iot.Device.Pn5180.dll Syntax public class TripletVersion Constructors | Improve this Doc View Source TripletVersion(Version, Version, Version) Constructor Declaration public TripletVersion(Version product, Version firmware, Version eeprom) Parameters Type Name Description Version product Product version Version firmware Firmware version Version eeprom EEPROM version Properties | Improve this Doc View Source Eeprom EEPROM version Declaration public Version Eeprom { get; set; } Property Value Type Description Version | Improve this Doc View Source Firmware Firmware version Declaration public Version Firmware { get; set; } Property Value Type Description Version | Improve this Doc View Source Product Product version Declaration public Version Product { get; set; } Property Value Type Description Version"
  },
  "devices/Iot.Device.Pn532.AsTarget.AsTargetInitialized.html": {
    "href": "devices/Iot.Device.Pn532.AsTarget.AsTargetInitialized.html",
    "title": "Class AsTargetInitialized | nanoFramework Documentation",
    "keywords": "Class AsTargetInitialized Information on the initialized target Inheritance Object AsTargetInitialized Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.AsTarget Assembly : Iot.Device.Pn532.dll Syntax public class AsTargetInitialized Constructors | Improve this Doc View Source AsTargetInitialized(TargetModeInitialized, Byte[]) Constructor Declaration public AsTargetInitialized(TargetModeInitialized modeInialized, byte[] initiator) Parameters Type Name Description TargetModeInitialized modeInialized Target mode initialized Byte [] initiator The initiator bytes Properties | Improve this Doc View Source Initiator Initiator bytes Declaration public byte[] Initiator { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source ModeInialized Target mode initialized Declaration public TargetModeInitialized ModeInialized { get; set; } Property Value Type Description TargetModeInitialized"
  },
  "devices/Iot.Device.Pn532.AsTarget.html": {
    "href": "devices/Iot.Device.Pn532.AsTarget.html",
    "title": "Namespace Iot.Device.Pn532.AsTarget | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Pn532.AsTarget Classes AsTargetInitialized Information on the initialized target TargetFeliCaParameters Parameters for the FeliCa card when PN532 is setup as a target See document AN133910.pdf on nxp website for default values TargetMifareParameters Parameters to emulate a Mifare card when PN532 is setup as a target See document AN133910.pdf on nxp website for default values TargetModeInitialized The information regarding the mode initialized TargetPiccParameters Parameters for a PICC card (like a Credit Card) when PN532 is setup as a target See document AN133910.pdf on nxp website for default values Enums TargetBaudRateInialized When PN532 is acting as a target, the baud rate it is engaged to TargetFramingType Target Framing Type TargetModeInitialization Target Mode Initialization"
  },
  "devices/Iot.Device.Pn532.AsTarget.TargetBaudRateInialized.html": {
    "href": "devices/Iot.Device.Pn532.AsTarget.TargetBaudRateInialized.html",
    "title": "Enum TargetBaudRateInialized | nanoFramework Documentation",
    "keywords": "Enum TargetBaudRateInialized When PN532 is acting as a target, the baud rate it is engaged to Namespace : Iot.Device.Pn532.AsTarget Assembly : Iot.Device.Pn532.dll Syntax public enum TargetBaudRateInialized Fields Name Description B106kbps 106k bps B212kbps 212k bps B424kbps 424k bps"
  },
  "devices/Iot.Device.Pn532.AsTarget.TargetFeliCaParameters.html": {
    "href": "devices/Iot.Device.Pn532.AsTarget.TargetFeliCaParameters.html",
    "title": "Class TargetFeliCaParameters | nanoFramework Documentation",
    "keywords": "Class TargetFeliCaParameters Parameters for the FeliCa card when PN532 is setup as a target See document AN133910.pdf on nxp website for default values Inheritance Object TargetFeliCaParameters Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.AsTarget Assembly : Iot.Device.Pn532.dll Syntax public class TargetFeliCaParameters Properties | Improve this Doc View Source NfcId2 The NFC Id for a FeliCa card, legnth must be 8 bytes Declaration public byte[] NfcId2 { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source Pad The PAD for a FeliCa card, length must be 8 bytes Declaration public byte[] Pad { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source SystemCode System Code (2 bytes), these two bytes are returned in the POL_RES frame if the 4th byte of the incoming POL_REQ command frame is 0x01 Declaration public byte[] SystemCode { get; set; } Property Value Type Description Byte [] Methods | Improve this Doc View Source Serialize() Serialize the data to be used for initialization Declaration public byte[] Serialize() Returns Type Description Byte [] Data serialized"
  },
  "devices/Iot.Device.Pn532.AsTarget.TargetFramingType.html": {
    "href": "devices/Iot.Device.Pn532.AsTarget.TargetFramingType.html",
    "title": "Enum TargetFramingType | nanoFramework Documentation",
    "keywords": "Enum TargetFramingType Target Framing Type Namespace : Iot.Device.Pn532.AsTarget Assembly : Iot.Device.Pn532.dll Syntax public enum TargetFramingType Fields Name Description ActiveMode Active Mode FeliCa FeliCa Mifare Mifare"
  },
  "devices/Iot.Device.Pn532.AsTarget.TargetMifareParameters.html": {
    "href": "devices/Iot.Device.Pn532.AsTarget.TargetMifareParameters.html",
    "title": "Class TargetMifareParameters | nanoFramework Documentation",
    "keywords": "Class TargetMifareParameters Parameters to emulate a Mifare card when PN532 is setup as a target See document AN133910.pdf on nxp website for default values Inheritance Object TargetMifareParameters Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.AsTarget Assembly : Iot.Device.Pn532.dll Syntax public class TargetMifareParameters Properties | Improve this Doc View Source Atqa SENS_RES (2 bytes LSB first, as defined in ISO/IEC14443-3) Declaration public byte[] Atqa { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source NfcId3 NFCID for emulation is only 3 lenght PN532 has hardware coded first NFCID byte to avoid having full copy of cards Declaration public byte[] NfcId3 { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source Sak SEL_RES (1 byte), typical value: = 0x40 (for DEP) = 0x20 (for ISO/IEC14443-4 PICC emulation) = 0x60 (for both DEP and emulation of ISO/IEC14443-4 PICC) Declaration public byte Sak { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Serialize() Serialize the data to be used for initialization Declaration public byte[] Serialize() Returns Type Description Byte [] Data serialized"
  },
  "devices/Iot.Device.Pn532.AsTarget.TargetModeInitialization.html": {
    "href": "devices/Iot.Device.Pn532.AsTarget.TargetModeInitialization.html",
    "title": "Enum TargetModeInitialization | nanoFramework Documentation",
    "keywords": "Enum TargetModeInitialization Target Mode Initialization Namespace : Iot.Device.Pn532.AsTarget Assembly : Iot.Device.Pn532.dll Syntax [Flags] public enum TargetModeInitialization Fields Name Description Default Uses all the modes DepOnly PassiveOnly flag is used to configure the PN532 to accept to be initialized only in passive mode, i.e. to refuse active communication mode PassiveOnly PassiveOnly flag is used to configure the PN532 to accept to be initialized only in passive mode, i.e. to refuse active communication mode /// PiccOnly PICCOnly flag is used to configure the PN532 to accept to be initialized only as ISO/IEC14443-4 PICC, i.e. receiving an RATS frame. If the PN532 receives another command frame as first command following AutoColl process, it will be rejected and the PN532 returns automatically in the AutoColl state"
  },
  "devices/Iot.Device.Pn532.AsTarget.TargetModeInitialized.html": {
    "href": "devices/Iot.Device.Pn532.AsTarget.TargetModeInitialized.html",
    "title": "Class TargetModeInitialized | nanoFramework Documentation",
    "keywords": "Class TargetModeInitialized The information regarding the mode initialized Inheritance Object TargetModeInitialized Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.AsTarget Assembly : Iot.Device.Pn532.dll Syntax public class TargetModeInitialized Properties | Improve this Doc View Source IsDep True if it's DEP emulation Declaration public bool IsDep { get; set; } Property Value Type Description Boolean | Improve this Doc View Source IsISO14443_4Picc True if we have a PICC emulation Declaration public bool IsISO14443_4Picc { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TargetBaudRate The target baud rate between the PN532 and the reader Declaration public TargetBaudRateInialized TargetBaudRate { get; set; } Property Value Type Description TargetBaudRateInialized | Improve this Doc View Source TargetFramingType The target framing type Declaration public TargetFramingType TargetFramingType { get; set; } Property Value Type Description TargetFramingType"
  },
  "devices/Iot.Device.Pn532.AsTarget.TargetPiccParameters.html": {
    "href": "devices/Iot.Device.Pn532.AsTarget.TargetPiccParameters.html",
    "title": "Class TargetPiccParameters | nanoFramework Documentation",
    "keywords": "Class TargetPiccParameters Parameters for a PICC card (like a Credit Card) when PN532 is setup as a target See document AN133910.pdf on nxp website for default values Inheritance Object TargetPiccParameters Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.AsTarget Assembly : Iot.Device.Pn532.dll Syntax public class TargetPiccParameters Properties | Improve this Doc View Source GeneralTarget General target initialization bytes, length can't be more than 47 Default values are provided Declaration public byte[] GeneralTarget { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source HistoricalTarget Historical data for target initialization bytes, length can't be more than 48 Declaration public byte[] HistoricalTarget { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source NfcId3 The NFC Id for a PICC card, legnth must be 10 bytes Declaration public byte[] NfcId3 { get; set; } Property Value Type Description Byte [] Methods | Improve this Doc View Source Serialize() Serialize the data to be used for initialization Declaration public byte[] Serialize() Returns Type Description Byte [] Data serialized"
  },
  "devices/Iot.Device.Pn532.BaudRate.html": {
    "href": "devices/Iot.Device.Pn532.BaudRate.html",
    "title": "Enum BaudRate | nanoFramework Documentation",
    "keywords": "Enum BaudRate Serial port baud rates Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum BaudRate Fields Name Description B0009600 9600 B0019200 19200 B0038400 38400 B0057600 57600 B0115200 115200 B0230400 230400 B0460800 460800 B0921600 921600 B1288000 1288000"
  },
  "devices/Iot.Device.Pn532.BaudRate_1.html": {
    "href": "devices/Iot.Device.Pn532.BaudRate_1.html",
    "title": "Enum BaudRate | nanoFramework Documentation",
    "keywords": "Enum BaudRate Serial port baud rates Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum BaudRate Fields Name Description B0009600 9600 B0019200 19200 B0038400 38400 B0057600 57600 B0115200 115200 B0230400 230400 B0460800 460800 B0921600 921600 B1288000 1288000"
  },
  "devices/Iot.Device.Pn532.DiagnoseMode.html": {
    "href": "devices/Iot.Device.Pn532.DiagnoseMode.html",
    "title": "Enum DiagnoseMode | nanoFramework Documentation",
    "keywords": "Enum DiagnoseMode Diagnostic modes supported by the PN532 Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum DiagnoseMode Fields Name Description AttentionRequestTest Attention Request Test CommunicationLineTest Communication Line Test EchoBackTest Echo Back Test PollingTestToTarget Polling Test To Target RAMTest RAM Test ROMTest ROM Test SelfAntenaTest Self Antena Test"
  },
  "devices/Iot.Device.Pn532.DiagnoseMode_1.html": {
    "href": "devices/Iot.Device.Pn532.DiagnoseMode_1.html",
    "title": "Enum DiagnoseMode | nanoFramework Documentation",
    "keywords": "Enum DiagnoseMode Diagnostic modes supported by the PN532 Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum DiagnoseMode Fields Name Description AttentionRequestTest Attention Request Test CommunicationLineTest Communication Line Test EchoBackTest Echo Back Test PollingTestToTarget Polling Test To Target RAMTest RAM Test ROMTest ROM Test SelfAntenaTest Self Antena Test"
  },
  "devices/IoT.Device.Pn532.ErrorCode.html": {
    "href": "devices/IoT.Device.Pn532.ErrorCode.html",
    "title": "Enum ErrorCode | nanoFramework Documentation",
    "keywords": "Enum ErrorCode All errors that can be returned by the PN532 Namespace : IoT.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum ErrorCode Fields Name Description AbnormalCollision Abnormal Collision BufferSizeInsufficient Buffer Size Insufficient CardDisappeared Card Disappeared CheckByteWrong Check Byte Wrong CommandNotAcceptable Command Not Acceptable ConfiguredTargetBeenReleased Configured Target Been Released CRCError CRC Error DEPProtocolDataFormatNotMatch DEP Protocol Data Format Not Match DEPProtocolInvalidDeviceState DEP Protocol Invalid Device State DEPProtocolTargetModeNotSupport DEP Protocol Target Mode Not Supported ErroneousBitCount Erroneous Bit Count FramingError Framing Error IDCardDoesNotMatch ID Card Does Not Match InternalBufferOverflow Internal Buffer Overflow InvalidParameter Invalid Parameter MifareAuthenticationError Mifare Authentication Error MismatchDEPPassive Mismatch DEP Passive NADMissing NA DMissing None None OperationNotAllowed Operation Not Allowed OverCurrentDetected Over Current Detected ParityError Parity Error RFBufferOverflow RF Buffer Overflow RFFieldNotSwitched RF Field Not Switched RFProtocolError RF Protocol Error TemperatureError Temperature Error Timeout Timeout Unknown Unknown"
  },
  "devices/IoT.Device.Pn532.ErrorCode_1.html": {
    "href": "devices/IoT.Device.Pn532.ErrorCode_1.html",
    "title": "Enum ErrorCode | nanoFramework Documentation",
    "keywords": "Enum ErrorCode All errors that can be returned by the PN532 Namespace : IoT.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum ErrorCode Fields Name Description AbnormalCollision Abnormal Collision BufferSizeInsufficient Buffer Size Insufficient CardDisappeared Card Disappeared CheckByteWrong Check Byte Wrong CommandNotAcceptable Command Not Acceptable ConfiguredTargetBeenReleased Configured Target Been Released CRCError CRC Error DEPProtocolDataFormatNotMatch DEP Protocol Data Format Not Match DEPProtocolInvalidDeviceState DEP Protocol Invalid Device State DEPProtocolTargetModeNotSupport DEP Protocol Target Mode Not Supported ErroneousBitCount Erroneous Bit Count FramingError Framing Error IDCardDoesNotMatch ID Card Does Not Match InternalBufferOverflow Internal Buffer Overflow InvalidParameter Invalid Parameter MifareAuthenticationError Mifare Authentication Error MismatchDEPPassive Mismatch DEP Passive NADMissing NA DMissing None None OperationNotAllowed Operation Not Allowed OverCurrentDetected Over Current Detected ParityError Parity Error RFBufferOverflow RF Buffer Overflow RFFieldNotSwitched RF Field Not Switched RFProtocolError RF Protocol Error TemperatureError Temperature Error Timeout Timeout Unknown Unknown"
  },
  "devices/Iot.Device.Pn532.FirmwareVersion.html": {
    "href": "devices/Iot.Device.Pn532.FirmwareVersion.html",
    "title": "Class FirmwareVersion | nanoFramework Documentation",
    "keywords": "Class FirmwareVersion PN532 firmware version Inheritance Object FirmwareVersion Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public class FirmwareVersion Constructors | Improve this Doc View Source FirmwareVersion(Byte, Version, VersionSupported) Creates PN532 firmware version object Declaration public FirmwareVersion(byte identificationCode, Version version, VersionSupported versionSupported) Parameters Type Name Description Byte identificationCode The identification code for PN532 should be 0x32. Version version The version, latest know one is 1.6. VersionSupported versionSupported All card version supported. | Improve this Doc View Source FirmwareVersion(Byte, Version, VersionSupported) Creates PN532 firmware version object Declaration public FirmwareVersion(byte identificationCode, Version version, VersionSupported versionSupported) Parameters Type Name Description Byte identificationCode The identification code for PN532 should be 0x32. Version version The version, latest know one is 1.6. VersionSupported versionSupported All card version supported. Properties | Improve this Doc View Source IdentificationCode The identification code for PN532 should be 0x32 Declaration public byte IdentificationCode { get; set; } Property Value Type Description Byte | Improve this Doc View Source IdentificationCode The identification code for PN532 should be 0x32 Declaration public byte IdentificationCode { get; set; } Property Value Type Description Byte | Improve this Doc View Source IsPn532 Is it a PN532? Declaration public bool IsPn532 { get; } Property Value Type Description Boolean | Improve this Doc View Source IsPn532 Is it a PN532? Declaration public bool IsPn532 { get; } Property Value Type Description Boolean | Improve this Doc View Source Version The version, latest know one is 1.6 Declaration public Version Version { get; set; } Property Value Type Description Version | Improve this Doc View Source Version The version, latest know one is 1.6 Declaration public Version Version { get; set; } Property Value Type Description Version | Improve this Doc View Source VersionSupported All card version supported Declaration public VersionSupported VersionSupported { get; set; } Property Value Type Description VersionSupported | Improve this Doc View Source VersionSupported All card version supported Declaration public VersionSupported VersionSupported { get; set; } Property Value Type Description VersionSupported"
  },
  "devices/Iot.Device.Pn532.html": {
    "href": "devices/Iot.Device.Pn532.html",
    "title": "Namespace Iot.Device.Pn532 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Pn532 Classes FirmwareVersion PN532 firmware version Pn532 PN532 RFID/NFC reader Enums BaudRate Serial port baud rates BaudRate Serial port baud rates DiagnoseMode Diagnostic modes supported by the PN532 DiagnoseMode Diagnostic modes supported by the PN532 OperatingMode The operation mode 0b0000_0011 is reserved for future usage OperatingMode The operation mode 0b0000_0011 is reserved for future usage ParametersFlags Parameters complementary of the Security Module Parameters Allows to change the behavior of the handshake with the card ParametersFlags Parameters complementary of the Security Module Parameters Allows to change the behavior of the handshake with the card Port3 The GPIO state of the GPIO located on the P3 port Most of those ports can be used as external GPIO ports Refer to the detailed documentation page 79 and 80 Port3 The GPIO state of the GPIO located on the P3 port Most of those ports can be used as external GPIO ports Refer to the detailed documentation page 79 and 80 Port7 The GPIO state of the GPIO located on the P7 port Those ports can be used as external GPIO ports when SPI is not used Refer to the detailed documentation page 79 and 80 Port7 The GPIO state of the GPIO located on the P7 port Those ports can be used as external GPIO ports when SPI is not used Refer to the detailed documentation page 79 and 80 RfConfigurationMode Radio Frequency configuration mode RfConfigurationMode Radio Frequency configuration mode RFConfigurationTimeout The Radio Frequency configuration timeout RFConfigurationTimeout The Radio Frequency configuration timeout SecurityAccessModuleMode Security Access Module Mode SecurityAccessModuleMode Security Access Module Mode SfrRegister Specific SFR registers Please refer to documentation for detailed definition SfrRegister Specific SFR registers Please refer to documentation for detailed definition VersionSupported All supported version for the NFC reader TODO: if more readers appear, this can be for sure place in common and more modes can be added VersionSupported All supported version for the NFC reader TODO: if more readers appear, this can be for sure place in common and more modes can be added WakeUpEnable The modes for which the PN532 can be awake when sleeping WakeUpEnable The modes for which the PN532 can be awake when sleeping"
  },
  "devices/Iot.Device.Pn532.ListPassive.html": {
    "href": "devices/Iot.Device.Pn532.ListPassive.html",
    "title": "Namespace Iot.Device.Pn532.ListPassive | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Pn532.ListPassive Enums MaxTarget The number of targets to look for PollingType Polling type for all supported cards TargetBaudRate The baud rate target for specific cards"
  },
  "devices/Iot.Device.Pn532.ListPassive.MaxTarget.html": {
    "href": "devices/Iot.Device.Pn532.ListPassive.MaxTarget.html",
    "title": "Enum MaxTarget | nanoFramework Documentation",
    "keywords": "Enum MaxTarget The number of targets to look for Namespace : Iot.Device.Pn532.ListPassive Assembly : Iot.Device.Pn532.dll Syntax public enum MaxTarget Fields Name Description One One Two Two"
  },
  "devices/Iot.Device.Pn532.ListPassive.PollingType.html": {
    "href": "devices/Iot.Device.Pn532.ListPassive.PollingType.html",
    "title": "Enum PollingType | nanoFramework Documentation",
    "keywords": "Enum PollingType Polling type for all supported cards Namespace : Iot.Device.Pn532.ListPassive Assembly : Iot.Device.Pn532.dll Syntax public enum PollingType Fields Name Description DepActive106kbps DEP active 106 kbps DepActive212kbps DEP active 212 kbps DepActive424kbps DEP active 424 kbps DepPassive106kbps DEP passive 106 kbps DepPassive212kbps DEP passive 212 kbps DepPassive424kbps DEP passive 424 kbps Felica212kbps FeliCa 212 kbps card Felica424kbps FeliCa 424 kbps card GenericPassive106kbps Generic passive 106 kbps (ISO/IEC14443-4A, Mifare and DEP) GenericPassive212kbps Generic passive 212 kbps (FeliCa and DEP) GenericPassive424kbps Generic passive 424 kbps (FeliCa and DEP), InnovisionJewel Innovision Jewel tag MifareCard Mifare card Passive106kbps Passive 106 kbps ISO/IEC14443-4B Passive106kbpsISO144443_4A Passive 106 kbps ISO/IEC14443-4A Passive106kbpsISO144443_4B Passive 106 kbps ISO/IEC14443-4B"
  },
  "devices/Iot.Device.Pn532.ListPassive.TargetBaudRate.html": {
    "href": "devices/Iot.Device.Pn532.ListPassive.TargetBaudRate.html",
    "title": "Enum TargetBaudRate | nanoFramework Documentation",
    "keywords": "Enum TargetBaudRate The baud rate target for specific cards Namespace : Iot.Device.Pn532.ListPassive Assembly : Iot.Device.Pn532.dll Syntax public enum TargetBaudRate Fields Name Description B106kbpsInnovisionJewelTag 106 kbps Innovision Jewel tag. B106kbpsTypeA 106 kbps type A (ISO/IEC14443 Type A) B106kbpsTypeB 106 kbps type B (ISO/IEC14443-3B) B212kbps 212 kbps (FeliCa polling) B424kbps 424 kbps (FeliCa polling)"
  },
  "devices/Iot.Device.Pn532.OperatingMode.html": {
    "href": "devices/Iot.Device.Pn532.OperatingMode.html",
    "title": "Enum OperatingMode | nanoFramework Documentation",
    "keywords": "Enum OperatingMode The operation mode 0b0000_0011 is reserved for future usage Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum OperatingMode Fields Name Description HighSpeedUart High Speed UART I2c I2C Spi SPI"
  },
  "devices/Iot.Device.Pn532.OperatingMode_1.html": {
    "href": "devices/Iot.Device.Pn532.OperatingMode_1.html",
    "title": "Enum OperatingMode | nanoFramework Documentation",
    "keywords": "Enum OperatingMode The operation mode 0b0000_0011 is reserved for future usage Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum OperatingMode Fields Name Description HighSpeedUart High Speed UART I2c I2C Spi SPI"
  },
  "devices/Iot.Device.Pn532.ParametersFlags.html": {
    "href": "devices/Iot.Device.Pn532.ParametersFlags.html",
    "title": "Enum ParametersFlags | nanoFramework Documentation",
    "keywords": "Enum ParametersFlags Parameters complementary of the Security Module Parameters Allows to change the behavior of the handshake with the card Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax [Flags] public enum ParametersFlags Fields Name Description AutomaticATR_RES bit 2: fAutomaticATR_RES is Automatic generation of the ATR_RES in case of target configuration. AutomaticRATS bit 4: fAutomaticRATS is Automatic generation of the RATS in case of ISO/IEC14443-4 PCD mode. DIDUsed bit 1: fDIDUsed is Use of the DID information in case of initiator configuration (or CID in case of ISO/IEC14443-4 PCD configuration). ISO14443_4_PICC bit 5: fISO14443-4_PICC is The emulation of a ISO/IEC14443-4 PICC is enabled. NADUsed bit 0: fNADUsed is Use of the NAD information in case of initiator configuration (DEP and ISO/IEC14443-4 PCD). RemovePrePostAmble bit 6: fRemovePrePostAmble is The PN532 does not send Preamble and Postamble."
  },
  "devices/Iot.Device.Pn532.ParametersFlags_1.html": {
    "href": "devices/Iot.Device.Pn532.ParametersFlags_1.html",
    "title": "Enum ParametersFlags | nanoFramework Documentation",
    "keywords": "Enum ParametersFlags Parameters complementary of the Security Module Parameters Allows to change the behavior of the handshake with the card Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax [Flags] public enum ParametersFlags Fields Name Description AutomaticATR_RES bit 2: fAutomaticATR_RES is Automatic generation of the ATR_RES in case of target configuration. AutomaticRATS bit 4: fAutomaticRATS is Automatic generation of the RATS in case of ISO/IEC14443-4 PCD mode. DIDUsed bit 1: fDIDUsed is Use of the DID information in case of initiator configuration (or CID in case of ISO/IEC14443-4 PCD configuration). ISO14443_4_PICC bit 5: fISO14443-4_PICC is The emulation of a ISO/IEC14443-4 PICC is enabled. NADUsed bit 0: fNADUsed is Use of the NAD information in case of initiator configuration (DEP and ISO/IEC14443-4 PCD). RemovePrePostAmble bit 6: fRemovePrePostAmble is The PN532 does not send Preamble and Postamble."
  },
  "devices/Iot.Device.Pn532.Pn532.html": {
    "href": "devices/Iot.Device.Pn532.Pn532.html",
    "title": "Class Pn532 | nanoFramework Documentation",
    "keywords": "Class Pn532 PN532 RFID/NFC reader Inheritance Object Pn532 Implements IDisposable CardTransceiver Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public class Pn532 : CardTransceiver, IDisposable, CardTransceiver Constructors | Improve this Doc View Source Pn532(I2cDevice) Create a PN532 using I2C Declaration public Pn532(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device | Improve this Doc View Source Pn532(I2cDevice) Create a PN532 using I2C Declaration public Pn532(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device | Improve this Doc View Source Pn532(SpiDevice, Int32, GpioController, Boolean) Create a PN532 using SPI Declaration public Pn532(SpiDevice spiDevice, int pinChipSelect, GpioController controller = null, bool shouldDispose = false) Parameters Type Name Description SpiDevice spiDevice The SPI Device Int32 pinChipSelect The GPIO pin number for the chip select GpioController controller A GPIO controller Boolean shouldDispose Dispose the GPIO Controller at the end | Improve this Doc View Source Pn532(SpiDevice, Int32, GpioController, Boolean) Create a PN532 using SPI Declaration public Pn532(SpiDevice spiDevice, int pinChipSelect, GpioController controller = null, bool shouldDispose = false) Parameters Type Name Description SpiDevice spiDevice The SPI Device Int32 pinChipSelect The GPIO pin number for the chip select GpioController controller A GPIO controller Boolean shouldDispose Dispose the GPIO Controller at the end | Improve this Doc View Source Pn532(String) Create a PN532 using Serial Port Declaration public Pn532(string portName) Parameters Type Name Description String portName The port name | Improve this Doc View Source Pn532(String) Create a PN532 using Serial Port Declaration public Pn532(string portName) Parameters Type Name Description String portName The port name Fields | Improve this Doc View Source I2cDefaultAddress The default I2C address Declaration public const byte I2cDefaultAddress = 36 Field Value Type Description Byte | Improve this Doc View Source I2cDefaultAddress The default I2C address Declaration public const byte I2cDefaultAddress = 36 Field Value Type Description Byte | Improve this Doc View Source SpiClockFrequency PN532 SPI Clock Frequency Declaration public const int SpiClockFrequency = 2000000 Field Value Type Description Int32 | Improve this Doc View Source SpiClockFrequency PN532 SPI Clock Frequency Declaration public const int SpiClockFrequency = 2000000 Field Value Type Description Int32 | Improve this Doc View Source SpiMode Only SPI Mode supported is Mode0 Declaration public const SpiMode SpiMode = SpiMode.Mode0 Field Value Type Description SpiMode | Improve this Doc View Source SpiMode Only SPI Mode supported is Mode0 Declaration public const SpiMode SpiMode = SpiMode.Mode0 Field Value Type Description SpiMode Properties | Improve this Doc View Source FirmwareVersion Firmware version information Declaration public FirmwareVersion FirmwareVersion { get; } Property Value Type Description FirmwareVersion | Improve this Doc View Source FirmwareVersion Firmware version information Declaration public FirmwareVersion FirmwareVersion { get; } Property Value Type Description FirmwareVersion | Improve this Doc View Source ParametersFlags Get or set the Security Access Module parameters Declaration public ParametersFlags ParametersFlags { get; set; } Property Value Type Description ParametersFlags | Improve this Doc View Source ParametersFlags Get or set the Security Access Module parameters Declaration public ParametersFlags ParametersFlags { get; set; } Property Value Type Description ParametersFlags | Improve this Doc View Source ReadTimeOut Set or get the read timeout for I2C and SPI Please refer to the documentation to set the right timeout value depending on the communication mode you are using Declaration public int ReadTimeOut { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ReadTimeOut Set or get the read timeout for I2C and SPI Please refer to the documentation to set the right timeout value depending on the communication mode you are using Declaration public int ReadTimeOut { get; set; } Property Value Type Description Int32 | Improve this Doc View Source SecurityAccessModuleMode Get or set the Security Access Module Mode Declaration public SecurityAccessModuleMode SecurityAccessModuleMode { get; set; } Property Value Type Description SecurityAccessModuleMode | Improve this Doc View Source SecurityAccessModuleMode Get or set the Security Access Module Mode Declaration public SecurityAccessModuleMode SecurityAccessModuleMode { get; set; } Property Value Type Description SecurityAccessModuleMode | Improve this Doc View Source VirtualCardTimeout Get or set the timeout when PN532 is in virtual card mode Declaration public uint VirtualCardTimeout { get; set; } Property Value Type Description UInt32 | Improve this Doc View Source VirtualCardTimeout Get or set the timeout when PN532 is in virtual card mode Declaration public uint VirtualCardTimeout { get; set; } Property Value Type Description UInt32 Methods | Improve this Doc View Source AutoPoll(Byte, UInt16, PollingType[]) Automatically poll specific types of devices Declaration public byte[] AutoPoll(byte numberPolling, ushort periodMilliSecond, PollingType[] pollingType) Parameters Type Name Description Byte numberPolling The number of polling before accepting a card UInt16 periodMilliSecond The period of polling before accepting a card PollingType [] pollingType The type of cards to poll Returns Type Description Byte [] A raw byte array containing the number of cards, the card type and the raw data. Null if nothing has been polled | Improve this Doc View Source AutoPoll(Byte, UInt16, PollingType[]) Automatically poll specific types of devices Declaration public byte[] AutoPoll(byte numberPolling, ushort periodMilliSecond, PollingType[] pollingType) Parameters Type Name Description Byte numberPolling The number of polling before accepting a card UInt16 periodMilliSecond The period of polling before accepting a card PollingType [] pollingType The type of cards to poll Returns Type Description Byte [] A raw byte array containing the number of cards, the card type and the raw data. Null if nothing has been polled | Improve this Doc View Source DeselectTarget(Byte) Deselect a specific target number card Declaration public bool DeselectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Target number card Returns Type Description Boolean True if success | Improve this Doc View Source DeselectTarget(Byte) Deselect a specific target number card Declaration public bool DeselectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Target number card Returns Type Description Boolean True if success | Improve this Doc View Source Dispose() Dispose Declaration public void Dispose() | Improve this Doc View Source Dispose() Dispose Declaration public void Dispose() | Improve this Doc View Source InitAsTarget(TargetModeInitialization, TargetMifareParameters, TargetFeliCaParameters, TargetPiccParameters) Set the PN532 as a target, so as a card Declaration public AsTargetInitialized InitAsTarget(TargetModeInitialization mode, TargetMifareParameters mifare, TargetFeliCaParameters feliCa, TargetPiccParameters picc) Parameters Type Name Description TargetModeInitialization mode TargetMifareParameters mifare TargetFeliCaParameters feliCa TargetPiccParameters picc Returns Type Description AsTargetInitialized | Improve this Doc View Source InitAsTarget(TargetModeInitialization, TargetMifareParameters, TargetFeliCaParameters, TargetPiccParameters) Set the PN532 as a target, so as a card Declaration public AsTargetInitialized InitAsTarget(TargetModeInitialization mode, TargetMifareParameters mifare, TargetFeliCaParameters feliCa, TargetPiccParameters picc) Parameters Type Name Description TargetModeInitialization mode TargetMifareParameters mifare TargetFeliCaParameters feliCa TargetPiccParameters picc Returns Type Description AsTargetInitialized | Improve this Doc View Source ListPassiveTarget(MaxTarget, TargetBaudRate) List all targets cards in range When using this function, you can't determine which target you've read So you'll need to use the Decode functions to try to get a card type So use this function only with a specific card type. Prefer the AutoPoll function As the type identified is returned Declaration public byte[] ListPassiveTarget(MaxTarget maxTarget, TargetBaudRate targetBaudRate) Parameters Type Name Description MaxTarget maxTarget The maximum number of targets TargetBaudRate targetBaudRate The baud rate to use Returns Type Description Byte [] A raw byte array with the data of the targets if any has been identified | Improve this Doc View Source ListPassiveTarget(MaxTarget, TargetBaudRate) List all targets cards in range When using this function, you can't determine which target you've read So you'll need to use the Decode functions to try to get a card type So use this function only with a specific card type. Prefer the AutoPoll function As the type identified is returned Declaration public byte[] ListPassiveTarget(MaxTarget maxTarget, TargetBaudRate targetBaudRate) Parameters Type Name Description MaxTarget maxTarget The maximum number of targets TargetBaudRate targetBaudRate The baud rate to use Returns Type Description Byte [] A raw byte array with the data of the targets if any has been identified | Improve this Doc View Source ListPassiveTarget(MaxTarget, TargetBaudRate, SpanByte) List all targets cards in range When using this function, you can't determine which target you've read So you'll need to use the Decode functions to try to get a card type So use this function only with a specific card type. Prefer the AutoPoll function As the type identified is returned Declaration public byte[] ListPassiveTarget(MaxTarget maxTarget, TargetBaudRate targetBaudRate, SpanByte initiatorData) Parameters Type Name Description MaxTarget maxTarget The maximum number of targets TargetBaudRate targetBaudRate The baud rate to use to find cards SpanByte initiatorData Specific initialization data Returns Type Description Byte [] A raw byte array with the data of the targets if any has been identified | Improve this Doc View Source ListPassiveTarget(MaxTarget, TargetBaudRate, SpanByte) List all targets cards in range When using this function, you can't determine which target you've read So you'll need to use the Decode functions to try to get a card type So use this function only with a specific card type. Prefer the AutoPoll function As the type identified is returned Declaration public byte[] ListPassiveTarget(MaxTarget maxTarget, TargetBaudRate targetBaudRate, SpanByte initiatorData) Parameters Type Name Description MaxTarget maxTarget The maximum number of targets TargetBaudRate targetBaudRate The baud rate to use to find cards SpanByte initiatorData Specific initialization data Returns Type Description Byte [] A raw byte array with the data of the targets if any has been identified | Improve this Doc View Source PowerDown(WakeUpEnable) Power down the PN532 Declaration public bool PowerDown(WakeUpEnable wakeUpEnable) Parameters Type Name Description WakeUpEnable wakeUpEnable What can wake the PN532 Returns Type Description Boolean True if success | Improve this Doc View Source PowerDown(WakeUpEnable) Power down the PN532 Declaration public bool PowerDown(WakeUpEnable wakeUpEnable) Parameters Type Name Description WakeUpEnable wakeUpEnable What can wake the PN532 Returns Type Description Boolean True if success | Improve this Doc View Source ReadDataAsTarget(SpanByte) read data from the reader when PN532 is a target Declaration public int ReadDataAsTarget(SpanByte receivedData) Parameters Type Name Description SpanByte receivedData A Span byte array for the read data. Note the first byte contains the status Returns Type Description Int32 Number of byte read | Improve this Doc View Source ReadDataAsTarget(SpanByte) read data from the reader when PN532 is a target Declaration public int ReadDataAsTarget(SpanByte receivedData) Parameters Type Name Description SpanByte receivedData A Span byte array for the read data. Note the first byte contains the status Returns Type Description Int32 Number of byte read | Improve this Doc View Source ReadGpio(out Port3, out Port7, out OperatingMode) Read the PN532 GPIO Declaration public bool ReadGpio(out Port3 p3, out Port7 p7, out OperatingMode l0L1) Parameters Type Name Description Port3 p3 The P3 GPIO Port7 p7 The P7 GPIO OperatingMode l0L1 The specific operation mode register Returns Type Description Boolean True if success | Improve this Doc View Source ReadGpio(out Port3, out Port7, out OperatingMode) Read the PN532 GPIO Declaration public bool ReadGpio(out Port3 p3, out Port7 p7, out OperatingMode l0L1) Parameters Type Name Description Port3 p3 The P3 GPIO Port7 p7 The P7 GPIO OperatingMode l0L1 The specific operation mode register Returns Type Description Boolean True if success | Improve this Doc View Source ReadRegister(UInt16, out Byte) Read a single register Declaration public bool ReadRegister(ushort register, out byte registerValue) Parameters Type Name Description UInt16 register The register to read Byte registerValue The value of the register Returns Type Description Boolean True if success | Improve this Doc View Source ReadRegister(UInt16, out Byte) Read a single register Declaration public bool ReadRegister(ushort register, out byte registerValue) Parameters Type Name Description UInt16 register The register to read Byte registerValue The value of the register Returns Type Description Boolean True if success | Improve this Doc View Source ReadRegister(UInt16[], SpanByte) Read any register from the XRAM Declaration public bool ReadRegister(ushort[] registers, SpanByte registerValues) Parameters Type Name Description UInt16 [] registers Array of register to read SpanByte registerValues Register read values Returns Type Description Boolean True if success | Improve this Doc View Source ReadRegister(UInt16[], SpanByte) Read any register from the XRAM Declaration public bool ReadRegister(ushort[] registers, SpanByte registerValues) Parameters Type Name Description UInt16 [] registers Array of register to read SpanByte registerValues Register read values Returns Type Description Boolean True if success | Improve this Doc View Source ReadRegisterSfr(SfrRegister[], SpanByte) Read an array of SFR registers Declaration public bool ReadRegisterSfr(SfrRegister[] registers, SpanByte registerValues) Parameters Type Name Description SfrRegister [] registers Array of register to read SpanByte registerValues Register read values Returns Type Description Boolean True if success | Improve this Doc View Source ReadRegisterSfr(SfrRegister[], SpanByte) Read an array of SFR registers Declaration public bool ReadRegisterSfr(SfrRegister[] registers, SpanByte registerValues) Parameters Type Name Description SfrRegister [] registers Array of register to read SpanByte registerValues Register read values Returns Type Description Boolean True if success | Improve this Doc View Source ReleaseTarget(Byte) Release a specific target number card Declaration public bool ReleaseTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Target number card Returns Type Description Boolean True if success | Improve this Doc View Source ReleaseTarget(Byte) Release a specific target number card Declaration public bool ReleaseTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Target number card Returns Type Description Boolean True if success | Improve this Doc View Source ReselectTarget(Byte) Declaration public override bool ReselectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Returns Type Description Boolean | Improve this Doc View Source ReselectTarget(Byte) Declaration public override bool ReselectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Returns Type Description Boolean | Improve this Doc View Source RunSelfTest(DiagnoseMode) Run self tests Note: some self tests are not implemented yet Declaration public bool RunSelfTest(DiagnoseMode diagnoseMode) Parameters Type Name Description DiagnoseMode diagnoseMode The self test to run Returns Type Description Boolean True when success | Improve this Doc View Source RunSelfTest(DiagnoseMode) Run self tests Note: some self tests are not implemented yet Declaration public bool RunSelfTest(DiagnoseMode diagnoseMode) Parameters Type Name Description DiagnoseMode diagnoseMode The self test to run Returns Type Description Boolean True when success | Improve this Doc View Source SelectTarget(Byte) Select a specific target number card Declaration public bool SelectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Target number card Returns Type Description Boolean True if success | Improve this Doc View Source SelectTarget(Byte) Select a specific target number card Declaration public bool SelectTarget(byte targetNumber) Parameters Type Name Description Byte targetNumber Target number card Returns Type Description Boolean True if success | Improve this Doc View Source SetAnalog106kbpsTypeA(Analog106kbpsTypeAMode) Set the specific 106 kbps card Type A modes Declaration public bool SetAnalog106kbpsTypeA(Analog106kbpsTypeAMode analog106Kbps) Parameters Type Name Description Analog106kbpsTypeAMode analog106Kbps The mode settings Returns Type Description Boolean True is success | Improve this Doc View Source SetAnalog106kbpsTypeA(Analog106kbpsTypeAMode) Set the specific 106 kbps card Type A modes Declaration public bool SetAnalog106kbpsTypeA(Analog106kbpsTypeAMode analog106Kbps) Parameters Type Name Description Analog106kbpsTypeAMode analog106Kbps The mode settings Returns Type Description Boolean True is success | Improve this Doc View Source SetAnalog212_424_848kbps(Analog212_424_848kbpsMode) Configure analog mode Declaration public bool SetAnalog212_424_848kbps(Analog212_424_848kbpsMode analog212_424_848Kbps) Parameters Type Name Description Analog212_424_848kbpsMode analog212_424_848Kbps Settings Returns Type Description Boolean True is success | Improve this Doc View Source SetAnalog212_424_848kbps(Analog212_424_848kbpsMode) Configure analog mode Declaration public bool SetAnalog212_424_848kbps(Analog212_424_848kbpsMode analog212_424_848Kbps) Parameters Type Name Description Analog212_424_848kbpsMode analog212_424_848Kbps Settings Returns Type Description Boolean True is success | Improve this Doc View Source SetAnalog212_424Kbps(Analog212_424kbpsMode) Set the specific 212 424 kbps card modes Declaration public bool SetAnalog212_424Kbps(Analog212_424kbpsMode analog212_424) Parameters Type Name Description Analog212_424kbpsMode analog212_424 The mode settings Returns Type Description Boolean True is success | Improve this Doc View Source SetAnalog212_424Kbps(Analog212_424kbpsMode) Set the specific 212 424 kbps card modes Declaration public bool SetAnalog212_424Kbps(Analog212_424kbpsMode analog212_424) Parameters Type Name Description Analog212_424kbpsMode analog212_424 The mode settings Returns Type Description Boolean True is success | Improve this Doc View Source SetAnalogTypeB(AnalogSettingsTypeBMode) Set the specific 106 kbps card Type B modes Declaration public bool SetAnalogTypeB(AnalogSettingsTypeBMode analogSettings) Parameters Type Name Description AnalogSettingsTypeBMode analogSettings The mode settings Returns Type Description Boolean True is success | Improve this Doc View Source SetAnalogTypeB(AnalogSettingsTypeBMode) Set the specific 106 kbps card Type B modes Declaration public bool SetAnalogTypeB(AnalogSettingsTypeBMode analogSettings) Parameters Type Name Description AnalogSettingsTypeBMode analogSettings The mode settings Returns Type Description Boolean True is success | Improve this Doc View Source SetMaxRetriesInitialization(MaxRetriesMode) Set the MAximu Retries during the various initialization modes Declaration public bool SetMaxRetriesInitialization(MaxRetriesMode maxRetriesMode) Parameters Type Name Description MaxRetriesMode maxRetriesMode Retry modes Returns Type Description Boolean True is success | Improve this Doc View Source SetMaxRetriesInitialization(MaxRetriesMode) Set the MAximu Retries during the various initialization modes Declaration public bool SetMaxRetriesInitialization(MaxRetriesMode maxRetriesMode) Parameters Type Name Description MaxRetriesMode maxRetriesMode Retry modes Returns Type Description Boolean True is success | Improve this Doc View Source SetMaxRetryWriteRead(Byte) Set the Maximum Retry in the 2 WriteRead modes Declaration public bool SetMaxRetryWriteRead(byte numberRetries = 0) Parameters Type Name Description Byte numberRetries The number of retries Returns Type Description Boolean True is success | Improve this Doc View Source SetMaxRetryWriteRead(Byte) Set the Maximum Retry in the 2 WriteRead modes Declaration public bool SetMaxRetryWriteRead(byte numberRetries = 0) Parameters Type Name Description Byte numberRetries The number of retries Returns Type Description Boolean True is success | Improve this Doc View Source SetRfField(RfFieldMode) Set the Radio Frequency Field Mode Declaration public bool SetRfField(RfFieldMode rfFieldMode) Parameters Type Name Description RfFieldMode rfFieldMode Radio Frequency Field Mode Returns Type Description Boolean True is success | Improve this Doc View Source SetRfField(RfFieldMode) Set the Radio Frequency Field Mode Declaration public bool SetRfField(RfFieldMode rfFieldMode) Parameters Type Name Description RfFieldMode rfFieldMode Radio Frequency Field Mode Returns Type Description Boolean True is success | Improve this Doc View Source SetSerialBaudRate(BaudRate) Setup the baud rate communication when using the HSU Serial Port mode Declaration public bool SetSerialBaudRate(BaudRate baudRate) Parameters Type Name Description BaudRate baudRate Baud rate Returns Type Description Boolean True if success | Improve this Doc View Source SetSerialBaudRate(BaudRate) Setup the baud rate communication when using the HSU Serial Port mode Declaration public bool SetSerialBaudRate(BaudRate baudRate) Parameters Type Name Description BaudRate baudRate Baud rate Returns Type Description Boolean True if success | Improve this Doc View Source SetVariousTimings(VariousTimingsMode) Set the Various Timing Mode Declaration public bool SetVariousTimings(VariousTimingsMode variousTimingsMode) Parameters Type Name Description VariousTimingsMode variousTimingsMode Various Timing Mode Returns Type Description Boolean True is success | Improve this Doc View Source SetVariousTimings(VariousTimingsMode) Set the Various Timing Mode Declaration public bool SetVariousTimings(VariousTimingsMode variousTimingsMode) Parameters Type Name Description VariousTimingsMode variousTimingsMode Various Timing Mode Returns Type Description Boolean True is success | Improve this Doc View Source Transceive(Byte, SpanByte, SpanByte) Write data to a card and read what the card responses Declaration public override int Transceive(byte targetNumber, SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description Byte targetNumber The card target number SpanByte dataToSend The data to write to the card SpanByte dataFromCard The potential data to receive Returns Type Description Int32 The number of bytes read | Improve this Doc View Source Transceive(Byte, SpanByte, SpanByte) Write data to a card and read what the card responses Declaration public override int Transceive(byte targetNumber, SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description Byte targetNumber The card target number SpanByte dataToSend The data to write to the card SpanByte dataFromCard The potential data to receive Returns Type Description Int32 The number of bytes read | Improve this Doc View Source TransceiveAdvance(Byte, SpanByte, SpanByte) Use the build in feature to transceive the data to the card. This add specific logic for some cards. Declaration public int TransceiveAdvance(byte targetNumber, SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description Byte targetNumber The card target number SpanByte dataToSend The data to write to the card SpanByte dataFromCard The potential data to receive Returns Type Description Int32 The number of bytes read | Improve this Doc View Source TransceiveAdvance(Byte, SpanByte, SpanByte) Use the build in feature to transceive the data to the card. This add specific logic for some cards. Declaration public int TransceiveAdvance(byte targetNumber, SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description Byte targetNumber The card target number SpanByte dataToSend The data to write to the card SpanByte dataFromCard The potential data to receive Returns Type Description Int32 The number of bytes read | Improve this Doc View Source TryDecode106kbpsTypeA(SpanByte) Try to decode a raw byte array containing target information to a 106 kbps Type A card Declaration public Data106kbpsTypeA TryDecode106kbpsTypeA(SpanByte toDecode) Parameters Type Name Description SpanByte toDecode The raw byte array Returns Type Description Data106kbpsTypeA A decoded card of null if it can't | Improve this Doc View Source TryDecode106kbpsTypeA(SpanByte) Try to decode a raw byte array containing target information to a 106 kbps Type A card Declaration public Data106kbpsTypeA TryDecode106kbpsTypeA(SpanByte toDecode) Parameters Type Name Description SpanByte toDecode The raw byte array Returns Type Description Data106kbpsTypeA A decoded card of null if it can't | Improve this Doc View Source TryDecodeData106kbpsInnovisionJewel(SpanByte) Try to decode a raw byte array containing target information to a 106 kbps Innovision Jewel card Declaration public Data106kbpsInnovisionJewel TryDecodeData106kbpsInnovisionJewel(SpanByte toDecode) Parameters Type Name Description SpanByte toDecode The raw byte array Returns Type Description Data106kbpsInnovisionJewel A decoded card of null if it can't | Improve this Doc View Source TryDecodeData106kbpsInnovisionJewel(SpanByte) Try to decode a raw byte array containing target information to a 106 kbps Innovision Jewel card Declaration public Data106kbpsInnovisionJewel TryDecodeData106kbpsInnovisionJewel(SpanByte toDecode) Parameters Type Name Description SpanByte toDecode The raw byte array Returns Type Description Data106kbpsInnovisionJewel A decoded card of null if it can't | Improve this Doc View Source TryDecodeData106kbpsTypeB(SpanByte) Try to decode a raw byte array containing target information to a 106 kbps Type B card Declaration public Data106kbpsTypeB TryDecodeData106kbpsTypeB(SpanByte toDecode) Parameters Type Name Description SpanByte toDecode The raw byte array Returns Type Description Data106kbpsTypeB A decoded card of null if it can't | Improve this Doc View Source TryDecodeData106kbpsTypeB(SpanByte) Try to decode a raw byte array containing target information to a 106 kbps Type B card Declaration public Data106kbpsTypeB TryDecodeData106kbpsTypeB(SpanByte toDecode) Parameters Type Name Description SpanByte toDecode The raw byte array Returns Type Description Data106kbpsTypeB A decoded card of null if it can't | Improve this Doc View Source TryDecodeData212_424Kbps(SpanByte) Try to decode a raw byte array containing target information to a 212 424 kbps card Declaration public Data212_424kbps TryDecodeData212_424Kbps(SpanByte toDecode) Parameters Type Name Description SpanByte toDecode The raw byte array Returns Type Description Data212_424kbps A decoded card of null if it can't | Improve this Doc View Source TryDecodeData212_424Kbps(SpanByte) Try to decode a raw byte array containing target information to a 212 424 kbps card Declaration public Data212_424kbps TryDecodeData212_424Kbps(SpanByte toDecode) Parameters Type Name Description SpanByte toDecode The raw byte array Returns Type Description Data212_424kbps A decoded card of null if it can't | Improve this Doc View Source WakeUp() Wake Up the PN532 Declaration public void WakeUp() | Improve this Doc View Source WakeUp() Wake Up the PN532 Declaration public void WakeUp() | Improve this Doc View Source WriteDataAsTarget(SpanByte) Write data to the reader when PN532 is a target Declaration public bool WriteDataAsTarget(SpanByte dataToSend) Parameters Type Name Description SpanByte dataToSend The data to send Returns Type Description Boolean True if success | Improve this Doc View Source WriteDataAsTarget(SpanByte) Write data to the reader when PN532 is a target Declaration public bool WriteDataAsTarget(SpanByte dataToSend) Parameters Type Name Description SpanByte dataToSend The data to send Returns Type Description Boolean True if success | Improve this Doc View Source WriteGpio(Port3) Write the PN532 GPIO port 3 leaving port 7 in it's current state Declaration public bool WriteGpio(Port3 p3) Parameters Type Name Description Port3 p3 The P3 GPIO Returns Type Description Boolean True if success | Improve this Doc View Source WriteGpio(Port3) Write the PN532 GPIO port 3 leaving port 7 in it's current state Declaration public bool WriteGpio(Port3 p3) Parameters Type Name Description Port3 p3 The P3 GPIO Returns Type Description Boolean True if success | Improve this Doc View Source WriteGpio(Port7) Write the PN532 GPIO port 7 leaving port 3 in it's current state Declaration public bool WriteGpio(Port7 p7) Parameters Type Name Description Port7 p7 The P7 GPIO Returns Type Description Boolean True if success | Improve this Doc View Source WriteGpio(Port7) Write the PN532 GPIO port 7 leaving port 3 in it's current state Declaration public bool WriteGpio(Port7 p7) Parameters Type Name Description Port7 p7 The P7 GPIO Returns Type Description Boolean True if success | Improve this Doc View Source WriteGpio(Port7, Port3) Write the PN532 GPIO ports 3 and 7 Declaration public bool WriteGpio(Port7 p7, Port3 p3) Parameters Type Name Description Port7 p7 The P7 GPIO Port3 p3 The P3 GPIO Returns Type Description Boolean True if success | Improve this Doc View Source WriteGpio(Port7, Port3) Write the PN532 GPIO ports 3 and 7 Declaration public bool WriteGpio(Port7 p7, Port3 p3) Parameters Type Name Description Port7 p7 The P7 GPIO Port3 p3 The P3 GPIO Returns Type Description Boolean True if success | Improve this Doc View Source WriteReadDirect(SpanByte, SpanByte) Write an array of data directly to the card without adding anything from the PN532 and read the raw data Declaration public int WriteReadDirect(SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description SpanByte dataToSend The data to write to the card SpanByte dataFromCard The potential data to receive Returns Type Description Int32 The number of bytes read | Improve this Doc View Source WriteReadDirect(SpanByte, SpanByte) Write an array of data directly to the card without adding anything from the PN532 and read the raw data Declaration public int WriteReadDirect(SpanByte dataToSend, SpanByte dataFromCard) Parameters Type Name Description SpanByte dataToSend The data to write to the card SpanByte dataFromCard The potential data to receive Returns Type Description Int32 The number of bytes read | Improve this Doc View Source WriteRegister(UInt16, Byte) Write a single register Declaration public bool WriteRegister(ushort register, byte registerValue) Parameters Type Name Description UInt16 register The register to write Byte registerValue The value of the register Returns Type Description Boolean True if success | Improve this Doc View Source WriteRegister(UInt16, Byte) Write a single register Declaration public bool WriteRegister(ushort register, byte registerValue) Parameters Type Name Description UInt16 register The register to write Byte registerValue The value of the register Returns Type Description Boolean True if success | Improve this Doc View Source WriteRegister(UInt16[], SpanByte) Write an array of register Declaration public bool WriteRegister(ushort[] registers, SpanByte registerValue) Parameters Type Name Description UInt16 [] registers Array of register to write SpanByte registerValue Register values to write Returns Type Description Boolean | Improve this Doc View Source WriteRegister(UInt16[], SpanByte) Write an array of register Declaration public bool WriteRegister(ushort[] registers, SpanByte registerValue) Parameters Type Name Description UInt16 [] registers Array of register to write SpanByte registerValue Register values to write Returns Type Description Boolean | Improve this Doc View Source WriteRegisterSfr(SfrRegister[], SpanByte) Write an array of SFR registers Declaration public bool WriteRegisterSfr(SfrRegister[] registers, SpanByte registerValue) Parameters Type Name Description SfrRegister [] registers Array of register to write SpanByte registerValue Register values to write Returns Type Description Boolean True if success | Improve this Doc View Source WriteRegisterSfr(SfrRegister[], SpanByte) Write an array of SFR registers Declaration public bool WriteRegisterSfr(SfrRegister[] registers, SpanByte registerValue) Parameters Type Name Description SfrRegister [] registers Array of register to write SpanByte registerValue Register values to write Returns Type Description Boolean True if success Implements IDisposable CardTransceiver"
  },
  "devices/Iot.Device.Pn532.Port3.html": {
    "href": "devices/Iot.Device.Pn532.Port3.html",
    "title": "Enum Port3 | nanoFramework Documentation",
    "keywords": "Enum Port3 The GPIO state of the GPIO located on the P3 port Most of those ports can be used as external GPIO ports Refer to the detailed documentation page 79 and 80 Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax [Flags] public enum Port3 Fields Name Description P30 P30 P31 P31 P32 P32 P33 P33 P34 P34 P35 P35"
  },
  "devices/Iot.Device.Pn532.Port3_1.html": {
    "href": "devices/Iot.Device.Pn532.Port3_1.html",
    "title": "Enum Port3 | nanoFramework Documentation",
    "keywords": "Enum Port3 The GPIO state of the GPIO located on the P3 port Most of those ports can be used as external GPIO ports Refer to the detailed documentation page 79 and 80 Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax [Flags] public enum Port3 Fields Name Description P30 P30 P31 P31 P32 P32 P33 P33 P34 P34 P35 P35"
  },
  "devices/Iot.Device.Pn532.Port7.html": {
    "href": "devices/Iot.Device.Pn532.Port7.html",
    "title": "Enum Port7 | nanoFramework Documentation",
    "keywords": "Enum Port7 The GPIO state of the GPIO located on the P7 port Those ports can be used as external GPIO ports when SPI is not used Refer to the detailed documentation page 79 and 80 Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax [Flags] public enum Port7 Fields Name Description P71 P71 P72 P72"
  },
  "devices/Iot.Device.Pn532.Port7_1.html": {
    "href": "devices/Iot.Device.Pn532.Port7_1.html",
    "title": "Enum Port7 | nanoFramework Documentation",
    "keywords": "Enum Port7 The GPIO state of the GPIO located on the P7 port Those ports can be used as external GPIO ports when SPI is not used Refer to the detailed documentation page 79 and 80 Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax [Flags] public enum Port7 Fields Name Description P71 P71 P72 P72"
  },
  "devices/Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.html": {
    "href": "devices/Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.html",
    "title": "Class Analog106kbpsTypeAMode | nanoFramework Documentation",
    "keywords": "Class Analog106kbpsTypeAMode This CfgItem is used to choose the analog settings that the PN532 will use for the baudrate 106kbps type A. When using this command, the host controller has to provide 11 values (ConfigurationData[]) for the following internal registers Actually, there is only one CIU_Demod register which defines a setting used by the reader in reception only.But depending on the RF condition, two different settings can be used for this register: • CIU_Demod when own RF is On defines a setting when its RF field is on during a reception i.e.initiator passive mode, • CIU_Demod when own RF is Off defines a setting when its RF field is off during a reception i.e.initiator active mode. CIU = Contactless Interface Unit Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144 Inheritance Object Analog106kbpsTypeAMode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.RfConfiguration Assembly : Iot.Device.Pn532.dll Syntax public class Analog106kbpsTypeAMode Properties | Improve this Doc View Source CWGsP CWGsP, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Declaration public byte CWGsP { get; set; } Property Value Type Description Byte | Improve this Doc View Source DemodWhenRfOff DemodWhenRfOff, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Defines demodulator settings when radio frequency is off Declaration public byte DemodWhenRfOff { get; set; } Property Value Type Description Byte | Improve this Doc View Source DemodWhenRfOn DemodWhenRfOn, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Defines demodulator settings when radio frequency is on Declaration public byte DemodWhenRfOn { get; set; } Property Value Type Description Byte | Improve this Doc View Source GsNOff GsNOff, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects the conductance of the antenna driver pins TX1 and TX2 for load modulation when own RF field is switched off Declaration public byte GsNOff { get; set; } Property Value Type Description Byte | Improve this Doc View Source GsNOn GsNOn, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects the conductance of the antenna driver pins TX1 and TX2 for modulation, when own RF field is switched on Declaration public byte GsNOn { get; set; } Property Value Type Description Byte | Improve this Doc View Source MifNFC MifNFC, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Controls the communication in ISO/IEC 14443/MIFARE and NFC target mode at 106 kbit/s Declaration public byte MifNFC { get; set; } Property Value Type Description Byte | Improve this Doc View Source ModGsP ModGsP, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects the conductance of the antenna driver pins TX1 and TX2 when not in modulation phase Declaration public byte ModGsP { get; set; } Property Value Type Description Byte | Improve this Doc View Source ModWidth ModWidth, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Controls the setting of the width of the Miller pause Declaration public byte ModWidth { get; set; } Property Value Type Description Byte | Improve this Doc View Source RfConfiguration RFCfg, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Declaration public byte RfConfiguration { get; set; } Property Value Type Description Byte | Improve this Doc View Source RxThreshold RxThreshold, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects thresholds for the bit decoder Declaration public byte RxThreshold { get; set; } Property Value Type Description Byte | Improve this Doc View Source TxBitPhase TxBitPhase, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Bit synchronization at 106 kbit/s Declaration public byte TxBitPhase { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Serialize() Get the byte array to send Declaration public byte[] Serialize() Returns Type Description Byte [] Serialized value"
  },
  "devices/Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.html": {
    "href": "devices/Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.html",
    "title": "Class Analog212_424_848kbpsMode | nanoFramework Documentation",
    "keywords": "Class Analog212_424_848kbpsMode This CfgItem is used to choose the analog settings that the PN532 will use for the baudrates 212/424/848 kbps with ISO/IEC14443-4 cards. When using this command, the host controller has to provide 9 values (ConfigurationData[]) for the following internal registers: Except for these three specific registers (CIU_RxThreshold, CIU_ModWidth and CIU_MifNFC), the 8 remaining analog registers are the same as the previous CfgItem 0x0A. CIU = Contactless Interface Unit Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144 Inheritance Object Analog212_424_848kbpsMode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.RfConfiguration Assembly : Iot.Device.Pn532.dll Syntax public class Analog212_424_848kbpsMode Properties | Improve this Doc View Source MifNFC212 MifNFC212, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Controls the communication in ISO/IEC 14443/MIFARE and NFC target mode at 212 kbit/s Declaration public byte MifNFC212 { get; set; } Property Value Type Description Byte | Improve this Doc View Source MifNFC424 MifNFC424, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf NFC target mode at 424 kbit/s Declaration public byte MifNFC424 { get; set; } Property Value Type Description Byte | Improve this Doc View Source MifNFC848 MifNFC848, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf NFC target mode at 848 kbit/s Declaration public byte MifNFC848 { get; set; } Property Value Type Description Byte | Improve this Doc View Source ModWidth212 ModWidth212, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Controls the setting of the width of the Miller pause for 212 kbps Declaration public byte ModWidth212 { get; set; } Property Value Type Description Byte | Improve this Doc View Source ModWidth424 ModWidth424, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Controls the setting of the width of the Miller pause for 424 kbps Declaration public byte ModWidth424 { get; set; } Property Value Type Description Byte | Improve this Doc View Source ModWidth848 ModWidth848, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Controls the setting of the width of the Miller pause for 848 kbps Declaration public byte ModWidth848 { get; set; } Property Value Type Description Byte | Improve this Doc View Source RxThreshold212 RxThreshold212, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects thresholds for the bit decoder for 212 kbps Declaration public byte RxThreshold212 { get; set; } Property Value Type Description Byte | Improve this Doc View Source RxThreshold424 RxThreshold424, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects thresholds for the bit decoder for 424 kbps Declaration public byte RxThreshold424 { get; set; } Property Value Type Description Byte | Improve this Doc View Source RxThreshold848 RxThreshold848, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects thresholds for the bit decoder for 848 kbps Declaration public byte RxThreshold848 { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Serialize() Get the byte array to send Declaration public byte[] Serialize() Returns Type Description Byte [] Serialized value"
  },
  "devices/Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.html": {
    "href": "devices/Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.html",
    "title": "Class Analog212_424kbpsMode | nanoFramework Documentation",
    "keywords": "Class Analog212_424kbpsMode This CfgItem is used to choose the analog settings that the PN532 will use for the baudrates 212/424kbps. When using this command, the host controller has to provide 8 values (ConfigurationData[]) for the following internal registers Actually, there is only one CIU_Demod register which defines a setting used by the reader in reception only.But depending on the RF condition, two different settings can be used for this register: • CIU_Demod when own RF is On defines a setting when its RF field is on during a reception i.e.initiator passive mode, • CIU_Demod when own RF is Off defines a setting when its RF field is off during a reception i.e.initiator active mode. CIU = Contactless Interface Unit Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144 Inheritance Object Analog212_424kbpsMode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.RfConfiguration Assembly : Iot.Device.Pn532.dll Syntax public class Analog212_424kbpsMode Properties | Improve this Doc View Source CWGsP CWGsP, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects the conductance of the antenna driver pins TX1 and TX2 when not in modulation phase Declaration public byte CWGsP { get; set; } Property Value Type Description Byte | Improve this Doc View Source DemodWhenRfOff DemodWhenRfOff, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Defines demodulator settings when radio frequency is off Declaration public byte DemodWhenRfOff { get; set; } Property Value Type Description Byte | Improve this Doc View Source DemodWhenRfOn DmodWhenRfOn, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Defines demodulator settings when radio frequency is on Declaration public byte DemodWhenRfOn { get; set; } Property Value Type Description Byte | Improve this Doc View Source GsNOff GsNOff, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects the conductance of the antenna driver pins TX1 and TX2 for load modulation when own RF field is switched off Declaration public byte GsNOff { get; set; } Property Value Type Description Byte | Improve this Doc View Source GsNOn GsNon, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects the conductance of the antenna driver pins TX1 and TX2 for modulation, when own RF field is switched on Declaration public byte GsNOn { get; set; } Property Value Type Description Byte | Improve this Doc View Source ModGsP ModGsP, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects the conductance of the antenna driver pins TX1 and TX2 when in modulation phase Declaration public byte ModGsP { get; set; } Property Value Type Description Byte | Improve this Doc View Source RfConfiguration RfCfg, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Declaration public byte RfConfiguration { get; set; } Property Value Type Description Byte | Improve this Doc View Source RxThreshold RxThreshold, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects thresholds for the bit decoder Declaration public byte RxThreshold { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Serialize() Get the byte array to send Declaration public byte[] Serialize() Returns Type Description Byte [] Serialized value"
  },
  "devices/Iot.Device.Pn532.RfConfiguration.AnalogSettingsTypeBMode.html": {
    "href": "devices/Iot.Device.Pn532.RfConfiguration.AnalogSettingsTypeBMode.html",
    "title": "Class AnalogSettingsTypeBMode | nanoFramework Documentation",
    "keywords": "Class AnalogSettingsTypeBMode This CfgItem is used to choose the analog settings that the PN532 will use for the type B when configured as PCD. When using this command, the host controller has to provide 3 new values (ConfigurationData[]) for the following internal registers: Except for these two specific settings, the 8 remaining analog settings are the same as the CfgItem 106 kbps type A. CIU = Contactless Interface Unit Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144 Inheritance Object AnalogSettingsTypeBMode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.RfConfiguration Assembly : Iot.Device.Pn532.dll Syntax public class AnalogSettingsTypeBMode Properties | Improve this Doc View Source GsNOn GsNOn, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects the conductance of the antenna driver pins TX1 and TX2 for modulation, when own RF field is switched on Declaration public byte GsNOn { get; set; } Property Value Type Description Byte | Improve this Doc View Source ModGsP ModGsP, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects the conductance of the antenna driver pins TX1 and TX2 when in modulation phase Declaration public byte ModGsP { get; set; } Property Value Type Description Byte | Improve this Doc View Source RxThreshold RxThreshold, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf Selects thresholds for the bit decoder Declaration public byte RxThreshold { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Serialize() Get the byte array to send Declaration public byte[] Serialize() Returns Type Description Byte [] Serialized value"
  },
  "devices/Iot.Device.Pn532.RfConfiguration.html": {
    "href": "devices/Iot.Device.Pn532.RfConfiguration.html",
    "title": "Namespace Iot.Device.Pn532.RfConfiguration | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Pn532.RfConfiguration Classes Analog106kbpsTypeAMode This CfgItem is used to choose the analog settings that the PN532 will use for the baudrate 106kbps type A. When using this command, the host controller has to provide 11 values (ConfigurationData[]) for the following internal registers Actually, there is only one CIU_Demod register which defines a setting used by the reader in reception only.But depending on the RF condition, two different settings can be used for this register: • CIU_Demod when own RF is On defines a setting when its RF field is on during a reception i.e.initiator passive mode, • CIU_Demod when own RF is Off defines a setting when its RF field is off during a reception i.e.initiator active mode. CIU = Contactless Interface Unit Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144 Analog212_424_848kbpsMode This CfgItem is used to choose the analog settings that the PN532 will use for the baudrates 212/424/848 kbps with ISO/IEC14443-4 cards. When using this command, the host controller has to provide 9 values (ConfigurationData[]) for the following internal registers: Except for these three specific registers (CIU_RxThreshold, CIU_ModWidth and CIU_MifNFC), the 8 remaining analog registers are the same as the previous CfgItem 0x0A. CIU = Contactless Interface Unit Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144 Analog212_424kbpsMode This CfgItem is used to choose the analog settings that the PN532 will use for the baudrates 212/424kbps. When using this command, the host controller has to provide 8 values (ConfigurationData[]) for the following internal registers Actually, there is only one CIU_Demod register which defines a setting used by the reader in reception only.But depending on the RF condition, two different settings can be used for this register: • CIU_Demod when own RF is On defines a setting when its RF field is on during a reception i.e.initiator passive mode, • CIU_Demod when own RF is Off defines a setting when its RF field is off during a reception i.e.initiator active mode. CIU = Contactless Interface Unit Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144 AnalogSettingsTypeBMode This CfgItem is used to choose the analog settings that the PN532 will use for the type B when configured as PCD. When using this command, the host controller has to provide 3 new values (ConfigurationData[]) for the following internal registers: Except for these two specific settings, the 8 remaining analog settings are the same as the CfgItem 106 kbps type A. CIU = Contactless Interface Unit Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144 MaxRetriesMode The parameters MxRtyATR, MxRtyPSL and MxRtyPassiveActivation define the number of retries that the PN532 will use in case of the following processes VariousTimingsMode The radio frequency timing modes Enums RfFieldMode Radio frequency field modes RfTimeout Radio frequency timeouts"
  },
  "devices/Iot.Device.Pn532.RfConfiguration.MaxRetriesMode.html": {
    "href": "devices/Iot.Device.Pn532.RfConfiguration.MaxRetriesMode.html",
    "title": "Class MaxRetriesMode | nanoFramework Documentation",
    "keywords": "Class MaxRetriesMode The parameters MxRtyATR, MxRtyPSL and MxRtyPassiveActivation define the number of retries that the PN532 will use in case of the following processes Inheritance Object MaxRetriesMode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.RfConfiguration Assembly : Iot.Device.Pn532.dll Syntax public class MaxRetriesMode Properties | Improve this Doc View Source MaxRetryAnswerToReset MxRtyATR is a byte containing the number of times that the PN532 will retry to send the ATR_REQ in case of incorrect reception of the ATR_RES(or no reception at all - timeout). For active mode, value 0xFF means to try eternally, 0x00 means only once(no retry, only one try). The default value of this parameter is 0xFF (infinitely). For passive mode, the value is always overruled with 0x02 (two retries). Declaration public byte MaxRetryAnswerToReset { get; set; } Property Value Type Description Byte | Improve this Doc View Source MaxRetryPassiveActivation MxRtyPassiveActivation is a byte containing the number of times that the PN532 will retry to activate a target in InListPassiveTarget command (§7.3.5, p: 115). Value 0xFF means to try eternally, 0x00 means only once(no retry, only one try). The default value of this parameter is 0xFF (infinitely). Declaration public byte MaxRetryPassiveActivation { get; set; } Property Value Type Description Byte | Improve this Doc View Source MaxRetryPSL MxRtyPSL is a byte containing the number of times that: • The PN532 will retry to send the PSL_REQ in case of incorrect reception of the PSL_RES(or no reception at all) for the NFC IP1 protocol, • The PN532 will retry to send the PPS request in case of incorrect reception of the PPS response(or no reception at all) for the ISO/IEC14443-4 protocol. Value 0xFF means to try eternally, 0x00 means only once(no retry, only one try).The default value of this parameter is 0x01 (the PSL_REQ/PPS request is sent twice in case of need). Declaration public byte MaxRetryPSL { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source Serialize() Get the byte array to send Declaration public byte[] Serialize() Returns Type Description Byte [] Serialized value"
  },
  "devices/Iot.Device.Pn532.RfConfiguration.RfFieldMode.html": {
    "href": "devices/Iot.Device.Pn532.RfConfiguration.RfFieldMode.html",
    "title": "Enum RfFieldMode | nanoFramework Documentation",
    "keywords": "Enum RfFieldMode Radio frequency field modes Namespace : Iot.Device.Pn532.RfConfiguration Assembly : Iot.Device.Pn532.dll Syntax [Flags] public enum RfFieldMode Fields Name Description AutoRFCA Auto radio frequency CA None None RF Radio frequency"
  },
  "devices/Iot.Device.Pn532.RfConfiguration.RfTimeout.html": {
    "href": "devices/Iot.Device.Pn532.RfConfiguration.RfTimeout.html",
    "title": "Enum RfTimeout | nanoFramework Documentation",
    "keywords": "Enum RfTimeout Radio frequency timeouts Namespace : Iot.Device.Pn532.RfConfiguration Assembly : Iot.Device.Pn532.dll Syntax public enum RfTimeout Fields Name Description None None T100MicroSeconds 100 Micro Seconds T102400MicroSeconds 102400 Micro Seconds T12800MicroSeconds 12800 Micro Seconds T1600MicroSeconds 1600 Micro Seconds T1640MilliSeconds 1640 Milli Seconds T200MicroSeconds 200 Micro Seconds T204800MicroSeconds 20480 0Micro Seconds T25600MicroSeconds 25600 Micro Seconds T3200MicroSeconds 3200 Micro Seconds T3280MilliSeconds 3280 Milli Seconds T400MicroSeconds 400 Micro Seconds T409600MicroSeconds 409600 Micro Seconds T51200MicroSeconds 51200 Micro Seconds T6400MicroSeconds 6400 Micro Seconds T800MicroSeconds 800 Micro Seconds T819200MicroSeconds 819200 Micro Seconds"
  },
  "devices/Iot.Device.Pn532.RfConfiguration.VariousTimingsMode.html": {
    "href": "devices/Iot.Device.Pn532.RfConfiguration.VariousTimingsMode.html",
    "title": "Class VariousTimingsMode | nanoFramework Documentation",
    "keywords": "Class VariousTimingsMode The radio frequency timing modes Inheritance Object VariousTimingsMode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Pn532.RfConfiguration Assembly : Iot.Device.Pn532.dll Syntax public class VariousTimingsMode Fields | Improve this Doc View Source RFU Reserved for Further Usage Declaration public const byte RFU = 0 Field Value Type Description Byte Properties | Improve this Doc View Source AnsweToRequestResponseTimeout The second byte in this item defines the timeout between ATR_REQ and ATR_RES when the PN532 is in initiator mode.A target is considered as mute if no valid ATR_RES is received within this timeout value. In this way, the PN532 can easily detect non TPE target in passive 212-424 kbps mode. The default value for this parameter is 0x0B (102.4 ms). Declaration public RfTimeout AnsweToRequestResponseTimeout { get; set; } Property Value Type Description RfTimeout | Improve this Doc View Source RetryTimeout The third byte defines the timeout value that the PN532 uses in the InCommunicateThru(§7.3.9, p: 136) command to give up reception from the target in case of no answer. The default value for this parameter is 0x0A (51.2 ms). This timeout definition is also used with InDataExchange(§7.3.8, p: 127) when the target is a FeliCa or a Mifare card(Ultralight, Standard…). Declaration public RfTimeout RetryTimeout { get; set; } Property Value Type Description RfTimeout Methods | Improve this Doc View Source Serialize() Get the byte array to send Declaration public byte[] Serialize() Returns Type Description Byte [] Serialized value"
  },
  "devices/Iot.Device.Pn532.RfConfigurationMode.html": {
    "href": "devices/Iot.Device.Pn532.RfConfigurationMode.html",
    "title": "Enum RfConfigurationMode | nanoFramework Documentation",
    "keywords": "Enum RfConfigurationMode Radio Frequency configuration mode Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum RfConfigurationMode Fields Name Description AnalogSettingsB106kbpsTypeA Analog Settings B106 kbps Type A AnalogSettingsB212_424_848ISO_IEC14443_4 Analog Settings B212_424_848 ISO_IEC14443_4 AnalogSettingsB212_424kbps Analog Settings B212_424 kbps AnalogSettingsTypeB Analog Settings Type B MaxRetries Max Retries MaxRetryCOM Max Retry COM RfField Rf Field VariousTimings Various Timings"
  },
  "devices/Iot.Device.Pn532.RfConfigurationMode_1.html": {
    "href": "devices/Iot.Device.Pn532.RfConfigurationMode_1.html",
    "title": "Enum RfConfigurationMode | nanoFramework Documentation",
    "keywords": "Enum RfConfigurationMode Radio Frequency configuration mode Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum RfConfigurationMode Fields Name Description AnalogSettingsB106kbpsTypeA Analog Settings B106 kbps Type A AnalogSettingsB212_424_848ISO_IEC14443_4 Analog Settings B212_424_848 ISO_IEC14443_4 AnalogSettingsB212_424kbps Analog Settings B212_424 kbps AnalogSettingsTypeB Analog Settings Type B MaxRetries Max Retries MaxRetryCOM Max Retry COM RfField Rf Field VariousTimings Various Timings"
  },
  "devices/Iot.Device.Pn532.RFConfigurationTimeout.html": {
    "href": "devices/Iot.Device.Pn532.RFConfigurationTimeout.html",
    "title": "Enum RFConfigurationTimeout | nanoFramework Documentation",
    "keywords": "Enum RFConfigurationTimeout The Radio Frequency configuration timeout Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum RFConfigurationTimeout Fields Name Description NoTimeout NoTimeout Timeout100MicroSecond Timeout 100 Micro Second Timeout102Dot4ms Timeout 102.4 ms Timeout12Dot8ms Timeout 12.8 ms Timeout1Dot64sec Timeout 1.64 sec Timeout1Dot6ms Timeout 1.6 ms Timeout200MicroSecond Timeout 200 Micro Second Timeout204Dot8ms Timeout 204.8 ms Timeout25Dot6ms Timeout 25.6 ms Timeout3Dot28sec Timeout 3.28 sec Timeout3Dot2ms Timeout 3.2 ms Timeout400MicroSecond Timeout 400 Micro Second Timeout409Dot6ms Timeout 409.6 ms Timeout51Dot2ms Timeout 51.2 ms Timeout6Dot4ms Timeout 6.4 ms Timeout800MicroSecond Timeout 800 Micro Second Timeout819Dot2ms Timeout 819.2 ms"
  },
  "devices/Iot.Device.Pn532.RFConfigurationTimeout_1.html": {
    "href": "devices/Iot.Device.Pn532.RFConfigurationTimeout_1.html",
    "title": "Enum RFConfigurationTimeout | nanoFramework Documentation",
    "keywords": "Enum RFConfigurationTimeout The Radio Frequency configuration timeout Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum RFConfigurationTimeout Fields Name Description NoTimeout NoTimeout Timeout100MicroSecond Timeout 100 Micro Second Timeout102Dot4ms Timeout 102.4 ms Timeout12Dot8ms Timeout 12.8 ms Timeout1Dot64sec Timeout 1.64 sec Timeout1Dot6ms Timeout 1.6 ms Timeout200MicroSecond Timeout 200 Micro Second Timeout204Dot8ms Timeout 204.8 ms Timeout25Dot6ms Timeout 25.6 ms Timeout3Dot28sec Timeout 3.28 sec Timeout3Dot2ms Timeout 3.2 ms Timeout400MicroSecond Timeout 400 Micro Second Timeout409Dot6ms Timeout 409.6 ms Timeout51Dot2ms Timeout 51.2 ms Timeout6Dot4ms Timeout 6.4 ms Timeout800MicroSecond Timeout 800 Micro Second Timeout819Dot2ms Timeout 819.2 ms"
  },
  "devices/Iot.Device.Pn532.SecurityAccessModuleMode.html": {
    "href": "devices/Iot.Device.Pn532.SecurityAccessModuleMode.html",
    "title": "Enum SecurityAccessModuleMode | nanoFramework Documentation",
    "keywords": "Enum SecurityAccessModuleMode Security Access Module Mode Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum SecurityAccessModuleMode Fields Name Description DualCard 0x04: Dual Card, both the PN532 and the SAM are visible from the external world as two separated targets Normal 0x01: Normal mode, the SAM is not used; this is the default mode VirtualCard 0x02: Virtual Card, the couple PN532+SAM is seen as only one contactless SAM card from the external world WiredCard 0x03: Wired Card, the host controller can access to the SAM with standard PCD commands (InListPassiveTarget,InDataExchange, …)"
  },
  "devices/Iot.Device.Pn532.SecurityAccessModuleMode_1.html": {
    "href": "devices/Iot.Device.Pn532.SecurityAccessModuleMode_1.html",
    "title": "Enum SecurityAccessModuleMode | nanoFramework Documentation",
    "keywords": "Enum SecurityAccessModuleMode Security Access Module Mode Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum SecurityAccessModuleMode Fields Name Description DualCard 0x04: Dual Card, both the PN532 and the SAM are visible from the external world as two separated targets Normal 0x01: Normal mode, the SAM is not used; this is the default mode VirtualCard 0x02: Virtual Card, the couple PN532+SAM is seen as only one contactless SAM card from the external world WiredCard 0x03: Wired Card, the host controller can access to the SAM with standard PCD commands (InListPassiveTarget,InDataExchange, …)"
  },
  "devices/Iot.Device.Pn532.SfrRegister.html": {
    "href": "devices/Iot.Device.Pn532.SfrRegister.html",
    "title": "Enum SfrRegister | nanoFramework Documentation",
    "keywords": "Enum SfrRegister Specific SFR registers Please refer to documentation for detailed definition Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum SfrRegister Fields Name Description CIU_COMMAND CIU_COMMAND FDATA FDATA FIFOFF FIFOFF FIFOFS FIFOFS FIT FIT FITE FITE FSIZE FSIZE HSU_CNT HSU_CNT HSU_CTR HSU_CTR HSU_PRE HSU_PRE HSU_STA HSU_STA IE0 IE0 IEN1 IEN1 IP0 IP0 IP1 IP1 P3 P3 P3CFGA P3CFGA P3CFGB P3CFGB P7 P7 P7CFGA P7CFGA P7CFGB P7CFGB PCON PCON RWL RWL SFF SFF SPIcontrol SPI control SPIstatus SPI status TWL TWL"
  },
  "devices/Iot.Device.Pn532.SfrRegister_1.html": {
    "href": "devices/Iot.Device.Pn532.SfrRegister_1.html",
    "title": "Enum SfrRegister | nanoFramework Documentation",
    "keywords": "Enum SfrRegister Specific SFR registers Please refer to documentation for detailed definition Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum SfrRegister Fields Name Description CIU_COMMAND CIU_COMMAND FDATA FDATA FIFOFF FIFOFF FIFOFS FIFOFS FIT FIT FITE FITE FSIZE FSIZE HSU_CNT HSU_CNT HSU_CTR HSU_CTR HSU_PRE HSU_PRE HSU_STA HSU_STA IE0 IE0 IEN1 IEN1 IP0 IP0 IP1 IP1 P3 P3 P3CFGA P3CFGA P3CFGB P3CFGB P7 P7 P7CFGA P7CFGA P7CFGB P7CFGB PCON PCON RWL RWL SFF SFF SPIcontrol SPI control SPIstatus SPI status TWL TWL"
  },
  "devices/Iot.Device.Pn532.VersionSupported.html": {
    "href": "devices/Iot.Device.Pn532.VersionSupported.html",
    "title": "Enum VersionSupported | nanoFramework Documentation",
    "keywords": "Enum VersionSupported All supported version for the NFC reader TODO: if more readers appear, this can be for sure place in common and more modes can be added Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax [Flags] public enum VersionSupported Fields Name Description Iso18092 Iso 18092 IsoIec14443TypeA Iso/Iec 14443 Type A IsoIec14443TypeB Iso/Iec 14443 Type B"
  },
  "devices/Iot.Device.Pn532.VersionSupported_1.html": {
    "href": "devices/Iot.Device.Pn532.VersionSupported_1.html",
    "title": "Enum VersionSupported | nanoFramework Documentation",
    "keywords": "Enum VersionSupported All supported version for the NFC reader TODO: if more readers appear, this can be for sure place in common and more modes can be added Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax [Flags] public enum VersionSupported Fields Name Description Iso18092 Iso 18092 IsoIec14443TypeA Iso/Iec 14443 Type A IsoIec14443TypeB Iso/Iec 14443 Type B"
  },
  "devices/Iot.Device.Pn532.WakeUpEnable.html": {
    "href": "devices/Iot.Device.Pn532.WakeUpEnable.html",
    "title": "Enum WakeUpEnable | nanoFramework Documentation",
    "keywords": "Enum WakeUpEnable The modes for which the PN532 can be awake when sleeping Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum WakeUpEnable Fields Name Description Gpio GPIO Hsu High Speed UART I2c I2C Int0 Int 0 Int1 Int 1 RFLevelDetector RF Lev el Detector Spi SPI"
  },
  "devices/Iot.Device.Pn532.WakeUpEnable_1.html": {
    "href": "devices/Iot.Device.Pn532.WakeUpEnable_1.html",
    "title": "Enum WakeUpEnable | nanoFramework Documentation",
    "keywords": "Enum WakeUpEnable The modes for which the PN532 can be awake when sleeping Namespace : Iot.Device.Pn532 Assembly : Iot.Device.Pn532.dll Syntax public enum WakeUpEnable Fields Name Description Gpio GPIO Hsu High Speed UART I2c I2C Int0 Int 0 Int1 Int 1 RFLevelDetector RF Lev el Detector Spi SPI"
  },
  "devices/IoT.Device.Pn532_1.html": {
    "href": "devices/IoT.Device.Pn532_1.html",
    "title": "Namespace IoT.Device.Pn532 | nanoFramework Documentation",
    "keywords": "Namespace IoT.Device.Pn532 Enums ErrorCode All errors that can be returned by the PN532 ErrorCode All errors that can be returned by the PN532"
  },
  "devices/Iot.Device.RadioReceiver.FrequencyRange.html": {
    "href": "devices/Iot.Device.RadioReceiver.FrequencyRange.html",
    "title": "Enum FrequencyRange | nanoFramework Documentation",
    "keywords": "Enum FrequencyRange TEA5767 FM frequency range. Namespace : Iot.Device.RadioReceiver Assembly : Iot.Device.RadioReceiver.dll Syntax public enum FrequencyRange Fields Name Description Japan 76MHz - 90MHz Other 87MHz - 108MHz"
  },
  "devices/Iot.Device.RadioReceiver.html": {
    "href": "devices/Iot.Device.RadioReceiver.html",
    "title": "Namespace Iot.Device.RadioReceiver | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.RadioReceiver Classes RadioReceiverBase Base class for radio receiver. Tea5767 FM Stereo Radio TEA5767 Enums FrequencyRange TEA5767 FM frequency range. SearchDirection TEA5767 radio search direction."
  },
  "devices/Iot.Device.RadioReceiver.RadioReceiverBase.html": {
    "href": "devices/Iot.Device.RadioReceiver.RadioReceiverBase.html",
    "title": "Class RadioReceiverBase | nanoFramework Documentation",
    "keywords": "Class RadioReceiverBase Base class for radio receiver. Inheritance Object RadioReceiverBase Tea5767 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.RadioReceiver Assembly : Iot.Device.RadioReceiver.dll Syntax public abstract class RadioReceiverBase : IDisposable Properties | Improve this Doc View Source Frequency Radio receiver FM frequency. Declaration public abstract Frequency Frequency { get; set; } Property Value Type Description UnitsNet.Frequency Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the RadioReceiverBase and optionally releases the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing True to release both managed and unmanaged resources; false to release only unmanaged resources. Implements IDisposable"
  },
  "devices/Iot.Device.RadioReceiver.SearchDirection.html": {
    "href": "devices/Iot.Device.RadioReceiver.SearchDirection.html",
    "title": "Enum SearchDirection | nanoFramework Documentation",
    "keywords": "Enum SearchDirection TEA5767 radio search direction. Namespace : Iot.Device.RadioReceiver Assembly : Iot.Device.RadioReceiver.dll Syntax public enum SearchDirection Fields Name Description Down Down Up Up"
  },
  "devices/Iot.Device.RadioReceiver.Tea5767.html": {
    "href": "devices/Iot.Device.RadioReceiver.Tea5767.html",
    "title": "Class Tea5767 | nanoFramework Documentation",
    "keywords": "Class Tea5767 FM Stereo Radio TEA5767 Inheritance Object RadioReceiverBase Tea5767 Implements IDisposable Inherited Members RadioReceiverBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.RadioReceiver Assembly : Iot.Device.RadioReceiver.dll Syntax public class Tea5767 : RadioReceiverBase, IDisposable Constructors | Improve this Doc View Source Tea5767(I2cDevice, FrequencyRange, Frequency) Create a new instance of the TEA5767. Declaration public Tea5767(I2cDevice i2cDevice, FrequencyRange frequencyRange, Frequency frequency) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. FrequencyRange frequencyRange FM frequency range. UnitsNet.Frequency frequency FM frequency. Fields | Improve this Doc View Source DefaultI2cAddress TEA5767 default I2C address. Declaration public const byte DefaultI2cAddress = 96 Field Value Type Description Byte Properties | Improve this Doc View Source Frequency TEA5767 FM frequency. Declaration public override Frequency Frequency { get; set; } Property Value Type Description UnitsNet.Frequency Overrides RadioReceiverBase.Frequency | Improve this Doc View Source FrequencyRange TEA5767 FM frequency range. Declaration public FrequencyRange FrequencyRange { get; set; } Property Value Type Description FrequencyRange | Improve this Doc View Source Mute TEA5767 mute. Declaration public bool Mute { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Standby TEA5767 standby. Declaration public bool Standby { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose(Boolean) Cleanup Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides RadioReceiverBase.Dispose(Boolean) | Improve this Doc View Source Search(SearchDirection, Int32) Automatic search for effective radio. Declaration public void Search(SearchDirection searchDirection = SearchDirection.Up, int stopLevel = 3) Parameters Type Name Description SearchDirection searchDirection Search up or down from the current frequency. Int32 stopLevel Stop search condition (range from 1 to 3). Implements IDisposable"
  },
  "devices/Iot.Device.RadioTransmitter.BassBoost.html": {
    "href": "devices/Iot.Device.RadioTransmitter.BassBoost.html",
    "title": "Enum BassBoost | nanoFramework Documentation",
    "keywords": "Enum BassBoost Bass Boost Namespace : Iot.Device.RadioTransmitter Assembly : Iot.Device.RadioTransmitter.dll Syntax public enum BassBoost : byte Fields Name Description Boost05dB 5 dB Boost11dB 11 dB Boost17dB 17 dB BoostDisable Disable"
  },
  "devices/Iot.Device.RadioTransmitter.html": {
    "href": "devices/Iot.Device.RadioTransmitter.html",
    "title": "Namespace Iot.Device.RadioTransmitter | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.RadioTransmitter Classes Kt0803 FM radio transmitter module KT0803. RadioTransmitterBase Base class for radio transmitter. Enums BassBoost Bass Boost PgaGain PGA (Programmable Gain Amplifier) Gain Region Region (Pre-Emphasis time constant) TransmissionPower Transmission Power"
  },
  "devices/Iot.Device.RadioTransmitter.Kt0803.html": {
    "href": "devices/Iot.Device.RadioTransmitter.Kt0803.html",
    "title": "Class Kt0803 | nanoFramework Documentation",
    "keywords": "Class Kt0803 FM radio transmitter module KT0803. Inheritance Object RadioTransmitterBase Kt0803 Implements IDisposable Inherited Members RadioTransmitterBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.RadioTransmitter Assembly : Iot.Device.RadioTransmitter.dll Syntax public class Kt0803 : RadioTransmitterBase, IDisposable Constructors | Improve this Doc View Source Kt0803(I2cDevice, Double, Region, TransmissionPower, PgaGain) Creates a new instance of the Kt0803. Declaration public Kt0803(I2cDevice i2cDevice, double frequency, Region region, TransmissionPower power = TransmissionPower.Power108dBuV, PgaGain pga = PgaGain.Pga00dB) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Double frequency FM frequency (range from 70MHz to 108MHz). Region region Region. TransmissionPower power Transmission power. PgaGain pga PGA (Programmable Gain Amplifier) gain. Fields | Improve this Doc View Source DefaultI2cAddress Kt0803 default I2C address. Declaration public const byte DefaultI2cAddress = 62 Field Value Type Description Byte Properties | Improve this Doc View Source BassBoost Kt0803 bass boost. Declaration public BassBoost BassBoost { get; set; } Property Value Type Description BassBoost | Improve this Doc View Source Frequency Kt0803 FM frequency (range from 70Mhz to 108Mhz). Declaration public override double Frequency { get; set; } Property Value Type Description Double Overrides RadioTransmitterBase.Frequency | Improve this Doc View Source Mute Kt0803 mute. Declaration public bool Mute { get; set; } Property Value Type Description Boolean | Improve this Doc View Source PgaGain Kt0803 PGA (Programmable Gain Amplifier) gain. Declaration public PgaGain PgaGain { get; set; } Property Value Type Description PgaGain | Improve this Doc View Source Region Kt0803 region. Declaration public Region Region { get; set; } Property Value Type Description Region | Improve this Doc View Source Standby Kt0803 standby. Declaration public bool Standby { get; set; } Property Value Type Description Boolean | Improve this Doc View Source TransmissionPower Kt0803 transmission power. Declaration public TransmissionPower TransmissionPower { get; set; } Property Value Type Description TransmissionPower Methods | Improve this Doc View Source Dispose(Boolean) Cleanup Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides RadioTransmitterBase.Dispose(Boolean) Implements IDisposable"
  },
  "devices/Iot.Device.RadioTransmitter.PgaGain.html": {
    "href": "devices/Iot.Device.RadioTransmitter.PgaGain.html",
    "title": "Enum PgaGain | nanoFramework Documentation",
    "keywords": "Enum PgaGain PGA (Programmable Gain Amplifier) Gain Namespace : Iot.Device.RadioTransmitter Assembly : Iot.Device.RadioTransmitter.dll Syntax public enum PgaGain : byte Fields Name Description Pga00dB 0 dB Pga04dB 4 dB Pga08dB 8 dB Pga12dB 12 dB PgaN04dB -4 dB PgaN08dB -8 dB PgaN12dB -12 dB"
  },
  "devices/Iot.Device.RadioTransmitter.RadioTransmitterBase.html": {
    "href": "devices/Iot.Device.RadioTransmitter.RadioTransmitterBase.html",
    "title": "Class RadioTransmitterBase | nanoFramework Documentation",
    "keywords": "Class RadioTransmitterBase Base class for radio transmitter. Inheritance Object RadioTransmitterBase Kt0803 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.RadioTransmitter Assembly : Iot.Device.RadioTransmitter.dll Syntax public abstract class RadioTransmitterBase : IDisposable Properties | Improve this Doc View Source Frequency Radio transmitter FM frequency. Declaration public abstract double Frequency { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the RadioTransmitterBase and optionally releases the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing True to release both managed and unmanaged resources; false to release only unmanaged resources. Implements IDisposable"
  },
  "devices/Iot.Device.RadioTransmitter.Region.html": {
    "href": "devices/Iot.Device.RadioTransmitter.Region.html",
    "title": "Enum Region | nanoFramework Documentation",
    "keywords": "Enum Region Region (Pre-Emphasis time constant) Namespace : Iot.Device.RadioTransmitter Assembly : Iot.Device.RadioTransmitter.dll Syntax public enum Region Fields Name Description America Pre-Emphasis time constant is 75μs Australia Pre-Emphasis time constant is 50μs China Pre-Emphasis time constant is 50μs Europe Pre-Emphasis time constant is 50μs Japan Pre-Emphasis time constant is 75μs Other Pre-Emphasis time constant is 50μs"
  },
  "devices/Iot.Device.RadioTransmitter.TransmissionPower.html": {
    "href": "devices/Iot.Device.RadioTransmitter.TransmissionPower.html",
    "title": "Enum TransmissionPower | nanoFramework Documentation",
    "keywords": "Enum TransmissionPower Transmission Power Namespace : Iot.Device.RadioTransmitter Assembly : Iot.Device.RadioTransmitter.dll Syntax public enum TransmissionPower : byte Fields Name Description Power095_5dBuV 95.5 dBuV Power096_5dBuV 96.5 dBuV Power097_5dBuV 97.5 dBuV Power098_2dBuV 98.2 dBuV Power098_9dBuV 98.9 dBuV Power100dBuV 100 dBuV Power101_5dBuV 101.5 dBuV Power102_8dBuV 102.8 dBuV Power105_1dBuV 105.1 dBuV Power105_6dBuV 105.6 dBuV Power106_2dBuV 106.2 dBuV Power106_5dBuV 106.5 dBuV Power107_4dBuV 107.4 dBuV Power107_7dBuV 107.7 dBuV Power107dBuV 107 dBuV Power108dBuV 108 dBuV"
  },
  "devices/Iot.Device.Rfid.ApplicationType.html": {
    "href": "devices/Iot.Device.Rfid.ApplicationType.html",
    "title": "Enum ApplicationType | nanoFramework Documentation",
    "keywords": "Enum ApplicationType Application type for 106 kbps type B cards Namespace : Iot.Device.Rfid Assembly : Iot.Device.CardRfid.dll Syntax public enum ApplicationType Fields Name Description ApplicationBytesCoded Byte coded application type Proprietary Proprietary application type"
  },
  "devices/Iot.Device.Rfid.Data106kbpsInnovisionJewel.html": {
    "href": "devices/Iot.Device.Rfid.Data106kbpsInnovisionJewel.html",
    "title": "Class Data106kbpsInnovisionJewel | nanoFramework Documentation",
    "keywords": "Class Data106kbpsInnovisionJewel Create a 106 kbpd Innovision Jewel card Inheritance Object Data106kbpsInnovisionJewel Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Rfid Assembly : Iot.Device.CardRfid.dll Syntax public class Data106kbpsInnovisionJewel Constructors | Improve this Doc View Source Data106kbpsInnovisionJewel(Byte, Byte[], Byte[]) Create a 106 kbpd Innovision Jewel card. Declaration public Data106kbpsInnovisionJewel(byte targetNumber, byte[] atqa, byte[] jewelId) Parameters Type Name Description Byte targetNumber The target number, should be 1 or 2 with PN532. Byte [] atqa Known as SENS_RES in the documentation. Byte [] jewelId The Jewel card ID. Properties | Improve this Doc View Source Atqa Known as SENS_RES in the documentation Answer To reQuest, Type A Declaration public byte[] Atqa { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source JewelId The Jewel card ID Declaration public byte[] JewelId { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source TargetNumber The target number, should be 1 or 2 with PN532 Declaration public byte TargetNumber { get; set; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Rfid.Data106kbpsTypeA.html": {
    "href": "devices/Iot.Device.Rfid.Data106kbpsTypeA.html",
    "title": "Class Data106kbpsTypeA | nanoFramework Documentation",
    "keywords": "Class Data106kbpsTypeA Create a 106 kbpd card like a Mifare card Inheritance Object Data106kbpsTypeA Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Rfid Assembly : Iot.Device.CardRfid.dll Syntax public class Data106kbpsTypeA Constructors | Improve this Doc View Source Data106kbpsTypeA(Byte, UInt16, Byte, Byte[], Byte[]) Create a 106 kbpd card like a Mifare card Declaration public Data106kbpsTypeA(byte targetNumber, ushort atqa, byte sak, byte[] nfcId, byte[] ats) Parameters Type Name Description Byte targetNumber he target number, should be 1 or 2 with PN532. UInt16 atqa Known as SENS_RES in the documentation. Byte sak Know as SEL_RES in the documentation. Byte [] nfcId The unique NFC ID. Byte [] ats Potential extra Answer To Select data. Properties | Improve this Doc View Source Atqa Known as SENS_RES in the documentation Answer To reQuest, Type A Declaration public ushort Atqa { get; set; } Property Value Type Description UInt16 | Improve this Doc View Source Ats Potential extra Answer To Select data Declaration public byte[] Ats { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source NfcId The unique NFC ID Declaration public byte[] NfcId { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source Sak Know as SEL_RES in the documentation Select AcKnowledge Declaration public byte Sak { get; set; } Property Value Type Description Byte | Improve this Doc View Source TargetNumber The target number, should be 1 or 2 with PN532 Declaration public byte TargetNumber { get; set; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Rfid.Data106kbpsTypeB.html": {
    "href": "devices/Iot.Device.Rfid.Data106kbpsTypeB.html",
    "title": "Class Data106kbpsTypeB | nanoFramework Documentation",
    "keywords": "Class Data106kbpsTypeB Core elements for a 106 kpbs type B card like a credit card Inheritance Object Data106kbpsTypeB Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Rfid Assembly : Iot.Device.CardRfid.dll Syntax public class Data106kbpsTypeB Constructors | Improve this Doc View Source Data106kbpsTypeB(Byte[]) Create a 106 kbps card type B like a credit card Declaration public Data106kbpsTypeB(byte[] atqb) Parameters Type Name Description Byte [] atqb Data to decode Properties | Improve this Doc View Source ApplicationData Application data Declaration public byte[] ApplicationData { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source ApplicationType The application type Declaration public ApplicationType ApplicationType { get; set; } Property Value Type Description ApplicationType | Improve this Doc View Source BitRates The bit rate TODO: find more details on this elements it can be transformed as an enum Declaration public byte BitRates { get; set; } Property Value Type Description Byte | Improve this Doc View Source CidSupported Is Card Identifier supported? Declaration public bool CidSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Command The command send during the ATQB request Standard one should be 0x50 Declaration public byte Command { get; set; } Property Value Type Description Byte | Improve this Doc View Source FrameWaitingTime The frame waiting time in µ seconds Declaration public float FrameWaitingTime { get; set; } Property Value Type Description Single | Improve this Doc View Source ISO14443_4Compliance Is this card fully compliant with ISO 14443_4? Declaration public bool ISO14443_4Compliance { get; set; } Property Value Type Description Boolean | Improve this Doc View Source MaxFrameSize The Max Frame Size Declaration public MaxFrameSize MaxFrameSize { get; set; } Property Value Type Description MaxFrameSize | Improve this Doc View Source NadSupported Is Node Address supported? Declaration public bool NadSupported { get; set; } Property Value Type Description Boolean | Improve this Doc View Source NfcId The unique NFC ID Declaration public byte[] NfcId { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source TargetNumber The target number, should be 1 or 2 with PN532 Declaration public byte TargetNumber { get; set; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Rfid.Data212_424kbps.html": {
    "href": "devices/Iot.Device.Rfid.Data212_424kbps.html",
    "title": "Class Data212_424kbps | nanoFramework Documentation",
    "keywords": "Class Data212_424kbps 212 and 424 card elements Inheritance Object Data212_424kbps Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Rfid Assembly : Iot.Device.CardRfid.dll Syntax public class Data212_424kbps Constructors | Improve this Doc View Source Data212_424kbps(Byte, Byte, Byte[], Byte[], Byte[]) 212 and 424 card elements. Declaration public Data212_424kbps(byte targetNumber, byte responseCode, byte[] nfcId, byte[] pad, byte[] systemCode) Parameters Type Name Description Byte targetNumber The target number, should be 1 or 2 with PN532. Byte responseCode The response code. Byte [] nfcId The unique NFC ID. Byte [] pad The Pad. Byte [] systemCode The system code. Properties | Improve this Doc View Source NfcId The unique NFC ID Declaration public byte[] NfcId { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source Pad The Pad Declaration public byte[] Pad { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source ResponseCode The response code Declaration public byte ResponseCode { get; set; } Property Value Type Description Byte | Improve this Doc View Source SystemCode The system code Declaration public byte[] SystemCode { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source TargetNumber The target number, should be 1 or 2 with PN532 Declaration public byte TargetNumber { get; set; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Rfid.html": {
    "href": "devices/Iot.Device.Rfid.html",
    "title": "Namespace Iot.Device.Rfid | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Rfid Classes Data106kbpsInnovisionJewel Create a 106 kbpd Innovision Jewel card Data106kbpsTypeA Create a 106 kbpd card like a Mifare card Data106kbpsTypeB Core elements for a 106 kpbs type B card like a credit card Data212_424kbps 212 and 424 card elements Enums ApplicationType Application type for 106 kbps type B cards MaxFrameSize Bit rate supported by 144443-4B http://ww1.microchip.com/downloads/en/AppNotes/doc2056.pdf page 20"
  },
  "devices/Iot.Device.Rfid.MaxFrameSize.html": {
    "href": "devices/Iot.Device.Rfid.MaxFrameSize.html",
    "title": "Enum MaxFrameSize | nanoFramework Documentation",
    "keywords": "Enum MaxFrameSize Bit rate supported by 144443-4B http://ww1.microchip.com/downloads/en/AppNotes/doc2056.pdf page 20 Namespace : Iot.Device.Rfid Assembly : Iot.Device.CardRfid.dll Syntax public enum MaxFrameSize Fields Name Description B016 16 bytes B024 24 bytes B032 32 bytes B040 40 bytes B048 48 bytes B064 64 bytes B096 96 bytes B128 128 bytes B256 256 bytes"
  },
  "devices/Iot.Device.RotaryEncoder.html": {
    "href": "devices/Iot.Device.RotaryEncoder.html",
    "title": "Namespace Iot.Device.RotaryEncoder | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.RotaryEncoder Classes QuadratureRotaryEncoder Binding that exposes a quadrature rotary encoder RotaryEncoderEventArgs EventArgs used with the RotaryEncode binding to pass event information when the Value changes. ScaledQuadratureEncoder Scaled Quadrature Rotary Controller binding Delegates RotaryEncoderEventHandler Event handler to allow the notification of value changes."
  },
  "devices/Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.html": {
    "href": "devices/Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.html",
    "title": "Class QuadratureRotaryEncoder | nanoFramework Documentation",
    "keywords": "Class QuadratureRotaryEncoder Binding that exposes a quadrature rotary encoder Inheritance Object QuadratureRotaryEncoder ScaledQuadratureEncoder Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.RotaryEncoder Assembly : Iot.Device.RotaryEncoder.dll Syntax public class QuadratureRotaryEncoder : IDisposable Constructors | Improve this Doc View Source QuadratureRotaryEncoder(Int32, Int32, PinEventTypes, Int32, GpioController, Boolean) QuadratureRotaryEncoder constructor Declaration public QuadratureRotaryEncoder(int pinA, int pinB, PinEventTypes edges, int pulsesPerRotation, GpioController controller = null, bool shouldDispose = true) Parameters Type Name Description Int32 pinA Pin A that is connected to the rotary encoder. Sometimes called clk Int32 pinB Pin B that is connected to the rotary encoder. Sometimes called data PinEventTypes edges The pin event types to 'listen' for. Int32 pulsesPerRotation The number of pulses to be received for every full rotation of the encoder. GpioController controller GpioController that hosts Pins A and B. Boolean shouldDispose True to dispose the controller | Improve this Doc View Source QuadratureRotaryEncoder(Int32, Int32, Int32) QuadratureRotaryEncoder constructor Declaration public QuadratureRotaryEncoder(int pinA, int pinB, int pulsesPerRotation) Parameters Type Name Description Int32 pinA Pin A that is connected to the rotary encoder. Sometimes called clk Int32 pinB Pin B that is connected to the rotary encoder. Sometimes called data Int32 pulsesPerRotation The number of pulses to be received for every full rotation of the encoder. Properties | Improve this Doc View Source Debounce The Debounce property represents the minimum amount of delay allowed between falling edges of the A (clk) pin. The recommended value are few milliseconds typically around 5. This depends from your usage. Declaration public TimeSpan Debounce { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source PulseCount The number of pulses before or after the start position of the encoder Declaration public long PulseCount { get; set; } Property Value Type Description Int64 | Improve this Doc View Source PulsesPerRotation The number of pulses expected per rotation of the encoder Declaration public int PulsesPerRotation { get; } Property Value Type Description Int32 | Improve this Doc View Source Rotations The number of rotations backwards or forwards from the initial position of the encoder Declaration public float Rotations { get; } Property Value Type Description Single Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source OnPulse(Boolean, Int32) Modify the current value on receipt of a pulse from the rotary encoder. Declaration protected virtual void OnPulse(bool blnUp, int milliSecondsSinceLastPulse) Parameters Type Name Description Boolean blnUp When true then the value should be incremented otherwise it should be decremented. Int32 milliSecondsSinceLastPulse The number of miliseconds since the last pulse. Events | Improve this Doc View Source PulseCountChanged EventHandler to allow the notification of value changes. Declaration public event RotaryEncoderEventHandler PulseCountChanged Event Type Type Description RotaryEncoderEventHandler Implements IDisposable"
  },
  "devices/Iot.Device.RotaryEncoder.RotaryEncoderEventArgs.html": {
    "href": "devices/Iot.Device.RotaryEncoder.RotaryEncoderEventArgs.html",
    "title": "Class RotaryEncoderEventArgs | nanoFramework Documentation",
    "keywords": "Class RotaryEncoderEventArgs EventArgs used with the RotaryEncode binding to pass event information when the Value changes. Inheritance Object BaseEvent RotaryEncoderEventArgs Inherited Members BaseEvent.Source BaseEvent.Message Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.RotaryEncoder Assembly : Iot.Device.RotaryEncoder.dll Syntax public class RotaryEncoderEventArgs : BaseEvent Constructors | Improve this Doc View Source RotaryEncoderEventArgs(Double) Construct a new RotaryEncoderEventArgs Declaration public RotaryEncoderEventArgs(double value) Parameters Type Name Description Double value Current value associated with the rotary encoder Properties | Improve this Doc View Source Value The Value property represents current value associated with the RotaryEncoder. Declaration public double Value { get; } Property Value Type Description Double"
  },
  "devices/Iot.Device.RotaryEncoder.RotaryEncoderEventHandler.html": {
    "href": "devices/Iot.Device.RotaryEncoder.RotaryEncoderEventHandler.html",
    "title": "Delegate RotaryEncoderEventHandler | nanoFramework Documentation",
    "keywords": "Delegate RotaryEncoderEventHandler Event handler to allow the notification of value changes. Namespace : Iot.Device.RotaryEncoder Assembly : Iot.Device.RotaryEncoder.dll Syntax public delegate void RotaryEncoderEventHandler(object sender, RotaryEncoderEventArgs e); Parameters Type Name Description Object sender RotaryEncoderEventArgs e"
  },
  "devices/Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.html": {
    "href": "devices/Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.html",
    "title": "Class ScaledQuadratureEncoder | nanoFramework Documentation",
    "keywords": "Class ScaledQuadratureEncoder Scaled Quadrature Rotary Controller binding Inheritance Object QuadratureRotaryEncoder ScaledQuadratureEncoder Implements IDisposable Inherited Members QuadratureRotaryEncoder.PulsesPerRotation QuadratureRotaryEncoder.PulseCount QuadratureRotaryEncoder.Rotations QuadratureRotaryEncoder.Debounce QuadratureRotaryEncoder.PulseCountChanged QuadratureRotaryEncoder.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.RotaryEncoder Assembly : Iot.Device.RotaryEncoder.dll Syntax public class ScaledQuadratureEncoder : QuadratureRotaryEncoder, IDisposable Constructors | Improve this Doc View Source ScaledQuadratureEncoder(Int32, Int32, PinEventTypes, Int32) ScaledQuadratureEncoder constructor for a 0..100 range with 100 steps Declaration public ScaledQuadratureEncoder(int pinA, int pinB, PinEventTypes edges, int pulsesPerRotation) Parameters Type Name Description Int32 pinA Pin A that is connected to the rotary encoder. Sometimes called clk Int32 pinB Pin B that is connected to the rotary encoder. Sometimes called data PinEventTypes edges The pin event types to 'listen' for. Int32 pulsesPerRotation The number of pulses to be received for every full rotation of the encoder. | Improve this Doc View Source ScaledQuadratureEncoder(Int32, Int32, PinEventTypes, Int32, GpioController, Boolean) ScaledQuadratureEncoder constructor for a 0..100 range with 100 steps Declaration public ScaledQuadratureEncoder(int pinA, int pinB, PinEventTypes edges, int pulsesPerRotation, GpioController controller = null, bool shouldDispose = true) Parameters Type Name Description Int32 pinA Pin A that is connected to the rotary encoder. Sometimes called clk Int32 pinB Pin B that is connected to the rotary encoder. Sometimes called data PinEventTypes edges The pin event types to 'listen' for. Int32 pulsesPerRotation The number of pulses to be received for every full rotation of the encoder. GpioController controller GpioController that hosts Pins A and B. Boolean shouldDispose Dispose the controller if true | Improve this Doc View Source ScaledQuadratureEncoder(Int32, Int32, PinEventTypes, Int32, Double, Double, Double) ScaledQuadratureEncoder constructor Declaration public ScaledQuadratureEncoder(int pinA, int pinB, PinEventTypes edges, int pulsesPerRotation, double pulseIncrement, double rangeMin, double rangeMax) Parameters Type Name Description Int32 pinA Pin A that is connected to the rotary encoder. Sometimes called clk Int32 pinB Pin B that is connected to the rotary encoder. Sometimes called data PinEventTypes edges The pin event types to 'listen' for. Int32 pulsesPerRotation The number of pulses to be received for every full rotation of the encoder. Double pulseIncrement The amount that the value increases or decreases on each pulse from the rotary encoder Double rangeMin Minimum value permitted. The value is clamped to this. Double rangeMax Maximum value permitted. The value is clamped to this. | Improve this Doc View Source ScaledQuadratureEncoder(Int32, Int32, PinEventTypes, Int32, Double, Double, Double, GpioController, Boolean) ScaledQuadratureEncoder constructor Declaration public ScaledQuadratureEncoder(int pinA, int pinB, PinEventTypes edges, int pulsesPerRotation, double pulseIncrement, double rangeMin, double rangeMax, GpioController controller = null, bool shouldDispose = true) Parameters Type Name Description Int32 pinA Pin A that is connected to the rotary encoder. Sometimes called clk Int32 pinB Pin B that is connected to the rotary encoder. Sometimes called data PinEventTypes edges The pin event types to 'listen' for. Int32 pulsesPerRotation The number of pulses to be received for every full rotation of the encoder. Double pulseIncrement The amount that the value increases or decreases on each pulse from the rotary encoder Double rangeMin Minimum value permitted. The value is clamped to this. Double rangeMax Maximum value permitted. The value is clamped to this. GpioController controller GpioController that hosts Pins A and B. Boolean shouldDispose Dispose the controller if true Properties | Improve this Doc View Source AccelerationOffset The AccelerationOffset property along with the AccelerationSlope property represents how the increase or decrease in value should grow as the incremental encoder is turned faster. Declaration public float AccelerationOffset { get; set; } Property Value Type Description Single | Improve this Doc View Source AccelerationSlope The AccelerationSlope property along with the AccelerationOffset property represents how the increase or decrease in value should grow as the incremental encoder is turned faster. Declaration public float AccelerationSlope { get; set; } Property Value Type Description Single | Improve this Doc View Source Value The Value property represents current value associated with the RotaryEncoder. Declaration public double Value { get; set; } Property Value Type Description Double Methods | Improve this Doc View Source Acceleration(Int32) Calculate the amount of acceleration to be applied to the increment of the encoder. Declaration protected virtual int Acceleration(int milliSecondsSinceLastPulse) Parameters Type Name Description Int32 milliSecondsSinceLastPulse The amount of time elapsed since the last data pulse from the encoder in milliseconds. Returns Type Description Int32 A value that can be used to apply acceleration to the rotary encoder. Remarks This uses a straight line function output = input * AccelerationSlope + Acceleration offset but can be overridden to perform different algorithms. | Improve this Doc View Source OnPulse(Boolean, Int32) Modify the current value on receipt of a pulse from the encoder. Declaration protected override void OnPulse(bool blnUp, int milliSecondsSinceLastPulse) Parameters Type Name Description Boolean blnUp When true then the value should be incremented otherwise it should be decremented. Int32 milliSecondsSinceLastPulse The amount of time elapsed since the last data pulse from the encoder in milliseconds. Overrides QuadratureRotaryEncoder.OnPulse(Boolean, Int32) | Improve this Doc View Source ReadValue() Read the current Value Declaration public double ReadValue() Returns Type Description Double The value associated with the rotary encoder. Events | Improve this Doc View Source ValueChanged EventHandler to allow the notification of value changes. Declaration public event RotaryEncoderEventHandler ValueChanged Event Type Type Description RotaryEncoderEventHandler Implements IDisposable"
  },
  "devices/Iot.Device.Rtc.Ds1307.html": {
    "href": "devices/Iot.Device.Rtc.Ds1307.html",
    "title": "Class Ds1307 | nanoFramework Documentation",
    "keywords": "Class Ds1307 Realtime Clock DS1307 Inheritance Object RtcBase Ds1307 Implements IDisposable Inherited Members RtcBase.DateTime RtcBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Rtc Assembly : Iot.Device.Rtc.dll Syntax public class Ds1307 : RtcBase, IDisposable Constructors | Improve this Doc View Source Ds1307(I2cDevice) Creates a new instance of the DS1307 Declaration public Ds1307(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Fields | Improve this Doc View Source DefaultI2cAddress DS1307 Default I2C Address Declaration public const byte DefaultI2cAddress = 104 Field Value Type Description Byte Methods | Improve this Doc View Source Dispose(Boolean) Cleanup Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides RtcBase.Dispose(Boolean) | Improve this Doc View Source ReadTime() Read Time from DS1307 Declaration protected override DateTime ReadTime() Returns Type Description DateTime DS1307 Time Overrides RtcBase.ReadTime() | Improve this Doc View Source SetTime(DateTime) Set DS1307 Time Declaration protected override void SetTime(DateTime time) Parameters Type Name Description DateTime time Time Overrides RtcBase.SetTime(DateTime) Implements IDisposable"
  },
  "devices/Iot.Device.Rtc.Ds3231.html": {
    "href": "devices/Iot.Device.Rtc.Ds3231.html",
    "title": "Class Ds3231 | nanoFramework Documentation",
    "keywords": "Class Ds3231 Realtime Clock DS3231 Inheritance Object RtcBase Ds3231 Implements IDisposable Inherited Members RtcBase.DateTime RtcBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Rtc Assembly : Iot.Device.Rtc.dll Syntax public class Ds3231 : RtcBase, IDisposable Constructors | Improve this Doc View Source Ds3231(I2cDevice) Creates a new instance of the DS3231 Declaration public Ds3231(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Fields | Improve this Doc View Source DefaultI2cAddress DS3231 Default I2C Address Declaration public const byte DefaultI2cAddress = 104 Field Value Type Description Byte Properties | Improve this Doc View Source EnabledAlarm Gets or sets which of the two alarms is enabled Declaration public Ds3231Alarm EnabledAlarm { get; set; } Property Value Type Description Ds3231Alarm | Improve this Doc View Source Temperature DS3231 Temperature Declaration public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Methods | Improve this Doc View Source Dispose(Boolean) Cleanup Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides RtcBase.Dispose(Boolean) | Improve this Doc View Source ReadAlarmOne() Reads the currently set alarm 1 Declaration public Ds3231AlarmOne ReadAlarmOne() Returns Type Description Ds3231AlarmOne Alarm 1 | Improve this Doc View Source ReadAlarmTwo() Reads the currently set alarm 2 Declaration public Ds3231AlarmTwo ReadAlarmTwo() Returns Type Description Ds3231AlarmTwo Alarm 1 | Improve this Doc View Source ReadEnabledAlarm() Reads which alarm is enabled Declaration protected Ds3231Alarm ReadEnabledAlarm() Returns Type Description Ds3231Alarm The enabled alarm | Improve this Doc View Source ReadTemperature() Read DS3231 Temperature Declaration protected double ReadTemperature() Returns Type Description Double Temperature | Improve this Doc View Source ReadTime() Read Time from DS3231 Declaration protected override DateTime ReadTime() Returns Type Description DateTime DS3231 Time Overrides RtcBase.ReadTime() | Improve this Doc View Source ResetAlarmTriggeredStates() Resets the triggered state of both alarms. This must be called after every alarm trigger otherwise the alarm cannot trigger again Declaration public void ResetAlarmTriggeredStates() | Improve this Doc View Source SetAlarmOne(Ds3231AlarmOne) Sets alarm 1 Declaration public void SetAlarmOne(Ds3231AlarmOne alarm) Parameters Type Name Description Ds3231AlarmOne alarm New alarm 1 | Improve this Doc View Source SetAlarmTwo(Ds3231AlarmTwo) Sets alarm 2 Declaration public void SetAlarmTwo(Ds3231AlarmTwo alarm) Parameters Type Name Description Ds3231AlarmTwo alarm New alarm 2 | Improve this Doc View Source SetEnabledAlarm(Ds3231Alarm) Sets which alarm is enabled Declaration protected void SetEnabledAlarm(Ds3231Alarm alarmMode) Parameters Type Name Description Ds3231Alarm alarmMode Alarm to enable | Improve this Doc View Source SetTime(DateTime) Set DS3231 Time Declaration protected override void SetTime(DateTime time) Parameters Type Name Description DateTime time Time Overrides RtcBase.SetTime(DateTime) Implements IDisposable"
  },
  "devices/Iot.Device.Rtc.Ds3231Alarm.html": {
    "href": "devices/Iot.Device.Rtc.Ds3231Alarm.html",
    "title": "Enum Ds3231Alarm | nanoFramework Documentation",
    "keywords": "Enum Ds3231Alarm Available alarms on the DS3231 Namespace : Iot.Device.Rtc Assembly : Iot.Device.Rtc.dll Syntax public enum Ds3231Alarm Fields Name Description AlarmOne Indicates the first alarm AlarmTwo Indicates the second alarm None Indicates none of the alarms"
  },
  "devices/Iot.Device.Rtc.Ds3231AlarmOne.html": {
    "href": "devices/Iot.Device.Rtc.Ds3231AlarmOne.html",
    "title": "Class Ds3231AlarmOne | nanoFramework Documentation",
    "keywords": "Class Ds3231AlarmOne Represents alarm 1 on the DS3231 Inheritance Object Ds3231AlarmOne Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Rtc Assembly : Iot.Device.Rtc.dll Syntax public class Ds3231AlarmOne Constructors | Improve this Doc View Source Ds3231AlarmOne(Int32, TimeSpan, Ds3231AlarmOneMatchMode) Creates a new instance of alarm 1 on the DS3231 Declaration public Ds3231AlarmOne(int dayOfMonthOrWeek, TimeSpan alarmTime, Ds3231AlarmOneMatchMode matchMode) Parameters Type Name Description Int32 dayOfMonthOrWeek Day of month or day of week of the alarm. Which one it is depends on the match mode TimeSpan alarmTime Time of the alarm Ds3231AlarmOneMatchMode matchMode Mode to use to determine when to trigger the alarm Properties | Improve this Doc View Source AlarmTime Get or set the time the alarm, Hour, Minute and Second are used Declaration public TimeSpan AlarmTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DayOfMonthOrWeek Day of month or day of week of the alarm. Which one it is depends on the match mode Declaration public int DayOfMonthOrWeek { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MatchMode Mode to use to determine when to trigger the alarm Declaration public Ds3231AlarmOneMatchMode MatchMode { get; set; } Property Value Type Description Ds3231AlarmOneMatchMode"
  },
  "devices/Iot.Device.Rtc.Ds3231AlarmOneMatchMode.html": {
    "href": "devices/Iot.Device.Rtc.Ds3231AlarmOneMatchMode.html",
    "title": "Enum Ds3231AlarmOneMatchMode | nanoFramework Documentation",
    "keywords": "Enum Ds3231AlarmOneMatchMode Available modes for determining when alarm 1 should trigger Namespace : Iot.Device.Rtc Assembly : Iot.Device.Rtc.dll Syntax public enum Ds3231AlarmOneMatchMode : byte Fields Name Description DayOfMonthHoursMinutesSeconds Alarm 1 triggers when the day of the month, hours, minutes and seconds match DayOfWeekHoursMinutesSeconds Alarm 1 triggers when the day of the week, hours, minutes and seconda match. Sunday is day 1 HoursMinutesSeconds Alarm 1 triggers when the hours, minutes and seconds match MinutesSeconds Alarm 1 triggers when the minutes and seconds match OncePerSecond Alarm 1 triggers at the start of every second Seconds Alarm 1 triggers when the seconds match"
  },
  "devices/Iot.Device.Rtc.Ds3231AlarmTwo.html": {
    "href": "devices/Iot.Device.Rtc.Ds3231AlarmTwo.html",
    "title": "Class Ds3231AlarmTwo | nanoFramework Documentation",
    "keywords": "Class Ds3231AlarmTwo Represents alarm 2 on the DS3231 Inheritance Object Ds3231AlarmTwo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Rtc Assembly : Iot.Device.Rtc.dll Syntax public class Ds3231AlarmTwo Constructors | Improve this Doc View Source Ds3231AlarmTwo(Int32, TimeSpan, Ds3231AlarmTwoMatchMode) Creates a new instance of alarm 2 on the DS3231 Declaration public Ds3231AlarmTwo(int dayOfMonthOrWeek, TimeSpan alarmTime, Ds3231AlarmTwoMatchMode matchMode) Parameters Type Name Description Int32 dayOfMonthOrWeek Day of month or day of week of the alarm. Which one it is depends on the match mode TimeSpan alarmTime The time the alarm, Hour and Minute are used Ds3231AlarmTwoMatchMode matchMode Mode to use to determine when to trigger the alarm Properties | Improve this Doc View Source AlarmTime Get or set the time the alarm, Hour and Minute are used Declaration public TimeSpan AlarmTime { get; set; } Property Value Type Description TimeSpan | Improve this Doc View Source DayOfMonthOrWeek Day of month or day of week of the alarm. Which one it is depends on the match mode Declaration public int DayOfMonthOrWeek { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MatchMode Mode to use to determine when to trigger the alarm Declaration public Ds3231AlarmTwoMatchMode MatchMode { get; set; } Property Value Type Description Ds3231AlarmTwoMatchMode"
  },
  "devices/Iot.Device.Rtc.Ds3231AlarmTwoMatchMode.html": {
    "href": "devices/Iot.Device.Rtc.Ds3231AlarmTwoMatchMode.html",
    "title": "Enum Ds3231AlarmTwoMatchMode | nanoFramework Documentation",
    "keywords": "Enum Ds3231AlarmTwoMatchMode Available modes for determining when alarm 2 should trigger Namespace : Iot.Device.Rtc Assembly : Iot.Device.Rtc.dll Syntax public enum Ds3231AlarmTwoMatchMode : byte Fields Name Description DayOfMonthHoursMinutes Alarm 2 triggers when the day of the month, hours and minutes match DayOfWeekHoursMinutes Alarm 2 triggers when the day of the week, hours and minutes match. Sunday is day 1 HoursMinutes Alarm 2 triggers when the hours and minutes match Minutes Alarm 2 triggers when the minutes match OncePerMinute Alarm 2 triggers at the start of every minute"
  },
  "devices/Iot.Device.Rtc.html": {
    "href": "devices/Iot.Device.Rtc.html",
    "title": "Namespace Iot.Device.Rtc | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Rtc Classes Ds1307 Realtime Clock DS1307 Ds3231 Realtime Clock DS3231 Ds3231AlarmOne Represents alarm 1 on the DS3231 Ds3231AlarmTwo Represents alarm 2 on the DS3231 Pcf8563 Realtime Clock PCF8563 RtcBase Real time clock (RTC) Enums Ds3231Alarm Available alarms on the DS3231 Ds3231AlarmOneMatchMode Available modes for determining when alarm 1 should trigger Ds3231AlarmTwoMatchMode Available modes for determining when alarm 2 should trigger"
  },
  "devices/Iot.Device.Rtc.Pcf8563.html": {
    "href": "devices/Iot.Device.Rtc.Pcf8563.html",
    "title": "Class Pcf8563 | nanoFramework Documentation",
    "keywords": "Class Pcf8563 Realtime Clock PCF8563 Inheritance Object RtcBase Pcf8563 Implements IDisposable Inherited Members RtcBase.DateTime RtcBase.Dispose() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Rtc Assembly : Iot.Device.Rtc.dll Syntax public class Pcf8563 : RtcBase, IDisposable Constructors | Improve this Doc View Source Pcf8563(I2cDevice) Creates a new instance of the PCF8563 Declaration public Pcf8563(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Fields | Improve this Doc View Source DefaultI2cAddress PCF8563 Default I2C Address Declaration public const byte DefaultI2cAddress = 81 Field Value Type Description Byte Methods | Improve this Doc View Source Dispose(Boolean) Cleanup Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Overrides RtcBase.Dispose(Boolean) | Improve this Doc View Source ReadTime() Read Time from PCF8563 Declaration protected override DateTime ReadTime() Returns Type Description DateTime PCF8563 Time Overrides RtcBase.ReadTime() | Improve this Doc View Source SetTime(DateTime) Set PCF8563 Time Declaration protected override void SetTime(DateTime time) Parameters Type Name Description DateTime time Time Overrides RtcBase.SetTime(DateTime) Implements IDisposable"
  },
  "devices/Iot.Device.Rtc.RtcBase.html": {
    "href": "devices/Iot.Device.Rtc.RtcBase.html",
    "title": "Class RtcBase | nanoFramework Documentation",
    "keywords": "Class RtcBase Real time clock (RTC) Inheritance Object RtcBase Ds1307 Ds3231 Pcf8563 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Rtc Assembly : Iot.Device.Rtc.dll Syntax public abstract class RtcBase : IDisposable Properties | Improve this Doc View Source DateTime The Device's DateTime Declaration public virtual DateTime DateTime { get; set; } Property Value Type Description DateTime Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the RtcBase and optionally releases the managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing True to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source ReadTime() Read time from the device Declaration protected abstract DateTime ReadTime() Returns Type Description DateTime Time from the device | Improve this Doc View Source SetTime(DateTime) Set the device time Declaration protected abstract void SetTime(DateTime time) Parameters Type Name Description DateTime time Time Implements IDisposable"
  },
  "devices/Iot.Device.ServoMotor.html": {
    "href": "devices/Iot.Device.ServoMotor.html",
    "title": "Namespace Iot.Device.ServoMotor | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.ServoMotor Classes ServoMotor Represents a rotary actuator or linear actuator that allows for precise control of angular or linear position."
  },
  "devices/Iot.Device.ServoMotor.ServoMotor.html": {
    "href": "devices/Iot.Device.ServoMotor.ServoMotor.html",
    "title": "Class ServoMotor | nanoFramework Documentation",
    "keywords": "Class ServoMotor Represents a rotary actuator or linear actuator that allows for precise control of angular or linear position. Inheritance Object ServoMotor Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.ServoMotor Assembly : Iot.Device.ServoMotor.dll Syntax public sealed class ServoMotor : IDisposable Constructors | Improve this Doc View Source ServoMotor(PwmChannel, Double, Double, Double) Initializes a new instance of the ServoMotor class. Declaration public ServoMotor(PwmChannel pwmChannel, double maximumAngle = 180, double minimumPulseWidthMicroseconds = 1000, double maximumPulseWidthMicroseconds = 2000) Parameters Type Name Description PwmChannel pwmChannel The PWM channel used to control the servo motor. Double maximumAngle The maximum angle the servo motor can move represented as a value between 0 and 360. Double minimumPulseWidthMicroseconds The minimum pulse width, in microseconds, that represent an angle for 0 degrees. Double maximumPulseWidthMicroseconds The maxnimum pulse width, in microseconds, that represent an angle for maximum angle. | Improve this Doc View Source ServoMotor(PwmChannel, Double, Double, Double) Initializes a new instance of the ServoMotor class. Declaration public ServoMotor(PwmChannel pwmChannel, double maximumAngle = 180, double minimumPulseWidthMicroseconds = 1000, double maximumPulseWidthMicroseconds = 2000) Parameters Type Name Description PwmChannel pwmChannel The PWM channel used to control the servo motor. Double maximumAngle The maximum angle the servo motor can move represented as a value between 0 and 360. Double minimumPulseWidthMicroseconds The minimum pulse width, in microseconds, that represent an angle for 0 degrees. Double maximumPulseWidthMicroseconds The maxnimum pulse width, in microseconds, that represent an angle for maximum angle. Methods | Improve this Doc View Source Calibrate(Double, Double, Double) Sets calibration parameters Declaration public void Calibrate(double maximumAngle, double minimumPulseWidthMicroseconds, double maximumPulseWidthMicroseconds) Parameters Type Name Description Double maximumAngle The maximum angle the servo motor can move represented as a value between 0 and 360. Double minimumPulseWidthMicroseconds The minimum pulse width, in microseconds, that represent an angle for 0 degrees. Double maximumPulseWidthMicroseconds The maxnimum pulse width, in microseconds, that represent an angle for maximum angle. | Improve this Doc View Source Calibrate(Double, Double, Double) Sets calibration parameters Declaration public void Calibrate(double maximumAngle, double minimumPulseWidthMicroseconds, double maximumPulseWidthMicroseconds) Parameters Type Name Description Double maximumAngle The maximum angle the servo motor can move represented as a value between 0 and 360. Double minimumPulseWidthMicroseconds The minimum pulse width, in microseconds, that represent an angle for 0 degrees. Double maximumPulseWidthMicroseconds The maxnimum pulse width, in microseconds, that represent an angle for maximum angle. | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Start() Starts the servo motor. Declaration public void Start() | Improve this Doc View Source Start() Starts the servo motor. Declaration public void Start() | Improve this Doc View Source Stop() Stops the servo motor. Declaration public void Stop() | Improve this Doc View Source Stop() Stops the servo motor. Declaration public void Stop() | Improve this Doc View Source WriteAngle(Double) Writes an angle to the servo motor. Declaration public void WriteAngle(double angle) Parameters Type Name Description Double angle The angle to write to the servo motor. | Improve this Doc View Source WriteAngle(Double) Writes an angle to the servo motor. Declaration public void WriteAngle(double angle) Parameters Type Name Description Double angle The angle to write to the servo motor. | Improve this Doc View Source WritePulseWidth(Int32) Writes a pulse width to the servo motor. Declaration public void WritePulseWidth(int microseconds) Parameters Type Name Description Int32 microseconds The pulse width, in microseconds, to write to the servo motor. | Improve this Doc View Source WritePulseWidth(Int32) Writes a pulse width to the servo motor. Declaration public void WritePulseWidth(int microseconds) Parameters Type Name Description Int32 microseconds The pulse width, in microseconds, to write to the servo motor. Implements IDisposable"
  },
  "devices/Iot.Device.Sht3x.html": {
    "href": "devices/Iot.Device.Sht3x.html",
    "title": "Namespace Iot.Device.Sht3x | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Sht3x Classes Sht3x Humidity and Temperature Sensor SHT3x Enums I2cAddress SHT3x I2C Address Resolution SHT3x Resolution (No Clock Stretching)"
  },
  "devices/Iot.Device.Sht3x.I2cAddress.html": {
    "href": "devices/Iot.Device.Sht3x.I2cAddress.html",
    "title": "Enum I2cAddress | nanoFramework Documentation",
    "keywords": "Enum I2cAddress SHT3x I2C Address Namespace : Iot.Device.Sht3x Assembly : Iot.Device.Sht3x.dll Syntax public enum I2cAddress : byte Fields Name Description AddrHigh ADDR (pin2) connected to logic high AddrLow ADDR (pin2) connected to logic low (Default)"
  },
  "devices/Iot.Device.Sht3x.Resolution.html": {
    "href": "devices/Iot.Device.Sht3x.Resolution.html",
    "title": "Enum Resolution | nanoFramework Documentation",
    "keywords": "Enum Resolution SHT3x Resolution (No Clock Stretching) Namespace : Iot.Device.Sht3x Assembly : Iot.Device.Sht3x.dll Syntax public enum Resolution : byte Fields Name Description High High resolution Low Low resolution Medium Medium resolution"
  },
  "devices/Iot.Device.Sht3x.Sht3x.html": {
    "href": "devices/Iot.Device.Sht3x.Sht3x.html",
    "title": "Class Sht3x | nanoFramework Documentation",
    "keywords": "Class Sht3x Humidity and Temperature Sensor SHT3x Inheritance Object Sht3x Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Sht3x Assembly : Iot.Device.Sht3x.dll Syntax [Interface(\"Humidity and Temperature Sensor SHT3x\")] public class Sht3x : IDisposable Constructors | Improve this Doc View Source Sht3x(I2cDevice, Resolution) Creates a new instance of the SHT3x Declaration public Sht3x(I2cDevice i2cDevice, Resolution resolution = Resolution.High) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Resolution resolution SHT3x Read Resolution Properties | Improve this Doc View Source Heater SHT3x Heater Declaration [Property] public bool Heater { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Humidity SHT3x Relative Humidity (%) Declaration [Telemetry] public RelativeHumidity Humidity { get; } Property Value Type Description UnitsNet.RelativeHumidity | Improve this Doc View Source Resolution SHT3x Resolution Declaration [Property] public Resolution Resolution { get; set; } Property Value Type Description Resolution | Improve this Doc View Source Temperature SHT3x Temperature Declaration [Telemetry] public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() | Improve this Doc View Source Reset() SHT3x Soft Reset Declaration public void Reset() Implements IDisposable"
  },
  "devices/Iot.Device.Shtc3.html": {
    "href": "devices/Iot.Device.Shtc3.html",
    "title": "Namespace Iot.Device.Shtc3 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Shtc3 Classes Shtc3 Temperature and humidity sensor Shtc3"
  },
  "devices/Iot.Device.Shtc3.Shtc3.html": {
    "href": "devices/Iot.Device.Shtc3.Shtc3.html",
    "title": "Class Shtc3 | nanoFramework Documentation",
    "keywords": "Class Shtc3 Temperature and humidity sensor Shtc3 Inheritance Object Shtc3 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Shtc3 Assembly : Iot.Device.Shtc3.dll Syntax public class Shtc3 : IDisposable Constructors | Improve this Doc View Source Shtc3(I2cDevice) Initializes a new instance of the Shtc3 class. Declaration public Shtc3(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Fields | Improve this Doc View Source DefaultI2cAddress Default I2C address Declaration public const int DefaultI2cAddress = 112 Field Value Type Description Int32 Properties | Improve this Doc View Source Id Sensor Id Declaration public int Id { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() | Improve this Doc View Source Reset() SHTC3 Soft Reset Declaration public void Reset() | Improve this Doc View Source Sleep() SHTC3 Sleep Declaration public void Sleep() | Improve this Doc View Source TryGetTemperatureAndHumidity(out Temperature, out RelativeHumidity, Boolean, Boolean) Try read Temperature and Humidity Declaration public bool TryGetTemperatureAndHumidity(out Temperature temperature, out RelativeHumidity relativeHumidity, bool lowPower = false, bool clockStretching = false) Parameters Type Name Description UnitsNet.Temperature temperature Temperature returned by sensor UnitsNet.RelativeHumidity relativeHumidity Humidity return by sensor Boolean lowPower \"true\" measured in low power mode, \"false\"(default) measured in normal power mode Boolean clockStretching \"true\" allow clock stretching, \"false\" (default) without clock stretching Returns Type Description Boolean True if operation was successful Implements IDisposable"
  },
  "devices/Iot.Device.Si7021.html": {
    "href": "devices/Iot.Device.Si7021.html",
    "title": "Namespace Iot.Device.Si7021 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Si7021 Classes Si7021 Temperature and Humidity Sensor Si7021 Enums Resolution Si7021 Measurement Resolution"
  },
  "devices/Iot.Device.Si7021.Resolution.html": {
    "href": "devices/Iot.Device.Si7021.Resolution.html",
    "title": "Enum Resolution | nanoFramework Documentation",
    "keywords": "Enum Resolution Si7021 Measurement Resolution Namespace : Iot.Device.Si7021 Assembly : Iot.Device.Si7021.dll Syntax public enum Resolution : byte Fields Name Description Resolution1 Humidity 12-bit, Temperature 14-bit Resolution2 Humidity 8-bit, Temperature 12-bit Resolution3 Humidity 10-bit, Temperature 13-bit Resolution4 Humidity 11-bit, Temperature 11-bit"
  },
  "devices/Iot.Device.Si7021.Si7021.html": {
    "href": "devices/Iot.Device.Si7021.Si7021.html",
    "title": "Class Si7021 | nanoFramework Documentation",
    "keywords": "Class Si7021 Temperature and Humidity Sensor Si7021 Inheritance Object Si7021 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Si7021 Assembly : Iot.Device.Si7021.dll Syntax [Interface(\"Temperature and Humidity Sensor Si7021\")] public class Si7021 : IDisposable Constructors | Improve this Doc View Source Si7021(I2cDevice, Resolution) Creates a new instance of the Si7021 Declaration public Si7021(I2cDevice i2cDevice, Resolution resolution = Resolution.Resolution1) Parameters Type Name Description I2cDevice i2cDevice I2C Device, like UnixI2cDevice or Windows10I2cDevice Resolution resolution Si7021 Read Resolution Fields | Improve this Doc View Source DefaultI2cAddress Si7021 Default I2C Address Declaration public const byte DefaultI2cAddress = 64 Field Value Type Description Byte Properties | Improve this Doc View Source Heater Si7021 Heater Declaration [Property] public bool Heater { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Humidity Relative Humidity Declaration [Telemetry] public RelativeHumidity Humidity { get; } Property Value Type Description UnitsNet.RelativeHumidity | Improve this Doc View Source Resolution Si7021 Measurement Resolution Declaration [Property] public Resolution Resolution { get; set; } Property Value Type Description Resolution | Improve this Doc View Source Revision Si7021 Firmware Revision Declaration [Property] public byte Revision { get; } Property Value Type Description Byte | Improve this Doc View Source Temperature Si7021 Temperature Declaration [Telemetry] public Temperature Temperature { get; } Property Value Type Description UnitsNet.Temperature Methods | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() Implements IDisposable"
  },
  "devices/Iot.Device.Ssd13xx.Commands.ActivateScroll.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.ActivateScroll.html",
    "title": "Class ActivateScroll | nanoFramework Documentation",
    "keywords": "Class ActivateScroll Represents ActivateScroll command Inheritance Object ActivateScroll Implements ISharedCommand ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class ActivateScroll : ISharedCommand, ICommand Constructors | Improve this Doc View Source ActivateScroll() This command starts the motion of scrolling and should only be issued after the scroll setup parameters have been defined by the scrolling setup commands :26h/27h/29h/2Ah. The setting in the last scrolling setup command overwrites the setting in the previous scrolling setup commands. Declaration public ActivateScroll() Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISharedCommand ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.DeactivateScroll.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.DeactivateScroll.html",
    "title": "Class DeactivateScroll | nanoFramework Documentation",
    "keywords": "Class DeactivateScroll Represents DeactivateScroll command Inheritance Object DeactivateScroll Implements ISharedCommand ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class DeactivateScroll : ISharedCommand, ICommand Constructors | Improve this Doc View Source DeactivateScroll() This command stops the motion of scrolling. After sending 2Eh command to deactivate the scrolling action, the ram data needs to be rewritten. Declaration public DeactivateScroll() Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISharedCommand ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.html",
    "title": "Namespace Iot.Device.Ssd13xx.Commands | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ssd13xx.Commands Classes ActivateScroll Represents ActivateScroll command DeactivateScroll Represents DeactivateScroll command SetContrastControlForBank0 Represents SetContrastControlForBank0 command SetDisplayOff Represents SetDisplayOff command SetDisplayOn Represents SetDisplayOn command SetInverseDisplay Represents SetInverseDisplay command SetMultiplexRatio Represents SetMultiplexRatio command Interfaces ICommand Interface for all Ssd13xx commands ISharedCommand Interface for all shared Ssd13xx commands ISsd1306Command Interface for all Ssd1306 commands ISsd1327Command Interface for all Ssd1327 commands"
  },
  "devices/Iot.Device.Ssd13xx.Commands.ICommand.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.ICommand.html",
    "title": "Interface ICommand | nanoFramework Documentation",
    "keywords": "Interface ICommand Interface for all Ssd13xx commands Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public interface ICommand Properties | Improve this Doc View Source Id The value that represents the command. Declaration byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command."
  },
  "devices/Iot.Device.Ssd13xx.Commands.ISharedCommand.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.ISharedCommand.html",
    "title": "Interface ISharedCommand | nanoFramework Documentation",
    "keywords": "Interface ISharedCommand Interface for all shared Ssd13xx commands Inherited Members ICommand.Id ICommand.GetBytes() Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public interface ISharedCommand : ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.ISsd1306Command.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.ISsd1306Command.html",
    "title": "Interface ISsd1306Command | nanoFramework Documentation",
    "keywords": "Interface ISsd1306Command Interface for all Ssd1306 commands Inherited Members ICommand.Id ICommand.GetBytes() Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public interface ISsd1306Command : ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.ISsd1327Command.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.ISsd1327Command.html",
    "title": "Interface ISsd1327Command | nanoFramework Documentation",
    "keywords": "Interface ISsd1327Command Interface for all Ssd1327 commands Inherited Members ICommand.Id ICommand.GetBytes() Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public interface ISsd1327Command : ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.SetContrastControlForBank0.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.SetContrastControlForBank0.html",
    "title": "Class SetContrastControlForBank0 | nanoFramework Documentation",
    "keywords": "Class SetContrastControlForBank0 Represents SetContrastControlForBank0 command Inheritance Object SetContrastControlForBank0 Implements ISharedCommand ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetContrastControlForBank0 : ISharedCommand, ICommand Constructors | Improve this Doc View Source SetContrastControlForBank0(Byte) This command sets the Contrast Setting of the display. The chip has 256 contrast steps from 0 to 255. The segment output current increases as the contrast step value increases. Declaration public SetContrastControlForBank0(byte contrastSetting = 127) Parameters Type Name Description Byte contrastSetting Contrast setting with a range of 0-255. Properties | Improve this Doc View Source ContrastSetting Contrast setting with a range of 0-255. Declaration public byte ContrastSetting { get; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISharedCommand ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.SetDisplayOff.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.SetDisplayOff.html",
    "title": "Class SetDisplayOff | nanoFramework Documentation",
    "keywords": "Class SetDisplayOff Represents SetDisplayOff command Inheritance Object SetDisplayOff Implements ISharedCommand ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetDisplayOff : ISharedCommand, ICommand Constructors | Improve this Doc View Source SetDisplayOff() This command turns the OLED panel display off. Declaration public SetDisplayOff() Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISharedCommand ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.SetDisplayOn.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.SetDisplayOn.html",
    "title": "Class SetDisplayOn | nanoFramework Documentation",
    "keywords": "Class SetDisplayOn Represents SetDisplayOn command Inheritance Object SetDisplayOn Implements ISharedCommand ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetDisplayOn : ISharedCommand, ICommand Constructors | Improve this Doc View Source SetDisplayOn() This command turns the OLED panel display on. Declaration public SetDisplayOn() Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISharedCommand ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.SetInverseDisplay.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.SetInverseDisplay.html",
    "title": "Class SetInverseDisplay | nanoFramework Documentation",
    "keywords": "Class SetInverseDisplay Represents SetInverseDisplay command Inheritance Object SetInverseDisplay Implements ISharedCommand ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetInverseDisplay : ISharedCommand, ICommand Constructors | Improve this Doc View Source SetInverseDisplay() This command sets the display to be inverse. Displays a RAM data of 0 indicates an ON pixel. Declaration public SetInverseDisplay() Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISharedCommand ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.SetMultiplexRatio.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.SetMultiplexRatio.html",
    "title": "Class SetMultiplexRatio | nanoFramework Documentation",
    "keywords": "Class SetMultiplexRatio Represents SetMultiplexRatio command Inheritance Object SetMultiplexRatio Implements ISharedCommand ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetMultiplexRatio : ISharedCommand, ICommand Constructors | Improve this Doc View Source SetMultiplexRatio(Byte) This command switches the default 63 multiplex mode to any multiplex ratio, ranging from 15 to 127. The output pads COM0-COM63 will be switched to the corresponding COM signal. Declaration public SetMultiplexRatio(byte multiplexRatio = 63) Parameters Type Name Description Byte multiplexRatio Multiplex ratio with a range of 15-127. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source MultiplexRatio Multiplex ratio with a range of 15-63. Declaration public byte MultiplexRatio { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISharedCommand ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.html",
    "title": "Class ContinuousVerticalAndHorizontalScrollSetup | nanoFramework Documentation",
    "keywords": "Class ContinuousVerticalAndHorizontalScrollSetup Represents ContinuousVerticalAndHorizontalScrollSetup command Inheritance Object ContinuousVerticalAndHorizontalScrollSetup Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class ContinuousVerticalAndHorizontalScrollSetup : ISsd1306Command, ICommand Constructors | Improve this Doc View Source ContinuousVerticalAndHorizontalScrollSetup(ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType, PageAddress, FrameFrequencyType, PageAddress, Byte) This command consists of 6 consecutive bytes to set up the continuous vertical scroll parameters and determines the scrolling start page, end page, scrolling speed and vertical scrolling offset. Declaration public ContinuousVerticalAndHorizontalScrollSetup(ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType scrollType, PageAddress startPageAddress, FrameFrequencyType frameFrequencyType, PageAddress endPageAddress, byte verticalScrollingOffset) Parameters Type Name Description ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType scrollType Vertical/Horizontal scroll type. PageAddress startPageAddress Start page address with a range of 0-7. FrameFrequencyType frameFrequencyType Frame frequency type with a range of 0-7. PageAddress endPageAddress End page address with a range of 0-7. Byte verticalScrollingOffset Vertical scrolling offset with a range of 0-63. Properties | Improve this Doc View Source EndPageAddress End page address with a range of 0-7. Declaration public PageAddress EndPageAddress { get; } Property Value Type Description PageAddress | Improve this Doc View Source FrameFrequencyType Frame frequency type with a range of 0-7. Declaration public FrameFrequencyType FrameFrequencyType { get; } Property Value Type Description FrameFrequencyType | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source ScrollType Vertical/Horizontal scroll type. Declaration public ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType ScrollType { get; } Property Value Type Description ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType | Improve this Doc View Source StartPageAddress Start page address with a range of 0-7. Declaration public PageAddress StartPageAddress { get; } Property Value Type Description PageAddress | Improve this Doc View Source VerticalScrollingOffset Vertical scrolling offset with a range of 0-63. Declaration public byte VerticalScrollingOffset { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType.html",
    "title": "Enum ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType | nanoFramework Documentation",
    "keywords": "Enum ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType Vertical and horizontal scroll Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public enum VerticalHorizontalScrollType Fields Name Description Left Vertical and left horizontal scroll. Right Vertical and right horizontal scroll."
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.EntireDisplayOn.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.EntireDisplayOn.html",
    "title": "Class EntireDisplayOn | nanoFramework Documentation",
    "keywords": "Class EntireDisplayOn Represents EntireDisplayOn command Inheritance Object EntireDisplayOn Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class EntireDisplayOn : ISsd1306Command, ICommand Constructors | Improve this Doc View Source EntireDisplayOn(Boolean) This command turns the entire display on or off. Declaration public EntireDisplayOn(bool entireDisplay) Parameters Type Name Description Boolean entireDisplay Resume to RAM content display when FALSE and turns entire dislay on when TRUE. Properties | Improve this Doc View Source EntireDisplay Resume to RAM content display when FALSE and turns entire dislay on when TRUE. Declaration public bool EntireDisplay { get; } Property Value Type Description Boolean | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType.html",
    "title": "Enum FrameFrequencyType | nanoFramework Documentation",
    "keywords": "Enum FrameFrequencyType Frame frequency type Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public enum FrameFrequencyType Fields Name Description Frames128 Frames128 Frames2 Frames2 Frames25 Frames25 Frames256 Frames256 Frames3 Frames3 Frames4 Frames4 Frames5 Frames5 Frames64 Frames64"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.HorizontalScrollType.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.HorizontalScrollType.html",
    "title": "Enum HorizontalScrollSetup.HorizontalScrollType | nanoFramework Documentation",
    "keywords": "Enum HorizontalScrollSetup.HorizontalScrollType Horizontal scroll type Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public enum HorizontalScrollType Fields Name Description Left Left horizontal scroll. Right Right horizontal scroll."
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.html",
    "title": "Class HorizontalScrollSetup | nanoFramework Documentation",
    "keywords": "Class HorizontalScrollSetup Represents HorizontalScrollSetup command Inheritance Object HorizontalScrollSetup Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class HorizontalScrollSetup : ISsd1306Command, ICommand Constructors | Improve this Doc View Source HorizontalScrollSetup(HorizontalScrollSetup.HorizontalScrollType, PageAddress, FrameFrequencyType, PageAddress) This command consists of consecutive bytes to set up the horizontal scroll parameters and determines the scrolling start page, end page and scrolling speed. Declaration public HorizontalScrollSetup(HorizontalScrollSetup.HorizontalScrollType scrollType, PageAddress startPageAddress, FrameFrequencyType frameFrequencyType, PageAddress endPageAddress) Parameters Type Name Description HorizontalScrollSetup.HorizontalScrollType scrollType Horizontal scroll type. PageAddress startPageAddress Start page address with a range of 0-7. FrameFrequencyType frameFrequencyType Frame frequency type with a range of 0-7. PageAddress endPageAddress End page address with a range of 0-7. Properties | Improve this Doc View Source EndPageAddress End page address with a range of 0-7. Declaration public PageAddress EndPageAddress { get; } Property Value Type Description PageAddress | Improve this Doc View Source FrameFrequencyType Frame frequency type with a range of 0-7. Declaration public FrameFrequencyType FrameFrequencyType { get; } Property Value Type Description FrameFrequencyType | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source ScrollType Horizontal scroll type. Declaration public HorizontalScrollSetup.HorizontalScrollType ScrollType { get; } Property Value Type Description HorizontalScrollSetup.HorizontalScrollType | Improve this Doc View Source StartPageAddress Start page address with a range of 0-7. Declaration public PageAddress StartPageAddress { get; } Property Value Type Description PageAddress Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.html",
    "title": "Namespace Iot.Device.Ssd13xx.Commands.Ssd1306Commands | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ssd13xx.Commands.Ssd1306Commands Classes ContinuousVerticalAndHorizontalScrollSetup Represents ContinuousVerticalAndHorizontalScrollSetup command EntireDisplayOn Represents EntireDisplayOn command HorizontalScrollSetup Represents HorizontalScrollSetup command NoOperation Represents NoOperation command SetChargePump Represents SetChargePump command SetColumnAddress Represents SetColumnAddress SetComOutputScanDirection Represents SetComOutputScanDirection command SetComPinsHardwareConfiguration Represents SetComPinsHardwareConfiguration command SetDisplayClockDivideRatioOscillatorFrequency Represents SetDisplayClockDivideRatioOscillatorFrequency command SetDisplayOffset Represents SetDisplayOffset command SetDisplayStartLine Represents SetDisplayStartLine command SetHigherColumnStartAddressForPageAddressingMode Represents SetHigherColumnStartAddressForPageAddressingMode command SetLowerColumnStartAddressForPageAddressingMode Represents SetLowerColumnStartAddressForPageAddressingMode command SetMemoryAddressingMode Represents SetMemoryAddressingMode command SetNormalDisplay Represents SetNormalDisplay command SetPageAddress Represents SetPageAddress command SetPageStartAddressForPageAddressingMode Represents SetPageStartAddressForPageAddressingMode command SetPreChargePeriod Represents SetPreChargePeriod command SetSegmentReMap Represents SetSegmentReMap command SetVcomhDeselectLevel Represents SetVcomhDeselectLevel command SetVerticalScrollArea Represents SetVerticalScrollArea command Enums ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType Vertical and horizontal scroll FrameFrequencyType Frame frequency type HorizontalScrollSetup.HorizontalScrollType Horizontal scroll type PageAddress Page address SetMemoryAddressingMode.AddressingMode Addressing mode SetVcomhDeselectLevel.DeselectLevel Deselect level"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.NoOperation.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.NoOperation.html",
    "title": "Class NoOperation | nanoFramework Documentation",
    "keywords": "Class NoOperation Represents NoOperation command Inheritance Object NoOperation Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class NoOperation : ISsd1306Command, ICommand Constructors | Improve this Doc View Source NoOperation() This command is a no operation command. Declaration public NoOperation() Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress.html",
    "title": "Enum PageAddress | nanoFramework Documentation",
    "keywords": "Enum PageAddress Page address Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public enum PageAddress Fields Name Description Page0 Page0 Page1 Page1 Page2 Page2 Page3 Page3 Page4 Page4 Page5 Page5 Page6 Page6 Page7 Page6"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetChargePump.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetChargePump.html",
    "title": "Class SetChargePump | nanoFramework Documentation",
    "keywords": "Class SetChargePump Represents SetChargePump command Inheritance Object SetChargePump Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetChargePump : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetChargePump(Boolean) This command controls the switching capacitor regulator circuit. Declaration public SetChargePump(bool enableChargePump = false) Parameters Type Name Description Boolean enableChargePump Determines if charge pump is enabled while the display is on. Properties | Improve this Doc View Source EnableChargePump Determines if charge pump is enabled while the display is on. Declaration public bool EnableChargePump { get; } Property Value Type Description Boolean | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetColumnAddress.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetColumnAddress.html",
    "title": "Class SetColumnAddress | nanoFramework Documentation",
    "keywords": "Class SetColumnAddress Represents SetColumnAddress Inheritance Object SetColumnAddress Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetColumnAddress : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetColumnAddress(Byte, Byte) This triple byte command specifies column start address and end address of the display data RAM. This command also sets the column address pointer to column start address. This pointer is used to define the current read/write column address in graphic display data RAM. If horizontal address increment mode is enabled by command 20h, after finishing read/write one column data, it is incremented automatically to the next column address. Whenever the column address pointer finishes accessing the end column address, it is reset back to start column address and the row address is incremented to the next row. This command is only for horizontal or vertical addressing modes. Declaration public SetColumnAddress(byte startAddress = 0, byte endAddress = 127) Parameters Type Name Description Byte startAddress Column start address with a range of 0-127. Byte endAddress Column end address with a range of 0-127. Properties | Improve this Doc View Source EndAddress Column end address with a range of 0-127. Declaration public byte EndAddress { get; set; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source StartAddress Column start address with a range of 0-127. Declaration public byte StartAddress { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComOutputScanDirection.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComOutputScanDirection.html",
    "title": "Class SetComOutputScanDirection | nanoFramework Documentation",
    "keywords": "Class SetComOutputScanDirection Represents SetComOutputScanDirection command Inheritance Object SetComOutputScanDirection Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetComOutputScanDirection : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetComOutputScanDirection(Boolean) This command sets the scan direction of the COM output, allowing layout flexibility in the OLED module design. Additionally, the display will show once this command is issued. For example, if this command is sent during normal display then the graphic display will be vertically flipped immediately. Declaration public SetComOutputScanDirection(bool normalMode = true) Parameters Type Name Description Boolean normalMode Scan from COM0 to COM[N –1] when TRUE. Scan from COM[N - 1] to COM0 when FALSE. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source NormalMode Scan from COM0 to COM[N –1] when TRUE. Scan from COM[N - 1] to COM0 when FALSE. Declaration public bool NormalMode { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComPinsHardwareConfiguration.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComPinsHardwareConfiguration.html",
    "title": "Class SetComPinsHardwareConfiguration | nanoFramework Documentation",
    "keywords": "Class SetComPinsHardwareConfiguration Represents SetComPinsHardwareConfiguration command Inheritance Object SetComPinsHardwareConfiguration Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetComPinsHardwareConfiguration : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetComPinsHardwareConfiguration(Boolean, Boolean) This command sets the COM signals pin configuration to match the OLED panel hardware layout. Declaration public SetComPinsHardwareConfiguration(bool alternativeComPinConfiguration = true, bool enableLeftRightRemap = false) Parameters Type Name Description Boolean alternativeComPinConfiguration Alternative COM pin configuration. Boolean enableLeftRightRemap Enable left/right remap. Properties | Improve this Doc View Source AlternativeComPinConfiguration Alternative COM pin configuration. Declaration public bool AlternativeComPinConfiguration { get; } Property Value Type Description Boolean | Improve this Doc View Source EnableLeftRightRemap Enable left/right remap. Declaration public bool EnableLeftRightRemap { get; } Property Value Type Description Boolean | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayClockDivideRatioOscillatorFrequency.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayClockDivideRatioOscillatorFrequency.html",
    "title": "Class SetDisplayClockDivideRatioOscillatorFrequency | nanoFramework Documentation",
    "keywords": "Class SetDisplayClockDivideRatioOscillatorFrequency Represents SetDisplayClockDivideRatioOscillatorFrequency command Inheritance Object SetDisplayClockDivideRatioOscillatorFrequency Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetDisplayClockDivideRatioOscillatorFrequency : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetDisplayClockDivideRatioOscillatorFrequency(Byte, Byte) This command sets the divide ratio to generate DCLK (Display Clock) from CLK and programs the oscillator frequency Fosc that is the source of CLK if CLS pin is pulled high. Declaration public SetDisplayClockDivideRatioOscillatorFrequency(byte displayClockDivideRatio = 0, byte oscillatorFrequency = 8) Parameters Type Name Description Byte displayClockDivideRatio Display clock divide ratio with a range of 0-15. Byte oscillatorFrequency Oscillator frequency with a range of 0-15. Properties | Improve this Doc View Source DisplayClockDivideRatio Display clock divide ratio with a range of 0-15. Declaration public byte DisplayClockDivideRatio { get; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source OscillatorFrequency Oscillator frequency with a range of 0-15. Declaration public byte OscillatorFrequency { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayOffset.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayOffset.html",
    "title": "Class SetDisplayOffset | nanoFramework Documentation",
    "keywords": "Class SetDisplayOffset Represents SetDisplayOffset command Inheritance Object SetDisplayOffset Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetDisplayOffset : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetDisplayOffset(Byte) This command specifies the mapping of the display start line to one of COM0-COM63 (assuming that COM0 is the display start line then the display start line register is equal to 0). Declaration public SetDisplayOffset(byte displayOffset = 0) Parameters Type Name Description Byte displayOffset Display offset with a range of 0-63. Properties | Improve this Doc View Source DisplayOffset Display offset with a range of 0-63. Declaration public byte DisplayOffset { get; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayStartLine.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayStartLine.html",
    "title": "Class SetDisplayStartLine | nanoFramework Documentation",
    "keywords": "Class SetDisplayStartLine Represents SetDisplayStartLine command Inheritance Object SetDisplayStartLine Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetDisplayStartLine : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetDisplayStartLine(Byte) This command sets the Display Start Line register to determine starting address of display RAM, by selecting a value from 0 to 63. With value equal to 0, RAM row 0 is mapped to COM0. With value equal to 1, RAM row 1 is mapped to COM0 and so on. Declaration public SetDisplayStartLine(byte displayStartLine = 0) Parameters Type Name Description Byte displayStartLine Display start line with a range of 0-63. Properties | Improve this Doc View Source DisplayStartLine Display start line with a range of 0-63. Declaration public byte DisplayStartLine { get; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetHigherColumnStartAddressForPageAddressingMode.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetHigherColumnStartAddressForPageAddressingMode.html",
    "title": "Class SetHigherColumnStartAddressForPageAddressingMode | nanoFramework Documentation",
    "keywords": "Class SetHigherColumnStartAddressForPageAddressingMode Represents SetHigherColumnStartAddressForPageAddressingMode command Inheritance Object SetHigherColumnStartAddressForPageAddressingMode Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetHigherColumnStartAddressForPageAddressingMode : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetHigherColumnStartAddressForPageAddressingMode(Byte) This command specifies the higher nibble of the 8-bit column start address for the display data RAM under Page Addressing Mode. The column address will be incremented by each data access. This command is only for page addressing mode. Declaration public SetHigherColumnStartAddressForPageAddressingMode(byte higherColumnStartAddress = 0) Parameters Type Name Description Byte higherColumnStartAddress Higher column start address with a range of 0-15. Properties | Improve this Doc View Source HigherColumnStartAddress Higher column start address with a range of 0-15. Declaration public byte HigherColumnStartAddress { get; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetLowerColumnStartAddressForPageAddressingMode.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetLowerColumnStartAddressForPageAddressingMode.html",
    "title": "Class SetLowerColumnStartAddressForPageAddressingMode | nanoFramework Documentation",
    "keywords": "Class SetLowerColumnStartAddressForPageAddressingMode Represents SetLowerColumnStartAddressForPageAddressingMode command Inheritance Object SetLowerColumnStartAddressForPageAddressingMode Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetLowerColumnStartAddressForPageAddressingMode : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetLowerColumnStartAddressForPageAddressingMode(Byte) This command specifies the lower nibble of the 8-bit column start address for the display data RAM under Page Addressing Mode. The column address will be incremented by each data access. This command is only for page addressing mode. Declaration public SetLowerColumnStartAddressForPageAddressingMode(byte lowerColumnStartAddress = 0) Parameters Type Name Description Byte lowerColumnStartAddress Lower column start address with a range of 0-15. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source LowerColumnStartAddress Lower column start address with a range of 0-15. Declaration public byte LowerColumnStartAddress { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.AddressingMode.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.AddressingMode.html",
    "title": "Enum SetMemoryAddressingMode.AddressingMode | nanoFramework Documentation",
    "keywords": "Enum SetMemoryAddressingMode.AddressingMode Addressing mode Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public enum AddressingMode Fields Name Description Horizontal In horizontal addressing mode, after the display RAM is read/written, the column address pointer is increased automatically by 1. If the column address pointer reaches column end address, the column address pointer is reset to column start address and page address pointer is increased by 1. When both column and page address pointers reach the end address, the pointers are reset to column start address and page start address. Page In page addressing mode, after the display RAM is read/written, the column address pointer is increased automatically by 1. If the column address pointer reaches column end address, the column address pointer is reset to column start address and page address pointer is not changed. Users have to set the new page and column addresses in order to access the next page RAM content. Vertical In vertical addressing mode, after the display RAM is read/written, the page address pointer is increased automatically by 1. If the page address pointer reaches the page end address, the page address pointer is reset to page start address and column address pointer is increased by 1. When both column and page address pointers reach the end address, the pointers are reset to column start address and page start address."
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.html",
    "title": "Class SetMemoryAddressingMode | nanoFramework Documentation",
    "keywords": "Class SetMemoryAddressingMode Represents SetMemoryAddressingMode command Inheritance Object SetMemoryAddressingMode Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetMemoryAddressingMode : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetMemoryAddressingMode(SetMemoryAddressingMode.AddressingMode) This command sets the memory addressing mode. Declaration public SetMemoryAddressingMode(SetMemoryAddressingMode.AddressingMode memoryAddressingMode = SetMemoryAddressingMode.AddressingMode.Page) Parameters Type Name Description SetMemoryAddressingMode.AddressingMode memoryAddressingMode Memory addressing mode. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source MemoryAddressingMode Memory addressing mode. Declaration public SetMemoryAddressingMode.AddressingMode MemoryAddressingMode { get; } Property Value Type Description SetMemoryAddressingMode.AddressingMode Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetNormalDisplay.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetNormalDisplay.html",
    "title": "Class SetNormalDisplay | nanoFramework Documentation",
    "keywords": "Class SetNormalDisplay Represents SetNormalDisplay command Inheritance Object SetNormalDisplay Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetNormalDisplay : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetNormalDisplay() This command sets the display to be normal. Displays a RAM data of 1 indicates an ON pixel. Declaration public SetNormalDisplay() Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageAddress.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageAddress.html",
    "title": "Class SetPageAddress | nanoFramework Documentation",
    "keywords": "Class SetPageAddress Represents SetPageAddress command Inheritance Object SetPageAddress Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetPageAddress : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetPageAddress(PageAddress, PageAddress) This triple byte command specifies page start address and end address of the display data RAM. This command also sets the page address pointer to page start address. This pointer is used to define the current read/write page address in graphic display data RAM. If vertical address increment mode is enabled by command 20h, after finishing read/write one page data, it is incremented automatically to the next page address. Whenever the page address pointer finishes accessing the end page address, it is reset back to start page address. This command is only for horizontal or vertical addressing modes. Declaration public SetPageAddress(PageAddress startAddress = PageAddress.Page0, PageAddress endAddress = PageAddress.Page7) Parameters Type Name Description PageAddress startAddress Page start address with a range of 0-7. PageAddress endAddress Page end address with a range of 0-7. Properties | Improve this Doc View Source EndAddress Page end address with a range of 0-7. Declaration public PageAddress EndAddress { get; set; } Property Value Type Description PageAddress | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source StartAddress Page start address with a range of 0-7. Declaration public PageAddress StartAddress { get; set; } Property Value Type Description PageAddress Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageStartAddressForPageAddressingMode.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageStartAddressForPageAddressingMode.html",
    "title": "Class SetPageStartAddressForPageAddressingMode | nanoFramework Documentation",
    "keywords": "Class SetPageStartAddressForPageAddressingMode Represents SetPageStartAddressForPageAddressingMode command Inheritance Object SetPageStartAddressForPageAddressingMode Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetPageStartAddressForPageAddressingMode : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetPageStartAddressForPageAddressingMode(PageAddress) This command positions the page start address from 0 to 7 in GDDRAM under Page Addressing Mode. Declaration public SetPageStartAddressForPageAddressingMode(PageAddress startAddress = PageAddress.Page0) Parameters Type Name Description PageAddress startAddress Page start address with a range of 0-7. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source StartAddress Page start address with a range of 0-7. Declaration public PageAddress StartAddress { get; } Property Value Type Description PageAddress Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPreChargePeriod.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPreChargePeriod.html",
    "title": "Class SetPreChargePeriod | nanoFramework Documentation",
    "keywords": "Class SetPreChargePeriod Represents SetPreChargePeriod command Inheritance Object SetPreChargePeriod Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetPreChargePeriod : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetPreChargePeriod(Byte, Byte) This command is used to set the duration of the pre-charge period. The interval is counted in number of DCLK, where RESET equals 2 DCLKs. Declaration public SetPreChargePeriod(byte phase1Period = 2, byte phase2Period = 2) Parameters Type Name Description Byte phase1Period Phase 1 period with a range of 1-15. Byte phase2Period Phase 2 period with a range of 1-15. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source Phase1Period Phase 1 period with a range of 1-15. Declaration public byte Phase1Period { get; } Property Value Type Description Byte | Improve this Doc View Source Phase2Period Phase 2 period with a range of 1-15. Declaration public byte Phase2Period { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetSegmentReMap.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetSegmentReMap.html",
    "title": "Class SetSegmentReMap | nanoFramework Documentation",
    "keywords": "Class SetSegmentReMap Represents SetSegmentReMap command Inheritance Object SetSegmentReMap Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetSegmentReMap : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetSegmentReMap(Boolean) This command changes the mapping between the display data column address and the segment driver. It allows flexibility in OLED module design. This command only affects subsequent data input. Data already stored in GDDRAM will have no changes. Declaration public SetSegmentReMap(bool columnAddress127 = false) Parameters Type Name Description Boolean columnAddress127 Column address 0 is mapped to SEG0 when FALSE. Column address 127 is mapped to SEG0 when TRUE. Properties | Improve this Doc View Source ColumnAddress127 Column Address 127. Column address 127 is mapped to SEG0 when FALSE. Column address 127 is mapped to SEG0 when TRUE. Declaration public bool ColumnAddress127 { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.DeselectLevel.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.DeselectLevel.html",
    "title": "Enum SetVcomhDeselectLevel.DeselectLevel | nanoFramework Documentation",
    "keywords": "Enum SetVcomhDeselectLevel.DeselectLevel Deselect level Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public enum DeselectLevel Fields Name Description Vcc0_65 ~0.65 x Vcc. Vcc0_77 ~0.77 x Vcc. Default value after reset. Vcc0_83 ~0.83 x Vcc. Vcc1_00 ~1.00 x Vcc."
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.html",
    "title": "Class SetVcomhDeselectLevel | nanoFramework Documentation",
    "keywords": "Class SetVcomhDeselectLevel Represents SetVcomhDeselectLevel command Inheritance Object SetVcomhDeselectLevel Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetVcomhDeselectLevel : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetVcomhDeselectLevel(SetVcomhDeselectLevel.DeselectLevel) This command adjusts the VCOMH regulator output. Declaration public SetVcomhDeselectLevel(SetVcomhDeselectLevel.DeselectLevel level = SetVcomhDeselectLevel.DeselectLevel.Vcc0_77) Parameters Type Name Description SetVcomhDeselectLevel.DeselectLevel level Vcomh deselect level. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source Level Vcomh deselect level. Declaration public SetVcomhDeselectLevel.DeselectLevel Level { get; } Property Value Type Description SetVcomhDeselectLevel.DeselectLevel Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVerticalScrollArea.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVerticalScrollArea.html",
    "title": "Class SetVerticalScrollArea | nanoFramework Documentation",
    "keywords": "Class SetVerticalScrollArea Represents SetVerticalScrollArea command Inheritance Object SetVerticalScrollArea Implements ISsd1306Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1306Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetVerticalScrollArea : ISsd1306Command, ICommand Constructors | Improve this Doc View Source SetVerticalScrollArea(Byte, Byte) This command consists of 3 consecutive bytes to set up the vertical scroll area. For the continuous vertical scroll function(command 29/2Ah), the number of rows that in vertical scrolling can be set smaller or equal to the MUX ratio. Declaration public SetVerticalScrollArea(byte topFixedAreaRows = 0, byte scrollAreaRows = 64) Parameters Type Name Description Byte topFixedAreaRows Top fixed area rows with a range of 0-63. Byte scrollAreaRows Scroll area rows with a range of 0-127. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source ScrollAreaRows Scroll area rows with a range of 0-127. Declaration public byte ScrollAreaRows { get; } Property Value Type Description Byte | Improve this Doc View Source TopFixedAreaRows Top fixed area rows with a range of 0-63. Declaration public byte TopFixedAreaRows { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1306Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.html",
    "title": "Namespace Iot.Device.Ssd13xx.Commands.Ssd1327Commands | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ssd13xx.Commands.Ssd1327Commands Classes SelectDefaultLinearGrayScaleTable Represents SelectDefaultLinearGrayScaleTable command SetColumnAddress Represents SetColumnAddress command SetComDeselectVoltageLevel Represents SetComDeselectVoltageLevel command SetDisplayClockDivideRatioOscillatorFrequency Represents SetDisplayClockDivideRatioOscillatorFrequency command SetDisplayOffset Represents SetDisplayOffset command SetDisplayStartLine Represents SetDisplayStartLine command SetInternalVddRegulator Represents SetInternalVddRegulator command SetNormalDisplay Represents SetNormalDisplay command SetPhaseLength Sets the length of phase 1 and 2 of segment waveform of the driver. SetPreChargeVoltage Represents SetPreChargeVoltage command SetReMap Represents SetReMap command SetRowAddress Represents SetRowAddress command SetSecondPreChargePeriod Represents SetSecondPreChargePeriod command SetSecondPreChargeVsl Represents SetSecondPreChargeVsl command SetUnlockDriver Represents SetUnlockDriver command"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SelectDefaultLinearGrayScaleTable.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SelectDefaultLinearGrayScaleTable.html",
    "title": "Class SelectDefaultLinearGrayScaleTable | nanoFramework Documentation",
    "keywords": "Class SelectDefaultLinearGrayScaleTable Represents SelectDefaultLinearGrayScaleTable command Inheritance Object SelectDefaultLinearGrayScaleTable Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SelectDefaultLinearGrayScaleTable : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SelectDefaultLinearGrayScaleTable() This command reloads the preset linear Gray Scale table. Declaration public SelectDefaultLinearGrayScaleTable() Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetColumnAddress.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetColumnAddress.html",
    "title": "Class SetColumnAddress | nanoFramework Documentation",
    "keywords": "Class SetColumnAddress Represents SetColumnAddress command Inheritance Object SetColumnAddress Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetColumnAddress : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetColumnAddress(Byte, Byte) Set column address. Start from 8th column of driver IC. This is 0th column for OLED. End at (8 + 47)th column. Each column has 2 pixels(or segments). Declaration public SetColumnAddress(byte startAddress = 8, byte endAddress = 55) Parameters Type Name Description Byte startAddress Column start address with a range of 8-55. Byte endAddress Column end address with a range of 8-55. Properties | Improve this Doc View Source EndAddress Column end address. Declaration public byte EndAddress { get; set; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source StartAddress Column start address. Declaration public byte StartAddress { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetComDeselectVoltageLevel.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetComDeselectVoltageLevel.html",
    "title": "Class SetComDeselectVoltageLevel | nanoFramework Documentation",
    "keywords": "Class SetComDeselectVoltageLevel Represents SetComDeselectVoltageLevel command Inheritance Object SetComDeselectVoltageLevel Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetComDeselectVoltageLevel : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetComDeselectVoltageLevel(Byte) This command sets the high voltage level of common pins, Vcomh. Declaration public SetComDeselectVoltageLevel(byte level = 5) Parameters Type Name Description Byte level COM deselect voltage level. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source Level COM deselect voltage level. Declaration public byte Level { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayClockDivideRatioOscillatorFrequency.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayClockDivideRatioOscillatorFrequency.html",
    "title": "Class SetDisplayClockDivideRatioOscillatorFrequency | nanoFramework Documentation",
    "keywords": "Class SetDisplayClockDivideRatioOscillatorFrequency Represents SetDisplayClockDivideRatioOscillatorFrequency command Inheritance Object SetDisplayClockDivideRatioOscillatorFrequency Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetDisplayClockDivideRatioOscillatorFrequency : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetDisplayClockDivideRatioOscillatorFrequency(Byte, Byte) This command sets the divide ratio to generate DCLK (Display Clock) from CLK and programs the oscillator frequency Fosc that is the source of CLK if CLS pin is pulled high. Declaration public SetDisplayClockDivideRatioOscillatorFrequency(byte displayClockDivideRatio = 0, byte oscillatorFrequency = 0) Parameters Type Name Description Byte displayClockDivideRatio Display clock divide ratio with a range of 0-15. For more information see device documentations. Byte oscillatorFrequency Oscillator frequency with a range of 0-15 in Kilohertz. For more information see device documentations. Properties | Improve this Doc View Source DisplayClockDivideRatio Display clock divide ratio with a range of 0-15. Declaration public byte DisplayClockDivideRatio { get; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source OscillatorFrequency Oscillator frequency with a range of 0-15. Declaration public byte OscillatorFrequency { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayOffset.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayOffset.html",
    "title": "Class SetDisplayOffset | nanoFramework Documentation",
    "keywords": "Class SetDisplayOffset Represents SetDisplayOffset command Inheritance Object SetDisplayOffset Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetDisplayOffset : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetDisplayOffset(Byte) This command specifies the mapping of the display start line to one of COM0-COM127 (assuming that COM0 is the display start line then the display start line register is equal to 0). Declaration public SetDisplayOffset(byte displayOffset = 0) Parameters Type Name Description Byte displayOffset Display offset with a range of 0-127. Properties | Improve this Doc View Source DisplayOffset Display offset with a range of 0-127. Declaration public byte DisplayOffset { get; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayStartLine.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayStartLine.html",
    "title": "Class SetDisplayStartLine | nanoFramework Documentation",
    "keywords": "Class SetDisplayStartLine Represents SetDisplayStartLine command Inheritance Object SetDisplayStartLine Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetDisplayStartLine : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetDisplayStartLine(Byte) This command sets the Display Start Line register to determine starting address of display RAM, by selecting a value from 0 to 127. With value equal to 0, RAM row 0 is mapped to COM0. With value equal to 1, RAM row 1 is mapped to COM0 and so on. Declaration public SetDisplayStartLine(byte displayStartLine = 0) Parameters Type Name Description Byte displayStartLine Display start line with a range of 0-63. Properties | Improve this Doc View Source DisplayStartLine Display start line with a range of 0-127. Declaration public byte DisplayStartLine { get; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetInternalVddRegulator.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetInternalVddRegulator.html",
    "title": "Class SetInternalVddRegulator | nanoFramework Documentation",
    "keywords": "Class SetInternalVddRegulator Represents SetInternalVddRegulator command Inheritance Object SetInternalVddRegulator Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetInternalVddRegulator : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetInternalVddRegulator(Boolean) This command is used to enable internal Vdd regulator. Declaration public SetInternalVddRegulator(bool enable) Parameters Type Name Description Boolean enable Represents if internal Vdd have to be enabled. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source UseInternalVdd The value that represent if internal or external Vdd should be used. Declaration public byte UseInternalVdd { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetNormalDisplay.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetNormalDisplay.html",
    "title": "Class SetNormalDisplay | nanoFramework Documentation",
    "keywords": "Class SetNormalDisplay Represents SetNormalDisplay command Inheritance Object SetNormalDisplay Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetNormalDisplay : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetNormalDisplay() This command sets the display to be normal. Declaration public SetNormalDisplay() Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPhaseLength.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPhaseLength.html",
    "title": "Class SetPhaseLength | nanoFramework Documentation",
    "keywords": "Class SetPhaseLength Sets the length of phase 1 and 2 of segment waveform of the driver. Inheritance Object SetPhaseLength Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetPhaseLength : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetPhaseLength(Byte) Constructs instance of SetPhaseLength command Declaration public SetPhaseLength(byte phasePeriod) Parameters Type Name Description Byte phasePeriod Phase period | Improve this Doc View Source SetPhaseLength(Byte, Byte) Constructs instance of SetPhaseLength command Declaration public SetPhaseLength(byte phase1Period = 2, byte phase2Period = 2) Parameters Type Name Description Byte phase1Period Phase 1 period Byte phase2Period Phase 2 period Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source Phase1Period Phase 1 period with a range of 1-15. Declaration public byte Phase1Period { get; } Property Value Type Description Byte | Improve this Doc View Source Phase2Period Phase 2 period with a range of 1-15. Declaration public byte Phase2Period { get; } Property Value Type Description Byte | Improve this Doc View Source PhasePeriod Phase period. Declaration public byte PhasePeriod { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPreChargeVoltage.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPreChargeVoltage.html",
    "title": "Class SetPreChargeVoltage | nanoFramework Documentation",
    "keywords": "Class SetPreChargeVoltage Represents SetPreChargeVoltage command Inheritance Object SetPreChargeVoltage Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetPreChargeVoltage : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetPreChargeVoltage(Byte) This command sets the first pre-charge voltage (phase 2) level of segment pins. Declaration public SetPreChargeVoltage(byte level = 5) Parameters Type Name Description Byte level Pre-charge voltage level. Parameter values between 0b_0000 and 0b_0111 leads to voltage values between 0.2 x Vcc and 0.613 x Vcc Volts. Parameter value 0b_1XXX leads to voltage value equals to Vcomh. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source Level Pre-charge voltage level. Declaration public byte Level { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetReMap.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetReMap.html",
    "title": "Class SetReMap | nanoFramework Documentation",
    "keywords": "Class SetReMap Represents SetReMap command Inheritance Object SetReMap Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetReMap : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetReMap(Boolean, Boolean, Boolean, Boolean, Boolean) Re-map setting in Graphic Display Data RAM(GDDRAM) Declaration public SetReMap(bool columnAddressRemap = false, bool nibbleRemap = true, bool verticalMode = true, bool comRemap = false, bool comSplitOddEven = true) Parameters Type Name Description Boolean columnAddressRemap Boolean nibbleRemap Boolean verticalMode Boolean comRemap Boolean comSplitOddEven Properties | Improve this Doc View Source Config ReMap Config. Declaration public byte Config { get; set; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetRowAddress.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetRowAddress.html",
    "title": "Class SetRowAddress | nanoFramework Documentation",
    "keywords": "Class SetRowAddress Represents SetRowAddress command Inheritance Object SetRowAddress Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetRowAddress : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetRowAddress(Byte, Byte) Set row address Declaration public SetRowAddress(byte startAddress = 0, byte endAddress = 95) Parameters Type Name Description Byte startAddress Column start address with a range of 0-95. Byte endAddress Column end address with a range of 0-95. Properties | Improve this Doc View Source EndAddress Row end address. Declaration public byte EndAddress { get; set; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source StartAddress Row start address. Declaration public byte StartAddress { get; set; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargePeriod.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargePeriod.html",
    "title": "Class SetSecondPreChargePeriod | nanoFramework Documentation",
    "keywords": "Class SetSecondPreChargePeriod Represents SetSecondPreChargePeriod command Inheritance Object SetSecondPreChargePeriod Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetSecondPreChargePeriod : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetSecondPreChargePeriod(Byte) This command is used to set the phase 3 second pre-charge period. Declaration public SetSecondPreChargePeriod(byte period = 4) Parameters Type Name Description Byte period Second pre-charge period. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte | Improve this Doc View Source Period Second Pre-charge period. Declaration public byte Period { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargeVsl.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargeVsl.html",
    "title": "Class SetSecondPreChargeVsl | nanoFramework Documentation",
    "keywords": "Class SetSecondPreChargeVsl Represents SetSecondPreChargeVsl command Inheritance Object SetSecondPreChargeVsl Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetSecondPreChargeVsl : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetSecondPreChargeVsl(Boolean, Boolean) This command sets the first pre-charge voltage (phase 2) level of segment pins. Declaration public SetSecondPreChargeVsl(bool secondPrecharge = false, bool externalVsl = false) Parameters Type Name Description Boolean secondPrecharge Enable/disable second precharge. Boolean externalVsl Switch between internal and external VSL. Properties | Improve this Doc View Source Config The value that represents configuration Declaration public byte Config { get; } Property Value Type Description Byte | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetUnlockDriver.html": {
    "href": "devices/Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetUnlockDriver.html",
    "title": "Class SetUnlockDriver | nanoFramework Documentation",
    "keywords": "Class SetUnlockDriver Represents SetUnlockDriver command Inheritance Object SetUnlockDriver Implements ISsd1327Command ICommand Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx.Commands.Ssd1327Commands Assembly : Iot.Device.Ssd13xx.dll Syntax public class SetUnlockDriver : ISsd1327Command, ICommand Constructors | Improve this Doc View Source SetUnlockDriver(Boolean) This command sets the display to be normal. Declaration public SetUnlockDriver(bool unlock) Parameters Type Name Description Boolean unlock Represents if driver have to be unlocked. Properties | Improve this Doc View Source Id The value that represents the command. Declaration public byte Id { get; } Property Value Type Description Byte Methods | Improve this Doc View Source GetBytes() Gets the bytes that represent the command. Declaration public byte[] GetBytes() Returns Type Description Byte [] The bytes that represent the command. Implements ISsd1327Command ICommand"
  },
  "devices/Iot.Device.Ssd13xx.html": {
    "href": "devices/Iot.Device.Ssd13xx.html",
    "title": "Namespace Iot.Device.Ssd13xx | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ssd13xx Classes IFont Base class for font implementation. Ssd1306 A single-chip CMOS OLED/PLED driver with controller for organic/polymer light emitting diode dot-matrix graphic display system. Ssd1327 Represents SSD1327 OLED display Ssd13xx Represents base class for SSD13xx OLED displays Enums Ssd13xx.DisplayResolution Resolution specifier. Ssd13xx.DisplayResolution Resolution specifier."
  },
  "devices/Iot.Device.Ssd13xx.IFont.html": {
    "href": "devices/Iot.Device.Ssd13xx.IFont.html",
    "title": "Class IFont | nanoFramework Documentation",
    "keywords": "Class IFont Base class for font implementation. Inheritance Object IFont Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx Assembly : Iot.Device.Ssd13xx.dll Syntax public abstract class IFont Properties | Improve this Doc View Source Height Font height. Declaration public virtual byte Height { get; } Property Value Type Description Byte | Improve this Doc View Source Item[Char] Get the binary representation of the ASCII character from the font table. Declaration public abstract byte[] this[char character] { get; } Parameters Type Name Description Char character Character to look up. Property Value Type Description Byte [] Array of bytes representing the binary bit pattern of the character. | Improve this Doc View Source Width Font width. Declaration public virtual byte Width { get; } Property Value Type Description Byte"
  },
  "devices/Iot.Device.Ssd13xx.Ssd1306.html": {
    "href": "devices/Iot.Device.Ssd13xx.Ssd1306.html",
    "title": "Class Ssd1306 | nanoFramework Documentation",
    "keywords": "Class Ssd1306 A single-chip CMOS OLED/PLED driver with controller for organic/polymer light emitting diode dot-matrix graphic display system. Inheritance Object Ssd13xx Ssd1306 Implements IDisposable Inherited Members Ssd13xx._i2cDevice Ssd13xx.Width Ssd13xx.Height Ssd13xx.Pages Ssd13xx.Font Ssd13xx.SendData(SpanByte) Ssd13xx.Dispose() Ssd13xx.SliceGenericBuffer(Int32) Ssd13xx.SliceGenericBuffer(Int32, Int32) Ssd13xx.DrawPixel(Int32, Int32, Boolean) Ssd13xx.DrawHorizontalLine(Int32, Int32, Int32, Boolean) Ssd13xx.DrawVerticalLine(Int32, Int32, Int32, Boolean) Ssd13xx.DrawFilledRectangle(Int32, Int32, Int32, Int32, Boolean) Ssd13xx.DrawBitmap(Int32, Int32, Int32, Int32, Byte[], Byte) Ssd13xx.DrawString(Int32, Int32, String, Byte, Boolean) Ssd13xx.Write(Int32, Int32, String, Byte, Boolean) Ssd13xx.Display() Ssd13xx.ClearScreen() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx Assembly : Iot.Device.Ssd13xx.dll Syntax public class Ssd1306 : Ssd13xx, IDisposable Constructors | Improve this Doc View Source Ssd1306(I2cDevice) Initializes new instance of Ssd1306 device that will communicate using I2C bus. A single-chip CMOS OLED/PLED driver with controller for organic/polymer light emitting diode dot-matrix graphic display system. Declaration public Ssd1306(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. | Improve this Doc View Source Ssd1306(I2cDevice) Initializes new instance of Ssd1306 device that will communicate using I2C bus. A single-chip CMOS OLED/PLED driver with controller for organic/polymer light emitting diode dot-matrix graphic display system. Declaration public Ssd1306(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. | Improve this Doc View Source Ssd1306(I2cDevice, Ssd13xx.DisplayResolution) Initializes new instance of Ssd1306 device that will communicate using I2C bus. A single-chip CMOS OLED/PLED driver with controller for organic/polymer light emitting diode dot-matrix graphic display system. Declaration public Ssd1306(I2cDevice i2cDevice, Ssd13xx.DisplayResolution res) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Ssd13xx.DisplayResolution res Display resolution | Improve this Doc View Source Ssd1306(I2cDevice, Ssd13xx.DisplayResolution) Initializes new instance of Ssd1306 device that will communicate using I2C bus. A single-chip CMOS OLED/PLED driver with controller for organic/polymer light emitting diode dot-matrix graphic display system. Declaration public Ssd1306(I2cDevice i2cDevice, Ssd13xx.DisplayResolution res) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Ssd13xx.DisplayResolution res Display resolution Fields | Improve this Doc View Source DefaultI2cAddress Default I2C bus address. Declaration public const byte DefaultI2cAddress = 60 Field Value Type Description Byte | Improve this Doc View Source DefaultI2cAddress Default I2C bus address. Declaration public const byte DefaultI2cAddress = 60 Field Value Type Description Byte Methods | Improve this Doc View Source SendCommand(ISharedCommand) Sends command to the device Declaration public override void SendCommand(ISharedCommand command) Parameters Type Name Description ISharedCommand command Command being send Overrides Ssd13xx.SendCommand(ISharedCommand) | Improve this Doc View Source SendCommand(ISharedCommand) Sends command to the device Declaration public override void SendCommand(ISharedCommand command) Parameters Type Name Description ISharedCommand command Command being send Overrides Ssd13xx.SendCommand(ISharedCommand) | Improve this Doc View Source SendCommand(ISsd1306Command) Sends command to the device Declaration public void SendCommand(ISsd1306Command command) Parameters Type Name Description ISsd1306Command command Command being send | Improve this Doc View Source SendCommand(ISsd1306Command) Sends command to the device Declaration public void SendCommand(ISsd1306Command command) Parameters Type Name Description ISsd1306Command command Command being send Implements IDisposable"
  },
  "devices/Iot.Device.Ssd13xx.Ssd1327.html": {
    "href": "devices/Iot.Device.Ssd13xx.Ssd1327.html",
    "title": "Class Ssd1327 | nanoFramework Documentation",
    "keywords": "Class Ssd1327 Represents SSD1327 OLED display Inheritance Object Ssd13xx Ssd1327 Implements IDisposable Inherited Members Ssd13xx._i2cDevice Ssd13xx.Width Ssd13xx.Height Ssd13xx.Pages Ssd13xx.Font Ssd13xx.SendData(SpanByte) Ssd13xx.Dispose() Ssd13xx.SliceGenericBuffer(Int32) Ssd13xx.SliceGenericBuffer(Int32, Int32) Ssd13xx.DrawPixel(Int32, Int32, Boolean) Ssd13xx.DrawHorizontalLine(Int32, Int32, Int32, Boolean) Ssd13xx.DrawVerticalLine(Int32, Int32, Int32, Boolean) Ssd13xx.DrawFilledRectangle(Int32, Int32, Int32, Int32, Boolean) Ssd13xx.DrawBitmap(Int32, Int32, Int32, Int32, Byte[], Byte) Ssd13xx.DrawString(Int32, Int32, String, Byte, Boolean) Ssd13xx.Write(Int32, Int32, String, Byte, Boolean) Ssd13xx.Display() Ssd13xx.ClearScreen() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx Assembly : Iot.Device.Ssd13xx.dll Syntax public class Ssd1327 : Ssd13xx, IDisposable Constructors | Improve this Doc View Source Ssd1327(I2cDevice) Initializes new instance of Ssd1327 device that will communicate using I2C bus. Declaration public Ssd1327(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. | Improve this Doc View Source Ssd1327(I2cDevice) Initializes new instance of Ssd1327 device that will communicate using I2C bus. Declaration public Ssd1327(I2cDevice i2cDevice) Parameters Type Name Description I2cDevice i2cDevice The I2C device used for communication. Methods | Improve this Doc View Source ClearDisplay() Clears the display Declaration public void ClearDisplay() | Improve this Doc View Source ClearDisplay() Clears the display Declaration public void ClearDisplay() | Improve this Doc View Source SendCommand(ISharedCommand) Sends command to the device Declaration public override void SendCommand(ISharedCommand command) Parameters Type Name Description ISharedCommand command Command being send Overrides Ssd13xx.SendCommand(ISharedCommand) | Improve this Doc View Source SendCommand(ISharedCommand) Sends command to the device Declaration public override void SendCommand(ISharedCommand command) Parameters Type Name Description ISharedCommand command Command being send Overrides Ssd13xx.SendCommand(ISharedCommand) | Improve this Doc View Source SendCommand(ISsd1327Command) Sends command to the device Declaration public void SendCommand(ISsd1327Command command) Parameters Type Name Description ISsd1327Command command Command being send | Improve this Doc View Source SendCommand(ISsd1327Command) Sends command to the device Declaration public void SendCommand(ISsd1327Command command) Parameters Type Name Description ISsd1327Command command Command being send | Improve this Doc View Source SendCommand(Byte) Send a command to the display controller. Declaration public void SendCommand(byte command) Parameters Type Name Description Byte command The command to send to the display controller. | Improve this Doc View Source SendCommand(Byte) Send a command to the display controller. Declaration public void SendCommand(byte command) Parameters Type Name Description Byte command The command to send to the display controller. | Improve this Doc View Source SendData(Byte) Send data to the display controller. Declaration public void SendData(byte data) Parameters Type Name Description Byte data The data to send to the display controller. | Improve this Doc View Source SendData(Byte) Send data to the display controller. Declaration public void SendData(byte data) Parameters Type Name Description Byte data The data to send to the display controller. | Improve this Doc View Source SetColumnAddress(Byte, Byte) Sets column address Declaration public void SetColumnAddress(byte startAddress = 8, byte endAddress = 55) Parameters Type Name Description Byte startAddress Start address Byte endAddress End address | Improve this Doc View Source SetColumnAddress(Byte, Byte) Sets column address Declaration public void SetColumnAddress(byte startAddress = 8, byte endAddress = 55) Parameters Type Name Description Byte startAddress Start address Byte endAddress End address | Improve this Doc View Source SetRowAddress(Byte, Byte) Sets row address Declaration public void SetRowAddress(byte startAddress = 0, byte endAddress = 95) Parameters Type Name Description Byte startAddress Start address Byte endAddress End address | Improve this Doc View Source SetRowAddress(Byte, Byte) Sets row address Declaration public void SetRowAddress(byte startAddress = 0, byte endAddress = 95) Parameters Type Name Description Byte startAddress Start address Byte endAddress End address Implements IDisposable"
  },
  "devices/Iot.Device.Ssd13xx.Ssd13xx.DisplayResolution.html": {
    "href": "devices/Iot.Device.Ssd13xx.Ssd13xx.DisplayResolution.html",
    "title": "Enum Ssd13xx.DisplayResolution | nanoFramework Documentation",
    "keywords": "Enum Ssd13xx.DisplayResolution Resolution specifier. Namespace : Iot.Device.Ssd13xx Assembly : Iot.Device.Ssd13xx.dll Syntax public enum DisplayResolution Fields Name Description OLED128x32 Option for 128x32 OLED OLED128x64 Option for 128x64 OLED OLED96x16 Option for 96x16 OLED"
  },
  "devices/Iot.Device.Ssd13xx.Ssd13xx.DisplayResolution_1.html": {
    "href": "devices/Iot.Device.Ssd13xx.Ssd13xx.DisplayResolution_1.html",
    "title": "Enum Ssd13xx.DisplayResolution | nanoFramework Documentation",
    "keywords": "Enum Ssd13xx.DisplayResolution Resolution specifier. Namespace : Iot.Device.Ssd13xx Assembly : Iot.Device.Ssd13xx.dll Syntax public enum DisplayResolution Fields Name Description OLED128x32 Option for 128x32 OLED OLED128x64 Option for 128x64 OLED OLED96x16 Option for 96x16 OLED"
  },
  "devices/Iot.Device.Ssd13xx.Ssd13xx.html": {
    "href": "devices/Iot.Device.Ssd13xx.Ssd13xx.html",
    "title": "Class Ssd13xx | nanoFramework Documentation",
    "keywords": "Class Ssd13xx Represents base class for SSD13xx OLED displays Inheritance Object Ssd13xx Ssd1306 Ssd1327 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ssd13xx Assembly : Iot.Device.Ssd13xx.dll Syntax public abstract class Ssd13xx : IDisposable Constructors | Improve this Doc View Source Ssd13xx(I2cDevice, Ssd13xx.DisplayResolution) Constructs instance of Ssd13xx Declaration public Ssd13xx(I2cDevice i2cDevice, Ssd13xx.DisplayResolution resolution = null) Parameters Type Name Description I2cDevice i2cDevice I2C device used to communicate with the device Ssd13xx.DisplayResolution resolution Screen resolution to use for device init. | Improve this Doc View Source Ssd13xx(I2cDevice, Ssd13xx.DisplayResolution) Constructs instance of Ssd13xx Declaration public Ssd13xx(I2cDevice i2cDevice, Ssd13xx.DisplayResolution resolution = null) Parameters Type Name Description I2cDevice i2cDevice I2C device used to communicate with the device Ssd13xx.DisplayResolution resolution Screen resolution to use for device init. Fields | Improve this Doc View Source _i2cDevice Underlying I2C device Declaration protected I2cDevice _i2cDevice Field Value Type Description I2cDevice | Improve this Doc View Source _i2cDevice Underlying I2C device Declaration protected I2cDevice _i2cDevice Field Value Type Description I2cDevice Properties | Improve this Doc View Source Font Font to use. Declaration public IFont Font { get; set; } Property Value Type Description IFont | Improve this Doc View Source Font Font to use. Declaration public IFont Font { get; set; } Property Value Type Description IFont | Improve this Doc View Source Height Screen Resolution Height in Pixels Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Height Screen Resolution Height in Pixels Declaration public int Height { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Pages Screen data pages. Declaration public byte Pages { get; set; } Property Value Type Description Byte | Improve this Doc View Source Pages Screen data pages. Declaration public byte Pages { get; set; } Property Value Type Description Byte | Improve this Doc View Source Width Screen Resolution Width in Pixels Declaration public int Width { get; set; } Property Value Type Description Int32 | Improve this Doc View Source Width Screen Resolution Width in Pixels Declaration public int Width { get; set; } Property Value Type Description Int32 Methods | Improve this Doc View Source ClearScreen() Clears the screen. Declaration public void ClearScreen() | Improve this Doc View Source ClearScreen() Clears the screen. Declaration public void ClearScreen() | Improve this Doc View Source Display() Displays the information on the screen using page mode. Declaration public void Display() | Improve this Doc View Source Display() Displays the information on the screen using page mode. Declaration public void Display() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source DrawBitmap(Int32, Int32, Int32, Int32, Byte[], Byte) Displays the 1 bit bit map. Declaration public void DrawBitmap(int x, int y, int width, int height, byte[] bitmap, byte size = 1) Parameters Type Name Description Int32 x The x coordinate on the screen. Int32 y The y coordinate on the screen. Int32 width Width in bytes. Int32 height Height in bytes. Byte [] bitmap Bitmap to display. Byte size Drawing size, normal = 1, larger use 2,3 etc. | Improve this Doc View Source DrawBitmap(Int32, Int32, Int32, Int32, Byte[], Byte) Displays the 1 bit bit map. Declaration public void DrawBitmap(int x, int y, int width, int height, byte[] bitmap, byte size = 1) Parameters Type Name Description Int32 x The x coordinate on the screen. Int32 y The y coordinate on the screen. Int32 width Width in bytes. Int32 height Height in bytes. Byte [] bitmap Bitmap to display. Byte size Drawing size, normal = 1, larger use 2,3 etc. | Improve this Doc View Source DrawFilledRectangle(Int32, Int32, Int32, Int32, Boolean) Draws a rectangle that is solid/filled. Declaration public void DrawFilledRectangle(int x0, int y0, int width, int height, bool inverted = true) Parameters Type Name Description Int32 x0 x coordinate starting of the top left. Int32 y0 y coordinate starting of the top left. Int32 width Width of rectabgle in pixels. Int32 height Height of rectangle in pixels Boolean inverted Turn the pixel on (true) or off (false). | Improve this Doc View Source DrawFilledRectangle(Int32, Int32, Int32, Int32, Boolean) Draws a rectangle that is solid/filled. Declaration public void DrawFilledRectangle(int x0, int y0, int width, int height, bool inverted = true) Parameters Type Name Description Int32 x0 x coordinate starting of the top left. Int32 y0 y coordinate starting of the top left. Int32 width Width of rectabgle in pixels. Int32 height Height of rectangle in pixels Boolean inverted Turn the pixel on (true) or off (false). | Improve this Doc View Source DrawHorizontalLine(Int32, Int32, Int32, Boolean) Draws a horizontal line. Declaration public void DrawHorizontalLine(int x0, int y0, int length, bool inverted = true) Parameters Type Name Description Int32 x0 x coordinate starting of the line. Int32 y0 y coordinate starting of line. Int32 length Line length. Boolean inverted Turn the pixel on (true) or off (false). | Improve this Doc View Source DrawHorizontalLine(Int32, Int32, Int32, Boolean) Draws a horizontal line. Declaration public void DrawHorizontalLine(int x0, int y0, int length, bool inverted = true) Parameters Type Name Description Int32 x0 x coordinate starting of the line. Int32 y0 y coordinate starting of line. Int32 length Line length. Boolean inverted Turn the pixel on (true) or off (false). | Improve this Doc View Source DrawPixel(Int32, Int32, Boolean) Draws a pixel on the screen. Declaration public void DrawPixel(int x, int y, bool inverted = true) Parameters Type Name Description Int32 x The x coordinate on the screen. Int32 y The y coordinate on the screen. Boolean inverted Indicates if color to be used turn the pixel on, or leave off. | Improve this Doc View Source DrawPixel(Int32, Int32, Boolean) Draws a pixel on the screen. Declaration public void DrawPixel(int x, int y, bool inverted = true) Parameters Type Name Description Int32 x The x coordinate on the screen. Int32 y The y coordinate on the screen. Boolean inverted Indicates if color to be used turn the pixel on, or leave off. | Improve this Doc View Source DrawString(Int32, Int32, String, Byte, Boolean) Writes a text message on the screen with font in use. Declaration public void DrawString(int x, int y, string str, byte size = 1, bool center = false) Parameters Type Name Description Int32 x The x pixel-coordinate on the screen. Int32 y The y pixel-coordinate on the screen. String str Text string to display. Byte size Text size, normal = 1, larger use 2,3, 4 etc. Boolean center Indicates if text should be centered if possible. See Also Write(Int32, Int32, String, Byte, Boolean) | Improve this Doc View Source DrawString(Int32, Int32, String, Byte, Boolean) Writes a text message on the screen with font in use. Declaration public void DrawString(int x, int y, string str, byte size = 1, bool center = false) Parameters Type Name Description Int32 x The x pixel-coordinate on the screen. Int32 y The y pixel-coordinate on the screen. String str Text string to display. Byte size Text size, normal = 1, larger use 2,3, 4 etc. Boolean center Indicates if text should be centered if possible. See Also Write(Int32, Int32, String, Byte, Boolean) | Improve this Doc View Source DrawVerticalLine(Int32, Int32, Int32, Boolean) Draws a vertical line. Declaration public void DrawVerticalLine(int x0, int y0, int length, bool inverted = true) Parameters Type Name Description Int32 x0 x coordinate starting of the line. Int32 y0 y coordinate starting of line. Int32 length Line length. Boolean inverted Turn the pixel on (true) or off (false). | Improve this Doc View Source DrawVerticalLine(Int32, Int32, Int32, Boolean) Draws a vertical line. Declaration public void DrawVerticalLine(int x0, int y0, int length, bool inverted = true) Parameters Type Name Description Int32 x0 x coordinate starting of the line. Int32 y0 y coordinate starting of line. Int32 length Line length. Boolean inverted Turn the pixel on (true) or off (false). | Improve this Doc View Source SendCommand(ISharedCommand) Send a command to the display controller. Declaration public abstract void SendCommand(ISharedCommand command) Parameters Type Name Description ISharedCommand command The command to send to the display controller. | Improve this Doc View Source SendCommand(ISharedCommand) Send a command to the display controller. Declaration public abstract void SendCommand(ISharedCommand command) Parameters Type Name Description ISharedCommand command The command to send to the display controller. | Improve this Doc View Source SendData(SpanByte) Send data to the display controller. Declaration public virtual void SendData(SpanByte data) Parameters Type Name Description SpanByte data The data to send to the display controller. | Improve this Doc View Source SendData(SpanByte) Send data to the display controller. Declaration public virtual void SendData(SpanByte data) Parameters Type Name Description SpanByte data The data to send to the display controller. | Improve this Doc View Source SliceGenericBuffer(Int32) Acquires span of specific length pointing to the command buffer. If length of the command buffer is too small it will be reallocated. Declaration protected SpanByte SliceGenericBuffer(int length) Parameters Type Name Description Int32 length Requested length Returns Type Description SpanByte Span of bytes pointing to the command buffer | Improve this Doc View Source SliceGenericBuffer(Int32) Acquires span of specific length pointing to the command buffer. If length of the command buffer is too small it will be reallocated. Declaration protected SpanByte SliceGenericBuffer(int length) Parameters Type Name Description Int32 length Requested length Returns Type Description SpanByte Span of bytes pointing to the command buffer | Improve this Doc View Source SliceGenericBuffer(Int32, Int32) Acquires span of specific length at specific position in command buffer. If length of the command buffer is too small it will be reallocated. Declaration protected SpanByte SliceGenericBuffer(int start, int length) Parameters Type Name Description Int32 start Start index of the requested span Int32 length Requested length Returns Type Description SpanByte Span of bytes pointing to the command buffer | Improve this Doc View Source SliceGenericBuffer(Int32, Int32) Acquires span of specific length at specific position in command buffer. If length of the command buffer is too small it will be reallocated. Declaration protected SpanByte SliceGenericBuffer(int start, int length) Parameters Type Name Description Int32 start Start index of the requested span Int32 length Requested length Returns Type Description SpanByte Span of bytes pointing to the command buffer | Improve this Doc View Source Write(Int32, Int32, String, Byte, Boolean) Writes a text message on the screen with font in use. Declaration public void Write(int x, int y, string str, byte size = 1, bool center = false) Parameters Type Name Description Int32 x The x text-coordinate on the screen. Int32 y The y text-coordinate on the screen. String str Text string to display. Byte size Text size, normal = 1, larger use 2,3, 4 etc. Boolean center Indicates if text should be centered if possible. See Also DrawString(Int32, Int32, String, Byte, Boolean) | Improve this Doc View Source Write(Int32, Int32, String, Byte, Boolean) Writes a text message on the screen with font in use. Declaration public void Write(int x, int y, string str, byte size = 1, bool center = false) Parameters Type Name Description Int32 x The x text-coordinate on the screen. Int32 y The y text-coordinate on the screen. String str Text string to display. Byte size Text size, normal = 1, larger use 2,3, 4 etc. Boolean center Indicates if text should be centered if possible. See Also DrawString(Int32, Int32, String, Byte, Boolean) Implements IDisposable"
  },
  "devices/Iot.Device.Tcs3472x.Gain.html": {
    "href": "devices/Iot.Device.Tcs3472x.Gain.html",
    "title": "Enum Gain | nanoFramework Documentation",
    "keywords": "Enum Gain The gain used to integrate the colors Namespace : Iot.Device.Tcs3472x Assembly : Iot.Device.Tcs3472x.dll Syntax public enum Gain Fields Name Description Gain01X 1x gain Gain04X 4x gain Gain16X 16x gain Gain60X 60x gain"
  },
  "devices/Iot.Device.Tcs3472x.Gain_1.html": {
    "href": "devices/Iot.Device.Tcs3472x.Gain_1.html",
    "title": "Enum Gain | nanoFramework Documentation",
    "keywords": "Enum Gain The gain used to integrate the colors Namespace : Iot.Device.Tcs3472x Assembly : Iot.Device.Tcs3472x.dll Syntax public enum Gain Fields Name Description Gain01X 1x gain Gain04X 4x gain Gain16X 16x gain Gain60X 60x gain"
  },
  "devices/Iot.Device.Tcs3472x.html": {
    "href": "devices/Iot.Device.Tcs3472x.html",
    "title": "Namespace Iot.Device.Tcs3472x | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Tcs3472x Classes Tcs3472x Tcs3472x - color sensor Enums Gain The gain used to integrate the colors Gain The gain used to integrate the colors InterruptState This enum allows to select how many cycles cill be done measuring before raising an interupt. InterruptState This enum allows to select how many cycles cill be done measuring before raising an interupt. TCS3472Type Type of TCS3472X TCS3472Type Type of TCS3472X"
  },
  "devices/Iot.Device.Tcs3472x.InterruptState.html": {
    "href": "devices/Iot.Device.Tcs3472x.InterruptState.html",
    "title": "Enum InterruptState | nanoFramework Documentation",
    "keywords": "Enum InterruptState This enum allows to select how many cycles cill be done measuring before raising an interupt. Namespace : Iot.Device.Tcs3472x Assembly : Iot.Device.Tcs3472x.dll Syntax public enum InterruptState Fields Name Description All Every RGBC cycle generates an interrupt Percistence01Cycle 1 clear channel value outside of threshold range Percistence02Cycle 2 clear channel consecutive values out of range Percistence03Cycle 3 clear channel consecutive values out of range Percistence05Cycle 5 clear channel consecutive values out of range Percistence10Cycle 10 clear channel consecutive values out of range Percistence15Cycle 15 clear channel consecutive values out of range Percistence20Cycle 20 clear channel consecutive values out of range Percistence25Cycle 25 clear channel consecutive values out of range Percistence30Cycle 30 clear channel consecutive values out of range Percistence35Cycle 35 clear channel consecutive values out of range Percistence40Cycle 40 clear channel consecutive values out of range Percistence45Cycle 45 clear channel consecutive values out of range Percistence50Cycle 50 clear channel consecutive values out of range Percistence55Cycle 55 clear channel consecutive values out of range Percistence60Cycle 60 clear channel consecutive values out of range"
  },
  "devices/Iot.Device.Tcs3472x.InterruptState_1.html": {
    "href": "devices/Iot.Device.Tcs3472x.InterruptState_1.html",
    "title": "Enum InterruptState | nanoFramework Documentation",
    "keywords": "Enum InterruptState This enum allows to select how many cycles cill be done measuring before raising an interupt. Namespace : Iot.Device.Tcs3472x Assembly : Iot.Device.Tcs3472x.dll Syntax public enum InterruptState Fields Name Description All Every RGBC cycle generates an interrupt Percistence01Cycle 1 clear channel value outside of threshold range Percistence02Cycle 2 clear channel consecutive values out of range Percistence03Cycle 3 clear channel consecutive values out of range Percistence05Cycle 5 clear channel consecutive values out of range Percistence10Cycle 10 clear channel consecutive values out of range Percistence15Cycle 15 clear channel consecutive values out of range Percistence20Cycle 20 clear channel consecutive values out of range Percistence25Cycle 25 clear channel consecutive values out of range Percistence30Cycle 30 clear channel consecutive values out of range Percistence35Cycle 35 clear channel consecutive values out of range Percistence40Cycle 40 clear channel consecutive values out of range Percistence45Cycle 45 clear channel consecutive values out of range Percistence50Cycle 50 clear channel consecutive values out of range Percistence55Cycle 55 clear channel consecutive values out of range Percistence60Cycle 60 clear channel consecutive values out of range"
  },
  "devices/Iot.Device.Tcs3472x.TCS3472Type.html": {
    "href": "devices/Iot.Device.Tcs3472x.TCS3472Type.html",
    "title": "Enum TCS3472Type | nanoFramework Documentation",
    "keywords": "Enum TCS3472Type Type of TCS3472X Namespace : Iot.Device.Tcs3472x Assembly : Iot.Device.Tcs3472x.dll Syntax public enum TCS3472Type Fields Name Description TCS34721 TCS34721 TCS34723 TCS34723 TCS34725 TCS34725 TCS34727 TCS34727"
  },
  "devices/Iot.Device.Tcs3472x.TCS3472Type_1.html": {
    "href": "devices/Iot.Device.Tcs3472x.TCS3472Type_1.html",
    "title": "Enum TCS3472Type | nanoFramework Documentation",
    "keywords": "Enum TCS3472Type Type of TCS3472X Namespace : Iot.Device.Tcs3472x Assembly : Iot.Device.Tcs3472x.dll Syntax public enum TCS3472Type Fields Name Description TCS34721 TCS34721 TCS34723 TCS34723 TCS34725 TCS34725 TCS34727 TCS34727"
  },
  "devices/Iot.Device.Tcs3472x.Tcs3472x.html": {
    "href": "devices/Iot.Device.Tcs3472x.Tcs3472x.html",
    "title": "Class Tcs3472x | nanoFramework Documentation",
    "keywords": "Class Tcs3472x Tcs3472x - color sensor Inheritance Object Tcs3472x Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Tcs3472x Assembly : Iot.Device.Tcs3472x.dll Syntax [Interface(\"Tcs3472x - color sensor\")] [Interface(\"Tcs3472x - color sensor\")] public class Tcs3472x : IDisposable Constructors | Improve this Doc View Source Tcs3472x(I2cDevice, Double, Gain, Boolean) Create a TCS4272x sensor Declaration public Tcs3472x(I2cDevice i2cDevice, double integrationTime = 0.0024, Gain gain = null, bool shouldDispose = true) Parameters Type Name Description I2cDevice i2cDevice The I2C Device class Double integrationTime The time to wait for sensor to read the data, minimum is 0.024 seconds, maximum in the constructor is 0.7 seconds Gain gain The gain when integrating the color measurement Boolean shouldDispose true to dispose the I2C Device class at dispose | Improve this Doc View Source Tcs3472x(I2cDevice, Double, Gain, Boolean) Create a TCS4272x sensor Declaration public Tcs3472x(I2cDevice i2cDevice, double integrationTime = 0.0024, Gain gain = null, bool shouldDispose = true) Parameters Type Name Description I2cDevice i2cDevice The I2C Device class Double integrationTime The time to wait for sensor to read the data, minimum is 0.024 seconds, maximum in the constructor is 0.7 seconds Gain gain The gain when integrating the color measurement Boolean shouldDispose true to dispose the I2C Device class at dispose Fields | Improve this Doc View Source DefaultI2cAddress Default I2C address for TCS3472x familly Declaration public const byte DefaultI2cAddress = 41 Field Value Type Description Byte | Improve this Doc View Source DefaultI2cAddress Default I2C address for TCS3472x familly Declaration public const byte DefaultI2cAddress = 41 Field Value Type Description Byte Properties | Improve this Doc View Source ChipId Get the type of sensor Declaration [Property] public TCS3472Type ChipId { get; } Property Value Type Description TCS3472Type | Improve this Doc View Source ChipId Get the type of sensor Declaration [Property] public TCS3472Type ChipId { get; } Property Value Type Description TCS3472Type | Improve this Doc View Source Color Get the color Declaration [Telemetry] public Color Color { get; } Property Value Type Description Color | Improve this Doc View Source Color Get the color Declaration [Telemetry] public Color Color { get; } Property Value Type Description Color | Improve this Doc View Source Gain Set/Get the gain Declaration [Property] public Gain Gain { get; set; } Property Value Type Description Gain | Improve this Doc View Source Gain Set/Get the gain Declaration [Property] public Gain Gain { get; set; } Property Value Type Description Gain | Improve this Doc View Source IntegrationTime Set/Get the time to wait for the sensor to read the data Minimum time is 0.0024 s Maximum time is 7.4 s Be aware that it is not a linear function Declaration [Property] public double IntegrationTime { get; set; } Property Value Type Description Double | Improve this Doc View Source IntegrationTime Set/Get the time to wait for the sensor to read the data Minimum time is 0.0024 s Maximum time is 7.4 s Be aware that it is not a linear function Declaration [Property] public double IntegrationTime { get; set; } Property Value Type Description Double | Improve this Doc View Source IsClearInterrupt Get true if RGBC is clear channel interrupt Declaration public bool IsClearInterrupt { get; } Property Value Type Description Boolean | Improve this Doc View Source IsClearInterrupt Get true if RGBC is clear channel interrupt Declaration public bool IsClearInterrupt { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValidData Get true is there are valid data Declaration public bool IsValidData { get; } Property Value Type Description Boolean | Improve this Doc View Source IsValidData Get true is there are valid data Declaration public bool IsValidData { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetColor(Boolean) Get the color Declaration public Color GetColor(bool delay = true) Parameters Type Name Description Boolean delay Wait to read the data that the integration time is passed Returns Type Description Color | Improve this Doc View Source GetColor(Boolean) Get the color Declaration public Color GetColor(bool delay = true) Parameters Type Name Description Boolean delay Wait to read the data that the integration time is passed Returns Type Description Color | Improve this Doc View Source SetInterrupt(InterruptState, Boolean) Set/clear a specific interrupt persistence This is used to have more than 1 cycle before generating an interruption. Declaration public void SetInterrupt(InterruptState interupt, bool state) Parameters Type Name Description InterruptState interupt The percistence cycles Boolean state True to set the interrupt, false to clear | Improve this Doc View Source SetInterrupt(InterruptState, Boolean) Set/clear a specific interrupt persistence This is used to have more than 1 cycle before generating an interruption. Declaration public void SetInterrupt(InterruptState interupt, bool state) Parameters Type Name Description InterruptState interupt The percistence cycles Boolean state True to set the interrupt, false to clear | Improve this Doc View Source SetInterrupt(Boolean) Set/Clear the colors and clear interrupts Declaration public void SetInterrupt(bool state) Parameters Type Name Description Boolean state true to set all interrupts, false to clear | Improve this Doc View Source SetInterrupt(Boolean) Set/Clear the colors and clear interrupts Declaration public void SetInterrupt(bool state) Parameters Type Name Description Boolean state true to set all interrupts, false to clear Implements IDisposable"
  },
  "devices/Iot.Device.Tm1637.Character.html": {
    "href": "devices/Iot.Device.Tm1637.Character.html",
    "title": "Enum Character | nanoFramework Documentation",
    "keywords": "Enum Character bit 0 = a a bit 1 = b | | bit 2 = c f b bit 3 = d | g | bit 4 = e | | bit 5 = f e c bit 6 = g | d | .dp bit 7 = dp Namespace : Iot.Device.Tm1637 Assembly : Iot.Device.Tm1637.dll Syntax [Flags] public enum Character : byte Fields Name Description A Character A B Character B C Character C D Character D Digit0 Character 0 Digit1 Character 1 Digit2 Character 2 Digit3 Character 3 Digit4 Character 4 Digit5 Character 5 Digit6 Character 6 Digit7 Character 7 Digit8 Character 8 Digit9 Character 9 Dot Segment dp E Character E F Character F Minus Character - Nothing Character representing nothing being displayed SegmentBottom Segment d SegmentBottomLeft Segment e SegmentBottomRight Segment c SegmentMiddle Segment g SegmentTop Segment a SegmentTopLeft Segment f SegmentTopRight Segment b"
  },
  "devices/Iot.Device.Tm1637.Character_1.html": {
    "href": "devices/Iot.Device.Tm1637.Character_1.html",
    "title": "Enum Character | nanoFramework Documentation",
    "keywords": "Enum Character bit 0 = a a bit 1 = b | | bit 2 = c f b bit 3 = d | g | bit 4 = e | | bit 5 = f e c bit 6 = g | d | .dp bit 7 = dp Namespace : Iot.Device.Tm1637 Assembly : Iot.Device.Tm1637.dll Syntax [Flags] public enum Character : byte Fields Name Description A Character A B Character B C Character C D Character D Digit0 Character 0 Digit1 Character 1 Digit2 Character 2 Digit3 Character 3 Digit4 Character 4 Digit5 Character 5 Digit6 Character 6 Digit7 Character 7 Digit8 Character 8 Digit9 Character 9 Dot Segment dp E Character E F Character F Minus Character - Nothing Character representing nothing being displayed SegmentBottom Segment d SegmentBottomLeft Segment e SegmentBottomRight Segment c SegmentMiddle Segment g SegmentTop Segment a SegmentTopLeft Segment f SegmentTopRight Segment b"
  },
  "devices/Iot.Device.Tm1637.html": {
    "href": "devices/Iot.Device.Tm1637.html",
    "title": "Namespace Iot.Device.Tm1637 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Tm1637 Classes Tm1637 Represents Tm1637 segment display Enums Character bit 0 = a a bit 1 = b | | bit 2 = c f b bit 3 = d | g | bit 4 = e | | bit 5 = f e c bit 6 = g | d | .dp bit 7 = dp Character bit 0 = a a bit 1 = b | | bit 2 = c f b bit 3 = d | g | bit 4 = e | | bit 5 = f e c bit 6 = g | d | .dp bit 7 = dp"
  },
  "devices/Iot.Device.Tm1637.Tm1637.html": {
    "href": "devices/Iot.Device.Tm1637.Tm1637.html",
    "title": "Class Tm1637 | nanoFramework Documentation",
    "keywords": "Class Tm1637 Represents Tm1637 segment display Inheritance Object Tm1637 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Tm1637 Assembly : Iot.Device.Tm1637.dll Syntax public sealed class Tm1637 : IDisposable Constructors | Improve this Doc View Source Tm1637(Int32, Int32, PinNumberingScheme, GpioController, Boolean) Initialize a TM1637 Declaration public Tm1637(int pinClk, int pinDio, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 pinClk The clock pin Int32 pinDio The data pin PinNumberingScheme pinNumberingScheme Use the logical or physical pin layout GpioController gpioController A Gpio Controller if you want to use a specific one Boolean shouldDispose True to dispose the Gpio Controller | Improve this Doc View Source Tm1637(Int32, Int32, PinNumberingScheme, GpioController, Boolean) Initialize a TM1637 Declaration public Tm1637(int pinClk, int pinDio, PinNumberingScheme pinNumberingScheme = PinNumberingScheme.Logical, GpioController gpioController = null, bool shouldDispose = true) Parameters Type Name Description Int32 pinClk The clock pin Int32 pinDio The data pin PinNumberingScheme pinNumberingScheme Use the logical or physical pin layout GpioController gpioController A Gpio Controller if you want to use a specific one Boolean shouldDispose True to dispose the Gpio Controller Properties | Improve this Doc View Source Brightness Adjust the screen brightness from 0 to 7 Declaration public byte Brightness { get; set; } Property Value Type Description Byte | Improve this Doc View Source Brightness Adjust the screen brightness from 0 to 7 Declaration public byte Brightness { get; set; } Property Value Type Description Byte | Improve this Doc View Source CharacterOrder Order of characters, expect a 6 length byte array 0 to 5, any order. Most of the time 4 segments do not need to be changed but the 6 ones may be in different order like 0 1 2 5 4 3. In this case, this byte array has be be in this order Declaration public byte[] CharacterOrder { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source CharacterOrder Order of characters, expect a 6 length byte array 0 to 5, any order. Most of the time 4 segments do not need to be changed but the 6 ones may be in different order like 0 1 2 5 4 3. In this case, this byte array has be be in this order Declaration public byte[] CharacterOrder { get; set; } Property Value Type Description Byte [] | Improve this Doc View Source MaxCharacters The number of characters that the TM1637 can handle Declaration public static byte MaxCharacters { get; } Property Value Type Description Byte | Improve this Doc View Source MaxCharacters The number of characters that the TM1637 can handle Declaration public static byte MaxCharacters { get; } Property Value Type Description Byte | Improve this Doc View Source ScreenOn Set the screen on or off Declaration public bool ScreenOn { get; set; } Property Value Type Description Boolean | Improve this Doc View Source ScreenOn Set the screen on or off Declaration public bool ScreenOn { get; set; } Property Value Type Description Boolean Methods | Improve this Doc View Source ClearDisplay() Clear the display Declaration public void ClearDisplay() | Improve this Doc View Source ClearDisplay() Clear the display Declaration public void ClearDisplay() | Improve this Doc View Source Display(Byte, Character) Displays a raw data at a specific segment position from 0 to 5 Declaration public void Display(byte characterPosition, Character rawData) Parameters Type Name Description Byte characterPosition The character position from 0 to 5 Character rawData The segment characters to display Remarks Segment representation: bit 0 = a a bit 1 = b | | bit 2 = c f b bit 3 = d | g | bit 4 = e | | bit 5 = f e c bit 6 = g | d | .dp bit 7 = dp Representation of the number 0 so lighting segments a, b, c, d, e and F is then 0x3f | Improve this Doc View Source Display(Byte, Character) Displays a raw data at a specific segment position from 0 to 5 Declaration public void Display(byte characterPosition, Character rawData) Parameters Type Name Description Byte characterPosition The character position from 0 to 5 Character rawData The segment characters to display Remarks Segment representation: bit 0 = a a bit 1 = b | | bit 2 = c f b bit 3 = d | g | bit 4 = e | | bit 5 = f e c bit 6 = g | d | .dp bit 7 = dp Representation of the number 0 so lighting segments a, b, c, d, e and F is then 0x3f | Improve this Doc View Source Display(SpanCharacter) Displays a series of prebuild characters including the dot or not You can build your own characters with the primitives like Bottom, Top, Dot Declaration public void Display(SpanCharacter rawData) Parameters Type Name Description SpanCharacter rawData The Character to display | Improve this Doc View Source Display(SpanCharacter) Displays a series of prebuild characters including the dot or not You can build your own characters with the primitives like Bottom, Top, Dot Declaration public void Display(SpanCharacter rawData) Parameters Type Name Description SpanCharacter rawData The Character to display | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() | Improve this Doc View Source Dispose() Cleanup Declaration public void Dispose() Implements IDisposable"
  },
  "devices/IoT.Device.Tsl256x.Channel.html": {
    "href": "devices/IoT.Device.Tsl256x.Channel.html",
    "title": "Enum Channel | nanoFramework Documentation",
    "keywords": "Enum Channel The channel to get the data from Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum Channel Fields Name Description Infrared Channel 1 is infrared Visible Channel 0 - Channel 1 is Visible only VisibleInfrared Channel 0 is Visible and Infrared"
  },
  "devices/IoT.Device.Tsl256x.Channel_1.html": {
    "href": "devices/IoT.Device.Tsl256x.Channel_1.html",
    "title": "Enum Channel | nanoFramework Documentation",
    "keywords": "Enum Channel The channel to get the data from Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum Channel Fields Name Description Infrared Channel 1 is infrared Visible Channel 0 - Channel 1 is Visible only VisibleInfrared Channel 0 is Visible and Infrared"
  },
  "devices/IoT.Device.Tsl256x.Gain.html": {
    "href": "devices/IoT.Device.Tsl256x.Gain.html",
    "title": "Enum Gain | nanoFramework Documentation",
    "keywords": "Enum Gain Gain for integration Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum Gain : byte Fields Name Description High High gain x16 Normal Norma gain x1"
  },
  "devices/IoT.Device.Tsl256x.Gain_1.html": {
    "href": "devices/IoT.Device.Tsl256x.Gain_1.html",
    "title": "Enum Gain | nanoFramework Documentation",
    "keywords": "Enum Gain Gain for integration Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum Gain : byte Fields Name Description High High gain x16 Normal Norma gain x1"
  },
  "devices/IoT.Device.Tsl256x.html": {
    "href": "devices/IoT.Device.Tsl256x.html",
    "title": "Namespace IoT.Device.Tsl256x | nanoFramework Documentation",
    "keywords": "Namespace IoT.Device.Tsl256x Classes Tsl256x Light to Digital Converter TSL2560 and TSL2561 Enums Channel The channel to get the data from Channel The channel to get the data from Gain Gain for integration Gain Gain for integration IntegrationTime Integration time IntegrationTime Integration time InterruptControl The interrupt control selection InterruptControl The interrupt control selection InterruptPersistence Interrupt Persistence Select InterruptPersistence Interrupt Persistence Select PackageType The type of package for TSL256x. This is used for the Lux calculation PackageType The type of package for TSL256x. This is used for the Lux calculation"
  },
  "devices/IoT.Device.Tsl256x.IntegrationTime.html": {
    "href": "devices/IoT.Device.Tsl256x.IntegrationTime.html",
    "title": "Enum IntegrationTime | nanoFramework Documentation",
    "keywords": "Enum IntegrationTime Integration time Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum IntegrationTime : byte Fields Name Description Integration101Milliseconds Integration time 101 milliseconds Integration13_7Milliseconds Integration time 13.7 milliseconds Integration402Milliseconds Integration time 402 milliseconds Manual Manual time integration"
  },
  "devices/IoT.Device.Tsl256x.IntegrationTime_1.html": {
    "href": "devices/IoT.Device.Tsl256x.IntegrationTime_1.html",
    "title": "Enum IntegrationTime | nanoFramework Documentation",
    "keywords": "Enum IntegrationTime Integration time Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum IntegrationTime : byte Fields Name Description Integration101Milliseconds Integration time 101 milliseconds Integration13_7Milliseconds Integration time 13.7 milliseconds Integration402Milliseconds Integration time 402 milliseconds Manual Manual time integration"
  },
  "devices/IoT.Device.Tsl256x.InterruptControl.html": {
    "href": "devices/IoT.Device.Tsl256x.InterruptControl.html",
    "title": "Enum InterruptControl | nanoFramework Documentation",
    "keywords": "Enum InterruptControl The interrupt control selection Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum InterruptControl : byte Fields Name Description LevelInterrupt Level Interrupt OutputDisabled Interrupt Output Disabled SmbAlertCompliant SMB Alert Compliant TestMode TestMode"
  },
  "devices/IoT.Device.Tsl256x.InterruptControl_1.html": {
    "href": "devices/IoT.Device.Tsl256x.InterruptControl_1.html",
    "title": "Enum InterruptControl | nanoFramework Documentation",
    "keywords": "Enum InterruptControl The interrupt control selection Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum InterruptControl : byte Fields Name Description LevelInterrupt Level Interrupt OutputDisabled Interrupt Output Disabled SmbAlertCompliant SMB Alert Compliant TestMode TestMode"
  },
  "devices/IoT.Device.Tsl256x.InterruptPersistence.html": {
    "href": "devices/IoT.Device.Tsl256x.InterruptPersistence.html",
    "title": "Enum InterruptPersistence | nanoFramework Documentation",
    "keywords": "Enum InterruptPersistence Interrupt Persistence Select Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum InterruptPersistence : byte Fields Name Description AnyValueOutsideThreshold Any value outside of threshold range EveryAdc Every ADC cycle generates interrupt OutOfRange02IntegrationTimePeriods 2 integration time periods out of range OutOfRange03IntegrationTimePeriods 3 integration time periods out of range OutOfRange04IntegrationTimePeriods 4 integration time periods out of range OutOfRange05IntegrationTimePeriods 5 integration time periods out of range OutOfRange06IntegrationTimePeriods 6 integration time periods out of range OutOfRange07IntegrationTimePeriods 7 integration time periods out of range OutOfRange08IntegrationTimePeriods 8 integration time periods out of range OutOfRange09IntegrationTimePeriods 9 integration time periods out of range OutOfRange10IntegrationTimePeriods 10 integration time periods out of range OutOfRange11IntegrationTimePeriods 11 integration time periods out of range OutOfRange12IntegrationTimePeriods 12 integration time periods out of range OutOfRange13IntegrationTimePeriods 13 integration time periods out of range OutOfRange14IntegrationTimePeriods 14 integration time periods out of range OutOfRange15IntegrationTimePeriods 15 integration time periods out of range"
  },
  "devices/IoT.Device.Tsl256x.InterruptPersistence_1.html": {
    "href": "devices/IoT.Device.Tsl256x.InterruptPersistence_1.html",
    "title": "Enum InterruptPersistence | nanoFramework Documentation",
    "keywords": "Enum InterruptPersistence Interrupt Persistence Select Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum InterruptPersistence : byte Fields Name Description AnyValueOutsideThreshold Any value outside of threshold range EveryAdc Every ADC cycle generates interrupt OutOfRange02IntegrationTimePeriods 2 integration time periods out of range OutOfRange03IntegrationTimePeriods 3 integration time periods out of range OutOfRange04IntegrationTimePeriods 4 integration time periods out of range OutOfRange05IntegrationTimePeriods 5 integration time periods out of range OutOfRange06IntegrationTimePeriods 6 integration time periods out of range OutOfRange07IntegrationTimePeriods 7 integration time periods out of range OutOfRange08IntegrationTimePeriods 8 integration time periods out of range OutOfRange09IntegrationTimePeriods 9 integration time periods out of range OutOfRange10IntegrationTimePeriods 10 integration time periods out of range OutOfRange11IntegrationTimePeriods 11 integration time periods out of range OutOfRange12IntegrationTimePeriods 12 integration time periods out of range OutOfRange13IntegrationTimePeriods 13 integration time periods out of range OutOfRange14IntegrationTimePeriods 14 integration time periods out of range OutOfRange15IntegrationTimePeriods 15 integration time periods out of range"
  },
  "devices/IoT.Device.Tsl256x.PackageType.html": {
    "href": "devices/IoT.Device.Tsl256x.PackageType.html",
    "title": "Enum PackageType | nanoFramework Documentation",
    "keywords": "Enum PackageType The type of package for TSL256x. This is used for the Lux calculation Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum PackageType Fields Name Description Other Package type CL, T and FN PackageCs Package type CS"
  },
  "devices/IoT.Device.Tsl256x.PackageType_1.html": {
    "href": "devices/IoT.Device.Tsl256x.PackageType_1.html",
    "title": "Enum PackageType | nanoFramework Documentation",
    "keywords": "Enum PackageType The type of package for TSL256x. This is used for the Lux calculation Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax public enum PackageType Fields Name Description Other Package type CL, T and FN PackageCs Package type CS"
  },
  "devices/IoT.Device.Tsl256x.Tsl256x.html": {
    "href": "devices/IoT.Device.Tsl256x.Tsl256x.html",
    "title": "Class Tsl256x | nanoFramework Documentation",
    "keywords": "Class Tsl256x Light to Digital Converter TSL2560 and TSL2561 Inheritance Object Tsl256x Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IoT.Device.Tsl256x Assembly : Iot.Device.Tsl256x.dll Syntax [Interface(\"Light to Digital Converter TSL2560 and TSL2561\")] [Interface(\"Light to Digital Converter TSL2560 and TSL2561\")] public class Tsl256x : IDisposable Constructors | Improve this Doc View Source Tsl256x(I2cDevice, PackageType) Initializes a new instance of the Tsl256x class. Declaration public Tsl256x(I2cDevice i2cDevice, PackageType packageType = null) Parameters Type Name Description I2cDevice i2cDevice And I2C Device PackageType packageType The type of package to have a proper illuminance calculation | Improve this Doc View Source Tsl256x(I2cDevice, PackageType) Initializes a new instance of the Tsl256x class. Declaration public Tsl256x(I2cDevice i2cDevice, PackageType packageType = null) Parameters Type Name Description I2cDevice i2cDevice And I2C Device PackageType packageType The type of package to have a proper illuminance calculation Fields | Improve this Doc View Source DefaultI2cAddress When the address select pin if float Declaration public const int DefaultI2cAddress = 57 Field Value Type Description Int32 | Improve this Doc View Source DefaultI2cAddress When the address select pin if float Declaration public const int DefaultI2cAddress = 57 Field Value Type Description Int32 | Improve this Doc View Source SecondI2cAddress When the address select pin is to ground Declaration public const int SecondI2cAddress = 41 Field Value Type Description Int32 | Improve this Doc View Source SecondI2cAddress When the address select pin is to ground Declaration public const int SecondI2cAddress = 41 Field Value Type Description Int32 | Improve this Doc View Source ThirdI2cAddress When the select pin is to VDD Declaration public const int ThirdI2cAddress = 73 Field Value Type Description Int32 | Improve this Doc View Source ThirdI2cAddress When the select pin is to VDD Declaration public const int ThirdI2cAddress = 73 Field Value Type Description Int32 Properties | Improve this Doc View Source Enabled Set power On or Off Declaration [Property] public bool Enabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Enabled Set power On or Off Declaration [Property] public bool Enabled { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Gain Get or Set the gain Declaration [Property] public Gain Gain { get; set; } Property Value Type Description Gain | Improve this Doc View Source Gain Get or Set the gain Declaration [Property] public Gain Gain { get; set; } Property Value Type Description Gain | Improve this Doc View Source IntegrationTime Get or Set the integration time Declaration [Property] public IntegrationTime IntegrationTime { get; set; } Property Value Type Description IntegrationTime | Improve this Doc View Source IntegrationTime Get or Set the integration time Declaration [Property] public IntegrationTime IntegrationTime { get; set; } Property Value Type Description IntegrationTime | Improve this Doc View Source InterruptControl Get or Set the interrupt Control Select Declaration public InterruptControl InterruptControl { get; set; } Property Value Type Description InterruptControl Remarks Interrupts are only on Channel 0 | Improve this Doc View Source InterruptControl Get or Set the interrupt Control Select Declaration public InterruptControl InterruptControl { get; set; } Property Value Type Description InterruptControl Remarks Interrupts are only on Channel 0 | Improve this Doc View Source InterruptPersistence Get or Set the interrupt Persistence Select Declaration public InterruptPersistence InterruptPersistence { get; set; } Property Value Type Description InterruptPersistence Remarks Interrupts are only on Channel 0 | Improve this Doc View Source InterruptPersistence Get or Set the interrupt Persistence Select Declaration public InterruptPersistence InterruptPersistence { get; set; } Property Value Type Description InterruptPersistence Remarks Interrupts are only on Channel 0 | Improve this Doc View Source Version Get the version 0 for major for TSL2560 and 1 for TSL2561, minor is devision number Declaration [Property] public Version Version { get; } Property Value Type Description Version The version | Improve this Doc View Source Version Get the version 0 for major for TSL2560 and 1 for TSL2561, minor is devision number Declaration [Property] public Version Version { get; } Property Value Type Description Version The version Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetIlluminance() Get the calculated Illuminance. Default range is Lux Declaration public Illuminance GetIlluminance() Returns Type Description UnitsNet.Illuminance The illuminance Remarks If you have used the manual integration, you won't be able to use this formula | Improve this Doc View Source GetIlluminance() Get the calculated Illuminance. Default range is Lux Declaration public Illuminance GetIlluminance() Returns Type Description UnitsNet.Illuminance The illuminance Remarks If you have used the manual integration, you won't be able to use this formula | Improve this Doc View Source GetRawChannels(out UInt16, out UInt16) Get the raw data from both channels Declaration public void GetRawChannels(out ushort channel0, out ushort channel1) Parameters Type Name Description UInt16 channel0 Channel 0 UInt16 channel1 Channel 1 | Improve this Doc View Source GetRawChannels(out UInt16, out UInt16) Get the raw data from both channels Declaration public void GetRawChannels(out ushort channel0, out ushort channel1) Parameters Type Name Description UInt16 channel0 Channel 0 UInt16 channel1 Channel 1 | Improve this Doc View Source GetRawLuminosity(Channel) Get the raw luminosity for a specific channel Declaration public ushort GetRawLuminosity(Channel channel) Parameters Type Name Description Channel channel The channel to get the luminosity Returns Type Description UInt16 The raw luminosity from the ADC | Improve this Doc View Source GetRawLuminosity(Channel) Get the raw luminosity for a specific channel Declaration public ushort GetRawLuminosity(Channel channel) Parameters Type Name Description Channel channel The channel to get the luminosity Returns Type Description UInt16 The raw luminosity from the ADC | Improve this Doc View Source MeasureAndGetIlluminance() Measure the illuminance, will wait for the measurement based on integration time Declaration [Telemetry(\"Illuminance\")] public Illuminance MeasureAndGetIlluminance() Returns Type Description UnitsNet.Illuminance The illuminance | Improve this Doc View Source MeasureAndGetIlluminance() Measure the illuminance, will wait for the measurement based on integration time Declaration [Telemetry(\"Illuminance\")] public Illuminance MeasureAndGetIlluminance() Returns Type Description UnitsNet.Illuminance The illuminance | Improve this Doc View Source SetThreshold(UInt16, UInt16) This will set the threshold and enable the interrupt Declaration public void SetThreshold(ushort low, ushort high) Parameters Type Name Description UInt16 low The low threshold UInt16 high The high threshold | Improve this Doc View Source SetThreshold(UInt16, UInt16) This will set the threshold and enable the interrupt Declaration public void SetThreshold(ushort low, ushort high) Parameters Type Name Description UInt16 low The low threshold UInt16 high The high threshold | Improve this Doc View Source StartManualIntegration() Start the manual integration Declaration public void StartManualIntegration() | Improve this Doc View Source StartManualIntegration() Start the manual integration Declaration public void StartManualIntegration() | Improve this Doc View Source StopManualIntegration() Stop the manual integration Declaration public void StopManualIntegration() | Improve this Doc View Source StopManualIntegration() Stop the manual integration Declaration public void StopManualIntegration() Implements IDisposable"
  },
  "devices/Iot.Device.Uln2003.html": {
    "href": "devices/Iot.Device.Uln2003.html",
    "title": "Namespace Iot.Device.Uln2003 | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Uln2003 Classes Uln2003 This class is for controlling stepper motors that are controlled by a 4 pin controller board. Enums StepperMode The 28BYJ-48 motor has 512 full engine rotations to rotate the drive shaft once. In half-step mode these are 8 x 512 = 4096 steps for a full rotation. In full-step mode these are 4 x 512 = 2048 steps for a full rotation."
  },
  "devices/Iot.Device.Uln2003.StepperMode.html": {
    "href": "devices/Iot.Device.Uln2003.StepperMode.html",
    "title": "Enum StepperMode | nanoFramework Documentation",
    "keywords": "Enum StepperMode The 28BYJ-48 motor has 512 full engine rotations to rotate the drive shaft once. In half-step mode these are 8 x 512 = 4096 steps for a full rotation. In full-step mode these are 4 x 512 = 2048 steps for a full rotation. Namespace : Iot.Device.Uln2003 Assembly : Iot.Device.Uln2003.dll Syntax public enum StepperMode Fields Name Description FullStepDualPhase Full step mode (dual phase) FullStepSinglePhase Full step mode (single phase) HalfStep Half step mode"
  },
  "devices/Iot.Device.Uln2003.Uln2003.html": {
    "href": "devices/Iot.Device.Uln2003.Uln2003.html",
    "title": "Class Uln2003 | nanoFramework Documentation",
    "keywords": "Class Uln2003 This class is for controlling stepper motors that are controlled by a 4 pin controller board. Inheritance Object Uln2003 Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Uln2003 Assembly : Iot.Device.Uln2003.dll Syntax public class Uln2003 : IDisposable Remarks It is tested and developed using the 28BYJ-48 stepper motor and the ULN2003 driver board. Constructors | Improve this Doc View Source Uln2003(Int32, Int32, Int32, Int32, GpioController, Boolean, Int32) Initialize a Uln2003 class. Declaration public Uln2003(int pin1, int pin2, int pin3, int pin4, GpioController controller = null, bool shouldDispose = true, int stepsToRotate = 4096) Parameters Type Name Description Int32 pin1 The GPIO pin number which corresponds pin A on ULN2003 driver board. Int32 pin2 The GPIO pin number which corresponds pin B on ULN2003 driver board. Int32 pin3 The GPIO pin number which corresponds pin C on ULN2003 driver board. Int32 pin4 The GPIO pin number which corresponds pin D on ULN2003 driver board. GpioController controller The controller. Boolean shouldDispose True to dispose the Gpio Controller Int32 stepsToRotate Amount of steps needed to rotate motor once in HalfStepMode. Properties | Improve this Doc View Source Mode Sets the stepper's mode. Declaration public StepperMode Mode { get; set; } Property Value Type Description StepperMode | Improve this Doc View Source RPM Sets the motor speed to revolutions per minute. Declaration public short RPM { get; set; } Property Value Type Description Int16 Remarks Default revolutions per minute for 28BYJ-48 is approximately 15. Methods | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source Rotate(Int32) Rotates the motor. If the number is negative, the motor moves in the reverse direction. Declaration public void Rotate(int rotations) Parameters Type Name Description Int32 rotations Number of rotations. | Improve this Doc View Source Step(Int32) Moves the motor. If the number is negative, the motor moves in the reverse direction. Declaration public void Step(int steps) Parameters Type Name Description Int32 steps Number of steps. | Improve this Doc View Source Stop() Stop the motor. Declaration public void Stop() Implements IDisposable"
  },
  "devices/Iot.Device.Vl53L0X.html": {
    "href": "devices/Iot.Device.Vl53L0X.html",
    "title": "Namespace Iot.Device.Vl53L0X | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Vl53L0X Classes Information Store the information regarding the sensor Vl53L0X Represents Vl53L0X Enums MeasurementMode The measurement mode Continuous measurement is processed in the sensor and readings are more reliable than the Single measurement mode OperationRange Operating range PeriodPulse The period used for the pulse when setting the VCSEL (vertical cavity surface emitting laser) pulse period Precision Sensor have multiple modes, you can select one of the predefined mode using the SetPrecision method"
  },
  "devices/Iot.Device.Vl53L0X.Information.html": {
    "href": "devices/Iot.Device.Vl53L0X.Information.html",
    "title": "Class Information | nanoFramework Documentation",
    "keywords": "Class Information Store the information regarding the sensor Inheritance Object Information Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Vl53L0X Assembly : Iot.Device.Vl53L0X.dll Syntax public class Information Constructors | Improve this Doc View Source Information(Byte, Version, String, UInt32, UInt32) Creates an Information object. Declaration public Information(byte moduleId, Version revision, string productId, uint signalRateMeasFixed1104_400_Micrometers, uint distMeasFixed1104_400_Micrometers) Parameters Type Name Description Byte moduleId Module ID/ Version revision The revision number. String productId The product ID. UInt32 signalRateMeasFixed1104_400_Micrometers Raw measurement of the signal rate fixed point 400 micrometers. UInt32 distMeasFixed1104_400_Micrometers Raw measurement of the distance measurement fixed point 400 micrometers. Properties | Improve this Doc View Source ModuleId Module ID Declaration public byte ModuleId { get; set; } Property Value Type Description Byte | Improve this Doc View Source OffsetMicrometers Get the offset in micrometers Formula from the official API Declaration public int OffsetMicrometers { get; } Property Value Type Description Int32 | Improve this Doc View Source ProductId The product ID Declaration public string ProductId { get; set; } Property Value Type Description String | Improve this Doc View Source Revision The revision number Declaration public Version Revision { get; set; } Property Value Type Description Version | Improve this Doc View Source SignalRateMeasuementFixed400Micrometers Get the signal rate measurement fixed point 400 micrometers Formula from the official API Declaration public uint SignalRateMeasuementFixed400Micrometers { get; } Property Value Type Description UInt32"
  },
  "devices/Iot.Device.Vl53L0X.MeasurementMode.html": {
    "href": "devices/Iot.Device.Vl53L0X.MeasurementMode.html",
    "title": "Enum MeasurementMode | nanoFramework Documentation",
    "keywords": "Enum MeasurementMode The measurement mode Continuous measurement is processed in the sensor and readings are more reliable than the Single measurement mode Namespace : Iot.Device.Vl53L0X Assembly : Iot.Device.Vl53L0X.dll Syntax public enum MeasurementMode Fields Name Description Continuous Continuous mode Single Single measurement mode"
  },
  "devices/Iot.Device.Vl53L0X.OperationRange.html": {
    "href": "devices/Iot.Device.Vl53L0X.OperationRange.html",
    "title": "Enum OperationRange | nanoFramework Documentation",
    "keywords": "Enum OperationRange Operating range Namespace : Iot.Device.Vl53L0X Assembly : Iot.Device.Vl53L0X.dll Syntax public enum OperationRange Fields Name Description Maximum Maximum range: 8 millimeters Minimum Minimum range: 5 millimeters OutOfRange Out of range"
  },
  "devices/Iot.Device.Vl53L0X.PeriodPulse.html": {
    "href": "devices/Iot.Device.Vl53L0X.PeriodPulse.html",
    "title": "Enum PeriodPulse | nanoFramework Documentation",
    "keywords": "Enum PeriodPulse The period used for the pulse when setting the VCSEL (vertical cavity surface emitting laser) pulse period Namespace : Iot.Device.Vl53L0X Assembly : Iot.Device.Vl53L0X.dll Syntax public enum PeriodPulse Fields Name Description Period08 Period 8 Period10 Period 10 Period12 Period 12 Period14 Period 14 Period16 Period 16 Period18 Period 18"
  },
  "devices/Iot.Device.Vl53L0X.Precision.html": {
    "href": "devices/Iot.Device.Vl53L0X.Precision.html",
    "title": "Enum Precision | nanoFramework Documentation",
    "keywords": "Enum Precision Sensor have multiple modes, you can select one of the predefined mode using the SetPrecision method Namespace : Iot.Device.Vl53L0X Assembly : Iot.Device.Vl53L0X.dll Syntax public enum Precision Fields Name Description HighPrecision High precision LongRange Long range ShortRange Short range"
  },
  "devices/Iot.Device.Vl53L0X.Vl53L0X.html": {
    "href": "devices/Iot.Device.Vl53L0X.Vl53L0X.html",
    "title": "Class Vl53L0X | nanoFramework Documentation",
    "keywords": "Class Vl53L0X Represents Vl53L0X Inheritance Object Vl53L0X Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Vl53L0X Assembly : Iot.Device.Vl53L0X.dll Syntax public class Vl53L0X : IDisposable Constructors | Improve this Doc View Source Vl53L0X(I2cDevice, Int32, Boolean) Create a VL53L0X Sensor class Declaration public Vl53L0X(I2cDevice i2cDevice, int operationTimeoutMilliseconds = 500, bool shouldDispose = true) Parameters Type Name Description I2cDevice i2cDevice The I2C Device Int32 operationTimeoutMilliseconds Timeout for reading data, by default 500 milliseonds Boolean shouldDispose True to dispose the I2C Device at dispose Fields | Improve this Doc View Source DefaultI2cAddress The default I2C Address Declaration public const byte DefaultI2cAddress = 41 Field Value Type Description Byte Properties | Improve this Doc View Source Distance Get the distance depending on the measurement mode Declaration public ushort Distance { get; } Property Value Type Description UInt16 | Improve this Doc View Source DistanceContinuous Get a distance in millimeters from the continous measurement feature. It is recommended to used this method to gethigher quality measurements Declaration public ushort DistanceContinuous { get; } Property Value Type Description UInt16 Returns the distance in millimeters, if any error, returns the maximum range so 8190 | Improve this Doc View Source DistanceSingleMeasurement Performs a single-shot range measurement and returns the reading in millimeters Declaration public ushort DistanceSingleMeasurement { get; } Property Value Type Description UInt16 Returns distance in millimeters | Improve this Doc View Source HighResolution Set/Get high resolution measurement Declaration public bool HighResolution { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Information Get the sensor information including internal signal and distance offsets Declaration public Information Information { get; } Property Value Type Description Information | Improve this Doc View Source MaxTryReadSingle Used to find a clean measurement when reading in single shot Declaration public int MaxTryReadSingle { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MeasurementMode Get/Set the measurement mode used to return the distance property Declaration public MeasurementMode MeasurementMode { get; set; } Property Value Type Description MeasurementMode | Improve this Doc View Source Precision Set the type of precision needed for measurement Declaration public Precision Precision { get; set; } Property Value Type Description Precision Methods | Improve this Doc View Source ChangeI2cAddress(I2cDevice, Byte) The sensor can be changed for other I2C Address, this function allows to change it Declaration public static void ChangeI2cAddress(I2cDevice i2cDevice, byte newAddress) Parameters Type Name Description I2cDevice i2cDevice The current I2C Device Byte newAddress The new I2C Address from 0x00 to 0x7F | Improve this Doc View Source Dispose() Declaration public void Dispose() | Improve this Doc View Source GetDistanceOnce(Boolean) Get a distance in millimeters Declaration public ushort GetDistanceOnce(bool multipleReads = false) Parameters Type Name Description Boolean multipleReads True if you want multiple try to get a clean value Returns Type Description UInt16 Returns the distance in millimeters, if any error, returns the maximum range so 8190 | Improve this Doc View Source Reset() Performs a soft reset of the sensor Declaration public void Reset() Remarks If you change the I2C address and perform a soft reset, the default I2C address will be setup again. | Improve this Doc View Source SetSignalRateLimit(Double) Set the signal rate limit in MCPS Declaration public void SetSignalRateLimit(double limitMcps) Parameters Type Name Description Double limitMcps The limit in MCPS, minimum value 0, maximum value 511.99 | Improve this Doc View Source StartContinuousMeasurement(Int32) Start continuous ranging measurements. If periodMilliseconds is 0 continuous back-to-back mode is used (the sensor takes measurements as often as possible) otherwise, continuous timed mode is used, with the given inter-measurement period in milliseconds determining how often the sensor takes a measurement. Declaration public void StartContinuousMeasurement(int periodMilliseconds = 0) Parameters Type Name Description Int32 periodMilliseconds The interval period between 2 measurements. Default is 0 Implements IDisposable"
  },
  "devices/Iot.Device.Ws28xx.BitmapImage.html": {
    "href": "devices/Iot.Device.Ws28xx.BitmapImage.html",
    "title": "Class BitmapImage | nanoFramework Documentation",
    "keywords": "Class BitmapImage Represents bitmap image Inheritance Object BitmapImage Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ws28xx Assembly : Iot.Device.Ws28xx.dll Syntax public abstract class BitmapImage Constructors | Improve this Doc View Source BitmapImage(Byte[], Int32, Int32, Int32) Initializes a BitmapImage instance with the specified data, width, height and stride. Declaration protected BitmapImage(byte[] data, int width, int height, int stride) Parameters Type Name Description Byte [] data Data representing the image (derived class defines a specific format) Int32 width Width of the image Int32 height Height of the image Int32 stride Number of bytes per row | Improve this Doc View Source BitmapImage(Byte[], Int32, Int32, Int32) Initializes a BitmapImage instance with the specified data, width, height and stride. Declaration protected BitmapImage(byte[] data, int width, int height, int stride) Parameters Type Name Description Byte [] data Data representing the image (derived class defines a specific format) Int32 width Width of the image Int32 height Height of the image Int32 stride Number of bytes per row Properties | Improve this Doc View Source Data Data related to the image (derived class defines a specific format) Declaration public byte[] Data { get; } Property Value Type Description Byte [] | Improve this Doc View Source Data Data related to the image (derived class defines a specific format) Declaration public byte[] Data { get; } Property Value Type Description Byte [] | Improve this Doc View Source Height Height of the image Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Height Height of the image Declaration public int Height { get; } Property Value Type Description Int32 | Improve this Doc View Source Stride Number of bytes per row Declaration public int Stride { get; } Property Value Type Description Int32 | Improve this Doc View Source Stride Number of bytes per row Declaration public int Stride { get; } Property Value Type Description Int32 | Improve this Doc View Source Width Width of the image Declaration public int Width { get; } Property Value Type Description Int32 | Improve this Doc View Source Width Width of the image Declaration public int Width { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Clear(Color) Clears the image to specific color Declaration public virtual void Clear(Color color = default(Color)) Parameters Type Name Description Color color Color to clear the image. Defaults to black. | Improve this Doc View Source Clear(Color) Clears the image to specific color Declaration public virtual void Clear(Color color = default(Color)) Parameters Type Name Description Color color Color to clear the image. Defaults to black. | Improve this Doc View Source SetPixel(Int32, Int32, Color) Sets pixel at specific position Declaration public abstract void SetPixel(int x, int y, Color color) Parameters Type Name Description Int32 x X coordinate of the pixel Int32 y Y coordinate of the pixel Color color Color to set the pixel to | Improve this Doc View Source SetPixel(Int32, Int32, Color) Sets pixel at specific position Declaration public abstract void SetPixel(int x, int y, Color color) Parameters Type Name Description Int32 x X coordinate of the pixel Int32 y Y coordinate of the pixel Color color Color to set the pixel to"
  },
  "devices/Iot.Device.Ws28xx.html": {
    "href": "devices/Iot.Device.Ws28xx.html",
    "title": "Namespace Iot.Device.Ws28xx | nanoFramework Documentation",
    "keywords": "Namespace Iot.Device.Ws28xx Classes BitmapImage Represents bitmap image Ws2808 Represents WS2808 LED driver Ws2812b Represents WS2812B LED driver Ws28xx Represents base class for WS28XX LED drivers (i.e. WS2812B or WS2808)"
  },
  "devices/Iot.Device.Ws28xx.Ws2808.html": {
    "href": "devices/Iot.Device.Ws28xx.Ws2808.html",
    "title": "Class Ws2808 | nanoFramework Documentation",
    "keywords": "Class Ws2808 Represents WS2808 LED driver Inheritance Object Ws28xx Ws2808 Inherited Members Ws28xx._spiDevice Ws28xx.Image Ws28xx.Update() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ws28xx Assembly : Iot.Device.Ws28xx.dll Syntax public class Ws2808 : Ws28xx Constructors | Improve this Doc View Source Ws2808(SpiDevice, Int32, Int32) Constructs Ws2808 instance Declaration public Ws2808(SpiDevice spiDevice, int width, int height = 1) Parameters Type Name Description SpiDevice spiDevice SPI device used for communication with the LED driver Int32 width Width of the screen or LED strip Int32 height Height of the screen or LED strip. Defaults to 1 (LED strip). | Improve this Doc View Source Ws2808(SpiDevice, Int32, Int32) Constructs Ws2808 instance Declaration public Ws2808(SpiDevice spiDevice, int width, int height = 1) Parameters Type Name Description SpiDevice spiDevice SPI device used for communication with the LED driver Int32 width Width of the screen or LED strip Int32 height Height of the screen or LED strip. Defaults to 1 (LED strip)."
  },
  "devices/Iot.Device.Ws28xx.Ws2812b.html": {
    "href": "devices/Iot.Device.Ws28xx.Ws2812b.html",
    "title": "Class Ws2812b | nanoFramework Documentation",
    "keywords": "Class Ws2812b Represents WS2812B LED driver Inheritance Object Ws28xx Ws2812b Inherited Members Ws28xx._spiDevice Ws28xx.Image Ws28xx.Update() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ws28xx Assembly : Iot.Device.Ws28xx.dll Syntax public class Ws2812b : Ws28xx Constructors | Improve this Doc View Source Ws2812b(SpiDevice, Int32, Int32) Constructs Ws2812b instance Declaration public Ws2812b(SpiDevice spiDevice, int width, int height = 1) Parameters Type Name Description SpiDevice spiDevice SPI device used for communication with the LED driver Int32 width Width of the screen or LED strip Int32 height Height of the screen or LED strip. Defaults to 1 (LED strip). | Improve this Doc View Source Ws2812b(SpiDevice, Int32, Int32) Constructs Ws2812b instance Declaration public Ws2812b(SpiDevice spiDevice, int width, int height = 1) Parameters Type Name Description SpiDevice spiDevice SPI device used for communication with the LED driver Int32 width Width of the screen or LED strip Int32 height Height of the screen or LED strip. Defaults to 1 (LED strip)."
  },
  "devices/Iot.Device.Ws28xx.Ws28xx.html": {
    "href": "devices/Iot.Device.Ws28xx.Ws28xx.html",
    "title": "Class Ws28xx | nanoFramework Documentation",
    "keywords": "Class Ws28xx Represents base class for WS28XX LED drivers (i.e. WS2812B or WS2808) Inheritance Object Ws28xx Ws2808 Ws2812b Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Iot.Device.Ws28xx Assembly : Iot.Device.Ws28xx.dll Syntax public class Ws28xx Constructors | Improve this Doc View Source Ws28xx(SpiDevice, BitmapImage) Constructs Ws28xx instance Declaration public Ws28xx(SpiDevice spiDevice, BitmapImage image) Parameters Type Name Description SpiDevice spiDevice SPI device used for communication with the LED driver. BitmapImage image The bitmap that represents the screen or led strip. | Improve this Doc View Source Ws28xx(SpiDevice, BitmapImage) Constructs Ws28xx instance Declaration public Ws28xx(SpiDevice spiDevice, BitmapImage image) Parameters Type Name Description SpiDevice spiDevice SPI device used for communication with the LED driver. BitmapImage image The bitmap that represents the screen or led strip. Fields | Improve this Doc View Source _spiDevice SPI device used for communication with the LED driver Declaration protected readonly SpiDevice _spiDevice Field Value Type Description SpiDevice | Improve this Doc View Source _spiDevice SPI device used for communication with the LED driver Declaration protected readonly SpiDevice _spiDevice Field Value Type Description SpiDevice Properties | Improve this Doc View Source Image Backing image to be updated on the driver Declaration public BitmapImage Image { get; } Property Value Type Description BitmapImage | Improve this Doc View Source Image Backing image to be updated on the driver Declaration public BitmapImage Image { get; } Property Value Type Description BitmapImage Methods | Improve this Doc View Source Update() Sends backing image to the LED driver Declaration public void Update() | Improve this Doc View Source Update() Sends backing image to the LED driver Declaration public void Update()"
  },
  "devices/IoT.Device.Yx5300.html": {
    "href": "devices/IoT.Device.Yx5300.html",
    "title": "Namespace IoT.Device.Yx5300 | nanoFramework Documentation",
    "keywords": "Namespace IoT.Device.Yx5300 Classes Yx5300 Yx5300 - MP3 Player Yx5300.Status Status Enums Yx5300.StatusCode Status Code"
  },
  "devices/IoT.Device.Yx5300.Yx5300.html": {
    "href": "devices/IoT.Device.Yx5300.Yx5300.html",
    "title": "Class Yx5300 | nanoFramework Documentation",
    "keywords": "Class Yx5300 Yx5300 - MP3 Player Inheritance Object Yx5300 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IoT.Device.Yx5300 Assembly : Iot.Device.Yx5300.dll Syntax public class Yx5300 Constructors | Improve this Doc View Source Yx5300(String) Create an YX53000. Declaration public Yx5300(string portName) Parameters Type Name Description String portName The serial port name. eg COM2. Fields | Improve this Doc View Source MaxVolume Maximum Volume Declaration public const int MaxVolume = 30 Field Value Type Description Int32 Methods | Improve this Doc View Source Equalizer(Int32) Declaration public bool Equalizer(int eqId) Parameters Type Name Description Int32 eqId Returns Type Description Boolean | Improve this Doc View Source GetMaxVolume() Gets the maximum Volume. Declaration public int GetMaxVolume() Returns Type Description Int32 The maximum volume. | Improve this Doc View Source GetStatus() Gets the latest status. Declaration public Yx5300.Status GetStatus() Returns Type Description Yx5300.Status The status. | Improve this Doc View Source GetStatusCode() Gets the latest status code. Declaration public Yx5300.StatusCode GetStatusCode() Returns Type Description Yx5300.StatusCode The status code | Improve this Doc View Source GetStatusData() Gets the latest data status Declaration public ushort GetStatusData() Returns Type Description UInt16 The latest data status | Improve this Doc View Source Pause() Pauses. Declaration public bool Pause() Returns Type Description Boolean True if success | Improve this Doc View Source Play() Plays. Declaration public bool Play() Returns Type Description Boolean True if success | Improve this Doc View Source PlayFolderRepeat(Int32) Plays and repeats the play in a specific folder. Declaration public bool PlayFolderRepeat(int folderNum) Parameters Type Name Description Int32 folderNum The folder number. Returns Type Description Boolean True if success | Improve this Doc View Source PlayFolderShuffle(Int32) Plays and shuffles the play in a specific folder. Declaration public bool PlayFolderShuffle(int folderNum) Parameters Type Name Description Int32 folderNum Returns Type Description Boolean True if success | Improve this Doc View Source PlayNext() Plays the next file. Declaration public bool PlayNext() Returns Type Description Boolean | Improve this Doc View Source PlayPrev() Plays the previous file. Declaration public bool PlayPrev() Returns Type Description Boolean True if success | Improve this Doc View Source PlaySpecific(Int32, Int32) Plays a specific file in a specific folder. Declaration public bool PlaySpecific(int folderNum, int fileNum) Parameters Type Name Description Int32 folderNum The folder number. Int32 fileNum The file number. Returns Type Description Boolean True if success | Improve this Doc View Source PlayTrack(Int32) Plays a track. Declaration public bool PlayTrack(int trackNum) Parameters Type Name Description Int32 trackNum The track number to play. Returns Type Description Boolean True if success | Improve this Doc View Source PlayTrackRepeat(Int32) Plays a file. Declaration public bool PlayTrackRepeat(int fileNum) Parameters Type Name Description Int32 fileNum The file number to play. Returns Type Description Boolean True if success | Improve this Doc View Source SetTimeout(Int32) Sets the timeout in seconds. Declaration public void SetTimeout(int timeoutInSec) Parameters Type Name Description Int32 timeoutInSec Timeout in seconds. | Improve this Doc View Source Shuffle(Boolean) Shuffles the play Declaration public bool Shuffle(bool isShuffled) Parameters Type Name Description Boolean isShuffled True to shuffle Returns Type Description Boolean True if success | Improve this Doc View Source Stop() Stops playing. Declaration public bool Stop() Returns Type Description Boolean True if success | Improve this Doc View Source Volume(Int32) Sets the volume. Declaration public bool Volume(int volume) Parameters Type Name Description Int32 volume The wanted volume from 0 to 30. Returns Type Description Boolean True if success | Improve this Doc View Source VolumeDec() Decreases the volume. Declaration public bool VolumeDec() Returns Type Description Boolean True if success | Improve this Doc View Source VolumeInc() Increases the volume. Increases the volume. Declaration public bool VolumeInc() Returns Type Description Boolean True if success | Improve this Doc View Source VolumeMute(Boolean) Mutes or unmutes the volume. Declaration public bool VolumeMute(bool isMute) Parameters Type Name Description Boolean isMute True to mute, false to unmute Returns Type Description Boolean True if success"
  },
  "devices/IoT.Device.Yx5300.Yx5300.Status.html": {
    "href": "devices/IoT.Device.Yx5300.Yx5300.Status.html",
    "title": "Class Yx5300.Status | nanoFramework Documentation",
    "keywords": "Class Yx5300.Status Status Inheritance Object Yx5300.Status Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : IoT.Device.Yx5300 Assembly : Iot.Device.Yx5300.dll Syntax public class Status Properties | Improve this Doc View Source Code Status Code Declaration public Yx5300.StatusCode Code { get; set; } Property Value Type Description Yx5300.StatusCode | Improve this Doc View Source Data Associated data Declaration public ushort Data { get; set; } Property Value Type Description UInt16"
  },
  "devices/IoT.Device.Yx5300.Yx5300.StatusCode.html": {
    "href": "devices/IoT.Device.Yx5300.Yx5300.StatusCode.html",
    "title": "Enum Yx5300.StatusCode | nanoFramework Documentation",
    "keywords": "Enum Yx5300.StatusCode Status Code Namespace : IoT.Device.Yx5300 Assembly : Iot.Device.Yx5300.dll Syntax public enum StatusCode Fields Name Description AcknoledgeOk Message acknowledged ok CardInserted TF Card was inserted (unsolicited) CardRemoved TF card was removed (unsolicited) Checksum Device checksum invalid (library generated status) EndOfFile Track/file has ended (unsolicited) Equalizer Equalizer status FileNotFound Error file not found InitializationComplete // Initialization complete (unsolicited) NoError No error (library generated status) NumberOfFilesInFolder Total number of files in the folder Playing Current file playing Status Current status Timeout Timeout on response message (library generated status) TotalFileCount TF Total file count TotalNumberOfFiles Total number of folders Version Wrong version number in return message (library generated status) Volume Current volume level"
  },
  "devices/System.Buffers.Binary.BinaryPrimitives.html": {
    "href": "devices/System.Buffers.Binary.BinaryPrimitives.html",
    "title": "Class BinaryPrimitives | nanoFramework Documentation",
    "keywords": "Class BinaryPrimitives Reads bytes as primitives with specific endianness. Inheritance Object BinaryPrimitives Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Buffers.Binary Assembly : Iot.Device.Ndef.dll Syntax public static class BinaryPrimitives Methods | Improve this Doc View Source ReadInt16BigEndian(SpanByte) Reads an System.Int16 from the beginning of a read-only span of bytes, as big endian. Declaration public static short ReadInt16BigEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span to read. Returns Type Description Int16 The big endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int16. | Improve this Doc View Source ReadInt16LittleEndian(SpanByte) Reads an System.Int16 from the beginning of a read-only span of bytes, as little endian. Declaration public static short ReadInt16LittleEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span to read. Returns Type Description Int16 The little endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int16. | Improve this Doc View Source ReadInt32BigEndian(SpanByte) Reads an System.Int32 from the beginning of a read-only span of bytes, as big endian. Declaration public static int ReadInt32BigEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span to read. Returns Type Description Int32 The big endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int32. | Improve this Doc View Source ReadInt32LittleEndian(SpanByte) Reads an System.Int32 from the beginning of a read-only span of bytes, as little endian. Declaration public static int ReadInt32LittleEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span to read. Returns Type Description Int32 The little endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int32. | Improve this Doc View Source ReadInt64BigEndian(SpanByte) Reads an System.Int64 from the beginning of a read-only span of bytes, as little endian. Declaration public static long ReadInt64BigEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span to read. Returns Type Description Int64 The little endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int64. | Improve this Doc View Source ReadInt64LittleEndian(SpanByte) Reads an System.Int64 from the beginning of a read-only span of bytes, as big endian. Declaration public static long ReadInt64LittleEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span to read. Returns Type Description Int64 The big endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int64. | Improve this Doc View Source ReadUInt16BigEndian(SpanByte) Reads a System.UInt16 from the beginning of a read-only span of bytes, as big endian. Declaration public static ushort ReadUInt16BigEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span to read. Returns Type Description UInt16 The big endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int16. | Improve this Doc View Source ReadUInt16LittleEndian(SpanByte) Reads a System.UInt16 from the beginning of a read-only span of bytes, as little endian. Declaration public static ushort ReadUInt16LittleEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span to read. Returns Type Description UInt16 The little endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int16. | Improve this Doc View Source ReadUInt32BigEndian(SpanByte) Reads a System.UInt32 from the beginning of a read-only span of bytes, as big endian. Declaration public static uint ReadUInt32BigEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span to read. Returns Type Description UInt32 The big endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int32. | Improve this Doc View Source ReadUInt32LittleEndian(SpanByte) Reads a System.UInt32 from the beginning of a read-only span of bytes, as little endian. Declaration public static uint ReadUInt32LittleEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span of bytes to read. Returns Type Description UInt32 The little endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int32. | Improve this Doc View Source ReadUInt64BigEndian(SpanByte) Reads a System.UInt64 from the beginning of a read-only span of bytes, as big endian. Declaration public static ulong ReadUInt64BigEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span of bytes to read. Returns Type Description UInt64 The big endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int64. | Improve this Doc View Source ReadUInt64LittleEndian(SpanByte) Reads a System.UInt64 from the beginning of a read-only span of bytes, as little endian. Declaration public static ulong ReadUInt64LittleEndian(SpanByte source) Parameters Type Name Description SpanByte source The read-only span of bytes to read. Returns Type Description UInt64 The little endian value. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int64. | Improve this Doc View Source WriteInt16BigEndian(SpanByte, Int16) Writes an System.Int16 into a span of bytes, as big endian. Declaration public static void WriteInt16BigEndian(SpanByte destination, short value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as big endian. Int16 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int16. | Improve this Doc View Source WriteInt16LittleEndian(SpanByte, Int16) Writes an System.Int16 into a span of bytes, as little endian. Declaration public static void WriteInt16LittleEndian(SpanByte destination, short value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as little endian. Int16 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int16. | Improve this Doc View Source WriteInt32BigEndian(SpanByte, Int32) Writes an System.Int32 into a span of bytes, as big endian. Declaration public static void WriteInt32BigEndian(SpanByte destination, int value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as big endian. Int32 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int32. | Improve this Doc View Source WriteInt32LittleEndian(SpanByte, Int32) Writes an System.Int32 into a span of bytes, as little endian. Declaration public static void WriteInt32LittleEndian(SpanByte destination, int value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as little endian. Int32 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int32. | Improve this Doc View Source WriteInt64BigEndian(SpanByte, Int64) Writes an System.Int64 into a span of bytes, as big endian. Declaration public static void WriteInt64BigEndian(SpanByte destination, long value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as big endian. Int64 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int64. | Improve this Doc View Source WriteInt64LittleEndian(SpanByte, Int64) Writes an System.Int64 into a span of bytes, as little endian. Declaration public static void WriteInt64LittleEndian(SpanByte destination, long value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as little endian. Int64 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int64. | Improve this Doc View Source WriteUInt16BigEndian(SpanByte, UInt16) Writes a System.UInt16 into a span of bytes, as big endian. Declaration public static void WriteUInt16BigEndian(SpanByte destination, ushort value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as big endian. UInt16 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int16. | Improve this Doc View Source WriteUInt16LittleEndian(SpanByte, UInt16) Writes a System.UInt16 into a span of bytes, as little endian. Declaration public static void WriteUInt16LittleEndian(SpanByte destination, ushort value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as little endian. UInt16 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int16. | Improve this Doc View Source WriteUInt32BigEndian(SpanByte, UInt32) Writes a System.UInt32 into a span of bytes, as big endian. Declaration public static void WriteUInt32BigEndian(SpanByte destination, uint value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as big endian. UInt32 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int32. | Improve this Doc View Source WriteUInt32LittleEndian(SpanByte, UInt32) Writes a System.UInt32 into a span of bytes, as little endian. Declaration public static void WriteUInt32LittleEndian(SpanByte destination, uint value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as little endian. UInt32 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int32. | Improve this Doc View Source WriteUInt64BigEndian(SpanByte, UInt64) Writes a System.UInt64 into a span of bytes, as big endian. Declaration public static void WriteUInt64BigEndian(SpanByte destination, ulong value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as big endian. UInt64 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int64. | Improve this Doc View Source WriteUInt64LittleEndian(SpanByte, UInt64) Writes a System.UInt64 into a span of bytes, as little endian. Declaration public static void WriteUInt64LittleEndian(SpanByte destination, ulong value) Parameters Type Name Description SpanByte destination The span of bytes where the value is to be written, as little endian. UInt64 value The value to write into the span of bytes. Exceptions Type Condition ArgumentOutOfRangeException source is too small to contain an System.Int64."
  },
  "devices/System.Buffers.Binary.html": {
    "href": "devices/System.Buffers.Binary.html",
    "title": "Namespace System.Buffers.Binary | nanoFramework Documentation",
    "keywords": "Namespace System.Buffers.Binary Classes BinaryPrimitives Reads bytes as primitives with specific endianness."
  },
  "devices/System.Collections.Generic.html": {
    "href": "devices/System.Collections.Generic.html",
    "title": "Namespace System.Collections.Generic | nanoFramework Documentation",
    "keywords": "Namespace System.Collections.Generic Classes ListBme680HeaterProfileConfig List class for type Bme680HeaterProfileConfig that has been automatically generated ListByte List class for type Byte that has been automatically generated ListNdefRecord List class for type NdefRecord that has been automatically generated ListString List class for type String that has been automatically generated Structs ListBme680HeaterProfileConfig.Enumerator Enumerates the elements of a System.Collections.Generic.List. ListByte.Enumerator Enumerates the elements of a System.Collections.Generic.List. ListNdefRecord.Enumerator Enumerates the elements of a System.Collections.Generic.List. ListString.Enumerator Enumerates the elements of a System.Collections.Generic.List."
  },
  "devices/System.Collections.Generic.ListBme680HeaterProfileConfig.Enumerator.html": {
    "href": "devices/System.Collections.Generic.ListBme680HeaterProfileConfig.Enumerator.html",
    "title": "Struct ListBme680HeaterProfileConfig.Enumerator | nanoFramework Documentation",
    "keywords": "Struct ListBme680HeaterProfileConfig.Enumerator Enumerates the elements of a System.Collections.Generic.List. Implements IEnumerator IDisposable Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System.Collections.Generic Assembly : Iot.Device.Bmxx80.dll Syntax public struct Enumerator : IEnumerator, IDisposable Constructors | Improve this Doc View Source Enumerator(ListBme680HeaterProfileConfig) Create an enumerator of the collection Declaration public Enumerator(ListBme680HeaterProfileConfig collection) Parameters Type Name Description ListBme680HeaterProfileConfig collection Properties | Improve this Doc View Source Current Gets the element at the current position of the enumerator. Declaration public readonly Bme680HeaterProfileConfig Current { get; } Property Value Type Description Bme680HeaterProfileConfig Methods | Improve this Doc View Source Dispose() Releases all resources used by the System.Collections.Generic.List.Enumerator. Declaration public void Dispose() | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the System.Collections.Generic.List. Declaration public bool MoveNext() Returns Type Description Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. | Improve this Doc View Source Reset() Move back to first position Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration readonly object IEnumerator.Current { get; } Returns Type Description Object Implements IEnumerator IDisposable"
  },
  "devices/System.Collections.Generic.ListBme680HeaterProfileConfig.html": {
    "href": "devices/System.Collections.Generic.ListBme680HeaterProfileConfig.html",
    "title": "Class ListBme680HeaterProfileConfig | nanoFramework Documentation",
    "keywords": "Class ListBme680HeaterProfileConfig List class for type Bme680HeaterProfileConfig that has been automatically generated Inheritance Object ListBme680HeaterProfileConfig Implements IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections.Generic Assembly : Iot.Device.Bmxx80.dll Syntax public class ListBme680HeaterProfileConfig : IEnumerable Constructors | Improve this Doc View Source ListBme680HeaterProfileConfig() Initializes a new instance of the System.Collections.Generic.List class that is empty and has the default initial capacity. Declaration public ListBme680HeaterProfileConfig() | Improve this Doc View Source ListBme680HeaterProfileConfig(IEnumerable) Initializes a new instance of the System.Collections.Generic.List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. Declaration public ListBme680HeaterProfileConfig(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements are copied to the new list. Exceptions Type Condition ArgumentNullException collection is null | Improve this Doc View Source ListBme680HeaterProfileConfig(Int32) Initializes a new instance of the System.Collections.Generic.List class that is empty and has the specified initial capacity. Declaration public ListBme680HeaterProfileConfig(int capacity) Parameters Type Name Description Int32 capacity The number of elements that the new list can initially store. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 0. Properties | Improve this Doc View Source Capacity Gets or sets the total number of elements the internal data structure can hold without resizing. Declaration public int Capacity { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException System.Collections.Generic.List.Capacity is set to a value that is less than System.Collections.Generic.List.Count | Improve this Doc View Source Count Gets the number of elements contained in the System.Collections.Generic.List Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Gets or sets the element at the specified index. Declaration public Bme680HeaterProfileConfig this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description Bme680HeaterProfileConfig The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is equal to or greater than System.Collections.Generic.List.Count. Methods | Improve this Doc View Source Add(Bme680HeaterProfileConfig) Adds an object to the end of the System.Collections.Generic.List. Declaration public void Add(Bme680HeaterProfileConfig item) Parameters Type Name Description Bme680HeaterProfileConfig item The object to be added to the end of the System.Collections.Generic.List. The value can be null for reference types. | Improve this Doc View Source AddRange(IEnumerable) Adds the elements of the specified collection to the end of the System.Collections.Generic.List. Declaration public void AddRange(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements should be added to the end of the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type Bme680HeaterProfileConfig is a reference type. Exceptions Type Condition ArgumentNullException collection is null. | Improve this Doc View Source Contains(Bme680HeaterProfileConfig) Determines whether an element is in the System.Collections.Generic.List. Declaration public bool Contains(Bme680HeaterProfileConfig item) Parameters Type Name Description Bme680HeaterProfileConfig item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is found in the System.Collections.Generic.List; otherwise, false. | Improve this Doc View Source CopyTo(Bme680HeaterProfileConfig[]) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the beginning of the target array. Declaration public void CopyTo(Bme680HeaterProfileConfig[] array) Parameters Type Name Description Bme680HeaterProfileConfig [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Exceptions Type Condition ArgumentNullException array is null. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the number of elements that the destination array can contain. | Improve this Doc View Source CopyTo(Bme680HeaterProfileConfig[], Int32) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(Bme680HeaterProfileConfig[] array, int arrayIndex) Parameters Type Name Description Bme680HeaterProfileConfig [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source CopyTo(Int32, Bme680HeaterProfileConfig[], Int32, Int32) Copies a range of elements from the System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(int index, Bme680HeaterProfileConfig[] array, int arrayIndex, int count) Parameters Type Name Description Int32 index The zero-based index in the source System.Collections.Generic.List at which copying begins. Bme680HeaterProfileConfig [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Int32 count The number of elements to copy. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than 0. -or- arrayIndex is less than 0. -or- count is less than 0. ArgumentException index is equal to or greater than the System.Collections.Generic.List.Count of the source System.Collections.Generic.List. -or- The number of elements from index to the end of the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the System.Collections.Generic.List. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator A System.Collections.Generic.List.Enumerator for the System.Collections.Generic.List. | Improve this Doc View Source GetRange(Int32, Int32) Creates a shallow copy of a range of elements in the source System.Collections.Generic.List. Declaration public ListBme680HeaterProfileConfig GetRange(int index, int count) Parameters Type Name Description Int32 index The zero-based System.Collections.Generic.List index at which the range starts. Int32 count The number of elements in the range. Returns Type Description ListBme680HeaterProfileConfig A shallow copy of a range of elements in the source System.Collections.Generic.List. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(Bme680HeaterProfileConfig) Searches for the specified object and returns the zero-based index of the first occurrence within the entire System.Collections.Generic.List. Declaration public int IndexOf(Bme680HeaterProfileConfig item) Parameters Type Name Description Bme680HeaterProfileConfig item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the first occurrence of item within the entire System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source IndexOf(Bme680HeaterProfileConfig, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that extends from the specified index to the last element. Declaration public int IndexOf(Bme680HeaterProfileConfig item, int index) Parameters Type Name Description Bme680HeaterProfileConfig item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that extends from index to the last element, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(Bme680HeaterProfileConfig, Int32, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that starts at the specified index and contains the specified number of elements. Declaration public int IndexOf(Bme680HeaterProfileConfig item, int index, int count) Parameters Type Name Description Bme680HeaterProfileConfig item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that starts at index and contains count number of elements, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source Insert(Int32, Bme680HeaterProfileConfig) Inserts an element into the System.Collections.Generic.List at the specified index. Declaration public void Insert(int index, Bme680HeaterProfileConfig item) Parameters Type Name Description Int32 index The zero-based index at which item should be inserted. Bme680HeaterProfileConfig item The object to insert. The value can be null for reference types. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source InsertRange(Int32, IEnumerable) Inserts the elements of a collection into the System.Collections.Generic.List at the specified index. Declaration public void InsertRange(int index, IEnumerable collection) Parameters Type Name Description Int32 index The zero-based index at which the new elements should be inserted. IEnumerable collection The collection whose elements should be inserted into the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type Bme680HeaterProfileConfig is a reference type. Exceptions Type Condition ArgumentNullException collection is null. ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source LastIndexOf(Bme680HeaterProfileConfig) Searches for the specified object and returns the zero-based index of the last occurrence within the entire System.Collections.Generic.List. Declaration public int LastIndexOf(Bme680HeaterProfileConfig item) Parameters Type Name Description Bme680HeaterProfileConfig item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the last occurrence of item within the entire the System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source LastIndexOf(Bme680HeaterProfileConfig, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that extends from the first element to the specified index. Declaration public int LastIndexOf(Bme680HeaterProfileConfig item, int index) Parameters Type Name Description Bme680HeaterProfileConfig item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that extends from the first element to index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source LastIndexOf(Bme680HeaterProfileConfig, Int32, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that contains the specified number of elements and ends at the specified index. Declaration public int LastIndexOf(Bme680HeaterProfileConfig item, int index, int count) Parameters Type Name Description Bme680HeaterProfileConfig item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that contains count number of elements and ends at index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source Remove(Bme680HeaterProfileConfig) Removes the first occurrence of a specific object from the System.Collections.Generic.List. Declaration public bool Remove(Bme680HeaterProfileConfig item) Parameters Type Name Description Bme680HeaterProfileConfig item The object to remove from the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the System.Collections.Generic.List. | Improve this Doc View Source RemoveAt(Int32) Removes the element at the specified index of the System.Collections.Generic.List. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. | Improve this Doc View Source RemoveRange(Int32, Int32) Removes a range of elements from the System.Collections.Generic.List. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The zero-based starting index of the range of elements to remove. Int32 count The number of elements to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source ToArray() Copies the elements of the System.Collections.Generic.List to a new array. Declaration public Bme680HeaterProfileConfig[] ToArray() Returns Type Description Bme680HeaterProfileConfig [] An array containing copies of the elements of the System.Collections.Generic.List. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IEnumerable"
  },
  "devices/System.Collections.Generic.ListByte.Enumerator.html": {
    "href": "devices/System.Collections.Generic.ListByte.Enumerator.html",
    "title": "Struct ListByte.Enumerator | nanoFramework Documentation",
    "keywords": "Struct ListByte.Enumerator Enumerates the elements of a System.Collections.Generic.List. Implements IEnumerator IDisposable Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System.Collections.Generic Assembly : Iot.Device.Pn532.dll Syntax public struct Enumerator : IEnumerator, IDisposable Constructors | Improve this Doc View Source Enumerator(ListByte) Create an enumerator of the collection Declaration public Enumerator(ListByte collection) Parameters Type Name Description ListByte collection | Improve this Doc View Source Enumerator(ListByte) Create an enumerator of the collection Declaration public Enumerator(ListByte collection) Parameters Type Name Description ListByte collection Properties | Improve this Doc View Source Current Gets the element at the current position of the enumerator. Declaration public readonly byte Current { get; } Property Value Type Description Byte | Improve this Doc View Source Current Gets the element at the current position of the enumerator. Declaration public readonly byte Current { get; } Property Value Type Description Byte Methods | Improve this Doc View Source Dispose() Releases all resources used by the System.Collections.Generic.List.Enumerator. Declaration public void Dispose() | Improve this Doc View Source Dispose() Releases all resources used by the System.Collections.Generic.List.Enumerator. Declaration public void Dispose() | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the System.Collections.Generic.List. Declaration public bool MoveNext() Returns Type Description Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the System.Collections.Generic.List. Declaration public bool MoveNext() Returns Type Description Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. | Improve this Doc View Source Reset() Move back to first position Declaration public void Reset() | Improve this Doc View Source Reset() Move back to first position Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration readonly object IEnumerator.Current { get; } Returns Type Description Object | Improve this Doc View Source IEnumerator.Current Declaration readonly object IEnumerator.Current { get; } Returns Type Description Object Implements IEnumerator IDisposable"
  },
  "devices/System.Collections.Generic.ListByte.html": {
    "href": "devices/System.Collections.Generic.ListByte.html",
    "title": "Class ListByte | nanoFramework Documentation",
    "keywords": "Class ListByte List class for type Byte that has been automatically generated Inheritance Object ListByte Implements IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections.Generic Assembly : Iot.Device.Pn532.dll Syntax public class ListByte : IEnumerable Constructors | Improve this Doc View Source ListByte() Initializes a new instance of the System.Collections.Generic.List class that is empty and has the default initial capacity. Declaration public ListByte() | Improve this Doc View Source ListByte() Initializes a new instance of the System.Collections.Generic.List class that is empty and has the default initial capacity. Declaration public ListByte() | Improve this Doc View Source ListByte(IEnumerable) Initializes a new instance of the System.Collections.Generic.List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. Declaration public ListByte(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements are copied to the new list. Exceptions Type Condition ArgumentNullException collection is null | Improve this Doc View Source ListByte(IEnumerable) Initializes a new instance of the System.Collections.Generic.List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. Declaration public ListByte(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements are copied to the new list. Exceptions Type Condition ArgumentNullException collection is null | Improve this Doc View Source ListByte(Int32) Initializes a new instance of the System.Collections.Generic.List class that is empty and has the specified initial capacity. Declaration public ListByte(int capacity) Parameters Type Name Description Int32 capacity The number of elements that the new list can initially store. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 0. | Improve this Doc View Source ListByte(Int32) Initializes a new instance of the System.Collections.Generic.List class that is empty and has the specified initial capacity. Declaration public ListByte(int capacity) Parameters Type Name Description Int32 capacity The number of elements that the new list can initially store. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 0. Properties | Improve this Doc View Source Capacity Gets or sets the total number of elements the internal data structure can hold without resizing. Declaration public int Capacity { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException System.Collections.Generic.List.Capacity is set to a value that is less than System.Collections.Generic.List.Count | Improve this Doc View Source Capacity Gets or sets the total number of elements the internal data structure can hold without resizing. Declaration public int Capacity { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException System.Collections.Generic.List.Capacity is set to a value that is less than System.Collections.Generic.List.Count | Improve this Doc View Source Count Gets the number of elements contained in the System.Collections.Generic.List Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Count Gets the number of elements contained in the System.Collections.Generic.List Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Gets or sets the element at the specified index. Declaration public byte this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description Byte The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is equal to or greater than System.Collections.Generic.List.Count. | Improve this Doc View Source Item[Int32] Gets or sets the element at the specified index. Declaration public byte this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description Byte The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is equal to or greater than System.Collections.Generic.List.Count. Methods | Improve this Doc View Source Add(Byte) Adds an object to the end of the System.Collections.Generic.List. Declaration public void Add(byte item) Parameters Type Name Description Byte item The object to be added to the end of the System.Collections.Generic.List. The value can be null for reference types. | Improve this Doc View Source Add(Byte) Adds an object to the end of the System.Collections.Generic.List. Declaration public void Add(byte item) Parameters Type Name Description Byte item The object to be added to the end of the System.Collections.Generic.List. The value can be null for reference types. | Improve this Doc View Source AddRange(IEnumerable) Adds the elements of the specified collection to the end of the System.Collections.Generic.List. Declaration public void AddRange(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements should be added to the end of the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type byte is a reference type. Exceptions Type Condition ArgumentNullException collection is null. | Improve this Doc View Source AddRange(IEnumerable) Adds the elements of the specified collection to the end of the System.Collections.Generic.List. Declaration public void AddRange(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements should be added to the end of the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type byte is a reference type. Exceptions Type Condition ArgumentNullException collection is null. | Improve this Doc View Source Contains(Byte) Determines whether an element is in the System.Collections.Generic.List. Declaration public bool Contains(byte item) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is found in the System.Collections.Generic.List; otherwise, false. | Improve this Doc View Source Contains(Byte) Determines whether an element is in the System.Collections.Generic.List. Declaration public bool Contains(byte item) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is found in the System.Collections.Generic.List; otherwise, false. | Improve this Doc View Source CopyTo(Byte[]) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the beginning of the target array. Declaration public void CopyTo(byte[] array) Parameters Type Name Description Byte [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Exceptions Type Condition ArgumentNullException array is null. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the number of elements that the destination array can contain. | Improve this Doc View Source CopyTo(Byte[]) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the beginning of the target array. Declaration public void CopyTo(byte[] array) Parameters Type Name Description Byte [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Exceptions Type Condition ArgumentNullException array is null. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the number of elements that the destination array can contain. | Improve this Doc View Source CopyTo(Byte[], Int32) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(byte[] array, int arrayIndex) Parameters Type Name Description Byte [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source CopyTo(Byte[], Int32) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(byte[] array, int arrayIndex) Parameters Type Name Description Byte [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source CopyTo(Int32, Byte[], Int32, Int32) Copies a range of elements from the System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(int index, byte[] array, int arrayIndex, int count) Parameters Type Name Description Int32 index The zero-based index in the source System.Collections.Generic.List at which copying begins. Byte [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Int32 count The number of elements to copy. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than 0. -or- arrayIndex is less than 0. -or- count is less than 0. ArgumentException index is equal to or greater than the System.Collections.Generic.List.Count of the source System.Collections.Generic.List. -or- The number of elements from index to the end of the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source CopyTo(Int32, Byte[], Int32, Int32) Copies a range of elements from the System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(int index, byte[] array, int arrayIndex, int count) Parameters Type Name Description Int32 index The zero-based index in the source System.Collections.Generic.List at which copying begins. Byte [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Int32 count The number of elements to copy. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than 0. -or- arrayIndex is less than 0. -or- count is less than 0. ArgumentException index is equal to or greater than the System.Collections.Generic.List.Count of the source System.Collections.Generic.List. -or- The number of elements from index to the end of the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the System.Collections.Generic.List. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator A System.Collections.Generic.List.Enumerator for the System.Collections.Generic.List. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the System.Collections.Generic.List. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator A System.Collections.Generic.List.Enumerator for the System.Collections.Generic.List. | Improve this Doc View Source GetRange(Int32, Int32) Creates a shallow copy of a range of elements in the source System.Collections.Generic.List. Declaration public ListByte GetRange(int index, int count) Parameters Type Name Description Int32 index The zero-based System.Collections.Generic.List index at which the range starts. Int32 count The number of elements in the range. Returns Type Description ListByte A shallow copy of a range of elements in the source System.Collections.Generic.List. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source GetRange(Int32, Int32) Creates a shallow copy of a range of elements in the source System.Collections.Generic.List. Declaration public ListByte GetRange(int index, int count) Parameters Type Name Description Int32 index The zero-based System.Collections.Generic.List index at which the range starts. Int32 count The number of elements in the range. Returns Type Description ListByte A shallow copy of a range of elements in the source System.Collections.Generic.List. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(Byte) Searches for the specified object and returns the zero-based index of the first occurrence within the entire System.Collections.Generic.List. Declaration public int IndexOf(byte item) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the first occurrence of item within the entire System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source IndexOf(Byte) Searches for the specified object and returns the zero-based index of the first occurrence within the entire System.Collections.Generic.List. Declaration public int IndexOf(byte item) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the first occurrence of item within the entire System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source IndexOf(Byte, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that extends from the specified index to the last element. Declaration public int IndexOf(byte item, int index) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that extends from index to the last element, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(Byte, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that extends from the specified index to the last element. Declaration public int IndexOf(byte item, int index) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that extends from index to the last element, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(Byte, Int32, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that starts at the specified index and contains the specified number of elements. Declaration public int IndexOf(byte item, int index, int count) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that starts at index and contains count number of elements, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(Byte, Int32, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that starts at the specified index and contains the specified number of elements. Declaration public int IndexOf(byte item, int index, int count) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that starts at index and contains count number of elements, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source Insert(Int32, Byte) Inserts an element into the System.Collections.Generic.List at the specified index. Declaration public void Insert(int index, byte item) Parameters Type Name Description Int32 index The zero-based index at which item should be inserted. Byte item The object to insert. The value can be null for reference types. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source Insert(Int32, Byte) Inserts an element into the System.Collections.Generic.List at the specified index. Declaration public void Insert(int index, byte item) Parameters Type Name Description Int32 index The zero-based index at which item should be inserted. Byte item The object to insert. The value can be null for reference types. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source InsertRange(Int32, IEnumerable) Inserts the elements of a collection into the System.Collections.Generic.List at the specified index. Declaration public void InsertRange(int index, IEnumerable collection) Parameters Type Name Description Int32 index The zero-based index at which the new elements should be inserted. IEnumerable collection The collection whose elements should be inserted into the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type byte is a reference type. Exceptions Type Condition ArgumentNullException collection is null. ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source InsertRange(Int32, IEnumerable) Inserts the elements of a collection into the System.Collections.Generic.List at the specified index. Declaration public void InsertRange(int index, IEnumerable collection) Parameters Type Name Description Int32 index The zero-based index at which the new elements should be inserted. IEnumerable collection The collection whose elements should be inserted into the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type byte is a reference type. Exceptions Type Condition ArgumentNullException collection is null. ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source LastIndexOf(Byte) Searches for the specified object and returns the zero-based index of the last occurrence within the entire System.Collections.Generic.List. Declaration public int LastIndexOf(byte item) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the last occurrence of item within the entire the System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source LastIndexOf(Byte) Searches for the specified object and returns the zero-based index of the last occurrence within the entire System.Collections.Generic.List. Declaration public int LastIndexOf(byte item) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the last occurrence of item within the entire the System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source LastIndexOf(Byte, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that extends from the first element to the specified index. Declaration public int LastIndexOf(byte item, int index) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that extends from the first element to index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source LastIndexOf(Byte, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that extends from the first element to the specified index. Declaration public int LastIndexOf(byte item, int index) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that extends from the first element to index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source LastIndexOf(Byte, Int32, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that contains the specified number of elements and ends at the specified index. Declaration public int LastIndexOf(byte item, int index, int count) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that contains count number of elements and ends at index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source LastIndexOf(Byte, Int32, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that contains the specified number of elements and ends at the specified index. Declaration public int LastIndexOf(byte item, int index, int count) Parameters Type Name Description Byte item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that contains count number of elements and ends at index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source Remove(Byte) Removes the first occurrence of a specific object from the System.Collections.Generic.List. Declaration public bool Remove(byte item) Parameters Type Name Description Byte item The object to remove from the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the System.Collections.Generic.List. | Improve this Doc View Source Remove(Byte) Removes the first occurrence of a specific object from the System.Collections.Generic.List. Declaration public bool Remove(byte item) Parameters Type Name Description Byte item The object to remove from the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the System.Collections.Generic.List. | Improve this Doc View Source RemoveAt(Int32) Removes the element at the specified index of the System.Collections.Generic.List. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. | Improve this Doc View Source RemoveAt(Int32) Removes the element at the specified index of the System.Collections.Generic.List. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. | Improve this Doc View Source RemoveRange(Int32, Int32) Removes a range of elements from the System.Collections.Generic.List. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The zero-based starting index of the range of elements to remove. Int32 count The number of elements to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source RemoveRange(Int32, Int32) Removes a range of elements from the System.Collections.Generic.List. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The zero-based starting index of the range of elements to remove. Int32 count The number of elements to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source ToArray() Copies the elements of the System.Collections.Generic.List to a new array. Declaration public byte[] ToArray() Returns Type Description Byte [] An array containing copies of the elements of the System.Collections.Generic.List. | Improve this Doc View Source ToArray() Copies the elements of the System.Collections.Generic.List to a new array. Declaration public byte[] ToArray() Returns Type Description Byte [] An array containing copies of the elements of the System.Collections.Generic.List. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IEnumerable"
  },
  "devices/System.Collections.Generic.ListNdefRecord.Enumerator.html": {
    "href": "devices/System.Collections.Generic.ListNdefRecord.Enumerator.html",
    "title": "Struct ListNdefRecord.Enumerator | nanoFramework Documentation",
    "keywords": "Struct ListNdefRecord.Enumerator Enumerates the elements of a System.Collections.Generic.List. Implements IEnumerator IDisposable Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System.Collections.Generic Assembly : Iot.Device.Ndef.dll Syntax public struct Enumerator : IEnumerator, IDisposable Constructors | Improve this Doc View Source Enumerator(ListNdefRecord) Create an enumerator of the collection Declaration public Enumerator(ListNdefRecord collection) Parameters Type Name Description ListNdefRecord collection Properties | Improve this Doc View Source Current Gets the element at the current position of the enumerator. Declaration public readonly NdefRecord Current { get; } Property Value Type Description NdefRecord Methods | Improve this Doc View Source Dispose() Releases all resources used by the System.Collections.Generic.List.Enumerator. Declaration public void Dispose() | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the System.Collections.Generic.List. Declaration public bool MoveNext() Returns Type Description Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. | Improve this Doc View Source Reset() Move back to first position Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration readonly object IEnumerator.Current { get; } Returns Type Description Object Implements IEnumerator IDisposable"
  },
  "devices/System.Collections.Generic.ListNdefRecord.html": {
    "href": "devices/System.Collections.Generic.ListNdefRecord.html",
    "title": "Class ListNdefRecord | nanoFramework Documentation",
    "keywords": "Class ListNdefRecord List class for type NdefRecord that has been automatically generated Inheritance Object ListNdefRecord Implements IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections.Generic Assembly : Iot.Device.Ndef.dll Syntax public class ListNdefRecord : IEnumerable Constructors | Improve this Doc View Source ListNdefRecord() Initializes a new instance of the System.Collections.Generic.List class that is empty and has the default initial capacity. Declaration public ListNdefRecord() | Improve this Doc View Source ListNdefRecord(IEnumerable) Initializes a new instance of the System.Collections.Generic.List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. Declaration public ListNdefRecord(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements are copied to the new list. Exceptions Type Condition ArgumentNullException collection is null | Improve this Doc View Source ListNdefRecord(Int32) Initializes a new instance of the System.Collections.Generic.List class that is empty and has the specified initial capacity. Declaration public ListNdefRecord(int capacity) Parameters Type Name Description Int32 capacity The number of elements that the new list can initially store. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 0. Properties | Improve this Doc View Source Capacity Gets or sets the total number of elements the internal data structure can hold without resizing. Declaration public int Capacity { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException System.Collections.Generic.List.Capacity is set to a value that is less than System.Collections.Generic.List.Count | Improve this Doc View Source Count Gets the number of elements contained in the System.Collections.Generic.List Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Gets or sets the element at the specified index. Declaration public NdefRecord this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description NdefRecord The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is equal to or greater than System.Collections.Generic.List.Count. Methods | Improve this Doc View Source Add(NdefRecord) Adds an object to the end of the System.Collections.Generic.List. Declaration public void Add(NdefRecord item) Parameters Type Name Description NdefRecord item The object to be added to the end of the System.Collections.Generic.List. The value can be null for reference types. | Improve this Doc View Source AddRange(IEnumerable) Adds the elements of the specified collection to the end of the System.Collections.Generic.List. Declaration public void AddRange(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements should be added to the end of the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type NdefRecord is a reference type. Exceptions Type Condition ArgumentNullException collection is null. | Improve this Doc View Source Contains(NdefRecord) Determines whether an element is in the System.Collections.Generic.List. Declaration public bool Contains(NdefRecord item) Parameters Type Name Description NdefRecord item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is found in the System.Collections.Generic.List; otherwise, false. | Improve this Doc View Source CopyTo(NdefRecord[]) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the beginning of the target array. Declaration public void CopyTo(NdefRecord[] array) Parameters Type Name Description NdefRecord [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Exceptions Type Condition ArgumentNullException array is null. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the number of elements that the destination array can contain. | Improve this Doc View Source CopyTo(NdefRecord[], Int32) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(NdefRecord[] array, int arrayIndex) Parameters Type Name Description NdefRecord [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source CopyTo(Int32, NdefRecord[], Int32, Int32) Copies a range of elements from the System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(int index, NdefRecord[] array, int arrayIndex, int count) Parameters Type Name Description Int32 index The zero-based index in the source System.Collections.Generic.List at which copying begins. NdefRecord [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Int32 count The number of elements to copy. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than 0. -or- arrayIndex is less than 0. -or- count is less than 0. ArgumentException index is equal to or greater than the System.Collections.Generic.List.Count of the source System.Collections.Generic.List. -or- The number of elements from index to the end of the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the System.Collections.Generic.List. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator A System.Collections.Generic.List.Enumerator for the System.Collections.Generic.List. | Improve this Doc View Source GetRange(Int32, Int32) Creates a shallow copy of a range of elements in the source System.Collections.Generic.List. Declaration public ListNdefRecord GetRange(int index, int count) Parameters Type Name Description Int32 index The zero-based System.Collections.Generic.List index at which the range starts. Int32 count The number of elements in the range. Returns Type Description ListNdefRecord A shallow copy of a range of elements in the source System.Collections.Generic.List. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(NdefRecord) Searches for the specified object and returns the zero-based index of the first occurrence within the entire System.Collections.Generic.List. Declaration public int IndexOf(NdefRecord item) Parameters Type Name Description NdefRecord item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the first occurrence of item within the entire System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source IndexOf(NdefRecord, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that extends from the specified index to the last element. Declaration public int IndexOf(NdefRecord item, int index) Parameters Type Name Description NdefRecord item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that extends from index to the last element, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(NdefRecord, Int32, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that starts at the specified index and contains the specified number of elements. Declaration public int IndexOf(NdefRecord item, int index, int count) Parameters Type Name Description NdefRecord item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that starts at index and contains count number of elements, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source Insert(Int32, NdefRecord) Inserts an element into the System.Collections.Generic.List at the specified index. Declaration public void Insert(int index, NdefRecord item) Parameters Type Name Description Int32 index The zero-based index at which item should be inserted. NdefRecord item The object to insert. The value can be null for reference types. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source InsertRange(Int32, IEnumerable) Inserts the elements of a collection into the System.Collections.Generic.List at the specified index. Declaration public void InsertRange(int index, IEnumerable collection) Parameters Type Name Description Int32 index The zero-based index at which the new elements should be inserted. IEnumerable collection The collection whose elements should be inserted into the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type NdefRecord is a reference type. Exceptions Type Condition ArgumentNullException collection is null. ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source LastIndexOf(NdefRecord) Searches for the specified object and returns the zero-based index of the last occurrence within the entire System.Collections.Generic.List. Declaration public int LastIndexOf(NdefRecord item) Parameters Type Name Description NdefRecord item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the last occurrence of item within the entire the System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source LastIndexOf(NdefRecord, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that extends from the first element to the specified index. Declaration public int LastIndexOf(NdefRecord item, int index) Parameters Type Name Description NdefRecord item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that extends from the first element to index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source LastIndexOf(NdefRecord, Int32, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that contains the specified number of elements and ends at the specified index. Declaration public int LastIndexOf(NdefRecord item, int index, int count) Parameters Type Name Description NdefRecord item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that contains count number of elements and ends at index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source Remove(NdefRecord) Removes the first occurrence of a specific object from the System.Collections.Generic.List. Declaration public bool Remove(NdefRecord item) Parameters Type Name Description NdefRecord item The object to remove from the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the System.Collections.Generic.List. | Improve this Doc View Source RemoveAt(Int32) Removes the element at the specified index of the System.Collections.Generic.List. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. | Improve this Doc View Source RemoveRange(Int32, Int32) Removes a range of elements from the System.Collections.Generic.List. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The zero-based starting index of the range of elements to remove. Int32 count The number of elements to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source ToArray() Copies the elements of the System.Collections.Generic.List to a new array. Declaration public NdefRecord[] ToArray() Returns Type Description NdefRecord [] An array containing copies of the elements of the System.Collections.Generic.List. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IEnumerable"
  },
  "devices/System.Collections.Generic.ListString.Enumerator.html": {
    "href": "devices/System.Collections.Generic.ListString.Enumerator.html",
    "title": "Struct ListString.Enumerator | nanoFramework Documentation",
    "keywords": "Struct ListString.Enumerator Enumerates the elements of a System.Collections.Generic.List. Implements IEnumerator IDisposable Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System.Collections.Generic Assembly : Iot.Device.Mcp3428.dll Syntax public struct Enumerator : IEnumerator, IDisposable Constructors | Improve this Doc View Source Enumerator(ListString) Create an enumerator of the collection Declaration public Enumerator(ListString collection) Parameters Type Name Description ListString collection Properties | Improve this Doc View Source Current Gets the element at the current position of the enumerator. Declaration public readonly string Current { get; } Property Value Type Description String Methods | Improve this Doc View Source Dispose() Releases all resources used by the System.Collections.Generic.List.Enumerator. Declaration public void Dispose() | Improve this Doc View Source MoveNext() Advances the enumerator to the next element of the System.Collections.Generic.List. Declaration public bool MoveNext() Returns Type Description Boolean true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. | Improve this Doc View Source Reset() Move back to first position Declaration public void Reset() Explicit Interface Implementations | Improve this Doc View Source IEnumerator.Current Declaration readonly object IEnumerator.Current { get; } Returns Type Description Object Implements IEnumerator IDisposable"
  },
  "devices/System.Collections.Generic.ListString.html": {
    "href": "devices/System.Collections.Generic.ListString.html",
    "title": "Class ListString | nanoFramework Documentation",
    "keywords": "Class ListString List class for type String that has been automatically generated Inheritance Object ListString Implements IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Collections.Generic Assembly : Iot.Device.Mcp3428.dll Syntax public class ListString : IEnumerable Constructors | Improve this Doc View Source ListString() Initializes a new instance of the System.Collections.Generic.List class that is empty and has the default initial capacity. Declaration public ListString() | Improve this Doc View Source ListString(IEnumerable) Initializes a new instance of the System.Collections.Generic.List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied. Declaration public ListString(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements are copied to the new list. Exceptions Type Condition ArgumentNullException collection is null | Improve this Doc View Source ListString(Int32) Initializes a new instance of the System.Collections.Generic.List class that is empty and has the specified initial capacity. Declaration public ListString(int capacity) Parameters Type Name Description Int32 capacity The number of elements that the new list can initially store. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 0. Properties | Improve this Doc View Source Capacity Gets or sets the total number of elements the internal data structure can hold without resizing. Declaration public int Capacity { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException System.Collections.Generic.List.Capacity is set to a value that is less than System.Collections.Generic.List.Count | Improve this Doc View Source Count Gets the number of elements contained in the System.Collections.Generic.List Declaration public int Count { get; } Property Value Type Description Int32 | Improve this Doc View Source Item[Int32] Gets or sets the element at the specified index. Declaration public string this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description String The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is equal to or greater than System.Collections.Generic.List.Count. Methods | Improve this Doc View Source Add(String) Adds an object to the end of the System.Collections.Generic.List. Declaration public void Add(string item) Parameters Type Name Description String item The object to be added to the end of the System.Collections.Generic.List. The value can be null for reference types. | Improve this Doc View Source AddRange(IEnumerable) Adds the elements of the specified collection to the end of the System.Collections.Generic.List. Declaration public void AddRange(IEnumerable collection) Parameters Type Name Description IEnumerable collection The collection whose elements should be added to the end of the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type string is a reference type. Exceptions Type Condition ArgumentNullException collection is null. | Improve this Doc View Source Contains(String) Determines whether an element is in the System.Collections.Generic.List. Declaration public bool Contains(string item) Parameters Type Name Description String item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is found in the System.Collections.Generic.List; otherwise, false. | Improve this Doc View Source CopyTo(Int32, String[], Int32, Int32) Copies a range of elements from the System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(int index, string[] array, int arrayIndex, int count) Parameters Type Name Description Int32 index The zero-based index in the source System.Collections.Generic.List at which copying begins. String [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Int32 count The number of elements to copy. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException index is less than 0. -or- arrayIndex is less than 0. -or- count is less than 0. ArgumentException index is equal to or greater than the System.Collections.Generic.List.Count of the source System.Collections.Generic.List. -or- The number of elements from index to the end of the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source CopyTo(String[]) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the beginning of the target array. Declaration public void CopyTo(string[] array) Parameters Type Name Description String [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Exceptions Type Condition ArgumentNullException array is null. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the number of elements that the destination array can contain. | Improve this Doc View Source CopyTo(String[], Int32) Copies the entire System.Collections.Generic.List to a compatible one-dimensional array, starting at the specified index of the target array. Declaration public void CopyTo(string[] array, int arrayIndex) Parameters Type Name Description String [] array The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.List. The System.Array must have zero-based indexing. Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source System.Collections.Generic.List is greater than the available space from arrayIndex to the end of the destination array. | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the System.Collections.Generic.List. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator A System.Collections.Generic.List.Enumerator for the System.Collections.Generic.List. | Improve this Doc View Source GetRange(Int32, Int32) Creates a shallow copy of a range of elements in the source System.Collections.Generic.List. Declaration public ListString GetRange(int index, int count) Parameters Type Name Description Int32 index The zero-based System.Collections.Generic.List index at which the range starts. Int32 count The number of elements in the range. Returns Type Description ListString A shallow copy of a range of elements in the source System.Collections.Generic.List. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(String) Searches for the specified object and returns the zero-based index of the first occurrence within the entire System.Collections.Generic.List. Declaration public int IndexOf(string item) Parameters Type Name Description String item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the first occurrence of item within the entire System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source IndexOf(String, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that extends from the specified index to the last element. Declaration public int IndexOf(string item, int index) Parameters Type Name Description String item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that extends from index to the last element, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source IndexOf(String, Int32, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the System.Collections.Generic.List that starts at the specified index and contains the specified number of elements. Declaration public int IndexOf(string item, int index, int count) Parameters Type Name Description String item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the first occurrence of item within the range of elements in the System.Collections.Generic.List that starts at index and contains count number of elements, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source Insert(Int32, String) Inserts an element into the System.Collections.Generic.List at the specified index. Declaration public void Insert(int index, string item) Parameters Type Name Description Int32 index The zero-based index at which item should be inserted. String item The object to insert. The value can be null for reference types. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source InsertRange(Int32, IEnumerable) Inserts the elements of a collection into the System.Collections.Generic.List at the specified index. Declaration public void InsertRange(int index, IEnumerable collection) Parameters Type Name Description Int32 index The zero-based index at which the new elements should be inserted. IEnumerable collection The collection whose elements should be inserted into the System.Collections.Generic.List. The collection itself cannot be null, but it can contain elements that are null, if type string is a reference type. Exceptions Type Condition ArgumentNullException collection is null. ArgumentOutOfRangeException index is less than 0. -or- index is greater than System.Collections.Generic.List.Count. | Improve this Doc View Source LastIndexOf(String) Searches for the specified object and returns the zero-based index of the last occurrence within the entire System.Collections.Generic.List. Declaration public int LastIndexOf(string item) Parameters Type Name Description String item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Int32 The zero-based index of the last occurrence of item within the entire the System.Collections.Generic.List, if found; otherwise, -1. | Improve this Doc View Source LastIndexOf(String, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that extends from the first element to the specified index. Declaration public int LastIndexOf(string item, int index) Parameters Type Name Description String item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that extends from the first element to index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. | Improve this Doc View Source LastIndexOf(String, Int32, Int32) Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the System.Collections.Generic.List that contains the specified number of elements and ends at the specified index. Declaration public int LastIndexOf(string item, int index, int count) Parameters Type Name Description String item The object to locate in the System.Collections.Generic.List. The value can be null for reference types. Int32 index The zero-based starting index of the backward search. Int32 count The number of elements in the section to search. Returns Type Description Int32 The zero-based index of the last occurrence of item within the range of elements in the System.Collections.Generic.List that contains count number of elements and ends at index, if found; otherwise, -1. Exceptions Type Condition ArgumentOutOfRangeException index is outside the range of valid indexes for the System.Collections.Generic.List. -or- count is less than 0. -or- index and count do not specify a valid section in the System.Collections.Generic.List. | Improve this Doc View Source Remove(String) Removes the first occurrence of a specific object from the System.Collections.Generic.List. Declaration public bool Remove(string item) Parameters Type Name Description String item The object to remove from the System.Collections.Generic.List. The value can be null for reference types. Returns Type Description Boolean true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the System.Collections.Generic.List. | Improve this Doc View Source RemoveAt(Int32) Removes the element at the specified index of the System.Collections.Generic.List. Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. | Improve this Doc View Source RemoveRange(Int32, Int32) Removes a range of elements from the System.Collections.Generic.List. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The zero-based starting index of the range of elements to remove. Int32 count The number of elements to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the System.Collections.Generic.List. | Improve this Doc View Source ToArray() Copies the elements of the System.Collections.Generic.List to a new array. Declaration public string[] ToArray() Returns Type Description String [] An array containing copies of the elements of the System.Collections.Generic.List. Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements IEnumerable"
  },
  "devices/System.Device.DelayHelper.html": {
    "href": "devices/System.Device.DelayHelper.html",
    "title": "Class DelayHelper | nanoFramework Documentation",
    "keywords": "Class DelayHelper Helpers for short waits. Inheritance Object DelayHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device Assembly : Iot.Device.Lps25h.dll Syntax public static class DelayHelper Methods | Improve this Doc View Source Delay(TimeSpan, Boolean) Delay for at least the specified time . Declaration public static void Delay(TimeSpan time, bool allowThreadYield) Parameters Type Name Description TimeSpan time The amount of time to delay. Boolean allowThreadYield True to allow yielding the thread. If this is set to false, on single-proc systems this will prevent all other code from running. | Improve this Doc View Source DelayMicroseconds(Int32, Boolean) Delay for at least the specified microseconds . Declaration public static void DelayMicroseconds(int microseconds, bool allowThreadYield) Parameters Type Name Description Int32 microseconds The number of microseconds to delay. Boolean allowThreadYield True to allow yielding the thread. If this is set to false, on single-proc systems this will prevent all other code from running. | Improve this Doc View Source DelayMilliseconds(Int32, Boolean) Delay for at least the specified milliseconds Declaration public static void DelayMilliseconds(int milliseconds, bool allowThreadYield) Parameters Type Name Description Int32 milliseconds The number of milliseconds to delay. Boolean allowThreadYield True to allow yielding the thread. If this is set to false, on single-proc systems this will prevent all other code from running."
  },
  "devices/System.Device.html": {
    "href": "devices/System.Device.html",
    "title": "Namespace System.Device | nanoFramework Documentation",
    "keywords": "Namespace System.Device Classes DelayHelper Helpers for short waits."
  },
  "devices/System.Device.Model.CommandAttribute.html": {
    "href": "devices/System.Device.Model.CommandAttribute.html",
    "title": "Class CommandAttribute | nanoFramework Documentation",
    "keywords": "Class CommandAttribute Command of the interface Inheritance Object Attribute CommandAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Model Assembly : Iot.Device.Lm75.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)] public class CommandAttribute : Attribute Constructors | Improve this Doc View Source CommandAttribute() Constructs CommandAttribute Declaration public CommandAttribute() | Improve this Doc View Source CommandAttribute(String) Constructs CommandAttribute Declaration public CommandAttribute(string name) Parameters Type Name Description String name Optional name of the command in the interface. If not provided method name will be used. | Improve this Doc View Source CommandAttribute(String, String) Constructs CommandAttribute Declaration public CommandAttribute(string name, string displayName) Parameters Type Name Description String name Optional name of the command in the interface. If not provided method name will be used. String displayName Optional name of the command in the interface. Properties | Improve this Doc View Source DisplayName Display name of the command Declaration public string DisplayName { get; } Property Value Type Description String | Improve this Doc View Source Name Name of the command in the interface Declaration public string Name { get; } Property Value Type Description String"
  },
  "devices/System.Device.Model.ComponentAttribute.html": {
    "href": "devices/System.Device.Model.ComponentAttribute.html",
    "title": "Class ComponentAttribute | nanoFramework Documentation",
    "keywords": "Class ComponentAttribute Component attribute class referencing to an interface Inheritance Object Attribute ComponentAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Model Assembly : Iot.Device.Lm75.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public class ComponentAttribute : Attribute Constructors | Improve this Doc View Source ComponentAttribute() Constructs ComponentAttribute Declaration public ComponentAttribute() | Improve this Doc View Source ComponentAttribute(String) Constructs ComponentAttribute Declaration public ComponentAttribute(string name) Parameters Type Name Description String name Optional name of the component. If not provided property name will be used. Properties | Improve this Doc View Source Name Name of the component Declaration public string Name { get; } Property Value Type Description String"
  },
  "devices/System.Device.Model.html": {
    "href": "devices/System.Device.Model.html",
    "title": "Namespace System.Device.Model | nanoFramework Documentation",
    "keywords": "Namespace System.Device.Model Classes CommandAttribute Command of the interface ComponentAttribute Component attribute class referencing to an interface InterfaceAttribute Interface attribute PropertyAttribute Property of the interface TelemetryAttribute Telemetry of the interface"
  },
  "devices/System.Device.Model.InterfaceAttribute.html": {
    "href": "devices/System.Device.Model.InterfaceAttribute.html",
    "title": "Class InterfaceAttribute | nanoFramework Documentation",
    "keywords": "Class InterfaceAttribute Interface attribute Inheritance Object Attribute InterfaceAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Model Assembly : Iot.Device.Lm75.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = false)] public class InterfaceAttribute : Attribute Constructors | Improve this Doc View Source InterfaceAttribute(String) Constructs InterfaceAttrbute Declaration public InterfaceAttribute(string displayName) Parameters Type Name Description String displayName Display name of the interface Properties | Improve this Doc View Source DisplayName Display name of the interface Declaration public string DisplayName { get; } Property Value Type Description String"
  },
  "devices/System.Device.Model.PropertyAttribute.html": {
    "href": "devices/System.Device.Model.PropertyAttribute.html",
    "title": "Class PropertyAttribute | nanoFramework Documentation",
    "keywords": "Class PropertyAttribute Property of the interface Inheritance Object Attribute PropertyAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Model Assembly : Iot.Device.Lm75.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public class PropertyAttribute : Attribute Constructors | Improve this Doc View Source PropertyAttribute() Constructs PropertyAttribute Declaration public PropertyAttribute() | Improve this Doc View Source PropertyAttribute(String) Constructs PropertyAttribute Declaration public PropertyAttribute(string name) Parameters Type Name Description String name Optional name of the property in the interface. If not provided property name will be used. | Improve this Doc View Source PropertyAttribute(String, String) Constructs PropertyAttribute Declaration public PropertyAttribute(string name, string displayName) Parameters Type Name Description String name Optional name of the property in the interface. If not provided property name will be used. String displayName Optional name of the property in the interface. If not provided it may be infered from the type. Properties | Improve this Doc View Source DisplayName Display name of the property Declaration public string DisplayName { get; } Property Value Type Description String | Improve this Doc View Source Name Name of the property in the interface Declaration public string Name { get; } Property Value Type Description String"
  },
  "devices/System.Device.Model.TelemetryAttribute.html": {
    "href": "devices/System.Device.Model.TelemetryAttribute.html",
    "title": "Class TelemetryAttribute | nanoFramework Documentation",
    "keywords": "Class TelemetryAttribute Telemetry of the interface Inheritance Object Attribute TelemetryAttribute Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Device.Model Assembly : Iot.Device.Lm75.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = false, Inherited = true)] public class TelemetryAttribute : Attribute Constructors | Improve this Doc View Source TelemetryAttribute() Constructs TelemetryAttribute Declaration public TelemetryAttribute() Remarks When put on methods name should always be provided. | Improve this Doc View Source TelemetryAttribute(String) Constructs TelemetryAttribute Declaration public TelemetryAttribute(string name) Parameters Type Name Description String name Name of the telemetry. If not provided property name will be used. Remarks When put on methods name should always be provided. | Improve this Doc View Source TelemetryAttribute(String, String) Constructs TelemetryAttribute Declaration public TelemetryAttribute(string name, string displayName) Parameters Type Name Description String name Name of the telemetry. If not provided property name will be used. String displayName Optional display name of the telemetry. If not provided it may be infered from the type. Remarks When put on methods name should always be provided. Properties | Improve this Doc View Source DisplayName Display name of the telemetry Declaration public string DisplayName { get; } Property Value Type Description String | Improve this Doc View Source Name Name of the telemetry in the interface Declaration public string Name { get; } Property Value Type Description String"
  },
  "devices/System.Diagnostics.html": {
    "href": "devices/System.Diagnostics.html",
    "title": "Namespace System.Diagnostics | nanoFramework Documentation",
    "keywords": "Namespace System.Diagnostics Classes Stopwatch Provides a set of methods and properties that you can use to accurately measure elapsed time."
  },
  "devices/System.Diagnostics.Stopwatch.html": {
    "href": "devices/System.Diagnostics.Stopwatch.html",
    "title": "Class Stopwatch | nanoFramework Documentation",
    "keywords": "Class Stopwatch Provides a set of methods and properties that you can use to accurately measure elapsed time. Inheritance Object Stopwatch Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : System.Diagnostics Assembly : Iot.Device.Lps25h.dll Syntax public class Stopwatch Constructors | Improve this Doc View Source Stopwatch() Initializes a new instance of the System.Diagnostics.Stopwatch class. Declaration public Stopwatch() Fields | Improve this Doc View Source Frequency Gets the frequency of the timer as the number of ticks per second. This field is read-only. Declaration public static readonly long Frequency Field Value Type Description Int64 | Improve this Doc View Source IsHighResolution Indicates whether the timer is based on a high-resolution performance counter. This field is read-only. Declaration public static readonly bool IsHighResolution Field Value Type Description Boolean Properties | Improve this Doc View Source Elapsed Gets the total elapsed time measured by the current instance. Declaration public TimeSpan Elapsed { get; } Property Value Type Description TimeSpan | Improve this Doc View Source ElapsedMilliseconds Gets the total elapsed time measured by the current instance, in milliseconds. Declaration public long ElapsedMilliseconds { get; } Property Value Type Description Int64 | Improve this Doc View Source ElapsedTicks Gets the total elapsed time measured by the current instance, in timer ticks. Declaration public long ElapsedTicks { get; } Property Value Type Description Int64 | Improve this Doc View Source IsRunning Gets a value indicating whether the System.Diagnostics.Stopwatch timer is running. Declaration public bool IsRunning { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source GetTimestamp() Gets the current number of ticks in the timer mechanism. Declaration public static long GetTimestamp() Returns Type Description Int64 | Improve this Doc View Source Reset() Stops time interval measurement and resets the elapsed time to zero. Declaration public void Reset() | Improve this Doc View Source Restart() Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time. Declaration public void Restart() | Improve this Doc View Source Start() Starts, or resumes, measuring elapsed time for an interval. Declaration public void Start() | Improve this Doc View Source StartNew() Initializes a new System.Diagnostics.Stopwatch instance, sets the elapsed time property to zero, and starts measuring elapsed time. Declaration public static Stopwatch StartNew() Returns Type Description Stopwatch A System.Diagnostics.Stopwatch that has just begun measuring elapsed time. | Improve this Doc View Source Stop() Stops measuring elapsed time for an interval. Declaration public void Stop()"
  },
  "devices/System.Drawing.Color.html": {
    "href": "devices/System.Drawing.Color.html",
    "title": "Struct Color | nanoFramework Documentation",
    "keywords": "Struct Color Represents an ARGB (alpha, red, green, blue) color. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System.Drawing Assembly : Iot.Device.Bh1745.dll Syntax public readonly struct Color Properties | Improve this Doc View Source A Gets the alpha component value of this System.Drawing.Color structure. Declaration public readonly byte A { get; } Property Value Type Description Byte | Improve this Doc View Source AliceBlue Gets a system-defined color that has an ARGB value of #FFF0F8FF. Declaration public static readonly Color AliceBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source AntiqueWhite Gets a system-defined color that has an ARGB value of #FFFAEBD7. Declaration public static readonly Color AntiqueWhite { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Aqua Gets a system-defined color that has an ARGB value of #FF00FFFF. Declaration public static readonly Color Aqua { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Aquamarine Gets a system-defined color that has an ARGB value of #FF7FFFD4. Declaration public static readonly Color Aquamarine { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Azure Gets a system-defined color that has an ARGB value of #FFF0FFFF. Declaration public static readonly Color Azure { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source B Gets the blue component value of this System.Drawing.Color structure. Declaration public readonly byte B { get; } Property Value Type Description Byte | Improve this Doc View Source Beige Gets a system-defined color that has an ARGB value of #FFF5F5DC. Declaration public static readonly Color Beige { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Bisque Gets a system-defined color that has an ARGB value of #FFFFE4C4. Declaration public static readonly Color Bisque { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Black Gets a system-defined color that has an ARGB value of #FF000000. Declaration public static readonly Color Black { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source BlanchedAlmond Gets a system-defined color that has an ARGB value of #FFFFEBCD. Declaration public static readonly Color BlanchedAlmond { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Blue Gets a system-defined color that has an ARGB value of #FF0000FF. Declaration public static readonly Color Blue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source BlueViolet Gets a system-defined color that has an ARGB value of #FF8A2BE2. Declaration public static readonly Color BlueViolet { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Brown Gets a system-defined color that has an ARGB value of #FFA52A2A. Declaration public static readonly Color Brown { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source BurlyWood Gets a system-defined color that has an ARGB value of #FFDEB887. Declaration public static readonly Color BurlyWood { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source CadetBlue Gets a system-defined color that has an ARGB value of #FF5F9EA0. Declaration public static readonly Color CadetBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Chartreuse Gets a system-defined color that has an ARGB value of #FF7FFF00. Declaration public static readonly Color Chartreuse { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Chocolate Gets a system-defined color that has an ARGB value of #FFD2691E. Declaration public static readonly Color Chocolate { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Coral Gets a system-defined color that has an ARGB value of #FFFF7F50. Declaration public static readonly Color Coral { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source CornflowerBlue Gets a system-defined color that has an ARGB value of #FF6495ED. Declaration public static readonly Color CornflowerBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Cornsilk Gets a system-defined color that has an ARGB value of #FFFFF8DC. Declaration public static readonly Color Cornsilk { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Crimson Gets a system-defined color that has an ARGB value of #FFDC143C. Declaration public static readonly Color Crimson { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Cyan Gets a system-defined color that has an ARGB value of #FF00FFFF. Declaration public static readonly Color Cyan { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkBlue Gets a system-defined color that has an ARGB value of #FF00008B. Declaration public static readonly Color DarkBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkCyan Gets a system-defined color that has an ARGB value of #FF008B8B. Declaration public static readonly Color DarkCyan { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkGoldenrod Gets a system-defined color that has an ARGB value of #FFB8860B. Declaration public static readonly Color DarkGoldenrod { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkGray Gets a system-defined color that has an ARGB value of #FFA9A9A9. Declaration public static readonly Color DarkGray { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkGreen Gets a system-defined color that has an ARGB value of #FF006400. Declaration public static readonly Color DarkGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkKhaki Gets a system-defined color that has an ARGB value of #FFBDB76B. Declaration public static readonly Color DarkKhaki { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkMagenta Gets a system-defined color that has an ARGB value of #FF8B008B. Declaration public static readonly Color DarkMagenta { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkOliveGreen Gets a system-defined color that has an ARGB value of #FF556B2F. Declaration public static readonly Color DarkOliveGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkOrange Gets a system-defined color that has an ARGB value of #FFFF8C00. Declaration public static readonly Color DarkOrange { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkOrchid Gets a system-defined color that has an ARGB value of #FF9932CC. Declaration public static readonly Color DarkOrchid { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkRed Gets a system-defined color that has an ARGB value of #FF8B0000. Declaration public static readonly Color DarkRed { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkSalmon Gets a system-defined color that has an ARGB value of #FFE9967A. Declaration public static readonly Color DarkSalmon { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkSeaGreen Gets a system-defined color that has an ARGB value of #FF8FBC8B. Declaration public static readonly Color DarkSeaGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkSlateBlue Gets a system-defined color that has an ARGB value of #FF483D8B. Declaration public static readonly Color DarkSlateBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkSlateGray Gets a system-defined color that has an ARGB value of #FF2F4F4F. Declaration public static readonly Color DarkSlateGray { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkTurquoise Gets a system-defined color that has an ARGB value of #FF00CED1. Declaration public static readonly Color DarkTurquoise { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DarkViolet Gets a system-defined color that has an ARGB value of #FF9400D3. Declaration public static readonly Color DarkViolet { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DeepPink Gets a system-defined color that has an ARGB value of #FFFF1493. Declaration public static readonly Color DeepPink { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DeepSkyBlue Gets a system-defined color that has an ARGB value of #FF00BFFF. Declaration public static readonly Color DeepSkyBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DimGray Gets a system-defined color that has an ARGB value of #FF696969. Declaration public static readonly Color DimGray { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source DodgerBlue Gets a system-defined color that has an ARGB value of #FF1E90FF. Declaration public static readonly Color DodgerBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Firebrick Gets a system-defined color that has an ARGB value of #FFB22222. Declaration public static readonly Color Firebrick { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source FloralWhite Gets a system-defined color that has an ARGB value of #FFFFFAF0. Declaration public static readonly Color FloralWhite { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source ForestGreen Gets a system-defined color that has an ARGB value of #FF228B22. Declaration public static readonly Color ForestGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Fuchsia Gets a system-defined color that has an ARGB value of #FFFF00FF. Declaration public static readonly Color Fuchsia { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source G Gets the green component value of this System.Drawing.Color structure. Declaration public readonly byte G { get; } Property Value Type Description Byte | Improve this Doc View Source Gainsboro Gets a system-defined color that has an ARGB value of #FFDCDCDC. Declaration public static readonly Color Gainsboro { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source GhostWhite Gets a system-defined color that has an ARGB value of #FFF8F8FF. Declaration public static readonly Color GhostWhite { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Gold Gets a system-defined color that has an ARGB value of #FFFFD700. Declaration public static readonly Color Gold { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Goldenrod Gets a system-defined color that has an ARGB value of #FFDAA520. Declaration public static readonly Color Goldenrod { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Gray Gets a system-defined color that has an ARGB value of #FF808080. Declaration public static readonly Color Gray { get; } Property Value Type Description Color A System.Drawing.Color structure representing a system-defined color. | Improve this Doc View Source Green Gets a system-defined color that has an ARGB value of #FF008000. Declaration public static readonly Color Green { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source GreenYellow Gets a system-defined color that has an ARGB value of #FFADFF2F. Declaration public static readonly Color GreenYellow { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Honeydew Gets a system-defined color that has an ARGB value of #FFF0FFF0. Declaration public static readonly Color Honeydew { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source HotPink Gets a system-defined color that has an ARGB value of #FFFF69B4. Declaration public static readonly Color HotPink { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source IndianRed Gets a system-defined color that has an ARGB value of #FFCD5C5C. Declaration public static readonly Color IndianRed { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Indigo Gets a system-defined color that has an ARGB value of #FF4B0082. Declaration public static readonly Color Indigo { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Ivory Gets a system-defined color that has an ARGB value of #FFFFFFF0. Declaration public static readonly Color Ivory { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Khaki Gets a system-defined color that has an ARGB value of #FFF0E68C. Declaration public static readonly Color Khaki { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Lavender Gets a system-defined color that has an ARGB value of #FFE6E6FA. Declaration public static readonly Color Lavender { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LavenderBlush Gets a system-defined color that has an ARGB value of #FFFFF0F5. Declaration public static readonly Color LavenderBlush { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LawnGreen Gets a system-defined color that has an ARGB value of #FF7CFC00. Declaration public static readonly Color LawnGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LemonChiffon Gets a system-defined color that has an ARGB value of #FFFFFACD. Declaration public static readonly Color LemonChiffon { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightBlue Gets a system-defined color that has an ARGB value of #FFADD8E6. Declaration public static readonly Color LightBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightCoral Gets a system-defined color that has an ARGB value of #FFF08080. Declaration public static readonly Color LightCoral { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightCyan Gets a system-defined color that has an ARGB value of #FFE0FFFF. Declaration public static readonly Color LightCyan { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightGoldenrodYellow Gets a system-defined color that has an ARGB value of #FFFAFAD2. Declaration public static readonly Color LightGoldenrodYellow { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightGray Gets a system-defined color that has an ARGB value of #FFD3D3D3. Declaration public static readonly Color LightGray { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightGreen Gets a system-defined color that has an ARGB value of #FF90EE90. Declaration public static readonly Color LightGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightPink Gets a system-defined color that has an ARGB value of #FFFFB6C1. Declaration public static readonly Color LightPink { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightSalmon Gets a system-defined color that has an ARGB value of #FFFFA07A. Declaration public static readonly Color LightSalmon { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightSeaGreen Gets a system-defined color that has an ARGB value of #FF20B2AA. Declaration public static readonly Color LightSeaGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightSkyBlue Gets a system-defined color that has an ARGB value of #FF87CEFA. Declaration public static readonly Color LightSkyBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightSlateGray Gets a system-defined color that has an ARGB value of #FF778899. Declaration public static readonly Color LightSlateGray { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightSteelBlue Gets a system-defined color that has an ARGB value of #FFB0C4DE. Declaration public static readonly Color LightSteelBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LightYellow Gets a system-defined color that has an ARGB value of #FFFFFFE0. Declaration public static readonly Color LightYellow { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Lime Gets a system-defined color that has an ARGB value of #FF00FF00. Declaration public static readonly Color Lime { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source LimeGreen Gets a system-defined color that has an ARGB value of #FF32CD32. Declaration public static readonly Color LimeGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Linen Gets a system-defined color that has an ARGB value of #FFFAF0E6. Declaration public static readonly Color Linen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Magenta Gets a system-defined color that has an ARGB value of #FFFF00FF. Declaration public static readonly Color Magenta { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Maroon Gets a system-defined color that has an ARGB value of #FF800000. Declaration public static readonly Color Maroon { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MediumAquamarine Gets a system-defined color that has an ARGB value of #FF66CDAA. Declaration public static readonly Color MediumAquamarine { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MediumBlue Gets a system-defined color that has an ARGB value of #FF0000CD. Declaration public static readonly Color MediumBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MediumOrchid Gets a system-defined color that has an ARGB value of #FFBA55D3. Declaration public static readonly Color MediumOrchid { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MediumPurple Gets a system-defined color that has an ARGB value of #FF9370DB. Declaration public static readonly Color MediumPurple { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MediumSeaGreen Gets a system-defined color that has an ARGB value of #FF3CB371. Declaration public static readonly Color MediumSeaGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MediumSlateBlue Gets a system-defined color that has an ARGB value of #FF7B68EE. Declaration public static readonly Color MediumSlateBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MediumSpringGreen Gets a system-defined color that has an ARGB value of #FF00FA9A. Declaration public static readonly Color MediumSpringGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MediumTurquoise Gets a system-defined color that has an ARGB value of #FF48D1CC. Declaration public static readonly Color MediumTurquoise { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MediumVioletRed Gets a system-defined color that has an ARGB value of #FFC71585. Declaration public static readonly Color MediumVioletRed { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MidnightBlue Gets a system-defined color that has an ARGB value of #FF191970. Declaration public static readonly Color MidnightBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MintCream Gets a system-defined color that has an ARGB value of #FFF5FFFA. Declaration public static readonly Color MintCream { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source MistyRose Gets a system-defined color that has an ARGB value of #FFFFE4E1. Declaration public static readonly Color MistyRose { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Moccasin Gets a system-defined color that has an ARGB value of #FFFFE4B5. Declaration public static readonly Color Moccasin { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source NavajoWhite Gets a system-defined color that has an ARGB value of #FFFFDEAD. Declaration public static readonly Color NavajoWhite { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Navy Gets a system-defined color that has an ARGB value of #FF000080. Declaration public static readonly Color Navy { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source OldLace Gets a system-defined color that has an ARGB value of #FFFDF5E6. Declaration public static readonly Color OldLace { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Olive Gets a system-defined color that has an ARGB value of #FF808000. Declaration public static readonly Color Olive { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source OliveDrab Gets a system-defined color that has an ARGB value of #FF6B8E23. Declaration public static readonly Color OliveDrab { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Orange Gets a system-defined color that has an ARGB value of #FFFFA500. Declaration public static readonly Color Orange { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source OrangeRed Gets a system-defined color that has an ARGB value of #FFFF4500. Declaration public static readonly Color OrangeRed { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Orchid Gets a system-defined color that has an ARGB value of #FFDA70D6. Declaration public static readonly Color Orchid { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source PaleGoldenrod Gets a system-defined color that has an ARGB value of #FFEEE8AA. Declaration public static readonly Color PaleGoldenrod { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source PaleGreen Gets a system-defined color that has an ARGB value of #FF98FB98. Declaration public static readonly Color PaleGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source PaleTurquoise Gets a system-defined color that has an ARGB value of #FFAFEEEE. Declaration public static readonly Color PaleTurquoise { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source PaleVioletRed Gets a system-defined color that has an ARGB value of #FFDB7093. Declaration public static readonly Color PaleVioletRed { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source PapayaWhip Gets a system-defined color that has an ARGB value of #FFFFEFD5. Declaration public static readonly Color PapayaWhip { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source PeachPuff Gets a system-defined color that has an ARGB value of #FFFFDAB9. Declaration public static readonly Color PeachPuff { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Peru Gets a system-defined color that has an ARGB value of #FFCD853F. Declaration public static readonly Color Peru { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Pink Gets a system-defined color that has an ARGB value of #FFFFC0CB. Declaration public static readonly Color Pink { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Plum Gets a system-defined color that has an ARGB value of #FFDDA0DD. Declaration public static readonly Color Plum { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source PowderBlue Gets a system-defined color that has an ARGB value of #FFB0E0E6. Declaration public static readonly Color PowderBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Purple Gets a system-defined color that has an ARGB value of #FF800080. Declaration public static readonly Color Purple { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source R Gets the red component value of this System.Drawing.Color structure. Declaration public readonly byte R { get; } Property Value Type Description Byte | Improve this Doc View Source Red Gets a system-defined color that has an ARGB value of #FFFF0000. Declaration public static readonly Color Red { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source RosyBrown Gets a system-defined color that has an ARGB value of #FFBC8F8F. Declaration public static readonly Color RosyBrown { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source RoyalBlue Gets a system-defined color that has an ARGB value of #FF4169E1. Declaration public static readonly Color RoyalBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source SaddleBrown Gets a system-defined color that has an ARGB value of #FF8B4513. Declaration public static readonly Color SaddleBrown { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Salmon Gets a system-defined color that has an ARGB value of #FFFA8072. Declaration public static readonly Color Salmon { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source SandyBrown Gets a system-defined color that has an ARGB value of #FFF4A460. Declaration public static readonly Color SandyBrown { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source SeaGreen Gets a system-defined color that has an ARGB value of #FF2E8B57. Declaration public static readonly Color SeaGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source SeaShell Gets a system-defined color that has an ARGB value of #FFFFF5EE. Declaration public static readonly Color SeaShell { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Sienna Gets a system-defined color that has an ARGB value of #FFA0522D. Declaration public static readonly Color Sienna { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Silver Gets a system-defined color that has an ARGB value of #FFC0C0C0. Declaration public static readonly Color Silver { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source SkyBlue Gets a system-defined color that has an ARGB value of #FF87CEEB. Declaration public static readonly Color SkyBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source SlateBlue Gets a system-defined color that has an ARGB value of #FF6A5ACD. Declaration public static readonly Color SlateBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source SlateGray Gets a system-defined color that has an ARGB value of #FF708090. Declaration public static readonly Color SlateGray { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Snow Gets a system-defined color that has an ARGB value of #FFFFFAFA. Declaration public static readonly Color Snow { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source SpringGreen Gets a system-defined color that has an ARGB value of #FF00FF7F. Declaration public static readonly Color SpringGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source SteelBlue Gets a system-defined color that has an ARGB value of #FF4682B4. Declaration public static readonly Color SteelBlue { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Tan Gets a system-defined color that has an ARGB value of #FFD2B48C. Declaration public static readonly Color Tan { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Teal Gets a system-defined color that has an ARGB value of #FF008080. Declaration public static readonly Color Teal { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Thistle Gets a system-defined color that has an ARGB value of #FFD8BFD8. Declaration public static readonly Color Thistle { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Tomato Gets a system-defined color that has an ARGB value of #FFFF6347. Declaration public static readonly Color Tomato { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Transparent Declaration public static readonly Color Transparent { get; } Property Value Type Description Color | Improve this Doc View Source Turquoise Gets a system-defined color that has an ARGB value of #FF40E0D0. Declaration public static readonly Color Turquoise { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Violet Gets a system-defined color that has an ARGB value of #FFEE82EE. Declaration public static readonly Color Violet { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Wheat Gets a system-defined color that has an ARGB value of #FFF5DEB3. Declaration public static readonly Color Wheat { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source White Gets a system-defined color that has an ARGB value of #FFFFFFFF. Declaration public static readonly Color White { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source WhiteSmoke Gets a system-defined color that has an ARGB value of #FFF5F5F5. Declaration public static readonly Color WhiteSmoke { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source Yellow Gets a system-defined color that has an ARGB value of #FFFFFF00. Declaration public static readonly Color Yellow { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. | Improve this Doc View Source YellowGreen Gets a system-defined color that has an ARGB value of #FF9ACD32. Declaration public static readonly Color YellowGreen { get; } Property Value Type Description Color A System.Drawing.Color representing a system-defined color. Methods | Improve this Doc View Source Equals(Color) Indicates whether the current object is equal to another object of the same type. Declaration public readonly bool Equals(Color other) Parameters Type Name Description Color other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to other; otherwise, false. | Improve this Doc View Source FromArgb(Int32) Creates a System.Drawing.Color structure from a 32-bit ARGB value. Declaration public static Color FromArgb(int argb) Parameters Type Name Description Int32 argb A value specifying the 32-bit ARGB value. Returns Type Description Color The System.Drawing.Color structure that this method creates. | Improve this Doc View Source FromArgb(Int32, Color) Creates a System.Drawing.Color structure from the specified System.Drawing.Color structure, but with the new specified alpha value. Although this method allows a 32-bit value to be passed for the alpha value, the value is limited to 8 bits. Declaration public static Color FromArgb(int alpha, Color baseColor) Parameters Type Name Description Int32 alpha The alpha value for the new System.Drawing.Color. Valid values are 0 through 255. Color baseColor The System.Drawing.Color from which to create the new System.Drawing.Color. Returns Type Description Color The System.Drawing.Color that this method creates. | Improve this Doc View Source FromArgb(Int32, Int32, Int32) Creates a System.Drawing.Color structure from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly 255 (fully opaque). Although this method allows a 32-bit value to be passed for each color component, the value of each component is limited to 8 bits. Declaration public static Color FromArgb(int r, int g, int b) Parameters Type Name Description Int32 r The red component value for the new System.Drawing.Color. Valid values are 0 through 255. Int32 g The green component value for the new System.Drawing.Color. Valid values are 0 through 255. Int32 b The blue component value for the new System.Drawing.Color. Valid values are 0 through 255. Returns Type Description Color The System.Drawing.Color structure that this method creates. | Improve this Doc View Source FromArgb(Int32, Int32, Int32, Int32) Creates a System.Drawing.Color structure from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly 255 (fully opaque). Although this method allows a 32-bit value to be passed for each color component, the value of each component is limited to 8 bits. Declaration public static Color FromArgb(int a, int r, int g, int b) Parameters Type Name Description Int32 a The alpha component value for the new System.Drawing.Color. Valid values are 0 through 255. Int32 r The red component value for the new System.Drawing.Color. Valid values are 0 through 255. Int32 g The green component value for the new System.Drawing.Color. Valid values are 0 through 255. Int32 b The blue component value for the new System.Drawing.Color. Valid values are 0 through 255. Returns Type Description Color The System.Drawing.Color structure that this method creates. | Improve this Doc View Source GetBrightness() Gets the hue-saturation-lightness (HSL) lightness value for this System.Drawing.Color structure. Declaration public readonly float GetBrightness() Returns Type Description Single The lightness of this System.Drawing.Color. The lightness ranges from 0.0 through 1.0, where 0.0 represents black and 1.0 represents white. | Improve this Doc View Source GetHashCode() Returns a hash code for this System.Drawing.Color structure. Declaration public override readonly int GetHashCode() Returns Type Description Int32 An integer value that specifies the hash code for this System.Drawing.Color. Overrides Object.GetHashCode() | Improve this Doc View Source GetHue() Gets the hue-saturation-lightness (HSL) hue value, in degrees, for this System.Drawing.Color structure. Declaration public readonly float GetHue() Returns Type Description Single The hue, in degrees, of this System.Drawing.Color. The hue is measured in degrees, ranging from 0.0 through 360.0, in HSL color space. | Improve this Doc View Source GetSaturation() Gets the hue-saturation-lightness (HSL) saturation value for this System.Drawing.Color structure. Declaration public readonly float GetSaturation() Returns Type Description Single The saturation of this System.Drawing.Color. The saturation ranges from 0.0 through 1.0, where 0.0 is grayscale and 1.0 is the most saturated. | Improve this Doc View Source ToArgb() Declaration public readonly int ToArgb() Returns Type Description Int32 Operators | Improve this Doc View Source Equality(Color, Color) Tests whether two specified System.Drawing.Color structures are equivalent. Declaration public static bool operator ==(Color left, Color right) Parameters Type Name Description Color left The System.Drawing.Color that is to the left of the equality operator. Color right Returns Type Description Boolean true if the two System.Drawing.Color structures are equal; otherwise, false. | Improve this Doc View Source Inequality(Color, Color) Tests whether two specified System.Drawing.Color structures are different. Declaration public static bool operator !=(Color left, Color right) Parameters Type Name Description Color left The System.Drawing.Color that is to the left of the inequality operator. Color right The System.Drawing.Color that is to the right of the inequality operator. Returns Type Description Boolean true if the two System.Drawing.Color structures are different; otherwise, false."
  },
  "devices/System.Drawing.html": {
    "href": "devices/System.Drawing.html",
    "title": "Namespace System.Drawing | nanoFramework Documentation",
    "keywords": "Namespace System.Drawing Structs Color Represents an ARGB (alpha, red, green, blue) color."
  },
  "devices/System.html": {
    "href": "devices/System.html",
    "title": "Namespace System | nanoFramework Documentation",
    "keywords": "Namespace System Structs SpanCharacter Provides a type- and memory-safe representation of a contiguous region of arbitrary array. SpanPinValue Provides a type- and memory-safe representation of a contiguous region of arbitrary array."
  },
  "devices/System.Numerics.html": {
    "href": "devices/System.Numerics.html",
    "title": "Namespace System.Numerics | nanoFramework Documentation",
    "keywords": "Namespace System.Numerics Structs Matrix3x2 A structure encapsulating a 3x2 matrix. Quaternion A structure encapsulating a four-dimensional vector (x,y,z,w), which is used to efficiently rotate an object about the (x,y,z) vector by the angle theta, where w = cos(theta/2). Vector2 A structure encapsulating two double values and provides hardware accelerated methods. Vector3 A structure encapsulating three doule values and provides hardware accelerated methods. Vector4 A structure encapsulating four doublevalues and provides hardware accelerated methods."
  },
  "devices/System.Numerics.Matrix3x2.html": {
    "href": "devices/System.Numerics.Matrix3x2.html",
    "title": "Struct Matrix3x2 | nanoFramework Documentation",
    "keywords": "Struct Matrix3x2 A structure encapsulating a 3x2 matrix. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System.Numerics Assembly : System.Numerics.dll Syntax public struct Matrix3x2 Constructors | Improve this Doc View Source Matrix3x2(Double, Double, Double, Double, Double, Double) Constructs a Matrix3x2 from the given components. Declaration public Matrix3x2(double m11, double m12, double m21, double m22, double m31, double m32) Parameters Type Name Description Double m11 Double m12 Double m21 Double m22 Double m31 Double m32 Fields | Improve this Doc View Source M11 The first element of the first row Declaration public double M11 Field Value Type Description Double | Improve this Doc View Source M12 The second element of the first row Declaration public double M12 Field Value Type Description Double | Improve this Doc View Source M21 The first element of the second row Declaration public double M21 Field Value Type Description Double | Improve this Doc View Source M22 The second element of the second row Declaration public double M22 Field Value Type Description Double | Improve this Doc View Source M31 The first element of the third row Declaration public double M31 Field Value Type Description Double | Improve this Doc View Source M32 The second element of the third row Declaration public double M32 Field Value Type Description Double Properties | Improve this Doc View Source Identity Returns the multiplicative identity matrix. Declaration public static readonly Matrix3x2 Identity { get; } Property Value Type Description Matrix3x2 | Improve this Doc View Source IsIdentity Returns whether the matrix is the identity matrix. Declaration public readonly bool IsIdentity { get; } Property Value Type Description Boolean | Improve this Doc View Source Translation Gets or sets the translation component of this matrix. Declaration public Vector2 Translation { get; set; } Property Value Type Description Vector2 Methods | Improve this Doc View Source Add(Matrix3x2, Matrix3x2) Adds each matrix element in value1 with its corresponding element in value2. Declaration public static Matrix3x2 Add(Matrix3x2 value1, Matrix3x2 value2) Parameters Type Name Description Matrix3x2 value1 The first source matrix. Matrix3x2 value2 The second source matrix. Returns Type Description Matrix3x2 The matrix containing the summed values. | Improve this Doc View Source CreateRotation(Double) Creates a rotation matrix using the given rotation in radians. Declaration public static Matrix3x2 CreateRotation(double radians) Parameters Type Name Description Double radians The amount of rotation, in radians. Returns Type Description Matrix3x2 A rotation matrix. | Improve this Doc View Source CreateRotation(Double, Vector2) Creates a rotation matrix using the given rotation in radians and a center point. Declaration public static Matrix3x2 CreateRotation(double radians, Vector2 centerPoint) Parameters Type Name Description Double radians The amount of rotation, in radians. Vector2 centerPoint The center point. Returns Type Description Matrix3x2 A rotation matrix. | Improve this Doc View Source CreateScale(Double) Creates a scale matrix that scales uniformly with the given scale. Declaration public static Matrix3x2 CreateScale(double scale) Parameters Type Name Description Double scale The uniform scale to use. Returns Type Description Matrix3x2 A scaling matrix. | Improve this Doc View Source CreateScale(Double, Double) Creates a scale matrix from the given X and Y components. Declaration public static Matrix3x2 CreateScale(double xScale, double yScale) Parameters Type Name Description Double xScale Value to scale by on the X-axis. Double yScale Value to scale by on the Y-axis. Returns Type Description Matrix3x2 A scaling matrix. | Improve this Doc View Source CreateScale(Double, Double, Vector2) Creates a scale matrix that is offset by a given center point. Declaration public static Matrix3x2 CreateScale(double xScale, double yScale, Vector2 centerPoint) Parameters Type Name Description Double xScale Value to scale by on the X-axis. Double yScale Value to scale by on the Y-axis. Vector2 centerPoint The center point. Returns Type Description Matrix3x2 A scaling matrix. | Improve this Doc View Source CreateScale(Double, Vector2) Creates a scale matrix that scales uniformly with the given scale with an offset from the given center. Declaration public static Matrix3x2 CreateScale(double scale, Vector2 centerPoint) Parameters Type Name Description Double scale The uniform scale to use. Vector2 centerPoint The center offset. Returns Type Description Matrix3x2 A scaling matrix. | Improve this Doc View Source CreateScale(Vector2) Creates a scale matrix from the given vector scale. Declaration public static Matrix3x2 CreateScale(Vector2 scales) Parameters Type Name Description Vector2 scales The scale to use. Returns Type Description Matrix3x2 A scaling matrix. | Improve this Doc View Source CreateScale(Vector2, Vector2) Creates a scale matrix from the given vector scale with an offset from the given center point. Declaration public static Matrix3x2 CreateScale(Vector2 scales, Vector2 centerPoint) Parameters Type Name Description Vector2 scales The scale to use. Vector2 centerPoint The center offset. Returns Type Description Matrix3x2 A scaling matrix. | Improve this Doc View Source CreateSkew(Double, Double) Creates a skew matrix from the given angles in radians. Declaration public static Matrix3x2 CreateSkew(double radiansX, double radiansY) Parameters Type Name Description Double radiansX The X angle, in radians. Double radiansY The Y angle, in radians. Returns Type Description Matrix3x2 A skew matrix. | Improve this Doc View Source CreateSkew(Double, Double, Vector2) Creates a skew matrix from the given angles in radians and a center point. Declaration public static Matrix3x2 CreateSkew(double radiansX, double radiansY, Vector2 centerPoint) Parameters Type Name Description Double radiansX The X angle, in radians. Double radiansY The Y angle, in radians. Vector2 centerPoint The center point. Returns Type Description Matrix3x2 A skew matrix. | Improve this Doc View Source CreateTranslation(Double, Double) Creates a translation matrix from the given X and Y components. Declaration public static Matrix3x2 CreateTranslation(double xPosition, double yPosition) Parameters Type Name Description Double xPosition The X position. Double yPosition The Y position. Returns Type Description Matrix3x2 A translation matrix. | Improve this Doc View Source CreateTranslation(Vector2) Creates a translation matrix from the given vector. Declaration public static Matrix3x2 CreateTranslation(Vector2 position) Parameters Type Name Description Vector2 position The translation position. Returns Type Description Matrix3x2 A translation matrix. | Improve this Doc View Source Equals(Matrix3x2) Returns a boolean indicating whether the matrix is equal to the other given matrix. Declaration public bool Equals(Matrix3x2 other) Parameters Type Name Description Matrix3x2 other The other matrix to test equality against. Returns Type Description Boolean True if this matrix is equal to other; False otherwise. | Improve this Doc View Source Equals(Object) Returns a boolean indicating whether the given Object is equal to this matrix instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare against. Returns Type Description Boolean True if the Object is equal to this matrix; False otherwise. Overrides ValueType.Equals(Object) | Improve this Doc View Source GetDeterminant() Calculates the determinant for this matrix. The determinant is calculated by expanding the matrix with a third column whose values are (0,0,1). Declaration public double GetDeterminant() Returns Type Description Double The determinant. | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code. Overrides Object.GetHashCode() | Improve this Doc View Source Invert(Matrix3x2, out Matrix3x2) Attempts to invert the given matrix. If the operation succeeds, the inverted matrix is stored in the result parameter. Declaration public static bool Invert(Matrix3x2 matrix, out Matrix3x2 result) Parameters Type Name Description Matrix3x2 matrix The source matrix. Matrix3x2 result The output matrix. Returns Type Description Boolean True if the operation succeeded, False otherwise. | Improve this Doc View Source Lerp(Matrix3x2, Matrix3x2, Double) Linearly interpolates from matrix1 to matrix2, based on the third parameter. Declaration public static Matrix3x2 Lerp(Matrix3x2 matrix1, Matrix3x2 matrix2, double amount) Parameters Type Name Description Matrix3x2 matrix1 The first source matrix. Matrix3x2 matrix2 The second source matrix. Double amount The relative weighting of matrix2. Returns Type Description Matrix3x2 The interpolated matrix. | Improve this Doc View Source Multiply(Matrix3x2, Double) Scales all elements in a matrix by the given scalar factor. Declaration public static Matrix3x2 Multiply(Matrix3x2 value1, double value2) Parameters Type Name Description Matrix3x2 value1 The source matrix. Double value2 The scaling value to use. Returns Type Description Matrix3x2 The resulting matrix. | Improve this Doc View Source Multiply(Matrix3x2, Matrix3x2) Multiplies two matrices together and returns the resulting matrix. Declaration public static Matrix3x2 Multiply(Matrix3x2 value1, Matrix3x2 value2) Parameters Type Name Description Matrix3x2 value1 The first source matrix. Matrix3x2 value2 The second source matrix. Returns Type Description Matrix3x2 The product matrix. | Improve this Doc View Source Negate(Matrix3x2) Negates the given matrix by multiplying all values by -1. Declaration public static Matrix3x2 Negate(Matrix3x2 value) Parameters Type Name Description Matrix3x2 value The source matrix. Returns Type Description Matrix3x2 The negated matrix. | Improve this Doc View Source Subtract(Matrix3x2, Matrix3x2) Subtracts each matrix element in value2 from its corresponding element in value1. Declaration public static Matrix3x2 Subtract(Matrix3x2 value1, Matrix3x2 value2) Parameters Type Name Description Matrix3x2 value1 The first source matrix. Matrix3x2 value2 The second source matrix. Returns Type Description Matrix3x2 The matrix containing the resulting values. | Improve this Doc View Source ToString() Returns a String representing this matrix instance. Declaration public override string ToString() Returns Type Description String The string representation. Overrides Object.ToString() Operators | Improve this Doc View Source Addition(Matrix3x2, Matrix3x2) Adds each matrix element in value1 with its corresponding element in value2. Declaration public static Matrix3x2 operator +(Matrix3x2 value1, Matrix3x2 value2) Parameters Type Name Description Matrix3x2 value1 The first source matrix. Matrix3x2 value2 The second source matrix. Returns Type Description Matrix3x2 The matrix containing the summed values. | Improve this Doc View Source Equality(Matrix3x2, Matrix3x2) Returns a boolean indicating whether the given matrices are equal. Declaration public static bool operator ==(Matrix3x2 value1, Matrix3x2 value2) Parameters Type Name Description Matrix3x2 value1 The first source matrix. Matrix3x2 value2 The second source matrix. Returns Type Description Boolean True if the matrices are equal; False otherwise. | Improve this Doc View Source Inequality(Matrix3x2, Matrix3x2) Returns a boolean indicating whether the given matrices are not equal. Declaration public static bool operator !=(Matrix3x2 value1, Matrix3x2 value2) Parameters Type Name Description Matrix3x2 value1 The first source matrix. Matrix3x2 value2 The second source matrix. Returns Type Description Boolean True if the matrices are not equal; False if they are equal. | Improve this Doc View Source Multiply(Matrix3x2, Double) Scales all elements in a matrix by the given scalar factor. Declaration public static Matrix3x2 operator *(Matrix3x2 value1, double value2) Parameters Type Name Description Matrix3x2 value1 The source matrix. Double value2 The scaling value to use. Returns Type Description Matrix3x2 The resulting matrix. | Improve this Doc View Source Multiply(Matrix3x2, Matrix3x2) Multiplies two matrices together and returns the resulting matrix. Declaration public static Matrix3x2 operator *(Matrix3x2 value1, Matrix3x2 value2) Parameters Type Name Description Matrix3x2 value1 The first source matrix. Matrix3x2 value2 The second source matrix. Returns Type Description Matrix3x2 The product matrix. | Improve this Doc View Source Subtraction(Matrix3x2, Matrix3x2) Subtracts each matrix element in value2 from its corresponding element in value1. Declaration public static Matrix3x2 operator -(Matrix3x2 value1, Matrix3x2 value2) Parameters Type Name Description Matrix3x2 value1 The first source matrix. Matrix3x2 value2 The second source matrix. Returns Type Description Matrix3x2 The matrix containing the resulting values. | Improve this Doc View Source UnaryNegation(Matrix3x2) Negates the given matrix by multiplying all values by -1. Declaration public static Matrix3x2 operator -(Matrix3x2 value) Parameters Type Name Description Matrix3x2 value The source matrix. Returns Type Description Matrix3x2 The negated matrix."
  },
  "devices/System.Numerics.Quaternion.html": {
    "href": "devices/System.Numerics.Quaternion.html",
    "title": "Struct Quaternion | nanoFramework Documentation",
    "keywords": "Struct Quaternion A structure encapsulating a four-dimensional vector (x,y,z,w), which is used to efficiently rotate an object about the (x,y,z) vector by the angle theta, where w = cos(theta/2). Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System.Numerics Assembly : System.Numerics.dll Syntax public struct Quaternion Constructors | Improve this Doc View Source Quaternion(Double, Double, Double, Double) Constructs a Quaternion from the given components. Declaration public Quaternion(double x, double y, double z, double w) Parameters Type Name Description Double x The X component of the Quaternion. Double y The Y component of the Quaternion. Double z The Z component of the Quaternion. Double w The W component of the Quaternion. | Improve this Doc View Source Quaternion(Vector3, Double) Constructs a Quaternion from the given vector and rotation parts. Declaration public Quaternion(Vector3 vectorPart, double scalarPart) Parameters Type Name Description Vector3 vectorPart The vector part of the Quaternion. Double scalarPart The rotation part of the Quaternion. Fields | Improve this Doc View Source W Specifies the rotation component of the Quaternion. Declaration public double W Field Value Type Description Double | Improve this Doc View Source X Specifies the X-value of the vector component of the Quaternion. Declaration public double X Field Value Type Description Double | Improve this Doc View Source Y Specifies the Y-value of the vector component of the Quaternion. Declaration public double Y Field Value Type Description Double | Improve this Doc View Source Z Specifies the Z-value of the vector component of the Quaternion. Declaration public double Z Field Value Type Description Double Properties | Improve this Doc View Source Identity Returns a Quaternion representing no rotation. Declaration public static readonly Quaternion Identity { get; } Property Value Type Description Quaternion | Improve this Doc View Source IsIdentity Returns whether the Quaternion is the identity Quaternion. Declaration public readonly bool IsIdentity { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Add(Quaternion, Quaternion) Adds two Quaternions element-by-element. Declaration public static Quaternion Add(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The first source Quaternion. Quaternion value2 The second source Quaternion. Returns Type Description Quaternion The result of adding the Quaternions. | Improve this Doc View Source Concatenate(Quaternion, Quaternion) Concatenates two Quaternions; the result represents the value1 rotation followed by the value2 rotation. Declaration public static Quaternion Concatenate(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The first Quaternion rotation in the series. Quaternion value2 The second Quaternion rotation in the series. Returns Type Description Quaternion A new Quaternion representing the concatenation of the value1 rotation followed by the value2 rotation. | Improve this Doc View Source Conjugate(Quaternion) Creates the conjugate of a specified Quaternion. Declaration public static Quaternion Conjugate(Quaternion value) Parameters Type Name Description Quaternion value The Quaternion of which to return the conjugate. Returns Type Description Quaternion A new Quaternion that is the conjugate of the specified one. | Improve this Doc View Source CreateFromAxisAngle(Vector3, Double) Creates a Quaternion from a vector and an angle to rotate about the vector. Declaration public static Quaternion CreateFromAxisAngle(Vector3 axis, double angle) Parameters Type Name Description Vector3 axis The vector to rotate around. Double angle The angle, in radians, to rotate around the vector. Returns Type Description Quaternion The created Quaternion. | Improve this Doc View Source CreateFromYawPitchRoll(Double, Double, Double) Creates a new Quaternion from the given yaw, pitch, and roll, in radians. Declaration public static Quaternion CreateFromYawPitchRoll(double yaw, double pitch, double roll) Parameters Type Name Description Double yaw The yaw angle, in radians, around the Y-axis. Double pitch The pitch angle, in radians, around the X-axis. Double roll The roll angle, in radians, around the Z-axis. Returns Type Description Quaternion | Improve this Doc View Source Divide(Quaternion, Quaternion) Divides a Quaternion by another Quaternion. Declaration public static Quaternion Divide(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The source Quaternion. Quaternion value2 The divisor. Returns Type Description Quaternion The result of the division. | Improve this Doc View Source Dot(Quaternion, Quaternion) Calculates the dot product of two Quaternions. Declaration public static double Dot(Quaternion quaternion1, Quaternion quaternion2) Parameters Type Name Description Quaternion quaternion1 The first source Quaternion. Quaternion quaternion2 The second source Quaternion. Returns Type Description Double The dot product of the Quaternions. | Improve this Doc View Source Equals(Quaternion) Returns a boolean indicating whether the given Quaternion is equal to this Quaternion instance. Declaration public bool Equals(Quaternion other) Parameters Type Name Description Quaternion other The Quaternion to compare this instance to. Returns Type Description Boolean True if the other Quaternion is equal to this instance; False otherwise. | Improve this Doc View Source Equals(Object) Returns a boolean indicating whether the given Object is equal to this Quaternion instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare against. Returns Type Description Boolean True if the Object is equal to this Quaternion; False otherwise. Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code. Overrides Object.GetHashCode() | Improve this Doc View Source Inverse(Quaternion) Returns the inverse of a Quaternion. Declaration public static Quaternion Inverse(Quaternion value) Parameters Type Name Description Quaternion value The source Quaternion. Returns Type Description Quaternion The inverted Quaternion. | Improve this Doc View Source Length() Calculates the length of the Quaternion. Declaration public double Length() Returns Type Description Double The computed length of the Quaternion. | Improve this Doc View Source LengthSquared() Calculates the length squared of the Quaternion. This operation is cheaper than Length(). Declaration public double LengthSquared() Returns Type Description Double The length squared of the Quaternion. | Improve this Doc View Source Lerp(Quaternion, Quaternion, Double) Linearly interpolates between two quaternions. Declaration public static Quaternion Lerp(Quaternion quaternion1, Quaternion quaternion2, double amount) Parameters Type Name Description Quaternion quaternion1 The first source Quaternion. Quaternion quaternion2 The second source Quaternion. Double amount The relative weight of the second source Quaternion in the interpolation. Returns Type Description Quaternion The interpolated Quaternion. | Improve this Doc View Source Multiply(Quaternion, Double) Multiplies a Quaternion by a scalar value. Declaration public static Quaternion Multiply(Quaternion value1, double value2) Parameters Type Name Description Quaternion value1 The source Quaternion. Double value2 The scalar value. Returns Type Description Quaternion The result of the multiplication. | Improve this Doc View Source Multiply(Quaternion, Quaternion) Multiplies two Quaternions together. Declaration public static Quaternion Multiply(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The Quaternion on the left side of the multiplication. Quaternion value2 The Quaternion on the right side of the multiplication. Returns Type Description Quaternion The result of the multiplication. | Improve this Doc View Source Negate(Quaternion) Flips the sign of each component of the quaternion. Declaration public static Quaternion Negate(Quaternion value) Parameters Type Name Description Quaternion value The source Quaternion. Returns Type Description Quaternion The negated Quaternion. | Improve this Doc View Source Normalize(Quaternion) Divides each component of the Quaternion by the length of the Quaternion. Declaration public static Quaternion Normalize(Quaternion value) Parameters Type Name Description Quaternion value The source Quaternion. Returns Type Description Quaternion The normalized Quaternion. | Improve this Doc View Source Slerp(Quaternion, Quaternion, Double) Interpolates between two quaternions, using spherical linear interpolation. Declaration public static Quaternion Slerp(Quaternion quaternion1, Quaternion quaternion2, double amount) Parameters Type Name Description Quaternion quaternion1 The first source Quaternion. Quaternion quaternion2 The second source Quaternion. Double amount The relative weight of the second source Quaternion in the interpolation. Returns Type Description Quaternion The interpolated Quaternion. | Improve this Doc View Source Subtract(Quaternion, Quaternion) Subtracts one Quaternion from another. Declaration public static Quaternion Subtract(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The first source Quaternion. Quaternion value2 The second Quaternion, to be subtracted from the first. Returns Type Description Quaternion The result of the subtraction. | Improve this Doc View Source ToString() Returns a String representing this Quaternion instance. Declaration public override string ToString() Returns Type Description String The string representation. Overrides Object.ToString() Operators | Improve this Doc View Source Addition(Quaternion, Quaternion) Adds two Quaternions element-by-element. Declaration public static Quaternion operator +(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The first source Quaternion. Quaternion value2 The second source Quaternion. Returns Type Description Quaternion The result of adding the Quaternions. | Improve this Doc View Source Division(Quaternion, Quaternion) Divides a Quaternion by another Quaternion. Declaration public static Quaternion operator /(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The source Quaternion. Quaternion value2 The divisor. Returns Type Description Quaternion The result of the division. | Improve this Doc View Source Equality(Quaternion, Quaternion) Returns a boolean indicating whether the two given Quaternions are equal. Declaration public static bool operator ==(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The first Quaternion to compare. Quaternion value2 The second Quaternion to compare. Returns Type Description Boolean True if the Quaternions are equal; False otherwise. | Improve this Doc View Source Inequality(Quaternion, Quaternion) Returns a boolean indicating whether the two given Quaternions are not equal. Declaration public static bool operator !=(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The first Quaternion to compare. Quaternion value2 The second Quaternion to compare. Returns Type Description Boolean True if the Quaternions are not equal; False if they are equal. | Improve this Doc View Source Multiply(Quaternion, Double) Multiplies a Quaternion by a scalar value. Declaration public static Quaternion operator *(Quaternion value1, double value2) Parameters Type Name Description Quaternion value1 The source Quaternion. Double value2 The scalar value. Returns Type Description Quaternion The result of the multiplication. | Improve this Doc View Source Multiply(Quaternion, Quaternion) Multiplies two Quaternions together. Declaration public static Quaternion operator *(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The Quaternion on the left side of the multiplication. Quaternion value2 The Quaternion on the right side of the multiplication. Returns Type Description Quaternion The result of the multiplication. | Improve this Doc View Source Subtraction(Quaternion, Quaternion) Subtracts one Quaternion from another. Declaration public static Quaternion operator -(Quaternion value1, Quaternion value2) Parameters Type Name Description Quaternion value1 The first source Quaternion. Quaternion value2 The second Quaternion, to be subtracted from the first. Returns Type Description Quaternion The result of the subtraction. | Improve this Doc View Source UnaryNegation(Quaternion) Flips the sign of each component of the quaternion. Declaration public static Quaternion operator -(Quaternion value) Parameters Type Name Description Quaternion value The source Quaternion. Returns Type Description Quaternion The negated Quaternion."
  },
  "devices/System.Numerics.Vector2.html": {
    "href": "devices/System.Numerics.Vector2.html",
    "title": "Struct Vector2 | nanoFramework Documentation",
    "keywords": "Struct Vector2 A structure encapsulating two double values and provides hardware accelerated methods. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System.Numerics Assembly : System.Numerics.dll Syntax public struct Vector2 Constructors | Improve this Doc View Source Vector2(Double) Constructs a vector whose elements are all the single specified value. Declaration public Vector2(double value) Parameters Type Name Description Double value The element to fill the vector with. | Improve this Doc View Source Vector2(Double, Double) Constructs a vector with the given individual elements. Declaration public Vector2(double x, double y) Parameters Type Name Description Double x The X component. Double y The Y component. Fields | Improve this Doc View Source X The X component of the vector. Declaration public double X Field Value Type Description Double | Improve this Doc View Source Y The Y component of the vector. Declaration public double Y Field Value Type Description Double Properties | Improve this Doc View Source One Returns the vector (1,1). Declaration public static readonly Vector2 One { get; } Property Value Type Description Vector2 | Improve this Doc View Source UnitX Returns the vector (1,0). Declaration public static readonly Vector2 UnitX { get; } Property Value Type Description Vector2 | Improve this Doc View Source UnitY Returns the vector (0,1). Declaration public static readonly Vector2 UnitY { get; } Property Value Type Description Vector2 | Improve this Doc View Source Zero Returns the vector (0,0). Declaration public static readonly Vector2 Zero { get; } Property Value Type Description Vector2 Methods | Improve this Doc View Source Abs(Vector2) Returns a vector whose elements are the absolute values of each of the source vector's elements. Declaration public static Vector2 Abs(Vector2 value) Parameters Type Name Description Vector2 value The source vector. Returns Type Description Vector2 The absolute value vector. | Improve this Doc View Source Add(Vector2, Vector2) Adds two vectors together. Declaration public static Vector2 Add(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Returns Type Description Vector2 The summed vector. | Improve this Doc View Source Clamp(Vector2, Vector2, Vector2) Restricts a vector between a min and max value. Declaration public static Vector2 Clamp(Vector2 value1, Vector2 min, Vector2 max) Parameters Type Name Description Vector2 value1 The source vector. Vector2 min The minimum value. Vector2 max The maximum value. Returns Type Description Vector2 | Improve this Doc View Source CopyTo(Double[]) Copies the contents of the vector into the given array. Declaration public void CopyTo(double[] array) Parameters Type Name Description Double [] array The destination array. | Improve this Doc View Source CopyTo(Double[], Int32) Copies the contents of the vector into the given array, starting from the given index. Declaration public void CopyTo(double[] array, int index) Parameters Type Name Description Double [] array Int32 index Exceptions Type Condition ArgumentNullException If array is null. ArgumentOutOfRangeException If index is greater than end of the array or index is less than zero. ArgumentException If number of elements in source vector is greater than those available in destination array or if there are not enough elements to copy. | Improve this Doc View Source Distance(Vector2, Vector2) Returns the Euclidean distance between the two given points. Declaration public static double Distance(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first point. Vector2 value2 The second point. Returns Type Description Double The distance. | Improve this Doc View Source DistanceSquared(Vector2, Vector2) Returns the Euclidean distance squared between the two given points. Declaration public static double DistanceSquared(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first point. Vector2 value2 The second point. Returns Type Description Double The distance squared. | Improve this Doc View Source Divide(Vector2, Double) Divides the vector by the given scalar. Declaration public static Vector2 Divide(Vector2 left, double divisor) Parameters Type Name Description Vector2 left The source vector. Double divisor The scalar value. Returns Type Description Vector2 The result of the division. | Improve this Doc View Source Divide(Vector2, Vector2) Divides the first vector by the second. Declaration public static Vector2 Divide(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Returns Type Description Vector2 The vector resulting from the division. | Improve this Doc View Source Dot(Vector2, Vector2) Returns the dot product of two vectors. Declaration public static double Dot(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first vector. Vector2 value2 The second vector. Returns Type Description Double The dot product. | Improve this Doc View Source Equals(Vector2) Returns a boolean indicating whether the given Vector2 is equal to this Vector2 instance. Declaration public bool Equals(Vector2 other) Parameters Type Name Description Vector2 other The Vector2 to compare this instance to. Returns Type Description Boolean True if the other Vector2 is equal to this instance; False otherwise. | Improve this Doc View Source Equals(Object) Returns a boolean indicating whether the given Object is equal to this Vector2 instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare against. Returns Type Description Boolean True if the Object is equal to this Vector2; False otherwise. Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code. Overrides Object.GetHashCode() | Improve this Doc View Source Length() Returns the length of the vector. Declaration public double Length() Returns Type Description Double The vector's length. | Improve this Doc View Source LengthSquared() Returns the length of the vector squared. This operation is cheaper than Length(). Declaration public double LengthSquared() Returns Type Description Double The vector's length squared. | Improve this Doc View Source Lerp(Vector2, Vector2, Double) Linearly interpolates between two vectors based on the given weighting. Declaration public static Vector2 Lerp(Vector2 value1, Vector2 value2, double amount) Parameters Type Name Description Vector2 value1 The first source vector. Vector2 value2 The second source vector. Double amount Value between 0 and 1 indicating the weight of the second source vector. Returns Type Description Vector2 The interpolated vector. | Improve this Doc View Source Max(Vector2, Vector2) Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors Declaration public static Vector2 Max(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first source vector Vector2 value2 The second source vector Returns Type Description Vector2 The maximized vector | Improve this Doc View Source Min(Vector2, Vector2) Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors. Declaration public static Vector2 Min(Vector2 value1, Vector2 value2) Parameters Type Name Description Vector2 value1 The first source vector. Vector2 value2 The second source vector. Returns Type Description Vector2 The minimized vector. | Improve this Doc View Source Multiply(Double, Vector2) Multiplies a vector by the given scalar. Declaration public static Vector2 Multiply(double left, Vector2 right) Parameters Type Name Description Double left The scalar value. Vector2 right The source vector. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Multiply(Vector2, Double) Multiplies a vector by the given scalar. Declaration public static Vector2 Multiply(Vector2 left, double right) Parameters Type Name Description Vector2 left The source vector. Double right The scalar value. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Multiply(Vector2, Vector2) Multiplies two vectors together. Declaration public static Vector2 Multiply(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Returns Type Description Vector2 The product vector. | Improve this Doc View Source Negate(Vector2) Negates a given vector. Declaration public static Vector2 Negate(Vector2 value) Parameters Type Name Description Vector2 value The source vector. Returns Type Description Vector2 The negated vector. | Improve this Doc View Source Normalize(Vector2) Returns a vector with the same direction as the given vector, but with a length of 1. Declaration public static Vector2 Normalize(Vector2 value) Parameters Type Name Description Vector2 value The vector to normalize. Returns Type Description Vector2 The normalized vector. | Improve this Doc View Source Reflect(Vector2, Vector2) Returns the reflection of a vector off a surface that has the specified normal. Declaration public static Vector2 Reflect(Vector2 vector, Vector2 normal) Parameters Type Name Description Vector2 vector The source vector. Vector2 normal The normal of the surface being reflected off. Returns Type Description Vector2 The reflected vector. | Improve this Doc View Source SquareRoot(Vector2) Returns a vector whose elements are the square root of each of the source vector's elements. Declaration public static Vector2 SquareRoot(Vector2 value) Parameters Type Name Description Vector2 value The source vector. Returns Type Description Vector2 The square root vector. | Improve this Doc View Source Subtract(Vector2, Vector2) Subtracts the second vector from the first. Declaration public static Vector2 Subtract(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Returns Type Description Vector2 The difference vector. | Improve this Doc View Source ToString() Returns a String representing this Vector2 instance. Declaration public override string ToString() Returns Type Description String The string representation. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Returns a String representing this Vector2 instance, using the specified format to format individual elements. Declaration public string ToString(string format) Parameters Type Name Description String format The format of individual elements. Returns Type Description String The string representation. | Improve this Doc View Source Transform(Vector2, Matrix3x2) Transforms a vector by the given matrix. Declaration public static Vector2 Transform(Vector2 position, Matrix3x2 matrix) Parameters Type Name Description Vector2 position The source vector. Matrix3x2 matrix The transformation matrix. Returns Type Description Vector2 The transformed vector. | Improve this Doc View Source Transform(Vector2, Quaternion) Transforms a vector by the given Quaternion rotation value. Declaration public static Vector2 Transform(Vector2 value, Quaternion rotation) Parameters Type Name Description Vector2 value The source vector to be rotated. Quaternion rotation The rotation to apply. Returns Type Description Vector2 The transformed vector. | Improve this Doc View Source TransformNormal(Vector2, Matrix3x2) Transforms a vector normal by the given matrix. Declaration public static Vector2 TransformNormal(Vector2 normal, Matrix3x2 matrix) Parameters Type Name Description Vector2 normal The source vector. Matrix3x2 matrix The transformation matrix. Returns Type Description Vector2 The transformed vector. Operators | Improve this Doc View Source Addition(Vector2, Vector2) Adds two vectors together. Declaration public static Vector2 operator +(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Returns Type Description Vector2 The summed vector. | Improve this Doc View Source Division(Vector2, Double) Divides the vector by the given scalar. Declaration public static Vector2 operator /(Vector2 value1, double value2) Parameters Type Name Description Vector2 value1 The source vector. Double value2 The scalar value. Returns Type Description Vector2 The result of the division. | Improve this Doc View Source Division(Vector2, Vector2) Divides the first vector by the second. Declaration public static Vector2 operator /(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Returns Type Description Vector2 The vector resulting from the division. | Improve this Doc View Source Equality(Vector2, Vector2) Returns a boolean indicating whether the two given vectors are equal. Declaration public static bool operator ==(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first vector to compare. Vector2 right The second vector to compare. Returns Type Description Boolean True if the vectors are equal; False otherwise. | Improve this Doc View Source Inequality(Vector2, Vector2) Returns a boolean indicating whether the two given vectors are not equal. Declaration public static bool operator !=(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first vector to compare. Vector2 right The second vector to compare. Returns Type Description Boolean True if the vectors are not equal; False if they are equal. | Improve this Doc View Source Multiply(Double, Vector2) Multiplies a vector by the given scalar. Declaration public static Vector2 operator *(double left, Vector2 right) Parameters Type Name Description Double left The scalar value. Vector2 right The source vector. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Multiply(Vector2, Double) Multiplies a vector by the given scalar. Declaration public static Vector2 operator *(Vector2 left, double right) Parameters Type Name Description Vector2 left The source vector. Double right The scalar value. Returns Type Description Vector2 The scaled vector. | Improve this Doc View Source Multiply(Vector2, Vector2) Multiplies two vectors together. Declaration public static Vector2 operator *(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Returns Type Description Vector2 The product vector. | Improve this Doc View Source Subtraction(Vector2, Vector2) Subtracts the second vector from the first. Declaration public static Vector2 operator -(Vector2 left, Vector2 right) Parameters Type Name Description Vector2 left The first source vector. Vector2 right The second source vector. Returns Type Description Vector2 The difference vector. | Improve this Doc View Source UnaryNegation(Vector2) Negates a given vector. Declaration public static Vector2 operator -(Vector2 value) Parameters Type Name Description Vector2 value The source vector. Returns Type Description Vector2 The negated vector."
  },
  "devices/System.Numerics.Vector3.html": {
    "href": "devices/System.Numerics.Vector3.html",
    "title": "Struct Vector3 | nanoFramework Documentation",
    "keywords": "Struct Vector3 A structure encapsulating three doule values and provides hardware accelerated methods. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System.Numerics Assembly : System.Numerics.dll Syntax public struct Vector3 Constructors | Improve this Doc View Source Vector3(Double) Constructs a vector whose elements are all the single specified value. Declaration public Vector3(double value) Parameters Type Name Description Double value The element to fill the vector with. | Improve this Doc View Source Vector3(Double, Double, Double) Constructs a vector with the given individual elements. Declaration public Vector3(double x, double y, double z) Parameters Type Name Description Double x The X component. Double y The Y component. Double z The Z component. | Improve this Doc View Source Vector3(Vector2, Double) Constructs a Vector3 from the given Vector2 and a third value. Declaration public Vector3(Vector2 value, double z) Parameters Type Name Description Vector2 value The Vector to extract X and Y components from. Double z The Z component. Fields | Improve this Doc View Source X The X component of the vector. Declaration public double X Field Value Type Description Double | Improve this Doc View Source Y The Y component of the vector. Declaration public double Y Field Value Type Description Double | Improve this Doc View Source Z The Z component of the vector. Declaration public double Z Field Value Type Description Double Properties | Improve this Doc View Source One Returns the vector (1,1,1). Declaration public static readonly Vector3 One { get; } Property Value Type Description Vector3 | Improve this Doc View Source UnitX Returns the vector (1,0,0). Declaration public static readonly Vector3 UnitX { get; } Property Value Type Description Vector3 | Improve this Doc View Source UnitZ Returns the vector (0,1,0). Declaration public static readonly Vector3 UnitZ { get; } Property Value Type Description Vector3 | Improve this Doc View Source Zero Returns the vector (0,0,0). Declaration public static readonly Vector3 Zero { get; } Property Value Type Description Vector3 Methods | Improve this Doc View Source Abs(Vector3) Returns a vector whose elements are the absolute values of each of the source vector's elements. Declaration public static Vector3 Abs(Vector3 value) Parameters Type Name Description Vector3 value The source vector. Returns Type Description Vector3 The absolute value vector. | Improve this Doc View Source Add(Vector3, Vector3) Adds two vectors together. Declaration public static Vector3 Add(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Returns Type Description Vector3 The summed vector. | Improve this Doc View Source Clamp(Vector3, Vector3, Vector3) Restricts a vector between a min and max value. Declaration public static Vector3 Clamp(Vector3 value1, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 value1 The source vector. Vector3 min The minimum value. Vector3 max The maximum value. Returns Type Description Vector3 The restricted vector. | Improve this Doc View Source CopyTo(Double[]) Copies the contents of the vector into the given array. Declaration public void CopyTo(double[] array) Parameters Type Name Description Double [] array | Improve this Doc View Source CopyTo(Double[], Int32) Copies the contents of the vector into the given array, starting from index. Declaration public void CopyTo(double[] array, int index) Parameters Type Name Description Double [] array Int32 index Exceptions Type Condition ArgumentNullException If array is null. ArgumentOutOfRangeException If index is greater than end of the array or index is less than zero. ArgumentException If number of elements in source vector is greater than those available in destination array. | Improve this Doc View Source Cross(Vector3, Vector3) Computes the cross product of two vectors. Declaration public static Vector3 Cross(Vector3 vector1, Vector3 vector2) Parameters Type Name Description Vector3 vector1 The first vector. Vector3 vector2 The second vector. Returns Type Description Vector3 The cross product. | Improve this Doc View Source Distance(Vector3, Vector3) Returns the Euclidean distance between the two given points. Declaration public static double Distance(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first point. Vector3 value2 The second point. Returns Type Description Double The distance. | Improve this Doc View Source DistanceSquared(Vector3, Vector3) Returns the Euclidean distance squared between the two given points. Declaration public static double DistanceSquared(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first point. Vector3 value2 The second point. Returns Type Description Double The distance squared. | Improve this Doc View Source Divide(Vector3, Double) Divides the vector by the given scalar. Declaration public static Vector3 Divide(Vector3 left, double divisor) Parameters Type Name Description Vector3 left The source vector. Double divisor The scalar value. Returns Type Description Vector3 The result of the division. | Improve this Doc View Source Divide(Vector3, Vector3) Divides the first vector by the second. Declaration public static Vector3 Divide(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Returns Type Description Vector3 The vector resulting from the division. | Improve this Doc View Source Dot(Vector3, Vector3) Returns the dot product of two vectors. Declaration public static double Dot(Vector3 vector1, Vector3 vector2) Parameters Type Name Description Vector3 vector1 The first vector. Vector3 vector2 The second vector. Returns Type Description Double The dot product. | Improve this Doc View Source Equals(Vector3) Returns a boolean indicating whether the given Vector3 is equal to this Vector3 instance. Declaration public bool Equals(Vector3 other) Parameters Type Name Description Vector3 other The Vector3 to compare this instance to. Returns Type Description Boolean True if the other Vector3 is equal to this instance; False otherwise. | Improve this Doc View Source Equals(Object) Returns a boolean indicating whether the given Object is equal to this Vector3 instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare against. Returns Type Description Boolean True if the Object is equal to this Vector3; False otherwise. Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code. Overrides Object.GetHashCode() | Improve this Doc View Source Length() Returns the length of the vector. Declaration public double Length() Returns Type Description Double The vector's length. | Improve this Doc View Source LengthSquared() Returns the length of the vector squared. This operation is cheaper than Length(). Declaration public double LengthSquared() Returns Type Description Double The vector's length squared. | Improve this Doc View Source Lerp(Vector3, Vector3, Double) Linearly interpolates between two vectors based on the given weighting. Declaration public static Vector3 Lerp(Vector3 value1, Vector3 value2, double amount) Parameters Type Name Description Vector3 value1 The first source vector. Vector3 value2 The second source vector. Double amount Value between 0 and 1 indicating the weight of the second source vector. Returns Type Description Vector3 The interpolated vector. | Improve this Doc View Source Max(Vector3, Vector3) Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors. Declaration public static Vector3 Max(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first source vector. Vector3 value2 The second source vector. Returns Type Description Vector3 The maximized vector. | Improve this Doc View Source Min(Vector3, Vector3) Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors. Declaration public static Vector3 Min(Vector3 value1, Vector3 value2) Parameters Type Name Description Vector3 value1 The first source vector. Vector3 value2 The second source vector. Returns Type Description Vector3 The minimized vector. | Improve this Doc View Source Multiply(Double, Vector3) Multiplies a vector by the given scalar. Declaration public static Vector3 Multiply(double left, Vector3 right) Parameters Type Name Description Double left The scalar value. Vector3 right The source vector. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Multiply(Vector3, Double) Multiplies a vector by the given scalar. Declaration public static Vector3 Multiply(Vector3 left, double right) Parameters Type Name Description Vector3 left The source vector. Double right The scalar value. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Multiply(Vector3, Vector3) Multiplies two vectors together. Declaration public static Vector3 Multiply(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Returns Type Description Vector3 The product vector. | Improve this Doc View Source Negate(Vector3) Negates a given vector. Declaration public static Vector3 Negate(Vector3 value) Parameters Type Name Description Vector3 value The source vector. Returns Type Description Vector3 The negated vector. | Improve this Doc View Source Normalize(Vector3) Returns a vector with the same direction as the given vector, but with a length of 1. Declaration public static Vector3 Normalize(Vector3 value) Parameters Type Name Description Vector3 value The vector to normalize. Returns Type Description Vector3 The normalized vector. | Improve this Doc View Source Reflect(Vector3, Vector3) Returns the reflection of a vector off a surface that has the specified normal. Declaration public static Vector3 Reflect(Vector3 vector, Vector3 normal) Parameters Type Name Description Vector3 vector The source vector. Vector3 normal The normal of the surface being reflected off. Returns Type Description Vector3 The reflected vector. | Improve this Doc View Source SquareRoot(Vector3) Returns a vector whose elements are the square root of each of the source vector's elements. Declaration public static Vector3 SquareRoot(Vector3 value) Parameters Type Name Description Vector3 value The source vector. Returns Type Description Vector3 The square root vector. | Improve this Doc View Source Subtract(Vector3, Vector3) Subtracts the second vector from the first. Declaration public static Vector3 Subtract(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Returns Type Description Vector3 The difference vector. | Improve this Doc View Source ToString() Returns a String representing this Vector3 instance. Declaration public override string ToString() Returns Type Description String The string representation. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Returns a String representing this Vector3 instance, using the specified format to format individual elements. Declaration public string ToString(string format) Parameters Type Name Description String format The format of individual elements. Returns Type Description String The string representation. | Improve this Doc View Source Transform(Vector3, Quaternion) Transforms a vector by the given Quaternion rotation value. Declaration public static Vector3 Transform(Vector3 value, Quaternion rotation) Parameters Type Name Description Vector3 value The source vector to be rotated. Quaternion rotation The rotation to apply. Returns Type Description Vector3 The transformed vector. Operators | Improve this Doc View Source Addition(Vector3, Vector3) Adds two vectors together. Declaration public static Vector3 operator +(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Returns Type Description Vector3 The summed vector. | Improve this Doc View Source Division(Vector3, Double) Divides the vector by the given scalar. Declaration public static Vector3 operator /(Vector3 value1, double value2) Parameters Type Name Description Vector3 value1 The source vector. Double value2 The scalar value. Returns Type Description Vector3 The result of the division. | Improve this Doc View Source Division(Vector3, Vector3) Divides the first vector by the second. Declaration public static Vector3 operator /(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Returns Type Description Vector3 The vector resulting from the division. | Improve this Doc View Source Equality(Vector3, Vector3) Returns a boolean indicating whether the two given vectors are equal. Declaration public static bool operator ==(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first vector to compare. Vector3 right The second vector to compare. Returns Type Description Boolean True if the vectors are equal; False otherwise. | Improve this Doc View Source Inequality(Vector3, Vector3) Returns a boolean indicating whether the two given vectors are not equal. Declaration public static bool operator !=(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first vector to compare. Vector3 right The second vector to compare. Returns Type Description Boolean True if the vectors are not equal; False if they are equal. | Improve this Doc View Source Multiply(Double, Vector3) Multiplies a vector by the given scalar. Declaration public static Vector3 operator *(double left, Vector3 right) Parameters Type Name Description Double left The scalar value. Vector3 right The source vector. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Multiply(Vector3, Double) Multiplies a vector by the given scalar. Declaration public static Vector3 operator *(Vector3 left, double right) Parameters Type Name Description Vector3 left The source vector. Double right The scalar value. Returns Type Description Vector3 The scaled vector. | Improve this Doc View Source Multiply(Vector3, Vector3) Multiplies two vectors together. Declaration public static Vector3 operator *(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Returns Type Description Vector3 The product vector. | Improve this Doc View Source Subtraction(Vector3, Vector3) Subtracts the second vector from the first. Declaration public static Vector3 operator -(Vector3 left, Vector3 right) Parameters Type Name Description Vector3 left The first source vector. Vector3 right The second source vector. Returns Type Description Vector3 The difference vector. | Improve this Doc View Source UnaryNegation(Vector3) Negates a given vector. Declaration public static Vector3 operator -(Vector3 value) Parameters Type Name Description Vector3 value The source vector. Returns Type Description Vector3 The negated vector."
  },
  "devices/System.Numerics.Vector4.html": {
    "href": "devices/System.Numerics.Vector4.html",
    "title": "Struct Vector4 | nanoFramework Documentation",
    "keywords": "Struct Vector4 A structure encapsulating four doublevalues and provides hardware accelerated methods. Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : System.Numerics Assembly : System.Numerics.dll Syntax public struct Vector4 Constructors | Improve this Doc View Source Vector4(Double) Constructs a vector whose elements are all the single specified value. Declaration public Vector4(double value) Parameters Type Name Description Double value The element to fill the vector with. | Improve this Doc View Source Vector4(Double, Double, Double, Double) Constructs a vector with the given individual elements. Declaration public Vector4(double x, double y, double z, double w) Parameters Type Name Description Double x X component. Double y Y component. Double z Z component. Double w W component. | Improve this Doc View Source Vector4(Vector2, Double, Double) Constructs a Vector4 from the given Vector2 and a Z and W component. Declaration public Vector4(Vector2 value, double z, double w) Parameters Type Name Description Vector2 value The vector to use as the X and Y components. Double z The Z component. Double w The W component. | Improve this Doc View Source Vector4(Vector3, Double) Constructs a Vector4 from the given Vector3 and a W component. Declaration public Vector4(Vector3 value, double w) Parameters Type Name Description Vector3 value The vector to use as the X, Y, and Z components. Double w The W component. Fields | Improve this Doc View Source W The W component of the vector. Declaration public double W Field Value Type Description Double | Improve this Doc View Source X The X component of the vector. Declaration public double X Field Value Type Description Double | Improve this Doc View Source Y The Y component of the vector. Declaration public double Y Field Value Type Description Double | Improve this Doc View Source Z The Z component of the vector. Declaration public double Z Field Value Type Description Double Properties | Improve this Doc View Source One Returns the vector (1,1,1,1). Declaration public static readonly Vector4 One { get; } Property Value Type Description Vector4 | Improve this Doc View Source UnitW Returns the vector (0,0,0,1). Declaration public static readonly Vector4 UnitW { get; } Property Value Type Description Vector4 | Improve this Doc View Source UnitX Returns the vector (1,0,0,0). Declaration public static readonly Vector4 UnitX { get; } Property Value Type Description Vector4 | Improve this Doc View Source UnitY Returns the vector (0,1,0,0). Declaration public static readonly Vector4 UnitY { get; } Property Value Type Description Vector4 | Improve this Doc View Source UnitZ Returns the vector (0,0,1,0). Declaration public static readonly Vector4 UnitZ { get; } Property Value Type Description Vector4 | Improve this Doc View Source Zero Returns the vector (0,0,0,0). Declaration public static readonly Vector4 Zero { get; } Property Value Type Description Vector4 Methods | Improve this Doc View Source Abs(Vector4) Returns a vector whose elements are the absolute values of each of the source vector's elements. Declaration public static Vector4 Abs(Vector4 value) Parameters Type Name Description Vector4 value The source vector. Returns Type Description Vector4 The absolute value vector. | Improve this Doc View Source Add(Vector4, Vector4) Adds two vectors together. Declaration public static Vector4 Add(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Returns Type Description Vector4 The summed vector. | Improve this Doc View Source Clamp(Vector4, Vector4, Vector4) Restricts a vector between a min and max value. Declaration public static Vector4 Clamp(Vector4 value1, Vector4 min, Vector4 max) Parameters Type Name Description Vector4 value1 The source vector. Vector4 min The minimum value. Vector4 max The maximum value. Returns Type Description Vector4 The restricted vector. | Improve this Doc View Source CopyTo(Double[]) Copies the contents of the vector into the given array. Declaration public void CopyTo(double[] array) Parameters Type Name Description Double [] array | Improve this Doc View Source CopyTo(Double[], Int32) Copies the contents of the vector into the given array, starting from index. Declaration public void CopyTo(double[] array, int index) Parameters Type Name Description Double [] array Int32 index Exceptions Type Condition ArgumentNullException If array is null. ArgumentOutOfRangeException If index is greater than end of the array or index is less than zero. ArgumentException If number of elements in source vector is greater than those available in destination array. | Improve this Doc View Source Distance(Vector4, Vector4) Returns the Euclidean distance between the two given points. Declaration public static double Distance(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first point. Vector4 value2 The second point. Returns Type Description Double The distance. | Improve this Doc View Source DistanceSquared(Vector4, Vector4) Returns the Euclidean distance squared between the two given points. Declaration public static double DistanceSquared(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first point. Vector4 value2 The second point. Returns Type Description Double The distance squared. | Improve this Doc View Source Divide(Vector4, Double) Divides the vector by the given scalar. Declaration public static Vector4 Divide(Vector4 left, double divisor) Parameters Type Name Description Vector4 left The source vector. Double divisor The scalar value. Returns Type Description Vector4 The result of the division. | Improve this Doc View Source Divide(Vector4, Vector4) Divides the first vector by the second. Declaration public static Vector4 Divide(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Returns Type Description Vector4 The vector resulting from the division. | Improve this Doc View Source Dot(Vector4, Vector4) Returns the dot product of two vectors. Declaration public static double Dot(Vector4 vector1, Vector4 vector2) Parameters Type Name Description Vector4 vector1 The first vector. Vector4 vector2 The second vector. Returns Type Description Double The dot product. | Improve this Doc View Source Equals(Vector4) Returns a boolean indicating whether the given Vector4 is equal to this Vector4 instance. Declaration public bool Equals(Vector4 other) Parameters Type Name Description Vector4 other The Vector4 to compare this instance to. Returns Type Description Boolean True if the other Vector4 is equal to this instance; False otherwise. | Improve this Doc View Source Equals(Object) Returns a boolean indicating whether the given Object is equal to this Vector4 instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare against. Returns Type Description Boolean True if the Object is equal to this Vector4; False otherwise. Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 The hash code. Overrides Object.GetHashCode() | Improve this Doc View Source Length() Returns the length of the vector. This operation is cheaper than Length(). Declaration public double Length() Returns Type Description Double The vector's length. | Improve this Doc View Source LengthSquared() Returns the length of the vector squared. Declaration public double LengthSquared() Returns Type Description Double The vector's length squared. | Improve this Doc View Source Lerp(Vector4, Vector4, Double) Linearly interpolates between two vectors based on the given weighting. Declaration public static Vector4 Lerp(Vector4 value1, Vector4 value2, double amount) Parameters Type Name Description Vector4 value1 The first source vector. Vector4 value2 The second source vector. Double amount Value between 0 and 1 indicating the weight of the second source vector. Returns Type Description Vector4 The interpolated vector. | Improve this Doc View Source Max(Vector4, Vector4) Returns a vector whose elements are the maximum of each of the pairs of elements in the two source vectors. Declaration public static Vector4 Max(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first source vector. Vector4 value2 The second source vector. Returns Type Description Vector4 The maximized vector. | Improve this Doc View Source Min(Vector4, Vector4) Returns a vector whose elements are the minimum of each of the pairs of elements in the two source vectors. Declaration public static Vector4 Min(Vector4 value1, Vector4 value2) Parameters Type Name Description Vector4 value1 The first source vector. Vector4 value2 The second source vector. Returns Type Description Vector4 The minimized vector. | Improve this Doc View Source Multiply(Double, Vector4) Multiplies a vector by the given scalar. Declaration public static Vector4 Multiply(double left, Vector4 right) Parameters Type Name Description Double left The scalar value. Vector4 right The source vector. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Multiply(Vector4, Double) Multiplies a vector by the given scalar. Declaration public static Vector4 Multiply(Vector4 left, double right) Parameters Type Name Description Vector4 left The source vector. Double right The scalar value. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Multiply(Vector4, Vector4) Multiplies two vectors together. Declaration public static Vector4 Multiply(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Returns Type Description Vector4 The product vector. | Improve this Doc View Source Negate(Vector4) Negates a given vector. Declaration public static Vector4 Negate(Vector4 value) Parameters Type Name Description Vector4 value The source vector. Returns Type Description Vector4 The negated vector. | Improve this Doc View Source Normalize(Vector4) Returns a vector with the same direction as the given vector, but with a length of 1. Declaration public static Vector4 Normalize(Vector4 vector) Parameters Type Name Description Vector4 vector The vector to normalize. Returns Type Description Vector4 The normalized vector. | Improve this Doc View Source SquareRoot(Vector4) Returns a vector whose elements are the square root of each of the source vector's elements. Declaration public static Vector4 SquareRoot(Vector4 value) Parameters Type Name Description Vector4 value The source vector. Returns Type Description Vector4 The square root vector. | Improve this Doc View Source Subtract(Vector4, Vector4) Subtracts the second vector from the first. Declaration public static Vector4 Subtract(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Returns Type Description Vector4 The difference vector. | Improve this Doc View Source ToString() Returns a String representing this Vector4 instance. Declaration public override string ToString() Returns Type Description String The string representation. Overrides Object.ToString() | Improve this Doc View Source ToString(String) Returns a String representing this Vector4 instance, using the specified format to format individual elements. Declaration public string ToString(string format) Parameters Type Name Description String format The format of individual elements. Returns Type Description String The string representation. | Improve this Doc View Source Transform(Vector2, Quaternion) Transforms a vector by the given Quaternion rotation value. Declaration public static Vector4 Transform(Vector2 value, Quaternion rotation) Parameters Type Name Description Vector2 value The source vector to be rotated. Quaternion rotation The rotation to apply. Returns Type Description Vector4 The transformed vector. | Improve this Doc View Source Transform(Vector3, Quaternion) Transforms a vector by the given Quaternion rotation value. Declaration public static Vector4 Transform(Vector3 value, Quaternion rotation) Parameters Type Name Description Vector3 value The source vector to be rotated. Quaternion rotation The rotation to apply. Returns Type Description Vector4 The transformed vector. | Improve this Doc View Source Transform(Vector4, Quaternion) Transforms a vector by the given Quaternion rotation value. Declaration public static Vector4 Transform(Vector4 value, Quaternion rotation) Parameters Type Name Description Vector4 value The source vector to be rotated. Quaternion rotation The rotation to apply. Returns Type Description Vector4 The transformed vector. Operators | Improve this Doc View Source Addition(Vector4, Vector4) Adds two vectors together. Declaration public static Vector4 operator +(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Returns Type Description Vector4 The summed vector. | Improve this Doc View Source Division(Vector4, Double) Divides the vector by the given scalar. Declaration public static Vector4 operator /(Vector4 value1, double value2) Parameters Type Name Description Vector4 value1 The source vector. Double value2 The scalar value. Returns Type Description Vector4 The result of the division. | Improve this Doc View Source Division(Vector4, Vector4) Divides the first vector by the second. Declaration public static Vector4 operator /(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Returns Type Description Vector4 The vector resulting from the division. | Improve this Doc View Source Equality(Vector4, Vector4) Returns a boolean indicating whether the two given vectors are equal. Declaration public static bool operator ==(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first vector to compare. Vector4 right The second vector to compare. Returns Type Description Boolean True if the vectors are equal; False otherwise. | Improve this Doc View Source Inequality(Vector4, Vector4) Returns a boolean indicating whether the two given vectors are not equal. Declaration public static bool operator !=(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first vector to compare. Vector4 right The second vector to compare. Returns Type Description Boolean True if the vectors are not equal; False if they are equal. | Improve this Doc View Source Multiply(Double, Vector4) Multiplies a vector by the given scalar. Declaration public static Vector4 operator *(double left, Vector4 right) Parameters Type Name Description Double left The scalar value. Vector4 right The source vector. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Multiply(Vector4, Double) Multiplies a vector by the given scalar. Declaration public static Vector4 operator *(Vector4 left, double right) Parameters Type Name Description Vector4 left The source vector. Double right The scalar value. Returns Type Description Vector4 The scaled vector. | Improve this Doc View Source Multiply(Vector4, Vector4) Multiplies two vectors together. Declaration public static Vector4 operator *(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Returns Type Description Vector4 The product vector. | Improve this Doc View Source Subtraction(Vector4, Vector4) Subtracts the second vector from the first. Declaration public static Vector4 operator -(Vector4 left, Vector4 right) Parameters Type Name Description Vector4 left The first source vector. Vector4 right The second source vector. Returns Type Description Vector4 The difference vector. | Improve this Doc View Source UnaryNegation(Vector4) Negates a given vector. Declaration public static Vector4 operator -(Vector4 value) Parameters Type Name Description Vector4 value The source vector. Returns Type Description Vector4 The negated vector."
  },
  "devices/System.SpanCharacter.html": {
    "href": "devices/System.SpanCharacter.html",
    "title": "Struct SpanCharacter | nanoFramework Documentation",
    "keywords": "Struct SpanCharacter Provides a type- and memory-safe representation of a contiguous region of arbitrary array. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : Iot.Device.Tm1637.dll Syntax [Serializable] [CLSCompliant(false)] [Serializable] [CLSCompliant(false)] public ref readonly struct SpanCharacter Constructors | Improve this Doc View Source SpanCharacter(Character[]) Creates a new Span object over the entirety of a specified array. Declaration public SpanCharacter(Character[] array) Parameters Type Name Description Character [] array The array from which to create the System.Span object. | Improve this Doc View Source SpanCharacter(Character[]) Creates a new Span object over the entirety of a specified array. Declaration public SpanCharacter(Character[] array) Parameters Type Name Description Character [] array The array from which to create the System.Span object. | Improve this Doc View Source SpanCharacter(Character[], Int32, Int32) Creates a new Span object that includes a specified number of elements of an array starting at a specified index. Declaration public SpanCharacter(Character[] array, int start, int length) Parameters Type Name Description Character [] array The source array. Int32 start The index of the first element to include in the new System.Span Int32 length The number of elements to include in the new System.Span Exceptions Type Condition ArgumentOutOfRangeException array is null, but start or length is non-zero. -or- start is outside the bounds of the array. -or- start and length exceeds the number of elements in the array. | Improve this Doc View Source SpanCharacter(Character[], Int32, Int32) Creates a new Span object that includes a specified number of elements of an array starting at a specified index. Declaration public SpanCharacter(Character[] array, int start, int length) Parameters Type Name Description Character [] array The source array. Int32 start The index of the first element to include in the new System.Span Int32 length The number of elements to include in the new System.Span Exceptions Type Condition ArgumentOutOfRangeException array is null, but start or length is non-zero. -or- start is outside the bounds of the array. -or- start and length exceeds the number of elements in the array. Properties | Improve this Doc View Source Empty Returns an empty System.Span object. Declaration public static readonly SpanCharacter Empty { get; } Property Value Type Description SpanCharacter | Improve this Doc View Source Empty Returns an empty System.Span object. Declaration public static readonly SpanCharacter Empty { get; } Property Value Type Description SpanCharacter | Improve this Doc View Source IsEmpty Returns a value that indicates whether the current System.Span is empty. true if the current span is empty; otherwise, false. Declaration public readonly bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source IsEmpty Returns a value that indicates whether the current System.Span is empty. true if the current span is empty; otherwise, false. Declaration public readonly bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Gets the element at the specified zero-based index. Declaration public readonly Character this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element. Property Value Type Description Character The element at the specified index. | Improve this Doc View Source Item[Int32] Gets the element at the specified zero-based index. Declaration public readonly Character this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element. Property Value Type Description Character The element at the specified index. | Improve this Doc View Source Length Returns the length of the current span. Declaration public readonly int Length { get; } Property Value Type Description Int32 | Improve this Doc View Source Length Returns the length of the current span. Declaration public readonly int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source CopyTo(SpanCharacter) Copies the contents of this System.Span into a destination System.Span. Declaration public readonly void CopyTo(SpanCharacter destination) Parameters Type Name Description SpanCharacter destination The destination System.Span object. Exceptions Type Condition ArgumentException destination is shorter than the source System.Span. | Improve this Doc View Source CopyTo(SpanCharacter) Copies the contents of this System.Span into a destination System.Span. Declaration public readonly void CopyTo(SpanCharacter destination) Parameters Type Name Description SpanCharacter destination The destination System.Span object. Exceptions Type Condition ArgumentException destination is shorter than the source System.Span. | Improve this Doc View Source Slice(Int32) Forms a slice out of the current span that begins at a specified index. Declaration public readonly SpanCharacter Slice(int start) Parameters Type Name Description Int32 start The index at which to begin the slice. Returns Type Description SpanCharacter A span that consists of all elements of the current span from start to the end of the span. Exceptions Type Condition ArgumentOutOfRangeException start is less than zero or greater than System.Span.Length. | Improve this Doc View Source Slice(Int32) Forms a slice out of the current span that begins at a specified index. Declaration public readonly SpanCharacter Slice(int start) Parameters Type Name Description Int32 start The index at which to begin the slice. Returns Type Description SpanCharacter A span that consists of all elements of the current span from start to the end of the span. Exceptions Type Condition ArgumentOutOfRangeException start is less than zero or greater than System.Span.Length. | Improve this Doc View Source Slice(Int32, Int32) Forms a slice out of the current span starting at a specified index for a specified length. Declaration public readonly SpanCharacter Slice(int start, int length) Parameters Type Name Description Int32 start The index at which to begin this slice. Int32 length The desired length for the slice. Returns Type Description SpanCharacter A span that consists of length elements from the current span starting at start. Exceptions Type Condition ArgumentOutOfRangeException start or start + length is less than zero or greater than System.Span.Length. | Improve this Doc View Source Slice(Int32, Int32) Forms a slice out of the current span starting at a specified index for a specified length. Declaration public readonly SpanCharacter Slice(int start, int length) Parameters Type Name Description Int32 start The index at which to begin this slice. Int32 length The desired length for the slice. Returns Type Description SpanCharacter A span that consists of length elements from the current span starting at start. Exceptions Type Condition ArgumentOutOfRangeException start or start + length is less than zero or greater than System.Span.Length. | Improve this Doc View Source ToArray() Copies the contents of this span into a new array. Declaration public readonly Character[] ToArray() Returns Type Description Character [] An array containing the data in the current span. | Improve this Doc View Source ToArray() Copies the contents of this span into a new array. Declaration public readonly Character[] ToArray() Returns Type Description Character [] An array containing the data in the current span. Operators | Improve this Doc View Source Implicit(Character[] to SpanCharacter) Declaration public static implicit operator SpanCharacter(Character[] array) Parameters Type Name Description Character [] array Returns Type Description SpanCharacter | Improve this Doc View Source Implicit(Character[] to SpanCharacter) Declaration public static implicit operator SpanCharacter(Character[] array) Parameters Type Name Description Character [] array Returns Type Description SpanCharacter"
  },
  "devices/System.SpanPinValue.html": {
    "href": "devices/System.SpanPinValue.html",
    "title": "Struct SpanPinValue | nanoFramework Documentation",
    "keywords": "Struct SpanPinValue Provides a type- and memory-safe representation of a contiguous region of arbitrary array. Inherited Members ValueType.Equals(Object) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Namespace : System Assembly : Iot.Device.KeyMatrix.dll Syntax [Serializable] [CLSCompliant(false)] public ref readonly struct SpanPinValue Constructors | Improve this Doc View Source SpanPinValue(PinValue[]) Creates a new Span object over the entirety of a specified array. Declaration public SpanPinValue(PinValue[] array) Parameters Type Name Description PinValue [] array The array from which to create the System.Span object. | Improve this Doc View Source SpanPinValue(PinValue[], Int32, Int32) Creates a new Span object that includes a specified number of elements of an array starting at a specified index. Declaration public SpanPinValue(PinValue[] array, int start, int length) Parameters Type Name Description PinValue [] array The source array. Int32 start The index of the first element to include in the new System.Span Int32 length The number of elements to include in the new System.Span Exceptions Type Condition ArgumentOutOfRangeException array is null, but start or length is non-zero. -or- start is outside the bounds of the array. -or- start and length exceeds the number of elements in the array. Properties | Improve this Doc View Source Empty Returns an empty System.Span object. Declaration public static readonly SpanPinValue Empty { get; } Property Value Type Description SpanPinValue | Improve this Doc View Source IsEmpty Returns a value that indicates whether the current System.Span is empty. true if the current span is empty; otherwise, false. Declaration public readonly bool IsEmpty { get; } Property Value Type Description Boolean | Improve this Doc View Source Item[Int32] Gets the element at the specified zero-based index. Declaration public readonly PinValue this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element. Property Value Type Description PinValue The element at the specified index. | Improve this Doc View Source Length Returns the length of the current span. Declaration public readonly int Length { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source CopyTo(SpanPinValue) Copies the contents of this System.Span into a destination System.Span. Declaration public readonly void CopyTo(SpanPinValue destination) Parameters Type Name Description SpanPinValue destination The destination System.Span object. Exceptions Type Condition ArgumentException destination is shorter than the source System.Span. | Improve this Doc View Source Slice(Int32) Forms a slice out of the current span that begins at a specified index. Declaration public readonly SpanPinValue Slice(int start) Parameters Type Name Description Int32 start The index at which to begin the slice. Returns Type Description SpanPinValue A span that consists of all elements of the current span from start to the end of the span. Exceptions Type Condition ArgumentOutOfRangeException start is less than zero or greater than System.Span.Length. | Improve this Doc View Source Slice(Int32, Int32) Forms a slice out of the current span starting at a specified index for a specified length. Declaration public readonly SpanPinValue Slice(int start, int length) Parameters Type Name Description Int32 start The index at which to begin this slice. Int32 length The desired length for the slice. Returns Type Description SpanPinValue A span that consists of length elements from the current span starting at start. Exceptions Type Condition ArgumentOutOfRangeException start or start + length is less than zero or greater than System.Span.Length. | Improve this Doc View Source ToArray() Copies the contents of this span into a new array. Declaration public readonly PinValue[] ToArray() Returns Type Description PinValue [] An array containing the data in the current span. Operators | Improve this Doc View Source Implicit(PinValue[] to SpanPinValue) Declaration public static implicit operator SpanPinValue(PinValue[] array) Parameters Type Name Description PinValue [] array Returns Type Description SpanPinValue"
  },
  "devicesdetails/AD5328/README.html": {
    "href": "devicesdetails/AD5328/README.html",
    "title": "AD5328 - Digital to Analog Convertor | nanoFramework Documentation",
    "keywords": "AD5328 - Digital to Analog Convertor AD5328 is an Digital-to-Analog converter (DAC) with 12 bits of resolution. Documentation Product information and documentation can he found here Usage Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. using System.Device.Spi; using System.Threading; using Iot.Device.DAC; using UnitsNet; var spisettings = new SpiConnectionSettings(1, 42) { Mode = SpiMode.Mode2 }; var spidev = SpiDevice.Create(spisettings); var dac = new AD5328(spidev, ElectricPotential.FromVolts(2.5), ElectricPotential.FromVolts(2.5)); Thread.Sleep(1000); dac.SetVoltage(0, ElectricPotential.FromVolts(1));"
  },
  "devicesdetails/Ads1115/README.html": {
    "href": "devicesdetails/Ads1115/README.html",
    "title": "ADS1115 - Analog to Digital Converter | nanoFramework Documentation",
    "keywords": "ADS1115 - Analog to Digital Converter ADS1115 is an Analog-to-Digital converter (ADC) with 16 bits of resolution. Documentation Prodcut datasheet can be found here Sensor Image Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. // set I2C bus ID: 1 // ADS1115 Addr Pin connect to GND I2cConnectionSettings settings = new I2cConnectionSettings(1, (int)I2cAddress.GND); I2cDevice device = I2cDevice.Create(settings); // pass in I2cDevice // measure the voltage AIN0 // set the maximum range to 6.144V using (Ads1115 adc = new Ads1115(device, InputMultiplexer.AIN0, MeasuringRange.FS6144)) { // read raw data form the sensor short raw = adc.ReadRaw(); // raw data convert to voltage double voltage = adc.RawToVoltage(raw); } See the samples project for more examples and usage for different applications. If you want to use the interrupt pin, the pulses generated by the ADS1115 might be to short to be properly recognized in the software, i.e. on a MCU. The schematic below shows a way of increasing the pulse length so that it is properly recognized (from about 10us to 150us). This uses discrete electronics, but an implementation with an NE555 or equivalent would likely work as well (Just note that you need a type that works at 3.3V). Example Hardware Required ADS1115 Rotary Potentiometer Male/Female Jumper Wires Circuit ADS1115 ADDR - GND SCL - SCL SDA - SDA VCC - 5V GND - GND A0 - Rotary Potentiometer Pin 2 Rotary Potentiometer Pin 1 - 5V Pin 2 - ADS1115 Pin A0 Pin 3 - GND Code // set I2C bus ID: 1 // ADS1115 Addr Pin connect to GND I2cConnectionSettings settings = new I2cConnectionSettings(1, (int)I2cAddress.GND); I2cDevice device = I2cDevice.Create(settings); // pass in I2cDevice // measure the voltage AIN0 // set the maximum range to 6.144V using (Ads1115 adc = new Ads1115(device, InputMultiplexer.AIN0, MeasuringRange.FS6144)) { // loop while (true) { // read raw data form the sensor short raw = adc.ReadRaw(); // raw data convert to voltage double voltage = adc.RawToVoltage(raw); Debug.WriteLine($\"ADS1115 Raw Data: {raw}\"); Debug.WriteLine($\"Voltage: {voltage}\"); Debug.WriteLine(); // wait for 2s Thread.Sleep(2000); } } Results"
  },
  "devicesdetails/Adxl345/README.html": {
    "href": "devicesdetails/Adxl345/README.html",
    "title": "ADXL345 - Accelerometer | nanoFramework Documentation",
    "keywords": "ADXL345 - Accelerometer ADXL345 is a small, thin, low power, 3-axis accelerometer with high resolution (13-bit) measurement at up to ±16g. Documentation In Chinese In English Sensor Image Usage Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. SpiConnectionSettings settings = new SpiConnectionSettings(1, 42) { ClockFrequency = Adxl345.SpiClockFrequency, Mode = Adxl345.SpiMode }; var device = SpiDevice.Create(settings); // set gravity measurement range ±4G using (Adxl345 sensor = new Adxl345(device, GravityRange.Range04)) { // read acceleration Vector3 data = sensor.Acceleration; //use sensor } Example Hardware Required ADXL345 Male/Female Jumper Wires Circuit VCC - 3.3 V GND - GND CS - CS SDO - SPI1 MISO SDA - SPI1 MOSI SCL - SPI1 SCLK Code SpiConnectionSettings settings = new SpiConnectionSettings(1, 42) { ClockFrequency = Adxl345.SpiClockFrequency, Mode = Adxl345.SpiMode }; var device = SpiDevice.Create(settings); // Set gravity measurement range ±4G using (Adxl345 sensor = new Adxl345(device, GravityRange.Range04)) { // loop while (true) { // read data Vector3 data = sensor.Acceleration; Debug.WriteLine($\"X: {data.X.ToString(\"0.00\")} g\"); Debug.WriteLine($\"Y: {data.Y.ToString(\"0.00\")} g\"); Debug.WriteLine($\"Z: {data.Z.ToString(\"0.00\")} g\"); Debug.WriteLine(); // wait for 500ms Thread.Sleep(500); } } Result"
  },
  "devicesdetails/Adxl357/README.html": {
    "href": "devicesdetails/Adxl357/README.html",
    "title": "ADXL357 - Accelerometer | nanoFramework Documentation",
    "keywords": "ADXL357 - Accelerometer ADXL357 is a 3-Axis digital accelerometer 40g with 20-bit resolution measurement at up to ±40g. Sensitivity is configurable (±10g, ±20g, ±40g). Has a built in temperature sensor. Documentation Product documentation can be found here Sensor Image Source: https://wiki.seeedstudio.com/Grove-3-Axis_Digital_Accelerometer_40g-ADXL357/ Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings i2CConnectionSettings = new I2cConnectionSettings(1, Adxl357.DefaultI2CAddress); I2cDevice device = I2cDevice.Create(i2CConnectionSettings); using Adxl357 sensor = new Adxl357(device, AccelerometerRange.Range40G); int calibrationBufferLength = 10; int calibrationInterval = 100; await sensor.CalibrateAccelerationSensor(calibrationBufferLength, calibrationInterval).ConfigureAwait(false); while (true) { // read data Vector3 data = sensor.Acceleration; Debug.WriteLine($\"X: {data.X.ToString(\"0.00\")} g\"); Debug.WriteLine($\"Y: {data.Y.ToString(\"0.00\")} g\"); Debug.WriteLine($\"Z: {data.Z.ToString(\"0.00\")} g\"); Debug.WriteLine(); // wait for 500ms Thread.Sleep(500); }"
  },
  "devicesdetails/Ags01db/README.html": {
    "href": "devicesdetails/Ags01db/README.html",
    "title": "AGS01DB - MEMS VOC Gas Sensor | nanoFramework Documentation",
    "keywords": "AGS01DB - MEMS VOC Gas Sensor AGS01DB is a MEMS VOC gas sensor with calibrated digital signal output. It uses special digital module acquisition technology and gas sensing technology to ensure that the product has high reliability and excellent long-term stability. Documentation Products page in English Datasheet in Chinese Sensor Image Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(1, Ags01db.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Ags01db sensor = new Ags01db(device)) { // read AGS01DB version byte version = sensor.Version; // read VOC concentration double concentration = sensor.Concentration; } Example Hardware Required AGS01DB 4.7kΩ resistance × 2 Male/Female Jumper Wires Circuit SCL - SCL SDA - SDA VCC - 5V GND - GND SDA, SCL need pull-up resistance. Code I2cConnectionSettings settings = new I2cConnectionSettings(1, Ags01db.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Ags01db sensor = new Ags01db(device)) { // read AGS01DB version Debug.WriteLine($\"Version: {sensor.Version}\"); Debug.WriteLine(); while (true) { // read concentration Debug.WriteLine($\"VOC Gas Concentration: {sensor.Concentration}ppm\"); Debug.WriteLine(); Thread.Sleep(3000); } } Result"
  },
  "devicesdetails/Ahtxx/README.html": {
    "href": "devicesdetails/Ahtxx/README.html",
    "title": "AHT10/15/20 - Temperature and humidity sensor modules | nanoFramework Documentation",
    "keywords": "AHT10/15/20 - Temperature and humidity sensor modules The AHT10/15 and AHT20 sensors are high-precision, calibrated temperature and relative humidity sensor modules with an I2C digital interface. Documentation Supported Devices The binding supports the following types: AHT10 AHT15 AHT20 Functions The binding supports the following sensor functions: acquiring the temperature and relative humidty readings reading status issueing calibration and reset commands Sensor classes You need to choose the class depending on the sensor type. Sensor Required class AHT10 Aht10 Aht15 Aht10 Aht20 Aht20 Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. The binding gets instantiated using an existing I2cDevice instance. The AHT-sensor modules support only the default I2C address. Setup for an AHT20 sensor module: const int I2cBus = 1; I2cConnectionSettings i2cSettings = new I2cConnectionSettings(I2cBus, Aht20.DefaultI2cAddress); I2cDevice i2cDevice = I2cDevice.Create(i2cSettings); Aht20 sensor = new Aht20(i2cDevice); The temperature and humidity readings are acquired by using the following methods: public Temperature GetTemperature() public Ratio GetHumidity() Refer to the sample application for a complete example. Wiring The AHTxx sensor is wired to the I2C interface (SDC/SDA) of the MCU. The sensor is supplied with 3.3V to comply with the 3.3V interface level of the MCU."
  },
  "devicesdetails/Ak8963/README.html": {
    "href": "devicesdetails/Ak8963/README.html",
    "title": "AK8963 - Magnetometer | nanoFramework Documentation",
    "keywords": "AK8963 - Magnetometer The AK8963 is a magnetometer that can be controlled either thru I2C either thru SPI. It is present in other sensors like the MPU9250 . This implementation fully supports the I2C mode and the usage thru the MPU9250. It does not support SPI. Documentation Documentation for the AK8963 can be found here Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. You can find an example in the sample directory. Usage is straight forward including the possibility to have a calibration. var mpui2CConnectionSettingmpus = new I2cConnectionSettings(1, Ak8963.Ak8963.DefaultI2cAddress); // This will use the default I2C interface Ak8963 ak8963 = new Ak8963(I2cDevice.Create(mpui2CConnectionSettingmpus)); if (!ak8963.CheckVersion()) throw new IOException($\"This device does not contain the correct signature 0x48 for a AK8963\"); while (true) { var magne = ak8963.ReadMagnetometer(true); Debug.WriteLine($\"Mag X = {magne.X, 15}\"); Debug.WriteLine($\"Mag Y = {magne.Y, 15}\"); Debug.WriteLine($\"Mag Z = {magne.Z, 15}\"); Thread.Sleep(100); } Calibration and bias You can get access to the self tests and calibration thru the CalibrateMagnetometer function which will return the bias calibration. Be aware that the calibration takes couple of seconds. var magBias = ak8963.CalibrateMagnetometer(); Debug.WriteLine($\"Factory Bias:\"); Debug.WriteLine($\"Mag X = {magBias.X}\"); Debug.WriteLine($\"Mag Y = {magBias.Y}\"); Debug.WriteLine($\"Mag Z = {magBias.Z}\"); Debug.WriteLine($\"Bias from calibration:\"); Debug.WriteLine($\"Mag X = {ak8963.MagnometerBias.X}\"); Debug.WriteLine($\"Mag Y = {ak8963.MagnometerBias.Y}\"); Debug.WriteLine($\"Mag Z = {ak8963.MagnometerBias.Z}\"); You will find a full example on how to extract raw data without calibration on the MPU9250 sample . If no calibration is performed, you will get a raw data cloud which looks like this: Running the calibration properly require to move the sensor in all the possible directions while performing the calibration. You should consider running it with enough samples, at least few hundreds. The default is set to 1000. While moving the sensor in all direction, far from any magnetic field, you will get the previous clouds. Calculating the average from those clouds and subtracting it from the read value will give you a centered cloud of data like this: To create those cloud point graphs, every cloud is a coordinate of X-Y, Y-Z and Z-X. Once the calibration is done, you will be able to read the data with the bias corrected using the ReadMagnetometer function. You will still be able to read the data without any calibration using the ReadMagnetometerWithoutCalibration function. Using a different I2C interface This sensor is used for example in the MPU9250 . The MPU9250 is in this case a master I2C controlling the secondary AK8963 I2C sensor. An abstract class is available to implement basic I2C operation: public abstract class Ak8963I2cBase { public abstract void WriteRegister(I2cDevice i2CDevice, Register reg, byte data); public abstract byte ReadByte(I2cDevice i2CDevice, Register reg); public abstract void ReadBytes(I2cDevice i2CDevice, Register reg, Span<byte> readBytes); } For example the I2C basic implementation is the following: public class Ak8963I2c : Ak8963I2cBase { public override byte ReadByte(I2cDevice i2cDevice, Register reg) { i2cDevice.WriteByte((byte)reg); return i2cDevice.ReadByte(); } public override void ReadBytes(I2cDevice i2cDevice, Register reg, Span<byte> readBytes) { i2cDevice.WriteByte((byte)reg); i2cDevice.Read(readBytes); } public override void WriteRegister(I2cDevice i2cDevice, Register reg, byte data) { Span<byte> dataout = stackalloc byte[] { (byte)reg, data }; i2cDevice.Write(dataout); } } The class embedded into the MPU9250 is more complex, for example here is the code to do the WriteRegister operation: public override void WriteRegister(I2cDevice i2cDevice, Ak8963.Register reg, byte data) { Span<byte> dataout = stackalloc byte[2] { (byte)Register.I2C_SLV0_ADDR, Ak8963.Ak8963.DefaultI2cAddress }; i2cDevice.Write(dataout); dataout[0] = (byte)Register.I2C_SLV0_REG; dataout[1] = (byte)reg; i2cDevice.Write(dataout); dataout[0] = (byte)Register.I2C_SLV0_DO; dataout[1] = data; i2cDevice.Write(dataout); dataout[0] = (byte)Register.I2C_SLV0_CTRL; dataout[1] = 0x81; i2cDevice.Write(dataout); } If you have to use a different I2C interface, you have to use the constructor where you can pass it: ak8963 = new Ak8963(_i2cDevice, new Ak8963Attached(), false); Circuit Only I2C is supported in this version. SCL - SCL SDA - SDA VCC - 3.3V GND - GND Depending on the version you have, you may have to select I2C over SPI. This is done in different way depending on the board you'll have."
  },
  "devicesdetails/Amg88xx/README.html": {
    "href": "devicesdetails/Amg88xx/README.html",
    "title": "AMG88xx Infrared Array Sensor Family | nanoFramework Documentation",
    "keywords": "AMG88xx Infrared Array Sensor Family The sensors of the AMG88xx family of infrared array sensors have 64 thermophile pixels arranged in an 8×8 matrix. The sensor works as a thermal infrared camera. It can detect objects (e.g. human bodies) from a distance of up 5-7m. A pixel can measure object temperatures in a range of 0 to 80°C / -20 to 100°C with a resolution of 0.25°C and an accuracy of ±2.5°C / ±4.5°C. The sensor has a view field angle of 60° and a 7.5° view angle per pixel. The manufacturer (Panasonic) names the following applications: home appliances (microwaves and air-conditioners), building automation (people counting, air conditioning control), home automation (people detection), factory automation (fault prevention). The sensor delivers a heat image through its digital interface (I2C) at a rate of 1 or 10 frames per second. Additionally an interrupt pin can raise an event when any individual pixel goes above or below a configured threshold. Documentation Product homepage Product flyer grid-eye_flyer_english_web.pdf Reference Specification FAQ Application note Device Family the AMG88 family consists of 4 members: Type Resolution Gain Vcc Obj. Temp. Range Resolution Accuracy AMG8833 8x8 High 3V3 0-80°C 0.25°C ±2.5°C AMG8834 8x8 Low 3V3 -20-100°C 0.25°C ±4.5°C AMG8853 8x8 High 5V0 0-80°C 0.25°C ±2.5°C AMG8854 8x8 Low 5V0 -20-100°C 0.25°C ±4.5°C The sensor is equipped with an on-chip thermistor which can be read out. The thermistor has a measurement range of -20...80°C at a resolution of 0.0625°C. Binding Notes The Amg88xx binding provides a lean interface to retrieve the pixel array and to control the sensor. All sensor functions are covered. Any further processing, e.g. pattern recognition, is beyond the scope of the binding. Thermal image / Pixel array The temperature readings of the pixel array can be read as a thermal image with 64 pixels arranged in an 8x8 matrix. The pixel array can be read out at any time and speed. However, the sensor updates the corresponding registers depending on the configured frame rate. The sensor has an integrated thermistor which can be readout to get the chip temperature. Note: The chip temperature does not equal to the environmental temperature. The current image can be read from the sensor into the binding by: public void ReadImage() The temperature of a pixel specified by its coordinates can be read using an indexer: public Temperature this[int x, int y] The whole temperature image can be read as a two-dimensional array: public Temperature[,] TemperatureImage The raw reading (12-bit two's complement format) of a pixel specified by its number can be read using an indexer: public Int16 this[int n] Note : there is no statement in the reference specification regarding the synchronization between an update of the pixel registers and the readout operation. So, you may read out pixel data from two subsequent frames in one readout operation. However, for normal application this shouldn't be relevant. Property: public Temperature SensorTemperature Note : the thermistor temperature is not equivalent to the Operating Mode / Power Control The sensor supports four operating modes to control power consumption: Normal Sleep Mode Stand-by with 60 seconds intermittence Stand-by with 10 seconds intermittence Property: public OperatingMode OperatingMode Note : refer to the reference specification for further details on mode transitions and sensor behavior. Reset The sensor supports two types of resets. Reset: Resets all flags and registers to default values Resetting all flags: Resets all flags (status register, interrupt flag, interrupt table) public void Reset() public void ResetAllFlags() Note : resetting the interrupt related flags is only required if you want to clear flags while the readings are still within the hysteresis span. See interrupts section for further details on interrupt behavior. Sensor Status The sensor status indicates if any pixel or the chip internal thermistor overran the upper or lower operating range limit. It also flags on the occurrence of an interrupt. The status can be read out and reset per flag: public bool HasTemperatureOverflow(); public void ClearTemperatureOverflow(); public bool HasThermistorOverflow(); public void ClearThermistorOverflow(); public bool HasInterrupt(); public void ClearInterrupt(); public void ClearAllFlags(); Note : resetting the interrupt flag is only required if you want to clear flags while the readings are still within the hysteresis span (but already within the lower-upper range). This method does not clear the interrupt flags of the individual pixels. See interrupts section for further details on interrupt behavior. Note : the thermistor overflow flag is only menthioned in early versions of the reference specification. It is not clear whether this is a specification error or a change in a newer revision of the sensor. Frame Rate Default: 10fps The sensor supports frame rates of 1fps and 10fps. The frame rate defines the update interval of the pixels. This is independent from the readout interval through the I2C interface. Property: public FrameRate FrameRate Moving average Default: off The sensor supports a moving average mode. In this mode it builds the twice moving average for each pixel. If the frame rate is set to 10fps the sensor takes the average of the readings n and n+1 and yields their average as output. If the frame rate is set to 1fps the sensor takes the readings of 10 frames (as the sensor runs internally always at 10fps) and builds the average. The average of two averages of 10 readings is the resulting output. The noise per pixel will decrease to 1/sqrt2 when using the moving average mode. Property: public bool UseMovingAverageMode Important : the reference specification states that the current mode can be read, but it doesn't seem to work at the time being. In this case the property is always read as false . Interrupt control, levels and pixel flags The sensor can raise an interrupt if any pixel passes a given value. The event is signaled by the interrupt flag of the status register. Additionally the INT pin of the sensor can be pulled low. Properties: public InterruptMode PixelTemperatureInterruptMode public bool InterruptPinEnabled The interrupt levels can be configured. The lower and upper limit as well as the hysteresis level can be set and read. Initially the register is filled with zeros. The levels apply to all pixels equally. Properties: public Temperature InterruptLowerLevel public Temperature InterruptUpperLevel public Temperature InterruptHysteresis After the sensor raised an interrupt the triggering pixels can be readout from the interrupt table register. public bool[,] GetInterruptFlagTable() Interrupt levels and hysteresis Note: be aware that the interrupt flag in the status register is reset automatically if no pixel temperature exceeds the lower or upper threshold. It is not required to reset the flag manually. any flag in the interrupt flag table is automatically reset if the corresponding pixel is no long exceed the lower or upper threshold. if a hysteresis is applied and the reading of a pixel is not passing the threshold anymore, while at the same time the reading is still within the hysteresis span, the interrupt flag can be cleared by using the ResetAllFlags method. Example Overview The sample application demonstrates the key functions of the sensor and the binding: thermal image readout interrupt triggering based on temperature levels incl. hysteresis sensor states noise reduction by using the sensor's moving average function There are AMG88xx breakout boards available from a variety of vendors. You can use any of them as long as it provides access to the I2C interface of the sensor. Note: There are also boards available with additional interfaces or even with an integrated Arduino or compatible circuit. You can use this binding only if the boards gives you access to the I2C interface only. Wiring For demonstration purpose the INT-pin of the sensor is connected to a valid GPIO PIN of the MCU. Additionally an LED is connected to another valid GPIO PIN of the MCU. The LED signals the occurrence of an interrupt. The resistor depends on the LED type; however 150R-220R is a safe choice for a standard red LED. Or precisely: R = (3,3V - U LED,forward) / I LED, forward"
  },
  "devicesdetails/Apa102/README.html": {
    "href": "devicesdetails/Apa102/README.html",
    "title": "APA102 - Double line transmission integrated control LED | nanoFramework Documentation",
    "keywords": "APA102 - Double line transmission integrated control LED APA102 is a intelligent control LED light source that the control circuit and RGB chip are integrated in a package of 5050/2020 components. It internal include 3 groups shift register and Selfdetection sign decoder circuit. It's different from WS2812. In addition to the data line, it has a clock line. So APA102 has no strict requirements for timing. It's more friendly to devices such as Raspberry Pi that can't precisely control the timing of data lines. There are other models like APA107, HD107s, SK9822, etc. The controls are exactly the same. Model SCLK PWM APA102 20 MHz 20 kHz APA107 30 MHz 9 kHz HD107s 40 MHz 27 kHz SK9822 15 MHz 4.7 kHz Documentation APA102 SK9822 Compare SK6822 WS2813 APA102 SK9822 LED Difference between APA102, APA107,HD107s and SK9822 Usage Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. Here is an example how to use the APA102: using System; using System.Device.Spi; using System.Drawing; using System.Threading; using Iot.Device.Apa102; var random = new Random(); using SpiDevice spiDevice = SpiDevice.Create(new SpiConnectionSettings(1, 42) { ClockFrequency = 20_000_000, DataFlow = DataFlow.MsbFirst, Mode = SpiMode.Mode0 // ensure data is ready at clock rising edge }); using Apa102 apa102 = new Apa102(spiDevice, 16); while (true) { for (var i = 0; i < apa102.Pixels.Length; i++) { apa102.Pixels[i] = Color.FromArgb(255, random.Next(256), random.Next(256), random.Next(256)); } apa102.Flush(); Thread.Sleep(1000); }"
  },
  "devicesdetails/At24C128C/README.html": {
    "href": "devicesdetails/At24C128C/README.html",
    "title": "AT24C128C - I2C EEPROM read/write | nanoFramework Documentation",
    "keywords": "AT24C128C - I2C EEPROM read/write This binding is used used to read and write data via I2C from the external EEPROM memory. Documentation Datasheet Original code was written for MIMXRT1060 Evaluation Board by BusKetZz busketz2k@gmail.com Usage using System.Diagnostics; using System.Text; using System.Threading; using Iot.Device.At24C128C; At24C128C eeprom = new(0x50, 1); string message = \"Hello from MIMXRT1060!\"; byte[] messageToSent = Encoding.UTF8.GetBytes(message); ushort memoryAddress = 0x0; eeprom.Write(memoryAddress, messageToSent); Thread.Sleep(100); byte[] receivedData = eeprom.Read(memoryAddress, message.Length); string dataConvertedToString = System.Text.Encoding.UTF8.GetString(receivedData, 0, receivedData.Length); Debug.WriteLine($\"Message read from EEPROM: {dataConvertedToString}\");"
  },
  "devicesdetails/Axp192/README.html": {
    "href": "devicesdetails/Axp192/README.html",
    "title": "AXP192 - Enhanced single Cell Li-Battery and Power System Management IC | nanoFramework Documentation",
    "keywords": "AXP192 - Enhanced single Cell Li-Battery and Power System Management IC Documentation -Product documentation can be found here . -Registers can be found here (Chineese only, note: bing translator make miracle). This sensor is used in the M5Stick . Initialization code for this device can be found here . Usage // Make sure you configure properly the I2C pins, here example for ESP32 Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); I2cDevice i2cAxp192 = new(new I2cConnectionSettings(1, Axp192.I2cDefaultAddress)); Axp192 power = new Axp192(i2cAxp192); Important : make sure you read th documentation of your battery and setup the proper charging values, stop current. Overcharging your battery may damage it. Using the button One button is available and can be setup to track short and long press: // This part of the code will handle the button behavior power.EnableButtonPressed(ButtonPressed.LongPressed | ButtonPressed.ShortPressed); power.SetButtonBehavior(LongPressTiming.S2, ShortPressTiming.Ms128, true, SignalDelayAfterPowerUp.Ms32, ShutdownTiming.S10); The status is kept in the registers up to the next status read. You can then have both a short and a long press, you can get the status like this: var status = power.GetButtonStatus(); if ((status & ButtonPressed.ShortPressed) == ButtonPressed.ShortPressed) { Debug.WriteLine(\"Short press\"); } else if ((status & ButtonPressed.LongPressed) == ButtonPressed.LongPressed) { Debug.WriteLine(\"Long press\"); } Battery status You can get various elements regarding the battery status: Debug.WriteLine($\"Battery:\"); Debug.WriteLine($\" Charge curr : {power.GetBatteryChargeCurrent().Milliamperes} mA\"); Debug.WriteLine($\" Status : {power.GetBatteryChargingStatus()}\"); Debug.WriteLine($\" Dicharge curr: {power.GetBatteryDischargeCurrent().Milliamperes} mA\"); Debug.WriteLine($\" Inst Power : {power.GetBatteryInstantaneousPower().Milliwatts} mW\"); Debug.WriteLine($\" Voltage : {power.GetBatteryVoltage().Volts} V\"); Debug.WriteLine($\" Is battery : {power.IsBatteryConnected()} \"); Advanced features The AXP192 can charge the battery, get and set charging current, cut off voltage, has protection for temperature. Most feature can be access or setup. You can check out the sample to get more details on how to set those advance features. Note: this binding uses UnitsNet for the units like Voltage, Amperes. Here is an example reading the current, voltage: Debug.WriteLine($\"Temperature : {power.GetInternalTemperature().DegreesCelsius} °C\"); Debug.WriteLine($\"Input:\"); // Note: the current and voltage will show 0 when plugged into USB. // To see something else than 0, you should output those data on a serial port for example // Or display on the screen. Debug.WriteLine($\" Current : {power.GetInputCurrent().Milliamperes} mA\"); Debug.WriteLine($\" Voltage : {power.GetInputVoltage().Volts} V\"); Debug.WriteLine($\" Status : {power.GetInputPowerStatus()}\"); Debug.WriteLine($\" USB volt : {power.GetUsbVoltageInput().Volts} V\"); Debug.WriteLine($\" USB Curr : {power.GetUsbCurrentInput().Milliamperes} mA\"); Coulomb counter The AXP192 has a Coulomb counter where the value is in mili Amperes per hour (this one is not yet using UnitsNet). You first have to enable the Counter and then you can read the value. It is recommended to let some time between the moment you enable and read the data. Features to reset, stop the count are available as well power.EnableCoulombCounter(); // Do something here // You can then read periodically the Coulomb counter: Debug.WriteLine($\"Coulomb: {power.GetCoulomb()} mA/h\");"
  },
  "devicesdetails/Bh1745/README.html": {
    "href": "devicesdetails/Bh1745/README.html",
    "title": "Bh1745 - RGB Sensor | nanoFramework Documentation",
    "keywords": "Bh1745 - RGB Sensor The Bh1745 is a digital color sensor able to detect 3 distinct channels of light (red, green, blue) and is most suitable to obtain the illuminance and color temperature of ambient light. The device can detect light intensity in a range of 0.005 to 40 000 lux. Documentation Datasheet of the Bh1745 Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. 2 examples on how to use this device binding are available in the samples folder . The quality of the color measurements is very reliant on the lighting. For accurate color readings it is advisable to calibrate the sensor on first use and to use it under stable lighting conditions. Some breakout boards come with built in LEDs for this purpose (some of the API functionality may also have been repurposed to control these LEDs). Basic usage: using System; using System.Device.I2c; using System.Threading; using Iot.Device.Bh1745; // bus id on the MCU const int busId = 1; // create device I2cConnectionSettings i2cSettings = new(busId, Bh1745.DefaultI2cAddress); using I2cDevice i2cDevice = I2cDevice.Create(i2cSettings); using Bh1745 i2cBh1745 = new Bh1745(i2cDevice); // wait for first measurement Thread.Sleep(i2cBh1745.MeasurementTimeAsTimeSpan()); while (true) { var color = i2cBh1745.GetCompensatedColor(); Debug.WriteLine(\"RGB color read: #{0:X2}{1:X2}{2:X2}\", color.R, color.G, color.B); Debug.WriteLine($\"Raw illumination value: {i2cBh1745.ReadClearDataRegister()}\"); Thread.Sleep(i2cBh1745.MeasurementTimeAsTimeSpan()); } Advance usage with configuration: // bus id on the MCU const int busId = 1; // create device var i2cSettings = new I2cConnectionSettings(busId, Bh1745.DefaultI2cAddress); var i2cDevice = I2cDevice.Create(i2cSettings); using Bh1745 i2cBh1745 = new Bh1745(i2cDevice) { // multipliers affect the compensated values // ChannelCompensationMultipliers: Red, Green, Blue, Clear ChannelCompensationMultipliers = new(2.5, 0.9, 1.9, 9.5), // set custom measurement time MeasurementTime = MeasurementTime.Ms1280, // interrupt functionality is detailed in the datasheet // Reference: https://www.mouser.co.uk/datasheet/2/348/bh1745nuc-e-519994.pdf (page 13) LowerInterruptThreshold = 0xABFF, HigherInterruptThreshold = 0x0A10, LatchBehavior = LatchBehavior.LatchEachMeasurement, InterruptPersistence = InterruptPersistence.UpdateMeasurementEnd, InterruptIsEnabled = true, }; // wait for first measurement Thread.Sleep(i2cBh1745.MeasurementTimeAsTimeSpan()); while (true) { var color = i2cBh1745.GetCompensatedColor(); if (!i2cBh1745.ReadMeasurementIsValid()) { Debug.WriteLine(\"Measurement was not valid!\"); continue; } Debug.WriteLine(\"RGB color read: #{0:X2}{1:X2}{2:X2}\", color.R, color.G, color.B); Debug.WriteLine($\"Raw illumination value: {i2cBh1745.ReadClearDataRegister()}\"); Thread.Sleep(i2cBh1745.MeasurementTimeAsTimeSpan()); }"
  },
  "devicesdetails/Bh1750fvi/README.html": {
    "href": "devicesdetails/Bh1750fvi/README.html",
    "title": "BH1750FVI - Ambient Light Sensor | nanoFramework Documentation",
    "keywords": "BH1750FVI - Ambient Light Sensor BH1750FVI is an digital Ambient Light Sensor IC for I2C bus interface. This IC is the most suitable to obtain the ambient light data for adjusting LCD and Keypad backlight power of Mobile phone. It is possible to detect wide range at High resolution. Documentation Product datasheet can be found here Sensor Image Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(busId: 1, (int)I2cAddress.AddPinLow); I2cDevice device = I2cDevice.Create(settings); using (Bh1750fvi sensor = new Bh1750fvi(device)) { // read illuminance(Lux) double illuminance = sensor.Illuminance; } Circuit SCL - SCL SDA - SDA VCC - 5V GND - GND ADDR - GND Result of the sample:"
  },
  "devicesdetails/Bmm150/README.html": {
    "href": "devicesdetails/Bmm150/README.html",
    "title": "Bmm150 - Magnetometer | nanoFramework Documentation",
    "keywords": "Bmm150 - Magnetometer The Bmm150 is a magnetometer that can be controlled either thru I2C either thru SPI. This implementation was tested in a ESP32 platform, specificaly in a M5Stack Gray . Documentation Documentation for the Bmm150 can be found here Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. You can find an example in the sample directory. Usage is straight forward including the possibility to have a calibration. // The I2C pins 21 and 22 in the sample below are ESP32 specific and may differ from other platforms. // Please double check your device datasheet. Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); I2cConnectionSettings mpui2CConnectionSettingmpus = new(1, Bmm150.DefaultI2cAddress); using Bmm150 bmm150 = new Bmm150(I2cDevice.Create(mpui2CConnectionSettingmpus)); Debug.WriteLine($\"Please move your device in all directions...\"); bmm150.CalibrateMagnetometer(); Debug.WriteLine($\"Calibration completed.\"); while (true) { Vector3 magne = bmm150.ReadMagnetometer(true, TimeSpan.FromMilliseconds(11)); var head_dir = Math.Atan2(magne.X, magne.Y) * 180.0 / Math.PI; Debug.WriteLine($\"Mag data: X={magne.X,15}, Y={magne.Y,15}, Z={magne.Z,15}, head_dir: {head_dir}\"); Thread.Sleep(100); } Expected output Please move your device in all directions... Calibration completed. Mag data: X= 32.97089767, Y= -10.99029922, Z= -27.41439819, head_dir: 108.43494945 Mag data: X= 38.83239364, Y= -10.62395668, Z= -22.2116661, head_dir: 105.30084201 Mag data: X= 43.96039581, Y= -8.4257431, Z= 4.60182046, head_dir: 100.85010634 Mag data: X= 42.49582672, Y= -8.059553146, Z= 9.0047292709, head_dir: 100.7388972 Mag data: X= 42.86371994, Y= -12.8224802, Z= 8.20643711, head_dir: 106.65430547 Mag data: X= 36.26864242, Y= -6.22794914, Z= -21.41402244, head_dir: 99.74364301 Mag data: X= 29.30693054, Y= -9.89108943, Z= -32.21274185, head_dir: 108.6495335 Mag data: X= 15.75333309, Y= -8.42620182, Z= -37.029045104, head_dir: 118.14159082 Mag data: X= 4.7626357, Y= -6.22806167, Z= -42.23312759, head_dir: 142.59463794 Mag data: X= -4.39627885, Y= -6.59441852, Z= -36.22841644, head_dir: -146.309933 Mag data: X= -10.25779819, Y= -5.12889909, Z= -38.62528991, head_dir: -116.56504656 Mag data: X= -19.050889968, Y= 0.73272651, Z= -37.033847808, head_dir: -87.7974031 Mag data: X= -35.90294647, Y= 1.46542632, Z= -18.61460113, head_dir: -87.66269127 Mag data: X= -37.73472976, Y= 8.42620182, Z= -13.41051959, head_dir: -77.41230537 Mag data: X= -37.73472976, Y= 9.52527141, Z= -12.20957756, head_dir: -75.83294707 Mag data: X= -18.31749725, Y= 0.73269987, Z= -31.42057418, head_dir: -87.70938928 Mag data: X= -2.19813942, Y= -7.69348812, Z= -37.029045104, head_dir: -164.054600542 Calibration You can get access perfom calibration thru the CalibrateMagnetometer function which will. Be aware that the calibration takes a few seconds. bmm150.CalibrateMagnetometer(); If no calibration is performed, you will get a raw data cloud which looks like this: Running the calibration properly require to move the sensor in all the possible directions while performing the calibration. You should consider running it with enough samples, at least few hundreds. The default is set to 100. While moving the sensor in all direction, far from any magnetic field, you will get the previous clouds. Calculating the average from those clouds and subtracting it from the read value will give you a centered cloud of data like this: To create those cloud point graphs, every cloud is a coordinate of X-Y, Y-Z and Z-X. Once the calibration is done, you will be able to read the data with the bias corrected using the ReadMagnetometer function. You will still be able to read the data without any calibration using the ReadMagnetometerWithoutCalibration function. Not supported/implemented features of the Bmm150 Device Self-Tests Device Reset Toggle operation modes (defaults to normal mode) Testing Unit tests project is in \\Bmm150.tests. You can use VS2019 built-in test capabilites as follows: [TestMethod] public void TestCompensateVector3() { uint rhall = 42; Vector3 rawMagnetormeterData = new Vector3 { X = 13.91375923, Y = -28.74289894, Z = 10.16711997 }; Bmm150TrimRegisterData trimRegisterData = new Bmm150TrimRegisterData() { DigX1 = 0, DigX2 = 26, DigXy1 = 29, DigXy2 = -3, DigXyz1 = 7053, DigY1 = 0, DigY2 = 26, DigZ1 = 24747, DigZ2 = 763, DigZ3 = 0, DigZ4 = 0 }; double x = Bmm150Compensation.CompensateX(rawMagnetormeterData.X, rhall, trimRegisterData); double y = Bmm150Compensation.CompensateY(rawMagnetormeterData.Y, rhall, trimRegisterData); double z = Bmm150Compensation.CompensateZ(rawMagnetormeterData.Z, rhall, trimRegisterData); // Calculated value should be: -1549.91882323 Assert.Equal(Math.Ceiling(x), Math.Ceiling(-1549.918823), \"Unexpected x-axis value.\"); // Calculated value should be: 3201.80615234 Assert.Equal(Math.Ceiling(y), Math.Ceiling(3201.80615234), \"Unexpected y-axis value.\"); // Calculated value should be: 26.20077896 Assert.Equal(Math.Ceiling(z), Math.Ceiling(26.20077896), \"Unexpected z-axis value.\"); } Notes The BMI160 embedd this BMM150."
  },
  "devicesdetails/Bmp180/README.html": {
    "href": "devicesdetails/Bmp180/README.html",
    "title": "BMP180 - barometer, altitude and temperature sensor | nanoFramework Documentation",
    "keywords": "BMP180 - barometer, altitude and temperature sensor BMP180 is a device that read barometric pressure, altitude and temperature. I2C can be used to communicate with the device. Documentation Datasheet for the BMP180. Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. An example on how to use this device binding is available in the samples folder. // bus id on the MCU const int busId = 1; I2cConnectionSettings i2cSettings = new(busId, Bmp180.DefaultI2cAddress); using I2cDevice i2cDevice = I2cDevice.Create(i2cSettings); using Bmp180 i2cBmp280 = new(i2cDevice); // set samplings i2cBmp280.SetSampling(Sampling.Standard); // read values Temperature tempValue = i2cBmp280.ReadTemperature(); Debug.WriteLine($\"Temperature: {tempValue.DegreesCelsius:0.#}\\u00B0C\"); Pressure preValue = i2cBmp280.ReadPressure(); Debug.WriteLine($\"Pressure: {preValue.Hectopascals:0.##}hPa\"); // Note that if you already have the pressure value and the temperature, you could also calculate altitude by // calling WeatherHelper.CalculateAltitude(preValue, Pressure.MeanSeaLevel, tempValue) which would be more performant. Length altValue = i2cBmp280.ReadAltitude(WeatherHelper.MeanSeaLevel); Debug.WriteLine($\"Altitude: {altValue:0.##}m\"); Thread.Sleep(1000); // set higher sampling i2cBmp280.SetSampling(Sampling.UltraLowPower); // read values tempValue = i2cBmp280.ReadTemperature(); Debug.WriteLine($\"Temperature: {tempValue.DegreesCelsius:0.#}\\u00B0C\"); preValue = i2cBmp280.ReadPressure(); Debug.WriteLine($\"Pressure: {preValue.Hectopascals:0.##}hPa\"); // Note that if you already have the pressure value and the temperature, you could also calculate altitude by // calling WeatherHelper.CalculateAltitude(preValue, Pressure.MeanSeaLevel, tempValue) which would be more performant. altValue = i2cBmp280.ReadAltitude(WeatherHelper.MeanSeaLevel); Debug.WriteLine($\"Altitude: {altValue:0.##}m\"); The following fritzing diagram illustrates one way to wire up the BMP180 with an MCU like ESP32 using I2C."
  },
  "devicesdetails/Bmxx80/README.html": {
    "href": "devicesdetails/Bmxx80/README.html",
    "title": "BMxx80 Device Family | nanoFramework Documentation",
    "keywords": "BMxx80 Device Family BMxx80 is a device family that senses temperature, barometric pressure, altitude, humidity and VOC gas. SPI and I2C can be used to communicate with the device (only I2C implemented so far). Documentation The implementation supports the following devices: BMP280 temperature and barometric pressure sensor ( Datasheet ) BME280 temperature, barometric pressure and humidity sensor ( Datasheet ) BME680 temperature, barometric pressure, humidity and VOC gas sensor ( Datasheet ) Usage BME280 Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. // bus id on the MCU const int busId = 1; I2cConnectionSettings i2cSettings = new(busId, Bme280.DefaultI2cAddress); using I2cDevice i2cDevice = I2cDevice.Create(i2cSettings); using Bme280 bme80 = new Bme280(i2cDevice) { // set higher sampling TemperatureSampling = Sampling.LowPower, PressureSampling = Sampling.UltraHighResolution, HumiditySampling = Sampling.Standard, }; // Perform a synchronous measurement var readResult = bme80.Read(); // Note that if you already have the pressure value and the temperature, you could also calculate altitude by using // var altValue = WeatherHelper.CalculateAltitude(preValue, defaultSeaLevelPressure, tempValue) which would be more performant. bme80.TryReadAltitude(defaultSeaLevelPressure, out var altValue); Debug.WriteLine($\"Temperature: {readResult.Temperature?.DegreesCelsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Pressure: {readResult.Pressure?.Hectopascals:0.##}hPa\"); Debug.WriteLine($\"Altitude: {altValue.Meters:0.##}m\"); Debug.WriteLine($\"Relative humidity: {readResult.Humidity?.Percent:0.#}%\"); BMP680 // The I2C bus ID on the MCU const int busId = 1; I2cConnectionSettings i2cSettings = new(busId, Bme680.DefaultI2cAddress); I2cDevice i2cDevice = I2cDevice.Create(i2cSettings); using Bme680 bme680 = new Bme680(i2cDevice, Temperature.FromDegreesCelsius(20.0)); // reset will change settings back to default bme680.Reset(); // Perform a synchronous measurement var readResult = bme680.Read(); // Print out the measured data Debug.WriteLine($\"Gas resistance: {readResult.GasResistance?.Ohms:0.##}Ohm\"); Debug.WriteLine($\"Temperature: {readResult.Temperature?.DegreesCelsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Pressure: {readResult.Pressure?.Hectopascals:0.##}hPa\"); Debug.WriteLine($\"Relative humidity: {readResult.Humidity?.Percent:0.#}%\"); BMP280 // bus id on the MCU const int busId = 1; I2cConnectionSettings i2cSettings = new(busId, Bmp280.DefaultI2cAddress); I2cDevice i2cDevice = I2cDevice.Create(i2cSettings); using var i2CBmp280 = new Bmp280(i2cDevice); // set higher sampling i2CBmp280.TemperatureSampling = Sampling.LowPower; i2CBmp280.PressureSampling = Sampling.UltraHighResolution; // Perform a synchronous measurement var readResult = i2CBmp280.Read(); // Print out the measured data Debug.WriteLine($\"Temperature: {readResult.Temperature?.DegreesCelsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Pressure: {readResult.Pressure?.Hectopascals:0.##}hPa\"); You also have 3 examples on how to use this device binding are available in the samples folder. The following fritzing diagram illustrates one way to wire up the BMP280 with an MCU like ESP32 using I2C: General: Bmp280 MCU Vin Power pin GND Ground I2C: Bmp280 MCU SCK I2C clock pin SDI I2C data pin Connection Type The following connection types are supported by this binding. [X] I2C [ ] SPI"
  },
  "devicesdetails/Bno055/README.html": {
    "href": "devicesdetails/Bno055/README.html",
    "title": "BNO055 - inertial measurement unit | nanoFramework Documentation",
    "keywords": "BNO055 - inertial measurement unit Those sensors are intelligent 9-axis absolute orientation sensors. Most of the implementations are using I2C sensors but the sensor supports as well HID over I2C and serial port communication. This class only supports I2C. All operations for a current usage has been developed. The individual interruption level settings for each sensor has not been implemented. If needed, they are quite straight forward to implement. Documentation BNO055 datasheet You will find this device as \"Inertial Measurement Unit\" or \"Adafruit BNO055 Absolute Orientation Sensor\" Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Create a Bno055Sensor class and pass the I2C device. The default I2C address is provided in the class. I2cDevice i2cDevice = I2cDevice.Create(new I2cConnectionSettings(1, Bno055Sensor.DefaultI2cAddress)); Bno055Sensor bno055Sensor = new Bno055Sensor(i2cDevice); Debug.WriteLine($\"Id: {bno055Sensor.Info.ChipId}, AccId: {bno055Sensor.Info.AcceleratorId}, GyroId: {bno055Sensor.Info.GyroscopeId}, MagId: {bno055Sensor.Info.MagnetometerId}\"); Debug.WriteLine($\"Firmware version: {bno055Sensor.Info.FirmwareVersion}, Bootloader: {bno055Sensor.Info.BootloaderVersion}\"); Debug.WriteLine($\"Temperature source: {bno055Sensor.TemperatureSource}, Operation mode: {bno055Sensor.OperationMode}, Units: {bno055Sensor.Units}\"); Debug.WriteLine($\"Powermode: {bno055Sensor.PowerMode}\"); You can easily access the sensor information and settings thru the properties. Calibration To get accurate measurement, it is better to wait for the Magnetometer to calibrate. As in your phone, when the calibration is needed, it is necessary to move the sensor in the air to help for the calibration. The following code shows how to check the calibration: Debug.WriteLine(\"Checking the magnetometer calibration, move the sensor up to the calibration will be complete if needed\"); var calibrationStatus = bno055Sensor.GetCalibrationStatus(); while ((calibrationStatus & CalibrationStatus.MagnetometerSuccess) != (CalibrationStatus.MagnetometerSuccess)) { Debug.Write($\".\"); calibrationStatus = bno055Sensor.GetCalibrationStatus(); Thread.Sleep(200); } Debug.WriteLine(); Debug.WriteLine(\"Calibration completed\"); Please note that it is not really necessary to check the calibration of the other sensors and the system. The qualibraiton is done all the time. The important one is the Magnetometer. Accessing sensor data Simply access the various sensor data thru their properties. Note that it is better to read at once the data and then display them, or manipulate them rather than accessing the sub element every time. The reason is because in the first case, you'll do 1 measurement and the data will be consistent, in the second case, you'll do 1 measurement every time you access 1 sub property which means, the data will be inconsistent. Wrong way: // Data will be inconsistent in this case! // Do not access the data like this Debug.WriteLine($\"Magnetometer X: {bno055Sensor.Magnetometer.X} Y: {bno055Sensor.Magnetometer.Y} Z: {bno055Sensor.Magnetometer.Z}\"); Good way: // First read and store the data var magneto = bno055Sensor.Magnetometer; // Then manipulate the data Debug.WriteLine($\"Magnetometer X: {magneto.X} Y: {magneto.Y} Z: {magneto.Z}\"); The sensor offers 9-axis measurement. Here is an example showing all the sensor properties you can access: while(true) { var magneto = bno055Sensor.Magnetometer; Debug.WriteLine($\"Magnetometer X: {magneto.X} Y: {magneto.Y} Z: {magneto.Z}\"); var gyro = bno055Sensor.Gyroscope; Debug.WriteLine($\"Gyroscope X: {gyro.X} Y: {gyro.Y} Z: {gyro.Z}\"); var accele = bno055Sensor.Accelerometer; Debug.WriteLine($\"Acceleration X: {accele.X} Y: {accele.Y} Z: {accele.Z}\"); var orien = bno055Sensor.Orientation; Debug.WriteLine($\"Orientation Heading: {orien.X} Roll: {orien.Y} Pitch: {orien.Z}\"); var line = bno055Sensor.LinearAcceleration; Debug.WriteLine($\"Linear acceleration X: {line.X} Y: {line.Y} Z: {line.Z}\"); var gravity = bno055Sensor.Gravity; Debug.WriteLine($\"Gravity X: {gravity.X} Y: {gravity.Y} Z: {gravity.Z}\"); var qua = bno055Sensor.Quaternion; Debug.WriteLine($\"Quaternion X: {qua.X} Y: {qua.Y} Z: {qua.Z} W: {qua.W}\"); var temp = bno055Sensor.Temperature.Celsius; Debug.WriteLine($\"Temperature: {temp} °C\"); Thread.Sleep(100); } Information regarding sensors and units Orientation : Absolute Orientation (Euler Vector, 100Hz) Three axis orientation data based on a 360° sphere Heading = Vector3.X; Roll = Vector3.Y; Pitch = Vector3.Z Units availabel are Degrees (default) or Radians, you can change with bno055Sensor.Units = bno055Sensor.Units | Units.EulerAnglesRadians; Quaternion Absolute Orientation (Quaterion, 100Hz) Four point quaternion output for more accurate data manipulation Unit is 1 Quaternion = 2^14 returned data Magnetometer Magnetic Field Strength Vector (20Hz) Three axis of magnetic field sensing in micro Tesla (uT) Acceleration Acceleration Vector (100Hz) Three axis of acceleration (gravity + linear motion) Default unit in m/s^2, can be changed for mg LinearAcceleration Linear Acceleration Vector (100Hz) Three axis of linear acceleration data (acceleration minus gravity) Default unit in m/s^2, can be changed for mg Gravity Gravity Vector (100Hz) Three axis of gravitational acceleration (minus any movement) Default unit in m/s^2, can be changed for mg Gyroscope Angular Velocity Vector (100Hz) Three axis of 'rotation speed' Default unit is Degree per second but can be changed to Radian per second Temperature Temperature (1Hz) Ambient temperature in degrees celsius Default can be changed for Farenheit Temperature can be measured thru the Gyroscope or the Accelerometer Precision seems better with the Gyroscope, so it is set by default. You can change the source like this: bno055Sensor.TemperatureSource = TemperatureSource.Accelerometer; Sensor data calibration You can get and set the sensor data qualibration. Every sensor which permit the operation has a function to get the calibration data and set the calibration data. This is an example of how to get and set the calibration data for the Accelerometer. Vector4 calib = bno055Sensor.GetAccelerometerCalibrationData(); // Change, transform the calibration data bno055Sensor.SetAccelerometerCalibrationData(calib); Remapping the accelerometer axis It is possible to remap the acceleroter axis as well as get their configuration. For example, you can change the X axis for a negative signe likle this: var axisMap = bno055Sensor.GetAxisMap(); axisMap[0].Sign = AxisSign.Negative; bno055Sensor.SetAxisMap(axisMap[0], axisMap[1], axisMap[2]); In the returned array, X is the first element, Y the second and Z the last one."
  },
  "devicesdetails/Button/README.html": {
    "href": "devicesdetails/Button/README.html",
    "title": "Button | nanoFramework Documentation",
    "keywords": "Button The ButtonBase class is a base implementation for buttons that is hardware independent and can be used across devices. The GpioButton is a GPIO implementation of the button and inherits from the ButtonBase class. This implementation has been tested on an ESP32 platform, specifically on the M5StickC Plus . Documentation Documentation for the M5StickC Plus, including pin mapping, can be found here . Information regarding standard mouse events, used as inspiration for the button events, can be found here . Usage You can find an example in the samples directory. // Initialize a new button with the corresponding button pin GpioButton button = new GpioButton(buttonPin: 37); Debug.WriteLine(\"Button is initialized, starting to read state\"); // Enable or disable holding or doublepress events button.IsDoublePressEnabled = true; button.IsHoldingEnabled = true; // Write to debug if the button is down button.ButtonDown += (sender, e) => { Debug.WriteLine($\"buttondown IsPressed={button.IsPressed}\"); }; // Write to debug if the button is up button.ButtonUp += (sender, e) => { Debug.WriteLine($\"buttonup IsPressed={button.IsPressed}\"); }; // Write to debug if the button is pressed button.Press += (sender, e) => { Debug.WriteLine($\"Press\"); }; // Write to debug if the button is double pressed button.DoublePress += (sender, e) => { Debug.WriteLine($\"Double press\"); }; // Write to debug if the button is held and released button.Holding += (sender, e) => { switch (e.HoldingState) { case ButtonHoldingState.Started: Debug.WriteLine($\"Holding Started\"); break; case ButtonHoldingState.Completed: Debug.WriteLine($\"Holding Completed\"); break; } }; Thread.Sleep(Timeout.Infinite); Expected output Button is initialized, starting to read state buttondown IsPressed=True buttonup IsPressed=False Press buttondown IsPressed=True buttonup IsPressed=False Press Double press buttondown IsPressed=True Holding Started buttonup IsPressed=False Press Holding Completed Testing The unit test project can be found in the tests directory. You can simply run them using the VS2019 built-in test capabilites:"
  },
  "devicesdetails/Buzzer/README.html": {
    "href": "devicesdetails/Buzzer/README.html",
    "title": "Buzzer - Piezo Buzzer Controller | nanoFramework Documentation",
    "keywords": "Buzzer - Piezo Buzzer Controller This device binding allows playing certain tones using piezo buzzer. It uses PWM with 50% duty cycle and various frequencies. Piezo buzzers with three pins supported as well as piezo buzzers with two pins. Device Family This binding was tested on two types of piezo buzzers. First type of buzzer has two pins vcc and gnd . Second type of buzzers has addition signal pin. Usage The Buzzer class can use either software or hardware PWM. This is done fully transparently by the initialization. If you want to use the software PWM, you have to call the constructor that takes in one integer: public Buzzer(int pinNumber) . To use the hardware PWM, make sure you reference correctly the chip and channel you want to use, and call the constructor that takes two integers (chip and channel). Also you could explicitly pass a PwmChannel if you want to construct that yourself. Here's an example how you could use Buzzer . using (Buzzer buzzer = new Buzzer(21)); // Initialize buzzer with software PWM connected to pin 21. { buzzer.PlayTone(440, 1000); // Play tone with frequency 440 hertz for one second. } Important Depending on your platform, you may have to setup the pins properly. In case of ESP32, use the nanoFramework.Hardware.Esp32 nuget then configure the pin properly like Configuration.SetPinFunction(21, DeviceFunction.PWM1); . That should be done before creating the Buzzer. Buzzer allows to play tone for certain duration like in example above. Or you could start tone playing, perform some operation and then stop tone playing like in a following example. using (Buzzer buzzer = new Buzzer(21)); { buzzer.StartPlaying(440); Thread.Sleep(1000); buzzer.StopPlaying(); } The result will be the same as in previous example. Buzzer allows you to play only single tone at a single moment. If you will call SetFrequency sequentially with a different frequencies then the last call will override previous calls. Following example explains it. using (Buzzer buzzer = new Buzzer(21)); // Initialize buzzer with software PWM connected to pin 21. { buzzer.StartPlaying(440); Thread.Sleep(1000); buzzer.StartPlaying(880); Thread.Sleep(1000); buzzer.StopPlaying(); } This example will play tone with frequency 440 for a second and then will play tone with a frequency 880 for a second. Example of Alphabet song played using Buzzer Schematic You have 2 types of buzzers. Those with 2 pins only and those with 3 pins. For buzzer with 3 pins: simply connect signal pin of buzzer to commutation pin (any valid GPIO), vcc pin to +5v , gnd pin to ground. For buzzer with 2 pins: connect vcc pin of buzzer to commutation pin (any valid GPIO) and gnd to ground. You could use any types of buzzers in any order. No changes to code are required. Code This sample contains a wrapper on a Buzzer called MelodyPlayer . MelodyPlayer and MelodyElement To create an instance of a MelodyPlayer use following line: MelodyPlayer player = new MelodyPlayer(new Buzzer(26)); Constructor takes a single parameter type of Buzzer . After initialization MelodyPlayer allows playing melody represented by sequence of MelodyElement objects. MelodyElement is a base class for two types of elements: NoteElement - It will be played. So in a constructor it accepts Note and Octave to determine frequency of the sound and Duration to determine duration of the sound. PauseElement - It's supposed to make a pause between two NoteElements so it's only have duration of pause as constructor parameter. How to use Following example demonstrates how to create MelodyElement sequence and how to play it using MelodyPlayer: IListMelodyElement sequence = new ListMelodyElement() { new NoteElement(Note.C, Octave.Fourth, Duration.Quarter), new PauseElement(Duration.Quarter), new NoteElement(Note.C, Octave.Fourth, Duration.Quarter) }; using (var player = new MelodyPlayer(new Buzzer(21))) { player.Play(sequence, 100); } Play method MelodyPlayer accepts a sequence of MelodyElements as the first parameter and a tempo as the second. Tempo is an amount of quarter notes per minute. So the more tempo is the quicker melody will be played. Also there is an overload of MelodyPlayer.Play with 3 parameters: MelodyElement sequence, tempo and transposition value. Transposition increases or decreases every tone of melody sequence by desired amount of semitones. For example: following line will decrease every tone of sequence by one octave since octave consists of 12 semitones. player.Play(sequence, 100, -12); Parallel buzzer playing As far as MelodyPlayer.Play method is not asynchronous, calls of this method are wrapped by task like this: var player1 = new MelodyPlayer(new Buzzer(21)); player1.Play(AlphabetSong, 100, -12); player1.Play(AlphabetSong, 100); This approach allows playing two melodies independently however example above plays a single melody in the same time using two different buzzers. Alphabet song Presented sample plays Alphabet song using two buzzers. The song is hardcoded in a Buzzer.Sample.cs file as a sequence of MelodyElements. Read more about Alphabet song on Wikipedia"
  },
  "devicesdetails/Card/Mifare/README.html": {
    "href": "devicesdetails/Card/Mifare/README.html",
    "title": "Mifare card - RFID Card | nanoFramework Documentation",
    "keywords": "Mifare card - RFID Card This class supports Mifare cards. They are RFID cards responding to ISO 14443 type A. You need a specific card reader like MFRC522 , PN532 , PN5180 to read, write those kind of cards. Creating a card and reading it You'll need first to get the card from an RFID reader. The example below shows how to do it with a PN532 and read all the sectors and print all the sector data information. byte[] retData = null; while (true) { retData = pn532.ListPassiveTarget(MaxTarget.One, TargetBaudRate.B106kbpsTypeA); if (retData is object) break; // Give time to PN532 to process Thread.Sleep(200); } if (retData is null) return; var decrypted = pn532.Decode106kbpsTypeA(retData.AsSpan().Slice(1)); if (decrypted is object) { Debug.WriteLine($\"Tg: {decrypted.TargetNumber}, ATQA: {decrypted.Atqa} SAK: {decrypted.Sak}, NFCID: {BitConverter.ToString(decrypted.NfcId)}\"); if (decrypted.Ats is object) Debug.WriteLine($\", ATS: {BitConverter.ToString(decrypted.Ats)}\"); MifareCard mifareCard = new MifareCard(pn532, decrypted.TargetNumber) { BlockNumber = 0, Command = MifareCardCommand.AuthenticationA }; mifareCard.SetCapacity(decrypted.Atqa, decrypted.Sak); mifareCard.SerialNumber = decrypted.NfcId; mifareCard.KeyA = new byte[6] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; mifareCard.KeyB = new byte[6] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }; for (byte block = 0; block < 64; block++) { mifareCard.BlockNumber = block; mifareCard.Command = MifareCardCommand.AuthenticationB; var ret = mifareCard.RunMifiCardCommand(); if (ret < 0) { // Try another one mifareCard.Command = MifareCardCommand.AuthenticationA; ret = mifareCard.RunMifiCardCommand(); } if (ret >= 0) { mifareCard.BlockNumber = block; mifareCard.Command = MifareCardCommand.Read16Bytes; ret = mifareCard.RunMifiCardCommand(); if (ret >= 0) Debug.WriteLine($\"Bloc: {block}, Data: {BitConverter.ToString(mifareCard.Data)}\"); else { Debug.WriteLine($\"Error reading bloc: {block}, Data: {BitConverter.ToString(mifareCard.Data)}\"); } if (block % 4 == 3) { // Check what are the permissions for (byte j = 3; j > 0; j--) { var access = mifareCard.BlockAccess((byte)(block - j), mifareCard.Data); Debug.WriteLine($\"Bloc: {block - j}, Access: {access}\"); } var sector = mifareCard.SectorTailerAccess(block, mifareCard.Data); Debug.WriteLine($\"Bloc: {block}, Access: {sector}\"); } } else { Debug.WriteLine($\"Authentication error\"); } } }"
  },
  "devicesdetails/Card/Ndef/README.html": {
    "href": "devicesdetails/Card/Ndef/README.html",
    "title": "Data Exchange Format (NDEF) read and write support for NFC cards | nanoFramework Documentation",
    "keywords": "Data Exchange Format (NDEF) read and write support for NFC cards This library supports NDEF messages . NDEF is composed of a message with records in it. Every record can be a know type or a specific type. This library fully support all root type of messages. NDEF messages are used on Mifare Cards and is included into this library as well. You have a full example using 23 different NFC readers MFRC522 , PN532 and PN1850 build in. Reading NDEF from a card This operation only require a valid NFC reader which implement CardTransceiver , see the class . From the code below, the transceiver is a PN532 used with a serial port on Windows. This is just for convenience, it can be any supported reader connected on any interface and any OS. This is a complete example from initializing the reader, detecting the card, extracting the message and displaying the detailed messages. Important : NDEF is supported for both Mifare and Ultralight cards. // Create a PN532 var pn532 = new Pn532(\"COM4\", debugLevel); byte[]? retData = null; while (true) { retData = pn532.ListPassiveTarget(MaxTarget.One, TargetBaudRate.B106kbpsTypeA); if (retData is object) { break; } // Give time to PN532 to process Thread.Sleep(200); } if (retData is null) { return; } Debug.WriteLine(); // Check if it is a valid card var card = pn532.TryDecode106kbpsTypeA(retData.AsSpan().Slice(1)); if (card is not object) { Debug.WriteLine(\"Can't read properly the card\"); return; } // Create the Mifare card MifareCard mifareCard = new MifareCard(pn532, card.TargetNumber) { BlockNumber = 0, Command = MifareCardCommand.AuthenticationA }; mifareCard.SetCapacity(card.Atqa, card.Sak); mifareCard.SerialNumber = card.NfcId; // Read an extract the NDEF message // This is where you can write as well, format the card, check the card see next sections mifareCard.TryReadNdefMessage(out NdefMessage message); if (message.Records.Count == 0) { Debug.WriteLine(\"Sorry, there is no NDEF message in this card or I can't find them\"); } // Display the messages foreach (NdefRecord msg in message.Records) { Debug.WriteLine(\"Record header:\"); Debug.WriteLine($\" Is first message: {msg.Header.IsFirstMessage}, is last message: {msg.Header.IsLastMessage}\"); Debug.Write($\" Type name format: {msg.Header.TypeNameFormat}\"); if (msg.Header.PayloadType is object) { Debug.WriteLine($\", Payload type: {BitConverter.ToString(msg.Header.PayloadType)}\"); } else { Debug.WriteLine(\"\"); } Debug.WriteLine($\" Is composed: {msg.Header.IsComposedMessage}, is Id present: {msg.Header.MessageFlag.HasFlag(MessageFlag.IdLength)}, Id Length value: {msg.Header.IdLength}\"); Debug.WriteLine($\" Payload Length: {msg.Payload?.Length}, is short message= {msg.Header.MessageFlag.HasFlag(MessageFlag.ShortRecord)}\"); if (msg.Payload is object) { Debug.WriteLine($\"Payload: {BitConverter.ToString(msg.Payload)}\"); } else { Debug.WriteLine(\"No payload\"); } if (UriRecord.IsUriRecord(msg)) { var urirec = new UriRecord(msg); Debug.WriteLine($\" Type {nameof(UriRecord)}, Uri Type: {urirec.UriType}, Uri: {urirec.Uri}, Full URI: {urirec.FullUri}\"); } if (TextRecord.IsTextRecord(msg)) { var txtrec = new TextRecord(msg); Debug.WriteLine($\" Type: {nameof(TextRecord)}, Encoding: {txtrec.Encoding}, Language: {txtrec.LanguageCode}, Text: {txtrec.Text}\"); } if (GeoRecord.IsGeoRecord(msg)) { var geo = new GeoRecord(msg); Debug.WriteLine($\" Type: {nameof(GeoRecord)}, Lat: {geo.Latitude}, Long: {geo.Longitude}\"); } if (MediaRecord.IsMediaRecord(msg)) { var media = new MediaRecord(msg); Debug.WriteLine($\" Type: {nameof(MediaRecord)}, Payload Type = {media.PayloadType}\"); if (media.IsTextType) { var ret = media.TryGetPayloadAsText(out string payloadAsText); if (ret) { Debug.WriteLine($\" Payload as Text:\"); Debug.WriteLine($\"{payloadAsText}\"); } else { Debug.WriteLine($\"Can't convert the payload as a text\"); } } } Debug.WriteLine(\"\"); } Writing NDEF to a card From the previous example, you will still need to get a card. From there, to create and write messages, it's quite straight forward: // Create the NDEF message NdefMessage message = new(); // Create a Text record TextRecord recordText = new(\"I ❤ .NET nanoFramework\", \"en\", Encoding.UTF8); // Add the record to the message message.Records.Add(recordText); // Create a Geo message GeoRecord geoRecord = new(2.1234, -1.2345); // Add the record to the message message.Records.Add(geoRecord); // Write the message, by using the default Key A var res = mifareCard.WriteNdefMessage(message); if (res) { Debug.WriteLine($\"Writing successful\"); } else { Debug.WriteLine($\"Error writing to the card\"); } Note that if you want to set specific permission and have read only with the default NDEF Keys, you can authenticate and write the NDEF message with the Key B: // Your secret Key B (here the default one) mifareCard.KeyB = new byte[6] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }; // This will write using this secret key B var res = mifareCard.WriteNdefMessage(message, false); Format a card to NDEF You can format a card, this will be done using Key B, by default it will use the Default Key B. You can pass as well the Key B in the parameters. var ret = mifareCard.FormatNdef(); string msg = ret ? \"Formatting successful.\" : \"Error formatting card.\"; Debug.WriteLine(msg); Check if the card is NDEF formatted You can as well check is properly NDEF formatted: var ret = mifareCard.IsFormattedNdef(); var isForm = ret ? string.Empty : \" not\"; Debug.WriteLine($\"This card is{isForm} NDEF formatted\"); Card type supported NDEF per se is fully independent of cards, so the class can be used independently. A Mifare implementation has been done. All Mifare 1K, 2K and 4K are supported. The Mifare 300 are not."
  },
  "devicesdetails/Card/README.html": {
    "href": "devicesdetails/Card/README.html",
    "title": "RFID shared elements | nanoFramework Documentation",
    "keywords": "RFID shared elements Common elements of all RFID and NFC readers like the type of cards 14443 Type A, Type B, Innovision Jewel. This contains as well an abstract class that has to be implemented by readers to have a transparent way of managing Mifare, Ultralight cards and other high level cards. namespace Iot.Device.Card { /// <summary> /// Abstract class implementing a specific Write and Read function /// This class allow to transceive information with the card /// This class has to be implemented in all RFID/NFC/Card readers /// So Mifare cards can be used the same way independent of any reader /// </summary> public abstract class CardTransceiver { /// <summary> /// This function has to be implemented by all NFC/RFID/Card readers. This function is used in exchange of data with /// the reader and the cards. /// </summary> /// <param name=\"targetNumber\">Some readers have a notion of target number for the cards as they can read multiple ones</param> /// <param name=\"dataToSend\">A standardized raw buffer with the command at the position 0 in the array</param> /// <param name=\"dataFromCard\">If any data are read from the card, they will be put into this array</param> /// <returns>-1 in case of error, otherwise the number of bytes read and copied into the <paramref name=\"dataFromCard\"/> array</returns> public abstract int Transceive(byte targetNumber, SpanByte dataToSend, SpanByte dataFromCard); /// <summary> /// Once you have an authentication operation failing with Mifare cards or a read/write, the card stop. /// TYhe only way to have it back is to send the unselect and anti collision. /// This function provides this feature /// </summary> /// <param name=\"targetNumber\">The target number to reselect</param> /// <returns>True if success</returns> public abstract bool ReselectTarget(byte targetNumber); } }"
  },
  "devicesdetails/Card/Ultralight/README.html": {
    "href": "devicesdetails/Card/Ultralight/README.html",
    "title": "Ultralight card - RFID Card | nanoFramework Documentation",
    "keywords": "Ultralight card - RFID Card This class supports Ultralight cards. They are RFID cards responding to ISO 14443 type A. You need a specific card reader like PN532, PN5180 or MFRC522 to read, write those kind of cards. Creating a card and reading it You will find detailed examples for PN532 here , for MFRC522 here and for PN5180 here . You'll need first to get the card from an RFID reader. The example below shows how to do it with a MFRC522 and read all the sectors, read the configuration data, and print all the sector data information, read NDEF, write NDEF. // Note: mfrc522 should not be null var ultralight = new UltralightCard(mfrc522, 0); ultralight.SerialNumber = card.NfcId; Debug.WriteLine($\"Type: {ultralight.UltralightCardType}, Ndef capacity: {ultralight.NdefCapacity}\"); var version = ultralight.GetVersion(); if ((version != null) && (version.Length > 0)) { Debug.WriteLine(\"Get Version details: \"); for (int i = 0; i < version.Length; i++) { Debug.Write($\"{version[i]:X2} \"); } Debug.WriteLine(\"\"); } else { Debug.WriteLine(\"Can't read the version.\"); } var sign = ultralight.GetSignature(); if ((sign != null) && (sign.Length > 0)) { Debug.WriteLine(\"Signature: \"); for (int i = 0; i < sign.Length; i++) { Debug.Write($\"{sign[i]:X2} \"); } Debug.WriteLine(\"\"); } else { Debug.WriteLine(\"Can't read the signature.\"); } // The ReadFast feature can be used as well, note that the MFRC522 has a very limited FIFO // So maximum 9 pages can be read as once. Debug.WriteLine(\"Fast read example:\"); var buff = ultralight.ReadFast(0, 8); if (buff != null) { for (int i = 0; i < buff.Length / 4; i++) { Debug.WriteLine($\" Block {i} - {buff[i * 4]:X2} {buff[i * 4 + 1]:X2} {buff[i * 4 + 2]:X2} {buff[i * 4 + 3]:X2}\"); } } Debug.WriteLine(\"Dump of all the card:\"); for (int block = 0; block < ultralight.NumberBlocks; block++) { ultralight.BlockNumber = (byte)block; // Safe cast, can't be more than 255 ultralight.Command = UltralightCommand.Read16Bytes; var res = ultralight.RunUltralightCommand(); if (res > 0) { Debug.Write($\" Block: {ultralight.BlockNumber:X2} - \"); for (int i = 0; i < 4; i++) { Debug.Write($\"{ultralight.Data![i]:X2} \"); } var isReadOnly = ultralight.IsPageReadOnly(ultralight.BlockNumber); Debug.Write($\"- Read only: {isReadOnly} \"); Debug.WriteLine(\"\"); } else { Debug.WriteLine(\"Can't read card\"); break; } } Debug.WriteLine(\"Configuration of the card\"); // Get the Configuration res = ultralight.TryGetConfiguration(out Configuration configuration); if (res) { Debug.WriteLine(\" Mirror:\"); Debug.WriteLine($\" {configuration.Mirror.MirrorType}, page: {configuration.Mirror.Page}, position: {configuration.Mirror.Position}\"); Debug.WriteLine(\" Authentication:\"); Debug.WriteLine($\" Page req auth: {configuration.Authentication.AuthenticationPageRequirement}, Is auth req for read and write: {configuration.Authentication.IsReadWriteAuthenticationRequired}\"); Debug.WriteLine($\" Is write lock: {configuration.Authentication.IsWrittenLocked}, Max num tries: {configuration.Authentication.MaximumNumberOfPossibleTry}\"); Debug.WriteLine(\" NFC Counter:\"); Debug.WriteLine($\" Enabled: {configuration.NfcCounter.IsEnabled}, Password protected: {configuration.NfcCounter.IsPasswordProtected}\"); Debug.WriteLine($\" Is strong modulation: {configuration.IsStrongModulation}\"); } else { Debug.WriteLine(\"Error getting the configuration\"); } NdefMessage message; res = ultralight.TryReadNdefMessage(out message); if (res && message.Length != 0) { foreach (var record in message.Records) { Debug.WriteLine($\"Record length: {record.Length}\"); if (TextRecord.IsTextRecord(record)) { var text = new TextRecord(record); Debug.WriteLine(text.Text); } } } else { Debug.WriteLine(\"No NDEF message in this \"); } res = ultralight.IsFormattedNdef(); if (!res) { Debug.WriteLine(\"Card is not NDEF formatted, we will try to format it\"); res = ultralight.FormatNdef(); if (!res) { Debug.WriteLine(\"Impossible to format in NDEF, we will still try to write NDEF content.\"); } else { res = ultralight.IsFormattedNdef(); if (res) { Debug.WriteLine(\"Formatting successful\"); } else { Debug.WriteLine(\"Card is not NDEF formatted.\"); } } } NdefMessage newMessage = new NdefMessage(); newMessage.Records.Add(new TextRecord(\"I ❤ .NET nanoFramework\", \"en\", Encoding.UTF8)); res = ultralight.WriteNdefMessage(newMessage); if (res) { Debug.WriteLine(\"NDEF data successfully written on the card.\"); } else { Debug.WriteLine(\"Error writing NDEF data on card\"); }"
  },
  "devicesdetails/Ccs811/README.html": {
    "href": "devicesdetails/Ccs811/README.html",
    "title": "CCS811 Gas sensor | nanoFramework Documentation",
    "keywords": "CCS811 Gas sensor CCS811 is an ultra-low power digital gas sensor solution for monitoring indoor air quality. CCS811 integrates a gas sensor solution for detecting low levels of Volatile Organic Compounds typically found indoors, with a microcontroller unit (MCU) and an Analog-to-Digital converter to monitor the local environment and provide an indication of the indoor air quality via an equivalent CO2 or Total Volatile Organic Compounds output over a standard I2C digital interface. Documentation This device can be found in multiple places like the Adafruit or Sparkfun and a lot of different implementations on sites like Banggood . Device documentation Device information Important : CCS811 needs 20 minutes to warm up before giving any accurate measurement. Once, you'll select a mode and the internal resistor will start heating, keep in mind that accurate results will show up after 20 minutes approximately When you'll receive it, the device needs to be put on reading mode every second for about 48h as it needs time to get a a stable internal resistor The sensor autocalibrate over time. There is a notion of baseline. This baseline should be handle with care and is not the same for all the devices. Also it does evolve over time. CCS811 exposes 3 pins, here is a short information on every one: The Address pins allows you to select the first of second I2C address. Place it to the ground to select the first one (0x5A) or to VCC to select the second one (0x5B). The Reset pin is sometime present. If present and you want to use it, this will perform a full hard reset. The Wake pin is used to select the chip and wake it up. If you don't want to use it, just put it to the ground. The Interrupt pin allows interruption, if used, the interrupt mode and events will be activated. This needs to be activated to be able to use the embedded Threshold feature. Understanding the measurement: CCS811 provides equivalent CO2 in part per millions as well as Total Volatile Organic Compounds in part per billion. Those equivalents are calculated based on the own internal mechanism You have as well the raw data reading from the current gas sensor in micro Ampere and the raw voltage ADC. The ADC voltage is 1.65 V for a reading 1023 in a linear mode. Important to understand: In order to have this sensor working on an MCU, you need to lower the bus speed. This sensor uses a mode called I2C stretching and it may not be supported natively on your MCU. So you must lower the I2C clock to the minimum to make it working properly or use a software I2C with a low clock as well. Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. You'll find below how to use the sensor. A full example covering in details all the usage can be found in the samples directory . Create the device To create a device without any of the pins: var ccs811 = new Css811Sensor(I2cDevice.Create(new I2cConnectionSettings(1, Ccs811Sensor.I2cFirstAddress))); To create a device with a wake pin and interrupt pin: var ccs811 = new Css811Sensor(I2cDevice.Create(new I2cConnectionSettings(1, Ccs811Sensor.I2cFirstAddress)), pinWake: 3, pinInterruption: 2); Note : If you are using the software I2C device instead of the hardware I2C, adjust the bus number. If like in the previous section, you've setup the software I2C, the bus number is 3. So instancing the device will be then: var ccs811 = new Css811Sensor(I2cDevice.Create(new I2cConnectionSettings(3, Ccs811Sensor.I2cFirstAddress))); To create a device using an external chipset like FT4222 to offer GPIO and I2C support including Wake and Interrupt pins: var ftdiI2C = new Ft4222I2c(new I2cConnectionSettings(0, Ccs811Sensor.I2cFirstAddress)); var gpioController = new GpioController(PinNumberingScheme.Board, new Ft4222Gpio()); ccs811 = new Ccs811Sensor(ftdiI2C, gpioController, 3, 2, -1, false); You can then display basic information of the device: Debug.WriteLine($\"Hardware identification: 0x{ccs811.HardwareIdentification:X2}, must be 0x81\"); Debug.WriteLine($\"Hardware version: 0x{ccs811.HardwareVersion:X2}, must be 0x1X where any X is valid\"); Debug.WriteLine($\"Application version: {ccs811.ApplicationVersion}\"); Debug.WriteLine($\"Boot loader version: {ccs811.BootloaderVersion}\"); Select a measurement mode This is needed to start the measurement in the constant power 1 measurement per second mode. Keep in mind the important notes regarding data accuracy. ccs811.OperationMode = OperationMode.ConstantPower1Second; Once the measurement is set to anything else than idle, you can see the next section how to read a measure Getting measures If you have selected an Interruption pin, an event mode is put in place. If not, you'll have to check if any measurement is available. Case of not using the Interrupt pin The basic example shows how to check if any data is ready and then ready the Gas sensor data. while (!ccs811.IsDataReady) { Thread.Sleep(10); } var error = ccs811.TryReadGasData(out VolumeConcentration eCO2, out VolumeConcentration eTVOC, out ElectricCurrent curr, out int adc); Debug.WriteLine($\"Success: {error}, eCO2: {eCO2.PartsPerMillion} ppm, eTVOC: {eTVOC.PartsPerBillion} ppb, Current: {curr.Microamperes} µA, ADC: {adc} = {adc * 1.65 / 1023} V.\"); Case of using the Interrupt pin You can use the previous way or use the Event: // In the code after initialization ccs811.MeasurementReady += Ccs811MeasurementReady; // And a function to be called when a measurement is ready private static void Ccs811MeasurementReady(object sender, MeasurementThresholdArgs args) { Debug.WriteLine($\"Measurement Event: Success: {args.MeasurementSuccess}, eCO2: {args.EquivalentCO2.PartsPerMillion} ppm, \" + $\"eTVOC: {args.EquivalentTotalVolatileOrganicCompound.PartsPerBillion} ppb, Current: {args.RawCurrentSelected.Microamperes} µA, \" + $\"ADC: {args.RawAdcReading} = {args.RawAdcReading * 1.65 / 1023} V.\"); } Setting a threshold This feature is only available if the interruption pin is used. Events needs to be activated as well. This is an example of setting up a threshold between 400 and 600 ppm for the eCO2. Note that the threshold needs to have at least 50 of difference between the minimum and maximum values. ccs811.MeasurementReady += Ccs811MeasurementReady; ccs811.SetThreshold(VolumeConcentration.FromPartsPerMillion(400), VolumeConcentration.FromPartsPerMillion(600)); You will then receive an event with the first data point crossing up the threshold. No other data point will raise an event. Adjusting temperature and humidity The calculation is sensitive to temperature and humidity. It is recommended to adjust the default values with an accurate temperature and relative humidity source sensor. Default values are 25°C for the temperature and 50% for the relative humidity. The following example shows how to adjust for 21.3°C and 42.5%: ccs811.SetEnvironmentData(Temperature.FromDegreesCelsius(21.3), Ratio.FromPercent(42.5)); Reading and loading the baseline The baseline is used to calculate the eCO2 and eTVOC based on the raw data. It is not intended to be human readable. Refer to the documentation to understand more about the concept. var baseline = ccs811.BaselineAlgorithmCalculation; Debug.WriteLine($\"Baseline calculation value: {baseline}, changing baseline\"); // Please refer to documentation, baseline is not a human readable number ccs811.BaselineAlgorithmCalculation = 50300; Debug.WriteLine($\"Baseline calculation value: {ccs811.BaselineAlgorithmCalculation}, changing baseline for the previous one\"); ccs811.BaselineAlgorithmCalculation = baseline; Debug.WriteLine($\"Baseline calculation value: {ccs811.BaselineAlgorithmCalculation}\"); CCS811 Samples This sample application contains flow and menus allowing you to test easily all the feature of the CSS811 and also show how to implement properly all readings. You can test it thru: A native platform like an ESP32 You can use the native GPIO support for the following pins or not: The address pin is used to select primary (0x5A) or secondary (0x5B) I2C device address. The Reset pin is sometime present or not. If present and you want to use it, this will perform a full hard reset. The Wake pin is used to select the chip and wake it up. If you don't want to use it, just put it to the ground. The Interrupt pin allows interruption, if used, the interrupt mode and events will be activated. This needs to be activated to be able to use the embedded Threshold feature. You can select any of the mode. A variety of tests and reading, including changing the temperature and humidity correction is proposed. You can log the date an nicely import them later on in Excel. The following example shows a measurement over time. In blue, the equivalent CO2 in ppm and in orange the equivalent TVOC in ppb. Note that the measurement started to be accurate around 11:35 on this graph. Sample wiring Important to understand: In order to have this sensor working on a MCU, you need to lower the bus speed. This sensor uses a mode called I2C stretching and it may not be supported natively on your MCU. So you must lower the I2C clock to the minimum to make it working properly or use a software I2C with a low clock as well"
  },
  "devicesdetails/Charlieplex/README.html": {
    "href": "devicesdetails/Charlieplex/README.html",
    "title": "Charlieplex Segment binding | nanoFramework Documentation",
    "keywords": "Charlieplex Segment binding Charliplexing is a multiplexing scheme that enables controlling a significantly larger number of LEDs or other load or sensor than a more traditional wiring scheme would allow. Charlieplexing enables addressing up to n^2-n LEDs where n is the number of pins available. For example, 3 pins can be used to address up to 6 LEDs, 4 pins can address 12, and 5 pins can address 20. That sounds great, however charlieplexed circuits are hard to wire due to their complexity. An even bigger challenge is that the scheme (at least in its basic form) only allows for lighting a single LED at once. On the face of it, that would seem to be a big problem. Don't worry. The LEDs change very quickly such that the eye is tricked into thinking multiple LEDs are lit at the same time. This means that your code that cannot be doing something else while the LEDs are lit. This is why the API accepts timing information. This is not what you'd expect if you are used to lighting LEDs directly from GPIO pins or via a shift register. Show dotnet: Animating 40 LEDs with charlieplexing demonstrates using this binding. Usage The following code sample demonstrates addressing 6 LEDs with 3 pins. var pins = new int[] { 6, 13, 19 }; var ledCount = 6; var charlie = new CharlieplexSegment(pins, ledCount); for (int i = 0; i < ledCount; i++) { // will keep lit for 500ms charlie.Write(i, 1, 500); charlie.Write(i, 0); } The charlieplex-test sample exercises a broader use of the API. Using with LEDs The following image demonstrates a 3-pin charlieplex circuit, which is the starting point for charlieplexing. There are 6 LEDs in the circuit in groups of two. In each group of two, the LEDs connect to the same two GPIO pins, but with the opposite polarity (anode and cathodes are switched). Video Using with an LED bar graph The image above demonstrates using LEDs within a charlieplex circuit. LEDs are straightforward to use since you can switch their anode/cathode orientation. You cannot do that with an LED bar graph since the anode and cathode legs are fixed. Instead, you need to create your own circuit on a breadboard, and then feed that to the appropriate legs. That's what you see happening in the image below. Video Circuit addressing scheme The CharlieplexSegment type uses an addressing scheme that can be thought of as depth then breadth. Between each pair of pins, there are a pair of LEDs or other loads. The first LED is placed anode-first and the second is placed cathode-first. You start with the first two pins for the first pair of LEDs, and then the second and third pins for the second pair. This continues until you run out of pins. After that, you start from the first pin again, but this time pair with the third pin. This pattern continues until you reach the desired number of LEDs or run out of pins. It is critical to understand the difference between anode (typically longer) and cathode legs of LEDs. You will be checking these with each placement. The binding includes an API that returns a description of the circuit you need to use. The sample calls this API and prints this information to the terminal, using the same pins as the code example above. This information is very helpful to have to configure the circuit correctly. Node 0 -- Anode: 6; Cathode: 13 Node 1 -- Anode: 13; Cathode: 6 Node 2 -- Anode: 13; Cathode: 19 Node 3 -- Anode: 19; Cathode: 13 Node 4 -- Anode: 6; Cathode: 19 Node 5 -- Anode: 19; Cathode: 6 The tests in CharlieplexLayout.cs call this same API and demonstrate the circuit address scheme with varying numbers of pins. Given a 6 LED circut, charlie.Write(5,1) will light LED6 in the diagram. The API uses a 0-based scheme. As a result, charlie.Write(6,1) will throw an exception. This image demonstrates a 2-pin circuit. There isn't any reason to use a 2-pin charlieplex circuit other than as a learning exercise. This image demonstrates a 3-pin circuit. This image demonstrates a 6-pin circuit. The Controlling 20 Led's From 5 Arduino Pins Using Charlieplexing includes larger wiring diagrams that match the scheme used by this binding. Alternatives The alternative to a charlieplex circuit is a shift register. See SN74HC595 -- 8-Bit Shift Register . A shift register is even more efficient at using pins than a charlieplex circuit, and is simpler to configure."
  },
  "devicesdetails/DCMotor/README.html": {
    "href": "devicesdetails/DCMotor/README.html",
    "title": "DC Motor Controller | nanoFramework Documentation",
    "keywords": "DC Motor Controller This is a generic class to control any DC motor. DC motors are controlled by simply providing voltage on the inputs (inverted voltage inverts the direction). DC motors can be controlled with 1, 2 or 3 pins. Please refer to the sample to see how to connect it. Never connect DC motor directly to your board, instead use i.e. H-bridge 3- vs 1/2-pin mode 2/1-pin mode should be used only if H-bridge allows the inputs to be changed frequently otherwise excessive heat or damage may occur which may reduce life-time of the H-bridge. It may also cause increased energy consumption due to energy being converted into heat. Usage See full sample for more details. static void Main(string[] args) { const double Period = 10.0; Stopwatch sw = Stopwatch.StartNew(); // 1 pin mode // using (DCMotor motor = DCMotor.Create(6)) // using (DCMotor motor = DCMotor.Create(PwmChannel.Create(0, 0, frequency: 50))) // 2 pin mode // using (DCMotor motor = DCMotor.Create(27, 22)) // using (DCMotor motor = DCMotor.Create(new SoftwarePwmChannel(27, frequency: 50), 22)) // 2 pin mode with BiDirectional Pin // using (DCMotor motor = DCMotor.Create(19, 26, null, true, true)) // using (DCMotor motor = DCMotor.Create(PwmChannel.Create(0, 1, 100, 0.0), 26, null, true, true)) // 3 pin mode // using (DCMotor motor = DCMotor.Create(PwmChannel.Create(0, 0, frequency: 50), 23, 24)) // Start Stop mode - wrapper with additional methods to disable/enable output regardless of the Speed value // using (DCMotorWithStartStop motor = new DCMotorWithStartStop(DCMotor.Create( _any version above_ ))) using (DCMotor motor = DCMotor.Create(6, 27, 22)) { bool done = false; string lastSpeedDisp = null; while (!done) { double time = sw.ElapsedMilliseconds / 1000.0; // Note: range is from -1 .. 1 (for 1 pin setup 0 .. 1) motor.Speed = Math.Sin(2.0 * Math.PI * time / Period); string disp = $\"Speed = {motor.Speed:0.00}\"; if (disp != lastSpeedDisp) { lastSpeedDisp = disp; Debug.WriteLine(disp); } Thread.Sleep(1); } } }"
  },
  "devicesdetails/Dhtxx/README.html": {
    "href": "devicesdetails/Dhtxx/README.html",
    "title": "DHTxx - Digital-Output Relative Humidity & Temperature Sensor Module | nanoFramework Documentation",
    "keywords": "DHTxx - Digital-Output Relative Humidity & Temperature Sensor Module IMPORTANT This ensor is very time sensitive. This implementation will only work on few boards. It doesn't work on nay ESP32. Don't use this implementation for those MCU. The DHT temperature and humidity sensors are very popular. This projects support DHT10, DHT11, DHT12, DHT21(AM2301), DHT22(AM2302). Documentation DHT10 DHT11 DHT12 DHT21 DHT22 Image Temperature Range -40 ~ 80 ℃ 0 ~ 60 ℃ -20 ~ 60 ℃ -40 ~ 80 ℃ -40 ~ 80 ℃ Humidity Range 0 ~ 99.9 % 2 ~ 95 % 20 ~ 95 % 0 ~ 99.9 % 0 ~ 99.9 % Temperature Accuracy ±0.5 ℃ ±2 ℃ ±0.5 ℃ ±0.5 ℃ ±0.5 ℃ Humidity Accuracy ±3 % ±5 % ±4 % ±3 % ±2 % Protocol I2C 1-Wire I2C, 1-Wire 1-Wire 1-Wire DHT10 datasheet (Currently only Chinese) DHT11 datasheet DHT12 datasheet DHT21 datasheet DHT22 datasheet Usage 1-Wire Protocol // GPIO Pin using (Dht11 dht = new Dht11(26)) { var temperature = dht.Temperature; var humidity = dht.Humidity; // You can only display temperature and humidity if the read is successful otherwise, this will raise an exception as // both temperature and humidity are NAN if (dht.IsLastReadSuccessful) { Debug.WriteLine($\"Temperature: {temperature.DegreesCelsius} \\u00B0C, Humidity: {humidity.Percent} %\"); // WeatherHelper supports more calculations, such as saturated vapor pressure, actual vapor pressure and absolute humidity. Debug.WriteLine( $\"Heat index: {WeatherHelper.CalculateHeatIndex(temperature, humidity).Celsius:0.#}\\u00B0C\"); Debug.WriteLine( $\"Dew point: {WeatherHelper.CalculateDewPoint(temperature, humidity).Celsius:0.#}\\u00B0C\"); } else { Debug.WriteLine(\"Error reading DHT sensor\"); } } Note: On the RPi with any of the DHT sensor, 1-Wire works using Raspian but not with Windows 10 IoT Core. The device has to switch the 1-wire pin between input and output and vice versa. It seems that Windows IoT Core OS can't switch the pin direction quick enough. There have been suggestions for using two pins; one for input and one for output. This solution has not been implemented here, but these are some handy links that may help setting that up: https://github.com/ms-iot/samples/tree/develop/GpioOneWire And on Hackster.io: https://www.hackster.io/porrey/go-native-c-with-the-dht22-a8e8eb I2C Protocol Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Only DHT12 can use I2C protocol. I2cConnectionSettings settings = new I2cConnectionSettings(1, DhtSensor.DefaultI2cAddressDht12); I2cDevice device = I2cDevice.Create(settings); using (Dht12 dht = new Dht12(device)) { var tempValue = dht.Temperature; var humValue = dht.Humidity; if (dht.IsLastReadSuccessful) { Debug.WriteLine($\"Temperature: {tempValue.Celsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Relative humidity: {humValue:0.#}%\"); // WeatherHelper supports more calculations, such as saturated vapor pressure, actual vapor pressure and absolute humidity. Debug.WriteLine( $\"Heat index: {WeatherHelper.CalculateHeatIndex(tempValue, humValue).Celsius:0.#}\\u00B0C\"); Debug.WriteLine( $\"Dew point: {WeatherHelper.CalculateDewPoint(tempValue, humValue).Celsius:0.#}\\u00B0C\"); } else { Debug.WriteLine(\"Error reading DHT sensor\"); } } Reading frequency and quality measurement In the case of I2C or GPIO, any type of DHT needs a bit of time between 2 readings. DHT22 documentation refer to a sensing period of 2 seconds and a collecting period higher than 1.7 seconds. Measuring with higher frequency won't give you more accurate numbers. As you can see from the specifications, the accuracy depends on the sensor type, it goes from ±2 ℃ for the DHT11 to ±0.5 ℃ for the others. Even if the parity check can come clear, we do recommend to check that the data are in a normal range. For example of humidity is higher than 100%, then it means that measurement is wrong. This check has not been done in the binding itself, so you may consider adding a check on your application side. The DHT sensors are very sensitive, avoid too long cables, electromagnetic perturbations and compile the code as release not debug to increase the quality of measurement. FAQ I always get wrong measurements, what's happening? Please check that the sensor is plugged correctly, make sure you are using the correct pin. Please check you are using the correct sensor, only DHT10 and DHT12 supports I2C. All others support only GPIO with 1 wire protocol. DHT12 supports both. The data I measure are not correct, humidity seems ok but temperature is always weird, what's the problem? Please check you are using the correct sensor. Refer to the top part of this page to check which sensor you have. Using a DHT11 instead of a DHT22 will give you a wrong temperature. I am trying to get a temperature and humidity 5 times per seconds but I mainly get wrong measurements, why? This is absolutely normal, you should check the measurements once every 2 seconds approximately. Don't try to get more measures than once every 2 seconds. When reading the temperature and humidity and trying to write the data in the console, I get an exception, why? You need to check first if the measurement has been successful. If the measurement hasn't been successful, the default values will be NaN and so you won't be able to convert the temperature or humidity and you'll get an exception. This is the correct way of first reading the sensor and then checking the reading was correct and finally using the temperature and humidity data: var tempValue = dht.Temperature; var humValue = dht.Humidity; if (dht.IsLastReadSuccessful) { Debug.WriteLine($\"Temperature: {tempValue.Celsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Relative humidity: {humValue:0.#}%\"); } I have a Raspberry Pi 4 and I get an exception when creating the DHT sensor See this issue 1145 . We're actively trying to fix it automatically. You will have to force using either the Raspberry Pi 3 driver, either the LibGpiodDriver. This is how you can force using a specific drive, in this case the Raspberry Pi 3 one which will work: GpioDriver driver = new RaspberryPi3Driver(); var controller = new GpioController(PinNumberingScheme.Logical, driver); // This uses pin 4 in the logical schema so pin 7 in the physical schema var dht = new Dht11(4, gpioController: controller); My DHT sensor using 1 wire protocol is not working on my Raspberry Pi with Windows 10 IoT Core, what can I do? On the RPi with any of the DHT sensor, 1-Wire works using Raspian but not with Windows 10 IoT Core. The device has to switch the 1-wire pin between input and output and vice versa. It seems that Windows IoT Core OS can't switch the pin direction quick enough. There have been suggestions for using two pins; one for input and one for output. This solution has not been implemented here, but these are some handy links that may help setting that up:_ https://github.com/ms-iot/samples/tree/develop/GpioOneWire And on Hackster.io: https://www.hackster.io/porrey/go-native-c-with-the-dht22-a8e8eb Now if your sensor is an I2C sensor, it should just work perfectly on Windows 10 IoT Core. Example of DHTxx Hardware Required DHT10/DHT11/DHT12/DHT21/DHT22 Male/Female Jumper Wires Circuit 1-Wire Protocol Circuit Simply connect your DHTxx data pin to GPIO26 (physical pin 37), the ground to the ground (physical pin 6) and the VCC to +5V (physical pin 2). Some sensors are already sold with the 10K resistor. Connect the GPIO26 to the data pin, its position can vary depending on the integrator. I2C Protocol Circuit SCL - SCL SDA - SDA VCC - 5V GND - GND Code // GPIO Pin using (Dht11 dht = new Dht11(26)) { var temperature = dht.Temperature; var humidity = dht.Humidity; // You can only display temperature and humidity if the read is successful otherwise, this will raise an exception as // both temperature and humidity are NAN if (dht.IsLastReadSuccessful) { Debug.WriteLine($\"Temperature: {temperature.DegreesCelsius} \\u00B0C, Humidity: {humidity.Percent} %\"); // WeatherHelper supports more calculations, such as saturated vapor pressure, actual vapor pressure and absolute humidity. Debug.WriteLine( $\"Heat index: {WeatherHelper.CalculateHeatIndex(temperature, humidity).Celsius:0.#}\\u00B0C\"); Debug.WriteLine( $\"Dew point: {WeatherHelper.CalculateDewPoint(temperature, humidity).Celsius:0.#}\\u00B0C\"); } else { Debug.WriteLine(\"Error reading DHT sensor\"); } } Sample application navigation This sample application allows you to select either a DHT10 through I2C either any other supported DHT through GPIO: Select the DHT sensor you want to use: 1. DHT10 on I2C 2. DHT11 on GPIO 3. DHT12 on GPIO 4. DHT21 on GPIO 5. DHT22 on GPIO Just select the sensor you want to test and use by typing the number. For example, if you want to test a DHT22, type 5. Then, you are prompted to type the pin number in the logical schema: Which pin do you want to use in the logical pin schema? If you want to use the pin 26, then type 26 and enter. This will then create a DHT22 sensor attached to pin 26 and start the measurement. Please note that the few first measurements won't be correct, that's totally normal and related to the fact the sensor needs a bit of time to warm up and give data. Those sensors are very sensitive and too long wires, many perturbations, code compile as debug will increase the numbers of bad readings. Result Note: reading this sensor is sensitive, if you can't read anything, make sure you have it correctly cabled. Also note you'll get better results when running in Release mode."
  },
  "devicesdetails/Hcsr04/README.html": {
    "href": "devicesdetails/Hcsr04/README.html",
    "title": "HC-SR04 - Ultrasonic Ranging Module | nanoFramework Documentation",
    "keywords": "HC-SR04 - Ultrasonic Ranging Module Device bindings for the HC-SR04 sonar distance sensor. Calculates the distance from an object by using the HC-SR04 distance sensor. Documentation HC-SR04 data sheet Usage using (var sonar = new Hcsr04(4, 17)) { if (sonar.TryGetDistance(out Length distance)) { Debug.WriteLine($\"Distance: {distance.Centimeters} cm\"); } else { Debug.WriteLine(\"Error reading sensor\"); } Thread.Sleep(1000); } Hardware Required HC-SR04 Male/Female Jumper Wires Circuit VCC - 5V GND - GND Trig - Any valid GPIO Echo - Any valid GPIO The fritz diagram above depicts how you should wire your MCU in order to run the program, the resistance for R1 is 1kOhm. (Optional). As the HCSR04 works only with 5V and the MCU are mainly 3.3V, this resistor will help protecting the MCU. Check your MCU to see if the pin is 5V tolerant or not."
  },
  "devicesdetails/Hcsr501/README.html": {
    "href": "devicesdetails/Hcsr501/README.html",
    "title": "HC-SR501 - PIR Motion Sensor | nanoFramework Documentation",
    "keywords": "HC-SR501 - PIR Motion Sensor HC-SR501 is used to detect motion based on the infrared heat in the surrounding area. Documentation In Chinese In English Usage using(Hcsr501 sensor = new Hcsr501(hcsr501Pin, PinNumberingScheme.Logical)) { // detect motion bool isDetected = sensor.IsMotionDetected; } From the HC-SR501 sample , we can do comething more complete: GpioController ledController = new GpioController(); ledController.OpenPin(27, PinMode.Output); using (Iot.Device.Hcsr501.Hcsr501 sensor = new Iot.Device.Hcsr501.Hcsr501(17)) { while (true) { // adjusting the detection distance and time by rotating the potentiometer on the sensor if (sensor.IsMotionDetected) { // turn the led on when the sensor detected infrared heat ledController.Write(27, PinValue.High); Debug.WriteLine(\"Detected! Turn the LED on.\"); } else { // turn the led off when the sensor undetected infrared heat ledController.Write(27, PinValue.Low); Debug.WriteLine(\"Undetected! Turn the LED off.\"); } Thread.Sleep(1000); } } Hardware Required PIR Motion Sensor - HC-SR501 LED 220 Ω resistor Male/Female Jumper Wires Circuit HC-SR501 VCC - 5V GND - GND OUT - GPIO 17 LED VCC & 220 Ω resistor - GPIO 27 GND - GND Result"
  },
  "devicesdetails/Hmc5883l/README.html": {
    "href": "devicesdetails/Hmc5883l/README.html",
    "title": "HMC5883L - 3 Axis Digital Compass | nanoFramework Documentation",
    "keywords": "HMC5883L - 3 Axis Digital Compass HMC5883L is a surface-mount, multi-chip module designed for low-field magnetic sensing with a digital interface for applications such as lowcost compassing and magnetometry. Documentation HMC5883L datasheet Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(1, Hmc5883l.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Hmc5883l sensor = new Hmc5883l(device)) { // read direction vector Vector3 directionVector = sensor.DirectionVector; // read heading double heading = sensor.Heading; // read status Status status = sensor.DeviceStatus; } From the HMC5883L sample , you can go further with the following: I2cConnectionSettings settings = new I2cConnectionSettings(1, Hmc5883l.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Hmc5883l sensor = new Hmc5883l(device)) { while (true) { // read heading Debug.WriteLine($\"Heading: {sensor.Heading.ToString(\"0.00\")} °\"); Debug.WriteLine(); // wait for a second Thread.Sleep(1000); } } Hardware Required HMC5883L Male/Female Jumper Wires Circuit SCL - SCL SDA - SDA VCC - 5V GND - GND Result"
  },
  "devicesdetails/Hts221/README.html": {
    "href": "devicesdetails/Hts221/README.html",
    "title": "HTS221 - Capacitive digital sensor for relative humidity and temperature | nanoFramework Documentation",
    "keywords": "HTS221 - Capacitive digital sensor for relative humidity and temperature Some of the applications mentioned by the datasheet: Air conditioning, heating and ventilation Air humidifiers Refrigerators Wearable devices Smart home automation Industrial automation Respiratory equipment Asset and goods tracking Documentation Datasheet Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. using System; using System.Threading; using System.Device.I2c; using Iot.Device.Common; using Iot.Device.Hts221; using UnitsNet; // I2C address on SenseHat board const int I2cAddress = 0x5F; using Hts221 th = new(CreateI2cDevice()); while (true) { var tempValue = th.Temperature; var humValue = th.Humidity; Debug.WriteLine($\"Temperature: {tempValue.DegreesCelsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Relative humidity: {humValue:0.#}%\"); // WeatherHelper supports more calculations, such as saturated vapor pressure, actual vapor pressure and absolute humidity. Debug.WriteLine($\"Heat index: {WeatherHelper.CalculateHeatIndex(tempValue, humValue).DegreesCelsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Dew point: {WeatherHelper.CalculateDewPoint(tempValue, humValue).DegreesCelsius:0.#}\\u00B0C\"); Thread.Sleep(1000); } I2cDevice CreateI2cDevice() { I2cConnectionSettings settings = new(1, I2cAddress); return I2cDevice.Create(settings); }"
  },
  "devicesdetails/Ip5306/README.html": {
    "href": "devicesdetails/Ip5306/README.html",
    "title": "IP5306 - Power management | nanoFramework Documentation",
    "keywords": "IP5306 - Power management This chip is used mainly in power bank and embedded devices as a power management device. It is connected using I2C and allows to adjust the charging current,voltage, cutoff voltage. It has the capacity to light up 4 leds displaying the charge of the battery. This device is used in the M5Stack. Documentation The datasheet in Chinese can be found here . Usage As always when using I2C, you need to make sure you're using the right pins. En ESP32, you need the register the pins if not using the default one. Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); I2cDevice i2c = new(new I2cConnectionSettings(1, Ip5306.SecondaryI2cAddress)); Ip5306 power = new(i2c); Note the default address of the IP5306 is 0xEA, the address used in M5Stack is 0x75 (here setup as SecondaryI2cAddress ). Getting access to the properties All properties can be adjusted and changed. He is an example how to display all of them: Debug.WriteLine($\" AutoPowerOnEnabled: {power.AutoPowerOnEnabled}\"); Debug.WriteLine($\" BoostOutputEnabled: {power.BoostOutputEnabled}\"); Debug.WriteLine($\" BoostWhenVinUnpluggedEnabled: {power.BoostWhenVinUnpluggedEnabled}\"); Debug.WriteLine($\" BostEnabled: {power.BoostEnabled}\"); Debug.WriteLine($\" ButtonOffEnabled: {power.ButtonOffEnabled}\"); Debug.WriteLine($\" ChargerEnabled: {power.ChargerEnabled}\"); Debug.WriteLine($\" ChargingBatteryVoltage: {power.ChargingBatteryVoltage}\"); Debug.WriteLine($\" ChargingCurrent: {power.ChargingCurrent}\"); Debug.WriteLine($\" ChargingCutOffCurrent: {power.ChargingCutOffCurrent}\"); Debug.WriteLine($\" ChargingCuttOffVoltage{power.ChargingCuttOffVoltage}\"); Debug.WriteLine($\" ChargingLoopSelection: {power.ChargingLoopSelection}\"); Debug.WriteLine($\" ChargingUnderVoltage: {power.ChargingUnderVoltage}\"); Debug.WriteLine($\" ConstantChargingVoltage: {power.ConstantChargingVoltage}\"); Debug.WriteLine($\" FlashLightBehavior {power.FlashLightBehavior}\"); Debug.WriteLine($\" IsBatteryFull: {power.IsBatteryFull}\"); Debug.WriteLine($\" IsCharging: {power.IsCharging}\"); Debug.WriteLine($\" IsOutputLoadHigh: {power.IsOutputLoadHigh}\"); Debug.WriteLine($\" LightDutyShutdownTime: {power.LightDutyShutdownTime}\"); Debug.WriteLine($\" LowPowerOffEnabled: {power.LowPowerOffEnabled}\"); Debug.WriteLine($\" ShortPressToSwitchBosst: {power.ShortPressToSwitchBosst}\"); Debug.WriteLine($\" SwitchOffBoostBehavior: {power.SwitchOffBoostBehavior}\"); Debug.WriteLine($\" GetButtonStatus: {power.GetButtonStatus()}\"); Button status You can get the button status: var button = power.GetButtonStatus(); switch (button) { case ButtonPressed.DoubleClicked: Debug.WriteLine(\"double clicked\"); break; case ButtonPressed.LongPressed: Debug.WriteLine(\"Long pressed\"); break; case ButtonPressed.ShortPressed: Debug.WriteLine(\"Short pressed\"); break; case ButtonPressed.NotPressed: default: break; } Important : depending on the behavior you setup for the button, the device may switch off what's connected to it. So be careful on what you setup. Once the I2C connection is broken, you can't adjust the behavior bck. configuration for M5Stack The configuration for M5Stack is the following: // Configuration for M5Stack power.ButtonOffEnabled = true; power.BoostOutputEnabled = false; power.AutoPowerOnEnabled = true; power.ChargerEnabled = true; power.BoostEnabled = true; power.LowPowerOffEnabled = true; power.FlashLightBehavior = ButtonPress.Doubleclick; power.SwitchOffBoostBehavior = ButtonPress.LongPress; power.BoostWhenVinUnpluggedEnabled = true; power.ChargingUnderVoltage = ChargingUnderVoltage.V4_55; power.ChargingLoopSelection = ChargingLoopSelection.Vin; power.ChargingCurrent = ElectricCurrent.FromMilliamperes(2250); power.ConstantChargingVoltage = ConstantChargingVoltage.Vm28; power.ChargingCuttOffVoltage = ChargingCutOffVoltage.V4_17; power.LightDutyShutdownTime = LightDutyShutdownTime.S32; power.ChargingCutOffCurrent = ChargingCutOffCurrent.C500mA; power.ChargingCuttOffVoltage = ChargingCutOffVoltage.V4_2;"
  },
  "devicesdetails/KeyMatrix/README.html": {
    "href": "devicesdetails/KeyMatrix/README.html",
    "title": "Key Matrix | nanoFramework Documentation",
    "keywords": "Key Matrix An M×N key matrix driver. (M is number of output pins and N is number of input pins.) Documentation These key matrices look like this: This is a 4×4 matrix. And here is the schematic You can connect any M×N key matrix, theoretically, by using M+N GPIO pins. You can also use any compatible GPIO controller like Mcp23xxx instead of native controller. How Key Matrices works 4x4 Keypad Usage You need to create 2 lists of int, one for the input and one for the output. int[] outputs = new int[] { 26, 19, 13, 6 }; int[] inputs = new int[] { 21, 20, 16, 12 }; KeyMatrix mk = new KeyMatrix(outputs, inputs, TimeSpan.FromMilliseconds(20)); You can use as well any GpioController like the MCP23017 in the following example var settings = new System.Device.I2c.I2cConnectionSettings(1, 0x20); var i2cDevice = System.Device.I2c.I2cDevice.Create(settings); var mcp23017 = new Iot.Device.Mcp23xxx.Mcp23017(i2cDevice); GpioController gpio = new GpioController(PinNumberingScheme.Logical, mcp23017); int[] outputs = new int[] { 26, 19, 13, 6 }; int[] inputs = new int[] { 21, 20, 16, 12 }; KeyMatrix mk = new KeyMatrix(outputs, inputs, TimeSpan.FromMilliseconds(20), gpio, true); Read on Key To read a key, just the ReadKey function: KeyMatrixEvent? key = mk.ReadKey(); KeyMatrixEvent contains the event that happened. Please note that ReadKey is blocked up to the moment an event is detected. Event based approach KeyMatrix supports events. Just subscribe to the event and have a function to handle the events: Debug.WriteLine(\"This will now start listening to events and display them for 60 seconds.\"); mk.KeyEvent += KeyMatrixEventReceived; mk.StartListeningKeyEvent(); Thread.Sleep(60000); mk.StopListeningKeyEvent(); void KeyMatrixEventReceived(object sender, KeyMatrixEvent keyMatrixEvent) { // Do something here, you have an event! } Tips and tricks Using diodes(eg. 1N4148) for each button prevents \"ghosting\" or \"masking\" problem. Input pins need pull-down resistors connect to ground if your MCU doesn't have it. So you need to have a pull-down on a the MCU for example. If your key matrix doesn't work well, try to swap output and input pins. Some includes diodes and if they are used the reverse way won't work properly. Key Matrix Samples This shows how to connect the matrix. Important : Please make you don't forget to place a pull down on the input matrix. Connection using on-board GPIO Connection using MCP23017"
  },
  "devicesdetails/LidarLiteV3/README.html": {
    "href": "devicesdetails/LidarLiteV3/README.html",
    "title": "LidarLiteV3 - LIDAR Time of Flight Sensor | nanoFramework Documentation",
    "keywords": "LidarLiteV3 - LIDAR Time of Flight Sensor This device belongs to a class of sensors known as time-of-flight, which measures distances by calculating the time delay between signal transmission and reception of the signal as it bounces off the subject. Unlike the popular sonar-based HC-SR04, this device uses a low-power laser. The advantage is longer distances (up to 40m) but more prone to errors when the subject is reflective. Documentation Official Manual and Technical Spec Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Simple usage: using (var llv3 = new LidarLiteV3(CreateI2cDevice())) { // Take 10 measurements, each one second apart. for (int i = 0; i < 10; i++) { Length currentDistance = llv3.MeasureDistance(); Debug.WriteLine($\"Current Distance: {currentDistance.Centimeters} cm\"); Thread.Sleep(1000); } } I2cDevice CreateI2cDevice() { var settings = new I2cConnectionSettings(1, LidarLiteV3.DefaultI2cAddress); return I2cDevice.Create(settings); } Power Modes Power can be controlled to the device via a GPIO pin. Use the optional constructor parameters to specify the GPIO controller and a power enable pin number (numbering scheme depends on GpioController). int powerEnablePin = 13; using (var llv3 = new LidarLiteV3(CreateI2cDevice(), new GpioController(), powerEnablePin)) { // Power off the device. llv3.PowerOff(); // Device is completely turned off. Debug.WriteLine(\"Device is off.\"); Thread.Sleep(5000); // Power on the device, device is ready in ~22ms. Debug.WriteLine(\"Device is on.\"); llv3.PowerOn(); // Sleep 50ms. Thread.Sleep(50); // Get a reading. Length currentDistance = llv3.MeasureDistance(); Debug.WriteLine($\"Current Distance: {currentDistance.Centimeters} cm\"); } It's also possible to disable the receiver circuit (saving 40 mA) or put the device to sleep (saving 20 mA). However, it's recommended to use the power enable pin instead since the initialization time is only 2 ms shorter. using (var llv3 = new LidarLiteV3(CreateI2cDevice())) { llv3.PowerMode = PowerMode.Sleep; } Repetition Mode Instead of getting measurements on-demand, the device can be configure to repeat n number of times, or infinitely. This is configured via SetMeasurementRepetitionMode passing in a mode ( Off , Repeat , or RepeatInfinitely ), a loop count (if mode is Repeat ), and a delay between measurements (default to 10 hz). A delay of 20 is about 100 hz . With a repetition mode set, use Distance to retrieve the current readings in Length . Use DifferenceBetweenLastTwoDistances to get a velocity reading. Negative values indicate that the object is moving toward the device, positive indicates it's moving away. The value is dependent on the delay, and the default 10 hz is about 0.1 m/s. using (var llv3 = new LidarLiteV3(CreateI2cDevice())) { llv3.SetMeasurementRepetitionMode(MeasurementRepetitionMode.RepeatIndefinitely); while(true) { Thread.Sleep(5); Length currentDistance = llv3.Distance; Length currentVelocity = llv3.DifferenceBetweenLastTwoDistances; } } Change the I2C Address By default, the device has an address of 0x62 . It's possible to change this address to resolve a conflict with another device or to run multiple devices. Available addresses are 7-bit values with a 0 in the LSB order. using (var llv3 = new LidarLiteV3(CreateI2cDevice())) { // Set device from default `0x62` to `0x68` llv3.SetI2cAddressAndDispose(0x68); } // Connect to the device again with the new address. var settings = new I2cConnectionSettings(1, 0x68); var i2cDevice = I2cDevice.Create(settings); using (var llv3 = new LidarLiteV3(i2cDevice)) { // ... } Optimization The default settings should work well, but several tweaks can be made to adjust the device. See the manual for more details. Change Acquistion Count To isolate the signal from the noise, the device performs a series of acquisitions and sums up the result until a peak is found. The number of acquistions can be configured via MaximumAcquisitionCount (default: 128). Less acquisitions result in faster measurements, but limits the max range and produces more erroneous readings. The number roughly correlates to an acquistion rate of n/count and n^(1/4). using (var llv3 = new LidarLiteV3(CreateI2cDevice())) { llv3.MaximumAcquisitionCount = 100 } Quick Termination Mode Faster acquisition readings, but with slightly more chance of erroneous readings. using (var llv3 = new LidarLiteV3(CreateI2cDevice())) { llv3.AcquistionMode |= AcquistionMode.EnableQuickTermination; } Detection Sensitivity The threshold when a peak is found can be configured via AlgorithmByPassThreshold . By default, this is 0 which uses an internal algorithm to determine the threshold. Recommended non-default values are 32 for higher sensitivity but higher erronenous readings and 96 for reduced sensitivity with fewer erroneous readings. using (var llv3 = new LidarLiteV3(CreateI2cDevice())) { llv3.AlgorithmBypassThreshold = 32 } MCU Wiring The device communicates over I2C and while there's a PWN mode supported by the device, it is not implemented. I2C Wiring on the MCU: LidarLiteV3 Wire MCU GPIO Pin (Physical Numbering) 5V (red) 5V Ground (black) Ground Power enable (orange) Optional, an available IO pin Mode control (yellow) Not used I2C SCL (green) SCL I2C SDA (blue) SDA"
  },
  "devicesdetails/LiquidLevel/README.html": {
    "href": "devicesdetails/LiquidLevel/README.html",
    "title": "Digital liquid level switch | nanoFramework Documentation",
    "keywords": "Digital liquid level switch Digital liquid level switches are devices that can detect the presence of liquid/water. GPIO can be used to communicate with the devices. Documentation The implementation supports any single pin output digital liquid level switch. LLC200D3SH sensor datasheet Usage Define the LLC200D3SH sensor using the LiquidLevelSwitch class. using (LiquidLevelSwitch sensor = new LiquidLevelSwitch(23, PinValue.Low)) { while (true) { // read liquid level switch Debug.WriteLine($\"Detected: {sensor.IsLiquidPresent()}\"); Debug.WriteLine(); Thread.Sleep(1000); } } An example on how to use the specific LLC200D3SH device binding is available in the samples folder. LLC200D3SH Circuit The following fritzing diagram illustrates one way to wire up the Optomax LLC200D3SH digital liquid level switch with a MCU."
  },
  "devicesdetails/Lm75/README.html": {
    "href": "devicesdetails/Lm75/README.html",
    "title": "LM75 - Digital Temperature Sensor | nanoFramework Documentation",
    "keywords": "LM75 - Digital Temperature Sensor The LM75 is a temperature sensor, Delta-Sigma analog-to-digital converter, and digital over-temperature detector with I2C interface. Documentation LM75 datasheet Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(1, Lm75.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using(Lm75 sensor = new Lm75(device)) { double temperature = sensor.Temperature.Celsius; } LM75 Example Circuit SCL - SCL SDA - SDA VCC - 5V GND - GND Code I2cConnectionSettings settings = new I2cConnectionSettings(1, Lm75.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using(Lm75 sensor = new Lm75(device)) { while (true) { Debug.WriteLine($\"Temperature: {sensor.Temperature.Celsius} ℃\"); Debug.WriteLine(); Thread.Sleep(1000); } } Result"
  },
  "devicesdetails/Lps25h/README.html": {
    "href": "devicesdetails/Lps25h/README.html",
    "title": "LPS25H - Piezoresistive pressure and thermometer sensor | nanoFramework Documentation",
    "keywords": "LPS25H - Piezoresistive pressure and thermometer sensor Some of the applications mentioned by the datasheet: Altimeter and barometer for portable devices GPS applications Weather station equipment Sport watches Documentation You can find the datasheet here Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. class Program { // I2C address on SenseHat board public const int I2cAddress = 0x5c; static void Main(string[] args) { using (var th = new Lps25h(CreateI2cDevice())) { while (true) { var tempValue = th.Temperature; var preValue = th.Pressure; var altValue = WeatherHelper.CalculateAltitude(preValue, defaultSeaLevelPressure, tempValue); Debug.WriteLine($\"Temperature: {tempValue.Celsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Pressure: {preValue.Hectopascal:0.##}hPa\"); Debug.WriteLine($\"Altitude: {altValue:0.##}m\"); Thread.Sleep(1000); } } } private static I2cDevice CreateI2cDevice() { var settings = new I2cConnectionSettings(1, I2cAddress); return I2cDevice.Create(settings); } }"
  },
  "devicesdetails/Lsm9Ds1/README.html": {
    "href": "devicesdetails/Lsm9Ds1/README.html",
    "title": "LSM9DS1 - 3D accelerometer, gyroscope and magnetometer | nanoFramework Documentation",
    "keywords": "LSM9DS1 - 3D accelerometer, gyroscope and magnetometer LSM9DS1 internally uses 2 buses: Accelerometer and gyroscope Magnetometer and therefore functionality has been split into 2 classes which allows using them independently. Documentation You can find the datasheet here Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Accelerometer and gyroscope class Program { public const int I2cAddress = 0x6A; static void Main(string[] args) { using (var ag = new Lsm9Ds1AccelerometerAndGyroscope(CreateI2cDevice())) { while (true) { Debug.WriteLine($\"Acceleration={ag.Acceleration}\"); Debug.WriteLine($\"AngularRate={ag.AngularRate}\"); Thread.Sleep(100); } } } private static I2cDevice CreateI2cDevice() { var settings = new I2cConnectionSettings(1, I2cAddress); return I2cDevice.Create(settings); } } Magnetometer class Magnetometer { public const int I2cAddress = 0x1C; public static void Run() { using (var m = new Lsm9Ds1Magnetometer(CreateI2cDevice())) { Debug.WriteLine(\"Calibrating...\"); Debug.WriteLine(\"Move the sensor around Z for the next 20 seconds, try covering every angle\"); Stopwatch sw = Stopwatch.StartNew(); Vector3 min = m.MagneticInduction; Vector3 max = m.MagneticInduction; while (sw.ElapsedMilliseconds < 20 * 1000) { Vector3 sample = m.MagneticInduction; min = Vector3.Min(min, sample); max = Vector3.Max(max, sample); Thread.Sleep(50); } Debug.WriteLine(\"Stop moving for some time...\"); Thread.Sleep(3000); const int intervals = 32; bool[,] data = new bool[32,32]; Vector3 size = max - min; int n = 0; while (true) { n++; Vector3 sample = m.MagneticInduction; Vector3 pos = Vector3.Divide(Vector3.Multiply((sample - min), intervals - 1), size); int x = Math.Clamp((int)pos.X, 0, intervals - 1); int y = Math.Clamp((int)pos.Y, 0, intervals - 1); data[x, y] = true; if (n % 10 == 0) { Debug.WriteLine(\"Now move the sensor around again but slower...\"); for (int i = 0; i < intervals; i++) { for (int j = 0; j < intervals; j++) { if (i == x && y == j) { Debug.Write('#'); } else { Debug.Write(data[i, j] ? '#' : ' '); } } Debug.WriteLine(); } } Thread.Sleep(50); } } } private static I2cDevice CreateI2cDevice() { var settings = new I2cConnectionSettings(1, I2cAddress); return I2cDevice.Create(settings); } }"
  },
  "devicesdetails/Max31856/README.html": {
    "href": "devicesdetails/Max31856/README.html",
    "title": "Max31856 - cold-junction compensated thermocouple to digital converter | nanoFramework Documentation",
    "keywords": "Max31856 - cold-junction compensated thermocouple to digital converter The Max31856 device is a SPI interface cold-junction compensated thermocouple to digital converter. Note: ThermocoupleType.K is configured for a K type thermocouple if you want to use a B,E,J,K,N,R,S, or T simply change the K to the thermocouple type of your choosing. Documentation Max31856 datasheet Usage Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. The Max31856.samples file contains a sample usage of the device. Note that this reads two temperatures. One is a connected thermocouple reading which can be read using the TryGetTemperature command and the other is the temperature of the device itself which can be read using the GetColdJunctionTemperature command. The Cold Junction Temperature is used internally to increase the accuracy of the thermocouple but can also be read if you find a use for it. Create a new SpiConnectionSettings Class if using a MCU do not change these settings. SpiConnectionSettings settings = new(1, 42) { ClockFrequency = Max31856.SpiClockFrequency, Mode = Max31856.SpiMode, DataFlow = 0 }; Create a new SpiDevice with the settings from above. Then create a new Max31856 device with the SpiDevice as well as the correct ThermocoupleType (see note below) using SpiDevice device = SpiDevice.Create(settings); using Max31856 sensor = new(device, ThermocoupleType.K); Now read the temperature from the device. Using the UnitsNet nuget you can see the units of your choosing. In this example you chan change DegreesFahrenheit to DegreesCelsius or any other unit by changing .GetTemperature().DegreesFahrenheit to another unit of your choice. while (true) { Temperature tempColdJunction = sensor.GetColdJunctionTemperature(); Debug.WriteLine($\"Temperature: {tempColdJunction.DegreesCelcius} ℃\"); Thread.Sleep(2000); }"
  },
  "devicesdetails/Max31865/README.html": {
    "href": "devicesdetails/Max31865/README.html",
    "title": "MAX31865 - Resistance Temperature Detector Amplifier | nanoFramework Documentation",
    "keywords": "MAX31865 - Resistance Temperature Detector Amplifier The MAX31865 device is a SPI interface Resistance Temperature Detector to Digital Converter. Documentation MAX31865 datasheet Usage Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. SpiConnectionSettings settings = new(1, 42) { ClockFrequency = Max31865.SpiClockFrequency, Mode = Max31865.SpiMode1, DataFlow = Max31865.SpiDataFlow }; using SpiDevice device = SpiDevice.Create(settings); using Max31865 sensor = new(device, PlatinumResistanceThermometerType.PT1000, ResistanceTemperatureDetectorWires.ThreeWire, ElectricResistance.FromOhms(4300)); while (true) { Debug.WriteLine($\"Temperature: {sensor.Temperature.DegreesCelsius} ℃\"); // wait for 2000ms Thread.Sleep(2000); } Note: You can use any PT100 or PT1000 temperature sensor which has 2/3/4 wires. Hardware Required MAX31865 Male/Female Jumper Wires Circuit The following fritzing diagram illustrates one way to wire up the MAX31865 Resistance Temperature Detector to Digital Converter with a MCU SDI - MOSI SDO - MISO CLK - SCLK CS - CE0 VIN - 3V GND - GND Known limitations This version only performs the one shot temperature conversion and not the continuous temperature conversion."
  },
  "devicesdetails/Max44009/README.html": {
    "href": "devicesdetails/Max44009/README.html",
    "title": "MAX44009 - Ambient Light Sensor | nanoFramework Documentation",
    "keywords": "MAX44009 - Ambient Light Sensor The MAX44009 ambient light sensor features an I2C digital output that is ideal for a number of portable applications such as smartphones, notebooks, and industrial sensors. At less than 1µA operating current, it is the lowest power ambient light sensor in the industry and features an ultra-wide 22-bit dynamic range from 0.045 lux to 188,000 lux. Documentation You can find the datasheet here Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Hardware Required MAX44009 Male/Female Jumper Wires Circuit SCL - SCL SDA - SDA VCC - 5V GND - GND I2cConnectionSettings settings = new I2cConnectionSettings(1, Max44009.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); // integration time is 100ms using (Max44009 sensor = new Max44009(device, IntegrationTime.Time100)) { while (true) { // read illuminance Debug.WriteLine($\"Illuminance: {sensor.Illuminance}Lux\"); Debug.WriteLine(); Thread.Sleep(1000); } } Result"
  },
  "devicesdetails/Max7219/README.html": {
    "href": "devicesdetails/Max7219/README.html",
    "title": "Max7219 (LED Matrix driver) | nanoFramework Documentation",
    "keywords": "Max7219 (LED Matrix driver) You can use https://github.com/nanoFramework/nanoFramework.IoT.Device/Max7219/Max7219.cs in your project to drive a Max7219 based Dot Matrix Module. Write to a 8x8 Dot Matrix Module demonstrates a concrete example using this class. The following fritzing diagram illustrates one way to wire up the Max7219, with a MCU like ESP32. Usage Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. You can use .NET Core to drive MAX7219 based Dot Matrix Modules. These Modules can be cascaded to get a bigger matrix. Accessing the MAX7219 via SPI The MCU has support for SPI. var connectionSettings = new SpiConnectionSettings(1, 42) { ClockFrequency = 10_000_000, Mode = SpiMode.Mode0 }; var spi = SpiDevice.Create(connectionSettings); var devices = new Max7219(spi, cascadedDevices: 4); The following pin layout: MAX7219 VCC to MCU 5V MAX7219 GND to MCU GND MAX7219 DIN to MCU MOSI MAX7219 CS to MCU Chip Select MAX7219 CLK to MCU SPI Clock Writing to the Matrix Write a smiley to devices buffer. var smiley = new byte[] { 0b00111100, 0b01000010, 0b10100101, 0b10000001, 0b10100101, 0b10011001, 0b01000010, 0b00111100 }; for (var i = 0; i < devices.CascadedDevices; i++) { for (var digit = 0; digit < 8; digit++) { devices[i, digit] = smiley[digit]; } } Flush the smiley to the devices using a different rotation each iteration. foreach (RotationType rotation in Enum.GetValues(typeof(RotationType))) { devices.Rotation = rotation; devices.Flush(); Thread.Sleep(1000); } Write \"Hello World from MAX7219!\" to the Matrix using different fonts each iteration. devices.Init(); devices.Rotation = RotationType.Left; var writer = new MatrixGraphics(devices, Fonts.CP437); foreach (var font in new[]{Fonts.CP437, Fonts.LCD, Fonts.Sinclair, Fonts.Tiny, Fonts.CyrillicUkrainian}) { writer.Font = font; writer.ShowMessage(\"Hello World from MAX7219!\", alwaysScroll: true); }"
  },
  "devicesdetails/Mbi5027/README.html": {
    "href": "devicesdetails/Mbi5027/README.html",
    "title": "MBI5027 -- 16-bit shift register with error detection | nanoFramework Documentation",
    "keywords": "MBI5027 -- 16-bit shift register with error detection MBI5027 is a 16-bit shift register. Per the datasheet, the MBI5027 is a \"16-bit Constant Current LED Sink Driver with Open/Short Circuit Detection\". The Mbi5027 binding is based on and is compatible with the more general ShiftRegister binding. The Mbi5027 binding adds error detection functionality. Either binding can be used to control the MBI5027. The MBI5027 is similar to the commonly used SN74HC595 shift register, with some key differences. The MBI5027 has 16 inputs (and can control 16 LEDs) while the SN74HC595 has 8 outputs. The MBI5027 is a current sink, which means you connect the cathode (ground), not anode (power) legs, to its pins. The current comes towards the sink, not away from it. The SN74HC595 is a current source and requires the opposite wiring due to the opposite direction of current. The MBI5027 provides a configurable constant current, which means that resistors are not needed per input. A single resistor is used, connected to R-EXT, to configure the current. The MBI5027 provides the ability to detect errors, per input. The SN74HC595 provides a storage register clear capability, which the MBI5027 lacks. The MBI5027 and SN74HC595 can be controlled by the same API for their basic operations; they are protocol compatible. Note: The MBI5168 is an 8-bit constant current sink without error detection, making it a more direct comparison to the SN74HC595. The MBI5027 sample demonstrates how to use the shift register. The generic shift register sample is more extensive and is compatible with the MBI5027. Documentation You can find the datasheet here Purchase: Not widely available. aliexpress.com/ was used to purchase the unit used to write this binding. Usage The following example code demonstrates how to use the MBI5027 with its most basic functions. Mbi5027 sr = new(Mbi5027PinMapping.Minimal); // Light up three of first four LEDs sr.ShiftBit(1); sr.ShiftBit(1); sr.ShiftBit(0); sr.ShiftBit(1); sr.Latch(); // Display for 1s Thread.Sleep(1000); // Clear register sr.ShiftClear(); // Write to all 16 registers with two byte values // The `false` parameter avoids latching the storage register after the first call to `ShiftByte` sr.ShiftByte(0b_1101_1010, false); sr.ShiftByte(0b_1010_1101); If you want to use SPI, see the ShiftRegister binding, which includes more information on SPI. The following image demonstrate a binary clock counting example . Example circuit The following breadboard circuit demonstrates the correct wiring pattern, including error detection. It is easy to mis-wire the MBI5027. The following image captures the most basic aspects for correct configuration. The following are key aspects to ensure are correct: Pin 24 (VDD) must be wired to 5v for error correction to work correctly. Pin 23 (R-EXT) must be connected to ground with a resistor, which configures the constant current. Loads must connect to the MBI5027 with their cathode legs. In this example, the LED is connected to the ground rail via its anode leg and to a MBI5027 input pin via its cathode leg. Error detection The MBI5027 provides the ability to detect errors, per output. This is very useful for remote deployments, to determine if repairs are required (for a traffic sign, for example). The MBI5027 requires transitioning to an error detection mode to detect errors and then back to normal mode for normal operation. The following example code demonstrates how to detect output errors with the MBI5027. var sr = new Mbi5027(Mbi5027PinMapping.Complete); // switch to error detection mode sr.EnableDetectionMode(); // read error states, per output var index = sr.BitLength - 1; foreach (var value in sr.ReadOutputErrorStatus()) { Debug.WriteLine($\"Bit {index--}: {value}\"); } // switch back to normal mode sr.EnableNormalMode(); Per the datasheet, data can be shifted into the storage register while reading the output error status and before re-entering normal mode. When all 16 outputs are in use, and no errors are detected, you will see the following output given this code. A Low state would be shown if the output is unused, is misconfigured or other error condition. You can create this situation by disconnecting one of the input connections on the MBI5027. Bit 15: High Bit 14: High Bit 13: High Bit 12: High Bit 11: High Bit 10: High Bit 9: High Bit 8: High Bit 7: High Bit 6: High Bit 5: High Bit 4: High Bit 3: High Bit 2: High Bit 1: High Bit 0: High Note: Error detection was found to work only with 5v power. When 3.3v power was used, error detection did not work correctly."
  },
  "devicesdetails/Mcp25xxx/README.html": {
    "href": "devicesdetails/Mcp25xxx/README.html",
    "title": "Mcp25xxx device family - CAN bus | nanoFramework Documentation",
    "keywords": "Mcp25xxx device family - CAN bus This binding is currently not finished. Please consider contributing to help us finish it. The MCP25XXX is a stand-alone CAN controller and includes features like faster throughput, databyte filtering, and support for time-triggered protocols. Documentation MCP25625 PICtail Plus Daughter Board (ADM00617) MCP25625 Mini Can Bus Shield (MCP2515 compatible) CAN-BUS Shield TotalPhase CAN tools MCP25XXX devices contain different markings to distinguish features like interfacing, packaging, and temperature ratings. For example, MCP25625 contains a CAN transceiver. Please review specific datasheet for more information. MCP2515 datasheet MCP25625 datasheet Usage Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. You can create a Mcp25625 device like this: SpiConnectionSettings spiConnectionSettings = new(1, 42); SpiDevice spiDevice = SpiDevice.Create(spiConnectionSettings); Mcp25625 mcp25xxx = new Mcp25625(spiDevice); Read all the registers You can read all the registers like this: Debug.WriteLine(\"Read Instruction for All Registers\"); Array addresses = Enum.GetValues(typeof(Address)); foreach (Address address in addresses) { byte addressData = mcp25xxx.Read(address); Debug.WriteLine($\"0x{(byte)address:X2} - {address,-10}: 0x{addressData:X2}\"); } to read a single register, just use the Address enum. RX Status The RX status is available like this: Debug.WriteLine(\"Rx Status Instruction\"); RxStatusResponse rxStatusResponse = mcp25xxx.RxStatus(); Debug.WriteLine($\"Value: 0x{rxStatusResponse.ToByte():X2}\"); Debug.WriteLine($\"Filter Match: {rxStatusResponse.FilterMatch}\"); Debug.WriteLine($\"Message Type Received: {rxStatusResponse.MessageTypeReceived}\"); Debug.WriteLine($\"Received Message: {rxStatusResponse.ReceivedMessage}\"); Read Status The Read status is available like this: Debug.WriteLine(\"Read Status Instruction\"); ReadStatusResponse readStatusResponse = mcp25xxx.ReadStatus(); Debug.WriteLine($\"Value: 0x{readStatusResponse:X2}\"); Debug.WriteLine($\"Rx0If: {readStatusResponse.HasFlag(ReadStatusResponse.Rx0If)}\"); Debug.WriteLine($\"Rx1If: {readStatusResponse.HasFlag(ReadStatusResponse.Rx1If)}\"); Debug.WriteLine($\"Tx0Req: {readStatusResponse.HasFlag(ReadStatusResponse.Tx0Req)}\"); Debug.WriteLine($\"Tx0If: {readStatusResponse.HasFlag(ReadStatusResponse.Tx0If)}\"); Debug.WriteLine($\"Tx0Req: {readStatusResponse.HasFlag(ReadStatusResponse.Tx0Req)}\"); Debug.WriteLine($\"Tx1If: {readStatusResponse.HasFlag(ReadStatusResponse.Tx1If)}\"); Debug.WriteLine($\"Tx1Req: {readStatusResponse.HasFlag(ReadStatusResponse.Tx1Req)}\"); Debug.WriteLine($\"Tx2Req: {readStatusResponse.HasFlag(ReadStatusResponse.Tx2Req)}\"); Debug.WriteLine($\"Tx2If: {readStatusResponse.HasFlag(ReadStatusResponse.Tx2If)}\"); Transmit a message You can transmit a message like this: Debug.WriteLine(\"Transmit Message\"); mcp25xxx.WriteByte( new CanCtrl(CanCtrl.PinPrescaler.ClockDivideBy8, false, false, false, OperationMode.NormalOperation)); byte[] data = new byte[] { 0b0000_0001, 0b0010_0011, 0b0100_0101, 0b0110_0111, 0b1000_1001 }; mcp25xxx.Write( Address.TxB0Sidh, new byte[] { new TxBxSidh(0, 0b0000_1001).ToByte(), new TxBxSidl(0, 0b001, false, 0b00).ToByte(), new TxBxEid8(0, 0b0000_0000).ToByte(), new TxBxEid0(0, 0b0000_0000).ToByte(), new TxBxDlc(0, data.Length, false).ToByte() }); mcp25xxx.Write(Address.TxB0D0, data); // Send with TxB0 buffer. mcp25xxx.RequestToSend(true, false, false); cp25xxx.RequestToSend(false, false, true); Note : You will find detailed way of using this binding in the sample file Binding Notes More details will be added in future PR once core CAN classes/interfaces are determined."
  },
  "devicesdetails/Mcp3428/README.html": {
    "href": "devicesdetails/Mcp3428/README.html",
    "title": "Mcp3428 - Analog to Digital Converter (I2C) | nanoFramework Documentation",
    "keywords": "Mcp3428 - Analog to Digital Converter (I2C) The library implements the Microchip MCP3428 16 bit A/D converter with I2C interface. It has hardware configurable I2C address and software configurable resolution and gain. Can work in continuous and on-demand conversion modes. Documentation \"The MCP3426, MCP3427 and MCP3428 devices (MCP3426/7/8) are the low noise and high accuracy 16 Bit Delta-Sigma Analog-to-Digital (ΔΣ A/D) Converter family members of the MCP342X series from Microchip Technology Inc. These devices can convert analog inputs to digital codes with up to 16 bits of resolution.\" - Datasheet The 3 devices differ only in addressing capability and channel number. The library implements all of them. MCP3428 datasheet Board Usage Simple example for measuring LED forward voltage using the MCP3428 ADC and a MCU. // I2C addres based on pin configuration var addr = Mcp3428.AddressFromPins(PinState.Low, PinState.Low); var options = new I2cConnectionSettings(1, addr); using (var dev = new UnixI2cDevice(options)) using (var adc = new Mcp3428(dev, ModeEnum.OneShot, ResolutionEnum.Bit16, GainEnum.X1)) { var ch1 = adc.ReadChannel(0); Debug.WriteLine($\"LED forward voltage value: {ch1} V\"); } On the MCP3428 you can select 8 different I2C addresses that the device answers on. It's done by connecting two pins, Adr0 and Adr1 to supply voltage or ground or leaving then floating. The library has a helper method to choose the address based on pin states. With this instantiating the device and reading the first channel is done like this: var options = new I2cConnectionSettings(1, Mcp3428.AddressFromPins(PinState.Low, PinState.Floating)); using (var dev = new UnixI2cDevice(options)) using (var adc = new Mcp3428(dev)) // Default settings { var ch1 = adc.ReadChannel(0); Debug.WriteLine($\"ADC Channel value: {ch1} V\"); } The library provides an async API as reading with 16 bit resolution can take up to 60-80ms. It's in a separate class called Mcp3428Async ."
  },
  "devicesdetails/Mcp3xxx/README.html": {
    "href": "devicesdetails/Mcp3xxx/README.html",
    "title": "MCP3xxx family of Analog to Digital Converters | nanoFramework Documentation",
    "keywords": "MCP3xxx family of Analog to Digital Converters Some devices like the Raspberry Pi cannot read analog values directly so rely on analog to digital converters , like the ones available from Microchip in the Mcp3000, Mcp3200 and Mcp3300 ranges. These chips can be accessed as an SPI device or manually via raw GPIO pins. Normally all MCU has an analogic capability but the number of pins can be limited. This is typically useful when you want your MCU to have more than the number of ADC available. Another case is if you need a different resolution or voltage reference. You can use these converters in your project to access analog devices. The following fritzing diagram illustrates one way to wire up the Mcp3008, with an ESP32 and a potentiometer. Documentation The sample is based on following resources: Analog Inputs for Raspberry Pi Using the MCP3008 Raspberry Pi Analog to Digital Converters . Raspbery Pi Analog Input with MCP3008 MCP3008.py Major thanks to Adafruit for providing python implementations, which were ported to C# for this sample. Usage Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. Hardware elements The following elements are used in this sample: Potentiometer MCP3008 Accessing the MCP3008 via SPI The MCU has support for SPI. You can use the following code to access the MCP3008 via hardware SPI : var hardwareSpiSettings = new SpiConnectionSettings(1, 42) { ClockFrequency = 1000000 }; using (SpiDevice spi = SpiDevice.Create(hardwareSpiSettings)) using (Mcp3008 mcp = new Mcp3008(spi)) { while (true) { double value = mcp.Read(0); value = value / 10.24; value = Math.Round(value); Debug.WriteLine($\"{value}%\"); Thread.Sleep(500); } } The following pin layout can be used: MCP3008 VDD to MCU 3.3V MCP3008 VREF to MCU 3.3V MCP3008 AGND to MCU GND MCP3008 DGND to MCU GND MCP3008 CLK to MCU SCLK MCP3008 DOUT to MCU MISO MCP3008 DIN to MCU MOSI MCP3008 CS/SHDN to MCU CE0 Accessing the MCP3008 via GPIO You can also access the MCP3008 via GPIO pins, implementing SPI manually. This method is referred to as bit-banging . You can use the following code to access the MCP3008 via GPIO : using (SpiDevice spi = new SoftwareSpi(clk: 18, miso: 23, mosi: 24, cs: 25)) using (Mcp3008 mcp = new Mcp3008(spi)) { while (true) { double value = mcp.Read(0); value = value / 10.24; value = Math.Round(value); Debug.WriteLine($\"{value}%\"); Thread.Sleep(500); } } The following pin layout can be used: MCP3008 VDD to MCU 3.3V MCP3008 VREF to MCU 3.3V MCP3008 AGND to MCU GND MCP3008 DGND to MCU GND MCP3008 CLK to any valid GPIO on the MCU MCP3008 DOUT to any valid GPIO on the MCU MCP3008 DIN to any valid GPIO on the MCU MCP3008 CS/SHDN to any valid GPIO on the MCU Processing the data Independent of the way in which you access the MCP3008 chip, the code to process its results is the same, which follows. while (true) { double value = mcp.Read(0); value = value / 10.24; value = Math.Round(value); Debug.WriteLine(value); Thread.Sleep(500); } The chip is 10-bit, which means that it will generate values from 0-1023 (recall that 2^10 is 1024). We can transform the value to a more familiar 0-100 scale by dividing the 10-bit value by 10.24. Remarks These bindings support the following ADC's Mcp3001 10 bit resolution with a single pseudo-differential input. Mcp3002 10 bit resolution with two single ended inputs or a single pseudo-differential input. Mcp3004 10 bit resolution with four single ended inputs or two single pseudo-differential inputs. Mcp3008 10 bit resolution with eight single ended inputs or four single pseudo-differential inputs. Mcp3201 12 bit resolution with a single pseudo-differential input. Mcp3202 12 bit resolution with two single ended inputs or a single pseudo-differential input. Mcp3204 12 bit resolution with four single ended inputs or two single pseudo-differential inputs. Mcp3208 12 bit resolution with eight single ended inputs or four single pseudo-differential inputs. Mcp3301 13 bit signed resolution with a single true differential input. Mcp3202 12 bit resolution with four single ended inputs or 13 bit signed resolution with two true differential inputs. Mcp3304 12 bit resolution with eight single ended inputs or 13 bit signed resolution with four true differential inputs. Note: Currently untested on the Mcp33xx family."
  },
  "devicesdetails/Mcp9808/README.html": {
    "href": "devicesdetails/Mcp9808/README.html",
    "title": "MCP9808 - Digital Temperature Sensor | nanoFramework Documentation",
    "keywords": "MCP9808 - Digital Temperature Sensor Microchip Technology Inc.’s MCP9808 digital temperature sensor converts temperatures between -20°C and +100°C to a digital word with ±0.25°C/±0.5°C (typical/maximum) accuracy Documentation You can find the datasheet here Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Hardware Required MCP9808 Male/Female Jumper Wires Circuit SCL - SCL SDA - SDA VCC - 5V GND - GND Code I2cConnectionSettings settings = new I2cConnectionSettings(1, Mcp9808.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using(Mcp9808 sensor = new Mcp9808(device)) { while (true) { Debug.WriteLine($\"Temperature: {sensor.Temperature.Celsius} ℃\"); Debug.WriteLine(); Thread.Sleep(1000); } }"
  },
  "devicesdetails/Mfrc522/README.html": {
    "href": "devicesdetails/Mfrc522/README.html",
    "title": "MFRC522 - RFID reader | nanoFramework Documentation",
    "keywords": "MFRC522 - RFID reader MFRC522 is a very cheap RFID/NFC reader for Iso 14443 Type A cards. Part of those cars are the Mifare and Ultralight family. This reader implement the proprietary Mifare cryptography protocol and can be used transparently. Documentation MFRC5222 Datasheet Usage MFRC522 supports SPI, I2C and UART (Serial Port). You can create the reader with any of those protocols. Note : most of the popular boards you'll buy are SPI only. This documentation will focus on SPI. You have in the samples more information on how to setup I2C and UART. GpioController gpioController = new GpioController(); // adjust the GPIO used for the hard reset int pinReset = 21; // Default on ESP32: // GPIO23 = MOSI; GPIO25 = MISO; GPIO19 = Clock // Uncomment for SPI SpiConnectionSettings connection = new(1, 22); // Here you can use as well MfRc522.MaximumSpiClockFrequency which is 10_000_000 // Anything lower will work as well connection.ClockFrequency = 5_000_000; SpiDevice spi = SpiDevice.Create(connection); MfRc522 mfrc522 = new(spi, pinReset, gpioController, false); The code will create an instance of MFRC522 and will use the pin GPIO21 as the hardware rest pin and will create an GpioController automatically from the default driver. Check the detailed [samples] for more elements. More detailed examples shows how to use other type or cards. You can get the version using the Version property. Debug.WriteLine($\"Version: {mfrc522.Version}, version should be 1 or 2. Some clones may appear with version 0\"); Keep in mind that having a version which is 0.0 doesn't necessary means that your reader is not working properly, if you bought a cheap copy of an original MFRC522, the internal version may not be recognized. MFRC522 only supports ISO 14443 Type A. You can pull a card like this: bool res; Data106kbpsTypeA card; do { res = mfrc522.ListenToCardIso14443TypeA(out card, TimeSpan.FromSeconds(2)); Thread.Sleep(res ? 0 : 200); } while (!res); As soon as a card will be detected, it will get out a Data106kbpsTypeA class which is a card. You will have the Unique Identifier from the card as well as the rest of the elements to help identifying it. You can then create a Mifare card and fo operation on it: var mifare = new MifareCard(mfrc522, 0); mifare.SerialNumber = card.NfcId; mifare.Capacity = MifareCardCapacity.Mifare1K; mifare.KeyA = MifareCard.DefaultKeyA; mifare.KeyB = MifareCard.DefaultKeyB; mifare.BlockNumber = 0; mifare.Command = MifareCardCommand.AuthenticationB; ret = mifare.RunMifareCardCommand(); if (ret < 0) { mifare.ReselectCard(); Debug.WriteLine($\"Error reading bloc: {mifare.BlockNumber}\"); } else { mifare.Command = MifareCardCommand.Read16Bytes; ret = mifare.RunMifareCardCommand(); if (ret >= 0) { if (mifare.Data is object) { Debug.WriteLine($\"Bloc: {mifare.BlockNumber}, Data: {BitConverter.ToString(mifare.Data)}\"); } } else { mifare.ReselectCard(); Debug.WriteLine($\"Error reading bloc: {mifare.BlockNumber}\"); } } Important : you have to do the ReselectCard() operation every time you have a failure in reading or authentication. By default the card will stop responding. This behavior is wanted by design to make is longer to brute force the authentication mechanism. The samples shows a way how to find a key from known keys for NDEF scenarios for example. Note that the sample is not fully optimize, it is to help understanding what as the mechanism behind. Other notes The SPI implementation has been deeply tested. The I2C and UART has been barely tested due to lack of hardware support. So please open issues if you have any issue. When using I2C, the address can be setup using the hardware pin, it's the reason why there is no default address. If you are using UART, it is more than strongly recommended to use as high as possible serial baud transfer."
  },
  "devicesdetails/Mlx90614/README.html": {
    "href": "devicesdetails/Mlx90614/README.html",
    "title": "MLX90614 - Infra Red Thermometer | nanoFramework Documentation",
    "keywords": "MLX90614 - Infra Red Thermometer The MLX90614 is an Infra Red thermometer for noncontact temperature measurements. Both the IR sensitive thermopile detector chip and the signal conditioning ASSP are integrated in the same TO-39 can. Thanks to its low noise amplifier, 17-bit ADC and powerful DSP unit, a high accuracy and resolution of the thermometer is achieved. Documentation You can find the datasheet here Board Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Hardware Required MLX90614 Male/Female Jumper Wires Circuit SCL - SCL SDA - SDA VCC - 5V/3V GND - GND Warning: MLX90614 includes 5V and 3V versions! Code I2cConnectionSettings settings = new I2cConnectionSettings(1, Mlx90614.DefaultI2cAddress); I2cDevice i2cDevice = I2cDevice.Create(settings); using (Mlx90614 sensor = new Mlx90614(i2cDevice)) { while (true) { Debug.WriteLine($\"Ambient: {sensor.ReadAmbientTemperature().Celsius} ℃\"); Debug.WriteLine($\"Object: {sensor.ReadObjectTemperature().Celsius} ℃\"); Debug.WriteLine(); Thread.Sleep(1000); } } Result"
  },
  "devicesdetails/Mpr121/README.html": {
    "href": "devicesdetails/Mpr121/README.html",
    "title": "MPR121 - Proximity Capacitive Touch Sensor Controller | nanoFramework Documentation",
    "keywords": "MPR121 - Proximity Capacitive Touch Sensor Controller The 12-channels I2C proximity capacitive touch sensor controller. Documentation MPR121 datasheet Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Default configuration with manually updating of channel statuses var i2cDevice = I2cDevice.Create(new I2cConnectionSettings(busId: 1, deviceAddress: Mpr121.DefaultI2cAddress)); var mpr121 = new Mpr121(device: i2cDevice); var statuses = mpr121.ReadChannelStatuses(); var status = statuses[Channels.Channel01] ? \"pressed\" : \"released\"; Debug.WriteLine($\"The 1st channel is {status}\"); Channel statuses auto refresh var i2cDevice = I2cDevice.Create(new I2cConnectionSettings(busId: 1, deviceAddress: Mpr121.DefaultI2cAddress)); // Initialize controller with default configuration and auto-refresh the channel statuses every 100 ms. var mpr121 = new Mpr121(device: i2cDevice, periodRefresh: 100); // Subscribe to channel statuses updates. mpr121.ChannelStatusesChanged += (object sender, ChannelStatusesChangedEventArgs e) => { var channelStatuses = e.ChannelStatuses; // do something. }; Custom MPR121 registers configuration var i2cDevice = I2cDevice.Create(new I2cConnectionSettings(busId: 1, deviceAddress: Mpr121.DefaultI2cAddress)); var config = new Mpr121Configuration { MaxHalfDeltaRising = 0x01, NoiseHalfDeltaRising = 0x01, NoiseCountLimitRising = 0x00, FilterDelayCountLimitRising = 0x00, MaxHalfDeltaFalling = 0x01, NoiseHalfDeltaFalling = 0x01, NoiseCountLimitFalling = 0xFF, FilterDelayCountLimitFalling = 0x01, ElectrodeTouchThreshold = 0x0F, ElectrodeReleaseThreshold = 0x0A, ChargeDischargeTimeConfiguration = 0x04, ElectrodeConfiguration = 0x0C }; var mpr121 = new Mpr121(device: i2cDevice, configuration: config); This sample demonstrates how to read channel statuses using auto-refresh configuration. Handling the channel statuses changes mpr121.ChannelStatusesChanged += (object sender, ChannelStatusesChangedEventArgs e) => { var channelStatuses = e.ChannelStatuses; // do something. }; Binding Notes The binding provides different options of device configuration. The device can be configured to update the channel statuses periodically. Also it supports custom configuration of controller registers."
  },
  "devicesdetails/Mpu6886/README.html": {
    "href": "devicesdetails/Mpu6886/README.html",
    "title": "Mpu6886 - accelerometer and gyroscope | nanoFramework Documentation",
    "keywords": "Mpu6886 - accelerometer and gyroscope The MPU-6886 is a 6-axis motion tracking sensor that combines a 3-axis gyroscope and a 3-axis accelerometer including the following features: gyroscope programmable FSR of ±250 dps, ±500 dps, ±1000 dps, and ±2000 dps accelerometer with programmable FSR of ±2g, ±4g, ±8g, and ±16g Documentation Datasheet , register descriptions start at page 32. This sensor is used in for example the M5StickC Plus development kit , initialization code can be found here . Usage Create the Mpu6886 class and pass the I2C device. By default the I2C address for this sensor is 0x68 . // I2C pins need to be configured, for example for pin 22 & 21 for // the M5StickC Plus. These pins might be different for other boards. Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); I2cConnectionSettings settings = new(1, Mpu6886AccelerometerGyroscope.DefaultI2cAddress); using (Mpu6886AccelerometerGyroscope ag = new(I2cDevice.Create(settings))) { Debug.WriteLine(\"Start calibration ...\"); var offset = ag.Calibrate(1000); Debug.WriteLine($\"Calibration done, calculated offsets {offset.X} {offset.Y} {offset.Y}\"); Debug.WriteLine($\"Internal temperature: {ag.GetInternalTemperature().DegreesCelsius} C\"); while (true) { var acc = ag.GetAccelerometer(); var gyr = ag.GetGyroscope(); Debug.WriteLine($\"Accelerometer data x:{acc.X} y:{acc.Y} z:{acc.Z}\"); Debug.WriteLine($\"Gyroscope data x:{gyr.X} y:{gyr.Y} z:{gyr.Z}\\n\"); Thread.Sleep(100); } } Sample output Start calibration ... Calibration done, calculated offsets 49.189 -86.21099999 -86.21099999 Internal temperature: 64.21664626 C Accelerometer data x:-0.041503906 y:0 z:1.056884765 Gyroscope data x:4.94384765 y:-8.60595703 z:-15.68603515 Accelerometer data x:-0.040771484 y:-0.0051269531 z:1.062988281 Gyroscope data x:4.94384765 y:-7.56835937 z:-15.014648437 Accelerometer data x:-0.046630859 y:-0.0068359375 z:1.055175781 Gyroscope data x:3.60107421 y:-7.62939453 z:-15.1977539 Accelerometer data x:-0.049560546 y:-0 z:1.061279296 Gyroscope data x:4.39453125 y:-7.32421875 z:-14.28222656 See samples for a complete sample application. Calibration The gyroscope can be calibrated using the Calibrate function. With the iterations parameter you can specify how many values should be read from the sensor to calculate an average (1000 iterations seems to be a good number). During the calibration you want to keep the sensor still and in a fixed position (e.g. lying flat on a table). The Calibrate function will write the values to the corresponding compensation registers of the sensor, values are corrected when retrieved automatically. The return value of the Calibrate method gives a vector containing the 3 (for the X,Y and Z axes) calculated compensation values. var offset = ag.Calibrate(1000); Debug.WriteLine($\"Calibration done, calculated offsets {offset.X} {offset.Y} {offset.Y}\"); It is possible to write directly to the compensation registers using the SetGyroscopeOffset function. You might want to do this when you create your own custom calibration method, or you retrieve existing calibration data from a persisted data store or memory location. ⚠ When the devices reboots, the offset registers are cleared. So if you don't persist the calibration data yourself you will have to run the calibration method every time the device boots. Sleep mode The sensor can be put in sleep mode by calling the Sleep function. After that the WakeUp function should be called. Setting scales Both for the gyroscope and accelerometer you can set the desired scales using the AccelerometerScale and GyroscopeScale properties. // Set the scale of the accelerometer to 2G ag.AccelerometerScale = AccelerometerScale.Scale2G; Setting enabled axes By default all gyroscope and accelerometer axes are enabled. If desired you can specify explicitly which axes should be enabled. In that case, all other axes will be disabled. When an axis is disabled, data can still be read for that axis but the values will not change anymore. // Enable only the X axis of the gyroscope and accelerometer ag.EnabledAxes = EnabledAxis.GyroscopeX | EnabledAxis.AccelerometerX; Features not implemented The following features are enabled in the MPU6886 but not yet implemented in this driver: registers 0x05 to 0x0b : low noise to low power offset registers 0x0d to 0x0F : self test register 0x1a : FIFO mode, DLPF (digital low pass filter) register 0x1d bit 0 to 3: DLPF register 0x1e bit 4 to 6: averaging filter for low power mode registers 0x20 to 0x22 : threshold for wake-on motion register 0x36 : fsync interrupt status register 0x37 : INT/DRDY pin config register 0x39 and 0x3a : FIFO watermark interrupt register 0x60 and 0x61 : FIFO watermark interrupt register 0x68 : signal path reset register 0x69 : acc. intelligence control"
  },
  "devicesdetails/Mpu9250/README.html": {
    "href": "devicesdetails/Mpu9250/README.html",
    "title": "MPU6500/MPU9250 - Gyroscope, Accelerometer, Temperature and Magnetometer (MPU9250 only) | nanoFramework Documentation",
    "keywords": "MPU6500/MPU9250 - Gyroscope, Accelerometer, Temperature and Magnetometer (MPU9250 only) MPU6500 is a 3 axis Gyroscope, 3 axis Accelerometer and Temperature sensor that can be accessed either thru I2C or SPI. This implementation is only for I2C. The sensor can be found in various implementation but its main usage is in the MPU9250. MPU9250 is a 3 axis Gyroscope, 3 axis Accelerometer, 3 axis Magnetometer and Temperature sensor that can be accessed either thru I2C or SPI. This implementation is only for I2C. The sensor can be found in various implementation like Grove or Sparkfun . MPU9250 incorporate a MPU6500 and an AK8963. The Magnetometer used is an AK8963 . In general, it is managed thru the main MPU9250 and setup as a replica I2C. All operations go thru the MPU9250. In some cases, the AK8963 is exposed and the operations are not going thru the MPU9250 but directly. Documentation Registers documentation Product specifications Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. General case with AK8963 is not exposed (where you can't find it on the I2C bus at the address 0x0C) var mpui2CConnectionSettingmpus = new I2cConnectionSettings(1, Mpu9250.DefaultI2cAddress); Mpu9250 mpu9250 = new Mpu9250(I2cDevice.Create(mpui2CConnectionSettingmpus)); In case the AK8963 is exposed, so you can reach it directly, you can then use the following code: var mpui2CConnectionSettingmpus = new I2cConnectionSettings(1, Mpu9250.DefaultI2cAddress); using Mpu9250 mpu9250 = new Mpu9250(I2cDevice.Create(mpui2CConnectionSettingmpus), i2CDeviceAk8963: I2cDevice.Create(new I2cConnectionSettings(1, Ak8963.DefaultI2cAddress))); You can find an example in the sample directory. Usage is straightforward including the possibility to have a calibration for all sub sensors. var mpui2CConnectionSettingmpus = new I2cConnectionSettings(1, Mpu9250.DefaultI2cAddress); Mpu9250 mpu9250 = new Mpu9250(I2cDevice.Create(mpui2CConnectionSettingmpus)); var gyro = mpu9250.GetGyroscope(); Debug.WriteLine($\"Gyro X = {gyro.X, 15}\"); Debug.WriteLine($\"Gyro Y = {gyro.Y, 15}\"); Debug.WriteLine($\"Gyro Z = {gyro.Z, 15}\"); var acc = mpu9250.GetAccelerometer(); Debug.WriteLine($\"Acc X = {acc.X, 15}\"); Debug.WriteLine($\"Acc Y = {acc.Y, 15}\"); Debug.WriteLine($\"Acc Z = {acc.Z, 15}\"); Debug.WriteLine($\"Temp = {mpu9250.Temperature.Celsius.ToString(\"0.00\")} °C\"); var magne = mpu9250.ReadMagnetometer(true); Debug.WriteLine($\"Mag X = {magne.X, 15}\"); Debug.WriteLine($\"Mag Y = {magne.Y, 15}\"); Debug.WriteLine($\"Mag Z = {magne.Z, 15}\"); Self-test A self-test is available for the gyroscope and the accelerometer. var resSelfTest = mpu9250.RunGyroscopeAccelerometerSelfTest(); Debug.WriteLine($\"Self test:\"); Debug.WriteLine($\"Gyro X = {resSelfTest.Item1.X} vs >0.005\"); Debug.WriteLine($\"Gyro Y = {resSelfTest.Item1.Y} vs >0.005\"); Debug.WriteLine($\"Gyro Z = {resSelfTest.Item1.Z} vs >0.005\"); Debug.WriteLine($\"Acc X = {resSelfTest.Item2.X} vs >0.005 & <0.015\"); Debug.WriteLine($\"Acc Y = {resSelfTest.Item2.Y} vs >0.005 & <0.015\"); Debug.WriteLine($\"Acc Z = {resSelfTest.Item2.Z} vs >0.005 & <0.015\"); The returned data are the raw data and allows you to estimate the quality of the test. The first item of the tuple is the gyroscope and the second one the accelerometer. No self-test is available for the magnetometer. Calibration and bias You can calibrate the Gyroscope and the Accelerometer at the same time. This action is as well correcting the registers directly in the MPU9250 chip. Those data are lost in case of power stop but stays in case of soft reset. Debug.WriteLine(\"Running Gyroscope and Accelerometer calibration\"); mpu9250.CalibrateGyroscopeAccelerometer(); Debug.WriteLine(\"Calibration results:\"); Debug.WriteLine($\"Gyro X bias = {mpu9250.GyroscopeBias.X}\"); Debug.WriteLine($\"Gyro Y bias = {mpu9250.GyroscopeBias.Y}\"); Debug.WriteLine($\"Gyro Z bias = {mpu9250.GyroscopeBias.Z}\"); Debug.WriteLine($\"Acc X bias = {mpu9250.AccelerometerBias.X}\"); Debug.WriteLine($\"Acc Y bias = {mpu9250.AccelerometerBias.Y}\"); Debug.WriteLine($\"Acc Z bias = {mpu9250.AccelerometerBias.Z}\"); Calibration is as well available for the magnetometer (the AK8963). For this sensor. Debug.WriteLine(\"Magnetometer calibration is taking couple of seconds, please be patient!\"); Debug.WriteLine(\"Please make sure you are not close to any magnetic field like magnet or phone. Move the sensor in all possible directions\"); var mag = mpu9250.CalibrateMagnetometer(); Debug.WriteLine($\"Correction factor bias:\"); Debug.WriteLine($\"Mag X = {mpu9250.MagnometerBias.X}\"); Debug.WriteLine($\"Mag Y = {mpu9250.MagnometerBias.Y}\"); Debug.WriteLine($\"Mag Z = {mpu9250.MagnometerBias.Z}\"); See AK8963 calibration for more information on how Magnetometer calibration is working. Please note that you have a full code sample to read and save data in a file to go deeper into the Magnetometer calibration. Note : AK8963 calibration must be performed before other calibrations and before using any other part of the sensors. Units Al axis are oriented this way: +Z +Y \\ | / \\ | / |/ /| / | / | +X Gyroscope The unit used for the gyroscope are degree per seconds. Accelerometer The unit used for the accelerometer is G. Magnetometer The unit used for the magnetometer is µTesla. Temperature The Temperature is a normalized Units.Temperature which can provide Celsius, Kelvin or Fahrenheit degrees. Measurement modes The MPU9250 offers a large variety of measurement modes. They can be changed and adjusted thru the properties like: MagnetometerMeasurementMode to adjust the type of measurement for the magnetometer MagnetometerOutputBitMode to select between 14 and 16 bits precision of the magnetometer AccelerometerRange to adjust the range of the accelerometer between 2, 4, 8 or 16 G AccelerometionScale to adjust the frequency of measurement from 5 Hz to 1130 Hz GyroscopeRange to adjust the range of the gyroscope from 250, 500, 1000 and 2000 degrees per second GyroscopeScale to adjust the frequency of measurement from 5 Hz to 8800 Hz SampleRateDivider allows you to reduce the number of samples for the gyroscope and the accelerometer. This feature is only available for some of the bandwidth modes. DisableModes allows you to disable any of the gyroscope and accelerometer axis Wake on motion A unique SetWakeOnMotion mode is available. It puts the MPU9250 in a low consumption, low measurement rate mode and trigger an interruption on the INT pin. mpu9250.SetWakeOnMotion(300, AccelerometerLowPowerFrequency.Frequency0Dot24Hz); // You'll need to attach the INT pin to a GPIO and read the level. Once going up, you have // some data and the sensor is awake // In order to simulate this without a GPIO pin, you will see that the refresh rate is very low // Setup here at 0.24Hz which means, about every 4 seconds while (true) { var acc = mpu9250.GetAccelerometer(); Debug.WriteLine($\"Acc X = {acc.X, 15}\"); Debug.WriteLine($\"Acc Y = {acc.Y, 15}\"); Debug.WriteLine($\"Acc Z = {acc.Z, 15}\"); Thread.Sleep(100); } FIFO mode The Fifo mode allows you to get the data by batch. You can select the mode thru FifoModes , then read the FifoCount property. You can then read the data thru ReadFifo Make sure you'll size the Span<byte> with FifoCount length. Data are in the order of the Register from 0x3B to 0x60 so you'll get your data in this order: ACCEL_XOUT_H and ACCEL_XOUT_L ACCEL_YOUT_H and ACCEL_YOUT_L ACCEL_ZOUT_H and ACCEL_ZOUT_L TEMP_OUT_H and TEMP_OUT_L GYRO_XOUT_H and GYRO_XOUT_L GYRO_YOUT_H and GYRO_YOUT_L GYRO_ZOUT_H and GYRO_ZOUT_L EXT_SENS_DATA_00 to EXT_SENS_DATA_24 It is then up to you to transform them into the correct data. You can multiply your raw data by AccelerometionScale and GyroscopeScale to convert them properly. I2C replica primitives 2 primitive functions allow to read and write any register in any of the replica devices. I2cWrite(I2cChannel i2cChannel, byte address, byte register, byte data) i2cChannel: The replica channel to attached to the I2C device address: The I2C address of the replica I2C element register: The register to write to the replica I2C element data: The byte data to write to the replica I2C element I2cRead(I2cChannel i2cChannel, byte address, byte register, SpanByte readBytes) i2cChannel: The replica channel to attached to the I2C device address: The I2C address of the replica I2C element register: The register to write to the replica I2C element readBytes: The read data Circuit The following fritzing diagram illustrates one way to wire up the MPU9250 with a MCU like ESP32 using I2C."
  },
  "devicesdetails/Multiplexing/README.html": {
    "href": "devicesdetails/Multiplexing/README.html",
    "title": "Iot.Device.Multiplexing | nanoFramework Documentation",
    "keywords": "Iot.Device.Multiplexing Generic helper implementation for pin multiplexing. See ShiftRegister or Sn74hc595 . Usage // Licensed to the .NET Foundation under one or more agreements. // The .NET Foundation licenses this file to you under the MIT license. using System; using System.Device.Gpio; using System.Threading; using Iot.Device.Multiplexing; int[] pins = new int[] { 4, 17, 27, 22, 5, 6, 13, 19 }; using IOutputSegment segment = new GpioOutputSegment(pins); CancellationTokenSource cts = new(); CancellationToken token = cts.Token; bool controlCRequested = false; TimeSpan delay = TimeSpan.FromSeconds(5); WriteLine(\"Light all LEDs\"); segment.TurnOffAll(); for (int i = 0; i < pins.Length; i++) { segment.Write(i, 1); } WriteLine(\"Light every other LED\"); segment.TurnOffAll(); for (int i = 0; i < pins.Length; i++) { segment.Write(i, i % 2); } WriteLine(\"Light every other (other) LED\"); segment.TurnOffAll(); for (int i = 0; i < pins.Length; i++) { segment.Write(i, (i + 1) % 2); } WriteLine(\"Display binary 128\"); segment.TurnOffAll(); for (int i = 0; i < pins.Length; i++) { segment.Write(128); } segment.TurnOffAll(); WriteLine(\"Done.\");"
  },
  "devicesdetails/Nrf24l01/README.html": {
    "href": "devicesdetails/Nrf24l01/README.html",
    "title": "nRF24L01 - Single Chip 2.4 GHz Transceiver | nanoFramework Documentation",
    "keywords": "nRF24L01 - Single Chip 2.4 GHz Transceiver The nRF24L01 is a single chip radio transceiver for the world wide 2.4 - 2.5 GHz ISM band. Documentation The bindging datasheet can be found here Board Note: the following diagram uses a Raspberry Pi. This can be achieved with any MCU having 2 available SPI. Usage Hardware Required nRF24L01 × 2 Male/Female Jumper Wires Connection for nRF1 VCC - 3.3V (Best) GND - GND MOSI - SPI0 MOSI (GPIO 10) MISO - SPI0 MISO (GPIO 9) SCK - SPI0 SCLK (GPIO 11) CSN - SPI0 CS0 (GPIO 8) CE - GPIO 23 IRQ - GPIO 24 Connection for nRF2 VCC - 3.3V (Best) GND - GND MOSI - SPI1 MOSI (GPIO 20) MISO - SPI1 MISO (GPIO 19) SCK - SPI1 SCLK (GPIO 21) CSN - SPI1 CS0 (GPIO 16) CE - GPIO 5 IRQ - GPIO 6 Code Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. SpiConnectionSettings senderSettings = new SpiConnectionSettings(1, 42) { ClockFrequency = Nrf24l01.SpiClockFrequency, Mode = Nrf24l01.SpiMode }; SpiConnectionSettings receiverSettings = new SpiConnectionSettings(2, 44) { ClockFrequency = Nrf24l01.SpiClockFrequency, Mode = Nrf24l01.SpiMode }; var senderDevice = SpiDevice.Create(senderSettings); var receiverDevice = SpiDevice.Create(receiverSettings); // SPI Device, CE Pin, IRQ Pin, Receive Packet Size using (Nrf24l01 sender = new Nrf24l01(senderDevice, 23, 24, 20)) { using (Nrf24l01 receiver = new Nrf24l01(receiverDevice, 5, 6, 20)) { // Set sender send address, receiver pipe0 address (Optional) byte[] receiverAddress = Encoding.UTF8.GetBytes(\"NRF24\"); sender.Address = receiverAddress; receiver.Pipe0.Address = receiverAddress; // Binding DataReceived event receiver.DataReceived += Receiver_ReceivedData; // Loop while (true) { sender.Send(Encoding.UTF8.GetBytes(\"Hello! .NET Core IoT\")); Thread.Sleep(2000); } } } private static void Receiver_ReceivedData(object sender, DataReceivedEventArgs e) { var raw = e.Data; var msg = Encoding.UTF8.GetString(raw); Debug.Write(\"Received Raw Data: \"); foreach (var item in raw) { Debug.Write($\"{item} \"); } Debug.WriteLine(); Debug.WriteLine($\"Message: {msg}\"); Debug.WriteLine(); } Result"
  },
  "devicesdetails/NumberHelper/README.html": {
    "href": "devicesdetails/NumberHelper/README.html",
    "title": "Iot.Device.NumberHelper | nanoFramework Documentation",
    "keywords": "Iot.Device.NumberHelper Generic helper implementation for DEC to BCD and BCD to DEC."
  },
  "devicesdetails/Pca95x4/README.html": {
    "href": "devicesdetails/Pca95x4/README.html",
    "title": "Pca95x4 - I2C GPIO Expander | nanoFramework Documentation",
    "keywords": "Pca95x4 - I2C GPIO Expander The PCA95x4 provides 8 bits of General Purpose parallel Input/Output (GPIO) expansion for I2C-bus applications. Documentation Philips I2C IO expanders application notes can be found here NXP PCA9534 datasheet PCA9534A datasheet PCA9554/PCA9554A datasheet Texas Instruments PCA9534 datasheet PCA9534A datasheet PCA9554 datasheet PCA9554A datasheet Board Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. This example shows how to write value out to 8 LEDs using a PCA95x4 device and a MCU. I2cConnectionSettings i2cConnectionSettings = new(1, 0x38); I2cDevice i2cDevice = I2cDevice.Create(i2cConnectionSettings); pca95x4 = new Pca95x4(i2cDevice); Cycle output bits pca95x4.Write(Register.Configuration, 0x00); // Make all outputs. pca95x4.Write(Register.OutputPort, 0xFF); // Set all outputs. for (int bitNumber = 0; bitNumber < 8; bitNumber++) { pca95x4.WriteBit(Register.OutputPort, bitNumber, false); // Clear output. Thread.Sleep(500); pca95x4.WriteBit(Register.OutputPort, bitNumber, true); // Set output. } Read Input Port pca95x4.Write(Register.Configuration, 0xFF); // Make all inputs. byte data = pca95x4.Read(Register.InputPort); Debug.WriteLine($\"Input Port: 0x{data:X2}\"); Check Input Register Polarity Inversion pca95x4.Write(Register.Configuration, 0xFF); // Make all inputs. byte data = pca95x4.Read(Register.InputPort); Debug.WriteLine($\"Input Register: 0x{data:X2}\"); pca95x4.InvertInputRegisterPolarity(true); data = pca95x4.Read(Register.InputPort); Debug.WriteLine($\"Input Register Polarity Inverted: 0x{data:X2}\"); pca95x4.InvertInputRegisterPolarity(false); data = pca95x4.Read(Register.InputPort); Debug.WriteLine($\"Input Register: 0x{data:X2}\"); Binding Notes PCA9534/PCA9554 and PCA9534A/PCA9554A are identical except for a few differences. The removal of the internal I/O pull-up resistor which greatly reduces power consumption when the I/Os are held LOW. Each has a fixed I2C address. This allows for up to 16 of these devices (8 of each) on the same I2C bus."
  },
  "devicesdetails/Pn5180/README.html": {
    "href": "devicesdetails/Pn5180/README.html",
    "title": "PN5180 - RFID and NFC reader | nanoFramework Documentation",
    "keywords": "PN5180 - RFID and NFC reader PN5180 is a RFID and NFC reader. It does supports various standards: ISO/IEC 14443 TypeA, ISO/IEC 14443 TypeB, ISO/IEC 15693 and ISO/IEC 18000-3 Mode 3. It does supports up to 848 kBit/s communication with 14443 type A cards. Documentation Official documentation can be fond here Application note on how to operate PN5180 without a library Board You will find different implementation of this board. All boards should have full SPI pins plus the reset and busy ones and additionally 5V and or 3.3V plus ground. Usage Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. You will find a full example in the samples directory . This example covers the usage of most of the public functions and properties. This example shows as well how to use Ultralight cards . PN5180 is operated thru SPI and GPIO. GPIO is used to control the SPI behavior as the PN5180 is using SPI in specific way. This does then require to manually manage the pin selection for SPI. And another pin called pin busy is used to understand when the PN5180 is available to receive and send information. The following code shows how to create a SPI driver, reset the PN5180 and create the class. // Note: the chip select used here won't be used by the module, so don't use the same pin var spi = SpiDevice.Create(new SpiConnectionSettings(1, 12) { ClockFrequency = Pn5180.SpiClockFrequency, Mode = Pn5180.SpiMode, DataFlow = DataFlow.MsbFirst }); // Reset the device var gpioController = new GpioController(); gpioController.OpenPin(4, PinMode.Output); gpioController.Write(4, PinValue.Low); Thread.Sleep(10); gpioController.Write(4, PinValue.High); Thread.Sleep(10); var pn5180 = new Pn5180(spi, 27, 18); You will note that the SPI maximum clock frenquency is preset with Pn5180.MaximumSpiClockFrequency , the maximum operation frequency is 7MHz. Same for the mode thru Pn5180.DefaultSpiMode . Data Flow has to be DataFlow.MsbFirst . In the previous example the pin 2 is used for busy and the pin 3 for the SPI selection. Note that you have to use a specific pin selection and cannot use the one which is associate with the SPI channel you create. Reset is done thru pin 4. It is recommended to reset the board before creating the class. Once created, you then need to select a card before you can actually exchange data with the card. Here is how to do it for an ISO 14443 Type A card: Data106kbpsTypeA cardTypeA; do { // This will try to select the card for 1 second and will wait 300 milliseconds before trying again if none is found var retok = _pn5180.ListenToCardIso14443TypeA(TransmitterRadioFrequencyConfiguration.Iso14443A_Nfc_PI_106_106, ReceiverRadioFrequencyConfiguration.Iso14443A_Nfc_PI_106_106, out cardTypeA, 1000); if (retok) { Debug.WriteLine($\"ISO 14443 Type A found:\"); Debug.WriteLine($\" ATQA: {cardTypeA.Atqa}\"); Debug.WriteLine($\" SAK: {cardTypeA.Sak}\"); Debug.WriteLine($\" UID: {BitConverter.ToString(cardTypeA.NfcId)}\"); // This is where you do something with the card } else { Thread.Sleep(300); } } while (true); And for an ISO 14443 Type B card: Data106kbpsTypeB card; do { // This will try to select the card for 1 second, if no card detected wait for 300 milliseconds and try again retok = _pn5180.ListenToCardIso14443TypeB(TransmitterRadioFrequencyConfiguration.Iso14443B_106, ReceiverRadioFrequencyConfiguration.Iso14443B_106, out card, 1000); if (!retok) { Thread.Sleep(300); continue; } Debug.WriteLine($\"ISO 14443 Type B found:\"); Debug.WriteLine($\" Target number: {card.TargetNumber}\"); Debug.WriteLine($\" App data: {BitConverter.ToString(card.ApplicationData)}\"); Debug.WriteLine($\" App type: {card.ApplicationType}\"); Debug.WriteLine($\" UID: {BitConverter.ToString(card.NfcId)}\"); Debug.WriteLine($\" Bit rates: {card.BitRates}\"); Debug.WriteLine($\" Cid support: {card.CidSupported}\"); Debug.WriteLine($\" Command: {card.Command}\"); Debug.WriteLine($\" Frame timing: {card.FrameWaitingTime}\"); Debug.WriteLine($\" Iso 14443-4 compliance: {card.ISO14443_4Compliance}\"); Debug.WriteLine($\" Max frame size: {card.MaxFrameSize}\"); Debug.WriteLine($\" Nad support: {card.NadSupported}\"); // Do something else, all operations you want with the card // Halt card if (_pn5180.DeselecCardTypeB(card)) { Debug.WriteLine($\"Card unselected properly\"); } else { Debug.WriteLine($\"ERROR: Card can't be unselected\"); } } while (true); Please note that the ListenToCardIso14443TypeA and ListenToCardIso14443TypeB can be configured with different transceiver and receiver configurations. Usually the configuration need to match but you can adjust and change them. See the section with Radio Frequency configuration for more information. A card will be continuously tried to be detected during the duration on your polling. If nothing is detected or if any issue, the function will return false. Specific for type B cards, they have a target number. This target number is needed to transcieve any information with the card. The PN5180 can support up to 14 cards at the same time. But you can only select 1 card at a time, so if you have a need for multiple card selected at the same time, it is recommended to chain this card detection with the number of cards you need to select and operate at the same time. Note that depending on the card, they may not been seen as still selected by the reader. You should deselect the Type B card at the end to release the target number. If not done, during the next poll, this implementation will test if the card is still present, keep it in this case. EEPROM You can fully access the PN5180 EEPROM. Here is an example on how to do it: // Maximum size of the EEPROM Span<byte> eeprom = stackalloc byte[255]; // This will read fully the EEPROM var ret = _pn5180.ReadAllEeprom(eeprom); Debug.WriteLine($\"EEPROM dump: success: {ret}, Data: {BitConverter.ToString(eeprom.ToArray())}\"); // This reads only the unique Identifier ret = _pn5180.ReadEeprom(EepromAddress.DieIdentifier, eeprom.Slice(0, 16)); Debug.WriteLine($\"EEPROM read, unique identifier: success: {ret}, Data: {BitConverter.ToString(eeprom.Slice(0, 16).ToArray())}\"); // Same as above ret = _pn5180.GetIdentifier(eeprom.Slice(0, 16)); // So you should see the exact same result than from reading manully the 16 bytes of the unique identifier Debug.WriteLine($\"GetIdentifier: success: {ret}, Data: {BitConverter.ToString(eeprom.Slice(0, 16).ToArray())}\"); // This tries to write in a read only part of the EEPROM ret = _pn5180.WriteEeprom(EepromAddress.DieIdentifier, eeprom.Slice(0, 1)); // So you'll receive false as an answer from the PN5180 Debug.WriteLine($\"Trying to write a read only EEPROM, this should return false: {ret}\"); // This is important to understand, if you write in the EEPROM and then try to read right after, // in most of the cases, the value won't change. After a reboot, you'll get the new value Debug.WriteLine($\"EEPROM writing will not be immediate. Some are only active after a reboot\"); Debug.WriteLine($\"changing second byte of UUID when acting as a card (first is always fix to 0x08)\"); ret = _pn5180.ReadEeprom(EepromAddress.NFCID1, eeprom.Slice(0, 3)); eeprom[0]++; Debug.WriteLine($\"IRQ_PIN_CONFIG: success: {ret}, Data: {BitConverter.ToString(eeprom.Slice(0, 3).ToArray())}\"); Debug.WriteLine($\"New value to write: {BitConverter.ToString(eeprom.Slice(0, 1).ToArray())}\"); ret = _pn5180.WriteEeprom(EepromAddress.NFCID1, eeprom.Slice(0, 3)); Debug.WriteLine($\"Wrote IRQ_PIN_CONFIG: {ret}\"); ret = _pn5180.ReadEeprom(EepromAddress.NFCID1, eeprom.Slice(0, 3)); Debug.WriteLine($\"IRQ_PIN_CONFIG: success: {ret}, Data: {BitConverter.ToString(eeprom.Slice(0, 3).ToArray())}\"); Functions has been implemented to read and write part or all the EEPROM. You need to be careful of the size of the buffer, it can't exceed 255 bytes and can't be larger than the base address you want to write and total size. So if you write at position 250, your buffer size and only be 5 maximum. PN5180 versions You can retreive the PN5180 version thru the GetVersion function. 3 versions will be returned, the product, firmware and EEPROM ones. var versions = _pn5180.GetVersion(); Debug.WriteLine($\"Product: {versions.Product.ToString()}, Firmware: {versions.Firmware.ToString()}, EEPROM: {versions.Eeprom.ToString()}\"); You should see something like this: Product: 3.5, Firmware: 3.5, EEPROM: 145.0 Current firmware versions are 3.12 (3.C) and 4.0. That said, this implementation supports older firmware. Newer firmware have better support for auto calibration, fixes bugs and added specific EMVco (payment) low level features. Note that the product version is the original firmware version installed. so if you've done firmware upgrade, the product version will always remain the one from the original firmware. Note that this implementation does not support firmware update. You should use NXP tools if you want to update the firmare Radio Frequency Configuration The PN5180 offers the possibility to set a lot of configurations. The good news is that those configurations are stored and can be loaded. You can adjust them as well. The following code shows an example on how to load, extract the configuration and with the same way, you can write back a configuration if you need. Please refer to the documentation in this case to understand the changes you want to make: // Number of configuration var sizeConfig = _pn5180.GetRadioFrequencyConfigSize(TransmitterRadioFrequencyConfiguration.Iso14443B_106); // The RadioFrequencyConfiguraitonSize is 5, 1 for the register and 4 for the register data SpanByte configBuff = new byte[Pn5180.RadioFrequencyConfiguraitonSize * sizeConfig]; var ret = _pn5180.RetrieveRadioFrequencyConfiguration(TransmitterRadioFrequencyConfiguration.Iso14443B_106, configBuff); for (int i = 0; i < sizeConfig; i++) { Debug.WriteLine($\"Register: {configBuff[Pn5180.RadioFrequencyConfiguraitonSize * i]}, Data: {BitConverter.ToString(configBuff.Slice(Pn5180.RadioFrequencyConfiguraitonSize * i + 1, Pn5180.RadioFrequencyConfiguraitonSize - 1).ToArray())}\"); } Every configuration has the size of 5 bytes, first byte is the register number, and the next 4 are the data them selves. Transceive data with a card Once the card is selected properly, you can use the CardTranscive class to exchange data with the card. See Mifare and Ultralight for detailed examples. This shows how to dump a Mifare (ISO 14443 type A) card fully: Data106kbpsTypeA cardTypeA; // Let's pull for 20 seconds and see the result var retok = _pn5180.ListenToCardIso14443TypeA(TransmitterRadioFrequencyConfiguration.Iso14443A_Nfc_PI_106_106, ReceiverRadioFrequencyConfiguration.Iso14443A_Nfc_PI_106_106, out cardTypeA, 20000); Debug.WriteLine(); if (!retok) { Debug.WriteLine(\"Can't read properly the card\"); } else { Debug.WriteLine($\"ATQA: {cardTypeA.Atqa}\"); Debug.WriteLine($\"SAK: {cardTypeA.Sak}\"); Debug.WriteLine($\"UID: {BitConverter.ToString(cardTypeA.NfcId)}\"); MifareCard mifareCard = new MifareCard(_pn5180, cardTypeA.TargetNumber) { BlockNumber = 0, Command = MifareCardCommand.AuthenticationA }; mifareCard.SetCapacity(cardTypeA.Atqa, cardTypeA.Sak); mifareCard.SerialNumber = cardTypeA.NfcId; mifareCard.KeyA = new byte[6] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; mifareCard.KeyB = new byte[6] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }; for (byte block = 0; block < 64; block++) { mifareCard.BlockNumber = block; mifareCard.Command = MifareCardCommand.AuthenticationB; var ret = mifareCard.RunMifiCardCommand(); if (ret < 0) { // Try another one mifareCard.Command = MifareCardCommand.AuthenticationA; ret = mifareCard.RunMifiCardCommand(); } if (ret >= 0) { mifareCard.BlockNumber = block; mifareCard.Command = MifareCardCommand.Read16Bytes; ret = mifareCard.RunMifiCardCommand(); if (ret >= 0) { Debug.WriteLine($\"Bloc: {block}, Data: {BitConverter.ToString(mifareCard.Data)}\"); } else { Debug.WriteLine($\"Error reading bloc: {block}, Data: {BitConverter.ToString(mifareCard.Data)}\"); } if (block % 4 == 3) { // Check what are the permissions for (byte j = 3; j > 0; j--) { var access = mifareCard.BlockAccess((byte)(block - j), mifareCard.Data); Debug.WriteLine($\"Bloc: {block - j}, Access: {access}\"); } var sector = mifareCard.SectorTailerAccess(block, mifareCard.Data); Debug.WriteLine($\"Bloc: {block}, Access: {sector}\"); } } else { Debug.WriteLine($\"Authentication error\"); } } } The example contains as well an implementation to fully dump the content of other cards. Current implementation Communication support: [X] Hardware SPI Controller fully supported [X] GPIO Controller fully supported Miscellaneous [X] Read fully EEPROM [X] Write fully EEPROM [X] Read any part of EEPROM [X] Write any part of EEPROM [X] Get product, hardware and firmware versions [X] CardTransceive support to reuse existing Mifare and Credit Card , ISO 14443 support Type A or Type B protocol [ ] Secure firmware update [ ] Own board GPIO access RF communication commands: [X] Load a specific configuration [X] Read a specific configuration [X] Write a specific configuration PN5180 as an initiator (reader) commands: [X] Auto poll ISO 14443 type A cards [X] Auto poll ISO 14443 type B cards [X] Deselect ISO 14443 type B cards [X] Multi card support at the same time: partial, depending on the card, CID mandatory in all 14443 type B communications [X] ISO 14443-4 communication protocol [ ] Auto poll ISO/IEC 18000-3 cards [ ] Communication support for ISO/IEC 18000-3 cards [ ] Low power card detection [X] Mifare specific authentication [ ] Fast 212, 424, 848 kbtis communication: partial PN5180 as a Target (acting like a card) [ ] Initialization as target [ ] Handling communication with another reader as a target [ ] Support for transceive data"
  },
  "devicesdetails/Pn532/README.html": {
    "href": "devicesdetails/Pn532/README.html",
    "title": "PN532 - RFID and NFC reader | nanoFramework Documentation",
    "keywords": "PN532 - RFID and NFC reader PN532 is a RFID and NFC reader. It does supports various standards: IsoIec14443TypeA, IsoIec14443TypeB, Iso18092. This implementation should support as well PN533 which is a full ASB serial only implementation and have few more registers and functions but looks retro compatible with this implementation. Documentation Official documentation can be fond here Check out the [sample]'./samples) which contains more detailed on how to read other type of cards like Ultralight Usage You first need to create the class thru I2C, SPI or Serial. string device = \"COM2\"; pn532 = new Pn532(device); To act as a card reader, the PN532 has to be in listening mode. 2 options are available, either thru using the ListPassiveTarget either the AutoPoll functions. Example with polling a simple passive 14443 type A card like a Mifare: byte[] retData = null; while (true) { retData = pn532.ListPassiveTarget(MaxTarget.One, TargetBaudRate.B106kbpsTypeA); if (retData is object) break; // Give time to PN532 to process Thread.Sleep(200); } if (retData is null) return; // You need to remove the first element at it's the number of tags read // In, this case we will assume we are reading only 1 tag at a time var decrypted = pn532.TryDecode106kbpsTypeA(retData.AsSpan().Slice(1)); Example pooling a 14443 type B card like a credit card: byte[] retData = null; while (true) { retData = pn532.AutoPoll(5, 300, new PollingType[] { PollingType.Passive106kbpsISO144443_4B }); if (retData is object) { if (retData.Length >= 3) break; } // Give time to PN532 to process Thread.Sleep(200); } if (retData is null) return; // Check how many tags and the type Debug.WriteLine($\"Num tags: {retData[0]}, Type: {(PollingType)retData[1]}\"); // See documentation page 145 // You need to remove the first element at it's the number of tags read // In, this case we will assume we are reading only 1 tag at a time // The second element is the type of the card. In our case, because we are using a Credit Card, we already know it's a Type B card // The thrid element is the size of the data var decrypted = pn532.TryDecodeData106kbpsTypeB(retData.AsSpan().Slice(3)); Reading or writing to cards PN532 implement a ReadWrite function that allows to use a high level Mifare card class. This implementation abstract the reader which is used. Once detected and selected like in the previous example, this fully dump the content of a classical Mifare 1K card: if (decrypted is object) { Debug.WriteLine($\"Tg: {decrypted.TargetNumber}, ATQA: {decrypted.Atqa} SAK: {decrypted.Sak}, NFCID: {BitConverter.ToString(decrypted.NfcId)}\"); if (decrypted.Ats is object) Debug.WriteLine($\", ATS: {BitConverter.ToString(decrypted.Ats)}\"); MifareCard mifareCard = new MifareCard(pn532, decrypted.TargetNumber) { BlockNumber = 0, Command = MifareCardCommand.AuthenticationA }; mifareCard.SetCapacity(decrypted.Atqa, decrypted.Sak); mifareCard.SerialNumber = decrypted.NfcId; mifareCard.KeyA = new byte[6] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; mifareCard.KeyB = new byte[6] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };/ for (byte block = 0; block < 64; block++) { mifareCard.BlockNumber = block; mifareCard.Command = MifareCardCommand.AuthenticationB; var ret = mifareCard.RunMifiCardCommand(); if (ret < 0) { // Try another one mifareCard.Command = MifareCardCommand.AuthenticationA; ret = mifareCard.RunMifiCardCommand(); } if (ret >= 0) { mifareCard.BlockNumber = block; mifareCard.Command = MifareCardCommand.Read16Bytes; ret = mifareCard.RunMifiCardCommand(); if (ret >= 0) Debug.WriteLine($\"Bloc: {block}, Data: {BitConverter.ToString(mifareCard.Data)}\"); else { Debug.WriteLine($\"Error reading bloc: {block}, Data: {BitConverter.ToString(mifareCard.Data)}\"); } if (block % 4 == 3) { // Check what are the permissions for (byte j = 3; j > 0; j--) { var access = mifareCard.BlockAccess((byte)(block - j), mifareCard.Data); Debug.WriteLine($\"Bloc: {block - j}, Access: {access}\"); } var sector = mifareCard.SectorTailerAccess(block, mifareCard.Data); Debug.WriteLine($\"Bloc: {block}, Access: {sector}\"); } } else { Debug.WriteLine($\"Authentication error\"); } } PN532 as a target It's possible to change the PN532 mode to be seen as a target byt another reader. A phone with NFC for example. The bellow example shows how to transform the PN532 into a Credit Card: static void AsTarget(Pn532 pn532) { byte[] retData = null; TargetModeInitialized modeInitialized = null; while (true) { (modeInitialized, retData) = pn532.InitAsTarget( TargetModeInitialization.PiccOnly, new TargetMifareParameters() { Atqa = new byte[] { 0x08, 0x00 }, Sak = 0x60 }, new TargetFeliCaParameters() { NfcId2 = new byte[] { 0x01, 0xFE, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7 }, Pad = new byte[] { 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7 } }, new TargetPiccParameters() { NfcId3 = new byte[] { 0xAA, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 }, GeneralTarget = new byte[0], HistoricalTarget = new byte[0] }); if (modeInitialized is object) break; // Give time to PN532 to process Thread.Sleep(200); } if (modeInitialized is null) return; Debug.WriteLine($\"PN532 as a target: ISDep: {modeInitialized.IsDep}, IsPicc {modeInitialized.IsISO14443_4Picc}, {modeInitialized.TargetBaudRate}, {modeInitialized.TargetFramingType}\"); Debug.WriteLine($\"Initiator: {BitConverter.ToString(retData)}\"); // 25-D4-00-E8-11-6A-0A-69-1C-46-5D-2D-7C-00-00-00-32-46-66-6D-01-01-12-02-02-07-FF-03-02-00-13-04-01-64-07-01-03 // 11-D4-00-01-FE-A2-A3-A4-A5-A6-A7-00-00-00-00-00-30 // E0-80 Span<byte> read = stackalloc byte[512]; int ret = -1; while (ret<0) ret = pn532.ReadDataAsTarget(read); // For example: 00-00-A4-04-00-0E-32-50-41-59-2E-53-59-53-2E-44-44-46-30-31-00 Debug.WriteLine($\"Status: {read[0]}, Data: {BitConverter.ToString(read.Slice(1).ToArray())}\"); } Note that this is just the first phase showing how to initialize the process, get the first data and read data. In this specific case, the emulation have to understand the commands sent by the reader and emulate properly a card. It is possible to emulate any Type A, Type B and Felica cards. Current implementation Communication support: [X] HSU serial port: fully supported [X] I2C: supported [X] SPI: supported but using a specific chip select pin SPI Mode should be Mode0 and LSB first [ ] Hardware reset pin: This can be done with the user code Miscellaneous commands: [X] Diagnose. Note: partial implementation, basics tests implemented only [X] GetFirmwareVersion [X] GetGeneralStatus [X] ReadRegister [X] WriteRegister [X] ReadGPIO [X] WriteGPIO [X] SetSerialBaudRate [X] SetParameters [X] SAMConfiguration [X] PowerDown RF communication commands: [X] RFConfiguration [ ] RFRegulationTest PN532 as an initiator (reader) commands: [ ] InJumpForDEP [ ] InJumpForPSL [X] InListPassiveTarget [ ] InATR [ ] InPSL [X] InDataExchange [X] InCommunicateThru [X] InDeselect [X] InRelease [X] InSelect [X] InAutoPoll PN532 as a Target (acting like a card) [X] TgInitAsTarget [ ] TgSetGeneralBytes [X] TgGetData [X] TgSetData [ ] TgSetMetaData [ ] TgGetInitiatorCommand [ ] TgResponseToInitiator [ ] TgGetTargetStatus"
  },
  "devicesdetails/RadioReceiver/Devices/Tea5767/README.html": {
    "href": "devicesdetails/RadioReceiver/Devices/Tea5767/README.html",
    "title": "TEA5767 - Radio Receiver | nanoFramework Documentation",
    "keywords": "TEA5767 - Radio Receiver The TEA5767HN is a single-chip electronically tuned FM stereo radio for low-voltage applications with fully integrated Intermediate Frequency (IF) selectivity and demodulation. Sensor Image Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(1, Tea5767.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); // The radio is running on FM 103.3MHz using (Tea5767 radio = new Tea5767(device, FrequencyRange.Other, 103.3)) { // Automatic search from current frequency up // The larger stopLevel, the fewer radio stations can be searched. radio.Search(searchDirection: SearchDirection.Up, stopLevel: 3); }"
  },
  "devicesdetails/RadioReceiver/README.html": {
    "href": "devicesdetails/RadioReceiver/README.html",
    "title": "Radio Receiver | nanoFramework Documentation",
    "keywords": "Radio Receiver The radio receiver devices supported by the project include TEA5767. Documentation TEA5767 radio receiver datasheet Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Hardware Required TEA5767 Male/Female Jumper Wires I2cConnectionSettings settings = new I2cConnectionSettings(1, Tea5767.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Tea5767 radio = new Tea5767(device, FrequencyRange.Other, 103.3)) { // The radio is running on FM 103.3MHz }"
  },
  "devicesdetails/RadioTransmitter/Devices/Kt0803/README.html": {
    "href": "devicesdetails/RadioTransmitter/Devices/Kt0803/README.html",
    "title": "KT0803 - Radio Transmitter | nanoFramework Documentation",
    "keywords": "KT0803 - Radio Transmitter KT0803, a new generation of low cost Monolithic Digital FM Transmitter, is designed to process high-fidelity stereo audio signal and transmit modulated FM signal over a short range. Sensor Image Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(1, Kt0803.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); // The radio is running on FM 106.6MHz using (Kt0803 radio = new Kt0803(device, 106.6, Region.China)) { // Connect a sound sources to the 3.5mm earphone jack of the module }"
  },
  "devicesdetails/RadioTransmitter/README.html": {
    "href": "devicesdetails/RadioTransmitter/README.html",
    "title": "Radio Transmitter | nanoFramework Documentation",
    "keywords": "Radio Transmitter The radio transmitter devices supported by the project include KT0803. Documentation KT0803 radio transmitter datasheet Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Hardware Required KT0803 Male/Female Jumper Wires I2cConnectionSettings settings = new I2cConnectionSettings(1, Kt0803.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); // The radio is running on FM 106.6MHz using (Kt0803 radio = new Kt0803(device, 106.6, Region.China)) { // Connect a sound sources to the 3.5mm earphone jack of the module }"
  },
  "devicesdetails/README.html": {
    "href": "devicesdetails/README.html",
    "title": "List and category of devices | nanoFramework Documentation",
    "keywords": "List and category of devices Analog/Digital converters ADS1115 - Analog to Digital Converter AXP192 - Enhanced single Cell Li-Battery and Power System Management IC Max31856 - cold-junction compensated thermocouple to digital converter Mcp3428 - Analog to Digital Converter (I2C) MCP3xxx family of Analog to Digital Converters Accelerometers ADXL345 - Accelerometer ADXL357 - Accelerometer BNO055 - inertial measurement unit LSM9DS1 - 3D accelerometer, gyroscope and magnetometer MPU6500/MPU9250 - Gyroscope, Accelerometer, Temperature and Magnetometer (MPU9250 only) Mpu6886 - accelerometer and gyroscope Gas sensors AGS01DB - MEMS VOC Gas Sensor BMxx80 Device Family CCS811 Gas sensor Liquid sensors Digital liquid level switch Light sensor Bh1745 - RGB Sensor BH1750FVI - Ambient Light Sensor MAX44009 - Ambient Light Sensor TCS3472x Sensors TSL256x - Illuminance sensor Barometers BMP180 - barometer, altitude and temperature sensor BMxx80 Device Family LPS25H - Piezoresistive pressure and thermometer sensor Altimeters BMP180 - barometer, altitude and temperature sensor BMxx80 Device Family Thermometers AHT10/15/20 - Temperature and humidity sensor modules BMP180 - barometer, altitude and temperature sensor BMxx80 Device Family DHTxx - Digital-Output Relative Humidity & Temperature Sensor Module HTS221 - Capacitive digital sensor for relative humidity and temperature LM75 - Digital Temperature Sensor LPS25H - Piezoresistive pressure and thermometer sensor MAX31865 - Resistance Temperature Detector Amplifier MCP9808 - Digital Temperature Sensor MLX90614 - Infra Red Thermometer MPU6500/MPU9250 - Gyroscope, Accelerometer, Temperature and Magnetometer (MPU9250 only) SHT3x - Temperature & Humidity Sensor SHTC3 - Temperature & Humidity Sensor Si7021 - Temperature & Humidity Sensor Infrared sensors AMG88xx Infrared Array Sensor Family MLX90614 - Infra Red Thermometer Gyroscopes BNO055 - inertial measurement unit LSM9DS1 - 3D accelerometer, gyroscope and magnetometer MPU6500/MPU9250 - Gyroscope, Accelerometer, Temperature and Magnetometer (MPU9250 only) Mpu6886 - accelerometer and gyroscope Compasses BNO055 - inertial measurement unit HMC5883L - 3 Axis Digital Compass Motor controllers/drivers 28BYJ-48 Stepper Motor 5V 4-Phase 5-Wire & ULN2003 Driver Board DC Motor Controller Servo Motor Inertial Measurement Units BNO055 - inertial measurement unit LSM9DS1 - 3D accelerometer, gyroscope and magnetometer MPU6500/MPU9250 - Gyroscope, Accelerometer, Temperature and Magnetometer (MPU9250 only) Mpu6886 - accelerometer and gyroscope Magnetometers AK8963 - Magnetometer Bmm150 - Magnetometer BNO055 - inertial measurement unit HMC5883L - 3 Axis Digital Compass LSM9DS1 - 3D accelerometer, gyroscope and magnetometer MPU6500/MPU9250 - Gyroscope, Accelerometer, Temperature and Magnetometer (MPU9250 only) Hygrometers AHT10/15/20 - Temperature and humidity sensor modules BMxx80 Device Family DHTxx - Digital-Output Relative Humidity & Temperature Sensor Module HTS221 - Capacitive digital sensor for relative humidity and temperature SHT3x - Temperature & Humidity Sensor SHTC3 - Temperature & Humidity Sensor Si7021 - Temperature & Humidity Sensor Clocks Realtime Clock Sonars HC-SR04 - Ultrasonic Ranging Module Distance sensors HC-SR04 - Ultrasonic Ranging Module LidarLiteV3 - LIDAR Time of Flight Sensor VL53L0X - distance sensor Passive InfraRed (motion) sensors HC-SR501 - PIR Motion Sensor Motion sensors HC-SR501 - PIR Motion Sensor Displays APA102 - Double line transmission integrated control LED Max7219 (LED Matrix driver) SSD13xx & SSH1106 OLED display family TM1637 - Segment Display Ws28xx LED drivers GPIO Expanders Pca95x4 - I2C GPIO Expander CAN BUS libraries/modules Mcp25xxx device family - CAN bus Proximity sensors MPR121 - Proximity Capacitive Touch Sensor Controller Touch sensors MPR121 - Proximity Capacitive Touch Sensor Controller Wireless communication modules nRF24L01 - Single Chip 2.4 GHz Transceiver Radio Receiver Radio Transmitter Color sensors TCS3472x Sensors LED drivers APA102 - Double line transmission integrated control LED Ws28xx LED drivers RFID/NFC modules MFRC522 - RFID reader PN5180 - RFID and NFC reader PN532 - RFID and NFC reader RFID shared elements Media libraries Buzzer - Piezo Buzzer Controller YX5200/YX5300 - MP3 Player GPIO or bit operating devices AXP192 - Enhanced single Cell Li-Battery and Power System Management IC Button Charlieplex Segment binding Digital liquid level switch Generic shift register Key Matrix MBI5027 -- 16-bit shift register with error detection Quadrature Rotary Encoder SN74HC595 -- 8-bit shift register Power monitors and related devices AXP192 - Enhanced single Cell Li-Battery and Power System Management IC IP5306 - Power management Digital/Analog converters AD5328 - Digital to Analog Convertor EEPROM AT24C128C - I2C EEPROM read/write Iot.Device helpers and common Iot.Device.Multiplexing Iot.Device.NumberHelper Iot.Device.WeatherHelper .NET System libraries System.Buffers.Binary.BinaryPrimitives System.Device.Model - attributes for device bindings System.Diagnostics.Stopwatch and DelayHelper System.Drawing System.Numerics Lidar LidarLiteV3 - LIDAR Time of Flight Sensor"
  },
  "devicesdetails/RotaryEncoder/README.html": {
    "href": "devicesdetails/RotaryEncoder/README.html",
    "title": "Quadrature Rotary Encoder | nanoFramework Documentation",
    "keywords": "Quadrature Rotary Encoder A Rotary encoder is a device that detects angular position. One use of this is similar to a volume control on an FM radio where the user turns a shaft and the loudness of the broadcast is changed. Incremental rotary encoders do not provide information on their exact position but supply information about how much they have moved and in which direction. Board Typically a quadrature rotary encoder will have two outputs A and B, perhaps called clock and data. For each part of a rotation then the A pin will provide a clock signal and the B pin will provide a data signal that is out of phase with the clock. The sign of the phase difference between the pins indicates the direction of rotation. From above if we look at Pin B (data) at the time of a falling edge on Pin A (clk) then the if the value of pin P is 1 then the direction is clockwise and if it is 0 then the rotation is counter clockwise. Usage This sample shows how to implement an FM radio tuner control using the ScaledQuadradureEncoder binding. It simply prints the tuner value to the console as the knob is turned. This binding implements scaled quadrature rotary encoder as ScaledQuadratureEncoder . The value is a double. You can for example set it up as a tuning dial for an FM radio with a range of 88.0 to 108.0 with a step of 0.1. The code below shows an example of using the encoder as an FM tuner control. // create a RotaryEncoder that represents an FM Radio tuning dial with a range of 88 -> 108 MHz ScaledQuadratureEncoder encoder = new ScaledQuadratureEncoder(pinA: 5, pinB: 6, PinEventTypes.Falling, pulsesPerRotation: 20, pulseIncrement: 0.1, rangeMin: 88.0, rangeMax: 108.0) { Value = 88 }; // 2 milliseconds debonce time encoder.Debounce = TimeSpan.FromMilliseconds(2); // Register to Value change events encoder.ValueChanged += (o, e) => { Debug.WriteLine($\"Tuned to {e.Value}MHz\"); }; This binding also features Debounce functionality on the clock signal. Acceleration so that rotating the encoder moves it further the faster the rotation. Events when the value changes. Also available is a QuadratureRotaryEncoder binding which has properties that represent the rotation of the encoder and the raw pulses. Limitations This binding is suitable for manual and small rotations where it is not a big deal if one or few rotations may be lost. This binding is not suitable for motor control with a very high rate and very precise number of counts. The precision really depends of the hardware you are using and it is not possible to give specific range of usage. You may have to try to understand if this is working for you or not."
  },
  "devicesdetails/Rtc/Devices/Ds1307/README.html": {
    "href": "devicesdetails/Rtc/Devices/Ds1307/README.html",
    "title": "DS1307 - Realtime Clock | nanoFramework Documentation",
    "keywords": "DS1307 - Realtime Clock The DS1307 serial real-time clock (RTC) is a lowpower, full binary-coded decimal (BCD) clock/calendar plus 56 bytes of NV SRAM. Address and data are transferred serially through an I2C, bidirectional bus. Sensor Image Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(1, Ds1307.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Ds1307 rtc = new Ds1307(device)) { // set Ds1307 time rtc.DateTime = DateTime.Now; // read time DateTime dt = rtc.DateTime; }"
  },
  "devicesdetails/Rtc/Devices/Ds3231/README.html": {
    "href": "devicesdetails/Rtc/Devices/Ds3231/README.html",
    "title": "DS3231 - Realtime Clock | nanoFramework Documentation",
    "keywords": "DS3231 - Realtime Clock DS3231 is a low-cost, extremely accurate I2C realtime clock (RTC) with an integrated temperature compensated crystal oscillator (TCXO) and crystal. Sensor Image Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(1, Ds3231.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Ds3231 rtc = new Ds3231(device)) { // set DS3231 time rtc.DateTime = DateTime.Now; // read time DateTime dt = rtc.DateTime; // read temperature double temp = rtc.Temperature.Celsius; }"
  },
  "devicesdetails/Rtc/Devices/Pcf8563/README.html": {
    "href": "devicesdetails/Rtc/Devices/Pcf8563/README.html",
    "title": "PCF8563 - Realtime Clock | nanoFramework Documentation",
    "keywords": "PCF8563 - Realtime Clock The PCF8563 is a CMOS1 Real-Time Clock (RTC) and calendar optimized for low power consumption. A programmable clock output, interrupt output, and voltage-low detector are also provided. All addresses and data are transferred serially via a two-line bidirectional I2C-bus. Sensor Image Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(1, Pcf8563.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Pcf8563 rtc = new Pcf8563(device)) { // set Pcf8563 time rtc.DateTime = DateTime.Now; // read time DateTime dt = rtc.DateTime; }"
  },
  "devicesdetails/Rtc/README.html": {
    "href": "devicesdetails/Rtc/README.html",
    "title": "Realtime Clock | nanoFramework Documentation",
    "keywords": "Realtime Clock The RTC devices supported by the project include DS1307, DS3231, PCF8563 (or compatible BM8563). Documentation DS1307 datasheet DS3231 datasheet PCF8563 / BM8563 datasheet Board Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Hardware Required DS1307/DS3231/PCF8563/BM8563 Male/Female Jumper Wires using System.Device.I2c; using Iot.Device.Rtc; using nanoFramework.Hardware.Esp32; // The I2C pins 21 and 22 in the sample below are ESP32 specific and may differ from other platforms. // Please double check your device datasheet. Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); I2cConnectionSettings settings = new I2cConnectionSettings(1, Pcf8563.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Pcf8563 rtc = new Pcf8563(device)) { // set Pcf8563 dateTime // rtc.DateTime = GetDateTimeFromInternet(); rtc.DateTime = new DateTime(2021, 9, 8, 10, 11, 12); while (true) { // read time DateTime dt = rtc.DateTime; // output the current time Debug.WriteLine($\"Time: {dt.ToString(\"yyyy/MM/dd HH:mm:ss\")}\"); // wait for a second Thread.Sleep(1000); } } Result"
  },
  "devicesdetails/ServoMotor/README.html": {
    "href": "devicesdetails/ServoMotor/README.html",
    "title": "Servo Motor | nanoFramework Documentation",
    "keywords": "Servo Motor This is a generic binding to control many servo motors using a hardware or software PwmChannel . Servo motors are usually based on a signal frequency of 50Hz. They also require a minimum/maximum pulse width to determine the position. The pulse width is generally between 1 and 2 milliseconds, where 1ms is approximately 0 degrees, 1.5ms is the rest position, and 2ms is 180 degrees. This information can be found in each servo motor's datasheet. One thing to be aware of is the wiring as the servo motor connector is usually a 3-pin connector. The pinout is shown below where colors can vary. Pin Number Signal Color 1 Ground Black or Brown 2 Power Supply Brown or Red 3 Control Signal Orange or White or Yellow Documentation Wikipedia Servo Motor Hobby Servo Tutorial How Servo Motors Work & How To Control Servos Using Arduino Arduino Servo Library Raspberry Pi Lesson 28: Controlling a Servo on Raspberry Pi with Python There are many servo motor sizes available that offer both standard and continuous rotation. Below are a few links where to purchase servo motors. Adafruit Servo Motor Accessories Sparkfun Servo Motor Accessories Board Usage The ServoMotor binding offers an easy way to begin controlling a servo motor. The quickest approach is to provide the ServoMotor object a PwmChannel using the default values for other optional arguments. // Example of hardware PWM using chip 0 and channel 0 on a dev board. ServoMotor servoMotor = new ServoMotor(PwmChannel.Create(0, 0, 50)); servoMotor.Start(); // Enable control signal. // Move position. Pulse width argument is in microseconds. servoMotor.WritePulseWidth(1000); // 1ms; Approximately 0 degrees. servoMotor.WritePulseWidth(1500); // 1.5ms; Approximately 90 degrees. servoMotor.WritePulseWidth(2000); // 2ms; Approximately 180 degrees. servoMotor.Stop(); // Disable control signal. The position of servo motor can also be adjusted by the angle. The ServoMotor constructor's optional arguments must be set according to device's specs. NOTE: These are usually an approximation, so you may need to manually tweak to determine exact values. For example, the Hitec HS-300BB servo has the following specifications: MaximumAngle = 180 MinimumPulseWidthMicroseconds = 900 MaximumPulseWidthMicroseconds = 2100 Frequency 50Hz; Period 20000uS // When using an ESP32, you have to setup the pin function then create the PWM channel Configuration.SetPinFunction(21, DeviceFunction.PWM1); using PwmChannel pwmChannel = PwmChannel.CreateFromPin(21, 50); ServoMotor servoMotor = new ServoMotor( PwmChannel, 180, 900, 2100); servoMotor.Start(); // Enable control signal. // Move position. servoMotor.WriteAngle(0); // ~0.9ms; Approximately 0 degrees. servoMotor.WritePulseWidth(90); // ~1.5ms; Approximately 90 degrees. servoMotor.WritePulseWidth(180); // ~2.1ms; Approximately 180 degrees. servoMotor.Stop(); // Disable control signal. Calibration Calibration or finding minimum and maximum pulse width and angle range WritePulseWidth method should be used. To make it easier to write applications which allow calibration method Calibrate can be used to change calibration parameters."
  },
  "devicesdetails/ShiftRegister/README.html": {
    "href": "devicesdetails/ShiftRegister/README.html",
    "title": "Generic shift register | nanoFramework Documentation",
    "keywords": "Generic shift register A shift register enables controlling multiple devices, like LEDs, using a small number of pins (minimum of 3 -- data, data clock and register latch). Shift registers can be daisy-chained without requiring using additional pins, enabling addressing a large number of devices, limited only by current and the algorithms you use. The ShiftRegister binding abstracts the interaction with the storage register, the storage clock, the register clock and other shift register capabilities. This binding enables interaction via GPIO or SPI. ShiftRegister is used as the base class for Sn74hc595 and Mbi5027 bindings. It can be used directly, or you can rely on it as an implementation detail of those more specific bindings. It has been tested with with SN74HC595 , MBI5027 , and MBI5168 shift registers. The following image is of the popular SN74HC595 8-bit shift register: The following image is of the larger MBI5027 16-bit shift register: The sample demonstrates how to use the shift register in some basic ways. Using GPIO The binding can use GpioController pins to control the shift register. It uses ShiftRegisterPinMapping to describe the pins that will be used. The following example code demonstrates how to use a shift register with GPIO. ShiftRegister sr = new(ShiftRegisterPinMapping.Minimal, 8); // Light up three of first four LEDs sr.ShiftBit(1); sr.ShiftBit(1); sr.ShiftBit(0); sr.ShiftBit(1); sr.Latch(); // Display for 1s Thread.Sleep(1000); // Write to all 8 registers with a byte value // ShiftByte latches data by default sr.ShiftByte(0b_1000_1101); The following diagram demonstrates the required wiring for using the SN74HC595 with minimal mapping. Other shift registers will be similar. Using SPI Important : make sure you properly setup the SPI pins especially for ESP32 before creating the SpiDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the SPI GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.SPI1_MOSI); Configuration.SetPinFunction(22, DeviceFunction.SPI1_MISO); Configuration.SetPinFunction(23, DeviceFunction.SPI1_CLOCK); // Make sure as well you are using the right chip select For other devices like STM32, please make sure you're using the preset pins for the SPI bus you want to use. The chip select can as well be pre setup. The bindings can use a SpiDevice to control the shift register. The shift register timing maps to the SPI protocol, enabling SPI to be used. The wiring from is straightforward, from SPI pins to the shift register: SDI (MOSI) -> SDI; SCLK -> CLK; CEO -> LE. Note: The SPI protocol has terms with casual references to slavery . We're doing our part to avoid them. The following example code demonstrates how to use a shift register with SPI. // assuming an 8-bit shift register ShiftRegister sr = new(SpiDevice.Create(new(1, 42)), 8); // Light up three of first four LEDs // The ShiftBit() method is disallowed when using SPI sr.ShiftByte(0b_1011); // Clear register sr.ShiftClear(); // Write to all 8 registers with a byte value sr.ShiftByte(0b_1010_1010); The following diagram demonstrates the required wiring for using the SN74HC595 with SPI. Other shift registers will be similar. Daisy-chaining The binding supports daisy chaining, using either GPIO or SPI. The GPIO-based example below demonstrates how to instantiate the binding for controlling/addressing two -- daisy-chained -- 8-bit shift registers. This is specified by the integer value in the constructor. ShiftRegister sr = new(ShiftRegisterPinMapping.Minimal, 16); The shift registers need to be correctly wired to enable daisy-chaining. On the SN74HC595, QH' in the first register would connect to SER in the second register. The pattern with the MBI5027 and MBI5168 is similar, SDO in the first register would connect to SDI in the second. You can write values across multiple daisy chained devices in one of several ways, as demonstrated in the following code. You wouldn't typically use of all these approaches, but pick one. // Write a value to each register bit and latch // Only works with GPIO for (int i = 0; i < sr.BitLength; i++) { sr.ShiftBit(1); } sr.Latch(); // Prints the following pattern to each register: 10101010 // This pattern only works for register lengths divisible by 8 (which is common) for (int i = 0; i < sr.BitLength / 8; i++) { sr.ShiftByte(0b_1010_1010); } // Downshift a 32-bit number to the desired number of daisy-chained devices // Same thing could be done with a 64-bit integer if you have more than four 8-bit shift registers (or more than two 16-bit ones) // Prints the following pattern across two registers: 0001001110001000 int value = 0b_0001_0011_1000_1000; // 5000 for (int i = (sr.BitLength / 8) - 1; i > 0; i--) { int shift = i * 8; int downShiftedValue = value >> shift; sr.ShiftByte((byte)downShiftedValue, false); } sr.ShiftByte((byte)value); // Print array of bytes // Result will be same as previous example var bytes = new byte[] { 0b10001000, 0b00010011}; foreach (var b in bytes) { sr.ShiftByte(b); } The following diagram demonstrates the required wiring for using the SN74HC595 with daisy-chaining. Other shift registers will be similar. This diagram uses the Minimal mapping. The Complete mapping will differ. Resources SN74HC595 data sheet: https://www.ti.com/lit/ds/symlink/sn74hc595.pdf MBI5027 data sheet: http://archive.fairchip.com/pdf/MACROBLOCK/MBI5027.pdf MBI5168 data sheet: http://archive.fairchip.com/pdf/MACROBLOCK/MBI5168.pdf Tutorial: https://www.youtube.com/watch?v=6fVbJbNPrEU Tutorial: https://www.youtube.com/watch?v=G1SzTGZ2l1c"
  },
  "devicesdetails/Sht3x/README.html": {
    "href": "devicesdetails/Sht3x/README.html",
    "title": "SHT3x - Temperature & Humidity Sensor | nanoFramework Documentation",
    "keywords": "SHT3x - Temperature & Humidity Sensor SHT3x is the next generation of Sensirion’s temperature and humidity sensors. This project supports SHT30, SHT31 and SHT35. Documentation SHT30 datasheet Board Usage Hardware Required SHT3x Male/Female Jumper Wires Circuit SCL - SCL SDA - SDA VCC - 5V GND - GND ADR - GND Code Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(1, (byte)I2cAddress.AddrLow); I2cDevice device = I2cDevice.Create(settings); using (Sht3x sensor = new Sht3x(device)) { // read temperature (℃) double temperature = sensor.Temperature.Celsius; // read humidity (%) double humidity = sensor.Humidity; // open heater sensor.Heater = true; } Result"
  },
  "devicesdetails/Shtc3/README.html": {
    "href": "devicesdetails/Shtc3/README.html",
    "title": "SHTC3 - Temperature & Humidity Sensor | nanoFramework Documentation",
    "keywords": "SHTC3 - Temperature & Humidity Sensor SHTC3 is a digital humidity and temperature sensor designed especially for battery-driven high-volume consumer electronics application. To reduce power cosumption this project use capability of sensor to allow measurement in low power mode and active sleep mode. Documentation SHTC3 datasheet Usage Hardware Required SHTC3 Male/Female Jumper Wires Circuit SCL - SCL SDA - SDA VCC - 3.3V GND - GND Code Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. I2cConnectionSettings settings = new I2cConnectionSettings(1, Shtc3.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Shtc3 sensor = new Shtc3(device)) { Debug.WriteLine($\"Sensor Id: {sensor.Id}\"); while (true) { if (sensor.TryGetTemperatureAndHumidity(out var temperature, out var relativeHumidity)) { Debug.WriteLine($\"Temperature: {temperature.DegreesCelsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Relative humidity: {relativeHumidity.Percent:0.#}%\"); // WeatherHelper supports more calculations, such as saturated vapor pressure, actual vapor pressure and absolute humidity. Debug.WriteLine($\"Heat index: {WeatherHelper.CalculateHeatIndex(temperature, relativeHumidity).DegreesCelsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Dew point: {WeatherHelper.CalculateDewPoint(temperature, relativeHumidity).DegreesCelsius:0.#}\\u00B0C\"); Debug.WriteLine(); } sensor.Sleep(); Thread.Sleep(1000); } } Result"
  },
  "devicesdetails/Si7021/README.html": {
    "href": "devicesdetails/Si7021/README.html",
    "title": "Si7021 - Temperature & Humidity Sensor | nanoFramework Documentation",
    "keywords": "Si7021 - Temperature & Humidity Sensor The Si7021 device provides temperature and humidity sensor readings with an I2C interface. Documentation Si7021 datasheet Board Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. Hardware Required Si7021 Male/Female Jumper Wires Circuit SCL - SCL SDA - SDA VCC - 5V GND - GND Code I2cConnectionSettings settings = new I2cConnectionSettings(1, Si7021.DefaultI2cAddress); I2cDevice device = I2cDevice.Create(settings); using (Si7021 sensor = new Si7021(device, Resolution.Resolution1)) { while (true) { var tempValue = sensor.Temperature; var humValue = sensor.Humidity; Debug.WriteLine($\"Temperature: {tempValue.Celsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Relative humidity: {humValue:0.#}%\"); // WeatherHelper supports more calculations, such as saturated vapor pressure, actual vapor pressure and absolute humidity. Debug.WriteLine($\"Heat index: {WeatherHelper.CalculateHeatIndex(tempValue, humValue).Celsius:0.#}\\u00B0C\"); Debug.WriteLine($\"Dew point: {WeatherHelper.CalculateDewPoint(tempValue, humValue).Celsius:0.#}\\u00B0C\"); Debug.WriteLine(); Thread.Sleep(1000); } } Result"
  },
  "devicesdetails/Sn74hc595/README.html": {
    "href": "devicesdetails/Sn74hc595/README.html",
    "title": "SN74HC595 -- 8-bit shift register | nanoFramework Documentation",
    "keywords": "SN74HC595 -- 8-bit shift register SN74HC595 is a 8-bit shift register. Per the datasheet, the SN74HC595 is a \"8-Bit Shift Register With 3-State Output Register\". The Sn74hc595 binding is based on and is compatible with the more general ShiftRegister binding. The Sn74hc595 binding adds the ability clear the storage register with a single pin. Either binding can be used to control the SN74HC595. The binding abstracts the interaction with the data register, the register clock and other shift register capabilities. The binding enables interaction via GPIO or SPI. Documentation Datasheet Adafruit Tutorial Usage The following example code demonstrates how to use the SN74HC595 with its most basic functions. Sn74hc595 sr = new(Sn74hc595PinMapping.Minimal); // Light up three of first four LEDs sr.ShiftBit(1); sr.ShiftBit(1); sr.ShiftBit(0); sr.ShiftBit(1); sr.Latch(); // Display for 1s Thread.Sleep(1000); // Write to all 8 registers with a byte value // ShiftByte latches data by default sr.ShiftByte(0b_1000_1101); The following diagram demonstrates the required wiring for the Minimal pin mapping. In particular, OE must be wired to ground, and SRCLR must be wired high. The following example demonstrates using additional features and requires different wiring. Sn74hc595 sr = new(Sn74hc595PinMapping.Complete); // Write to all 8 registers with a byte value // ShiftByte latches data by default sr.ShiftByte(0b_1000_1101); // Display for 1s Thread.Sleep(1000); // disable output temporarily sr.OutputEnable = false; // Display for 1s Thread.Sleep(1000); // re-enable output sr.OutputEnable = true; // clear storage before writing new values sr.ClearStorage(); // Light up three of first four LEDs sr.ShiftBit(1); sr.ShiftBit(1); sr.ShiftBit(0); sr.ShiftBit(1); sr.Latch(); The following diagram demonstrates the required wiring for the Complete pin mapping. If you want to use SPI, see the ShiftRegister binding, which includes more information on SPI."
  },
  "devicesdetails/Ssd13xx/README.html": {
    "href": "devicesdetails/Ssd13xx/README.html",
    "title": "SSD13xx & SSH1106 OLED display family | nanoFramework Documentation",
    "keywords": "SSD13xx & SSH1106 OLED display family The SSD1306/SSH1106 are a single-chip CMOS OLED/PLED driver with controllers for organic/polymer light emitting diode dot-matrix graphic display system. It consists of 128 segments and 64 commons. This IC is designed for Common Cathode type OLED panel. Documentation IoT NanoFramework SSD1306/SSH1106 Driver SSD1306 datasheet SSD1327 datasheet Related Devices Adafruit PiOLED - 128x32 Monochrome OLED Add-on for Raspberry Pi HiLetgo 1.3\" SPI 128x64 SSH1106 OLED LCD Display LCD SunFounder 0.96\" Inch Blue I2C IIC Serial 128x64 OLED LCD LED SSD1306 Modul Diymall 0.96\" Inch Blue and Yellow I2c IIC Serial Oled LCD LED Module 12864 128X64 for Arduino Display Raspberry PI 51 Msp420 Stim32 SCR Board Binding Notes This binding currently only supports commands and raw data. Eventually, the plan is to create a graphics library that can send text and images to the device. So this library is just a start and you'll find in the sample more advance commands. The following connection types are supported by this binding. [X] I2C [ ] SPI"
  },
  "devicesdetails/System.Buffers.Binary.BinaryPrimitives/README.html": {
    "href": "devicesdetails/System.Buffers.Binary.BinaryPrimitives/README.html",
    "title": "System.Buffers.Binary.BinaryPrimitives | nanoFramework Documentation",
    "keywords": "System.Buffers.Binary.BinaryPrimitives BinaryPrimitives implementation for .NET nanoFramewok."
  },
  "devicesdetails/System.Device.Model/README.html": {
    "href": "devicesdetails/System.Device.Model/README.html",
    "title": "System.Device.Model - attributes for device bindings | nanoFramework Documentation",
    "keywords": "System.Device.Model - attributes for device bindings This library is experimental, it may change and it may be moved to a different package in the future. Avoid taking direct dependency on it. This library provides a set of attributes which allow to annotate devices. They can be used for: implementation of Azure Plug & Play providing extra metadata about sensors (we can i.e. generate some parts of the README file or add extra checks) Model is representing language independent description of the device. The attributes represent a C# mapping from C# types into the model. InterfaceAttribute Every class producing telemetry or exposing some commands should put a telemetry attribute on it [Interface(\"LPS25H - Piezoresistive pressure and thermometer sensor\")] public class Lps25h : IDisposable if class derives from class annotated with [Interface(...)] attribute: class will inherit all annotations from the base class(es) if class provides extra telemetry/command/properties it should add another InterfaceAttribute on itself if class doesn't provide any extra annotations it should not have extra interface display name must be provided to the InterfaceAttribute TelemetryAttribute Every method or property producing telemetry should have [Telemetry] attribute on it. For properties providing name of the Telemetry is optional as it can be deduced from the property name. Telemetry can be put on: properties methods returning value but not taking any arguments methods returning bool and taking one out argument multiple out arguments are currently out of scope but are considered [Telemetry] public Temperature Temperature => Temperature.FromDegreesCelsius(42.5f + ReadInt16(Register.Temperature) / 480f); [Telemetry(\"Humidity\")] public bool TryReadHumidity(out RelativeHumidity humidity) => TryReadHumidityCore(out humidity); [Telemetry(\"Pressure\")] public Pressure ReadPressure() { /*...*/ } if telemetry is not producing typed unit (i.e. Vector3 ) it should have additional displayName provided optional arguments are treated as if they were not there it's not allowed to have more than one Telemetry attribute with the same name on the same Interface PropertyAttribute Properties should be put on properties or methods which describe the device or change its functioning. They should only be used on things which don't change value between calls (unless it's been written to or a command has been executed on the device). Specifially reading (telemetry) from the device should not change the state of the property. Usage is similar to Telemetry with some additions: they can be writable if same name (i.e. PowerMode ) is used on i.e. SetPowerMode and ReadPowerMode they will be merged into a single model property they can be put on methods without return value taking one argument (it must not be be passed by reference) it's not allowed for more than one writers or readers with the same name to be present on the same interface [Property] public Sampling HumiditySampling { get { /*...*/ } set { /* ... */ } } [Property(\"PowerMode\")] public void SetPowerMode(Bme680PowerMode powerMode) { /*...*/ } [Property(\"PowerMode\")] public Bme680PowerMode ReadPowerMode() { /*...*/ } ComponentAttribute Components represent references to other (instances) of interfaces. They can only be put on the properties, the return type of the property or its ancestor class should have an Interface attribute. [Component] public SenseHatTemperatureAndHumidity TemperatureAndHumidity { get; private set; } // ... public class SenseHatTemperatureAndHumidity : Hts221.Hts221 { /* ... */ } // ... [Interface(\"HTS221 - Capacitive digital sensor for relative humidity and temperature\")] public class Hts221 : IDisposable { /* ... */ } CommandAttribute Commands can be something which can be executed on the device and they can be put only on methods. [Command] public void PlayTone(double frequency, int duraton) { /* ... */ } [Command] protected override void SetDefaultConfiguration() { /* ... */ } Type serialization Only simple types can be serialized: enums (without Flags attribute) values out of enum range are not permitted (i.e. bitwise combination) UnitsNet units basic C# types System.Numerics.Vector2, System.Numerics.Vector3, System.Numerics.Vector4 System.Drawing.Color"
  },
  "devicesdetails/System.Diagnostics.Stopwatch/README.html": {
    "href": "devicesdetails/System.Diagnostics.Stopwatch/README.html",
    "title": "System.Diagnostics.Stopwatch and DelayHelper | nanoFramework Documentation",
    "keywords": "System.Diagnostics.Stopwatch and DelayHelper Stopwatch implementation for .NET nanoFramework. Includes as well DelayHelper for precise Milliseconds and Microseconds delays. Note: this may not be precise enough in managed code. Depending on the platform, you may have to adjust the delays and also look at Thread.SpinWait function."
  },
  "devicesdetails/System.Drawing/README.html": {
    "href": "devicesdetails/System.Drawing/README.html",
    "title": "System.Drawing | nanoFramework Documentation",
    "keywords": "System.Drawing System.Drawing.Colors implementation for .NET nanoFramework. Note: this is just recommended to use for compatibility with the Iot.Device bindings. More work is currently done to create a proper graphic library for .NET nanoFramework."
  },
  "devicesdetails/System.Numerics/README.html": {
    "href": "devicesdetails/System.Numerics/README.html",
    "title": "System.Numerics | nanoFramework Documentation",
    "keywords": "System.Numerics System.Numerics for .NET nanoFramework implementation. Note: Matrix 4x4 and Plane are not implemented."
  },
  "devicesdetails/Tcs3472x/README.html": {
    "href": "devicesdetails/Tcs3472x/README.html",
    "title": "TCS3472x Sensors | nanoFramework Documentation",
    "keywords": "TCS3472x Sensors TCS3472x sensors are color I2C sensors. Documentation Device Family contains TCS34721, TCS34723, TCS34725 and TCS34727. TCS3472x datasheet You will find this device as \"RGB Color Sensor with IR filter and White LED - TCS34725\" Note: TCS34721 and TCS34723 have a default I2C address which is 0x39 while TCS34725 and TCS34727 have 0x29. Board Usage Create a Tcs3472xSensor class and pass the I2C device. Please see above for the default address depending on the chip you are using. The default one provided in the class is for the most popular ones so TCS34725 and TCS34727. var i2cSettings = new I2cConnectionSettings(1, Tcs3472xSensor.DefaultAddress); I2cDevice i2cDevice = I2cDevice.Create(i2cSettings); Tcs3472xSensor tcs3472X = new Tcs3472xSensor(i2cDevice); while(!Console.KeyAvailable) { Console.WriteLine($\"ID: {tcs3472X.ChipId} Gain: {tcs3472X.Gain} Time to wait: {tcs3472X.IntegrationTime}\"); var col = tcs3472X.GetColor(); Console.WriteLine($\"R: {col.R} G: {col.G} B: {col.B} A: {col.A} Color: {col.Name}\"); Console.WriteLine($\"Valid data: {tcs3472X.IsValidData} Clear Interrupt: {tcs3472X.IsClearInterrupt}\"); Thread.Sleep(1000); } You can as well adjust the time for integration, so the time needed to read the data either in the constructor either later one. Minimum time is 0.0024 seconds and maximum time is 7.4 seconds. This is not a linear function and it will be set to the closest lower value supported by the chip. when calling tcs3472X.GetColor() you get a Color type with RGB as the normal RGB. A contains the Clear value of the sensor."
  },
  "devicesdetails/Tm1637/README.html": {
    "href": "devicesdetails/Tm1637/README.html",
    "title": "TM1637 - Segment Display | nanoFramework Documentation",
    "keywords": "TM1637 - Segment Display TM1637 is a segments display with 6 characters Led controler. It uses a 2 wire implementation, one for the clock (CLK), one for the data (DIO). This chip can act as well as a key reader. This part has not been implemented. Only the Led display has been implemented. Most of its modern usages are for 4 to 6 segment displays. Documentation TM1637 datasheet Device family You can find this display as Grove elements as well as very cheap with no brand. A search on your favorite online shop will give you lots of options. Those simple displays are used a lot for simple clock for example. Testing was performed with a HiLetgo part . Usage You need to create a Tm1637 class with 2 pins, the clock one and the data one. Tm1637 tm1637 = new Tm1637(4, 0); Screen on, off, brightness It is possible and you have to turn the screen on when you want to use the Tm1637. tm1637.Brightness = 7; tm1637.ScreenOn = true; tm1637.ClearDisplay(); As an example, this will blink the screen: for (int i = 0; i < 10; i++) { tm1637.ScreenOn = !tm1637.ScreenOn; tm1637.Display(rawData); Thread.Sleep(500); } When adjusting the screen brightness from 0 to 7 where 7 is the maximum, the command is immediate. You can clear the display as well: tm1637.ClearDisplay(); Displaying pre build characters Characters are prebuild from 0 to F to facilitate hexadecimal displays on the segments. The following example will display the number 4 then 2 with a dot then A and F. Character[] toDisplay = new Character[4] { Character.Digit4, Character.Digit2 | Character.Dot, Character.Digit3, Character.Digit8 }; tm1637.Display(toDisplay); The maximum size of the buffer is 6. Displaying raw data You can as well display raw data like in the following example: // Displays couple of raw data Character[] rawData = new Character[6] { // All led on including the dot (Character)0b1111_1111, // All led off (Character)0b0000_0000, // top blanck, right on, turning like this including dot (Character)0b1010_1010, // top on, right black, turning like this no dot (Character)0b0101_0101, // half one half off Character.SegmentTop | Character.SegmentTopRight | Character.SegmentBottomRight | Character.SegmentBottom, // half off half on Character.SegmentTopLeft|Character.SegmentBottomLeft|Character.SegmentMiddle | Character.Dot, }; // If you have a 4 display, only the first 4 will be displayed // on a 6 segment one, all 6 will be displayed tm1637.Display(rawData); The maximum size of the buffer is 6. Segment order You can change the order of the characters. In some cases, especially when you have displays with 6 segments split with 2 displays of 3, the order may not be the one you expect. tm1637.CharacterOrder = new byte[] { 2, 1, 0, 5, 4, 3 }; Make sure you have a length of 6 and all numbers from 0 to 5."
  },
  "devicesdetails/Tsl256x/README.html": {
    "href": "devicesdetails/Tsl256x/README.html",
    "title": "TSL256x - Illuminance sensor | nanoFramework Documentation",
    "keywords": "TSL256x - Illuminance sensor TSL2560 and TSL2561 are illuminance sensor. They are light-to-digital converters that transform light intensity to a digital signal output capable of direct I2C (TSL2561) or SMBus (TSL2560) interface. Each device combines one broadband photodiode (visible plus infrared) and one infrared-responding photodiode on a single CMOS integrated circuit capable of providing a near-photopic response over an effective 20-bit dynamic range (16-bit resolution). Two integrating ADCs convert the photodiode currents to a digital output that represents the irradiance measured on each channel. This digital output can be input to a microprocessor where illuminance (ambient light level) in lux is derived using an empirical formula to approximate the human eye response. The TSL2560 device permits an SMB-Alert style interrupt, and the TSL2561 device supports a traditional level style interrupt that remains asserted until the firmware clears it. Documentation TSL256x datasheet Board Usage Basic usage TSL2560 and TSL2561 are designed to have an integration time and a gain for measuring the 2 ADC. The defaults are 402 milliseconds and a normal gain of x1. The basic usage is the following: I2cDevice i2cDevice = I2cDevice.Create(new I2cConnectionSettings(1, Tsl256x.DefaultI2cAddress)); Tsl256x tsl256X = new(i2cDevice, PackageType.Other); tsl256X.IntegrationTime = IntegrationTime.Integration402Milliseconds; tsl256X.Gain = Gain.Normal; var lux = tsl256X.MeasureAndGetIlluminance(); Console.WriteLine($\"Illuminance is {lux.Lux} Lux\"); notes : Be aware, there are 2 types of packaging the CS and the Others T, FN and CL. Refer to the documentation to understand which package you have on the board. This is an argument when creating the sensor as the calculation for the illuminance is different. There are 3 different possible I2C addresses for this device depending on how the address pin is setup: DefaultI2cAddress = 0x39: When address pin is to the ground SecondI2cAddress = 0x29: When address pin is floating ThirdI2cAddress = 0x49: When address pin is to VDD Check the version You can determine if you have a TSL2560 or TSL2561 version: var ver = tsl256X.Version; string msg = ver.Major & 0x01 == 0x01 ? $\"This is a TSL2561, version {ver}\" : $\"This is a TSL2560, version {ver}\"; Console.WriteLine(msg); Using interruptions You can set interruptions, you have different possible ones you can set thru the InterruptLevel : OutputDisabled: will disable the interrupt LevelInterrupt: will use the permanent interrupt you'll setup, see right after SmbAlertCompliant: will send an alert on the SMB bus (version TSL2560 only) on address 0b0000_1100 TestMode: will generate an interruption for test purpose The InterruptPersistence will allow you to select a specific timing for the interrupt: EveryAdc: each time you have a measurement AnyValueOutsideThreshold: any time a value will be outside of the setup threshold OutOfRangeXXIntegrationTimePeriods: where XX is from 2 to 15, will interrupt only if the value remains outside more than XX times The following example shows how to setup a basic interruption using test mode: Console.WriteLine(\"Set interruption to test. Read the interrupt pin\"); GpioController controller = new(); controller.OpenPin(PinInterrupt, PinMode.Input); tsl256X.InterruptControl = InterruptControl.TestMode; tsl256X.Enabled = true; while (controller.Read(PinInterrupt) == PinValue.High) { Thread.Sleep(1); } Console.WriteLine($\"Interrupt detected, read the value to clear the interrupt\"); tsl256X.GetRawChannels(out ushort ch0, out ushort ch1); You can setup interruptions on thresholds as well. You first need to setup a threshold and then the type of interruptions. // Adjust those values with a previous measurement to understand the conditions, find a level where then you can // hide the sensor with your arm and make it going under the minimum level or vice versa with a lamp tsl256X.SetThreshold(0x0000, 0x00FF); tsl256X.InterruptPersistence = InterruptPersistence.OutOfRange06IntegrationTimePeriods; tsl256X.InterruptControl = InterruptControl.LevelInterrupt; tsl256X.Power = true; while (controller.Read(PinInterrupt) == PinValue.High) { Thread.Sleep(1); } Console.WriteLine($\"Interrupt detected, read the value to clear the interrupt\"); tsl256X.GetRawChannels(out ch0, out ch1); Console.WriteLine($\"Raw data channel 0 {ch0}, channel 1 {ch1}\"); Manual integration You can set a manual integration as well. Be aware that you won't be able to easily calculate an illuminance equivalent. You need to use the manual integration functions offered: Console.WriteLine(\"This will use a manual integration for 2 seconds\"); tsl256X.StartManualIntegration(); Thread.Sleep(2000); tsl256X.StopManualIntegration(); tsl256X.GetRawChannels(out ch0, out ch1); Console.WriteLine($\"Raw data channel 0 {ch0}, channel 1 {ch1}\");"
  },
  "devicesdetails/Uln2003/README.html": {
    "href": "devicesdetails/Uln2003/README.html",
    "title": "28BYJ-48 Stepper Motor 5V 4-Phase 5-Wire & ULN2003 Driver Board | nanoFramework Documentation",
    "keywords": "28BYJ-48 Stepper Motor 5V 4-Phase 5-Wire & ULN2003 Driver Board A stepper motor is an electromechanical device which converts electrical pulses into discrete mechanical movements. The shaft or spindle of a stepper motor rotates in discrete step increments when electrical command pulses are applied to it in the proper sequence. The motors rotation has several direct relationships to these applied input pulses. The sequence of the applied pulses is directly related to the direction of motor shafts rotation. The speed of the motor shafts rotation is directly related to the frequency of the input pulses and the length of rotation is directly related to the number of input pulses applied.One of the most significant advantages of a stepper motor is its ability to be accurately controlled in an open loop system. Open loop control means no feedback information about position is needed. This type of control eliminates the need for expensive sensing and feedback devices such as optical encoders. Your position is known simply by keeping track of the input step pulses. Documentation The 28BYJ-48 is a small stepper motor suitable for a large range of applications. More information here [Stepper Motor 28BYJ-48] : http://www.geeetech.com/Documents/Stepper%20motor%20datasheet.pdf [ULN2003] : http://www.geeetech.com/Documents/ULN2003%20datasheet.pdf Board On schematics ULN2003APG driver is being used. You can use external power (9V as on scheme above) or just 5V Rapberry Pi PIN instead (Physical pin 2,4). Usage // Pinout for MCU please adapt depending on your MCU // Any regular GPIO will work const int bluePin = 4; const int pinkPin = 17; const int yellowPin = 27; const int orangePin = 22; using (Uln2003 motor = new Uln2003(bluePin, pinkPin, yellowPin, orangePin)) { while (true) { // Set the motor speed to 15 revolutions per minute. motor.RPM = 15; // Set the motor mode. motor.Mode = StepperMode.HalfStep; // The motor rotate 2048 steps clockwise (180 degrees for HalfStep mode). motor.Step(2048); motor.Mode = StepperMode.FullStepDualPhase; motor.RPM = 8; // The motor rotate 2048 steps counterclockwise (360 degrees for FullStepDualPhase mode). motor.Step(-2048); motor.Mode = StepperMode.HalfStep; motor.RPM = 1; motor.Step(4096); } }"
  },
  "devicesdetails/Vl53L0X/README.html": {
    "href": "devicesdetails/Vl53L0X/README.html",
    "title": "VL53L0X - distance sensor | nanoFramework Documentation",
    "keywords": "VL53L0X - distance sensor The VL53L0X sensor is a Time-to-Flight sensor measuring precisely distances. The sensor allows you to get precise short distance measurement (from 5 millimeters to 2 meters) as well as long distance measurement (up to 8 meters but with a decreased precision). This sensor is a laser ranging sensor. It is using laser pulses to measure the distances. Documentation VL53L0X datasheet You will find this device as \"Distance Sensor\" or \"Adafruit VL53L0X Time of Flight Distance Sensor - ~30 to 1000mm\" Board Usage Important : make sure you properly setup the I2C pins especially for ESP32 before creating the I2cDevice , make sure you install the nanoFramework.Hardware.ESP32 nuget : ////////////////////////////////////////////////////////////////////// // when connecting to an ESP32 device, need to configure the I2C GPIOs // used for the bus Configuration.SetPinFunction(21, DeviceFunction.I2C1_DATA); Configuration.SetPinFunction(22, DeviceFunction.I2C1_CLOCK); For other devices like STM32, please make sure you're using the preset pins for the I2C bus you want to use. All calibration and all setup of the sensor is done fully transparently for you. Just create a class and read either once the distance, either using the continuous measurement method. Vl53L0X vL53L0X = new Vl53L0X(I2cDevice.Create(new I2cConnectionSettings(1, Vl53L0X.DefaultI2cAddress))); Debug.WriteLine($\"Rev: {vL53L0X.Information.Revision}, Prod: {vL53L0X.Information.ProductId}, Mod: {vL53L0X.Information.ModuleId}\"); while (true) { try { Debug.WriteLine($\"Distance: {vL53L0X.Distance}\"); } catch (Exception ex) { Debug.WriteLine($\"Exception: {ex.Message}\"); } Thread.Sleep(500); } Be aware that when reading a distance using the Continuous or Single measurement feature, you can get an exception, you should trap it. You can as well get a single measurement, in this case, the precision can be lower. Use the property MeasurementMode to change the mode. You can adjust the type of measurement you want. By default, the sensor is put into long range. This does allow to have a quite accurate (+-5%) precision within 2 meters but still can measure distances up to 8 meters (accuracy much less correct). You can switch to short range using the SetPrecision function. If you want to setup your own mode, you should use in conjunction the SetSignalRateLimit and the SetVcselPulsePeriod functions plus the HighResolution property like in the below example: HighResolution = false; SetSignalRateLimit(0.25); SetVcselPulsePeriod(VcselType.VcselPeriodPreRange, PeriodPulse.Period14); SetVcselPulsePeriod(VcselType.VcselPeriodFinalRange, PeriodPulse.Period10); Please refer to the documentation to understand the impact of changing the various pulses as well as using the high resolution precision measurement. The sensor can't be precise in long range and in general, the longer it can see, the less precise are the data. High resolution will return a more precise measurement but mainly in short distance. Changing the default I2C address You can adjust the I2C address used for this sensor. Here is a code snippet explaining how to: // Code snippet to change the address of a sensor byte newAddress = 0x28; // You can change for any valid supported address I2cDevice connectionToCurrentAddress = I2cDevice.Create(new I2cConnectionSettings(1, Vl53L0X.DefaultI2cAddress)); Vl53L0X.ChangeI2cAddress(connectionToCurrentAddress, newAddress); I2cDevice connectionToChangedAddress = I2cDevice.Create(new I2cConnectionSettings(1, newAddress)); using Vl53L0X vlWithChangedAddress = new(connectionToChangedAddress); // Do what you'd like to do here // Soft reset the device to setup the default address again vlWithChangedAddress.Reset(); // Now the address is reset to the default one"
  },
  "devicesdetails/WeatherHelper/README.html": {
    "href": "devicesdetails/WeatherHelper/README.html",
    "title": "Iot.Device.WeatherHelper | nanoFramework Documentation",
    "keywords": "Iot.Device.WeatherHelper WeatherHelper for Iot.Device. See Bmp2xx for a detailed usage."
  },
  "devicesdetails/Ws28xx/README.html": {
    "href": "devicesdetails/Ws28xx/README.html",
    "title": "Ws28xx LED drivers | nanoFramework Documentation",
    "keywords": "Ws28xx LED drivers This binding allows you to update the RGB LEDs on Ws28xx and based strips and matrices. To see how to use the binding in code, see the sample . Documentation WS2812B: Datasheet WS2808: Datasheet Neo pixels guide Neo pixels x8 stick Board WS2812B Usage using System; using System.Collections.Generic; using System.Device.Spi; using System.Drawing; using Iot.Device.Graphics; using Iot.Device.Ws28xx; // Configure the count of pixels const int Count = 8; Console.Clear(); // Must specify pin functions on ESP32 Configuration.SetPinFunction(23, DeviceFunction.SPI2_MOSI); Configuration.SetPinFunction(19, DeviceFunction.SPI2_MISO); Configuration.SetPinFunction(18, DeviceFunction.SPI2_CLOCK); Configuration.SetPinFunction(22, DeviceFunction.ADC1_CH10); // Using VSPI on bus 2 for ESP32 and pin 22 for chipselect SpiConnectionSettings settings = new(2, 22) { ClockFrequency = 2_400_000, Mode = SpiMode.Mode0, DataBitLength = 8 }; using SpiDevice spi = SpiDevice.Create(settings); Ws28xx neo = new Ws2808(spi, count); //Ws28xx neo = new Ws2812b(spi, Count); while (true) { Rainbow(neo, Count); System.Threading.Thread.Sleep(100); } void Rainbow(Ws28xx neo, int count, int iterations = 1) { BitmapImage img = neo.Image; for (var i = 0; i < 255 * iterations; i++) { for (var j = 0; j < count; j++) { img.SetPixel(j, 0, Wheel((i + j) & 255)); } neo.Update(); } }"
  },
  "devicesdetails/Yx5300/README.html": {
    "href": "devicesdetails/Yx5300/README.html",
    "title": "YX5200/YX5300 - MP3 Player | nanoFramework Documentation",
    "keywords": "YX5200/YX5300 - MP3 Player Use this driver to control the Keyestudio YX5200-24SS MP3/Jaycar XC3748 Music Player Module This MP3 module is a MP3/WAV/WMA music player. It uses YX5200/YX5300 at its core and it plays files from an integrated SD card reader. It is connected with Serial port. Documentation See this article for a good oversight. Usage using IoT.Device.Yx5300; using nanoFramework.Hardware.Esp32; using System.Threading; const int FolderNumber = 1; const int FileNumber = 1; Yx5300 mp3Player; // Set GPIO functions for COM2 (this is UART2 on ESP32) Configuration.SetPinFunction(Gpio.IO17, DeviceFunction.COM2_TX); Configuration.SetPinFunction(Gpio.IO16, DeviceFunction.COM2_RX); // Open COM2 and instantiate player mp3Player = new Yx5300(\"COM2\"); // Start player and play some files Thread.Sleep(1000); mp3Player.Volume(Yx5300.MaxVolume / 2); // Repeat a folder mp3Player.PlayFolderRepeat(FolderNumber); mp3Player.Play(); // Repeat a file mp3Player.PlayTrackRepeat(FileNumber); mp3Player.Play(); Thread.Sleep(Timeout.Infinite);"
  },
  "index.html": {
    "href": "index.html",
    "title": ".NET nanoFramework | nanoFramework Documentation",
    "keywords": ".NET nanoFramework Our mantra is about making it easy to write C# code for embedded systems! And all what we're doing here is about that. This free and Open Source platform that enables the writing of managed code applications for constrained embedded devices. As a developer, you can use your powerful and familiar tools like Microsoft Visual Studio IDE and your .NET C# skills to write code on a microcontroller. .NET nanoFramework is supported by the .NET Foundation. Sponsoring .NET nanoFramework Most of the core team members and contributors are embedded systems enthusiasts, passionate about coding and people that like challenges. The work on .NET nanoFramework is done mostly in their free time. Some of the core members happen to work for companies that heavily sponsor .NET nanoFramework and offer their work hours to move the project forward. If you use .NET nanoFramework for as part of your product or just want to support it, please donate. This allows us to pay for the infrastructure costs and more time investment on the project. Besides monetary contributions, there are several other ways to contribute. Please read the documentation about this here . Sponsors Sponsors will get their logo and a link to their website on our GitHub readme and also on our home page. Backers Backers are individuals who contribute money to help support nanoFramework. Every little bit helps and we appreciate all contributions, even the smallest ones. What is .NET nanoFramework .NET nanoFramework is a free and Open Source platform that enables the writing of managed code applications for constrained embedded devices . It is suitable for many types of projects including IoT sensors, wearables, academic proof of concept, robotics, hobbyist/makers creations or even complex industrial equipment. It makes the development for such platforms easier, faster and less costly by giving embedded developers access to modern technologies and tools used by desktop application developers. Developers can harness the powerful and familiar Microsoft Visual Studio IDE and their .NET C# knowledge to quickly write code without having to worry about the low-level hardware intricacies of a microcontroller. Desktop .NET developers will feel \"at home\" and are able to use their skills in embedded systems development, enlarging the pool of qualified embedded developers. It includes a reduced version of the .NET Common Language Runtime (CLR) and features a subset of the .NET base class libraries along with the most common APIs included in .NET IoT allowing code reuse from .NET IoT applications, thousands of code examples and open source projects. Using Microsoft Visual Studio, a developer can deploy and debug the code directly on real hardware. The .NET nanoFramework platform picks up where .NET Micro Framework left off and uses some of its building blocks. Many of the original components were completely rewritten, others improved and some simply reused. A lot of code cleansing and improvements took place to make .NET nanoFramework fit for the future! Read along and find out why use .NET nanoFramework? You can watch this video from the Microsoft IoT Show featuring .NET nanoFramework connected to Azure IoT Hub, measuring a BMP280 sensors and using the unique deep sleep feature from MCU. A real life example with .NET nanoFramework: Documentation Explore our knowledge base, API documentation, samples, guides and tutorials. Getting started guides Build instructions Reference target boards Community provided target boards ESP32 specific content STM32 specific content TI specific content Know how to contribute to .NET nanoFramework project. Contribute to .NET nanoFramework Developer contribution"
  }
}